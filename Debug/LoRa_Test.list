
LoRa_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016c0  0800c680  0800c680  0000c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd40  0800dd40  0001008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd40  0800dd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd48  0800dd48  0001008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd48  0800dd48  0000dd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd4c  0800dd4c  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800dd50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  20000090  0800dddc  00010090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800dddc  000109e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a11  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387a  00000000  00000000  00023b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00027388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f68  00000000  00000000  00028770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa37  00000000  00000000  000296d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e08  00000000  00000000  0004410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093c42  00000000  00000000  0005cf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059f4  00000000  00000000  000f0b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	20000090 	.word	0x20000090
 800512c:	00000000 	.word	0x00000000
 8005130:	0800c668 	.word	0x0800c668

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	20000094 	.word	0x20000094
 800514c:	0800c668 	.word	0x0800c668

08005150 <__aeabi_fmul>:
 8005150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005158:	bf1e      	ittt	ne
 800515a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800515e:	ea92 0f0c 	teqne	r2, ip
 8005162:	ea93 0f0c 	teqne	r3, ip
 8005166:	d06f      	beq.n	8005248 <__aeabi_fmul+0xf8>
 8005168:	441a      	add	r2, r3
 800516a:	ea80 0c01 	eor.w	ip, r0, r1
 800516e:	0240      	lsls	r0, r0, #9
 8005170:	bf18      	it	ne
 8005172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005176:	d01e      	beq.n	80051b6 <__aeabi_fmul+0x66>
 8005178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800517c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005184:	fba0 3101 	umull	r3, r1, r0, r1
 8005188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800518c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005190:	bf3e      	ittt	cc
 8005192:	0049      	lslcc	r1, r1, #1
 8005194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005198:	005b      	lslcc	r3, r3, #1
 800519a:	ea40 0001 	orr.w	r0, r0, r1
 800519e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80051a2:	2afd      	cmp	r2, #253	; 0xfd
 80051a4:	d81d      	bhi.n	80051e2 <__aeabi_fmul+0x92>
 80051a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80051ae:	bf08      	it	eq
 80051b0:	f020 0001 	biceq.w	r0, r0, #1
 80051b4:	4770      	bx	lr
 80051b6:	f090 0f00 	teq	r0, #0
 80051ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80051be:	bf08      	it	eq
 80051c0:	0249      	lsleq	r1, r1, #9
 80051c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80051c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80051ca:	3a7f      	subs	r2, #127	; 0x7f
 80051cc:	bfc2      	ittt	gt
 80051ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80051d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80051d6:	4770      	bxgt	lr
 80051d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	3a01      	subs	r2, #1
 80051e2:	dc5d      	bgt.n	80052a0 <__aeabi_fmul+0x150>
 80051e4:	f112 0f19 	cmn.w	r2, #25
 80051e8:	bfdc      	itt	le
 80051ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80051ee:	4770      	bxle	lr
 80051f0:	f1c2 0200 	rsb	r2, r2, #0
 80051f4:	0041      	lsls	r1, r0, #1
 80051f6:	fa21 f102 	lsr.w	r1, r1, r2
 80051fa:	f1c2 0220 	rsb	r2, r2, #32
 80051fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8005202:	ea5f 0031 	movs.w	r0, r1, rrx
 8005206:	f140 0000 	adc.w	r0, r0, #0
 800520a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800520e:	bf08      	it	eq
 8005210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005214:	4770      	bx	lr
 8005216:	f092 0f00 	teq	r2, #0
 800521a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800521e:	bf02      	ittt	eq
 8005220:	0040      	lsleq	r0, r0, #1
 8005222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005226:	3a01      	subeq	r2, #1
 8005228:	d0f9      	beq.n	800521e <__aeabi_fmul+0xce>
 800522a:	ea40 000c 	orr.w	r0, r0, ip
 800522e:	f093 0f00 	teq	r3, #0
 8005232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005236:	bf02      	ittt	eq
 8005238:	0049      	lsleq	r1, r1, #1
 800523a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800523e:	3b01      	subeq	r3, #1
 8005240:	d0f9      	beq.n	8005236 <__aeabi_fmul+0xe6>
 8005242:	ea41 010c 	orr.w	r1, r1, ip
 8005246:	e78f      	b.n	8005168 <__aeabi_fmul+0x18>
 8005248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800524c:	ea92 0f0c 	teq	r2, ip
 8005250:	bf18      	it	ne
 8005252:	ea93 0f0c 	teqne	r3, ip
 8005256:	d00a      	beq.n	800526e <__aeabi_fmul+0x11e>
 8005258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800525c:	bf18      	it	ne
 800525e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005262:	d1d8      	bne.n	8005216 <__aeabi_fmul+0xc6>
 8005264:	ea80 0001 	eor.w	r0, r0, r1
 8005268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800526c:	4770      	bx	lr
 800526e:	f090 0f00 	teq	r0, #0
 8005272:	bf17      	itett	ne
 8005274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005278:	4608      	moveq	r0, r1
 800527a:	f091 0f00 	teqne	r1, #0
 800527e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005282:	d014      	beq.n	80052ae <__aeabi_fmul+0x15e>
 8005284:	ea92 0f0c 	teq	r2, ip
 8005288:	d101      	bne.n	800528e <__aeabi_fmul+0x13e>
 800528a:	0242      	lsls	r2, r0, #9
 800528c:	d10f      	bne.n	80052ae <__aeabi_fmul+0x15e>
 800528e:	ea93 0f0c 	teq	r3, ip
 8005292:	d103      	bne.n	800529c <__aeabi_fmul+0x14c>
 8005294:	024b      	lsls	r3, r1, #9
 8005296:	bf18      	it	ne
 8005298:	4608      	movne	r0, r1
 800529a:	d108      	bne.n	80052ae <__aeabi_fmul+0x15e>
 800529c:	ea80 0001 	eor.w	r0, r0, r1
 80052a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80052a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80052a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80052ac:	4770      	bx	lr
 80052ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80052b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80052b6:	4770      	bx	lr

080052b8 <__aeabi_drsub>:
 80052b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80052bc:	e002      	b.n	80052c4 <__adddf3>
 80052be:	bf00      	nop

080052c0 <__aeabi_dsub>:
 80052c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080052c4 <__adddf3>:
 80052c4:	b530      	push	{r4, r5, lr}
 80052c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80052ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80052ce:	ea94 0f05 	teq	r4, r5
 80052d2:	bf08      	it	eq
 80052d4:	ea90 0f02 	teqeq	r0, r2
 80052d8:	bf1f      	itttt	ne
 80052da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80052de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80052e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80052e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80052ea:	f000 80e2 	beq.w	80054b2 <__adddf3+0x1ee>
 80052ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80052f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80052f6:	bfb8      	it	lt
 80052f8:	426d      	neglt	r5, r5
 80052fa:	dd0c      	ble.n	8005316 <__adddf3+0x52>
 80052fc:	442c      	add	r4, r5
 80052fe:	ea80 0202 	eor.w	r2, r0, r2
 8005302:	ea81 0303 	eor.w	r3, r1, r3
 8005306:	ea82 0000 	eor.w	r0, r2, r0
 800530a:	ea83 0101 	eor.w	r1, r3, r1
 800530e:	ea80 0202 	eor.w	r2, r0, r2
 8005312:	ea81 0303 	eor.w	r3, r1, r3
 8005316:	2d36      	cmp	r5, #54	; 0x36
 8005318:	bf88      	it	hi
 800531a:	bd30      	pophi	{r4, r5, pc}
 800531c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800532c:	d002      	beq.n	8005334 <__adddf3+0x70>
 800532e:	4240      	negs	r0, r0
 8005330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800533c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005340:	d002      	beq.n	8005348 <__adddf3+0x84>
 8005342:	4252      	negs	r2, r2
 8005344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005348:	ea94 0f05 	teq	r4, r5
 800534c:	f000 80a7 	beq.w	800549e <__adddf3+0x1da>
 8005350:	f1a4 0401 	sub.w	r4, r4, #1
 8005354:	f1d5 0e20 	rsbs	lr, r5, #32
 8005358:	db0d      	blt.n	8005376 <__adddf3+0xb2>
 800535a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800535e:	fa22 f205 	lsr.w	r2, r2, r5
 8005362:	1880      	adds	r0, r0, r2
 8005364:	f141 0100 	adc.w	r1, r1, #0
 8005368:	fa03 f20e 	lsl.w	r2, r3, lr
 800536c:	1880      	adds	r0, r0, r2
 800536e:	fa43 f305 	asr.w	r3, r3, r5
 8005372:	4159      	adcs	r1, r3
 8005374:	e00e      	b.n	8005394 <__adddf3+0xd0>
 8005376:	f1a5 0520 	sub.w	r5, r5, #32
 800537a:	f10e 0e20 	add.w	lr, lr, #32
 800537e:	2a01      	cmp	r2, #1
 8005380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005384:	bf28      	it	cs
 8005386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800538a:	fa43 f305 	asr.w	r3, r3, r5
 800538e:	18c0      	adds	r0, r0, r3
 8005390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005398:	d507      	bpl.n	80053aa <__adddf3+0xe6>
 800539a:	f04f 0e00 	mov.w	lr, #0
 800539e:	f1dc 0c00 	rsbs	ip, ip, #0
 80053a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80053a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80053aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80053ae:	d31b      	bcc.n	80053e8 <__adddf3+0x124>
 80053b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80053b4:	d30c      	bcc.n	80053d0 <__adddf3+0x10c>
 80053b6:	0849      	lsrs	r1, r1, #1
 80053b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80053bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80053c0:	f104 0401 	add.w	r4, r4, #1
 80053c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80053c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80053cc:	f080 809a 	bcs.w	8005504 <__adddf3+0x240>
 80053d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80053d4:	bf08      	it	eq
 80053d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80053da:	f150 0000 	adcs.w	r0, r0, #0
 80053de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80053e2:	ea41 0105 	orr.w	r1, r1, r5
 80053e6:	bd30      	pop	{r4, r5, pc}
 80053e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80053ec:	4140      	adcs	r0, r0
 80053ee:	eb41 0101 	adc.w	r1, r1, r1
 80053f2:	3c01      	subs	r4, #1
 80053f4:	bf28      	it	cs
 80053f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80053fa:	d2e9      	bcs.n	80053d0 <__adddf3+0x10c>
 80053fc:	f091 0f00 	teq	r1, #0
 8005400:	bf04      	itt	eq
 8005402:	4601      	moveq	r1, r0
 8005404:	2000      	moveq	r0, #0
 8005406:	fab1 f381 	clz	r3, r1
 800540a:	bf08      	it	eq
 800540c:	3320      	addeq	r3, #32
 800540e:	f1a3 030b 	sub.w	r3, r3, #11
 8005412:	f1b3 0220 	subs.w	r2, r3, #32
 8005416:	da0c      	bge.n	8005432 <__adddf3+0x16e>
 8005418:	320c      	adds	r2, #12
 800541a:	dd08      	ble.n	800542e <__adddf3+0x16a>
 800541c:	f102 0c14 	add.w	ip, r2, #20
 8005420:	f1c2 020c 	rsb	r2, r2, #12
 8005424:	fa01 f00c 	lsl.w	r0, r1, ip
 8005428:	fa21 f102 	lsr.w	r1, r1, r2
 800542c:	e00c      	b.n	8005448 <__adddf3+0x184>
 800542e:	f102 0214 	add.w	r2, r2, #20
 8005432:	bfd8      	it	le
 8005434:	f1c2 0c20 	rsble	ip, r2, #32
 8005438:	fa01 f102 	lsl.w	r1, r1, r2
 800543c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005440:	bfdc      	itt	le
 8005442:	ea41 010c 	orrle.w	r1, r1, ip
 8005446:	4090      	lslle	r0, r2
 8005448:	1ae4      	subs	r4, r4, r3
 800544a:	bfa2      	ittt	ge
 800544c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005450:	4329      	orrge	r1, r5
 8005452:	bd30      	popge	{r4, r5, pc}
 8005454:	ea6f 0404 	mvn.w	r4, r4
 8005458:	3c1f      	subs	r4, #31
 800545a:	da1c      	bge.n	8005496 <__adddf3+0x1d2>
 800545c:	340c      	adds	r4, #12
 800545e:	dc0e      	bgt.n	800547e <__adddf3+0x1ba>
 8005460:	f104 0414 	add.w	r4, r4, #20
 8005464:	f1c4 0220 	rsb	r2, r4, #32
 8005468:	fa20 f004 	lsr.w	r0, r0, r4
 800546c:	fa01 f302 	lsl.w	r3, r1, r2
 8005470:	ea40 0003 	orr.w	r0, r0, r3
 8005474:	fa21 f304 	lsr.w	r3, r1, r4
 8005478:	ea45 0103 	orr.w	r1, r5, r3
 800547c:	bd30      	pop	{r4, r5, pc}
 800547e:	f1c4 040c 	rsb	r4, r4, #12
 8005482:	f1c4 0220 	rsb	r2, r4, #32
 8005486:	fa20 f002 	lsr.w	r0, r0, r2
 800548a:	fa01 f304 	lsl.w	r3, r1, r4
 800548e:	ea40 0003 	orr.w	r0, r0, r3
 8005492:	4629      	mov	r1, r5
 8005494:	bd30      	pop	{r4, r5, pc}
 8005496:	fa21 f004 	lsr.w	r0, r1, r4
 800549a:	4629      	mov	r1, r5
 800549c:	bd30      	pop	{r4, r5, pc}
 800549e:	f094 0f00 	teq	r4, #0
 80054a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80054a6:	bf06      	itte	eq
 80054a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80054ac:	3401      	addeq	r4, #1
 80054ae:	3d01      	subne	r5, #1
 80054b0:	e74e      	b.n	8005350 <__adddf3+0x8c>
 80054b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80054b6:	bf18      	it	ne
 80054b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80054bc:	d029      	beq.n	8005512 <__adddf3+0x24e>
 80054be:	ea94 0f05 	teq	r4, r5
 80054c2:	bf08      	it	eq
 80054c4:	ea90 0f02 	teqeq	r0, r2
 80054c8:	d005      	beq.n	80054d6 <__adddf3+0x212>
 80054ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80054ce:	bf04      	itt	eq
 80054d0:	4619      	moveq	r1, r3
 80054d2:	4610      	moveq	r0, r2
 80054d4:	bd30      	pop	{r4, r5, pc}
 80054d6:	ea91 0f03 	teq	r1, r3
 80054da:	bf1e      	ittt	ne
 80054dc:	2100      	movne	r1, #0
 80054de:	2000      	movne	r0, #0
 80054e0:	bd30      	popne	{r4, r5, pc}
 80054e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80054e6:	d105      	bne.n	80054f4 <__adddf3+0x230>
 80054e8:	0040      	lsls	r0, r0, #1
 80054ea:	4149      	adcs	r1, r1
 80054ec:	bf28      	it	cs
 80054ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80054f2:	bd30      	pop	{r4, r5, pc}
 80054f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80054f8:	bf3c      	itt	cc
 80054fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80054fe:	bd30      	popcc	{r4, r5, pc}
 8005500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800550c:	f04f 0000 	mov.w	r0, #0
 8005510:	bd30      	pop	{r4, r5, pc}
 8005512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005516:	bf1a      	itte	ne
 8005518:	4619      	movne	r1, r3
 800551a:	4610      	movne	r0, r2
 800551c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005520:	bf1c      	itt	ne
 8005522:	460b      	movne	r3, r1
 8005524:	4602      	movne	r2, r0
 8005526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800552a:	bf06      	itte	eq
 800552c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005530:	ea91 0f03 	teqeq	r1, r3
 8005534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005538:	bd30      	pop	{r4, r5, pc}
 800553a:	bf00      	nop

0800553c <__aeabi_ui2d>:
 800553c:	f090 0f00 	teq	r0, #0
 8005540:	bf04      	itt	eq
 8005542:	2100      	moveq	r1, #0
 8005544:	4770      	bxeq	lr
 8005546:	b530      	push	{r4, r5, lr}
 8005548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800554c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005550:	f04f 0500 	mov.w	r5, #0
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	e750      	b.n	80053fc <__adddf3+0x138>
 800555a:	bf00      	nop

0800555c <__aeabi_i2d>:
 800555c:	f090 0f00 	teq	r0, #0
 8005560:	bf04      	itt	eq
 8005562:	2100      	moveq	r1, #0
 8005564:	4770      	bxeq	lr
 8005566:	b530      	push	{r4, r5, lr}
 8005568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800556c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005574:	bf48      	it	mi
 8005576:	4240      	negmi	r0, r0
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	e73e      	b.n	80053fc <__adddf3+0x138>
 800557e:	bf00      	nop

08005580 <__aeabi_f2d>:
 8005580:	0042      	lsls	r2, r0, #1
 8005582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005586:	ea4f 0131 	mov.w	r1, r1, rrx
 800558a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800558e:	bf1f      	itttt	ne
 8005590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800559c:	4770      	bxne	lr
 800559e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80055a2:	bf08      	it	eq
 80055a4:	4770      	bxeq	lr
 80055a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80055aa:	bf04      	itt	eq
 80055ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80055b0:	4770      	bxeq	lr
 80055b2:	b530      	push	{r4, r5, lr}
 80055b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80055b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80055bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80055c0:	e71c      	b.n	80053fc <__adddf3+0x138>
 80055c2:	bf00      	nop

080055c4 <__aeabi_ul2d>:
 80055c4:	ea50 0201 	orrs.w	r2, r0, r1
 80055c8:	bf08      	it	eq
 80055ca:	4770      	bxeq	lr
 80055cc:	b530      	push	{r4, r5, lr}
 80055ce:	f04f 0500 	mov.w	r5, #0
 80055d2:	e00a      	b.n	80055ea <__aeabi_l2d+0x16>

080055d4 <__aeabi_l2d>:
 80055d4:	ea50 0201 	orrs.w	r2, r0, r1
 80055d8:	bf08      	it	eq
 80055da:	4770      	bxeq	lr
 80055dc:	b530      	push	{r4, r5, lr}
 80055de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80055e2:	d502      	bpl.n	80055ea <__aeabi_l2d+0x16>
 80055e4:	4240      	negs	r0, r0
 80055e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80055ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80055ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80055f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80055f6:	f43f aed8 	beq.w	80053aa <__adddf3+0xe6>
 80055fa:	f04f 0203 	mov.w	r2, #3
 80055fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005602:	bf18      	it	ne
 8005604:	3203      	addne	r2, #3
 8005606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800560a:	bf18      	it	ne
 800560c:	3203      	addne	r2, #3
 800560e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005612:	f1c2 0320 	rsb	r3, r2, #32
 8005616:	fa00 fc03 	lsl.w	ip, r0, r3
 800561a:	fa20 f002 	lsr.w	r0, r0, r2
 800561e:	fa01 fe03 	lsl.w	lr, r1, r3
 8005622:	ea40 000e 	orr.w	r0, r0, lr
 8005626:	fa21 f102 	lsr.w	r1, r1, r2
 800562a:	4414      	add	r4, r2
 800562c:	e6bd      	b.n	80053aa <__adddf3+0xe6>
 800562e:	bf00      	nop

08005630 <__aeabi_dmul>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800563a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800563e:	bf1d      	ittte	ne
 8005640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005644:	ea94 0f0c 	teqne	r4, ip
 8005648:	ea95 0f0c 	teqne	r5, ip
 800564c:	f000 f8de 	bleq	800580c <__aeabi_dmul+0x1dc>
 8005650:	442c      	add	r4, r5
 8005652:	ea81 0603 	eor.w	r6, r1, r3
 8005656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800565a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800565e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005662:	bf18      	it	ne
 8005664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800566c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005670:	d038      	beq.n	80056e4 <__aeabi_dmul+0xb4>
 8005672:	fba0 ce02 	umull	ip, lr, r0, r2
 8005676:	f04f 0500 	mov.w	r5, #0
 800567a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800567e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005686:	f04f 0600 	mov.w	r6, #0
 800568a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800568e:	f09c 0f00 	teq	ip, #0
 8005692:	bf18      	it	ne
 8005694:	f04e 0e01 	orrne.w	lr, lr, #1
 8005698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800569c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80056a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80056a4:	d204      	bcs.n	80056b0 <__aeabi_dmul+0x80>
 80056a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80056aa:	416d      	adcs	r5, r5
 80056ac:	eb46 0606 	adc.w	r6, r6, r6
 80056b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80056b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80056b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80056bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80056c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80056c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80056c8:	bf88      	it	hi
 80056ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80056ce:	d81e      	bhi.n	800570e <__aeabi_dmul+0xde>
 80056d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80056d4:	bf08      	it	eq
 80056d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80056da:	f150 0000 	adcs.w	r0, r0, #0
 80056de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80056e8:	ea46 0101 	orr.w	r1, r6, r1
 80056ec:	ea40 0002 	orr.w	r0, r0, r2
 80056f0:	ea81 0103 	eor.w	r1, r1, r3
 80056f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80056f8:	bfc2      	ittt	gt
 80056fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80056fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005702:	bd70      	popgt	{r4, r5, r6, pc}
 8005704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005708:	f04f 0e00 	mov.w	lr, #0
 800570c:	3c01      	subs	r4, #1
 800570e:	f300 80ab 	bgt.w	8005868 <__aeabi_dmul+0x238>
 8005712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005716:	bfde      	ittt	le
 8005718:	2000      	movle	r0, #0
 800571a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800571e:	bd70      	pople	{r4, r5, r6, pc}
 8005720:	f1c4 0400 	rsb	r4, r4, #0
 8005724:	3c20      	subs	r4, #32
 8005726:	da35      	bge.n	8005794 <__aeabi_dmul+0x164>
 8005728:	340c      	adds	r4, #12
 800572a:	dc1b      	bgt.n	8005764 <__aeabi_dmul+0x134>
 800572c:	f104 0414 	add.w	r4, r4, #20
 8005730:	f1c4 0520 	rsb	r5, r4, #32
 8005734:	fa00 f305 	lsl.w	r3, r0, r5
 8005738:	fa20 f004 	lsr.w	r0, r0, r4
 800573c:	fa01 f205 	lsl.w	r2, r1, r5
 8005740:	ea40 0002 	orr.w	r0, r0, r2
 8005744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800574c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005750:	fa21 f604 	lsr.w	r6, r1, r4
 8005754:	eb42 0106 	adc.w	r1, r2, r6
 8005758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800575c:	bf08      	it	eq
 800575e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	f1c4 040c 	rsb	r4, r4, #12
 8005768:	f1c4 0520 	rsb	r5, r4, #32
 800576c:	fa00 f304 	lsl.w	r3, r0, r4
 8005770:	fa20 f005 	lsr.w	r0, r0, r5
 8005774:	fa01 f204 	lsl.w	r2, r1, r4
 8005778:	ea40 0002 	orr.w	r0, r0, r2
 800577c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005784:	f141 0100 	adc.w	r1, r1, #0
 8005788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800578c:	bf08      	it	eq
 800578e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	f1c4 0520 	rsb	r5, r4, #32
 8005798:	fa00 f205 	lsl.w	r2, r0, r5
 800579c:	ea4e 0e02 	orr.w	lr, lr, r2
 80057a0:	fa20 f304 	lsr.w	r3, r0, r4
 80057a4:	fa01 f205 	lsl.w	r2, r1, r5
 80057a8:	ea43 0302 	orr.w	r3, r3, r2
 80057ac:	fa21 f004 	lsr.w	r0, r1, r4
 80057b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057b4:	fa21 f204 	lsr.w	r2, r1, r4
 80057b8:	ea20 0002 	bic.w	r0, r0, r2
 80057bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80057c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80057c4:	bf08      	it	eq
 80057c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f094 0f00 	teq	r4, #0
 80057d0:	d10f      	bne.n	80057f2 <__aeabi_dmul+0x1c2>
 80057d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80057d6:	0040      	lsls	r0, r0, #1
 80057d8:	eb41 0101 	adc.w	r1, r1, r1
 80057dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80057e0:	bf08      	it	eq
 80057e2:	3c01      	subeq	r4, #1
 80057e4:	d0f7      	beq.n	80057d6 <__aeabi_dmul+0x1a6>
 80057e6:	ea41 0106 	orr.w	r1, r1, r6
 80057ea:	f095 0f00 	teq	r5, #0
 80057ee:	bf18      	it	ne
 80057f0:	4770      	bxne	lr
 80057f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80057f6:	0052      	lsls	r2, r2, #1
 80057f8:	eb43 0303 	adc.w	r3, r3, r3
 80057fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005800:	bf08      	it	eq
 8005802:	3d01      	subeq	r5, #1
 8005804:	d0f7      	beq.n	80057f6 <__aeabi_dmul+0x1c6>
 8005806:	ea43 0306 	orr.w	r3, r3, r6
 800580a:	4770      	bx	lr
 800580c:	ea94 0f0c 	teq	r4, ip
 8005810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005814:	bf18      	it	ne
 8005816:	ea95 0f0c 	teqne	r5, ip
 800581a:	d00c      	beq.n	8005836 <__aeabi_dmul+0x206>
 800581c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005820:	bf18      	it	ne
 8005822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005826:	d1d1      	bne.n	80057cc <__aeabi_dmul+0x19c>
 8005828:	ea81 0103 	eor.w	r1, r1, r3
 800582c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005830:	f04f 0000 	mov.w	r0, #0
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800583a:	bf06      	itte	eq
 800583c:	4610      	moveq	r0, r2
 800583e:	4619      	moveq	r1, r3
 8005840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005844:	d019      	beq.n	800587a <__aeabi_dmul+0x24a>
 8005846:	ea94 0f0c 	teq	r4, ip
 800584a:	d102      	bne.n	8005852 <__aeabi_dmul+0x222>
 800584c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005850:	d113      	bne.n	800587a <__aeabi_dmul+0x24a>
 8005852:	ea95 0f0c 	teq	r5, ip
 8005856:	d105      	bne.n	8005864 <__aeabi_dmul+0x234>
 8005858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800585c:	bf1c      	itt	ne
 800585e:	4610      	movne	r0, r2
 8005860:	4619      	movne	r1, r3
 8005862:	d10a      	bne.n	800587a <__aeabi_dmul+0x24a>
 8005864:	ea81 0103 	eor.w	r1, r1, r3
 8005868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800586c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005874:	f04f 0000 	mov.w	r0, #0
 8005878:	bd70      	pop	{r4, r5, r6, pc}
 800587a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800587e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005882:	bd70      	pop	{r4, r5, r6, pc}

08005884 <__aeabi_ddiv>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800588a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800588e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005892:	bf1d      	ittte	ne
 8005894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005898:	ea94 0f0c 	teqne	r4, ip
 800589c:	ea95 0f0c 	teqne	r5, ip
 80058a0:	f000 f8a7 	bleq	80059f2 <__aeabi_ddiv+0x16e>
 80058a4:	eba4 0405 	sub.w	r4, r4, r5
 80058a8:	ea81 0e03 	eor.w	lr, r1, r3
 80058ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80058b4:	f000 8088 	beq.w	80059c8 <__aeabi_ddiv+0x144>
 80058b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80058bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80058c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80058c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80058c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80058cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80058d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80058d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80058d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80058dc:	429d      	cmp	r5, r3
 80058de:	bf08      	it	eq
 80058e0:	4296      	cmpeq	r6, r2
 80058e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80058e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80058ea:	d202      	bcs.n	80058f2 <__aeabi_ddiv+0x6e>
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80058f2:	1ab6      	subs	r6, r6, r2
 80058f4:	eb65 0503 	sbc.w	r5, r5, r3
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80058fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005906:	ebb6 0e02 	subs.w	lr, r6, r2
 800590a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800590e:	bf22      	ittt	cs
 8005910:	1ab6      	subcs	r6, r6, r2
 8005912:	4675      	movcs	r5, lr
 8005914:	ea40 000c 	orrcs.w	r0, r0, ip
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	ea4f 0232 	mov.w	r2, r2, rrx
 800591e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005926:	bf22      	ittt	cs
 8005928:	1ab6      	subcs	r6, r6, r2
 800592a:	4675      	movcs	r5, lr
 800592c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	ea4f 0232 	mov.w	r2, r2, rrx
 8005936:	ebb6 0e02 	subs.w	lr, r6, r2
 800593a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800593e:	bf22      	ittt	cs
 8005940:	1ab6      	subcs	r6, r6, r2
 8005942:	4675      	movcs	r5, lr
 8005944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	ea4f 0232 	mov.w	r2, r2, rrx
 800594e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005956:	bf22      	ittt	cs
 8005958:	1ab6      	subcs	r6, r6, r2
 800595a:	4675      	movcs	r5, lr
 800595c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005960:	ea55 0e06 	orrs.w	lr, r5, r6
 8005964:	d018      	beq.n	8005998 <__aeabi_ddiv+0x114>
 8005966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800596a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800596e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800597a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800597e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005982:	d1c0      	bne.n	8005906 <__aeabi_ddiv+0x82>
 8005984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005988:	d10b      	bne.n	80059a2 <__aeabi_ddiv+0x11e>
 800598a:	ea41 0100 	orr.w	r1, r1, r0
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005996:	e7b6      	b.n	8005906 <__aeabi_ddiv+0x82>
 8005998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800599c:	bf04      	itt	eq
 800599e:	4301      	orreq	r1, r0
 80059a0:	2000      	moveq	r0, #0
 80059a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80059a6:	bf88      	it	hi
 80059a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80059ac:	f63f aeaf 	bhi.w	800570e <__aeabi_dmul+0xde>
 80059b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80059b4:	bf04      	itt	eq
 80059b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80059ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80059be:	f150 0000 	adcs.w	r0, r0, #0
 80059c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80059cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80059d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80059d4:	bfc2      	ittt	gt
 80059d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80059da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80059de:	bd70      	popgt	{r4, r5, r6, pc}
 80059e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80059e4:	f04f 0e00 	mov.w	lr, #0
 80059e8:	3c01      	subs	r4, #1
 80059ea:	e690      	b.n	800570e <__aeabi_dmul+0xde>
 80059ec:	ea45 0e06 	orr.w	lr, r5, r6
 80059f0:	e68d      	b.n	800570e <__aeabi_dmul+0xde>
 80059f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80059f6:	ea94 0f0c 	teq	r4, ip
 80059fa:	bf08      	it	eq
 80059fc:	ea95 0f0c 	teqeq	r5, ip
 8005a00:	f43f af3b 	beq.w	800587a <__aeabi_dmul+0x24a>
 8005a04:	ea94 0f0c 	teq	r4, ip
 8005a08:	d10a      	bne.n	8005a20 <__aeabi_ddiv+0x19c>
 8005a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005a0e:	f47f af34 	bne.w	800587a <__aeabi_dmul+0x24a>
 8005a12:	ea95 0f0c 	teq	r5, ip
 8005a16:	f47f af25 	bne.w	8005864 <__aeabi_dmul+0x234>
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	e72c      	b.n	800587a <__aeabi_dmul+0x24a>
 8005a20:	ea95 0f0c 	teq	r5, ip
 8005a24:	d106      	bne.n	8005a34 <__aeabi_ddiv+0x1b0>
 8005a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005a2a:	f43f aefd 	beq.w	8005828 <__aeabi_dmul+0x1f8>
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	e722      	b.n	800587a <__aeabi_dmul+0x24a>
 8005a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005a38:	bf18      	it	ne
 8005a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005a3e:	f47f aec5 	bne.w	80057cc <__aeabi_dmul+0x19c>
 8005a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005a46:	f47f af0d 	bne.w	8005864 <__aeabi_dmul+0x234>
 8005a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005a4e:	f47f aeeb 	bne.w	8005828 <__aeabi_dmul+0x1f8>
 8005a52:	e712      	b.n	800587a <__aeabi_dmul+0x24a>

08005a54 <__aeabi_d2f>:
 8005a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005a5c:	bf24      	itt	cs
 8005a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005a66:	d90d      	bls.n	8005a84 <__aeabi_d2f+0x30>
 8005a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005a7c:	bf08      	it	eq
 8005a7e:	f020 0001 	biceq.w	r0, r0, #1
 8005a82:	4770      	bx	lr
 8005a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005a88:	d121      	bne.n	8005ace <__aeabi_d2f+0x7a>
 8005a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005a8e:	bfbc      	itt	lt
 8005a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005a94:	4770      	bxlt	lr
 8005a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005a9e:	f1c2 0218 	rsb	r2, r2, #24
 8005aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8005aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8005aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8005aae:	bf18      	it	ne
 8005ab0:	f040 0001 	orrne.w	r0, r0, #1
 8005ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005ac0:	ea40 000c 	orr.w	r0, r0, ip
 8005ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8005ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005acc:	e7cc      	b.n	8005a68 <__aeabi_d2f+0x14>
 8005ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005ad2:	d107      	bne.n	8005ae4 <__aeabi_d2f+0x90>
 8005ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005ad8:	bf1e      	ittt	ne
 8005ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005ae2:	4770      	bxne	lr
 8005ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <__aeabi_frsub>:
 8005af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005af8:	e002      	b.n	8005b00 <__addsf3>
 8005afa:	bf00      	nop

08005afc <__aeabi_fsub>:
 8005afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005b00 <__addsf3>:
 8005b00:	0042      	lsls	r2, r0, #1
 8005b02:	bf1f      	itttt	ne
 8005b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005b08:	ea92 0f03 	teqne	r2, r3
 8005b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b14:	d06a      	beq.n	8005bec <__addsf3+0xec>
 8005b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005b1e:	bfc1      	itttt	gt
 8005b20:	18d2      	addgt	r2, r2, r3
 8005b22:	4041      	eorgt	r1, r0
 8005b24:	4048      	eorgt	r0, r1
 8005b26:	4041      	eorgt	r1, r0
 8005b28:	bfb8      	it	lt
 8005b2a:	425b      	neglt	r3, r3
 8005b2c:	2b19      	cmp	r3, #25
 8005b2e:	bf88      	it	hi
 8005b30:	4770      	bxhi	lr
 8005b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005b3e:	bf18      	it	ne
 8005b40:	4240      	negne	r0, r0
 8005b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005b4e:	bf18      	it	ne
 8005b50:	4249      	negne	r1, r1
 8005b52:	ea92 0f03 	teq	r2, r3
 8005b56:	d03f      	beq.n	8005bd8 <__addsf3+0xd8>
 8005b58:	f1a2 0201 	sub.w	r2, r2, #1
 8005b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8005b60:	eb10 000c 	adds.w	r0, r0, ip
 8005b64:	f1c3 0320 	rsb	r3, r3, #32
 8005b68:	fa01 f103 	lsl.w	r1, r1, r3
 8005b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005b70:	d502      	bpl.n	8005b78 <__addsf3+0x78>
 8005b72:	4249      	negs	r1, r1
 8005b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8005b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005b7c:	d313      	bcc.n	8005ba6 <__addsf3+0xa6>
 8005b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005b82:	d306      	bcc.n	8005b92 <__addsf3+0x92>
 8005b84:	0840      	lsrs	r0, r0, #1
 8005b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8005b8a:	f102 0201 	add.w	r2, r2, #1
 8005b8e:	2afe      	cmp	r2, #254	; 0xfe
 8005b90:	d251      	bcs.n	8005c36 <__addsf3+0x136>
 8005b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8005b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005b9a:	bf08      	it	eq
 8005b9c:	f020 0001 	biceq.w	r0, r0, #1
 8005ba0:	ea40 0003 	orr.w	r0, r0, r3
 8005ba4:	4770      	bx	lr
 8005ba6:	0049      	lsls	r1, r1, #1
 8005ba8:	eb40 0000 	adc.w	r0, r0, r0
 8005bac:	3a01      	subs	r2, #1
 8005bae:	bf28      	it	cs
 8005bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8005bb4:	d2ed      	bcs.n	8005b92 <__addsf3+0x92>
 8005bb6:	fab0 fc80 	clz	ip, r0
 8005bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8005bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8005bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8005bc6:	bfaa      	itet	ge
 8005bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005bcc:	4252      	neglt	r2, r2
 8005bce:	4318      	orrge	r0, r3
 8005bd0:	bfbc      	itt	lt
 8005bd2:	40d0      	lsrlt	r0, r2
 8005bd4:	4318      	orrlt	r0, r3
 8005bd6:	4770      	bx	lr
 8005bd8:	f092 0f00 	teq	r2, #0
 8005bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8005be0:	bf06      	itte	eq
 8005be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005be6:	3201      	addeq	r2, #1
 8005be8:	3b01      	subne	r3, #1
 8005bea:	e7b5      	b.n	8005b58 <__addsf3+0x58>
 8005bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005bf4:	bf18      	it	ne
 8005bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005bfa:	d021      	beq.n	8005c40 <__addsf3+0x140>
 8005bfc:	ea92 0f03 	teq	r2, r3
 8005c00:	d004      	beq.n	8005c0c <__addsf3+0x10c>
 8005c02:	f092 0f00 	teq	r2, #0
 8005c06:	bf08      	it	eq
 8005c08:	4608      	moveq	r0, r1
 8005c0a:	4770      	bx	lr
 8005c0c:	ea90 0f01 	teq	r0, r1
 8005c10:	bf1c      	itt	ne
 8005c12:	2000      	movne	r0, #0
 8005c14:	4770      	bxne	lr
 8005c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8005c1a:	d104      	bne.n	8005c26 <__addsf3+0x126>
 8005c1c:	0040      	lsls	r0, r0, #1
 8005c1e:	bf28      	it	cs
 8005c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005c24:	4770      	bx	lr
 8005c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8005c2a:	bf3c      	itt	cc
 8005c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005c30:	4770      	bxcc	lr
 8005c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8005c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c3e:	4770      	bx	lr
 8005c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005c44:	bf16      	itet	ne
 8005c46:	4608      	movne	r0, r1
 8005c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005c4c:	4601      	movne	r1, r0
 8005c4e:	0242      	lsls	r2, r0, #9
 8005c50:	bf06      	itte	eq
 8005c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005c56:	ea90 0f01 	teqeq	r0, r1
 8005c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005c5e:	4770      	bx	lr

08005c60 <__aeabi_ui2f>:
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e004      	b.n	8005c70 <__aeabi_i2f+0x8>
 8005c66:	bf00      	nop

08005c68 <__aeabi_i2f>:
 8005c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005c6c:	bf48      	it	mi
 8005c6e:	4240      	negmi	r0, r0
 8005c70:	ea5f 0c00 	movs.w	ip, r0
 8005c74:	bf08      	it	eq
 8005c76:	4770      	bxeq	lr
 8005c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	e01c      	b.n	8005cbe <__aeabi_l2f+0x2a>

08005c84 <__aeabi_ul2f>:
 8005c84:	ea50 0201 	orrs.w	r2, r0, r1
 8005c88:	bf08      	it	eq
 8005c8a:	4770      	bxeq	lr
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e00a      	b.n	8005ca8 <__aeabi_l2f+0x14>
 8005c92:	bf00      	nop

08005c94 <__aeabi_l2f>:
 8005c94:	ea50 0201 	orrs.w	r2, r0, r1
 8005c98:	bf08      	it	eq
 8005c9a:	4770      	bxeq	lr
 8005c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8005ca0:	d502      	bpl.n	8005ca8 <__aeabi_l2f+0x14>
 8005ca2:	4240      	negs	r0, r0
 8005ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ca8:	ea5f 0c01 	movs.w	ip, r1
 8005cac:	bf02      	ittt	eq
 8005cae:	4684      	moveq	ip, r0
 8005cb0:	4601      	moveq	r1, r0
 8005cb2:	2000      	moveq	r0, #0
 8005cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005cb8:	bf08      	it	eq
 8005cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8005cc2:	fabc f28c 	clz	r2, ip
 8005cc6:	3a08      	subs	r2, #8
 8005cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005ccc:	db10      	blt.n	8005cf0 <__aeabi_l2f+0x5c>
 8005cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8005cd2:	4463      	add	r3, ip
 8005cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8005cd8:	f1c2 0220 	rsb	r2, r2, #32
 8005cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8005ce4:	eb43 0002 	adc.w	r0, r3, r2
 8005ce8:	bf08      	it	eq
 8005cea:	f020 0001 	biceq.w	r0, r0, #1
 8005cee:	4770      	bx	lr
 8005cf0:	f102 0220 	add.w	r2, r2, #32
 8005cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8005cf8:	f1c2 0220 	rsb	r2, r2, #32
 8005cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005d00:	fa21 f202 	lsr.w	r2, r1, r2
 8005d04:	eb43 0002 	adc.w	r0, r3, r2
 8005d08:	bf08      	it	eq
 8005d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005d0e:	4770      	bx	lr

08005d10 <__aeabi_f2iz>:
 8005d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005d18:	d30f      	bcc.n	8005d3a <__aeabi_f2iz+0x2a>
 8005d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005d22:	d90d      	bls.n	8005d40 <__aeabi_f2iz+0x30>
 8005d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005d30:	fa23 f002 	lsr.w	r0, r3, r2
 8005d34:	bf18      	it	ne
 8005d36:	4240      	negne	r0, r0
 8005d38:	4770      	bx	lr
 8005d3a:	f04f 0000 	mov.w	r0, #0
 8005d3e:	4770      	bx	lr
 8005d40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005d44:	d101      	bne.n	8005d4a <__aeabi_f2iz+0x3a>
 8005d46:	0242      	lsls	r2, r0, #9
 8005d48:	d105      	bne.n	8005d56 <__aeabi_f2iz+0x46>
 8005d4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8005d4e:	bf08      	it	eq
 8005d50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005d54:	4770      	bx	lr
 8005d56:	f04f 0000 	mov.w	r0, #0
 8005d5a:	4770      	bx	lr

08005d5c <__aeabi_f2uiz>:
 8005d5c:	0042      	lsls	r2, r0, #1
 8005d5e:	d20e      	bcs.n	8005d7e <__aeabi_f2uiz+0x22>
 8005d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005d64:	d30b      	bcc.n	8005d7e <__aeabi_f2uiz+0x22>
 8005d66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005d6e:	d409      	bmi.n	8005d84 <__aeabi_f2uiz+0x28>
 8005d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	fa23 f002 	lsr.w	r0, r3, r2
 8005d7c:	4770      	bx	lr
 8005d7e:	f04f 0000 	mov.w	r0, #0
 8005d82:	4770      	bx	lr
 8005d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005d88:	d101      	bne.n	8005d8e <__aeabi_f2uiz+0x32>
 8005d8a:	0242      	lsls	r2, r0, #9
 8005d8c:	d102      	bne.n	8005d94 <__aeabi_f2uiz+0x38>
 8005d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d92:	4770      	bx	lr
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <__aeabi_uldivmod>:
 8005d9c:	b953      	cbnz	r3, 8005db4 <__aeabi_uldivmod+0x18>
 8005d9e:	b94a      	cbnz	r2, 8005db4 <__aeabi_uldivmod+0x18>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	bf08      	it	eq
 8005da4:	2800      	cmpeq	r0, #0
 8005da6:	bf1c      	itt	ne
 8005da8:	f04f 31ff 	movne.w	r1, #4294967295
 8005dac:	f04f 30ff 	movne.w	r0, #4294967295
 8005db0:	f000 b972 	b.w	8006098 <__aeabi_idiv0>
 8005db4:	f1ad 0c08 	sub.w	ip, sp, #8
 8005db8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005dbc:	f000 f806 	bl	8005dcc <__udivmoddi4>
 8005dc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc8:	b004      	add	sp, #16
 8005dca:	4770      	bx	lr

08005dcc <__udivmoddi4>:
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	9e08      	ldr	r6, [sp, #32]
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	468e      	mov	lr, r1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d14c      	bne.n	8005e76 <__udivmoddi4+0xaa>
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	4694      	mov	ip, r2
 8005de0:	d967      	bls.n	8005eb2 <__udivmoddi4+0xe6>
 8005de2:	fab2 f382 	clz	r3, r2
 8005de6:	b153      	cbz	r3, 8005dfe <__udivmoddi4+0x32>
 8005de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8005dec:	f1c3 0220 	rsb	r2, r3, #32
 8005df0:	fa01 fe03 	lsl.w	lr, r1, r3
 8005df4:	fa20 f202 	lsr.w	r2, r0, r2
 8005df8:	ea42 0e0e 	orr.w	lr, r2, lr
 8005dfc:	409c      	lsls	r4, r3
 8005dfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005e02:	fbbe f1f7 	udiv	r1, lr, r7
 8005e06:	fa1f f58c 	uxth.w	r5, ip
 8005e0a:	fb07 ee11 	mls	lr, r7, r1, lr
 8005e0e:	fb01 f005 	mul.w	r0, r1, r5
 8005e12:	0c22      	lsrs	r2, r4, #16
 8005e14:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005e18:	4290      	cmp	r0, r2
 8005e1a:	d90a      	bls.n	8005e32 <__udivmoddi4+0x66>
 8005e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8005e20:	f101 3eff 	add.w	lr, r1, #4294967295
 8005e24:	f080 8119 	bcs.w	800605a <__udivmoddi4+0x28e>
 8005e28:	4290      	cmp	r0, r2
 8005e2a:	f240 8116 	bls.w	800605a <__udivmoddi4+0x28e>
 8005e2e:	3902      	subs	r1, #2
 8005e30:	4462      	add	r2, ip
 8005e32:	1a12      	subs	r2, r2, r0
 8005e34:	fbb2 f0f7 	udiv	r0, r2, r7
 8005e38:	fb07 2210 	mls	r2, r7, r0, r2
 8005e3c:	fb00 f505 	mul.w	r5, r0, r5
 8005e40:	b2a4      	uxth	r4, r4
 8005e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005e46:	42a5      	cmp	r5, r4
 8005e48:	d90a      	bls.n	8005e60 <__udivmoddi4+0x94>
 8005e4a:	eb1c 0404 	adds.w	r4, ip, r4
 8005e4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005e52:	f080 8104 	bcs.w	800605e <__udivmoddi4+0x292>
 8005e56:	42a5      	cmp	r5, r4
 8005e58:	f240 8101 	bls.w	800605e <__udivmoddi4+0x292>
 8005e5c:	4464      	add	r4, ip
 8005e5e:	3802      	subs	r0, #2
 8005e60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005e64:	2100      	movs	r1, #0
 8005e66:	1b64      	subs	r4, r4, r5
 8005e68:	b11e      	cbz	r6, 8005e72 <__udivmoddi4+0xa6>
 8005e6a:	40dc      	lsrs	r4, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e9c6 4300 	strd	r4, r3, [r6]
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	428b      	cmp	r3, r1
 8005e78:	d908      	bls.n	8005e8c <__udivmoddi4+0xc0>
 8005e7a:	2e00      	cmp	r6, #0
 8005e7c:	f000 80ea 	beq.w	8006054 <__udivmoddi4+0x288>
 8005e80:	2100      	movs	r1, #0
 8005e82:	e9c6 0500 	strd	r0, r5, [r6]
 8005e86:	4608      	mov	r0, r1
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	fab3 f183 	clz	r1, r3
 8005e90:	2900      	cmp	r1, #0
 8005e92:	d148      	bne.n	8005f26 <__udivmoddi4+0x15a>
 8005e94:	42ab      	cmp	r3, r5
 8005e96:	d302      	bcc.n	8005e9e <__udivmoddi4+0xd2>
 8005e98:	4282      	cmp	r2, r0
 8005e9a:	f200 80f8 	bhi.w	800608e <__udivmoddi4+0x2c2>
 8005e9e:	1a84      	subs	r4, r0, r2
 8005ea0:	eb65 0203 	sbc.w	r2, r5, r3
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	4696      	mov	lr, r2
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d0e2      	beq.n	8005e72 <__udivmoddi4+0xa6>
 8005eac:	e9c6 4e00 	strd	r4, lr, [r6]
 8005eb0:	e7df      	b.n	8005e72 <__udivmoddi4+0xa6>
 8005eb2:	b902      	cbnz	r2, 8005eb6 <__udivmoddi4+0xea>
 8005eb4:	deff      	udf	#255	; 0xff
 8005eb6:	fab2 f382 	clz	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 808e 	bne.w	8005fdc <__udivmoddi4+0x210>
 8005ec0:	1a88      	subs	r0, r1, r2
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	0c17      	lsrs	r7, r2, #16
 8005ec6:	fa1f fe82 	uxth.w	lr, r2
 8005eca:	fbb0 f5f7 	udiv	r5, r0, r7
 8005ece:	fb07 0015 	mls	r0, r7, r5, r0
 8005ed2:	0c22      	lsrs	r2, r4, #16
 8005ed4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005ed8:	fb0e f005 	mul.w	r0, lr, r5
 8005edc:	4290      	cmp	r0, r2
 8005ede:	d908      	bls.n	8005ef2 <__udivmoddi4+0x126>
 8005ee0:	eb1c 0202 	adds.w	r2, ip, r2
 8005ee4:	f105 38ff 	add.w	r8, r5, #4294967295
 8005ee8:	d202      	bcs.n	8005ef0 <__udivmoddi4+0x124>
 8005eea:	4290      	cmp	r0, r2
 8005eec:	f200 80cc 	bhi.w	8006088 <__udivmoddi4+0x2bc>
 8005ef0:	4645      	mov	r5, r8
 8005ef2:	1a12      	subs	r2, r2, r0
 8005ef4:	fbb2 f0f7 	udiv	r0, r2, r7
 8005ef8:	fb07 2210 	mls	r2, r7, r0, r2
 8005efc:	fb0e fe00 	mul.w	lr, lr, r0
 8005f00:	b2a4      	uxth	r4, r4
 8005f02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f06:	45a6      	cmp	lr, r4
 8005f08:	d908      	bls.n	8005f1c <__udivmoddi4+0x150>
 8005f0a:	eb1c 0404 	adds.w	r4, ip, r4
 8005f0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005f12:	d202      	bcs.n	8005f1a <__udivmoddi4+0x14e>
 8005f14:	45a6      	cmp	lr, r4
 8005f16:	f200 80b4 	bhi.w	8006082 <__udivmoddi4+0x2b6>
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	eba4 040e 	sub.w	r4, r4, lr
 8005f20:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005f24:	e7a0      	b.n	8005e68 <__udivmoddi4+0x9c>
 8005f26:	f1c1 0720 	rsb	r7, r1, #32
 8005f2a:	408b      	lsls	r3, r1
 8005f2c:	fa22 fc07 	lsr.w	ip, r2, r7
 8005f30:	ea4c 0c03 	orr.w	ip, ip, r3
 8005f34:	fa25 fa07 	lsr.w	sl, r5, r7
 8005f38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005f3c:	fbba f8f9 	udiv	r8, sl, r9
 8005f40:	408d      	lsls	r5, r1
 8005f42:	fa20 f307 	lsr.w	r3, r0, r7
 8005f46:	fb09 aa18 	mls	sl, r9, r8, sl
 8005f4a:	fa1f fe8c 	uxth.w	lr, ip
 8005f4e:	432b      	orrs	r3, r5
 8005f50:	fa00 f501 	lsl.w	r5, r0, r1
 8005f54:	fb08 f00e 	mul.w	r0, r8, lr
 8005f58:	0c1c      	lsrs	r4, r3, #16
 8005f5a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f5e:	42a0      	cmp	r0, r4
 8005f60:	fa02 f201 	lsl.w	r2, r2, r1
 8005f64:	d90b      	bls.n	8005f7e <__udivmoddi4+0x1b2>
 8005f66:	eb1c 0404 	adds.w	r4, ip, r4
 8005f6a:	f108 3aff 	add.w	sl, r8, #4294967295
 8005f6e:	f080 8086 	bcs.w	800607e <__udivmoddi4+0x2b2>
 8005f72:	42a0      	cmp	r0, r4
 8005f74:	f240 8083 	bls.w	800607e <__udivmoddi4+0x2b2>
 8005f78:	f1a8 0802 	sub.w	r8, r8, #2
 8005f7c:	4464      	add	r4, ip
 8005f7e:	1a24      	subs	r4, r4, r0
 8005f80:	b298      	uxth	r0, r3
 8005f82:	fbb4 f3f9 	udiv	r3, r4, r9
 8005f86:	fb09 4413 	mls	r4, r9, r3, r4
 8005f8a:	fb03 fe0e 	mul.w	lr, r3, lr
 8005f8e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8005f92:	45a6      	cmp	lr, r4
 8005f94:	d908      	bls.n	8005fa8 <__udivmoddi4+0x1dc>
 8005f96:	eb1c 0404 	adds.w	r4, ip, r4
 8005f9a:	f103 30ff 	add.w	r0, r3, #4294967295
 8005f9e:	d26a      	bcs.n	8006076 <__udivmoddi4+0x2aa>
 8005fa0:	45a6      	cmp	lr, r4
 8005fa2:	d968      	bls.n	8006076 <__udivmoddi4+0x2aa>
 8005fa4:	3b02      	subs	r3, #2
 8005fa6:	4464      	add	r4, ip
 8005fa8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8005fac:	fba0 9302 	umull	r9, r3, r0, r2
 8005fb0:	eba4 040e 	sub.w	r4, r4, lr
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	46c8      	mov	r8, r9
 8005fb8:	469e      	mov	lr, r3
 8005fba:	d354      	bcc.n	8006066 <__udivmoddi4+0x29a>
 8005fbc:	d051      	beq.n	8006062 <__udivmoddi4+0x296>
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	d067      	beq.n	8006092 <__udivmoddi4+0x2c6>
 8005fc2:	ebb5 0308 	subs.w	r3, r5, r8
 8005fc6:	eb64 040e 	sbc.w	r4, r4, lr
 8005fca:	40cb      	lsrs	r3, r1
 8005fcc:	fa04 f707 	lsl.w	r7, r4, r7
 8005fd0:	431f      	orrs	r7, r3
 8005fd2:	40cc      	lsrs	r4, r1
 8005fd4:	e9c6 7400 	strd	r7, r4, [r6]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	e74a      	b.n	8005e72 <__udivmoddi4+0xa6>
 8005fdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8005fe0:	f1c3 0020 	rsb	r0, r3, #32
 8005fe4:	40c1      	lsrs	r1, r0
 8005fe6:	409d      	lsls	r5, r3
 8005fe8:	fa24 f000 	lsr.w	r0, r4, r0
 8005fec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005ff0:	4328      	orrs	r0, r5
 8005ff2:	fbb1 f5f7 	udiv	r5, r1, r7
 8005ff6:	fb07 1115 	mls	r1, r7, r5, r1
 8005ffa:	fa1f fe8c 	uxth.w	lr, ip
 8005ffe:	0c02      	lsrs	r2, r0, #16
 8006000:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006004:	fb05 f10e 	mul.w	r1, r5, lr
 8006008:	4291      	cmp	r1, r2
 800600a:	fa04 f403 	lsl.w	r4, r4, r3
 800600e:	d908      	bls.n	8006022 <__udivmoddi4+0x256>
 8006010:	eb1c 0202 	adds.w	r2, ip, r2
 8006014:	f105 38ff 	add.w	r8, r5, #4294967295
 8006018:	d22f      	bcs.n	800607a <__udivmoddi4+0x2ae>
 800601a:	4291      	cmp	r1, r2
 800601c:	d92d      	bls.n	800607a <__udivmoddi4+0x2ae>
 800601e:	3d02      	subs	r5, #2
 8006020:	4462      	add	r2, ip
 8006022:	1a52      	subs	r2, r2, r1
 8006024:	fbb2 f1f7 	udiv	r1, r2, r7
 8006028:	fb07 2211 	mls	r2, r7, r1, r2
 800602c:	b280      	uxth	r0, r0
 800602e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006032:	fb01 f20e 	mul.w	r2, r1, lr
 8006036:	4282      	cmp	r2, r0
 8006038:	d908      	bls.n	800604c <__udivmoddi4+0x280>
 800603a:	eb1c 0000 	adds.w	r0, ip, r0
 800603e:	f101 38ff 	add.w	r8, r1, #4294967295
 8006042:	d216      	bcs.n	8006072 <__udivmoddi4+0x2a6>
 8006044:	4282      	cmp	r2, r0
 8006046:	d914      	bls.n	8006072 <__udivmoddi4+0x2a6>
 8006048:	3902      	subs	r1, #2
 800604a:	4460      	add	r0, ip
 800604c:	1a80      	subs	r0, r0, r2
 800604e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006052:	e73a      	b.n	8005eca <__udivmoddi4+0xfe>
 8006054:	4631      	mov	r1, r6
 8006056:	4630      	mov	r0, r6
 8006058:	e70b      	b.n	8005e72 <__udivmoddi4+0xa6>
 800605a:	4671      	mov	r1, lr
 800605c:	e6e9      	b.n	8005e32 <__udivmoddi4+0x66>
 800605e:	4610      	mov	r0, r2
 8006060:	e6fe      	b.n	8005e60 <__udivmoddi4+0x94>
 8006062:	454d      	cmp	r5, r9
 8006064:	d2ab      	bcs.n	8005fbe <__udivmoddi4+0x1f2>
 8006066:	ebb9 0802 	subs.w	r8, r9, r2
 800606a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800606e:	3801      	subs	r0, #1
 8006070:	e7a5      	b.n	8005fbe <__udivmoddi4+0x1f2>
 8006072:	4641      	mov	r1, r8
 8006074:	e7ea      	b.n	800604c <__udivmoddi4+0x280>
 8006076:	4603      	mov	r3, r0
 8006078:	e796      	b.n	8005fa8 <__udivmoddi4+0x1dc>
 800607a:	4645      	mov	r5, r8
 800607c:	e7d1      	b.n	8006022 <__udivmoddi4+0x256>
 800607e:	46d0      	mov	r8, sl
 8006080:	e77d      	b.n	8005f7e <__udivmoddi4+0x1b2>
 8006082:	4464      	add	r4, ip
 8006084:	3802      	subs	r0, #2
 8006086:	e749      	b.n	8005f1c <__udivmoddi4+0x150>
 8006088:	3d02      	subs	r5, #2
 800608a:	4462      	add	r2, ip
 800608c:	e731      	b.n	8005ef2 <__udivmoddi4+0x126>
 800608e:	4608      	mov	r0, r1
 8006090:	e70a      	b.n	8005ea8 <__udivmoddi4+0xdc>
 8006092:	4631      	mov	r1, r6
 8006094:	e6ed      	b.n	8005e72 <__udivmoddi4+0xa6>
 8006096:	bf00      	nop

08006098 <__aeabi_idiv0>:
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop

0800609c <microDelay>:
#define DHT_PIN GPIO_PIN_5
#endif

uint32_t pMillis, cMillis;

void microDelay(uint16_t delay) {
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <microDelay+0x2c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80060ae:	bf00      	nop
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <microDelay+0x2c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3f9      	bcc.n	80060b0 <microDelay+0x14>
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	200006b0 	.word	0x200006b0

080060cc <DHT_Start>:

uint8_t DHT_Start(void) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]

    GPIO_InitStructPrivate.Pin = DHT_PIN;
 80060e2:	2320      	movs	r3, #32
 80060e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80060e6:	2301      	movs	r3, #1
 80060e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80060ea:	2302      	movs	r3, #2
 80060ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	482a      	ldr	r0, [pc, #168]	; (80061a0 <DHT_Start+0xd4>)
 80060f8:	f003 f948 	bl	800938c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 0); // pull the pin low
 80060fc:	2200      	movs	r2, #0
 80060fe:	2120      	movs	r1, #32
 8006100:	4827      	ldr	r0, [pc, #156]	; (80061a0 <DHT_Start+0xd4>)
 8006102:	f003 fade 	bl	80096c2 <HAL_GPIO_WritePin>

    #if (DHT_SENSOR == DHT22)
    microDelay(1300); // wait for 1300us for DHT22
    #elif (DHT_SENSOR == DHT11)
    HAL_Delay(20); // wait for 20ms for DHT11
 8006106:	2014      	movs	r0, #20
 8006108:	f002 fbca 	bl	80088a0 <HAL_Delay>
    #endif

    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 1); // pull the pin high
 800610c:	2201      	movs	r2, #1
 800610e:	2120      	movs	r1, #32
 8006110:	4823      	ldr	r0, [pc, #140]	; (80061a0 <DHT_Start+0xd4>)
 8006112:	f003 fad6 	bl	80096c2 <HAL_GPIO_WritePin>
    microDelay(30); // wait for 30us
 8006116:	201e      	movs	r0, #30
 8006118:	f7ff ffc0 	bl	800609c <microDelay>

    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8006120:	2301      	movs	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8006124:	1d3b      	adds	r3, r7, #4
 8006126:	4619      	mov	r1, r3
 8006128:	481d      	ldr	r0, [pc, #116]	; (80061a0 <DHT_Start+0xd4>)
 800612a:	f003 f92f 	bl	800938c <HAL_GPIO_Init>

    microDelay(40);
 800612e:	2028      	movs	r0, #40	; 0x28
 8006130:	f7ff ffb4 	bl	800609c <microDelay>

    if (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))) {
 8006134:	2120      	movs	r1, #32
 8006136:	481a      	ldr	r0, [pc, #104]	; (80061a0 <DHT_Start+0xd4>)
 8006138:	f003 faac 	bl	8009694 <HAL_GPIO_ReadPin>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <DHT_Start+0x8e>
        microDelay(80);
 8006142:	2050      	movs	r0, #80	; 0x50
 8006144:	f7ff ffaa 	bl	800609c <microDelay>
        if ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))) Response = 1;
 8006148:	2120      	movs	r1, #32
 800614a:	4815      	ldr	r0, [pc, #84]	; (80061a0 <DHT_Start+0xd4>)
 800614c:	f003 faa2 	bl	8009694 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <DHT_Start+0x8e>
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
    }

    pMillis = HAL_GetTick();
 800615a:	f002 fb97 	bl	800888c <HAL_GetTick>
 800615e:	4603      	mov	r3, r0
 8006160:	4a10      	ldr	r2, [pc, #64]	; (80061a4 <DHT_Start+0xd8>)
 8006162:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8006164:	f002 fb92 	bl	800888c <HAL_GetTick>
 8006168:	4603      	mov	r3, r0
 800616a:	4a0f      	ldr	r2, [pc, #60]	; (80061a8 <DHT_Start+0xdc>)
 800616c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 800616e:	e004      	b.n	800617a <DHT_Start+0xae>
        cMillis = HAL_GetTick();
 8006170:	f002 fb8c 	bl	800888c <HAL_GetTick>
 8006174:	4603      	mov	r3, r0
 8006176:	4a0c      	ldr	r2, [pc, #48]	; (80061a8 <DHT_Start+0xdc>)
 8006178:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 800617a:	2120      	movs	r1, #32
 800617c:	4808      	ldr	r0, [pc, #32]	; (80061a0 <DHT_Start+0xd4>)
 800617e:	f003 fa89 	bl	8009694 <HAL_GPIO_ReadPin>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <DHT_Start+0xca>
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <DHT_Start+0xd8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	1c9a      	adds	r2, r3, #2
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <DHT_Start+0xdc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d8ec      	bhi.n	8006170 <DHT_Start+0xa4>
    }

    return Response;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40010c00 	.word	0x40010c00
 80061a4:	200000ac 	.word	0x200000ac
 80061a8:	200000b0 	.word	0x200000b0

080061ac <DHT_Read>:

uint8_t DHT_Read(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	71bb      	strb	r3, [r7, #6]
    for (a = 0; a < 8; a++) {
 80061b6:	2300      	movs	r3, #0
 80061b8:	71fb      	strb	r3, [r7, #7]
 80061ba:	e063      	b.n	8006284 <DHT_Read+0xd8>
        pMillis = HAL_GetTick();
 80061bc:	f002 fb66 	bl	800888c <HAL_GetTick>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a34      	ldr	r2, [pc, #208]	; (8006294 <DHT_Read+0xe8>)
 80061c4:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 80061c6:	f002 fb61 	bl	800888c <HAL_GetTick>
 80061ca:	4603      	mov	r3, r0
 80061cc:	4a32      	ldr	r2, [pc, #200]	; (8006298 <DHT_Read+0xec>)
 80061ce:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 80061d0:	e004      	b.n	80061dc <DHT_Read+0x30>
            cMillis = HAL_GetTick();
 80061d2:	f002 fb5b 	bl	800888c <HAL_GetTick>
 80061d6:	4603      	mov	r3, r0
 80061d8:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <DHT_Read+0xec>)
 80061da:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 80061dc:	2120      	movs	r1, #32
 80061de:	482f      	ldr	r0, [pc, #188]	; (800629c <DHT_Read+0xf0>)
 80061e0:	f003 fa58 	bl	8009694 <HAL_GPIO_ReadPin>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <DHT_Read+0x4c>
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <DHT_Read+0xe8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	1c9a      	adds	r2, r3, #2
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <DHT_Read+0xec>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d8ec      	bhi.n	80061d2 <DHT_Read+0x26>
        }
        microDelay(40); // wait for 40 us
 80061f8:	2028      	movs	r0, #40	; 0x28
 80061fa:	f7ff ff4f 	bl	800609c <microDelay>
        if (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))) // if the pin is low
 80061fe:	2120      	movs	r1, #32
 8006200:	4826      	ldr	r0, [pc, #152]	; (800629c <DHT_Read+0xf0>)
 8006202:	f003 fa47 	bl	8009694 <HAL_GPIO_ReadPin>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10e      	bne.n	800622a <DHT_Read+0x7e>
            b &= ~(1 << (7 - a));
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	f1c3 0307 	rsb	r3, r3, #7
 8006212:	2201      	movs	r2, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	b25b      	sxtb	r3, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	b25a      	sxtb	r2, r3
 800621e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006222:	4013      	ands	r3, r2
 8006224:	b25b      	sxtb	r3, r3
 8006226:	71bb      	strb	r3, [r7, #6]
 8006228:	e00b      	b.n	8006242 <DHT_Read+0x96>
        else
            b |= (1 << (7 - a));
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	f1c3 0307 	rsb	r3, r3, #7
 8006230:	2201      	movs	r2, #1
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	b25a      	sxtb	r2, r3
 8006238:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800623c:	4313      	orrs	r3, r2
 800623e:	b25b      	sxtb	r3, r3
 8006240:	71bb      	strb	r3, [r7, #6]

        pMillis = HAL_GetTick();
 8006242:	f002 fb23 	bl	800888c <HAL_GetTick>
 8006246:	4603      	mov	r3, r0
 8006248:	4a12      	ldr	r2, [pc, #72]	; (8006294 <DHT_Read+0xe8>)
 800624a:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 800624c:	f002 fb1e 	bl	800888c <HAL_GetTick>
 8006250:	4603      	mov	r3, r0
 8006252:	4a11      	ldr	r2, [pc, #68]	; (8006298 <DHT_Read+0xec>)
 8006254:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 8006256:	e004      	b.n	8006262 <DHT_Read+0xb6>
            cMillis = HAL_GetTick();
 8006258:	f002 fb18 	bl	800888c <HAL_GetTick>
 800625c:	4603      	mov	r3, r0
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <DHT_Read+0xec>)
 8006260:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)) && pMillis + 2 > cMillis) {
 8006262:	2120      	movs	r1, #32
 8006264:	480d      	ldr	r0, [pc, #52]	; (800629c <DHT_Read+0xf0>)
 8006266:	f003 fa15 	bl	8009694 <HAL_GPIO_ReadPin>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <DHT_Read+0xd2>
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <DHT_Read+0xe8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1c9a      	adds	r2, r3, #2
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <DHT_Read+0xec>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d8ec      	bhi.n	8006258 <DHT_Read+0xac>
    for (a = 0; a < 8; a++) {
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	3301      	adds	r3, #1
 8006282:	71fb      	strb	r3, [r7, #7]
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	2b07      	cmp	r3, #7
 8006288:	d998      	bls.n	80061bc <DHT_Read+0x10>
        }
    }
    return b;
 800628a:	79bb      	ldrb	r3, [r7, #6]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200000ac 	.word	0x200000ac
 8006298:	200000b0 	.word	0x200000b0
 800629c:	40010c00 	.word	0x40010c00

080062a0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80062a6:	f000 fa37 	bl	8006718 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80062aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80062ae:	2201      	movs	r2, #1
 80062b0:	2178      	movs	r1, #120	; 0x78
 80062b2:	485b      	ldr	r0, [pc, #364]	; (8006420 <SSD1306_Init+0x180>)
 80062b4:	f003 fc90 	bl	8009bd8 <HAL_I2C_IsDeviceReady>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	e0a9      	b.n	8006416 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80062c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80062c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80062c8:	e002      	b.n	80062d0 <SSD1306_Init+0x30>
		p--;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f9      	bne.n	80062ca <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80062d6:	22ae      	movs	r2, #174	; 0xae
 80062d8:	2100      	movs	r1, #0
 80062da:	2078      	movs	r0, #120	; 0x78
 80062dc:	f000 fa96 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80062e0:	2220      	movs	r2, #32
 80062e2:	2100      	movs	r1, #0
 80062e4:	2078      	movs	r0, #120	; 0x78
 80062e6:	f000 fa91 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80062ea:	2210      	movs	r2, #16
 80062ec:	2100      	movs	r1, #0
 80062ee:	2078      	movs	r0, #120	; 0x78
 80062f0:	f000 fa8c 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80062f4:	22b0      	movs	r2, #176	; 0xb0
 80062f6:	2100      	movs	r1, #0
 80062f8:	2078      	movs	r0, #120	; 0x78
 80062fa:	f000 fa87 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80062fe:	22c8      	movs	r2, #200	; 0xc8
 8006300:	2100      	movs	r1, #0
 8006302:	2078      	movs	r0, #120	; 0x78
 8006304:	f000 fa82 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	2078      	movs	r0, #120	; 0x78
 800630e:	f000 fa7d 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006312:	2210      	movs	r2, #16
 8006314:	2100      	movs	r1, #0
 8006316:	2078      	movs	r0, #120	; 0x78
 8006318:	f000 fa78 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	2100      	movs	r1, #0
 8006320:	2078      	movs	r0, #120	; 0x78
 8006322:	f000 fa73 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006326:	2281      	movs	r2, #129	; 0x81
 8006328:	2100      	movs	r1, #0
 800632a:	2078      	movs	r0, #120	; 0x78
 800632c:	f000 fa6e 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006330:	22ff      	movs	r2, #255	; 0xff
 8006332:	2100      	movs	r1, #0
 8006334:	2078      	movs	r0, #120	; 0x78
 8006336:	f000 fa69 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800633a:	22a1      	movs	r2, #161	; 0xa1
 800633c:	2100      	movs	r1, #0
 800633e:	2078      	movs	r0, #120	; 0x78
 8006340:	f000 fa64 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006344:	22a6      	movs	r2, #166	; 0xa6
 8006346:	2100      	movs	r1, #0
 8006348:	2078      	movs	r0, #120	; 0x78
 800634a:	f000 fa5f 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800634e:	22a8      	movs	r2, #168	; 0xa8
 8006350:	2100      	movs	r1, #0
 8006352:	2078      	movs	r0, #120	; 0x78
 8006354:	f000 fa5a 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006358:	223f      	movs	r2, #63	; 0x3f
 800635a:	2100      	movs	r1, #0
 800635c:	2078      	movs	r0, #120	; 0x78
 800635e:	f000 fa55 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006362:	22a4      	movs	r2, #164	; 0xa4
 8006364:	2100      	movs	r1, #0
 8006366:	2078      	movs	r0, #120	; 0x78
 8006368:	f000 fa50 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800636c:	22d3      	movs	r2, #211	; 0xd3
 800636e:	2100      	movs	r1, #0
 8006370:	2078      	movs	r0, #120	; 0x78
 8006372:	f000 fa4b 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	2078      	movs	r0, #120	; 0x78
 800637c:	f000 fa46 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006380:	22d5      	movs	r2, #213	; 0xd5
 8006382:	2100      	movs	r1, #0
 8006384:	2078      	movs	r0, #120	; 0x78
 8006386:	f000 fa41 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800638a:	22f0      	movs	r2, #240	; 0xf0
 800638c:	2100      	movs	r1, #0
 800638e:	2078      	movs	r0, #120	; 0x78
 8006390:	f000 fa3c 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006394:	22d9      	movs	r2, #217	; 0xd9
 8006396:	2100      	movs	r1, #0
 8006398:	2078      	movs	r0, #120	; 0x78
 800639a:	f000 fa37 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800639e:	2222      	movs	r2, #34	; 0x22
 80063a0:	2100      	movs	r1, #0
 80063a2:	2078      	movs	r0, #120	; 0x78
 80063a4:	f000 fa32 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80063a8:	22da      	movs	r2, #218	; 0xda
 80063aa:	2100      	movs	r1, #0
 80063ac:	2078      	movs	r0, #120	; 0x78
 80063ae:	f000 fa2d 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80063b2:	2212      	movs	r2, #18
 80063b4:	2100      	movs	r1, #0
 80063b6:	2078      	movs	r0, #120	; 0x78
 80063b8:	f000 fa28 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80063bc:	22db      	movs	r2, #219	; 0xdb
 80063be:	2100      	movs	r1, #0
 80063c0:	2078      	movs	r0, #120	; 0x78
 80063c2:	f000 fa23 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80063c6:	2220      	movs	r2, #32
 80063c8:	2100      	movs	r1, #0
 80063ca:	2078      	movs	r0, #120	; 0x78
 80063cc:	f000 fa1e 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80063d0:	228d      	movs	r2, #141	; 0x8d
 80063d2:	2100      	movs	r1, #0
 80063d4:	2078      	movs	r0, #120	; 0x78
 80063d6:	f000 fa19 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80063da:	2214      	movs	r2, #20
 80063dc:	2100      	movs	r1, #0
 80063de:	2078      	movs	r0, #120	; 0x78
 80063e0:	f000 fa14 	bl	800680c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80063e4:	22af      	movs	r2, #175	; 0xaf
 80063e6:	2100      	movs	r1, #0
 80063e8:	2078      	movs	r0, #120	; 0x78
 80063ea:	f000 fa0f 	bl	800680c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80063ee:	222e      	movs	r2, #46	; 0x2e
 80063f0:	2100      	movs	r1, #0
 80063f2:	2078      	movs	r0, #120	; 0x78
 80063f4:	f000 fa0a 	bl	800680c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80063f8:	2000      	movs	r0, #0
 80063fa:	f000 f847 	bl	800648c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80063fe:	f000 f813 	bl	8006428 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <SSD1306_Init+0x184>)
 8006404:	2200      	movs	r2, #0
 8006406:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <SSD1306_Init+0x184>)
 800640a:	2200      	movs	r2, #0
 800640c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <SSD1306_Init+0x184>)
 8006410:	2201      	movs	r2, #1
 8006412:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8006414:	2301      	movs	r3, #1
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000604 	.word	0x20000604
 8006424:	200004d4 	.word	0x200004d4

08006428 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800642e:	2300      	movs	r3, #0
 8006430:	71fb      	strb	r3, [r7, #7]
 8006432:	e021      	b.n	8006478 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	3b50      	subs	r3, #80	; 0x50
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	2100      	movs	r1, #0
 800643e:	2078      	movs	r0, #120	; 0x78
 8006440:	f000 f9e4 	bl	800680c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	2078      	movs	r0, #120	; 0x78
 800644a:	f000 f9df 	bl	800680c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800644e:	2210      	movs	r2, #16
 8006450:	2100      	movs	r1, #0
 8006452:	2078      	movs	r0, #120	; 0x78
 8006454:	f000 f9da 	bl	800680c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006458:	79fa      	ldrb	r2, [r7, #7]
 800645a:	4613      	mov	r3, r2
 800645c:	015b      	lsls	r3, r3, #5
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	461a      	mov	r2, r3
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <SSD1306_UpdateScreen+0x60>)
 8006466:	441a      	add	r2, r3
 8006468:	2384      	movs	r3, #132	; 0x84
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	2078      	movs	r0, #120	; 0x78
 800646e:	f000 f967 	bl	8006740 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	3301      	adds	r3, #1
 8006476:	71fb      	strb	r3, [r7, #7]
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	2b07      	cmp	r3, #7
 800647c:	d9da      	bls.n	8006434 <SSD1306_UpdateScreen+0xc>
	}
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200000b4 	.word	0x200000b4

0800648c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <SSD1306_Fill+0x14>
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <SSD1306_Fill+0x16>
 80064a0:	23ff      	movs	r3, #255	; 0xff
 80064a2:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80064a6:	4619      	mov	r1, r3
 80064a8:	4803      	ldr	r0, [pc, #12]	; (80064b8 <SSD1306_Fill+0x2c>)
 80064aa:	f005 fc4b 	bl	800bd44 <memset>
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200000b4 	.word	0x200000b4

080064bc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80064bc:	b490      	push	{r4, r7}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
 80064c6:	460b      	mov	r3, r1
 80064c8:	80bb      	strh	r3, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	70fb      	strb	r3, [r7, #3]
	if (
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	2b83      	cmp	r3, #131	; 0x83
 80064d2:	d854      	bhi.n	800657e <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 80064d4:	88bb      	ldrh	r3, [r7, #4]
 80064d6:	2b3f      	cmp	r3, #63	; 0x3f
 80064d8:	d851      	bhi.n	800657e <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <SSD1306_DrawPixel+0xcc>)
 80064dc:	791b      	ldrb	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d120      	bne.n	8006538 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	b298      	uxth	r0, r3
 80064fe:	4601      	mov	r1, r0
 8006500:	460b      	mov	r3, r1
 8006502:	015b      	lsls	r3, r3, #5
 8006504:	440b      	add	r3, r1
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <SSD1306_DrawPixel+0xd0>)
 800650c:	5cd3      	ldrb	r3, [r2, r3]
 800650e:	b25a      	sxtb	r2, r3
 8006510:	88bb      	ldrh	r3, [r7, #4]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2101      	movs	r1, #1
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	b25b      	sxtb	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b25c      	sxtb	r4, r3
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	4601      	mov	r1, r0
 8006526:	460b      	mov	r3, r1
 8006528:	015b      	lsls	r3, r3, #5
 800652a:	440b      	add	r3, r1
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	b2e1      	uxtb	r1, r4
 8006532:	4a16      	ldr	r2, [pc, #88]	; (800658c <SSD1306_DrawPixel+0xd0>)
 8006534:	54d1      	strb	r1, [r2, r3]
 8006536:	e023      	b.n	8006580 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	88bb      	ldrh	r3, [r7, #4]
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	b298      	uxth	r0, r3
 8006540:	4601      	mov	r1, r0
 8006542:	460b      	mov	r3, r1
 8006544:	015b      	lsls	r3, r3, #5
 8006546:	440b      	add	r3, r1
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	4a0f      	ldr	r2, [pc, #60]	; (800658c <SSD1306_DrawPixel+0xd0>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	b25a      	sxtb	r2, r3
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	2101      	movs	r1, #1
 800655a:	fa01 f303 	lsl.w	r3, r1, r3
 800655e:	b25b      	sxtb	r3, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	b25b      	sxtb	r3, r3
 8006564:	4013      	ands	r3, r2
 8006566:	b25c      	sxtb	r4, r3
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	4601      	mov	r1, r0
 800656c:	460b      	mov	r3, r1
 800656e:	015b      	lsls	r3, r3, #5
 8006570:	440b      	add	r3, r1
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	b2e1      	uxtb	r1, r4
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <SSD1306_DrawPixel+0xd0>)
 800657a:	54d1      	strb	r1, [r2, r3]
 800657c:	e000      	b.n	8006580 <SSD1306_DrawPixel+0xc4>
		return;
 800657e:	bf00      	nop
	}
}
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bc90      	pop	{r4, r7}
 8006586:	4770      	bx	lr
 8006588:	200004d4 	.word	0x200004d4
 800658c:	200000b4 	.word	0x200000b4

08006590 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	460a      	mov	r2, r1
 800659a:	80fb      	strh	r3, [r7, #6]
 800659c:	4613      	mov	r3, r2
 800659e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80065a0:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <SSD1306_GotoXY+0x28>)
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80065a6:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <SSD1306_GotoXY+0x28>)
 80065a8:	88bb      	ldrh	r3, [r7, #4]
 80065aa:	8053      	strh	r3, [r2, #2]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	200004d4 	.word	0x200004d4

080065bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	71fb      	strb	r3, [r7, #7]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80065cc:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <SSD1306_Putc+0xfc>)
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	4413      	add	r3, r2
	if (
 80065d8:	2b83      	cmp	r3, #131	; 0x83
 80065da:	dc07      	bgt.n	80065ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <SSD1306_Putc+0xfc>)
 80065de:	885b      	ldrh	r3, [r3, #2]
 80065e0:	461a      	mov	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80065e8:	2b3f      	cmp	r3, #63	; 0x3f
 80065ea:	dd01      	ble.n	80065f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e05e      	b.n	80066ae <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e04b      	b.n	800668e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	3b20      	subs	r3, #32
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	7849      	ldrb	r1, [r1, #1]
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4619      	mov	r1, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	440b      	add	r3, r1
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	e030      	b.n	800667c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d010      	beq.n	800664c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800662a:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <SSD1306_Putc+0xfc>)
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	b29b      	uxth	r3, r3
 8006632:	4413      	add	r3, r2
 8006634:	b298      	uxth	r0, r3
 8006636:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <SSD1306_Putc+0xfc>)
 8006638:	885a      	ldrh	r2, [r3, #2]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	b29b      	uxth	r3, r3
 800663e:	4413      	add	r3, r2
 8006640:	b29b      	uxth	r3, r3
 8006642:	79ba      	ldrb	r2, [r7, #6]
 8006644:	4619      	mov	r1, r3
 8006646:	f7ff ff39 	bl	80064bc <SSD1306_DrawPixel>
 800664a:	e014      	b.n	8006676 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800664c:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <SSD1306_Putc+0xfc>)
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	b29b      	uxth	r3, r3
 8006654:	4413      	add	r3, r2
 8006656:	b298      	uxth	r0, r3
 8006658:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <SSD1306_Putc+0xfc>)
 800665a:	885a      	ldrh	r2, [r3, #2]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	b29b      	uxth	r3, r3
 8006660:	4413      	add	r3, r2
 8006662:	b299      	uxth	r1, r3
 8006664:	79bb      	ldrb	r3, [r7, #6]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	f7ff ff23 	bl	80064bc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4293      	cmp	r3, r2
 8006686:	d3c8      	bcc.n	800661a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	3301      	adds	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	461a      	mov	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4293      	cmp	r3, r2
 8006698:	d3ad      	bcc.n	80065f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <SSD1306_Putc+0xfc>)
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <SSD1306_Putc+0xfc>)
 80066aa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80066ac:	79fb      	ldrb	r3, [r7, #7]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200004d4 	.word	0x200004d4

080066bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80066ca:	e012      	b.n	80066f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	79fa      	ldrb	r2, [r7, #7]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff ff71 	bl	80065bc <SSD1306_Putc>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d002      	beq.n	80066ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	e008      	b.n	80066fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e8      	bne.n	80066cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	781b      	ldrb	r3, [r3, #0]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800670a:	2000      	movs	r0, #0
 800670c:	f7ff febe 	bl	800648c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8006710:	f7ff fe8a 	bl	8006428 <SSD1306_UpdateScreen>
}
 8006714:	bf00      	nop
 8006716:	bd80      	pop	{r7, pc}

08006718 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <ssd1306_I2C_Init+0x24>)
 8006720:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006722:	e002      	b.n	800672a <ssd1306_I2C_Init+0x12>
		p--;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3b01      	subs	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
	while(p>0)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1f9      	bne.n	8006724 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	0003d090 	.word	0x0003d090

08006740 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b0c7      	sub	sp, #284	; 0x11c
 8006744:	af02      	add	r7, sp, #8
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800674e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8006752:	600a      	str	r2, [r1, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800675a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800675e:	4622      	mov	r2, r4
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006766:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800676a:	4602      	mov	r2, r0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006772:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006776:	460a      	mov	r2, r1
 8006778:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800677a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800677e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006782:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006786:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800678e:	2300      	movs	r3, #0
 8006790:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006794:	e015      	b.n	80067c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8006796:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800679a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800679e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	441a      	add	r2, r3
 80067a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80067aa:	3301      	adds	r3, #1
 80067ac:	7811      	ldrb	r1, [r2, #0]
 80067ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80067b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80067b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80067b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80067bc:	3301      	adds	r3, #1
 80067be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80067c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80067cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80067d0:	8812      	ldrh	r2, [r2, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d8df      	bhi.n	8006796 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80067d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b299      	uxth	r1, r3
 80067e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f107 020c 	add.w	r2, r7, #12
 80067f4:	200a      	movs	r0, #10
 80067f6:	9000      	str	r0, [sp, #0]
 80067f8:	4803      	ldr	r0, [pc, #12]	; (8006808 <ssd1306_I2C_WriteMulti+0xc8>)
 80067fa:	f003 f8ef 	bl	80099dc <HAL_I2C_Master_Transmit>
}
 80067fe:	bf00      	nop
 8006800:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}
 8006808:	20000604 	.word	0x20000604

0800680c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af02      	add	r7, sp, #8
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
 8006816:	460b      	mov	r3, r1
 8006818:	71bb      	strb	r3, [r7, #6]
 800681a:	4613      	mov	r3, r2
 800681c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800681e:	79bb      	ldrb	r3, [r7, #6]
 8006820:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006822:	797b      	ldrb	r3, [r7, #5]
 8006824:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	b299      	uxth	r1, r3
 800682a:	f107 020c 	add.w	r2, r7, #12
 800682e:	230a      	movs	r3, #10
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	2302      	movs	r3, #2
 8006834:	4803      	ldr	r0, [pc, #12]	; (8006844 <ssd1306_I2C_Write+0x38>)
 8006836:	f003 f8d1 	bl	80099dc <HAL_I2C_Master_Transmit>
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000604 	.word	0x20000604

08006848 <SX1278_SPIRead>:

/*Declare global variable in hear*/
extern uint8_t gl_buffer_TX[16];
extern uint8_t gl_buffer_RX[16];

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fbd0 	bl	8007002 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fbeb 	bl	8007042 <SX1278_hw_SPIReadByte>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2101      	movs	r1, #1
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fb88 	bl	8006f8c <SX1278_hw_SetNSS>
	return tmp;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
 8006892:	4613      	mov	r3, r2
 8006894:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fb75 	bl	8006f8c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 fba6 	bl	8007002 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	78ba      	ldrb	r2, [r7, #2]
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb9f 	bl	8007002 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fb5e 	bl	8006f8c <SX1278_hw_SetNSS>
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	461a      	mov	r2, r3
 80068e4:	460b      	mov	r3, r1
 80068e6:	72fb      	strb	r3, [r7, #11]
 80068e8:	4613      	mov	r3, r2
 80068ea:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80068ec:	7abb      	ldrb	r3, [r7, #10]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d927      	bls.n	8006942 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fb47 	bl	8006f8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	7afa      	ldrb	r2, [r7, #11]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fb7b 	bl	8007002 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800690c:	2300      	movs	r3, #0
 800690e:	75fb      	strb	r3, [r7, #23]
 8006910:	e00c      	b.n	800692c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	18d4      	adds	r4, r2, r3
 800691c:	4608      	mov	r0, r1
 800691e:	f000 fb90 	bl	8007042 <SX1278_hw_SPIReadByte>
 8006922:	4603      	mov	r3, r0
 8006924:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	3301      	adds	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
 800692c:	7dfa      	ldrb	r2, [r7, #23]
 800692e:	7abb      	ldrb	r3, [r7, #10]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3ee      	bcc.n	8006912 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fb26 	bl	8006f8c <SX1278_hw_SetNSS>
 8006940:	e000      	b.n	8006944 <SX1278_SPIBurstRead+0x6c>
		return;
 8006942:	bf00      	nop
	}
}
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}

0800694a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800694a:	b580      	push	{r7, lr}
 800694c:	b086      	sub	sp, #24
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	461a      	mov	r2, r3
 8006956:	460b      	mov	r3, r1
 8006958:	72fb      	strb	r3, [r7, #11]
 800695a:	4613      	mov	r3, r2
 800695c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800695e:	7abb      	ldrb	r3, [r7, #10]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d929      	bls.n	80069b8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fb0e 	bl	8006f8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 fb3f 	bl	8007002 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
 8006988:	e00b      	b.n	80069a2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	f000 fb33 	bl	8007002 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	3301      	adds	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
 80069a2:	7dfa      	ldrb	r2, [r7, #23]
 80069a4:	7abb      	ldrb	r3, [r7, #10]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3ef      	bcc.n	800698a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 faeb 	bl	8006f8c <SX1278_hw_SetNSS>
 80069b6:	e000      	b.n	80069ba <SX1278_SPIBurstWrite+0x70>
		return;
 80069b8:	bf00      	nop
	}
}
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f90d 	bl	8006be8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80069ce:	200f      	movs	r0, #15
 80069d0:	f000 fb5d 	bl	800708e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f917 	bl	8006c08 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	684a      	ldr	r2, [r1, #4]
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	f04f 0000 	mov.w	r0, #0
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	04d9      	lsls	r1, r3, #19
 80069ea:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80069ee:	04d0      	lsls	r0, r2, #19
 80069f0:	4a6f      	ldr	r2, [pc, #444]	; (8006bb0 <SX1278_config+0x1f0>)
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	f7ff f9d1 	bl	8005d9c <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8006a02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	0c02      	lsrs	r2, r0, #16
 8006a10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a14:	0c0b      	lsrs	r3, r1, #16
 8006a16:	b2d3      	uxtb	r3, r2
 8006a18:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8006a1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	0a02      	lsrs	r2, r0, #8
 8006a28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006a2c:	0a0b      	lsrs	r3, r1, #8
 8006a2e:	b2d3      	uxtb	r3, r2
 8006a30:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8006a32:	7c3b      	ldrb	r3, [r7, #16]
 8006a34:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8006a36:	f107 020c 	add.w	r2, r7, #12
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	2106      	movs	r1, #6
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff83 	bl	800694a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8006a44:	2234      	movs	r2, #52	; 0x34
 8006a46:	2139      	movs	r1, #57	; 0x39
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ff1c 	bl	8006886 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7b1b      	ldrb	r3, [r3, #12]
 8006a52:	461a      	mov	r2, r3
 8006a54:	4b57      	ldr	r3, [pc, #348]	; (8006bb4 <SX1278_config+0x1f4>)
 8006a56:	5c9b      	ldrb	r3, [r3, r2]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2109      	movs	r1, #9
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ff12 	bl	8006886 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8006a62:	220b      	movs	r2, #11
 8006a64:	210b      	movs	r1, #11
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff0d 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8006a6c:	2223      	movs	r2, #35	; 0x23
 8006a6e:	210c      	movs	r1, #12
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff08 	bl	8006886 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7b5b      	ldrb	r3, [r3, #13]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4b4e      	ldr	r3, [pc, #312]	; (8006bb8 <SX1278_config+0x1f8>)
 8006a7e:	5c9b      	ldrb	r3, [r3, r2]
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d147      	bne.n	8006b14 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7b9b      	ldrb	r3, [r3, #14]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b4c      	ldr	r3, [pc, #304]	; (8006bbc <SX1278_config+0x1fc>)
 8006a8c:	5c9b      	ldrb	r3, [r3, r2]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7bdb      	ldrb	r3, [r3, #15]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4b49      	ldr	r3, [pc, #292]	; (8006bc0 <SX1278_config+0x200>)
 8006a9a:	5c5b      	ldrb	r3, [r3, r1]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	211d      	movs	r1, #29
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff feea 	bl	8006886 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7b5b      	ldrb	r3, [r3, #13]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <SX1278_config+0x1f8>)
 8006aba:	5c9b      	ldrb	r3, [r3, r2]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7c1b      	ldrb	r3, [r3, #16]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4b3f      	ldr	r3, [pc, #252]	; (8006bc4 <SX1278_config+0x204>)
 8006ac8:	5c5b      	ldrb	r3, [r3, r1]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006ad2:	3303      	adds	r3, #3
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	211e      	movs	r1, #30
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fed3 	bl	8006886 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8006ae0:	2131      	movs	r1, #49	; 0x31
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff feb0 	bl	8006848 <SX1278_SPIRead>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	f043 0305 	orr.w	r3, r3, #5
 8006afa:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	461a      	mov	r2, r3
 8006b00:	2131      	movs	r1, #49	; 0x31
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff febf 	bl	8006886 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8006b08:	220c      	movs	r2, #12
 8006b0a:	2137      	movs	r1, #55	; 0x37
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff feba 	bl	8006886 <SX1278_SPIWrite>
 8006b12:	e029      	b.n	8006b68 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7b9b      	ldrb	r3, [r3, #14]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <SX1278_config+0x1fc>)
 8006b1c:	5c9b      	ldrb	r3, [r3, r2]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7bdb      	ldrb	r3, [r3, #15]
 8006b26:	4619      	mov	r1, r3
 8006b28:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <SX1278_config+0x200>)
 8006b2a:	5c5b      	ldrb	r3, [r3, r1]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006b30:	4413      	add	r3, r2
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	211d      	movs	r1, #29
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fea4 	bl	8006886 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7b5b      	ldrb	r3, [r3, #13]
 8006b42:	461a      	mov	r2, r3
 8006b44:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <SX1278_config+0x1f8>)
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7c1b      	ldrb	r3, [r3, #16]
 8006b50:	4619      	mov	r1, r3
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <SX1278_config+0x204>)
 8006b54:	5c5b      	ldrb	r3, [r3, r1]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	211e      	movs	r1, #30
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fe8f 	bl	8006886 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8006b68:	2204      	movs	r2, #4
 8006b6a:	2126      	movs	r1, #38	; 0x26
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fe8a 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8006b72:	2208      	movs	r2, #8
 8006b74:	211f      	movs	r1, #31
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fe85 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2120      	movs	r1, #32
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fe80 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8006b86:	2208      	movs	r2, #8
 8006b88:	2121      	movs	r1, #33	; 0x21
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fe7b 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8006b90:	2201      	movs	r2, #1
 8006b92:	2141      	movs	r1, #65	; 0x41
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fe76 	bl	8006886 <SX1278_SPIWrite>
	module->readBytes = 0;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f810 	bl	8006bc8 <SX1278_standby>
}
 8006ba8:	bf00      	nop
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	01e84800 	.word	0x01e84800
 8006bb4:	0800c6ec 	.word	0x0800c6ec
 8006bb8:	0800c6f0 	.word	0x0800c6f0
 8006bbc:	0800c6f8 	.word	0x0800c6f8
 8006bc0:	0800c704 	.word	0x0800c704
 8006bc4:	0800c708 	.word	0x0800c708

08006bc8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8006bd0:	2209      	movs	r2, #9
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fe56 	bl	8006886 <SX1278_SPIWrite>
	module->status = STANDBY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	749a      	strb	r2, [r3, #18]
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fe46 	bl	8006886 <SX1278_SPIWrite>
	module->status = SLEEP;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	749a      	strb	r2, [r3, #18]
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8006c10:	2288      	movs	r2, #136	; 0x88
 8006c12:	2101      	movs	r1, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fe36 	bl	8006886 <SX1278_SPIWrite>
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8006c2a:	22ff      	movs	r2, #255	; 0xff
 8006c2c:	2112      	movs	r1, #18
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fe29 	bl	8006886 <SX1278_SPIWrite>
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	460b      	mov	r3, r1
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	7afa      	ldrb	r2, [r7, #11]
 8006c4e:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff feb5 	bl	80069c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8006c56:	2284      	movs	r2, #132	; 0x84
 8006c58:	214d      	movs	r1, #77	; 0x4d
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff fe13 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	2124      	movs	r1, #36	; 0x24
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fe0e 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2140      	movs	r1, #64	; 0x40
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff fe09 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8006c74:	223f      	movs	r2, #63	; 0x3f
 8006c76:	2111      	movs	r1, #17
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fe04 	bl	8006886 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ffcf 	bl	8006c22 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	461a      	mov	r2, r3
 8006c88:	2122      	movs	r1, #34	; 0x22
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff fdfb 	bl	8006886 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8006c90:	210f      	movs	r1, #15
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff fdd8 	bl	8006848 <SX1278_SPIRead>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	210d      	movs	r1, #13
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff fdef 	bl	8006886 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 8006ca8:	2205      	movs	r2, #5
 8006caa:	2101      	movs	r1, #1
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fdea 	bl	8006886 <SX1278_SPIWrite>
	module->readBytes = 0;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8006cba:	2118      	movs	r1, #24
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fdc3 	bl	8006848 <SX1278_SPIRead>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d104      	bne.n	8006cd6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2203      	movs	r2, #3
 8006cd0:	749a      	strb	r2, [r3, #18]
			return 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e013      	b.n	8006cfe <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 f967 	bl	8006fba <SX1278_hw_Reset>
			SX1278_config(module);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fe67 	bl	80069c0 <SX1278_config>
			return 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e003      	b.n	8006cfe <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f000 f9c9 	bl	800708e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8006cfc:	e7dd      	b.n	8006cba <SX1278_LoRaEntryRx+0x7e>
	}
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f9c6 	bl	80070a4 <SX1278_hw_GetDIO0>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d030      	beq.n	8006d80 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3313      	adds	r3, #19
 8006d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f005 f80b 	bl	800bd44 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8006d2e:	2110      	movs	r1, #16
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fd89 	bl	8006848 <SX1278_SPIRead>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	210d      	movs	r1, #13
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fda0 	bl	8006886 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7b5b      	ldrb	r3, [r3, #13]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7c5b      	ldrb	r3, [r3, #17]
 8006d52:	73fb      	strb	r3, [r7, #15]
 8006d54:	e005      	b.n	8006d62 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8006d56:	2113      	movs	r1, #19
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff fd75 	bl	8006848 <SX1278_SPIRead>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f103 0213 	add.w	r2, r3, #19
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fdb3 	bl	80068d8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7bfa      	ldrb	r2, [r7, #15]
 8006d76:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff ff51 	bl	8006c22 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	460b      	mov	r3, r1
 8006d98:	607a      	str	r2, [r7, #4]
 8006d9a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	7afa      	ldrb	r2, [r7, #11]
 8006da0:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff fe0c 	bl	80069c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8006da8:	2287      	movs	r2, #135	; 0x87
 8006daa:	214d      	movs	r1, #77	; 0x4d
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fd6a 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8006db2:	2200      	movs	r2, #0
 8006db4:	2124      	movs	r1, #36	; 0x24
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fd65 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8006dbc:	2241      	movs	r2, #65	; 0x41
 8006dbe:	2140      	movs	r1, #64	; 0x40
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff fd60 	bl	8006886 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ff2b 	bl	8006c22 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8006dcc:	22f7      	movs	r2, #247	; 0xf7
 8006dce:	2111      	movs	r1, #17
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fd58 	bl	8006886 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2122      	movs	r1, #34	; 0x22
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fd52 	bl	8006886 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8006de2:	210e      	movs	r1, #14
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fd2f 	bl	8006848 <SX1278_SPIRead>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	461a      	mov	r2, r3
 8006df2:	210d      	movs	r1, #13
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fd46 	bl	8006886 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8006dfa:	2122      	movs	r1, #34	; 0x22
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fd23 	bl	8006848 <SX1278_SPIRead>
 8006e02:	4603      	mov	r3, r0
 8006e04:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8006e06:	7dba      	ldrb	r2, [r7, #22]
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d104      	bne.n	8006e18 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2202      	movs	r2, #2
 8006e12:	749a      	strb	r2, [r3, #18]
			return 1;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e00e      	b.n	8006e36 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ea      	bne.n	8006dfa <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f8c6 	bl	8006fba <SX1278_hw_Reset>
			SX1278_config(module);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fdc6 	bl	80069c0 <SX1278_config>
			return 0;
 8006e34:	2300      	movs	r3, #0
		}
	}
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	2100      	movs	r1, #0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fd78 	bl	800694a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8006e5a:	228b      	movs	r2, #139	; 0x8b
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fd11 	bl	8006886 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 f91b 	bl	80070a4 <SX1278_hw_GetDIO0>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8006e74:	2112      	movs	r1, #18
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff fce6 	bl	8006848 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff fed0 	bl	8006c22 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fea0 	bl	8006bc8 <SX1278_standby>
			return 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e013      	b.n	8006eb4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f88c 	bl	8006fba <SX1278_hw_Reset>
			SX1278_config(module);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fd8c 	bl	80069c0 <SX1278_config>
			return 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e003      	b.n	8006eb4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8006eac:	2001      	movs	r0, #1
 8006eae:	f000 f8ee 	bl	800708e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8006eb2:	e7d7      	b.n	8006e64 <SX1278_LoRaTxPacket+0x26>
	}
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f848 	bl	8006f62 <SX1278_hw_init>
	module->frequency = frequency;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]
	module->power = power;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7e3a      	ldrb	r2, [r7, #24]
 8006ee0:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	7f3a      	ldrb	r2, [r7, #28]
 8006ee6:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006eee:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006ef6:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006efe:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006f06:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff fd59 	bl	80069c0 <SX1278_config>
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	4613      	mov	r3, r2
 8006f22:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006f2a:	79fa      	ldrb	r2, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d003      	beq.n	8006f38 <SX1278_read+0x22>
		length = module->readBytes;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006f36:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3313      	adds	r3, #19
 8006f3c:	79fa      	ldrb	r2, [r7, #7]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68b8      	ldr	r0, [r7, #8]
 8006f42:	f004 ff33 	bl	800bdac <memcpy>
	rxBuf[length] = '\0';
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8006f58:	79fb      	ldrb	r3, [r7, #7]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f80d 	bl	8006f8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6858      	ldr	r0, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f002 fb9f 	bl	80096c2 <HAL_GPIO_WritePin>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6958      	ldr	r0, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	b299      	uxth	r1, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2301      	moveq	r3, #1
 8006fa8:	2300      	movne	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	f002 fb88 	bl	80096c2 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ffe1 	bl	8006f8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6858      	ldr	r0, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f002 fb73 	bl	80096c2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f000 f856 	bl	800708e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6858      	ldr	r0, [r3, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2201      	movs	r2, #1
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f002 fb67 	bl	80096c2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8006ff4:	2064      	movs	r0, #100	; 0x64
 8006ff6:	f000 f84a 	bl	800708e <SX1278_hw_DelayMs>
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800700e:	2100      	movs	r1, #0
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ffbb 	bl	8006f8c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6998      	ldr	r0, [r3, #24]
 800701a:	1cf9      	adds	r1, r7, #3
 800701c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007020:	2201      	movs	r2, #1
 8007022:	f003 fe97 	bl	800ad54 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8007026:	bf00      	nop
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4618      	mov	r0, r3
 800702e:	f004 f984 	bl	800b33a <HAL_SPI_GetState>
 8007032:	4603      	mov	r3, r0
 8007034:	2b01      	cmp	r3, #1
 8007036:	d1f7      	bne.n	8007028 <SX1278_hw_SPICommand+0x26>
		;
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af02      	add	r7, sp, #8
 8007048:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800704e:	2300      	movs	r3, #0
 8007050:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ff99 	bl	8006f8c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6998      	ldr	r0, [r3, #24]
 800705e:	f107 020e 	add.w	r2, r7, #14
 8007062:	f107 010f 	add.w	r1, r7, #15
 8007066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2301      	movs	r3, #1
 800706e:	f003 ffb4 	bl	800afda <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8007072:	bf00      	nop
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4618      	mov	r0, r3
 800707a:	f004 f95e 	bl	800b33a <HAL_SPI_GetState>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d1f7      	bne.n	8007074 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8007084:	7bbb      	ldrb	r3, [r7, #14]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fc02 	bl	80088a0 <HAL_Delay>
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f002 faeb 	bl	8009694 <HAL_GPIO_ReadPin>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	bf0c      	ite	eq
 80070c4:	2301      	moveq	r3, #1
 80070c6:	2300      	movne	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	0000      	movs	r0, r0
 80070d4:	0000      	movs	r0, r0
	...

080070d8 <LORA_IF_Init>:
uint32_t Node_Address;
uint32_t Address_Receive;
struct AES_ctx ctx;
static uint8_t AES_CTR_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CTR_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void LORA_IF_Init(){
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af06      	add	r7, sp, #24
	  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <LORA_IF_Init+0x90>)
 80070e0:	4a22      	ldr	r2, [pc, #136]	; (800716c <LORA_IF_Init+0x94>)
 80070e2:	60da      	str	r2, [r3, #12]
	  SX1278_hw.dio0.pin = DIO0_Pin;
 80070e4:	4b20      	ldr	r3, [pc, #128]	; (8007168 <LORA_IF_Init+0x90>)
 80070e6:	2202      	movs	r2, #2
 80070e8:	609a      	str	r2, [r3, #8]
	  SX1278_hw.nss.port = NSS_GPIO_Port;
 80070ea:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <LORA_IF_Init+0x90>)
 80070ec:	4a20      	ldr	r2, [pc, #128]	; (8007170 <LORA_IF_Init+0x98>)
 80070ee:	615a      	str	r2, [r3, #20]
	  SX1278_hw.nss.pin = NSS_Pin;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <LORA_IF_Init+0x90>)
 80070f2:	2210      	movs	r2, #16
 80070f4:	611a      	str	r2, [r3, #16]
	  SX1278_hw.reset.port = RESET_GPIO_Port;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <LORA_IF_Init+0x90>)
 80070f8:	4a1c      	ldr	r2, [pc, #112]	; (800716c <LORA_IF_Init+0x94>)
 80070fa:	605a      	str	r2, [r3, #4]
	  SX1278_hw.reset.pin = RESET_Pin;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <LORA_IF_Init+0x90>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
	  SX1278_hw.spi = &hspi1;
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <LORA_IF_Init+0x90>)
 8007104:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <LORA_IF_Init+0x9c>)
 8007106:	619a      	str	r2, [r3, #24]
	  /* USER CODE END 2 */
	  SX1278.hw = &SX1278_hw;
 8007108:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <LORA_IF_Init+0xa0>)
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <LORA_IF_Init+0x90>)
 800710c:	601a      	str	r2, [r3, #0]
	  SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 800710e:	2310      	movs	r3, #16
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	2300      	movs	r3, #0
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	9303      	str	r3, [sp, #12]
 800711a:	2307      	movs	r3, #7
 800711c:	9302      	str	r3, [sp, #8]
 800711e:	2306      	movs	r3, #6
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	2301      	movs	r3, #1
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	a30e      	add	r3, pc, #56	; (adr r3, 8007160 <LORA_IF_Init+0x88>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4812      	ldr	r0, [pc, #72]	; (8007178 <LORA_IF_Init+0xa0>)
 800712e:	f7ff fec5 	bl	8006ebc <SX1278_init>
			  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8007132:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007136:	2110      	movs	r1, #16
 8007138:	480f      	ldr	r0, [pc, #60]	; (8007178 <LORA_IF_Init+0xa0>)
 800713a:	f7ff fd7f 	bl	8006c3c <SX1278_LoRaEntryRx>
 800713e:	4603      	mov	r3, r0
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <LORA_IF_Init+0xa4>)
 8007144:	701a      	strb	r2, [r3, #0]
	  UI_DisplayInformation();
 8007146:	f000 f9bd 	bl	80074c4 <UI_DisplayInformation>
	  Node_Address = FUNC_ReaddataAddress(FLAG_NODE_ID);
 800714a:	480d      	ldr	r0, [pc, #52]	; (8007180 <LORA_IF_Init+0xa8>)
 800714c:	f000 fe4e 	bl	8007dec <FUNC_ReaddataAddress>
 8007150:	4603      	mov	r3, r0
 8007152:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <LORA_IF_Init+0xac>)
 8007154:	6013      	str	r3, [r2, #0]
	  LORA_IF_RECIEVE();
 8007156:	f000 f817 	bl	8007188 <LORA_IF_RECIEVE>
//	  // Check Sensor Init Read;
//	  FUNC_get_DHT_val((uint8_t* ) buffer_DHT);
//	  MQ2_Val = FUNC_get_MQ_val();
}
 800715a:	bf00      	nop
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	19cf0e40 	.word	0x19cf0e40
 8007164:	00000000 	.word	0x00000000
 8007168:	20000740 	.word	0x20000740
 800716c:	40010c00 	.word	0x40010c00
 8007170:	40010800 	.word	0x40010800
 8007174:	20000658 	.word	0x20000658
 8007178:	2000075c 	.word	0x2000075c
 800717c:	200004db 	.word	0x200004db
 8007180:	0801fc04 	.word	0x0801fc04
 8007184:	20000504 	.word	0x20000504

08007188 <LORA_IF_RECIEVE>:
void LORA_IF_RECIEVE(){
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
	while(1){
        FUNC_get_DHT_val((uint8_t *)buffer_DHT);
 800718e:	4838      	ldr	r0, [pc, #224]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 8007190:	f000 fd6a 	bl	8007c68 <FUNC_get_DHT_val>

		UI_Display_DataValue((uint8_t*) buffer_DHT , MQ2_Val);
 8007194:	4b37      	ldr	r3, [pc, #220]	; (8007274 <LORA_IF_RECIEVE+0xec>)
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	4619      	mov	r1, r3
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 800719c:	f000 f9fe 	bl	800759c <UI_Display_DataValue>
		uint32_t local_u32addrNode_req = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	607b      	str	r3, [r7, #4]
		if(Address_Receive == Node_Address){
 80071a4:	4b34      	ldr	r3, [pc, #208]	; (8007278 <LORA_IF_RECIEVE+0xf0>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b34      	ldr	r3, [pc, #208]	; (800727c <LORA_IF_RECIEVE+0xf4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1ee      	bne.n	800718e <LORA_IF_RECIEVE+0x6>
			// reset data
			Address_Receive = 0;
 80071b0:	4b31      	ldr	r3, [pc, #196]	; (8007278 <LORA_IF_RECIEVE+0xf0>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
			gl_Status_Flag = buffer_resp[4];
 80071b6:	4b32      	ldr	r3, [pc, #200]	; (8007280 <LORA_IF_RECIEVE+0xf8>)
 80071b8:	791a      	ldrb	r2, [r3, #4]
 80071ba:	4b32      	ldr	r3, [pc, #200]	; (8007284 <LORA_IF_RECIEVE+0xfc>)
 80071bc:	701a      	strb	r2, [r3, #0]
			// Test Jump to FBL
			switch (gl_Status_Flag) {
 80071be:	4b31      	ldr	r3, [pc, #196]	; (8007284 <LORA_IF_RECIEVE+0xfc>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d002      	beq.n	80071cc <LORA_IF_RECIEVE+0x44>
 80071c6:	2b8c      	cmp	r3, #140	; 0x8c
 80071c8:	d009      	beq.n	80071de <LORA_IF_RECIEVE+0x56>
					LORA_IF_SEND((uint8_t*)buffer_send);
					// change to mode Receives
					ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
					break;
				default:
					break;
 80071ca:	e04f      	b.n	800726c <LORA_IF_RECIEVE+0xe4>
					FUNC_EraseAndRestore_Header_Page(BL_FLASHING_STATE , BL_BRANCHING_FLAG_SET);
 80071cc:	2100      	movs	r1, #0
 80071ce:	482e      	ldr	r0, [pc, #184]	; (8007288 <LORA_IF_RECIEVE+0x100>)
 80071d0:	f000 fe1a 	bl	8007e08 <FUNC_EraseAndRestore_Header_Page>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80071d4:	b672      	cpsid	i
}
 80071d6:	bf00      	nop
					UI_InitBoot();
 80071d8:	f000 f926 	bl	8007428 <UI_InitBoot>
					break;
 80071dc:	e046      	b.n	800726c <LORA_IF_RECIEVE+0xe4>
					buffer_send[0] = (Node_Address>>SHIFT_24_BIT)&0xff;
 80071de:	4b27      	ldr	r3, [pc, #156]	; (800727c <LORA_IF_RECIEVE+0xf4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	0e1b      	lsrs	r3, r3, #24
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <LORA_IF_RECIEVE+0x104>)
 80071e8:	701a      	strb	r2, [r3, #0]
					buffer_send[1] = (Node_Address>>SHIFT_16_BIT)&0xff;
 80071ea:	4b24      	ldr	r3, [pc, #144]	; (800727c <LORA_IF_RECIEVE+0xf4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	0c1b      	lsrs	r3, r3, #16
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	4b26      	ldr	r3, [pc, #152]	; (800728c <LORA_IF_RECIEVE+0x104>)
 80071f4:	705a      	strb	r2, [r3, #1]
					buffer_send[2] = (Node_Address>>SHIFT_8_BIT)&0xff;
 80071f6:	4b21      	ldr	r3, [pc, #132]	; (800727c <LORA_IF_RECIEVE+0xf4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b23      	ldr	r3, [pc, #140]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007200:	709a      	strb	r2, [r3, #2]
					buffer_send[3] = (Node_Address>>SHIFT_0_BIT)&0xff;
 8007202:	4b1e      	ldr	r3, [pc, #120]	; (800727c <LORA_IF_RECIEVE+0xf4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b20      	ldr	r3, [pc, #128]	; (800728c <LORA_IF_RECIEVE+0x104>)
 800720a:	70da      	strb	r2, [r3, #3]
					buffer_send[4] = TEMP;
 800720c:	4b1f      	ldr	r3, [pc, #124]	; (800728c <LORA_IF_RECIEVE+0x104>)
 800720e:	2201      	movs	r2, #1
 8007210:	711a      	strb	r2, [r3, #4]
					buffer_send[5] = buffer_DHT[0];
 8007212:	4b17      	ldr	r3, [pc, #92]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	4b1d      	ldr	r3, [pc, #116]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007218:	715a      	strb	r2, [r3, #5]
					buffer_send[6] = buffer_DHT[1];
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 800721c:	785a      	ldrb	r2, [r3, #1]
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007220:	719a      	strb	r2, [r3, #6]
					buffer_send[7] = TEMP;
 8007222:	4b1a      	ldr	r3, [pc, #104]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007224:	2201      	movs	r2, #1
 8007226:	71da      	strb	r2, [r3, #7]
					buffer_send[8] = buffer_DHT[2];
 8007228:	4b11      	ldr	r3, [pc, #68]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 800722a:	789a      	ldrb	r2, [r3, #2]
 800722c:	4b17      	ldr	r3, [pc, #92]	; (800728c <LORA_IF_RECIEVE+0x104>)
 800722e:	721a      	strb	r2, [r3, #8]
					buffer_send[9] = buffer_DHT[3];
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <LORA_IF_RECIEVE+0xe8>)
 8007232:	78da      	ldrb	r2, [r3, #3]
 8007234:	4b15      	ldr	r3, [pc, #84]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007236:	725a      	strb	r2, [r3, #9]
					buffer_send[10] = GAS;
 8007238:	4b14      	ldr	r3, [pc, #80]	; (800728c <LORA_IF_RECIEVE+0x104>)
 800723a:	2200      	movs	r2, #0
 800723c:	729a      	strb	r2, [r3, #10]
					buffer_send[11] = 0;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007240:	2200      	movs	r2, #0
 8007242:	72da      	strb	r2, [r3, #11]
					buffer_send[12] = 0>>SHIFT_8_BIT;
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007246:	2200      	movs	r2, #0
 8007248:	731a      	strb	r2, [r3, #12]
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800724a:	2007      	movs	r0, #7
 800724c:	f001 fe83 	bl	8008f56 <HAL_NVIC_DisableIRQ>
					LORA_IF_SEND((uint8_t*)buffer_send);
 8007250:	480e      	ldr	r0, [pc, #56]	; (800728c <LORA_IF_RECIEVE+0x104>)
 8007252:	f000 f821 	bl	8007298 <LORA_IF_SEND>
					ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8007256:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800725a:	2110      	movs	r1, #16
 800725c:	480c      	ldr	r0, [pc, #48]	; (8007290 <LORA_IF_RECIEVE+0x108>)
 800725e:	f7ff fced 	bl	8006c3c <SX1278_LoRaEntryRx>
 8007262:	4603      	mov	r3, r0
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <LORA_IF_RECIEVE+0x10c>)
 8007268:	701a      	strb	r2, [r3, #0]
					break;
 800726a:	bf00      	nop
	while(1){
 800726c:	e78f      	b.n	800718e <LORA_IF_RECIEVE+0x6>
 800726e:	bf00      	nop
 8007270:	200004fc 	.word	0x200004fc
 8007274:	20000500 	.word	0x20000500
 8007278:	20000508 	.word	0x20000508
 800727c:	20000504 	.word	0x20000504
 8007280:	200004dc 	.word	0x200004dc
 8007284:	200004da 	.word	0x200004da
 8007288:	0801fc00 	.word	0x0801fc00
 800728c:	200004ec 	.word	0x200004ec
 8007290:	2000075c 	.word	0x2000075c
 8007294:	200004db 	.word	0x200004db

08007298 <LORA_IF_SEND>:
			}
		}
	}
}

void LORA_IF_SEND(uint8_t *buffer_send){
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	AES_init_ctx_iv(&ctx, AES_CTR_128_Key, AES_CTR_128_IV);
 80072a0:	4a21      	ldr	r2, [pc, #132]	; (8007328 <LORA_IF_SEND+0x90>)
 80072a2:	4922      	ldr	r1, [pc, #136]	; (800732c <LORA_IF_SEND+0x94>)
 80072a4:	4822      	ldr	r0, [pc, #136]	; (8007330 <LORA_IF_SEND+0x98>)
 80072a6:	f000 fab9 	bl	800781c <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_send, 16);
 80072aa:	2210      	movs	r2, #16
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4820      	ldr	r0, [pc, #128]	; (8007330 <LORA_IF_SEND+0x98>)
 80072b0:	f000 fc77 	bl	8007ba2 <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80072b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80072b8:	2110      	movs	r1, #16
 80072ba:	481e      	ldr	r0, [pc, #120]	; (8007334 <LORA_IF_SEND+0x9c>)
 80072bc:	f7ff fd67 	bl	8006d8e <SX1278_LoRaEntryTx>
 80072c0:	4603      	mov	r3, r0
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <LORA_IF_SEND+0xa0>)
 80072c6:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer_send, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80072c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80072cc:	2210      	movs	r2, #16
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4818      	ldr	r0, [pc, #96]	; (8007334 <LORA_IF_SEND+0x9c>)
 80072d2:	f7ff fdb4 	bl	8006e3e <SX1278_LoRaTxPacket>
 80072d6:	4603      	mov	r3, r0
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	4b17      	ldr	r3, [pc, #92]	; (8007338 <LORA_IF_SEND+0xa0>)
 80072dc:	701a      	strb	r2, [r3, #0]
	if(ret){
 80072de:	4b16      	ldr	r3, [pc, #88]	; (8007338 <LORA_IF_SEND+0xa0>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <LORA_IF_SEND+0x58>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80072e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ea:	4814      	ldr	r0, [pc, #80]	; (800733c <LORA_IF_SEND+0xa4>)
 80072ec:	f002 fa01 	bl	80096f2 <HAL_GPIO_TogglePin>
	}

	__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 80072f0:	4b13      	ldr	r3, [pc, #76]	; (8007340 <LORA_IF_SEND+0xa8>)
 80072f2:	7d1a      	ldrb	r2, [r3, #20]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f042 0202 	orr.w	r2, r2, #2
 80072fa:	751a      	strb	r2, [r3, #20]
 80072fc:	7d5a      	ldrb	r2, [r3, #21]
 80072fe:	2200      	movs	r2, #0
 8007300:	755a      	strb	r2, [r3, #21]
 8007302:	7d9a      	ldrb	r2, [r3, #22]
 8007304:	2200      	movs	r2, #0
 8007306:	759a      	strb	r2, [r3, #22]
 8007308:	7dda      	ldrb	r2, [r3, #23]
 800730a:	2200      	movs	r2, #0
 800730c:	75da      	strb	r2, [r3, #23]
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800730e:	2007      	movs	r0, #7
 8007310:	f001 fe13 	bl	8008f3a <HAL_NVIC_EnableIRQ>

	// Reset Buffer to default
	memset((uint8_t*)buffer_resp , 0xff , 16);
 8007314:	2210      	movs	r2, #16
 8007316:	21ff      	movs	r1, #255	; 0xff
 8007318:	480a      	ldr	r0, [pc, #40]	; (8007344 <LORA_IF_SEND+0xac>)
 800731a:	f004 fd13 	bl	800bd44 <memset>
	//ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);

}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000010 	.word	0x20000010
 800732c:	20000000 	.word	0x20000000
 8007330:	2000050c 	.word	0x2000050c
 8007334:	2000075c 	.word	0x2000075c
 8007338:	200004db 	.word	0x200004db
 800733c:	40010c00 	.word	0x40010c00
 8007340:	40010400 	.word	0x40010400
 8007344:	200004dc 	.word	0x200004dc

08007348 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	80fb      	strh	r3, [r7, #6]
	uint32_t address_break = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == DIO0_Pin){
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d14d      	bne.n	80073f8 <HAL_GPIO_EXTI_Callback+0xb0>
			ret = SX1278_LoRaRxPacket(&SX1278);
 800735c:	4828      	ldr	r0, [pc, #160]	; (8007400 <HAL_GPIO_EXTI_Callback+0xb8>)
 800735e:	f7ff fcd2 	bl	8006d06 <SX1278_LoRaRxPacket>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <HAL_GPIO_EXTI_Callback+0xbc>)
 8007368:	701a      	strb	r2, [r3, #0]
			if(ret > 0 ){
 800736a:	4b26      	ldr	r3, [pc, #152]	; (8007404 <HAL_GPIO_EXTI_Callback+0xbc>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d042      	beq.n	80073f8 <HAL_GPIO_EXTI_Callback+0xb0>
				ret = SX1278_read(&SX1278, (uint8_t*) buffer_resp, ret);
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <HAL_GPIO_EXTI_Callback+0xbc>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	4923      	ldr	r1, [pc, #140]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 800737a:	4821      	ldr	r0, [pc, #132]	; (8007400 <HAL_GPIO_EXTI_Callback+0xb8>)
 800737c:	f7ff fdcb 	bl	8006f16 <SX1278_read>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <HAL_GPIO_EXTI_Callback+0xbc>)
 8007386:	701a      	strb	r2, [r3, #0]
				AES_init_ctx_iv(&ctx, AES_CTR_128_Key, AES_CTR_128_IV);
 8007388:	4a20      	ldr	r2, [pc, #128]	; (800740c <HAL_GPIO_EXTI_Callback+0xc4>)
 800738a:	4921      	ldr	r1, [pc, #132]	; (8007410 <HAL_GPIO_EXTI_Callback+0xc8>)
 800738c:	4821      	ldr	r0, [pc, #132]	; (8007414 <HAL_GPIO_EXTI_Callback+0xcc>)
 800738e:	f000 fa45 	bl	800781c <AES_init_ctx_iv>
				AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 8007392:	2210      	movs	r2, #16
 8007394:	491c      	ldr	r1, [pc, #112]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 8007396:	481f      	ldr	r0, [pc, #124]	; (8007414 <HAL_GPIO_EXTI_Callback+0xcc>)
 8007398:	f000 fc03 	bl	8007ba2 <AES_CTR_xcrypt_buffer>
				Address_Receive = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	061a      	lsls	r2, r3, #24
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	431a      	orrs	r2, r3
													|(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 80073aa:	4b17      	ldr	r3, [pc, #92]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 80073ac:	789b      	ldrb	r3, [r3, #2]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	4313      	orrs	r3, r2
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <HAL_GPIO_EXTI_Callback+0xc0>)
 80073b4:	78d2      	ldrb	r2, [r2, #3]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	461a      	mov	r2, r3
				Address_Receive = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <HAL_GPIO_EXTI_Callback+0xd0>)
 80073bc:	601a      	str	r2, [r3, #0]
				if (Address_Receive == Node_Address){
 80073be:	4b16      	ldr	r3, [pc, #88]	; (8007418 <HAL_GPIO_EXTI_Callback+0xd0>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <HAL_GPIO_EXTI_Callback+0xd4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d116      	bne.n	80073f8 <HAL_GPIO_EXTI_Callback+0xb0>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80073ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073ce:	4814      	ldr	r0, [pc, #80]	; (8007420 <HAL_GPIO_EXTI_Callback+0xd8>)
 80073d0:	f002 f98f 	bl	80096f2 <HAL_GPIO_TogglePin>
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80073d4:	2007      	movs	r0, #7
 80073d6:	f001 fdbe 	bl	8008f56 <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <HAL_GPIO_EXTI_Callback+0xdc>)
 80073dc:	7d1a      	ldrb	r2, [r3, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	f042 0202 	orr.w	r2, r2, #2
 80073e4:	751a      	strb	r2, [r3, #20]
 80073e6:	7d5a      	ldrb	r2, [r3, #21]
 80073e8:	2200      	movs	r2, #0
 80073ea:	755a      	strb	r2, [r3, #21]
 80073ec:	7d9a      	ldrb	r2, [r3, #22]
 80073ee:	2200      	movs	r2, #0
 80073f0:	759a      	strb	r2, [r3, #22]
 80073f2:	7dda      	ldrb	r2, [r3, #23]
 80073f4:	2200      	movs	r2, #0
 80073f6:	75da      	strb	r2, [r3, #23]
				}
			}

	}
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	2000075c 	.word	0x2000075c
 8007404:	200004db 	.word	0x200004db
 8007408:	200004dc 	.word	0x200004dc
 800740c:	20000010 	.word	0x20000010
 8007410:	20000000 	.word	0x20000000
 8007414:	2000050c 	.word	0x2000050c
 8007418:	20000508 	.word	0x20000508
 800741c:	20000504 	.word	0x20000504
 8007420:	40010c00 	.word	0x40010c00
 8007424:	40010400 	.word	0x40010400

08007428 <UI_InitBoot>:
static uint32_t ActiveRegionAddress;
static uint32_t Node_ID;
/**********************************************
 * FUNCTION
 * ********************************************/
void UI_InitBoot(void){
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800742e:	f7ff f96a 	bl	8006706 <SSD1306_Clear>
	Node_ID = FUNC_ReaddataAddress(FLAG_NODE_ID);
 8007432:	481c      	ldr	r0, [pc, #112]	; (80074a4 <UI_InitBoot+0x7c>)
 8007434:	f000 fcda 	bl	8007dec <FUNC_ReaddataAddress>
 8007438:	4603      	mov	r3, r0
 800743a:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <UI_InitBoot+0x80>)
 800743c:	6013      	str	r3, [r2, #0]
	char buffer_data_id[4];
	sprintf(buffer_data_id, "%X", Node_ID);
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <UI_InitBoot+0x80>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	4919      	ldr	r1, [pc, #100]	; (80074ac <UI_InitBoot+0x84>)
 8007446:	4618      	mov	r0, r3
 8007448:	f004 fc5c 	bl	800bd04 <siprintf>
	//SSD1306_Init();
	SSD1306_GotoXY (5,10); // goto 10, 10
 800744c:	210a      	movs	r1, #10
 800744e:	2005      	movs	r0, #5
 8007450:	f7ff f89e 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts("FUOTA INIT", &Font_11x18, 1); // print start FUOTA
 8007454:	2201      	movs	r2, #1
 8007456:	4916      	ldr	r1, [pc, #88]	; (80074b0 <UI_InitBoot+0x88>)
 8007458:	4816      	ldr	r0, [pc, #88]	; (80074b4 <UI_InitBoot+0x8c>)
 800745a:	f7ff f92f 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 800745e:	2128      	movs	r1, #40	; 0x28
 8007460:	2005      	movs	r0, #5
 8007462:	f7ff f895 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts ("Updating!!", &Font_7x10, 1);
 8007466:	2201      	movs	r2, #1
 8007468:	4913      	ldr	r1, [pc, #76]	; (80074b8 <UI_InitBoot+0x90>)
 800746a:	4814      	ldr	r0, [pc, #80]	; (80074bc <UI_InitBoot+0x94>)
 800746c:	f7ff f926 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (5, 50);
 8007470:	2132      	movs	r1, #50	; 0x32
 8007472:	2005      	movs	r0, #5
 8007474:	f7ff f88c 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 8007478:	2201      	movs	r2, #1
 800747a:	490f      	ldr	r1, [pc, #60]	; (80074b8 <UI_InitBoot+0x90>)
 800747c:	4810      	ldr	r0, [pc, #64]	; (80074c0 <UI_InitBoot+0x98>)
 800747e:	f7ff f91d 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 8007482:	2132      	movs	r1, #50	; 0x32
 8007484:	203c      	movs	r0, #60	; 0x3c
 8007486:	f7ff f883 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	2201      	movs	r2, #1
 800748e:	490a      	ldr	r1, [pc, #40]	; (80074b8 <UI_InitBoot+0x90>)
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff f913 	bl	80066bc <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8007496:	f7fe ffc7 	bl	8006428 <SSD1306_UpdateScreen>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	0801fc04 	.word	0x0801fc04
 80074a8:	200005d0 	.word	0x200005d0
 80074ac:	0800c680 	.word	0x0800c680
 80074b0:	20000028 	.word	0x20000028
 80074b4:	0800c684 	.word	0x0800c684
 80074b8:	20000020 	.word	0x20000020
 80074bc:	0800c690 	.word	0x0800c690
 80074c0:	0800c69c 	.word	0x0800c69c

080074c4 <UI_DisplayInformation>:
void UI_DisplayInformation(void){
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
	SSD1306_Init();
 80074ca:	f7fe fee9 	bl	80062a0 <SSD1306_Init>
	gl_appver = FUNC_ReaddataAddress(FLAG_STATUS_BANKFIRST_APP_VER_ADDRESS);
 80074ce:	482a      	ldr	r0, [pc, #168]	; (8007578 <UI_DisplayInformation+0xb4>)
 80074d0:	f000 fc8c 	bl	8007dec <FUNC_ReaddataAddress>
 80074d4:	4603      	mov	r3, r0
 80074d6:	4a29      	ldr	r2, [pc, #164]	; (800757c <UI_DisplayInformation+0xb8>)
 80074d8:	6013      	str	r3, [r2, #0]
	Node_ID = FUNC_ReaddataAddress(FLAG_NODE_ID);
 80074da:	4829      	ldr	r0, [pc, #164]	; (8007580 <UI_DisplayInformation+0xbc>)
 80074dc:	f000 fc86 	bl	8007dec <FUNC_ReaddataAddress>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4a28      	ldr	r2, [pc, #160]	; (8007584 <UI_DisplayInformation+0xc0>)
 80074e4:	6013      	str	r3, [r2, #0]

	// Extract the major and minor version numbers from gl_appver
	uint8_t major_version = (gl_appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 80074e6:	4b25      	ldr	r3, [pc, #148]	; (800757c <UI_DisplayInformation+0xb8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	75fb      	strb	r3, [r7, #23]
	uint8_t minor_version = gl_appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <UI_DisplayInformation+0xb8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	75bb      	strb	r3, [r7, #22]

	char buffer_version[10];
	char buffer_data_id[10];
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 80074f4:	7dfa      	ldrb	r2, [r7, #23]
 80074f6:	7dbb      	ldrb	r3, [r7, #22]
 80074f8:	f107 000c 	add.w	r0, r7, #12
 80074fc:	4922      	ldr	r1, [pc, #136]	; (8007588 <UI_DisplayInformation+0xc4>)
 80074fe:	f004 fc01 	bl	800bd04 <siprintf>
	sprintf(buffer_data_id, "%X", Node_ID);
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <UI_DisplayInformation+0xc0>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	463b      	mov	r3, r7
 8007508:	4920      	ldr	r1, [pc, #128]	; (800758c <UI_DisplayInformation+0xc8>)
 800750a:	4618      	mov	r0, r3
 800750c:	f004 fbfa 	bl	800bd04 <siprintf>
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8007510:	7dfa      	ldrb	r2, [r7, #23]
 8007512:	7dbb      	ldrb	r3, [r7, #22]
 8007514:	f107 000c 	add.w	r0, r7, #12
 8007518:	491b      	ldr	r1, [pc, #108]	; (8007588 <UI_DisplayInformation+0xc4>)
 800751a:	f004 fbf3 	bl	800bd04 <siprintf>
	SSD1306_GotoXY(5, 10);
 800751e:	210a      	movs	r1, #10
 8007520:	2005      	movs	r0, #5
 8007522:	f7ff f835 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts("Version:", &Font_7x10, 1);
 8007526:	2201      	movs	r2, #1
 8007528:	4919      	ldr	r1, [pc, #100]	; (8007590 <UI_DisplayInformation+0xcc>)
 800752a:	481a      	ldr	r0, [pc, #104]	; (8007594 <UI_DisplayInformation+0xd0>)
 800752c:	f7ff f8c6 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY(60, 10);
 8007530:	210a      	movs	r1, #10
 8007532:	203c      	movs	r0, #60	; 0x3c
 8007534:	f7ff f82c 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts(buffer_version, &Font_7x10, 1);
 8007538:	f107 030c 	add.w	r3, r7, #12
 800753c:	2201      	movs	r2, #1
 800753e:	4914      	ldr	r1, [pc, #80]	; (8007590 <UI_DisplayInformation+0xcc>)
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff f8bb 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY(5, 20);
 8007546:	2114      	movs	r1, #20
 8007548:	2005      	movs	r0, #5
 800754a:	f7ff f821 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts("Node ID:", &Font_7x10, 1);
 800754e:	2201      	movs	r2, #1
 8007550:	490f      	ldr	r1, [pc, #60]	; (8007590 <UI_DisplayInformation+0xcc>)
 8007552:	4811      	ldr	r0, [pc, #68]	; (8007598 <UI_DisplayInformation+0xd4>)
 8007554:	f7ff f8b2 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY(60, 20);
 8007558:	2114      	movs	r1, #20
 800755a:	203c      	movs	r0, #60	; 0x3c
 800755c:	f7ff f818 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts(buffer_data_id, &Font_7x10, 1);
 8007560:	463b      	mov	r3, r7
 8007562:	2201      	movs	r2, #1
 8007564:	490a      	ldr	r1, [pc, #40]	; (8007590 <UI_DisplayInformation+0xcc>)
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff f8a8 	bl	80066bc <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Update screen
 800756c:	f7fe ff5c 	bl	8006428 <SSD1306_UpdateScreen>
}
 8007570:	bf00      	nop
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0801fc10 	.word	0x0801fc10
 800757c:	200005cc 	.word	0x200005cc
 8007580:	0801fc04 	.word	0x0801fc04
 8007584:	200005d0 	.word	0x200005d0
 8007588:	0800c6a8 	.word	0x0800c6a8
 800758c:	0800c680 	.word	0x0800c680
 8007590:	20000020 	.word	0x20000020
 8007594:	0800c6b0 	.word	0x0800c6b0
 8007598:	0800c6bc 	.word	0x0800c6bc

0800759c <UI_Display_DataValue>:
void UI_Display_DataValue(uint8_t *buffer_DHT ,uint16_t MQ2_Val){
 800759c:	b580      	push	{r7, lr}
 800759e:	b08e      	sub	sp, #56	; 0x38
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	807b      	strh	r3, [r7, #2]
	uint8_t  buffer_DHT_TempH = buffer_DHT[0] ;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  buffer_DHT_TempL = buffer_DHT[1] ;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t  buffer_DHT_HumiH= buffer_DHT[2] ;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	789b      	ldrb	r3, [r3, #2]
 80075bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t  buffer_DHT_HumiL= buffer_DHT[3] ;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	78db      	ldrb	r3, [r3, #3]
 80075c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// Chuyển giá trị nhiệt độ và độ ẩm sang dạng chuỗi
	char temp_str[10];
	char humi_str[10];
	snprintf(temp_str, sizeof(temp_str), "%d.%dC", buffer_DHT_TempH, buffer_DHT_TempL);
 80075c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80075cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80075d0:	f107 0020 	add.w	r0, r7, #32
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4613      	mov	r3, r2
 80075d8:	4a22      	ldr	r2, [pc, #136]	; (8007664 <UI_Display_DataValue+0xc8>)
 80075da:	210a      	movs	r1, #10
 80075dc:	f004 fb5e 	bl	800bc9c <sniprintf>
	snprintf(humi_str, sizeof(humi_str), "%d.%d%%", buffer_DHT_HumiH, buffer_DHT_HumiL);
 80075e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80075e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075e8:	f107 0014 	add.w	r0, r7, #20
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <UI_Display_DataValue+0xcc>)
 80075f2:	210a      	movs	r1, #10
 80075f4:	f004 fb52 	bl	800bc9c <sniprintf>
	// Chuyển giá trị MQ2 sang dạng chuỗi
	char mq2_str[10];
	snprintf(mq2_str, sizeof(mq2_str), "%u", MQ2_Val);
 80075f8:	887b      	ldrh	r3, [r7, #2]
 80075fa:	f107 0008 	add.w	r0, r7, #8
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <UI_Display_DataValue+0xd0>)
 8007600:	210a      	movs	r1, #10
 8007602:	f004 fb4b 	bl	800bc9c <sniprintf>
	SSD1306_GotoXY (5, 30);
 8007606:	211e      	movs	r1, #30
 8007608:	2005      	movs	r0, #5
 800760a:	f7fe ffc1 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts ("Temp:", &Font_7x10, 1);
 800760e:	2201      	movs	r2, #1
 8007610:	4917      	ldr	r1, [pc, #92]	; (8007670 <UI_Display_DataValue+0xd4>)
 8007612:	4818      	ldr	r0, [pc, #96]	; (8007674 <UI_Display_DataValue+0xd8>)
 8007614:	f7ff f852 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8007618:	211e      	movs	r1, #30
 800761a:	2028      	movs	r0, #40	; 0x28
 800761c:	f7fe ffb8 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts (temp_str, &Font_7x10, 1);
 8007620:	f107 0320 	add.w	r3, r7, #32
 8007624:	2201      	movs	r2, #1
 8007626:	4912      	ldr	r1, [pc, #72]	; (8007670 <UI_Display_DataValue+0xd4>)
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff f847 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 800762e:	2128      	movs	r1, #40	; 0x28
 8007630:	2005      	movs	r0, #5
 8007632:	f7fe ffad 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts ("Humi:", &Font_7x10, 1);
 8007636:	2201      	movs	r2, #1
 8007638:	490d      	ldr	r1, [pc, #52]	; (8007670 <UI_Display_DataValue+0xd4>)
 800763a:	480f      	ldr	r0, [pc, #60]	; (8007678 <UI_Display_DataValue+0xdc>)
 800763c:	f7ff f83e 	bl	80066bc <SSD1306_Puts>
	SSD1306_GotoXY (40, 40);
 8007640:	2128      	movs	r1, #40	; 0x28
 8007642:	2028      	movs	r0, #40	; 0x28
 8007644:	f7fe ffa4 	bl	8006590 <SSD1306_GotoXY>
	SSD1306_Puts (humi_str, &Font_7x10, 1);
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	2201      	movs	r2, #1
 800764e:	4908      	ldr	r1, [pc, #32]	; (8007670 <UI_Display_DataValue+0xd4>)
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff f833 	bl	80066bc <SSD1306_Puts>
	//SSD1306_GotoXY (5, 50);
	//SSD1306_Puts ("MQ2:", &Font_7x10, 1);
	//SSD1306_GotoXY (40, 50);
	//SSD1306_Puts (mq2_str, &Font_7x10, 1);
	SSD1306_UpdateScreen();
 8007656:	f7fe fee7 	bl	8006428 <SSD1306_UpdateScreen>
}
 800765a:	bf00      	nop
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0800c6c8 	.word	0x0800c6c8
 8007668:	0800c6d0 	.word	0x0800c6d0
 800766c:	0800c6d8 	.word	0x0800c6d8
 8007670:	20000020 	.word	0x20000020
 8007674:	0800c6dc 	.word	0x0800c6dc
 8007678:	0800c6e4 	.word	0x0800c6e4

0800767c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 800767c:	b480      	push	{r7}
 800767e:	b089      	sub	sp, #36	; 0x24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8007686:	2300      	movs	r3, #0
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e030      	b.n	80076ee <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	441a      	add	r2, r3
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	440b      	add	r3, r1
 800769c:	7812      	ldrb	r2, [r2, #0]
 800769e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	3301      	adds	r3, #1
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	441a      	add	r2, r3
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	3301      	adds	r3, #1
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	440b      	add	r3, r1
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	3302      	adds	r3, #2
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	441a      	add	r2, r3
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	3302      	adds	r3, #2
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	440b      	add	r3, r1
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	3303      	adds	r3, #3
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	441a      	add	r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3303      	adds	r3, #3
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	440b      	add	r3, r1
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	3301      	adds	r3, #1
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d9cb      	bls.n	800768c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80076f4:	2304      	movs	r3, #4
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e081      	b.n	80077fe <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	4413      	add	r3, r2
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	3301      	adds	r3, #1
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4413      	add	r3, r2
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	3302      	adds	r3, #2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	3303      	adds	r3, #3
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4413      	add	r3, r2
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d125      	bne.n	8007786 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800773a:	7b3b      	ldrb	r3, [r7, #12]
 800773c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800773e:	7b7b      	ldrb	r3, [r7, #13]
 8007740:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800774e:	7b3b      	ldrb	r3, [r7, #12]
 8007750:	461a      	mov	r2, r3
 8007752:	4b30      	ldr	r3, [pc, #192]	; (8007814 <KeyExpansion+0x198>)
 8007754:	5c9b      	ldrb	r3, [r3, r2]
 8007756:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8007758:	7b7b      	ldrb	r3, [r7, #13]
 800775a:	461a      	mov	r2, r3
 800775c:	4b2d      	ldr	r3, [pc, #180]	; (8007814 <KeyExpansion+0x198>)
 800775e:	5c9b      	ldrb	r3, [r3, r2]
 8007760:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	461a      	mov	r2, r3
 8007766:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <KeyExpansion+0x198>)
 8007768:	5c9b      	ldrb	r3, [r3, r2]
 800776a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	461a      	mov	r2, r3
 8007770:	4b28      	ldr	r3, [pc, #160]	; (8007814 <KeyExpansion+0x198>)
 8007772:	5c9b      	ldrb	r3, [r3, r2]
 8007774:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8007776:	7b3a      	ldrb	r2, [r7, #12]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	089b      	lsrs	r3, r3, #2
 800777c:	4926      	ldr	r1, [pc, #152]	; (8007818 <KeyExpansion+0x19c>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	4053      	eors	r3, r2
 8007782:	b2db      	uxtb	r3, r3
 8007784:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3b04      	subs	r3, #4
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	4413      	add	r3, r2
 800779a:	7819      	ldrb	r1, [r3, #0]
 800779c:	7b3a      	ldrb	r2, [r7, #12]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4403      	add	r3, r0
 80077a4:	404a      	eors	r2, r1
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	3301      	adds	r3, #1
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	7819      	ldrb	r1, [r3, #0]
 80077b4:	7b7a      	ldrb	r2, [r7, #13]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3301      	adds	r3, #1
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4403      	add	r3, r0
 80077be:	404a      	eors	r2, r1
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	3302      	adds	r3, #2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	7819      	ldrb	r1, [r3, #0]
 80077ce:	7bba      	ldrb	r2, [r7, #14]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3302      	adds	r3, #2
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4403      	add	r3, r0
 80077d8:	404a      	eors	r2, r1
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	3303      	adds	r3, #3
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	7819      	ldrb	r1, [r3, #0]
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3303      	adds	r3, #3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4403      	add	r3, r0
 80077f2:	404a      	eors	r2, r1
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b2b      	cmp	r3, #43	; 0x2b
 8007802:	f67f af7a 	bls.w	80076fa <KeyExpansion+0x7e>
  }
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3724      	adds	r7, #36	; 0x24
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	0800c70c 	.word	0x0800c70c
 8007818:	0800c80c 	.word	0x0800c80c

0800781c <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff ff25 	bl	800767c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	33b0      	adds	r3, #176	; 0xb0
 8007836:	2210      	movs	r2, #16
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	f004 fab6 	bl	800bdac <memcpy>
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
 800785a:	e027      	b.n	80078ac <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 800785c:	2300      	movs	r3, #0
 800785e:	75bb      	strb	r3, [r7, #22]
 8007860:	e01e      	b.n	80078a0 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8007862:	7dfa      	ldrb	r2, [r7, #23]
 8007864:	7dbb      	ldrb	r3, [r7, #22]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	440a      	add	r2, r1
 800786c:	4413      	add	r3, r2
 800786e:	7818      	ldrb	r0, [r3, #0]
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	009a      	lsls	r2, r3, #2
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	4413      	add	r3, r2
 8007878:	009a      	lsls	r2, r3, #2
 800787a:	7dbb      	ldrb	r3, [r7, #22]
 800787c:	4413      	add	r3, r2
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	7dfa      	ldrb	r2, [r7, #23]
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	4041      	eors	r1, r0
 800788c:	b2c8      	uxtb	r0, r1
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	440a      	add	r2, r1
 8007894:	4413      	add	r3, r2
 8007896:	4602      	mov	r2, r0
 8007898:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800789a:	7dbb      	ldrb	r3, [r7, #22]
 800789c:	3301      	adds	r3, #1
 800789e:	75bb      	strb	r3, [r7, #22]
 80078a0:	7dbb      	ldrb	r3, [r7, #22]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d9dd      	bls.n	8007862 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	3301      	adds	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d9d4      	bls.n	800785c <AddRoundKey+0x14>
    }
  }
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
	...

080078c0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e01d      	b.n	800790a <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80078ce:	2300      	movs	r3, #0
 80078d0:	73bb      	strb	r3, [r7, #14]
 80078d2:	e014      	b.n	80078fe <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80078d4:	7bba      	ldrb	r2, [r7, #14]
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	0092      	lsls	r2, r2, #2
 80078dc:	440a      	add	r2, r1
 80078de:	4413      	add	r3, r2
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	490c      	ldr	r1, [pc, #48]	; (800791c <SubBytes+0x5c>)
 80078ea:	5c08      	ldrb	r0, [r1, r0]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	440a      	add	r2, r1
 80078f2:	4413      	add	r3, r2
 80078f4:	4602      	mov	r2, r0
 80078f6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	3301      	adds	r3, #1
 80078fc:	73bb      	strb	r3, [r7, #14]
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d9e7      	bls.n	80078d4 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	3301      	adds	r3, #1
 8007908:	73fb      	strb	r3, [r7, #15]
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d9de      	bls.n	80078ce <SubBytes+0xe>
    }
  }
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	0800c70c 	.word	0x0800c70c

08007920 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	795a      	ldrb	r2, [r3, #5]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7a5a      	ldrb	r2, [r3, #9]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7b5a      	ldrb	r2, [r3, #13]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7bfa      	ldrb	r2, [r7, #15]
 800794a:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7a9a      	ldrb	r2, [r3, #10]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7bfa      	ldrb	r2, [r7, #15]
 800795e:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	799b      	ldrb	r3, [r3, #6]
 8007964:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7b9a      	ldrb	r2, [r3, #14]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	78db      	ldrb	r3, [r3, #3]
 8007978:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7bda      	ldrb	r2, [r3, #15]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7ada      	ldrb	r2, [r3, #11]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	79da      	ldrb	r2, [r3, #7]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7bfa      	ldrb	r2, [r7, #15]
 8007996:	71da      	strb	r2, [r3, #7]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <xtime>:

static uint8_t xtime(uint8_t x)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	4603      	mov	r3, r0
 80079aa:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	b25a      	sxtb	r2, r3
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	09db      	lsrs	r3, r3, #7
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	0049      	lsls	r1, r1, #1
 80079bc:	440b      	add	r3, r1
 80079be:	4619      	mov	r1, r3
 80079c0:	00c8      	lsls	r0, r1, #3
 80079c2:	4619      	mov	r1, r3
 80079c4:	4603      	mov	r3, r0
 80079c6:	440b      	add	r3, r1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	4053      	eors	r3, r2
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	b2db      	uxtb	r3, r3
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
 80079e8:	e0a4      	b.n	8007b34 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 80079ea:	7bfa      	ldrb	r2, [r7, #15]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80079f2:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80079f4:	7bfa      	ldrb	r2, [r7, #15]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	4053      	eors	r3, r2
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	789b      	ldrb	r3, [r3, #2]
 8007a14:	4053      	eors	r3, r2
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	4053      	eors	r3, r2
 8007a24:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	4053      	eors	r3, r2
 8007a3a:	733b      	strb	r3, [r7, #12]
 8007a3c:	7b3b      	ldrb	r3, [r7, #12]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff ffaf 	bl	80079a2 <xtime>
 8007a44:	4603      	mov	r3, r0
 8007a46:	733b      	strb	r3, [r7, #12]
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8007a50:	7b3a      	ldrb	r2, [r7, #12]
 8007a52:	7b7b      	ldrb	r3, [r7, #13]
 8007a54:	4053      	eors	r3, r2
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	404b      	eors	r3, r1
 8007a5c:	b2d9      	uxtb	r1, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	785a      	ldrb	r2, [r3, #1]
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	789b      	ldrb	r3, [r3, #2]
 8007a78:	4053      	eors	r3, r2
 8007a7a:	733b      	strb	r3, [r7, #12]
 8007a7c:	7b3b      	ldrb	r3, [r7, #12]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff ff8f 	bl	80079a2 <xtime>
 8007a84:	4603      	mov	r3, r0
 8007a86:	733b      	strb	r3, [r7, #12]
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	7859      	ldrb	r1, [r3, #1]
 8007a92:	7b3a      	ldrb	r2, [r7, #12]
 8007a94:	7b7b      	ldrb	r3, [r7, #13]
 8007a96:	4053      	eors	r3, r2
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	404a      	eors	r2, r1
 8007a9e:	b2d1      	uxtb	r1, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	789a      	ldrb	r2, [r3, #2]
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	78db      	ldrb	r3, [r3, #3]
 8007abe:	4053      	eors	r3, r2
 8007ac0:	733b      	strb	r3, [r7, #12]
 8007ac2:	7b3b      	ldrb	r3, [r7, #12]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff ff6c 	bl	80079a2 <xtime>
 8007aca:	4603      	mov	r3, r0
 8007acc:	733b      	strb	r3, [r7, #12]
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	7899      	ldrb	r1, [r3, #2]
 8007ad8:	7b3a      	ldrb	r2, [r7, #12]
 8007ada:	7b7b      	ldrb	r3, [r7, #13]
 8007adc:	4053      	eors	r3, r2
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	404a      	eors	r2, r1
 8007ae4:	b2d1      	uxtb	r1, r2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	460a      	mov	r2, r1
 8007aee:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	78da      	ldrb	r2, [r3, #3]
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	4053      	eors	r3, r2
 8007afe:	733b      	strb	r3, [r7, #12]
 8007b00:	7b3b      	ldrb	r3, [r7, #12]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff ff4d 	bl	80079a2 <xtime>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	733b      	strb	r3, [r7, #12]
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	78d9      	ldrb	r1, [r3, #3]
 8007b16:	7b3a      	ldrb	r2, [r7, #12]
 8007b18:	7b7b      	ldrb	r3, [r7, #13]
 8007b1a:	4053      	eors	r3, r2
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	404a      	eors	r2, r1
 8007b22:	b2d1      	uxtb	r1, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	460a      	mov	r2, r1
 8007b2c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3301      	adds	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	f67f af57 	bls.w	80079ea <MixColumns+0xe>
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f7ff fe75 	bl	8007848 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff feac 	bl	80078c0 <SubBytes>
    ShiftRows(state);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fed9 	bl	8007920 <ShiftRows>
    if (round == Nr) {
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b0a      	cmp	r3, #10
 8007b72:	d00c      	beq.n	8007b8e <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff31 	bl	80079dc <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fe61 	bl	8007848 <AddRoundKey>
  for (round = 1; ; ++round)
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8007b8c:	e7e9      	b.n	8007b62 <Cipher+0x1c>
      break;
 8007b8e:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	200a      	movs	r0, #10
 8007b96:	f7ff fe57 	bl	8007848 <AddRoundKey>
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8007ba2:	b590      	push	{r4, r7, lr}
 8007ba4:	b08b      	sub	sp, #44	; 0x2c
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	e04e      	b.n	8007c56 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d136      	bne.n	8007c2c <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	33b0      	adds	r3, #176	; 0xb0
 8007bc2:	f107 0410 	add.w	r4, r7, #16
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff ffb4 	bl	8007b46 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8007bde:	230f      	movs	r3, #15
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	e01e      	b.n	8007c22 <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	4413      	add	r3, r2
 8007bea:	33b0      	adds	r3, #176	; 0xb0
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2bff      	cmp	r3, #255	; 0xff
 8007bf0:	d106      	bne.n	8007c00 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	33b0      	adds	r3, #176	; 0xb0
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
          continue;
 8007bfe:	e00d      	b.n	8007c1c <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	4413      	add	r3, r2
 8007c06:	33b0      	adds	r3, #176	; 0xb0
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	b2d9      	uxtb	r1, r3
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	4413      	add	r3, r2
 8007c14:	33b0      	adds	r3, #176	; 0xb0
 8007c16:	460a      	mov	r2, r1
 8007c18:	701a      	strb	r2, [r3, #0]
        break;
 8007c1a:	e005      	b.n	8007c28 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	623b      	str	r3, [r7, #32]
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dadd      	bge.n	8007be4 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	4413      	add	r3, r2
 8007c32:	7819      	ldrb	r1, [r3, #0]
 8007c34:	f107 0210 	add.w	r2, r7, #16
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	68b8      	ldr	r0, [r7, #8]
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	4403      	add	r3, r0
 8007c44:	404a      	eors	r2, r1
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	3301      	adds	r3, #1
 8007c54:	623b      	str	r3, [r7, #32]
 8007c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d3ac      	bcc.n	8007bb8 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	372c      	adds	r7, #44	; 0x2c
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd90      	pop	{r4, r7, pc}

08007c68 <FUNC_get_DHT_val>:
void FUNC_Blink_Led_Send(uint32_t TIMER){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
	HAL_Delay(TIMER);
}

void FUNC_get_DHT_val(uint8_t * buffer){
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b08b      	sub	sp, #44	; 0x2c
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	float Temp,Humi=0;
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
	if (DHT_Start()) {
 8007c76:	f7fe fa29 	bl	80060cc <DHT_Start>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80a8 	beq.w	8007dd2 <FUNC_get_DHT_val+0x16a>
	    uint8_t RHI  = DHT_Read();
 8007c82:	f7fe fa93 	bl	80061ac <DHT_Read>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    uint8_t RHD  = DHT_Read();
 8007c8c:	f7fe fa8e 	bl	80061ac <DHT_Read>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	    uint8_t TCI  = DHT_Read();
 8007c96:	f7fe fa89 	bl	80061ac <DHT_Read>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    uint8_t TCD  = DHT_Read();
 8007ca0:	f7fe fa84 	bl	80061ac <DHT_Read>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f887 3020 	strb.w	r3, [r7, #32]
	    uint8_t SUM  = DHT_Read();
 8007caa:	f7fe fa7f 	bl	80061ac <DHT_Read>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	77fb      	strb	r3, [r7, #31]
	    if (RHI + RHD + TCI + TCD == SUM)
 8007cb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007cb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cba:	441a      	add	r2, r3
 8007cbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007cc0:	441a      	add	r2, r3
 8007cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cc6:	441a      	add	r2, r3
 8007cc8:	7ffb      	ldrb	r3, [r7, #31]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	f040 8081 	bne.w	8007dd2 <FUNC_get_DHT_val+0x16a>
//	    	else
//	    	{
//	    		Temp = (float)((TCI<<8)|TCD)/10;
//	    	        }
//	    	Humi = (float) ((RHI<<8)|RHD)/10;
	    	float Temp = (float)TCI + (float)(TCD/10.0);
 8007cd0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd ffc3 	bl	8005c60 <__aeabi_ui2f>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fc3b 	bl	800555c <__aeabi_i2d>
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <FUNC_get_DHT_val+0x17c>)
 8007cec:	f7fd fdca 	bl	8005884 <__aeabi_ddiv>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f7fd feac 	bl	8005a54 <__aeabi_d2f>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7fd fefd 	bl	8005b00 <__addsf3>
 8007d06:	4603      	mov	r3, r0
 8007d08:	61bb      	str	r3, [r7, #24]
	    	float Humi = (float)RHI  + (float)(RHD/10.0);
 8007d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fd ffa6 	bl	8005c60 <__aeabi_ui2f>
 8007d14:	4604      	mov	r4, r0
 8007d16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fd fc1e 	bl	800555c <__aeabi_i2d>
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <FUNC_get_DHT_val+0x17c>)
 8007d26:	f7fd fdad 	bl	8005884 <__aeabi_ddiv>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f7fd fe8f 	bl	8005a54 <__aeabi_d2f>
 8007d36:	4603      	mov	r3, r0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7fd fee0 	bl	8005b00 <__addsf3>
 8007d40:	4603      	mov	r3, r0
 8007d42:	617b      	str	r3, [r7, #20]
	    	// Can use tCelsius, tFahrenheit and RH for any purposes
	   	 //DHT11 FORMAT
	   		 uint16_t temp_int =(uint16_t)(Temp);
 8007d44:	69b8      	ldr	r0, [r7, #24]
 8007d46:	f7fe f809 	bl	8005d5c <__aeabi_f2uiz>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	827b      	strh	r3, [r7, #18]
	   		 uint16_t temp_frac = (int16_t)((Temp - temp_int) * 100);
 8007d4e:	8a7b      	ldrh	r3, [r7, #18]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd ff89 	bl	8005c68 <__aeabi_i2f>
 8007d56:	4603      	mov	r3, r0
 8007d58:	4619      	mov	r1, r3
 8007d5a:	69b8      	ldr	r0, [r7, #24]
 8007d5c:	f7fd fece 	bl	8005afc <__aeabi_fsub>
 8007d60:	4603      	mov	r3, r0
 8007d62:	4921      	ldr	r1, [pc, #132]	; (8007de8 <FUNC_get_DHT_val+0x180>)
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fd f9f3 	bl	8005150 <__aeabi_fmul>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fd ffcf 	bl	8005d10 <__aeabi_f2iz>
 8007d72:	4603      	mov	r3, r0
 8007d74:	b21b      	sxth	r3, r3
 8007d76:	823b      	strh	r3, [r7, #16]
	   		 uint16_t humi_int =(uint16_t)(Humi);
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	f7fd ffef 	bl	8005d5c <__aeabi_f2uiz>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	81fb      	strh	r3, [r7, #14]
	   		 uint16_t humi_frac = (int16_t)((Humi - humi_int) * 100);
 8007d82:	89fb      	ldrh	r3, [r7, #14]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fd ff6f 	bl	8005c68 <__aeabi_i2f>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6978      	ldr	r0, [r7, #20]
 8007d90:	f7fd feb4 	bl	8005afc <__aeabi_fsub>
 8007d94:	4603      	mov	r3, r0
 8007d96:	4914      	ldr	r1, [pc, #80]	; (8007de8 <FUNC_get_DHT_val+0x180>)
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd f9d9 	bl	8005150 <__aeabi_fmul>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd ffb5 	bl	8005d10 <__aeabi_f2iz>
 8007da6:	4603      	mov	r3, r0
 8007da8:	b21b      	sxth	r3, r3
 8007daa:	81bb      	strh	r3, [r7, #12]
	   		 buffer[0] = (uint8_t)(temp_int); // Lower byte of temperature
 8007dac:	8a7b      	ldrh	r3, [r7, #18]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	701a      	strb	r2, [r3, #0]
	   		 buffer[1] = (uint8_t)(temp_frac); // Higher byte of temperature
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3301      	adds	r3, #1
 8007db8:	8a3a      	ldrh	r2, [r7, #16]
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	701a      	strb	r2, [r3, #0]
	   		 buffer[2] = (uint8_t)(humi_int); // Lower byte of humidity
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	89fa      	ldrh	r2, [r7, #14]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
	   		 buffer[3] = (uint8_t)(humi_frac); // Higher byte of humidity
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3303      	adds	r3, #3
 8007dcc:	89ba      	ldrh	r2, [r7, #12]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
//	   		 buffer[3] = humi_fractional; // 2
	    }


	}
	 HAL_Delay(2000);
 8007dd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007dd6:	f000 fd63 	bl	80088a0 <HAL_Delay>

}
 8007dda:	bf00      	nop
 8007ddc:	372c      	adds	r7, #44	; 0x2c
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40240000 	.word	0x40240000
 8007de8:	42c80000 	.word	0x42c80000

08007dec <FUNC_ReaddataAddress>:
//	 HAL_ADC_PollForConversion(&hadc1, 1000);
//	 MQ2_Val = HAL_ADC_GetValue(&hadc1);
//	 HAL_ADC_Stop(&hadc1);
//	 return MQ2_Val;
//}
uint32_t FUNC_ReaddataAddress(uint32_t Address){
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(Address));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
	...

08007e08 <FUNC_EraseAndRestore_Header_Page>:

void FUNC_EraseAndRestore_Header_Page(uint32_t Copy_u32Address, uint32_t Copy_u32NewData){
 8007e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e0c:	b0b2      	sub	sp, #200	; 0xc8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]

	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for(Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8007e26:	4b41      	ldr	r3, [pc, #260]	; (8007f2c <FUNC_EraseAndRestore_Header_Page+0x124>)
 8007e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2c:	e031      	b.n	8007e92 <FUNC_EraseAndRestore_Header_Page+0x8a>
	{
		if((Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8007e2e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	4013      	ands	r3, r2
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d017      	beq.n	8007e88 <FUNC_EraseAndRestore_Header_Page+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 8007e58:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	33c8      	adds	r3, #200	; 0xc8
 8007e60:	443b      	add	r3, r7
 8007e62:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e66:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 8007e6a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e6e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	33c8      	adds	r3, #200	; 0xc8
 8007e78:	443b      	add	r3, r7
 8007e7a:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 8007e7e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8007e82:	3301      	adds	r3, #1
 8007e84:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 8007e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for(Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8007e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e96:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <FUNC_EraseAndRestore_Header_Page+0x128>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d9c8      	bls.n	8007e2e <FUNC_EraseAndRestore_Header_Page+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 8007ea4:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <FUNC_EraseAndRestore_Header_Page+0x124>)
 8007ea6:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8007eac:	f001 f8de 	bl	800906c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8007eb0:	f107 020c 	add.w	r2, r7, #12
 8007eb4:	f107 0310 	add.w	r3, r7, #16
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f9be 	bl	800923c <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8007ec6:	e01a      	b.n	8007efe <FUNC_EraseAndRestore_Header_Page+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8007ec8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	33c8      	adds	r3, #200	; 0xc8
 8007ed0:	443b      	add	r3, r7
 8007ed2:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8007ed6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	33c8      	adds	r3, #200	; 0xc8
 8007ede:	443b      	add	r3, r7
 8007ee0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4698      	mov	r8, r3
 8007ee8:	4691      	mov	r9, r2
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	2002      	movs	r0, #2
 8007ef0:	f001 f84c 	bl	8008f8c <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8007ef4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8007efe:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8007f02:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d3de      	bcc.n	8007ec8 <FUNC_EraseAndRestore_Header_Page+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	461c      	mov	r4, r3
 8007f10:	4615      	mov	r5, r2
 8007f12:	4622      	mov	r2, r4
 8007f14:	462b      	mov	r3, r5
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	2002      	movs	r0, #2
 8007f1a:	f001 f837 	bl	8008f8c <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8007f1e:	f001 f8cb 	bl	80090b8 <HAL_FLASH_Lock>
}
 8007f22:	bf00      	nop
 8007f24:	37c8      	adds	r7, #200	; 0xc8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f2c:	0801fc00 	.word	0x0801fc00
 8007f30:	0801fc5f 	.word	0x0801fc5f

08007f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f38:	f000 fc50 	bl	80087dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f3c:	f000 f814 	bl	8007f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f40:	f000 f9ae 	bl	80082a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007f44:	f000 f8da 	bl	80080fc <MX_SPI1_Init>
  MX_TIM1_Init();
 8007f48:	f000 f90e 	bl	8008168 <MX_TIM1_Init>
  //MX_IWDG_Init();
  MX_I2C1_Init();
 8007f4c:	f000 f8a8 	bl	80080a0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8007f50:	f000 f868 	bl	8008024 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007f54:	f000 f958 	bl	8008208 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8007f58:	4802      	ldr	r0, [pc, #8]	; (8007f64 <main+0x30>)
 8007f5a:	f003 faf1 	bl	800b540 <HAL_TIM_Base_Start>
  //FUNC_get_DHT_val((uint8_t* ) buffer_DHT);


  LORA_IF_Init();
 8007f5e:	f7ff f8bb 	bl	80070d8 <LORA_IF_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8007f62:	e7fe      	b.n	8007f62 <main+0x2e>
 8007f64:	200006b0 	.word	0x200006b0

08007f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b094      	sub	sp, #80	; 0x50
 8007f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f72:	2228      	movs	r2, #40	; 0x28
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f003 fee4 	bl	800bd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f7c:	f107 0314 	add.w	r3, r7, #20
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	605a      	str	r2, [r3, #4]
 8007f94:	609a      	str	r2, [r3, #8]
 8007f96:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007f98:	2309      	movs	r3, #9
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007faa:	2301      	movs	r3, #1
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fae:	2302      	movs	r3, #2
 8007fb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fb8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f002 f990 	bl	800a2e8 <HAL_RCC_OscConfig>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8007fce:	f000 fa1f 	bl	8008410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fd2:	230f      	movs	r3, #15
 8007fd4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 fbfc 	bl	800a7ec <HAL_RCC_ClockConfig>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007ffa:	f000 fa09 	bl	8008410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007ffe:	2302      	movs	r3, #2
 8008000:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	4618      	mov	r0, r3
 800800c:	f002 fd68 	bl	800aae0 <HAL_RCCEx_PeriphCLKConfig>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008016:	f000 f9fb 	bl	8008410 <Error_Handler>
  }
}
 800801a:	bf00      	nop
 800801c:	3750      	adds	r7, #80	; 0x50
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <MX_ADC1_Init+0x74>)
 8008036:	4a19      	ldr	r2, [pc, #100]	; (800809c <MX_ADC1_Init+0x78>)
 8008038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800803a:	4b17      	ldr	r3, [pc, #92]	; (8008098 <MX_ADC1_Init+0x74>)
 800803c:	2200      	movs	r2, #0
 800803e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008040:	4b15      	ldr	r3, [pc, #84]	; (8008098 <MX_ADC1_Init+0x74>)
 8008042:	2200      	movs	r2, #0
 8008044:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <MX_ADC1_Init+0x74>)
 8008048:	2200      	movs	r2, #0
 800804a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800804c:	4b12      	ldr	r3, [pc, #72]	; (8008098 <MX_ADC1_Init+0x74>)
 800804e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8008052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008054:	4b10      	ldr	r3, [pc, #64]	; (8008098 <MX_ADC1_Init+0x74>)
 8008056:	2200      	movs	r2, #0
 8008058:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800805a:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <MX_ADC1_Init+0x74>)
 800805c:	2201      	movs	r2, #1
 800805e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008060:	480d      	ldr	r0, [pc, #52]	; (8008098 <MX_ADC1_Init+0x74>)
 8008062:	f000 fc41 	bl	80088e8 <HAL_ADC_Init>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800806c:	f000 f9d0 	bl	8008410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008070:	2301      	movs	r3, #1
 8008072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008074:	2301      	movs	r3, #1
 8008076:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800807c:	1d3b      	adds	r3, r7, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <MX_ADC1_Init+0x74>)
 8008082:	f000 fd09 	bl	8008a98 <HAL_ADC_ConfigChannel>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800808c:	f000 f9c0 	bl	8008410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	200005d4 	.word	0x200005d4
 800809c:	40012400 	.word	0x40012400

080080a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080a6:	4a13      	ldr	r2, [pc, #76]	; (80080f4 <MX_I2C1_Init+0x54>)
 80080a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080aa:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080ac:	4a12      	ldr	r2, [pc, #72]	; (80080f8 <MX_I2C1_Init+0x58>)
 80080ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080b0:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080b6:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080c4:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080d8:	2200      	movs	r2, #0
 80080da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080dc:	4804      	ldr	r0, [pc, #16]	; (80080f0 <MX_I2C1_Init+0x50>)
 80080de:	f001 fb39 	bl	8009754 <HAL_I2C_Init>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080e8:	f000 f992 	bl	8008410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80080ec:	bf00      	nop
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000604 	.word	0x20000604
 80080f4:	40005400 	.word	0x40005400
 80080f8:	00061a80 	.word	0x00061a80

080080fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008100:	4b17      	ldr	r3, [pc, #92]	; (8008160 <MX_SPI1_Init+0x64>)
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <MX_SPI1_Init+0x68>)
 8008104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008106:	4b16      	ldr	r3, [pc, #88]	; (8008160 <MX_SPI1_Init+0x64>)
 8008108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800810c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800810e:	4b14      	ldr	r3, [pc, #80]	; (8008160 <MX_SPI1_Init+0x64>)
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008114:	4b12      	ldr	r3, [pc, #72]	; (8008160 <MX_SPI1_Init+0x64>)
 8008116:	2200      	movs	r2, #0
 8008118:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800811a:	4b11      	ldr	r3, [pc, #68]	; (8008160 <MX_SPI1_Init+0x64>)
 800811c:	2200      	movs	r2, #0
 800811e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <MX_SPI1_Init+0x64>)
 8008122:	2200      	movs	r2, #0
 8008124:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008126:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <MX_SPI1_Init+0x64>)
 8008128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <MX_SPI1_Init+0x64>)
 8008130:	2210      	movs	r2, #16
 8008132:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008134:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <MX_SPI1_Init+0x64>)
 8008136:	2200      	movs	r2, #0
 8008138:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <MX_SPI1_Init+0x64>)
 800813c:	2200      	movs	r2, #0
 800813e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008140:	4b07      	ldr	r3, [pc, #28]	; (8008160 <MX_SPI1_Init+0x64>)
 8008142:	2200      	movs	r2, #0
 8008144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008146:	4b06      	ldr	r3, [pc, #24]	; (8008160 <MX_SPI1_Init+0x64>)
 8008148:	220a      	movs	r2, #10
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800814c:	4804      	ldr	r0, [pc, #16]	; (8008160 <MX_SPI1_Init+0x64>)
 800814e:	f002 fd7d 	bl	800ac4c <HAL_SPI_Init>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008158:	f000 f95a 	bl	8008410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000658 	.word	0x20000658
 8008164:	40013000 	.word	0x40013000

08008168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	609a      	str	r2, [r3, #8]
 800817a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800817c:	463b      	mov	r3, r7
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008184:	4b1e      	ldr	r3, [pc, #120]	; (8008200 <MX_TIM1_Init+0x98>)
 8008186:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <MX_TIM1_Init+0x9c>)
 8008188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <MX_TIM1_Init+0x98>)
 800818c:	2247      	movs	r2, #71	; 0x47
 800818e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008190:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <MX_TIM1_Init+0x98>)
 8008192:	2200      	movs	r2, #0
 8008194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8008196:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <MX_TIM1_Init+0x98>)
 8008198:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800819c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800819e:	4b18      	ldr	r3, [pc, #96]	; (8008200 <MX_TIM1_Init+0x98>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80081a4:	4b16      	ldr	r3, [pc, #88]	; (8008200 <MX_TIM1_Init+0x98>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081aa:	4b15      	ldr	r3, [pc, #84]	; (8008200 <MX_TIM1_Init+0x98>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80081b0:	4813      	ldr	r0, [pc, #76]	; (8008200 <MX_TIM1_Init+0x98>)
 80081b2:	f003 f975 	bl	800b4a0 <HAL_TIM_Base_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80081bc:	f000 f928 	bl	8008410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	4619      	mov	r1, r3
 80081cc:	480c      	ldr	r0, [pc, #48]	; (8008200 <MX_TIM1_Init+0x98>)
 80081ce:	f003 fb09 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80081d8:	f000 f91a 	bl	8008410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081dc:	2300      	movs	r3, #0
 80081de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081e4:	463b      	mov	r3, r7
 80081e6:	4619      	mov	r1, r3
 80081e8:	4805      	ldr	r0, [pc, #20]	; (8008200 <MX_TIM1_Init+0x98>)
 80081ea:	f003 fce7 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80081f4:	f000 f90c 	bl	8008410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	200006b0 	.word	0x200006b0
 8008204:	40012c00 	.word	0x40012c00

08008208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800820e:	f107 0308 	add.w	r3, r7, #8
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	605a      	str	r2, [r3, #4]
 8008218:	609a      	str	r2, [r3, #8]
 800821a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800821c:	463b      	mov	r3, r7
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <MX_TIM2_Init+0x94>)
 8008226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800822a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800822c:	4b1b      	ldr	r3, [pc, #108]	; (800829c <MX_TIM2_Init+0x94>)
 800822e:	2247      	movs	r2, #71	; 0x47
 8008230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008232:	4b1a      	ldr	r3, [pc, #104]	; (800829c <MX_TIM2_Init+0x94>)
 8008234:	2200      	movs	r2, #0
 8008236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <MX_TIM2_Init+0x94>)
 800823a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800823e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008240:	4b16      	ldr	r3, [pc, #88]	; (800829c <MX_TIM2_Init+0x94>)
 8008242:	2200      	movs	r2, #0
 8008244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008246:	4b15      	ldr	r3, [pc, #84]	; (800829c <MX_TIM2_Init+0x94>)
 8008248:	2200      	movs	r2, #0
 800824a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <MX_TIM2_Init+0x94>)
 800824e:	f003 f927 	bl	800b4a0 <HAL_TIM_Base_Init>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008258:	f000 f8da 	bl	8008410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	4619      	mov	r1, r3
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <MX_TIM2_Init+0x94>)
 800826a:	f003 fabb 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008274:	f000 f8cc 	bl	8008410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008278:	2300      	movs	r3, #0
 800827a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800827c:	2300      	movs	r3, #0
 800827e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008280:	463b      	mov	r3, r7
 8008282:	4619      	mov	r1, r3
 8008284:	4805      	ldr	r0, [pc, #20]	; (800829c <MX_TIM2_Init+0x94>)
 8008286:	f003 fc99 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008290:	f000 f8be 	bl	8008410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008294:	bf00      	nop
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	200006f8 	.word	0x200006f8

080082a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a6:	f107 0310 	add.w	r3, r7, #16
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	609a      	str	r2, [r3, #8]
 80082b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082b4:	4b51      	ldr	r3, [pc, #324]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	4a50      	ldr	r2, [pc, #320]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082ba:	f043 0310 	orr.w	r3, r3, #16
 80082be:	6193      	str	r3, [r2, #24]
 80082c0:	4b4e      	ldr	r3, [pc, #312]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082cc:	4b4b      	ldr	r3, [pc, #300]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	4a4a      	ldr	r2, [pc, #296]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082d2:	f043 0320 	orr.w	r3, r3, #32
 80082d6:	6193      	str	r3, [r2, #24]
 80082d8:	4b48      	ldr	r3, [pc, #288]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082e4:	4b45      	ldr	r3, [pc, #276]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	4a44      	ldr	r2, [pc, #272]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082ea:	f043 0304 	orr.w	r3, r3, #4
 80082ee:	6193      	str	r3, [r2, #24]
 80082f0:	4b42      	ldr	r3, [pc, #264]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082fc:	4b3f      	ldr	r3, [pc, #252]	; (80083fc <MX_GPIO_Init+0x15c>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	4a3e      	ldr	r2, [pc, #248]	; (80083fc <MX_GPIO_Init+0x15c>)
 8008302:	f043 0308 	orr.w	r3, r3, #8
 8008306:	6193      	str	r3, [r2, #24]
 8008308:	4b3c      	ldr	r3, [pc, #240]	; (80083fc <MX_GPIO_Init+0x15c>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8008314:	2200      	movs	r2, #0
 8008316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800831a:	4839      	ldr	r0, [pc, #228]	; (8008400 <MX_GPIO_Init+0x160>)
 800831c:	f001 f9d1 	bl	80096c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8008320:	2200      	movs	r2, #0
 8008322:	2110      	movs	r1, #16
 8008324:	4837      	ldr	r0, [pc, #220]	; (8008404 <MX_GPIO_Init+0x164>)
 8008326:	f001 f9cc 	bl	80096c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin, GPIO_PIN_RESET);
 800832a:	2200      	movs	r2, #0
 800832c:	2105      	movs	r1, #5
 800832e:	4836      	ldr	r0, [pc, #216]	; (8008408 <MX_GPIO_Init+0x168>)
 8008330:	f001 f9c7 	bl	80096c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8008334:	2201      	movs	r2, #1
 8008336:	f44f 7140 	mov.w	r1, #768	; 0x300
 800833a:	4833      	ldr	r0, [pc, #204]	; (8008408 <MX_GPIO_Init+0x168>)
 800833c:	f001 f9c1 	bl	80096c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834e:	2302      	movs	r3, #2
 8008350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4619      	mov	r1, r3
 8008358:	4829      	ldr	r0, [pc, #164]	; (8008400 <MX_GPIO_Init+0x160>)
 800835a:	f001 f817 	bl	800938c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800835e:	2310      	movs	r3, #16
 8008360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008362:	2301      	movs	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008366:	2300      	movs	r3, #0
 8008368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800836a:	2302      	movs	r3, #2
 800836c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800836e:	f107 0310 	add.w	r3, r7, #16
 8008372:	4619      	mov	r1, r3
 8008374:	4823      	ldr	r0, [pc, #140]	; (8008404 <MX_GPIO_Init+0x164>)
 8008376:	f001 f809 	bl	800938c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800837a:	2301      	movs	r3, #1
 800837c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008382:	2300      	movs	r3, #0
 8008384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008386:	2301      	movs	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	4619      	mov	r1, r3
 8008390:	481d      	ldr	r0, [pc, #116]	; (8008408 <MX_GPIO_Init+0x168>)
 8008392:	f000 fffb 	bl	800938c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8008396:	2302      	movs	r3, #2
 8008398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800839a:	4b1c      	ldr	r3, [pc, #112]	; (800840c <MX_GPIO_Init+0x16c>)
 800839c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80083a2:	f107 0310 	add.w	r3, r7, #16
 80083a6:	4619      	mov	r1, r3
 80083a8:	4817      	ldr	r0, [pc, #92]	; (8008408 <MX_GPIO_Init+0x168>)
 80083aa:	f000 ffef 	bl	800938c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = MODE_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80083ae:	f44f 7341 	mov.w	r3, #772	; 0x304
 80083b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083b4:	2301      	movs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083bc:	2302      	movs	r3, #2
 80083be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c0:	f107 0310 	add.w	r3, r7, #16
 80083c4:	4619      	mov	r1, r3
 80083c6:	4810      	ldr	r0, [pc, #64]	; (8008408 <MX_GPIO_Init+0x168>)
 80083c8:	f000 ffe0 	bl	800938c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 80083cc:	2320      	movs	r3, #32
 80083ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083d4:	2301      	movs	r3, #1
 80083d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80083d8:	f107 0310 	add.w	r3, r7, #16
 80083dc:	4619      	mov	r1, r3
 80083de:	480a      	ldr	r0, [pc, #40]	; (8008408 <MX_GPIO_Init+0x168>)
 80083e0:	f000 ffd4 	bl	800938c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	2007      	movs	r0, #7
 80083ea:	f000 fd8a 	bl	8008f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80083ee:	2007      	movs	r0, #7
 80083f0:	f000 fda3 	bl	8008f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80083f4:	bf00      	nop
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	40021000 	.word	0x40021000
 8008400:	40011000 	.word	0x40011000
 8008404:	40010800 	.word	0x40010800
 8008408:	40010c00 	.word	0x40010c00
 800840c:	10110000 	.word	0x10110000

08008410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008414:	b672      	cpsid	i
}
 8008416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008418:	e7fe      	b.n	8008418 <Error_Handler+0x8>
	...

0800841c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <HAL_MspInit+0x5c>)
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	4a14      	ldr	r2, [pc, #80]	; (8008478 <HAL_MspInit+0x5c>)
 8008428:	f043 0301 	orr.w	r3, r3, #1
 800842c:	6193      	str	r3, [r2, #24]
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <HAL_MspInit+0x5c>)
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	60bb      	str	r3, [r7, #8]
 8008438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <HAL_MspInit+0x5c>)
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4a0e      	ldr	r2, [pc, #56]	; (8008478 <HAL_MspInit+0x5c>)
 8008440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008444:	61d3      	str	r3, [r2, #28]
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <HAL_MspInit+0x5c>)
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <HAL_MspInit+0x60>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	4a04      	ldr	r2, [pc, #16]	; (800847c <HAL_MspInit+0x60>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr
 8008478:	40021000 	.word	0x40021000
 800847c:	40010000 	.word	0x40010000

08008480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a14      	ldr	r2, [pc, #80]	; (80084ec <HAL_ADC_MspInit+0x6c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d121      	bne.n	80084e4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80084a0:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4a12      	ldr	r2, [pc, #72]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084aa:	6193      	str	r3, [r2, #24]
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4a0c      	ldr	r2, [pc, #48]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084be:	f043 0304 	orr.w	r3, r3, #4
 80084c2:	6193      	str	r3, [r2, #24]
 80084c4:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <HAL_ADC_MspInit+0x70>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80084d0:	2302      	movs	r3, #2
 80084d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084d4:	2303      	movs	r3, #3
 80084d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d8:	f107 0310 	add.w	r3, r7, #16
 80084dc:	4619      	mov	r1, r3
 80084de:	4805      	ldr	r0, [pc, #20]	; (80084f4 <HAL_ADC_MspInit+0x74>)
 80084e0:	f000 ff54 	bl	800938c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80084e4:	bf00      	nop
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40012400 	.word	0x40012400
 80084f0:	40021000 	.word	0x40021000
 80084f4:	40010800 	.word	0x40010800

080084f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008500:	f107 0310 	add.w	r3, r7, #16
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	605a      	str	r2, [r3, #4]
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a15      	ldr	r2, [pc, #84]	; (8008568 <HAL_I2C_MspInit+0x70>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d123      	bne.n	8008560 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008518:	4b14      	ldr	r3, [pc, #80]	; (800856c <HAL_I2C_MspInit+0x74>)
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <HAL_I2C_MspInit+0x74>)
 800851e:	f043 0308 	orr.w	r3, r3, #8
 8008522:	6193      	str	r3, [r2, #24]
 8008524:	4b11      	ldr	r3, [pc, #68]	; (800856c <HAL_I2C_MspInit+0x74>)
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008530:	23c0      	movs	r3, #192	; 0xc0
 8008532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008534:	2312      	movs	r3, #18
 8008536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008538:	2303      	movs	r3, #3
 800853a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800853c:	f107 0310 	add.w	r3, r7, #16
 8008540:	4619      	mov	r1, r3
 8008542:	480b      	ldr	r0, [pc, #44]	; (8008570 <HAL_I2C_MspInit+0x78>)
 8008544:	f000 ff22 	bl	800938c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008548:	4b08      	ldr	r3, [pc, #32]	; (800856c <HAL_I2C_MspInit+0x74>)
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	4a07      	ldr	r2, [pc, #28]	; (800856c <HAL_I2C_MspInit+0x74>)
 800854e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008552:	61d3      	str	r3, [r2, #28]
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <HAL_I2C_MspInit+0x74>)
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008560:	bf00      	nop
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40005400 	.word	0x40005400
 800856c:	40021000 	.word	0x40021000
 8008570:	40010c00 	.word	0x40010c00

08008574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800857c:	f107 0310 	add.w	r3, r7, #16
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_SPI_MspInit+0x88>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d12f      	bne.n	80085f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008594:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	4a19      	ldr	r2, [pc, #100]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 800859a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800859e:	6193      	str	r3, [r2, #24]
 80085a0:	4b17      	ldr	r3, [pc, #92]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ac:	4b14      	ldr	r3, [pc, #80]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	4a13      	ldr	r2, [pc, #76]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 80085b2:	f043 0304 	orr.w	r3, r3, #4
 80085b6:	6193      	str	r3, [r2, #24]
 80085b8:	4b11      	ldr	r3, [pc, #68]	; (8008600 <HAL_SPI_MspInit+0x8c>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80085c4:	23a0      	movs	r3, #160	; 0xa0
 80085c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c8:	2302      	movs	r3, #2
 80085ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085cc:	2303      	movs	r3, #3
 80085ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4619      	mov	r1, r3
 80085d6:	480b      	ldr	r0, [pc, #44]	; (8008604 <HAL_SPI_MspInit+0x90>)
 80085d8:	f000 fed8 	bl	800938c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e8:	f107 0310 	add.w	r3, r7, #16
 80085ec:	4619      	mov	r1, r3
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <HAL_SPI_MspInit+0x90>)
 80085f0:	f000 fecc 	bl	800938c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80085f4:	bf00      	nop
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40013000 	.word	0x40013000
 8008600:	40021000 	.word	0x40021000
 8008604:	40010800 	.word	0x40010800

08008608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a16      	ldr	r2, [pc, #88]	; (8008670 <HAL_TIM_Base_MspInit+0x68>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d10c      	bne.n	8008634 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800861a:	4b16      	ldr	r3, [pc, #88]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	4a15      	ldr	r2, [pc, #84]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 8008620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008624:	6193      	str	r3, [r2, #24]
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008632:	e018      	b.n	8008666 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d113      	bne.n	8008666 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	61d3      	str	r3, [r2, #28]
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <HAL_TIM_Base_MspInit+0x6c>)
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	60bb      	str	r3, [r7, #8]
 8008654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	201c      	movs	r0, #28
 800865c:	f000 fc51 	bl	8008f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008660:	201c      	movs	r0, #28
 8008662:	f000 fc6a 	bl	8008f3a <HAL_NVIC_EnableIRQ>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	40012c00 	.word	0x40012c00
 8008674:	40021000 	.word	0x40021000

08008678 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800867c:	f3bf 8f4f 	dsb	sy
}
 8008680:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <__NVIC_SystemReset+0x24>)
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800868a:	4904      	ldr	r1, [pc, #16]	; (800869c <__NVIC_SystemReset+0x24>)
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <__NVIC_SystemReset+0x28>)
 800868e:	4313      	orrs	r3, r2
 8008690:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008692:	f3bf 8f4f 	dsb	sy
}
 8008696:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008698:	bf00      	nop
 800869a:	e7fd      	b.n	8008698 <__NVIC_SystemReset+0x20>
 800869c:	e000ed00 	.word	0xe000ed00
 80086a0:	05fa0004 	.word	0x05fa0004

080086a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086a8:	e7fe      	b.n	80086a8 <NMI_Handler+0x4>

080086aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  // Reset and Clear RAM
  NVIC_SystemReset();
 80086ae:	f7ff ffe3 	bl	8008678 <__NVIC_SystemReset>

080086b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086b2:	b480      	push	{r7}
 80086b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086b6:	e7fe      	b.n	80086b6 <MemManage_Handler+0x4>

080086b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086bc:	e7fe      	b.n	80086bc <BusFault_Handler+0x4>

080086be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086be:	b480      	push	{r7}
 80086c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086c2:	e7fe      	b.n	80086c2 <UsageFault_Handler+0x4>

080086c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086c8:	bf00      	nop
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086e0:	bf00      	nop
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086ec:	f000 f8bc 	bl	8008868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086f0:	bf00      	nop
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80086f8:	2002      	movs	r0, #2
 80086fa:	f001 f813 	bl	8009724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008708:	4802      	ldr	r0, [pc, #8]	; (8008714 <TIM2_IRQHandler+0x10>)
 800870a:	f002 ff63 	bl	800b5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200006f8 	.word	0x200006f8

08008718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008720:	4a14      	ldr	r2, [pc, #80]	; (8008774 <_sbrk+0x5c>)
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <_sbrk+0x60>)
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800872c:	4b13      	ldr	r3, [pc, #76]	; (800877c <_sbrk+0x64>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008734:	4b11      	ldr	r3, [pc, #68]	; (800877c <_sbrk+0x64>)
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <_sbrk+0x68>)
 8008738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <_sbrk+0x64>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	429a      	cmp	r2, r3
 8008746:	d207      	bcs.n	8008758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008748:	f003 fb04 	bl	800bd54 <__errno>
 800874c:	4603      	mov	r3, r0
 800874e:	220c      	movs	r2, #12
 8008750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	e009      	b.n	800876c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008758:	4b08      	ldr	r3, [pc, #32]	; (800877c <_sbrk+0x64>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <_sbrk+0x64>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4413      	add	r3, r2
 8008766:	4a05      	ldr	r2, [pc, #20]	; (800877c <_sbrk+0x64>)
 8008768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800876a:	68fb      	ldr	r3, [r7, #12]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20005000 	.word	0x20005000
 8008778:	00000400 	.word	0x00000400
 800877c:	20000870 	.word	0x20000870
 8008780:	200009e0 	.word	0x200009e0

08008784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8008790:	f7ff fff8 	bl	8008784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008794:	480b      	ldr	r0, [pc, #44]	; (80087c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008796:	490c      	ldr	r1, [pc, #48]	; (80087c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008798:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800879a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800879c:	e002      	b.n	80087a4 <LoopCopyDataInit>

0800879e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800879e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087a2:	3304      	adds	r3, #4

080087a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087a8:	d3f9      	bcc.n	800879e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087aa:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80087ac:	4c09      	ldr	r4, [pc, #36]	; (80087d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80087ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087b0:	e001      	b.n	80087b6 <LoopFillZerobss>

080087b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087b4:	3204      	adds	r2, #4

080087b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087b8:	d3fb      	bcc.n	80087b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80087ba:	f003 fad1 	bl	800bd60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80087be:	f7ff fbb9 	bl	8007f34 <main>
  bx lr
 80087c2:	4770      	bx	lr
  ldr r0, =_sdata
 80087c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087c8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80087cc:	0800dd50 	.word	0x0800dd50
  ldr r2, =_sbss
 80087d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80087d4:	200009e0 	.word	0x200009e0

080087d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80087d8:	e7fe      	b.n	80087d8 <ADC1_2_IRQHandler>
	...

080087dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <HAL_Init+0x28>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a07      	ldr	r2, [pc, #28]	; (8008804 <HAL_Init+0x28>)
 80087e6:	f043 0310 	orr.w	r3, r3, #16
 80087ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087ec:	2003      	movs	r0, #3
 80087ee:	f000 fb7d 	bl	8008eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087f2:	200f      	movs	r0, #15
 80087f4:	f000 f808 	bl	8008808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087f8:	f7ff fe10 	bl	800841c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40022000 	.word	0x40022000

08008808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008810:	4b12      	ldr	r3, [pc, #72]	; (800885c <HAL_InitTick+0x54>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	4b12      	ldr	r3, [pc, #72]	; (8008860 <HAL_InitTick+0x58>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	4619      	mov	r1, r3
 800881a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800881e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008822:	fbb2 f3f3 	udiv	r3, r2, r3
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fba3 	bl	8008f72 <HAL_SYSTICK_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e00e      	b.n	8008854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b0f      	cmp	r3, #15
 800883a:	d80a      	bhi.n	8008852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800883c:	2200      	movs	r2, #0
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	f000 fb5d 	bl	8008f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008848:	4a06      	ldr	r2, [pc, #24]	; (8008864 <HAL_InitTick+0x5c>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000030 	.word	0x20000030
 8008860:	20000038 	.word	0x20000038
 8008864:	20000034 	.word	0x20000034

08008868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <HAL_IncTick+0x1c>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <HAL_IncTick+0x20>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4413      	add	r3, r2
 8008878:	4a03      	ldr	r2, [pc, #12]	; (8008888 <HAL_IncTick+0x20>)
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	20000038 	.word	0x20000038
 8008888:	20000874 	.word	0x20000874

0800888c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  return uwTick;
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <HAL_GetTick+0x10>)
 8008892:	681b      	ldr	r3, [r3, #0]
}
 8008894:	4618      	mov	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr
 800889c:	20000874 	.word	0x20000874

080088a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088a8:	f7ff fff0 	bl	800888c <HAL_GetTick>
 80088ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d005      	beq.n	80088c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <HAL_Delay+0x44>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80088c6:	bf00      	nop
 80088c8:	f7ff ffe0 	bl	800888c <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d8f7      	bhi.n	80088c8 <HAL_Delay+0x28>
  {
  }
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000038 	.word	0x20000038

080088e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e0be      	b.n	8008a88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff fdaa 	bl	8008480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f9ab 	bl	8008c88 <ADC_ConversionStop_Disable>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	f040 8099 	bne.w	8008a76 <HAL_ADC_Init+0x18e>
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8095 	bne.w	8008a76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008954:	f023 0302 	bic.w	r3, r3, #2
 8008958:	f043 0202 	orr.w	r2, r3, #2
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008968:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7b1b      	ldrb	r3, [r3, #12]
 800896e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008970:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008980:	d003      	beq.n	800898a <HAL_ADC_Init+0xa2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d102      	bne.n	8008990 <HAL_ADC_Init+0xa8>
 800898a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800898e:	e000      	b.n	8008992 <HAL_ADC_Init+0xaa>
 8008990:	2300      	movs	r3, #0
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7d1b      	ldrb	r3, [r3, #20]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d119      	bne.n	80089d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7b1b      	ldrb	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	035a      	lsls	r2, r3, #13
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	e00b      	b.n	80089d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c0:	f043 0220 	orr.w	r2, r3, #32
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	f043 0201 	orr.w	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	4b28      	ldr	r3, [pc, #160]	; (8008a90 <HAL_ADC_Init+0x1a8>)
 80089f0:	4013      	ands	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a04:	d003      	beq.n	8008a0e <HAL_ADC_Init+0x126>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d104      	bne.n	8008a18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	051b      	lsls	r3, r3, #20
 8008a16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <HAL_ADC_Init+0x1ac>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d10b      	bne.n	8008a54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	f043 0201 	orr.w	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008a52:	e018      	b.n	8008a86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f023 0312 	bic.w	r3, r3, #18
 8008a5c:	f043 0210 	orr.w	r2, r3, #16
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f043 0201 	orr.w	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008a74:	e007      	b.n	8008a86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	f043 0210 	orr.w	r2, r3, #16
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	ffe1f7fd 	.word	0xffe1f7fd
 8008a94:	ff1f0efe 	.word	0xff1f0efe

08008a98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_ADC_ConfigChannel+0x20>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0dc      	b.n	8008c72 <HAL_ADC_ConfigChannel+0x1da>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	2b06      	cmp	r3, #6
 8008ac6:	d81c      	bhi.n	8008b02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3b05      	subs	r3, #5
 8008ada:	221f      	movs	r2, #31
 8008adc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	4019      	ands	r1, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	3b05      	subs	r3, #5
 8008af4:	fa00 f203 	lsl.w	r2, r0, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	635a      	str	r2, [r3, #52]	; 0x34
 8008b00:	e03c      	b.n	8008b7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d81c      	bhi.n	8008b44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	3b23      	subs	r3, #35	; 0x23
 8008b1c:	221f      	movs	r2, #31
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	43db      	mvns	r3, r3
 8008b24:	4019      	ands	r1, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	3b23      	subs	r3, #35	; 0x23
 8008b36:	fa00 f203 	lsl.w	r2, r0, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
 8008b42:	e01b      	b.n	8008b7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	3b41      	subs	r3, #65	; 0x41
 8008b56:	221f      	movs	r2, #31
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	43db      	mvns	r3, r3
 8008b5e:	4019      	ands	r1, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3b41      	subs	r3, #65	; 0x41
 8008b70:	fa00 f203 	lsl.w	r2, r0, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d91c      	bls.n	8008bbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68d9      	ldr	r1, [r3, #12]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	4413      	add	r3, r2
 8008b94:	3b1e      	subs	r3, #30
 8008b96:	2207      	movs	r2, #7
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	4019      	ands	r1, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	6898      	ldr	r0, [r3, #8]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	4413      	add	r3, r2
 8008bae:	3b1e      	subs	r3, #30
 8008bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	e019      	b.n	8008bf2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6919      	ldr	r1, [r3, #16]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	2207      	movs	r2, #7
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	4019      	ands	r1, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	6898      	ldr	r0, [r3, #8]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	4413      	add	r3, r2
 8008be6:	fa00 f203 	lsl.w	r2, r0, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b10      	cmp	r3, #16
 8008bf8:	d003      	beq.n	8008c02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008bfe:	2b11      	cmp	r3, #17
 8008c00:	d132      	bne.n	8008c68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1d      	ldr	r2, [pc, #116]	; (8008c7c <HAL_ADC_ConfigChannel+0x1e4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d125      	bne.n	8008c58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d126      	bne.n	8008c68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008c28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d11a      	bne.n	8008c68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <HAL_ADC_ConfigChannel+0x1e8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <HAL_ADC_ConfigChannel+0x1ec>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	0c9a      	lsrs	r2, r3, #18
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008c48:	e002      	b.n	8008c50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f9      	bne.n	8008c4a <HAL_ADC_ConfigChannel+0x1b2>
 8008c56:	e007      	b.n	8008c68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	f043 0220 	orr.w	r2, r3, #32
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	40012400 	.word	0x40012400
 8008c80:	20000030 	.word	0x20000030
 8008c84:	431bde83 	.word	0x431bde83

08008c88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d12e      	bne.n	8008d00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008cb2:	f7ff fdeb 	bl	800888c <HAL_GetTick>
 8008cb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008cb8:	e01b      	b.n	8008cf2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008cba:	f7ff fde7 	bl	800888c <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d914      	bls.n	8008cf2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d10d      	bne.n	8008cf2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	f043 0210 	orr.w	r2, r3, #16
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e007      	b.n	8008d02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d0dc      	beq.n	8008cba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <__NVIC_SetPriorityGrouping>:
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <__NVIC_SetPriorityGrouping+0x44>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d3e:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <__NVIC_SetPriorityGrouping+0x44>)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	60d3      	str	r3, [r2, #12]
}
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <__NVIC_GetPriorityGrouping>:
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <__NVIC_GetPriorityGrouping+0x18>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	0a1b      	lsrs	r3, r3, #8
 8008d5e:	f003 0307 	and.w	r3, r3, #7
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <__NVIC_EnableIRQ>:
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	db0b      	blt.n	8008d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f003 021f 	and.w	r2, r3, #31
 8008d88:	4906      	ldr	r1, [pc, #24]	; (8008da4 <__NVIC_EnableIRQ+0x34>)
 8008d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	2001      	movs	r0, #1
 8008d92:	fa00 f202 	lsl.w	r2, r0, r2
 8008d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr
 8008da4:	e000e100 	.word	0xe000e100

08008da8 <__NVIC_DisableIRQ>:
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	db12      	blt.n	8008de0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	f003 021f 	and.w	r2, r3, #31
 8008dc0:	490a      	ldr	r1, [pc, #40]	; (8008dec <__NVIC_DisableIRQ+0x44>)
 8008dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	2001      	movs	r0, #1
 8008dca:	fa00 f202 	lsl.w	r2, r0, r2
 8008dce:	3320      	adds	r3, #32
 8008dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008dd4:	f3bf 8f4f 	dsb	sy
}
 8008dd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008dda:	f3bf 8f6f 	isb	sy
}
 8008dde:	bf00      	nop
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	e000e100 	.word	0xe000e100

08008df0 <__NVIC_SetPriority>:
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db0a      	blt.n	8008e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	490c      	ldr	r1, [pc, #48]	; (8008e3c <__NVIC_SetPriority+0x4c>)
 8008e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e0e:	0112      	lsls	r2, r2, #4
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	440b      	add	r3, r1
 8008e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e18:	e00a      	b.n	8008e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	4908      	ldr	r1, [pc, #32]	; (8008e40 <__NVIC_SetPriority+0x50>)
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	3b04      	subs	r3, #4
 8008e28:	0112      	lsls	r2, r2, #4
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	761a      	strb	r2, [r3, #24]
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	e000e100 	.word	0xe000e100
 8008e40:	e000ed00 	.word	0xe000ed00

08008e44 <NVIC_EncodePriority>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	b089      	sub	sp, #36	; 0x24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f1c3 0307 	rsb	r3, r3, #7
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	bf28      	it	cs
 8008e62:	2304      	movcs	r3, #4
 8008e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	2b06      	cmp	r3, #6
 8008e6c:	d902      	bls.n	8008e74 <NVIC_EncodePriority+0x30>
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	3b03      	subs	r3, #3
 8008e72:	e000      	b.n	8008e76 <NVIC_EncodePriority+0x32>
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e78:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	43da      	mvns	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	401a      	ands	r2, r3
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	fa01 f303 	lsl.w	r3, r1, r3
 8008e96:	43d9      	mvns	r1, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e9c:	4313      	orrs	r3, r2
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3724      	adds	r7, #36	; 0x24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bc80      	pop	{r7}
 8008ea6:	4770      	bx	lr

08008ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008eb8:	d301      	bcc.n	8008ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e00f      	b.n	8008ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <SysTick_Config+0x40>)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ec6:	210f      	movs	r1, #15
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	f7ff ff90 	bl	8008df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <SysTick_Config+0x40>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ed6:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <SysTick_Config+0x40>)
 8008ed8:	2207      	movs	r2, #7
 8008eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	e000e010 	.word	0xe000e010

08008eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff ff09 	bl	8008d0c <__NVIC_SetPriorityGrouping>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	4603      	mov	r3, r0
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008f14:	f7ff ff1e 	bl	8008d54 <__NVIC_GetPriorityGrouping>
 8008f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f7ff ff90 	bl	8008e44 <NVIC_EncodePriority>
 8008f24:	4602      	mov	r2, r0
 8008f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff ff5f 	bl	8008df0 <__NVIC_SetPriority>
}
 8008f32:	bf00      	nop
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	4603      	mov	r3, r0
 8008f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff ff11 	bl	8008d70 <__NVIC_EnableIRQ>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7ff ff1f 	bl	8008da8 <__NVIC_DisableIRQ>
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff94 	bl	8008ea8 <SysTick_Config>
 8008f80:	4603      	mov	r3, r0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <HAL_FLASH_Program+0xd8>)
 8008fa8:	7e1b      	ldrb	r3, [r3, #24]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_FLASH_Program+0x26>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e054      	b.n	800905c <HAL_FLASH_Program+0xd0>
 8008fb2:	4b2c      	ldr	r3, [pc, #176]	; (8009064 <HAL_FLASH_Program+0xd8>)
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008fbc:	f000 f8a8 	bl	8009110 <FLASH_WaitForLastOperation>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d144      	bne.n	8009054 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d102      	bne.n	8008fd6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	757b      	strb	r3, [r7, #21]
 8008fd4:	e007      	b.n	8008fe6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d102      	bne.n	8008fe2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	757b      	strb	r3, [r7, #21]
 8008fe0:	e001      	b.n	8008fe6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75bb      	strb	r3, [r7, #22]
 8008fea:	e02d      	b.n	8009048 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	005a      	lsls	r2, r3, #1
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	eb02 0c03 	add.w	ip, r2, r3
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	0119      	lsls	r1, r3, #4
 8008ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffe:	f1c1 0620 	rsb	r6, r1, #32
 8009002:	f1a1 0020 	sub.w	r0, r1, #32
 8009006:	fa22 f401 	lsr.w	r4, r2, r1
 800900a:	fa03 f606 	lsl.w	r6, r3, r6
 800900e:	4334      	orrs	r4, r6
 8009010:	fa23 f000 	lsr.w	r0, r3, r0
 8009014:	4304      	orrs	r4, r0
 8009016:	fa23 f501 	lsr.w	r5, r3, r1
 800901a:	b2a3      	uxth	r3, r4
 800901c:	4619      	mov	r1, r3
 800901e:	4660      	mov	r0, ip
 8009020:	f000 f85a 	bl	80090d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009028:	f000 f872 	bl	8009110 <FLASH_WaitForLastOperation>
 800902c:	4603      	mov	r3, r0
 800902e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <HAL_FLASH_Program+0xdc>)
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	4a0c      	ldr	r2, [pc, #48]	; (8009068 <HAL_FLASH_Program+0xdc>)
 8009036:	f023 0301 	bic.w	r3, r3, #1
 800903a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8009042:	7dbb      	ldrb	r3, [r7, #22]
 8009044:	3301      	adds	r3, #1
 8009046:	75bb      	strb	r3, [r7, #22]
 8009048:	7dba      	ldrb	r2, [r7, #22]
 800904a:	7d7b      	ldrb	r3, [r7, #21]
 800904c:	429a      	cmp	r2, r3
 800904e:	d3cd      	bcc.n	8008fec <HAL_FLASH_Program+0x60>
 8009050:	e000      	b.n	8009054 <HAL_FLASH_Program+0xc8>
      {
        break;
 8009052:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <HAL_FLASH_Program+0xd8>)
 8009056:	2200      	movs	r2, #0
 8009058:	761a      	strb	r2, [r3, #24]

  return status;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009064:	20000878 	.word	0x20000878
 8009068:	40022000 	.word	0x40022000

0800906c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009076:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <HAL_FLASH_Unlock+0x40>)
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00d      	beq.n	800909e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <HAL_FLASH_Unlock+0x40>)
 8009084:	4a0a      	ldr	r2, [pc, #40]	; (80090b0 <HAL_FLASH_Unlock+0x44>)
 8009086:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009088:	4b08      	ldr	r3, [pc, #32]	; (80090ac <HAL_FLASH_Unlock+0x40>)
 800908a:	4a0a      	ldr	r2, [pc, #40]	; (80090b4 <HAL_FLASH_Unlock+0x48>)
 800908c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <HAL_FLASH_Unlock+0x40>)
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800909e:	79fb      	ldrb	r3, [r7, #7]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40022000 	.word	0x40022000
 80090b0:	45670123 	.word	0x45670123
 80090b4:	cdef89ab 	.word	0xcdef89ab

080090b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_FLASH_Lock+0x1c>)
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <HAL_FLASH_Lock+0x1c>)
 80090c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40022000 	.word	0x40022000

080090d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80090e4:	4b08      	ldr	r3, [pc, #32]	; (8009108 <FLASH_Program_HalfWord+0x30>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80090ea:	4b08      	ldr	r3, [pc, #32]	; (800910c <FLASH_Program_HalfWord+0x34>)
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	4a07      	ldr	r2, [pc, #28]	; (800910c <FLASH_Program_HalfWord+0x34>)
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	801a      	strh	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000878 	.word	0x20000878
 800910c:	40022000 	.word	0x40022000

08009110 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009118:	f7ff fbb8 	bl	800888c <HAL_GetTick>
 800911c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800911e:	e010      	b.n	8009142 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d00c      	beq.n	8009142 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <FLASH_WaitForLastOperation+0x2e>
 800912e:	f7ff fbad 	bl	800888c <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d201      	bcs.n	8009142 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e025      	b.n	800918e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009142:	4b15      	ldr	r3, [pc, #84]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e8      	bne.n	8009120 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 800915c:	2220      	movs	r2, #32
 800915e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009160:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <FLASH_WaitForLastOperation+0x88>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009184:	f000 f80a 	bl	800919c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e000      	b.n	800918e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40022000 	.word	0x40022000

0800919c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80091a6:	4b23      	ldr	r3, [pc, #140]	; (8009234 <FLASH_SetErrorCode+0x98>)
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 0310 	and.w	r3, r3, #16
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80091b2:	4b21      	ldr	r3, [pc, #132]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f043 0302 	orr.w	r3, r3, #2
 80091ba:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f043 0310 	orr.w	r3, r3, #16
 80091c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80091c6:	4b1b      	ldr	r3, [pc, #108]	; (8009234 <FLASH_SetErrorCode+0x98>)
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	4a17      	ldr	r2, [pc, #92]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f043 0304 	orr.w	r3, r3, #4
 80091e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <FLASH_SetErrorCode+0x98>)
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80091f2:	4b11      	ldr	r3, [pc, #68]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f043 0304 	orr.w	r3, r3, #4
 80091fa:	4a0f      	ldr	r2, [pc, #60]	; (8009238 <FLASH_SetErrorCode+0x9c>)
 80091fc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80091fe:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <FLASH_SetErrorCode+0x98>)
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	4a0c      	ldr	r2, [pc, #48]	; (8009234 <FLASH_SetErrorCode+0x98>)
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f240 1201 	movw	r2, #257	; 0x101
 8009210:	4293      	cmp	r3, r2
 8009212:	d106      	bne.n	8009222 <FLASH_SetErrorCode+0x86>
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <FLASH_SetErrorCode+0x98>)
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	4a06      	ldr	r2, [pc, #24]	; (8009234 <FLASH_SetErrorCode+0x98>)
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	61d3      	str	r3, [r2, #28]
}  
 8009220:	e002      	b.n	8009228 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009222:	4a04      	ldr	r2, [pc, #16]	; (8009234 <FLASH_SetErrorCode+0x98>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60d3      	str	r3, [r2, #12]
}  
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40022000 	.word	0x40022000
 8009238:	20000878 	.word	0x20000878

0800923c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800924e:	4b2f      	ldr	r3, [pc, #188]	; (800930c <HAL_FLASHEx_Erase+0xd0>)
 8009250:	7e1b      	ldrb	r3, [r3, #24]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_FLASHEx_Erase+0x1e>
 8009256:	2302      	movs	r3, #2
 8009258:	e053      	b.n	8009302 <HAL_FLASHEx_Erase+0xc6>
 800925a:	4b2c      	ldr	r3, [pc, #176]	; (800930c <HAL_FLASHEx_Erase+0xd0>)
 800925c:	2201      	movs	r2, #1
 800925e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d116      	bne.n	8009296 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800926c:	f7ff ff50 	bl	8009110 <FLASH_WaitForLastOperation>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d141      	bne.n	80092fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8009276:	2001      	movs	r0, #1
 8009278:	f000 f84c 	bl	8009314 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800927c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009280:	f7ff ff46 	bl	8009110 <FLASH_WaitForLastOperation>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8009288:	4b21      	ldr	r3, [pc, #132]	; (8009310 <HAL_FLASHEx_Erase+0xd4>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	4a20      	ldr	r2, [pc, #128]	; (8009310 <HAL_FLASHEx_Erase+0xd4>)
 800928e:	f023 0304 	bic.w	r3, r3, #4
 8009292:	6113      	str	r3, [r2, #16]
 8009294:	e031      	b.n	80092fa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009296:	f24c 3050 	movw	r0, #50000	; 0xc350
 800929a:	f7ff ff39 	bl	8009110 <FLASH_WaitForLastOperation>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d12a      	bne.n	80092fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f04f 32ff 	mov.w	r2, #4294967295
 80092aa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	e019      	b.n	80092e8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80092b4:	68b8      	ldr	r0, [r7, #8]
 80092b6:	f000 f849 	bl	800934c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80092ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80092be:	f7ff ff27 	bl	8009110 <FLASH_WaitForLastOperation>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80092c6:	4b12      	ldr	r3, [pc, #72]	; (8009310 <HAL_FLASHEx_Erase+0xd4>)
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	4a11      	ldr	r2, [pc, #68]	; (8009310 <HAL_FLASHEx_Erase+0xd4>)
 80092cc:	f023 0302 	bic.w	r3, r3, #2
 80092d0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	601a      	str	r2, [r3, #0]
            break;
 80092de:	e00c      	b.n	80092fa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	029a      	lsls	r2, r3, #10
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	4413      	add	r3, r2
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3dc      	bcc.n	80092b4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80092fa:	4b04      	ldr	r3, [pc, #16]	; (800930c <HAL_FLASHEx_Erase+0xd0>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	761a      	strb	r2, [r3, #24]

  return status;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000878 	.word	0x20000878
 8009310:	40022000 	.word	0x40022000

08009314 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <FLASH_MassErase+0x30>)
 800931e:	2200      	movs	r2, #0
 8009320:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <FLASH_MassErase+0x34>)
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	4a08      	ldr	r2, [pc, #32]	; (8009348 <FLASH_MassErase+0x34>)
 8009328:	f043 0304 	orr.w	r3, r3, #4
 800932c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800932e:	4b06      	ldr	r3, [pc, #24]	; (8009348 <FLASH_MassErase+0x34>)
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	4a05      	ldr	r2, [pc, #20]	; (8009348 <FLASH_MassErase+0x34>)
 8009334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009338:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr
 8009344:	20000878 	.word	0x20000878
 8009348:	40022000 	.word	0x40022000

0800934c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <FLASH_PageErase+0x38>)
 8009356:	2200      	movs	r2, #0
 8009358:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800935a:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <FLASH_PageErase+0x3c>)
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	4a0a      	ldr	r2, [pc, #40]	; (8009388 <FLASH_PageErase+0x3c>)
 8009360:	f043 0302 	orr.w	r3, r3, #2
 8009364:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009366:	4a08      	ldr	r2, [pc, #32]	; (8009388 <FLASH_PageErase+0x3c>)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <FLASH_PageErase+0x3c>)
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	4a05      	ldr	r2, [pc, #20]	; (8009388 <FLASH_PageErase+0x3c>)
 8009372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009376:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000878 	.word	0x20000878
 8009388:	40022000 	.word	0x40022000

0800938c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800938c:	b480      	push	{r7}
 800938e:	b08b      	sub	sp, #44	; 0x2c
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009396:	2300      	movs	r3, #0
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800939a:	2300      	movs	r3, #0
 800939c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800939e:	e169      	b.n	8009674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80093a0:	2201      	movs	r2, #1
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	fa02 f303 	lsl.w	r3, r2, r3
 80093a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	4013      	ands	r3, r2
 80093b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	f040 8158 	bne.w	800966e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4a9a      	ldr	r2, [pc, #616]	; (800962c <HAL_GPIO_Init+0x2a0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d05e      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
 80093c8:	4a98      	ldr	r2, [pc, #608]	; (800962c <HAL_GPIO_Init+0x2a0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d875      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 80093ce:	4a98      	ldr	r2, [pc, #608]	; (8009630 <HAL_GPIO_Init+0x2a4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d058      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
 80093d4:	4a96      	ldr	r2, [pc, #600]	; (8009630 <HAL_GPIO_Init+0x2a4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d86f      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 80093da:	4a96      	ldr	r2, [pc, #600]	; (8009634 <HAL_GPIO_Init+0x2a8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d052      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
 80093e0:	4a94      	ldr	r2, [pc, #592]	; (8009634 <HAL_GPIO_Init+0x2a8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d869      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 80093e6:	4a94      	ldr	r2, [pc, #592]	; (8009638 <HAL_GPIO_Init+0x2ac>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d04c      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
 80093ec:	4a92      	ldr	r2, [pc, #584]	; (8009638 <HAL_GPIO_Init+0x2ac>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d863      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 80093f2:	4a92      	ldr	r2, [pc, #584]	; (800963c <HAL_GPIO_Init+0x2b0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d046      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
 80093f8:	4a90      	ldr	r2, [pc, #576]	; (800963c <HAL_GPIO_Init+0x2b0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d85d      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 80093fe:	2b12      	cmp	r3, #18
 8009400:	d82a      	bhi.n	8009458 <HAL_GPIO_Init+0xcc>
 8009402:	2b12      	cmp	r3, #18
 8009404:	d859      	bhi.n	80094ba <HAL_GPIO_Init+0x12e>
 8009406:	a201      	add	r2, pc, #4	; (adr r2, 800940c <HAL_GPIO_Init+0x80>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	08009487 	.word	0x08009487
 8009410:	08009461 	.word	0x08009461
 8009414:	08009473 	.word	0x08009473
 8009418:	080094b5 	.word	0x080094b5
 800941c:	080094bb 	.word	0x080094bb
 8009420:	080094bb 	.word	0x080094bb
 8009424:	080094bb 	.word	0x080094bb
 8009428:	080094bb 	.word	0x080094bb
 800942c:	080094bb 	.word	0x080094bb
 8009430:	080094bb 	.word	0x080094bb
 8009434:	080094bb 	.word	0x080094bb
 8009438:	080094bb 	.word	0x080094bb
 800943c:	080094bb 	.word	0x080094bb
 8009440:	080094bb 	.word	0x080094bb
 8009444:	080094bb 	.word	0x080094bb
 8009448:	080094bb 	.word	0x080094bb
 800944c:	080094bb 	.word	0x080094bb
 8009450:	08009469 	.word	0x08009469
 8009454:	0800947d 	.word	0x0800947d
 8009458:	4a79      	ldr	r2, [pc, #484]	; (8009640 <HAL_GPIO_Init+0x2b4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d013      	beq.n	8009486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800945e:	e02c      	b.n	80094ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	623b      	str	r3, [r7, #32]
          break;
 8009466:	e029      	b.n	80094bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	3304      	adds	r3, #4
 800946e:	623b      	str	r3, [r7, #32]
          break;
 8009470:	e024      	b.n	80094bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	3308      	adds	r3, #8
 8009478:	623b      	str	r3, [r7, #32]
          break;
 800947a:	e01f      	b.n	80094bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	330c      	adds	r3, #12
 8009482:	623b      	str	r3, [r7, #32]
          break;
 8009484:	e01a      	b.n	80094bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800948e:	2304      	movs	r3, #4
 8009490:	623b      	str	r3, [r7, #32]
          break;
 8009492:	e013      	b.n	80094bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d105      	bne.n	80094a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800949c:	2308      	movs	r3, #8
 800949e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	611a      	str	r2, [r3, #16]
          break;
 80094a6:	e009      	b.n	80094bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80094a8:	2308      	movs	r3, #8
 80094aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	615a      	str	r2, [r3, #20]
          break;
 80094b2:	e003      	b.n	80094bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80094b4:	2300      	movs	r3, #0
 80094b6:	623b      	str	r3, [r7, #32]
          break;
 80094b8:	e000      	b.n	80094bc <HAL_GPIO_Init+0x130>
          break;
 80094ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d801      	bhi.n	80094c6 <HAL_GPIO_Init+0x13a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	e001      	b.n	80094ca <HAL_GPIO_Init+0x13e>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3304      	adds	r3, #4
 80094ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2bff      	cmp	r3, #255	; 0xff
 80094d0:	d802      	bhi.n	80094d8 <HAL_GPIO_Init+0x14c>
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	e002      	b.n	80094de <HAL_GPIO_Init+0x152>
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	3b08      	subs	r3, #8
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	210f      	movs	r1, #15
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ec:	43db      	mvns	r3, r3
 80094ee:	401a      	ands	r2, r3
 80094f0:	6a39      	ldr	r1, [r7, #32]
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	431a      	orrs	r2, r3
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 80b1 	beq.w	800966e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800950c:	4b4d      	ldr	r3, [pc, #308]	; (8009644 <HAL_GPIO_Init+0x2b8>)
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	4a4c      	ldr	r2, [pc, #304]	; (8009644 <HAL_GPIO_Init+0x2b8>)
 8009512:	f043 0301 	orr.w	r3, r3, #1
 8009516:	6193      	str	r3, [r2, #24]
 8009518:	4b4a      	ldr	r3, [pc, #296]	; (8009644 <HAL_GPIO_Init+0x2b8>)
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	60bb      	str	r3, [r7, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009524:	4a48      	ldr	r2, [pc, #288]	; (8009648 <HAL_GPIO_Init+0x2bc>)
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	089b      	lsrs	r3, r3, #2
 800952a:	3302      	adds	r3, #2
 800952c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	220f      	movs	r2, #15
 800953c:	fa02 f303 	lsl.w	r3, r2, r3
 8009540:	43db      	mvns	r3, r3
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4013      	ands	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a40      	ldr	r2, [pc, #256]	; (800964c <HAL_GPIO_Init+0x2c0>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <HAL_GPIO_Init+0x1ec>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a3f      	ldr	r2, [pc, #252]	; (8009650 <HAL_GPIO_Init+0x2c4>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00d      	beq.n	8009574 <HAL_GPIO_Init+0x1e8>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a3e      	ldr	r2, [pc, #248]	; (8009654 <HAL_GPIO_Init+0x2c8>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <HAL_GPIO_Init+0x1e4>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <HAL_GPIO_Init+0x2cc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d101      	bne.n	800956c <HAL_GPIO_Init+0x1e0>
 8009568:	2303      	movs	r3, #3
 800956a:	e006      	b.n	800957a <HAL_GPIO_Init+0x1ee>
 800956c:	2304      	movs	r3, #4
 800956e:	e004      	b.n	800957a <HAL_GPIO_Init+0x1ee>
 8009570:	2302      	movs	r3, #2
 8009572:	e002      	b.n	800957a <HAL_GPIO_Init+0x1ee>
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <HAL_GPIO_Init+0x1ee>
 8009578:	2300      	movs	r3, #0
 800957a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957c:	f002 0203 	and.w	r2, r2, #3
 8009580:	0092      	lsls	r2, r2, #2
 8009582:	4093      	lsls	r3, r2
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800958a:	492f      	ldr	r1, [pc, #188]	; (8009648 <HAL_GPIO_Init+0x2bc>)
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	089b      	lsrs	r3, r3, #2
 8009590:	3302      	adds	r3, #2
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80095a4:	4b2d      	ldr	r3, [pc, #180]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	492c      	ldr	r1, [pc, #176]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]
 80095b0:	e006      	b.n	80095c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80095b2:	4b2a      	ldr	r3, [pc, #168]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	43db      	mvns	r3, r3
 80095ba:	4928      	ldr	r1, [pc, #160]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095bc:	4013      	ands	r3, r2
 80095be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80095cc:	4b23      	ldr	r3, [pc, #140]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	4922      	ldr	r1, [pc, #136]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60cb      	str	r3, [r1, #12]
 80095d8:	e006      	b.n	80095e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80095da:	4b20      	ldr	r3, [pc, #128]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	43db      	mvns	r3, r3
 80095e2:	491e      	ldr	r1, [pc, #120]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d006      	beq.n	8009602 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80095f4:	4b19      	ldr	r3, [pc, #100]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	4918      	ldr	r1, [pc, #96]	; (800965c <HAL_GPIO_Init+0x2d0>)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	604b      	str	r3, [r1, #4]
 8009600:	e006      	b.n	8009610 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009602:	4b16      	ldr	r3, [pc, #88]	; (800965c <HAL_GPIO_Init+0x2d0>)
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	43db      	mvns	r3, r3
 800960a:	4914      	ldr	r1, [pc, #80]	; (800965c <HAL_GPIO_Init+0x2d0>)
 800960c:	4013      	ands	r3, r2
 800960e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d021      	beq.n	8009660 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <HAL_GPIO_Init+0x2d0>)
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	490e      	ldr	r1, [pc, #56]	; (800965c <HAL_GPIO_Init+0x2d0>)
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	4313      	orrs	r3, r2
 8009626:	600b      	str	r3, [r1, #0]
 8009628:	e021      	b.n	800966e <HAL_GPIO_Init+0x2e2>
 800962a:	bf00      	nop
 800962c:	10320000 	.word	0x10320000
 8009630:	10310000 	.word	0x10310000
 8009634:	10220000 	.word	0x10220000
 8009638:	10210000 	.word	0x10210000
 800963c:	10120000 	.word	0x10120000
 8009640:	10110000 	.word	0x10110000
 8009644:	40021000 	.word	0x40021000
 8009648:	40010000 	.word	0x40010000
 800964c:	40010800 	.word	0x40010800
 8009650:	40010c00 	.word	0x40010c00
 8009654:	40011000 	.word	0x40011000
 8009658:	40011400 	.word	0x40011400
 800965c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <HAL_GPIO_Init+0x304>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	43db      	mvns	r3, r3
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <HAL_GPIO_Init+0x304>)
 800966a:	4013      	ands	r3, r2
 800966c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	3301      	adds	r3, #1
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	fa22 f303 	lsr.w	r3, r2, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	f47f ae8e 	bne.w	80093a0 <HAL_GPIO_Init+0x14>
  }
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	372c      	adds	r7, #44	; 0x2c
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr
 8009690:	40010400 	.word	0x40010400

08009694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	887b      	ldrh	r3, [r7, #2]
 80096a6:	4013      	ands	r3, r2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80096ac:	2301      	movs	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
 80096b0:	e001      	b.n	80096b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc80      	pop	{r7}
 80096c0:	4770      	bx	lr

080096c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	807b      	strh	r3, [r7, #2]
 80096ce:	4613      	mov	r3, r2
 80096d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096d2:	787b      	ldrb	r3, [r7, #1]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096d8:	887a      	ldrh	r2, [r7, #2]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80096de:	e003      	b.n	80096e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80096e0:	887b      	ldrh	r3, [r7, #2]
 80096e2:	041a      	lsls	r2, r3, #16
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	611a      	str	r2, [r3, #16]
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b085      	sub	sp, #20
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009704:	887a      	ldrh	r2, [r7, #2]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4013      	ands	r3, r2
 800970a:	041a      	lsls	r2, r3, #16
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	43d9      	mvns	r1, r3
 8009710:	887b      	ldrh	r3, [r7, #2]
 8009712:	400b      	ands	r3, r1
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	611a      	str	r2, [r3, #16]
}
 800971a:	bf00      	nop
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr

08009724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800972e:	4b08      	ldr	r3, [pc, #32]	; (8009750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009730:	695a      	ldr	r2, [r3, #20]
 8009732:	88fb      	ldrh	r3, [r7, #6]
 8009734:	4013      	ands	r3, r2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800973a:	4a05      	ldr	r2, [pc, #20]	; (8009750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd fe00 	bl	8007348 <HAL_GPIO_EXTI_Callback>
  }
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40010400 	.word	0x40010400

08009754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e12b      	b.n	80099be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fe febc 	bl	80084f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2224      	movs	r2, #36	; 0x24
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80097b8:	f001 f960 	bl	800aa7c <HAL_RCC_GetPCLK1Freq>
 80097bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4a81      	ldr	r2, [pc, #516]	; (80099c8 <HAL_I2C_Init+0x274>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d807      	bhi.n	80097d8 <HAL_I2C_Init+0x84>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4a80      	ldr	r2, [pc, #512]	; (80099cc <HAL_I2C_Init+0x278>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	bf94      	ite	ls
 80097d0:	2301      	movls	r3, #1
 80097d2:	2300      	movhi	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	e006      	b.n	80097e6 <HAL_I2C_Init+0x92>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4a7d      	ldr	r2, [pc, #500]	; (80099d0 <HAL_I2C_Init+0x27c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	bf94      	ite	ls
 80097e0:	2301      	movls	r3, #1
 80097e2:	2300      	movhi	r3, #0
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e0e7      	b.n	80099be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4a78      	ldr	r2, [pc, #480]	; (80099d4 <HAL_I2C_Init+0x280>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	0c9b      	lsrs	r3, r3, #18
 80097f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	430a      	orrs	r2, r1
 800980c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	4a6a      	ldr	r2, [pc, #424]	; (80099c8 <HAL_I2C_Init+0x274>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d802      	bhi.n	8009828 <HAL_I2C_Init+0xd4>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3301      	adds	r3, #1
 8009826:	e009      	b.n	800983c <HAL_I2C_Init+0xe8>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	4a69      	ldr	r2, [pc, #420]	; (80099d8 <HAL_I2C_Init+0x284>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	099b      	lsrs	r3, r3, #6
 800983a:	3301      	adds	r3, #1
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	6812      	ldr	r2, [r2, #0]
 8009840:	430b      	orrs	r3, r1
 8009842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800984e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	495c      	ldr	r1, [pc, #368]	; (80099c8 <HAL_I2C_Init+0x274>)
 8009858:	428b      	cmp	r3, r1
 800985a:	d819      	bhi.n	8009890 <HAL_I2C_Init+0x13c>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1e59      	subs	r1, r3, #1
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	fbb1 f3f3 	udiv	r3, r1, r3
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009870:	400b      	ands	r3, r1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <HAL_I2C_Init+0x138>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1e59      	subs	r1, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	fbb1 f3f3 	udiv	r3, r1, r3
 8009884:	3301      	adds	r3, #1
 8009886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800988a:	e051      	b.n	8009930 <HAL_I2C_Init+0x1dc>
 800988c:	2304      	movs	r3, #4
 800988e:	e04f      	b.n	8009930 <HAL_I2C_Init+0x1dc>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d111      	bne.n	80098bc <HAL_I2C_Init+0x168>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1e58      	subs	r0, r3, #1
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6859      	ldr	r1, [r3, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	440b      	add	r3, r1
 80098a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80098aa:	3301      	adds	r3, #1
 80098ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bf0c      	ite	eq
 80098b4:	2301      	moveq	r3, #1
 80098b6:	2300      	movne	r3, #0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	e012      	b.n	80098e2 <HAL_I2C_Init+0x18e>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	1e58      	subs	r0, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6859      	ldr	r1, [r3, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	0099      	lsls	r1, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80098d2:	3301      	adds	r3, #1
 80098d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bf0c      	ite	eq
 80098dc:	2301      	moveq	r3, #1
 80098de:	2300      	movne	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <HAL_I2C_Init+0x196>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e022      	b.n	8009930 <HAL_I2C_Init+0x1dc>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10e      	bne.n	8009910 <HAL_I2C_Init+0x1bc>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1e58      	subs	r0, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6859      	ldr	r1, [r3, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	440b      	add	r3, r1
 8009900:	fbb0 f3f3 	udiv	r3, r0, r3
 8009904:	3301      	adds	r3, #1
 8009906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800990a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800990e:	e00f      	b.n	8009930 <HAL_I2C_Init+0x1dc>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	1e58      	subs	r0, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6859      	ldr	r1, [r3, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	0099      	lsls	r1, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	fbb0 f3f3 	udiv	r3, r0, r3
 8009926:	3301      	adds	r3, #1
 8009928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800992c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	6809      	ldr	r1, [r1, #0]
 8009934:	4313      	orrs	r3, r2
 8009936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69da      	ldr	r2, [r3, #28]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800995e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6911      	ldr	r1, [r2, #16]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68d2      	ldr	r2, [r2, #12]
 800996a:	4311      	orrs	r1, r2
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	6812      	ldr	r2, [r2, #0]
 8009970:	430b      	orrs	r3, r1
 8009972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695a      	ldr	r2, [r3, #20]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	431a      	orrs	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	000186a0 	.word	0x000186a0
 80099cc:	001e847f 	.word	0x001e847f
 80099d0:	003d08ff 	.word	0x003d08ff
 80099d4:	431bde83 	.word	0x431bde83
 80099d8:	10624dd3 	.word	0x10624dd3

080099dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	461a      	mov	r2, r3
 80099e8:	460b      	mov	r3, r1
 80099ea:	817b      	strh	r3, [r7, #10]
 80099ec:	4613      	mov	r3, r2
 80099ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099f0:	f7fe ff4c 	bl	800888c <HAL_GetTick>
 80099f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	f040 80e0 	bne.w	8009bc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2319      	movs	r3, #25
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4970      	ldr	r1, [pc, #448]	; (8009bd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fa92 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e0d3      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_I2C_Master_Transmit+0x50>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e0cc      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d007      	beq.n	8009a52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0201 	orr.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2221      	movs	r2, #33	; 0x21
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	893a      	ldrh	r2, [r7, #8]
 8009a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4a50      	ldr	r2, [pc, #320]	; (8009bd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a94:	8979      	ldrh	r1, [r7, #10]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a3a      	ldr	r2, [r7, #32]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f9ca 	bl	8009e34 <I2C_MasterRequestWrite>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e08d      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	613b      	str	r3, [r7, #16]
 8009abe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009ac0:	e066      	b.n	8009b90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	6a39      	ldr	r1, [r7, #32]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 fb50 	bl	800a16c <I2C_WaitOnTXEFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d107      	bne.n	8009aea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e06b      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b16:	3b01      	subs	r3, #1
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d11b      	bne.n	8009b64 <HAL_I2C_Master_Transmit+0x188>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	6a39      	ldr	r1, [r7, #32]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fb47 	bl	800a1fc <I2C_WaitOnBTFFlagUntilTimeout>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00d      	beq.n	8009b90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d107      	bne.n	8009b8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e01a      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d194      	bne.n	8009ac2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e000      	b.n	8009bc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009bc4:	2302      	movs	r3, #2
  }
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	00100002 	.word	0x00100002
 8009bd4:	ffff0000 	.word	0xffff0000

08009bd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	; 0x28
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	607a      	str	r2, [r7, #4]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	460b      	mov	r3, r1
 8009be6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009be8:	f7fe fe50 	bl	800888c <HAL_GetTick>
 8009bec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	f040 8111 	bne.w	8009e22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	2319      	movs	r3, #25
 8009c06:	2201      	movs	r2, #1
 8009c08:	4988      	ldr	r1, [pc, #544]	; (8009e2c <HAL_I2C_IsDeviceReady+0x254>)
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f994 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c16:	2302      	movs	r3, #2
 8009c18:	e104      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d101      	bne.n	8009c28 <HAL_I2C_IsDeviceReady+0x50>
 8009c24:	2302      	movs	r3, #2
 8009c26:	e0fd      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d007      	beq.n	8009c4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f042 0201 	orr.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2224      	movs	r2, #36	; 0x24
 8009c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a70      	ldr	r2, [pc, #448]	; (8009e30 <HAL_I2C_IsDeviceReady+0x258>)
 8009c70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f952 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00d      	beq.n	8009cb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca8:	d103      	bne.n	8009cb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e0b6      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cb6:	897b      	ldrh	r3, [r7, #10]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009cc6:	f7fe fde1 	bl	800888c <HAL_GetTick>
 8009cca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	bf0c      	ite	eq
 8009cda:	2301      	moveq	r3, #1
 8009cdc:	2300      	movne	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cf0:	bf0c      	ite	eq
 8009cf2:	2301      	moveq	r3, #1
 8009cf4:	2300      	movne	r3, #0
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009cfa:	e025      	b.n	8009d48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cfc:	f7fe fdc6 	bl	800888c <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d302      	bcc.n	8009d12 <HAL_I2C_IsDeviceReady+0x13a>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d103      	bne.n	8009d1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	22a0      	movs	r2, #160	; 0xa0
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3e:	bf0c      	ite	eq
 8009d40:	2301      	moveq	r3, #1
 8009d42:	2300      	movne	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2ba0      	cmp	r3, #160	; 0xa0
 8009d52:	d005      	beq.n	8009d60 <HAL_I2C_IsDeviceReady+0x188>
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <HAL_I2C_IsDeviceReady+0x188>
 8009d5a:	7dbb      	ldrb	r3, [r7, #22]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0cd      	beq.n	8009cfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d129      	bne.n	8009dca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d86:	2300      	movs	r3, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	613b      	str	r3, [r7, #16]
 8009d9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	2319      	movs	r3, #25
 8009da2:	2201      	movs	r2, #1
 8009da4:	4921      	ldr	r1, [pc, #132]	; (8009e2c <HAL_I2C_IsDeviceReady+0x254>)
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f8c6 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e036      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e02c      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009de2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2319      	movs	r3, #25
 8009dea:	2201      	movs	r2, #1
 8009dec:	490f      	ldr	r1, [pc, #60]	; (8009e2c <HAL_I2C_IsDeviceReady+0x254>)
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f8a2 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e012      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	3301      	adds	r3, #1
 8009e02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f4ff af32 	bcc.w	8009c72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e22:	2302      	movs	r3, #2
  }
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3720      	adds	r7, #32
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	00100002 	.word	0x00100002
 8009e30:	ffff0000 	.word	0xffff0000

08009e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	460b      	mov	r3, r1
 8009e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d006      	beq.n	8009e5e <I2C_MasterRequestWrite+0x2a>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d003      	beq.n	8009e5e <I2C_MasterRequestWrite+0x2a>
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e5c:	d108      	bne.n	8009e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e00b      	b.n	8009e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	2b12      	cmp	r3, #18
 8009e76:	d107      	bne.n	8009e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 f84f 	bl	8009f38 <I2C_WaitOnFlagUntilTimeout>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00d      	beq.n	8009ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eae:	d103      	bne.n	8009eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e035      	b.n	8009f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ec4:	d108      	bne.n	8009ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ec6:	897b      	ldrh	r3, [r7, #10]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ed4:	611a      	str	r2, [r3, #16]
 8009ed6:	e01b      	b.n	8009f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ed8:	897b      	ldrh	r3, [r7, #10]
 8009eda:	11db      	asrs	r3, r3, #7
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0306 	and.w	r3, r3, #6
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f063 030f 	orn	r3, r3, #15
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	490e      	ldr	r1, [pc, #56]	; (8009f30 <I2C_MasterRequestWrite+0xfc>)
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f898 	bl	800a02c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e010      	b.n	8009f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f06:	897b      	ldrh	r3, [r7, #10]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	4907      	ldr	r1, [pc, #28]	; (8009f34 <I2C_MasterRequestWrite+0x100>)
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f888 	bl	800a02c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	00010008 	.word	0x00010008
 8009f34:	00010002 	.word	0x00010002

08009f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	4613      	mov	r3, r2
 8009f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f48:	e048      	b.n	8009fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d044      	beq.n	8009fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f52:	f7fe fc9b 	bl	800888c <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d302      	bcc.n	8009f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d139      	bne.n	8009fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	0c1b      	lsrs	r3, r3, #16
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d10d      	bne.n	8009f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	43da      	mvns	r2, r3
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf0c      	ite	eq
 8009f84:	2301      	moveq	r3, #1
 8009f86:	2300      	movne	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	e00c      	b.n	8009fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	43da      	mvns	r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bf0c      	ite	eq
 8009fa0:	2301      	moveq	r3, #1
 8009fa2:	2300      	movne	r3, #0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d116      	bne.n	8009fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc8:	f043 0220 	orr.w	r2, r3, #32
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e023      	b.n	800a024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d10d      	bne.n	800a002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	43da      	mvns	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	bf0c      	ite	eq
 8009ff8:	2301      	moveq	r3, #1
 8009ffa:	2300      	movne	r3, #0
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	e00c      	b.n	800a01c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	43da      	mvns	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	4013      	ands	r3, r2
 800a00e:	b29b      	uxth	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	bf0c      	ite	eq
 800a014:	2301      	moveq	r3, #1
 800a016:	2300      	movne	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d093      	beq.n	8009f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a03a:	e071      	b.n	800a120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a04a:	d123      	bne.n	800a094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a05a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	f043 0204 	orr.w	r2, r3, #4
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e067      	b.n	800a164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09a:	d041      	beq.n	800a120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09c:	f7fe fbf6 	bl	800888c <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d302      	bcc.n	800a0b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d136      	bne.n	800a120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	0c1b      	lsrs	r3, r3, #16
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d10c      	bne.n	800a0d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	43da      	mvns	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bf14      	ite	ne
 800a0ce:	2301      	movne	r3, #1
 800a0d0:	2300      	moveq	r3, #0
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	e00b      	b.n	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	43da      	mvns	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bf14      	ite	ne
 800a0e8:	2301      	movne	r3, #1
 800a0ea:	2300      	moveq	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d016      	beq.n	800a120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	f043 0220 	orr.w	r2, r3, #32
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e021      	b.n	800a164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b01      	cmp	r3, #1
 800a128:	d10c      	bne.n	800a144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	43da      	mvns	r2, r3
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4013      	ands	r3, r2
 800a136:	b29b      	uxth	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bf14      	ite	ne
 800a13c:	2301      	movne	r3, #1
 800a13e:	2300      	moveq	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	e00b      	b.n	800a15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	43da      	mvns	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4013      	ands	r3, r2
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	bf14      	ite	ne
 800a156:	2301      	movne	r3, #1
 800a158:	2300      	moveq	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f47f af6d 	bne.w	800a03c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a178:	e034      	b.n	800a1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f886 	bl	800a28c <I2C_IsAcknowledgeFailed>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e034      	b.n	800a1f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d028      	beq.n	800a1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a192:	f7fe fb7b 	bl	800888c <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d302      	bcc.n	800a1a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d11d      	bne.n	800a1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d016      	beq.n	800a1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	f043 0220 	orr.w	r2, r3, #32
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e007      	b.n	800a1f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ee:	2b80      	cmp	r3, #128	; 0x80
 800a1f0:	d1c3      	bne.n	800a17a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a208:	e034      	b.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 f83e 	bl	800a28c <I2C_IsAcknowledgeFailed>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e034      	b.n	800a284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a220:	d028      	beq.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a222:	f7fe fb33 	bl	800888c <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d302      	bcc.n	800a238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11d      	bne.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d016      	beq.n	800a274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	f043 0220 	orr.w	r2, r3, #32
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e007      	b.n	800a284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	f003 0304 	and.w	r3, r3, #4
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d1c3      	bne.n	800a20a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a2:	d11b      	bne.n	800a2dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a2ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c8:	f043 0204 	orr.w	r2, r3, #4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bc80      	pop	{r7}
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e272      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 8087 	beq.w	800a416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a308:	4b92      	ldr	r3, [pc, #584]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f003 030c 	and.w	r3, r3, #12
 800a310:	2b04      	cmp	r3, #4
 800a312:	d00c      	beq.n	800a32e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a314:	4b8f      	ldr	r3, [pc, #572]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f003 030c 	and.w	r3, r3, #12
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d112      	bne.n	800a346 <HAL_RCC_OscConfig+0x5e>
 800a320:	4b8c      	ldr	r3, [pc, #560]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32c:	d10b      	bne.n	800a346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a32e:	4b89      	ldr	r3, [pc, #548]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d06c      	beq.n	800a414 <HAL_RCC_OscConfig+0x12c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d168      	bne.n	800a414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e24c      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a34e:	d106      	bne.n	800a35e <HAL_RCC_OscConfig+0x76>
 800a350:	4b80      	ldr	r3, [pc, #512]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a7f      	ldr	r2, [pc, #508]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	e02e      	b.n	800a3bc <HAL_RCC_OscConfig+0xd4>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10c      	bne.n	800a380 <HAL_RCC_OscConfig+0x98>
 800a366:	4b7b      	ldr	r3, [pc, #492]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a7a      	ldr	r2, [pc, #488]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a36c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	4b78      	ldr	r3, [pc, #480]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a77      	ldr	r2, [pc, #476]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	e01d      	b.n	800a3bc <HAL_RCC_OscConfig+0xd4>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a388:	d10c      	bne.n	800a3a4 <HAL_RCC_OscConfig+0xbc>
 800a38a:	4b72      	ldr	r3, [pc, #456]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a71      	ldr	r2, [pc, #452]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	4b6f      	ldr	r3, [pc, #444]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a6e      	ldr	r2, [pc, #440]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e00b      	b.n	800a3bc <HAL_RCC_OscConfig+0xd4>
 800a3a4:	4b6b      	ldr	r3, [pc, #428]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a6a      	ldr	r2, [pc, #424]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a3aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	4b68      	ldr	r3, [pc, #416]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a67      	ldr	r2, [pc, #412]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a3b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d013      	beq.n	800a3ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3c4:	f7fe fa62 	bl	800888c <HAL_GetTick>
 800a3c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3ca:	e008      	b.n	800a3de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3cc:	f7fe fa5e 	bl	800888c <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b64      	cmp	r3, #100	; 0x64
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e200      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3de:	4b5d      	ldr	r3, [pc, #372]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0f0      	beq.n	800a3cc <HAL_RCC_OscConfig+0xe4>
 800a3ea:	e014      	b.n	800a416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3ec:	f7fe fa4e 	bl	800888c <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3f4:	f7fe fa4a 	bl	800888c <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b64      	cmp	r3, #100	; 0x64
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e1ec      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a406:	4b53      	ldr	r3, [pc, #332]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f0      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x10c>
 800a412:	e000      	b.n	800a416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d063      	beq.n	800a4ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a422:	4b4c      	ldr	r3, [pc, #304]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f003 030c 	and.w	r3, r3, #12
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a42e:	4b49      	ldr	r3, [pc, #292]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f003 030c 	and.w	r3, r3, #12
 800a436:	2b08      	cmp	r3, #8
 800a438:	d11c      	bne.n	800a474 <HAL_RCC_OscConfig+0x18c>
 800a43a:	4b46      	ldr	r3, [pc, #280]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d116      	bne.n	800a474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a446:	4b43      	ldr	r3, [pc, #268]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <HAL_RCC_OscConfig+0x176>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d001      	beq.n	800a45e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e1c0      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a45e:	4b3d      	ldr	r3, [pc, #244]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4939      	ldr	r1, [pc, #228]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a472:	e03a      	b.n	800a4ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d020      	beq.n	800a4be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a47c:	4b36      	ldr	r3, [pc, #216]	; (800a558 <HAL_RCC_OscConfig+0x270>)
 800a47e:	2201      	movs	r2, #1
 800a480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a482:	f7fe fa03 	bl	800888c <HAL_GetTick>
 800a486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a488:	e008      	b.n	800a49c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a48a:	f7fe f9ff 	bl	800888c <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d901      	bls.n	800a49c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a498:	2303      	movs	r3, #3
 800a49a:	e1a1      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a49c:	4b2d      	ldr	r3, [pc, #180]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0f0      	beq.n	800a48a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4a8:	4b2a      	ldr	r3, [pc, #168]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4927      	ldr	r1, [pc, #156]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	600b      	str	r3, [r1, #0]
 800a4bc:	e015      	b.n	800a4ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4be:	4b26      	ldr	r3, [pc, #152]	; (800a558 <HAL_RCC_OscConfig+0x270>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4c4:	f7fe f9e2 	bl	800888c <HAL_GetTick>
 800a4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4ca:	e008      	b.n	800a4de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4cc:	f7fe f9de 	bl	800888c <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e180      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4de:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1f0      	bne.n	800a4cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0308 	and.w	r3, r3, #8
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d03a      	beq.n	800a56c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d019      	beq.n	800a532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4fe:	4b17      	ldr	r3, [pc, #92]	; (800a55c <HAL_RCC_OscConfig+0x274>)
 800a500:	2201      	movs	r2, #1
 800a502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a504:	f7fe f9c2 	bl	800888c <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a50c:	f7fe f9be 	bl	800888c <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e160      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <HAL_RCC_OscConfig+0x26c>)
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f0      	beq.n	800a50c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a52a:	2001      	movs	r0, #1
 800a52c:	f000 faba 	bl	800aaa4 <RCC_Delay>
 800a530:	e01c      	b.n	800a56c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a532:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <HAL_RCC_OscConfig+0x274>)
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a538:	f7fe f9a8 	bl	800888c <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a53e:	e00f      	b.n	800a560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a540:	f7fe f9a4 	bl	800888c <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d908      	bls.n	800a560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e146      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
 800a552:	bf00      	nop
 800a554:	40021000 	.word	0x40021000
 800a558:	42420000 	.word	0x42420000
 800a55c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a560:	4b92      	ldr	r3, [pc, #584]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e9      	bne.n	800a540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80a6 	beq.w	800a6c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a57a:	2300      	movs	r3, #0
 800a57c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a57e:	4b8b      	ldr	r3, [pc, #556]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10d      	bne.n	800a5a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a58a:	4b88      	ldr	r3, [pc, #544]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	4a87      	ldr	r2, [pc, #540]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a594:	61d3      	str	r3, [r2, #28]
 800a596:	4b85      	ldr	r3, [pc, #532]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a59e:	60bb      	str	r3, [r7, #8]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5a6:	4b82      	ldr	r3, [pc, #520]	; (800a7b0 <HAL_RCC_OscConfig+0x4c8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d118      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a5b2:	4b7f      	ldr	r3, [pc, #508]	; (800a7b0 <HAL_RCC_OscConfig+0x4c8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a7e      	ldr	r2, [pc, #504]	; (800a7b0 <HAL_RCC_OscConfig+0x4c8>)
 800a5b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5be:	f7fe f965 	bl	800888c <HAL_GetTick>
 800a5c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5c4:	e008      	b.n	800a5d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5c6:	f7fe f961 	bl	800888c <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b64      	cmp	r3, #100	; 0x64
 800a5d2:	d901      	bls.n	800a5d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e103      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5d8:	4b75      	ldr	r3, [pc, #468]	; (800a7b0 <HAL_RCC_OscConfig+0x4c8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0f0      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d106      	bne.n	800a5fa <HAL_RCC_OscConfig+0x312>
 800a5ec:	4b6f      	ldr	r3, [pc, #444]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	4a6e      	ldr	r2, [pc, #440]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a5f2:	f043 0301 	orr.w	r3, r3, #1
 800a5f6:	6213      	str	r3, [r2, #32]
 800a5f8:	e02d      	b.n	800a656 <HAL_RCC_OscConfig+0x36e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10c      	bne.n	800a61c <HAL_RCC_OscConfig+0x334>
 800a602:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	4a69      	ldr	r2, [pc, #420]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	6213      	str	r3, [r2, #32]
 800a60e:	4b67      	ldr	r3, [pc, #412]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	4a66      	ldr	r2, [pc, #408]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a614:	f023 0304 	bic.w	r3, r3, #4
 800a618:	6213      	str	r3, [r2, #32]
 800a61a:	e01c      	b.n	800a656 <HAL_RCC_OscConfig+0x36e>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	2b05      	cmp	r3, #5
 800a622:	d10c      	bne.n	800a63e <HAL_RCC_OscConfig+0x356>
 800a624:	4b61      	ldr	r3, [pc, #388]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	4a60      	ldr	r2, [pc, #384]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a62a:	f043 0304 	orr.w	r3, r3, #4
 800a62e:	6213      	str	r3, [r2, #32]
 800a630:	4b5e      	ldr	r3, [pc, #376]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	4a5d      	ldr	r2, [pc, #372]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a636:	f043 0301 	orr.w	r3, r3, #1
 800a63a:	6213      	str	r3, [r2, #32]
 800a63c:	e00b      	b.n	800a656 <HAL_RCC_OscConfig+0x36e>
 800a63e:	4b5b      	ldr	r3, [pc, #364]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	4a5a      	ldr	r2, [pc, #360]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a644:	f023 0301 	bic.w	r3, r3, #1
 800a648:	6213      	str	r3, [r2, #32]
 800a64a:	4b58      	ldr	r3, [pc, #352]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	4a57      	ldr	r2, [pc, #348]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a650:	f023 0304 	bic.w	r3, r3, #4
 800a654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d015      	beq.n	800a68a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a65e:	f7fe f915 	bl	800888c <HAL_GetTick>
 800a662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a664:	e00a      	b.n	800a67c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a666:	f7fe f911 	bl	800888c <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	f241 3288 	movw	r2, #5000	; 0x1388
 800a674:	4293      	cmp	r3, r2
 800a676:	d901      	bls.n	800a67c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e0b1      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a67c:	4b4b      	ldr	r3, [pc, #300]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0ee      	beq.n	800a666 <HAL_RCC_OscConfig+0x37e>
 800a688:	e014      	b.n	800a6b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a68a:	f7fe f8ff 	bl	800888c <HAL_GetTick>
 800a68e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a690:	e00a      	b.n	800a6a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a692:	f7fe f8fb 	bl	800888c <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e09b      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6a8:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1ee      	bne.n	800a692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d105      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6ba:	4b3c      	ldr	r3, [pc, #240]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	4a3b      	ldr	r2, [pc, #236]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a6c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	69db      	ldr	r3, [r3, #28]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8087 	beq.w	800a7de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6d0:	4b36      	ldr	r3, [pc, #216]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f003 030c 	and.w	r3, r3, #12
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d061      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d146      	bne.n	800a772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6e4:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <HAL_RCC_OscConfig+0x4cc>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ea:	f7fe f8cf 	bl	800888c <HAL_GetTick>
 800a6ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6f0:	e008      	b.n	800a704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f2:	f7fe f8cb 	bl	800888c <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d901      	bls.n	800a704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e06d      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a704:	4b29      	ldr	r3, [pc, #164]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f0      	bne.n	800a6f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a718:	d108      	bne.n	800a72c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	4921      	ldr	r1, [pc, #132]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a72c:	4b1f      	ldr	r3, [pc, #124]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a19      	ldr	r1, [r3, #32]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	430b      	orrs	r3, r1
 800a73e:	491b      	ldr	r1, [pc, #108]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a740:	4313      	orrs	r3, r2
 800a742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a744:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <HAL_RCC_OscConfig+0x4cc>)
 800a746:	2201      	movs	r2, #1
 800a748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a74a:	f7fe f89f 	bl	800888c <HAL_GetTick>
 800a74e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a750:	e008      	b.n	800a764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a752:	f7fe f89b 	bl	800888c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e03d      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a764:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0f0      	beq.n	800a752 <HAL_RCC_OscConfig+0x46a>
 800a770:	e035      	b.n	800a7de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a772:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <HAL_RCC_OscConfig+0x4cc>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a778:	f7fe f888 	bl	800888c <HAL_GetTick>
 800a77c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a780:	f7fe f884 	bl	800888c <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e026      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a792:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <HAL_RCC_OscConfig+0x4c4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f0      	bne.n	800a780 <HAL_RCC_OscConfig+0x498>
 800a79e:	e01e      	b.n	800a7de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d107      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e019      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
 800a7ac:	40021000 	.word	0x40021000
 800a7b0:	40007000 	.word	0x40007000
 800a7b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <HAL_RCC_OscConfig+0x500>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d106      	bne.n	800a7da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d001      	beq.n	800a7de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	40021000 	.word	0x40021000

0800a7ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0d0      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a800:	4b6a      	ldr	r3, [pc, #424]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d910      	bls.n	800a830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a80e:	4b67      	ldr	r3, [pc, #412]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f023 0207 	bic.w	r2, r3, #7
 800a816:	4965      	ldr	r1, [pc, #404]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a81e:	4b63      	ldr	r3, [pc, #396]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d001      	beq.n	800a830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0b8      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d020      	beq.n	800a87e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a848:	4b59      	ldr	r3, [pc, #356]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4a58      	ldr	r2, [pc, #352]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a84e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0308 	and.w	r3, r3, #8
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a860:	4b53      	ldr	r3, [pc, #332]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	4a52      	ldr	r2, [pc, #328]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a866:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a86a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a86c:	4b50      	ldr	r3, [pc, #320]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	494d      	ldr	r1, [pc, #308]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d040      	beq.n	800a90c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d107      	bne.n	800a8a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a892:	4b47      	ldr	r3, [pc, #284]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d115      	bne.n	800a8ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e07f      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d107      	bne.n	800a8ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8aa:	4b41      	ldr	r3, [pc, #260]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d109      	bne.n	800a8ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e073      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8ba:	4b3d      	ldr	r3, [pc, #244]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e06b      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8ca:	4b39      	ldr	r3, [pc, #228]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f023 0203 	bic.w	r2, r3, #3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	4936      	ldr	r1, [pc, #216]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a8dc:	f7fd ffd6 	bl	800888c <HAL_GetTick>
 800a8e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8e2:	e00a      	b.n	800a8fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8e4:	f7fd ffd2 	bl	800888c <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e053      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f003 020c 	and.w	r2, r3, #12
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	429a      	cmp	r2, r3
 800a90a:	d1eb      	bne.n	800a8e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a90c:	4b27      	ldr	r3, [pc, #156]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0307 	and.w	r3, r3, #7
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d210      	bcs.n	800a93c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f023 0207 	bic.w	r2, r3, #7
 800a922:	4922      	ldr	r1, [pc, #136]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	4313      	orrs	r3, r2
 800a928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a92a:	4b20      	ldr	r3, [pc, #128]	; (800a9ac <HAL_RCC_ClockConfig+0x1c0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	429a      	cmp	r2, r3
 800a936:	d001      	beq.n	800a93c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e032      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a948:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	4916      	ldr	r1, [pc, #88]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a956:	4313      	orrs	r3, r2
 800a958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d009      	beq.n	800a97a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a966:	4b12      	ldr	r3, [pc, #72]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	490e      	ldr	r1, [pc, #56]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a976:	4313      	orrs	r3, r2
 800a978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a97a:	f000 f821 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	091b      	lsrs	r3, r3, #4
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	490a      	ldr	r1, [pc, #40]	; (800a9b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a98c:	5ccb      	ldrb	r3, [r1, r3]
 800a98e:	fa22 f303 	lsr.w	r3, r2, r3
 800a992:	4a09      	ldr	r2, [pc, #36]	; (800a9b8 <HAL_RCC_ClockConfig+0x1cc>)
 800a994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <HAL_RCC_ClockConfig+0x1d0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fd ff34 	bl	8008808 <HAL_InitTick>

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	40022000 	.word	0x40022000
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	0800dce0 	.word	0x0800dce0
 800a9b8:	20000030 	.word	0x20000030
 800a9bc:	20000034 	.word	0x20000034

0800a9c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60bb      	str	r3, [r7, #8]
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a9da:	4b1e      	ldr	r3, [pc, #120]	; (800aa54 <HAL_RCC_GetSysClockFreq+0x94>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f003 030c 	and.w	r3, r3, #12
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d002      	beq.n	800a9f0 <HAL_RCC_GetSysClockFreq+0x30>
 800a9ea:	2b08      	cmp	r3, #8
 800a9ec:	d003      	beq.n	800a9f6 <HAL_RCC_GetSysClockFreq+0x36>
 800a9ee:	e027      	b.n	800aa40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a9f0:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <HAL_RCC_GetSysClockFreq+0x98>)
 800a9f2:	613b      	str	r3, [r7, #16]
      break;
 800a9f4:	e027      	b.n	800aa46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	0c9b      	lsrs	r3, r3, #18
 800a9fa:	f003 030f 	and.w	r3, r3, #15
 800a9fe:	4a17      	ldr	r2, [pc, #92]	; (800aa5c <HAL_RCC_GetSysClockFreq+0x9c>)
 800aa00:	5cd3      	ldrb	r3, [r2, r3]
 800aa02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d010      	beq.n	800aa30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <HAL_RCC_GetSysClockFreq+0x94>)
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	0c5b      	lsrs	r3, r3, #17
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	4a11      	ldr	r2, [pc, #68]	; (800aa60 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aa1a:	5cd3      	ldrb	r3, [r2, r3]
 800aa1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a0d      	ldr	r2, [pc, #52]	; (800aa58 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa22:	fb03 f202 	mul.w	r2, r3, r2
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e004      	b.n	800aa3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aa34:	fb02 f303 	mul.w	r3, r2, r3
 800aa38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	613b      	str	r3, [r7, #16]
      break;
 800aa3e:	e002      	b.n	800aa46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa42:	613b      	str	r3, [r7, #16]
      break;
 800aa44:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa46:	693b      	ldr	r3, [r7, #16]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bc80      	pop	{r7}
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	40021000 	.word	0x40021000
 800aa58:	007a1200 	.word	0x007a1200
 800aa5c:	0800dcf8 	.word	0x0800dcf8
 800aa60:	0800dd08 	.word	0x0800dd08
 800aa64:	003d0900 	.word	0x003d0900

0800aa68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa6c:	4b02      	ldr	r3, [pc, #8]	; (800aa78 <HAL_RCC_GetHCLKFreq+0x10>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr
 800aa78:	20000030 	.word	0x20000030

0800aa7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa80:	f7ff fff2 	bl	800aa68 <HAL_RCC_GetHCLKFreq>
 800aa84:	4602      	mov	r2, r0
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	0a1b      	lsrs	r3, r3, #8
 800aa8c:	f003 0307 	and.w	r3, r3, #7
 800aa90:	4903      	ldr	r1, [pc, #12]	; (800aaa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa92:	5ccb      	ldrb	r3, [r1, r3]
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	0800dcf0 	.word	0x0800dcf0

0800aaa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <RCC_Delay+0x34>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <RCC_Delay+0x38>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	0a5b      	lsrs	r3, r3, #9
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	fb02 f303 	mul.w	r3, r2, r3
 800aabe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aac0:	bf00      	nop
  }
  while (Delay --);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	1e5a      	subs	r2, r3, #1
 800aac6:	60fa      	str	r2, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f9      	bne.n	800aac0 <RCC_Delay+0x1c>
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bc80      	pop	{r7}
 800aad6:	4770      	bx	lr
 800aad8:	20000030 	.word	0x20000030
 800aadc:	10624dd3 	.word	0x10624dd3

0800aae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d07d      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800aafc:	2300      	movs	r3, #0
 800aafe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab00:	4b4f      	ldr	r3, [pc, #316]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab0c:	4b4c      	ldr	r3, [pc, #304]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4a4b      	ldr	r2, [pc, #300]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab16:	61d3      	str	r3, [r2, #28]
 800ab18:	4b49      	ldr	r3, [pc, #292]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab20:	60bb      	str	r3, [r7, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab28:	4b46      	ldr	r3, [pc, #280]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d118      	bne.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab34:	4b43      	ldr	r3, [pc, #268]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a42      	ldr	r2, [pc, #264]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab40:	f7fd fea4 	bl	800888c <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab46:	e008      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab48:	f7fd fea0 	bl	800888c <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b64      	cmp	r3, #100	; 0x64
 800ab54:	d901      	bls.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e06d      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab5a:	4b3a      	ldr	r3, [pc, #232]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f0      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab66:	4b36      	ldr	r3, [pc, #216]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d02e      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d027      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab84:	4b2e      	ldr	r3, [pc, #184]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab90:	2201      	movs	r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab94:	4b2c      	ldr	r3, [pc, #176]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ab9a:	4a29      	ldr	r2, [pc, #164]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d014      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abaa:	f7fd fe6f 	bl	800888c <HAL_GetTick>
 800abae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abb0:	e00a      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb2:	f7fd fe6b 	bl	800888c <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e036      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	4b1d      	ldr	r3, [pc, #116]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ee      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abd4:	4b1a      	ldr	r3, [pc, #104]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4917      	ldr	r1, [pc, #92]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d105      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abec:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	4a13      	ldr	r2, [pc, #76]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d008      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac04:	4b0e      	ldr	r3, [pc, #56]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	490b      	ldr	r1, [pc, #44]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0310 	and.w	r3, r3, #16
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d008      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	4904      	ldr	r1, [pc, #16]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	40021000 	.word	0x40021000
 800ac44:	40007000 	.word	0x40007000
 800ac48:	42420440 	.word	0x42420440

0800ac4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e076      	b.n	800ad4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d108      	bne.n	800ac78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac6e:	d009      	beq.n	800ac84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	61da      	str	r2, [r3, #28]
 800ac76:	e005      	b.n	800ac84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7fd fc68 	bl	8008574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800accc:	431a      	orrs	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	f003 0302 	and.w	r3, r3, #2
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acfe:	431a      	orrs	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad08:	ea42 0103 	orr.w	r1, r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	0c1a      	lsrs	r2, r3, #16
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f002 0204 	and.w	r2, r2, #4
 800ad2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69da      	ldr	r2, [r3, #28]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <HAL_SPI_Transmit+0x22>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e12d      	b.n	800afd2 <HAL_SPI_Transmit+0x27e>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad7e:	f7fd fd85 	bl	800888c <HAL_GetTick>
 800ad82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d002      	beq.n	800ad9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad94:	2302      	movs	r3, #2
 800ad96:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad98:	e116      	b.n	800afc8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <HAL_SPI_Transmit+0x52>
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800adaa:	e10d      	b.n	800afc8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2203      	movs	r2, #3
 800adb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	88fa      	ldrh	r2, [r7, #6]
 800adca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf2:	d10f      	bne.n	800ae14 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d007      	beq.n	800ae32 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae3a:	d14f      	bne.n	800aedc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <HAL_SPI_Transmit+0xf6>
 800ae44:	8afb      	ldrh	r3, [r7, #22]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d142      	bne.n	800aed0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	881a      	ldrh	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	1c9a      	adds	r2, r3, #2
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae6e:	e02f      	b.n	800aed0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d112      	bne.n	800aea4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	881a      	ldrh	r2, [r3, #0]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8e:	1c9a      	adds	r2, r3, #2
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	86da      	strh	r2, [r3, #54]	; 0x36
 800aea2:	e015      	b.n	800aed0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aea4:	f7fd fcf2 	bl	800888c <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d803      	bhi.n	800aebc <HAL_SPI_Transmit+0x168>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d102      	bne.n	800aec2 <HAL_SPI_Transmit+0x16e>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800aece:	e07b      	b.n	800afc8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1ca      	bne.n	800ae70 <HAL_SPI_Transmit+0x11c>
 800aeda:	e050      	b.n	800af7e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_SPI_Transmit+0x196>
 800aee4:	8afb      	ldrh	r3, [r7, #22]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d144      	bne.n	800af74 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	330c      	adds	r3, #12
 800aef4:	7812      	ldrb	r2, [r2, #0]
 800aef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af06:	b29b      	uxth	r3, r3
 800af08:	3b01      	subs	r3, #1
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800af10:	e030      	b.n	800af74 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d113      	bne.n	800af48 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	330c      	adds	r3, #12
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	86da      	strh	r2, [r3, #54]	; 0x36
 800af46:	e015      	b.n	800af74 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af48:	f7fd fca0 	bl	800888c <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d803      	bhi.n	800af60 <HAL_SPI_Transmit+0x20c>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5e:	d102      	bne.n	800af66 <HAL_SPI_Transmit+0x212>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d106      	bne.n	800af74 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800af72:	e029      	b.n	800afc8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1c9      	bne.n	800af12 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 fa6e 	bl	800b464 <SPI_EndRxTxTransaction>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af9c:	2300      	movs	r3, #0
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	613b      	str	r3, [r7, #16]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	613b      	str	r3, [r7, #16]
 800afb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	77fb      	strb	r3, [r7, #31]
 800afbe:	e003      	b.n	800afc8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800afd0:	7ffb      	ldrb	r3, [r7, #31]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3720      	adds	r7, #32
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b08c      	sub	sp, #48	; 0x30
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800afe8:	2301      	movs	r3, #1
 800afea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x26>
 800affc:	2302      	movs	r3, #2
 800affe:	e198      	b.n	800b332 <HAL_SPI_TransmitReceive+0x358>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b008:	f7fd fc40 	bl	800888c <HAL_GetTick>
 800b00c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b01e:	887b      	ldrh	r3, [r7, #2]
 800b020:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b026:	2b01      	cmp	r3, #1
 800b028:	d00f      	beq.n	800b04a <HAL_SPI_TransmitReceive+0x70>
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b030:	d107      	bne.n	800b042 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <HAL_SPI_TransmitReceive+0x68>
 800b03a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d003      	beq.n	800b04a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b042:	2302      	movs	r3, #2
 800b044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b048:	e16d      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d005      	beq.n	800b05c <HAL_SPI_TransmitReceive+0x82>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <HAL_SPI_TransmitReceive+0x82>
 800b056:	887b      	ldrh	r3, [r7, #2]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d103      	bne.n	800b064 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b062:	e160      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d003      	beq.n	800b078 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2205      	movs	r2, #5
 800b074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	887a      	ldrh	r2, [r7, #2]
 800b088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	887a      	ldrh	r2, [r7, #2]
 800b08e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	887a      	ldrh	r2, [r7, #2]
 800b09a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	887a      	ldrh	r2, [r7, #2]
 800b0a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b40      	cmp	r3, #64	; 0x40
 800b0ba:	d007      	beq.n	800b0cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0d4:	d17c      	bne.n	800b1d0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <HAL_SPI_TransmitReceive+0x10a>
 800b0de:	8b7b      	ldrh	r3, [r7, #26]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d16a      	bne.n	800b1ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e8:	881a      	ldrh	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	1c9a      	adds	r2, r3, #2
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	3b01      	subs	r3, #1
 800b102:	b29a      	uxth	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b108:	e057      	b.n	800b1ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b02      	cmp	r3, #2
 800b116:	d11b      	bne.n	800b150 <HAL_SPI_TransmitReceive+0x176>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d016      	beq.n	800b150 <HAL_SPI_TransmitReceive+0x176>
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	2b01      	cmp	r3, #1
 800b126:	d113      	bne.n	800b150 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12c:	881a      	ldrh	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b138:	1c9a      	adds	r2, r3, #2
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b142:	b29b      	uxth	r3, r3
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d119      	bne.n	800b192 <HAL_SPI_TransmitReceive+0x1b8>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b162:	b29b      	uxth	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d014      	beq.n	800b192 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	b292      	uxth	r2, r2
 800b174:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17a:	1c9a      	adds	r2, r3, #2
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b184:	b29b      	uxth	r3, r3
 800b186:	3b01      	subs	r3, #1
 800b188:	b29a      	uxth	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b18e:	2301      	movs	r3, #1
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b192:	f7fd fb7b 	bl	800888c <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d80b      	bhi.n	800b1ba <HAL_SPI_TransmitReceive+0x1e0>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d007      	beq.n	800b1ba <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b1b8:	e0b5      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1a2      	bne.n	800b10a <HAL_SPI_TransmitReceive+0x130>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d19d      	bne.n	800b10a <HAL_SPI_TransmitReceive+0x130>
 800b1ce:	e080      	b.n	800b2d2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <HAL_SPI_TransmitReceive+0x204>
 800b1d8:	8b7b      	ldrh	r3, [r7, #26]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d16f      	bne.n	800b2be <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	330c      	adds	r3, #12
 800b1e8:	7812      	ldrb	r2, [r2, #0]
 800b1ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b204:	e05b      	b.n	800b2be <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b02      	cmp	r3, #2
 800b212:	d11c      	bne.n	800b24e <HAL_SPI_TransmitReceive+0x274>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b218:	b29b      	uxth	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d017      	beq.n	800b24e <HAL_SPI_TransmitReceive+0x274>
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d114      	bne.n	800b24e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	330c      	adds	r3, #12
 800b22e:	7812      	ldrb	r2, [r2, #0]
 800b230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d119      	bne.n	800b290 <HAL_SPI_TransmitReceive+0x2b6>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d014      	beq.n	800b290 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b28c:	2301      	movs	r3, #1
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b290:	f7fd fafc 	bl	800888c <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d803      	bhi.n	800b2a8 <HAL_SPI_TransmitReceive+0x2ce>
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d102      	bne.n	800b2ae <HAL_SPI_TransmitReceive+0x2d4>
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b2bc:	e033      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d19e      	bne.n	800b206 <HAL_SPI_TransmitReceive+0x22c>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d199      	bne.n	800b206 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 f8c4 	bl	800b464 <SPI_EndRxTxTransaction>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d006      	beq.n	800b2f0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b2ee:	e01a      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b31c:	e003      	b.n	800b326 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b32e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b332:	4618      	mov	r0, r3
 800b334:	3730      	adds	r7, #48	; 0x30
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b348:	b2db      	uxtb	r3, r3
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	bc80      	pop	{r7}
 800b352:	4770      	bx	lr

0800b354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b364:	f7fd fa92 	bl	800888c <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	1a9b      	subs	r3, r3, r2
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	4413      	add	r3, r2
 800b372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b374:	f7fd fa8a 	bl	800888c <HAL_GetTick>
 800b378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b37a:	4b39      	ldr	r3, [pc, #228]	; (800b460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	015b      	lsls	r3, r3, #5
 800b380:	0d1b      	lsrs	r3, r3, #20
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b38a:	e054      	b.n	800b436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d050      	beq.n	800b436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b394:	f7fd fa7a 	bl	800888c <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d902      	bls.n	800b3aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d13d      	bne.n	800b426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3c2:	d111      	bne.n	800b3e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3cc:	d004      	beq.n	800b3d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3d6:	d107      	bne.n	800b3e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3f0:	d10f      	bne.n	800b412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e017      	b.n	800b456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	3b01      	subs	r3, #1
 800b434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	4013      	ands	r3, r2
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	429a      	cmp	r2, r3
 800b444:	bf0c      	ite	eq
 800b446:	2301      	moveq	r3, #1
 800b448:	2300      	movne	r3, #0
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	461a      	mov	r2, r3
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	429a      	cmp	r2, r3
 800b452:	d19b      	bne.n	800b38c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000030 	.word	0x20000030

0800b464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2200      	movs	r2, #0
 800b478:	2180      	movs	r1, #128	; 0x80
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7ff ff6a 	bl	800b354 <SPI_WaitFlagStateUntilTimeout>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	f043 0220 	orr.w	r2, r3, #32
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b492:	2303      	movs	r3, #3
 800b494:	e000      	b.n	800b498 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e041      	b.n	800b536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fd f89e 	bl	8008608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	f000 fa74 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
	...

0800b540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b01      	cmp	r3, #1
 800b552:	d001      	beq.n	800b558 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e032      	b.n	800b5be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a18      	ldr	r2, [pc, #96]	; (800b5c8 <HAL_TIM_Base_Start+0x88>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00e      	beq.n	800b588 <HAL_TIM_Base_Start+0x48>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b572:	d009      	beq.n	800b588 <HAL_TIM_Base_Start+0x48>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a14      	ldr	r2, [pc, #80]	; (800b5cc <HAL_TIM_Base_Start+0x8c>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_TIM_Base_Start+0x48>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a13      	ldr	r2, [pc, #76]	; (800b5d0 <HAL_TIM_Base_Start+0x90>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d111      	bne.n	800b5ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b06      	cmp	r3, #6
 800b598:	d010      	beq.n	800b5bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f042 0201 	orr.w	r2, r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5aa:	e007      	b.n	800b5bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr
 800b5c8:	40012c00 	.word	0x40012c00
 800b5cc:	40000400 	.word	0x40000400
 800b5d0:	40000800 	.word	0x40000800

0800b5d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f003 0302 	and.w	r3, r3, #2
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d122      	bne.n	800b630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d11b      	bne.n	800b630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f06f 0202 	mvn.w	r2, #2
 800b600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f9bd 	bl	800b996 <HAL_TIM_IC_CaptureCallback>
 800b61c:	e005      	b.n	800b62a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9b0 	bl	800b984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f9bf 	bl	800b9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	f003 0304 	and.w	r3, r3, #4
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d122      	bne.n	800b684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d11b      	bne.n	800b684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f06f 0204 	mvn.w	r2, #4
 800b654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f993 	bl	800b996 <HAL_TIM_IC_CaptureCallback>
 800b670:	e005      	b.n	800b67e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f986 	bl	800b984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f995 	bl	800b9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0308 	and.w	r3, r3, #8
 800b68e:	2b08      	cmp	r3, #8
 800b690:	d122      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b08      	cmp	r3, #8
 800b69e:	d11b      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f06f 0208 	mvn.w	r2, #8
 800b6a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f969 	bl	800b996 <HAL_TIM_IC_CaptureCallback>
 800b6c4:	e005      	b.n	800b6d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f95c 	bl	800b984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f96b 	bl	800b9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0310 	and.w	r3, r3, #16
 800b6e2:	2b10      	cmp	r3, #16
 800b6e4:	d122      	bne.n	800b72c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f003 0310 	and.w	r3, r3, #16
 800b6f0:	2b10      	cmp	r3, #16
 800b6f2:	d11b      	bne.n	800b72c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0210 	mvn.w	r2, #16
 800b6fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2208      	movs	r2, #8
 800b702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f93f 	bl	800b996 <HAL_TIM_IC_CaptureCallback>
 800b718:	e005      	b.n	800b726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f932 	bl	800b984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f941 	bl	800b9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b01      	cmp	r3, #1
 800b738:	d10e      	bne.n	800b758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b01      	cmp	r3, #1
 800b746:	d107      	bne.n	800b758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0201 	mvn.w	r2, #1
 800b750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f90d 	bl	800b972 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d10e      	bne.n	800b784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b770:	2b80      	cmp	r3, #128	; 0x80
 800b772:	d107      	bne.n	800b784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b77c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa83 	bl	800bc8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78e:	2b40      	cmp	r3, #64	; 0x40
 800b790:	d10e      	bne.n	800b7b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	d107      	bne.n	800b7b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f905 	bl	800b9ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d10e      	bne.n	800b7dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f003 0320 	and.w	r3, r3, #32
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	d107      	bne.n	800b7dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f06f 0220 	mvn.w	r2, #32
 800b7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fa4e 	bl	800bc78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIM_ConfigClockSource+0x1c>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e0b4      	b.n	800b96a <HAL_TIM_ConfigClockSource+0x186>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b81e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b838:	d03e      	beq.n	800b8b8 <HAL_TIM_ConfigClockSource+0xd4>
 800b83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b83e:	f200 8087 	bhi.w	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b846:	f000 8086 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x172>
 800b84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b84e:	d87f      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b850:	2b70      	cmp	r3, #112	; 0x70
 800b852:	d01a      	beq.n	800b88a <HAL_TIM_ConfigClockSource+0xa6>
 800b854:	2b70      	cmp	r3, #112	; 0x70
 800b856:	d87b      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b858:	2b60      	cmp	r3, #96	; 0x60
 800b85a:	d050      	beq.n	800b8fe <HAL_TIM_ConfigClockSource+0x11a>
 800b85c:	2b60      	cmp	r3, #96	; 0x60
 800b85e:	d877      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b860:	2b50      	cmp	r3, #80	; 0x50
 800b862:	d03c      	beq.n	800b8de <HAL_TIM_ConfigClockSource+0xfa>
 800b864:	2b50      	cmp	r3, #80	; 0x50
 800b866:	d873      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b868:	2b40      	cmp	r3, #64	; 0x40
 800b86a:	d058      	beq.n	800b91e <HAL_TIM_ConfigClockSource+0x13a>
 800b86c:	2b40      	cmp	r3, #64	; 0x40
 800b86e:	d86f      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b870:	2b30      	cmp	r3, #48	; 0x30
 800b872:	d064      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x15a>
 800b874:	2b30      	cmp	r3, #48	; 0x30
 800b876:	d86b      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b878:	2b20      	cmp	r3, #32
 800b87a:	d060      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x15a>
 800b87c:	2b20      	cmp	r3, #32
 800b87e:	d867      	bhi.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d05c      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x15a>
 800b884:	2b10      	cmp	r3, #16
 800b886:	d05a      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x15a>
 800b888:	e062      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b89a:	f000 f970 	bl	800bb7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	609a      	str	r2, [r3, #8]
      break;
 800b8b6:	e04f      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8c8:	f000 f959 	bl	800bb7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8da:	609a      	str	r2, [r3, #8]
      break;
 800b8dc:	e03c      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f000 f8d0 	bl	800ba90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2150      	movs	r1, #80	; 0x50
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f927 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b8fc:	e02c      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b90a:	461a      	mov	r2, r3
 800b90c:	f000 f8ee 	bl	800baec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2160      	movs	r1, #96	; 0x60
 800b916:	4618      	mov	r0, r3
 800b918:	f000 f917 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b91c:	e01c      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b92a:	461a      	mov	r2, r3
 800b92c:	f000 f8b0 	bl	800ba90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2140      	movs	r1, #64	; 0x40
 800b936:	4618      	mov	r0, r3
 800b938:	f000 f907 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b93c:	e00c      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4619      	mov	r1, r3
 800b948:	4610      	mov	r0, r2
 800b94a:	f000 f8fe 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b94e:	e003      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]
      break;
 800b954:	e000      	b.n	800b958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b968:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b972:	b480      	push	{r7}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b97a:	bf00      	nop
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	bc80      	pop	{r7}
 800b982:	4770      	bx	lr

0800b984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	bc80      	pop	{r7}
 800b994:	4770      	bx	lr

0800b996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bc80      	pop	{r7}
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bc80      	pop	{r7}
 800b9b8:	4770      	bx	lr

0800b9ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	b083      	sub	sp, #12
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9c2:	bf00      	nop
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bc80      	pop	{r7}
 800b9ca:	4770      	bx	lr

0800b9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a29      	ldr	r2, [pc, #164]	; (800ba84 <TIM_Base_SetConfig+0xb8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00b      	beq.n	800b9fc <TIM_Base_SetConfig+0x30>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ea:	d007      	beq.n	800b9fc <TIM_Base_SetConfig+0x30>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a26      	ldr	r2, [pc, #152]	; (800ba88 <TIM_Base_SetConfig+0xbc>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <TIM_Base_SetConfig+0x30>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a25      	ldr	r2, [pc, #148]	; (800ba8c <TIM_Base_SetConfig+0xc0>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d108      	bne.n	800ba0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1c      	ldr	r2, [pc, #112]	; (800ba84 <TIM_Base_SetConfig+0xb8>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00b      	beq.n	800ba2e <TIM_Base_SetConfig+0x62>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1c:	d007      	beq.n	800ba2e <TIM_Base_SetConfig+0x62>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a19      	ldr	r2, [pc, #100]	; (800ba88 <TIM_Base_SetConfig+0xbc>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d003      	beq.n	800ba2e <TIM_Base_SetConfig+0x62>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <TIM_Base_SetConfig+0xc0>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d108      	bne.n	800ba40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a07      	ldr	r2, [pc, #28]	; (800ba84 <TIM_Base_SetConfig+0xb8>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d103      	bne.n	800ba74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	691a      	ldr	r2, [r3, #16]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	615a      	str	r2, [r3, #20]
}
 800ba7a:	bf00      	nop
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc80      	pop	{r7}
 800ba82:	4770      	bx	lr
 800ba84:	40012c00 	.word	0x40012c00
 800ba88:	40000400 	.word	0x40000400
 800ba8c:	40000800 	.word	0x40000800

0800ba90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b087      	sub	sp, #28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	f023 0201 	bic.w	r2, r3, #1
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f023 030a 	bic.w	r3, r3, #10
 800bacc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	621a      	str	r2, [r3, #32]
}
 800bae2:	bf00      	nop
 800bae4:	371c      	adds	r7, #28
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bc80      	pop	{r7}
 800baea:	4770      	bx	lr

0800baec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a1b      	ldr	r3, [r3, #32]
 800bb02:	f023 0210 	bic.w	r2, r3, #16
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	031b      	lsls	r3, r3, #12
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	621a      	str	r2, [r3, #32]
}
 800bb40:	bf00      	nop
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bc80      	pop	{r7}
 800bb48:	4770      	bx	lr

0800bb4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b085      	sub	sp, #20
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	f043 0307 	orr.w	r3, r3, #7
 800bb6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	609a      	str	r2, [r3, #8]
}
 800bb74:	bf00      	nop
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bc80      	pop	{r7}
 800bb7c:	4770      	bx	lr

0800bb7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
 800bb8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	021a      	lsls	r2, r3, #8
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	431a      	orrs	r2, r3
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	609a      	str	r2, [r3, #8]
}
 800bbb2:	bf00      	nop
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr

0800bbbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e046      	b.n	800bc62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2202      	movs	r2, #2
 800bbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a16      	ldr	r2, [pc, #88]	; (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d00e      	beq.n	800bc36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc20:	d009      	beq.n	800bc36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a12      	ldr	r2, [pc, #72]	; (800bc70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d004      	beq.n	800bc36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a10      	ldr	r2, [pc, #64]	; (800bc74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d10c      	bne.n	800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bc80      	pop	{r7}
 800bc6a:	4770      	bx	lr
 800bc6c:	40012c00 	.word	0x40012c00
 800bc70:	40000400 	.word	0x40000400
 800bc74:	40000800 	.word	0x40000800

0800bc78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bc80      	pop	{r7}
 800bc88:	4770      	bx	lr

0800bc8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bc80      	pop	{r7}
 800bc9a:	4770      	bx	lr

0800bc9c <sniprintf>:
 800bc9c:	b40c      	push	{r2, r3}
 800bc9e:	b530      	push	{r4, r5, lr}
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <sniprintf+0x64>)
 800bca2:	1e0c      	subs	r4, r1, #0
 800bca4:	681d      	ldr	r5, [r3, #0]
 800bca6:	b09d      	sub	sp, #116	; 0x74
 800bca8:	da08      	bge.n	800bcbc <sniprintf+0x20>
 800bcaa:	238b      	movs	r3, #139	; 0x8b
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	b01d      	add	sp, #116	; 0x74
 800bcb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcb8:	b002      	add	sp, #8
 800bcba:	4770      	bx	lr
 800bcbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcc4:	bf0c      	ite	eq
 800bcc6:	4623      	moveq	r3, r4
 800bcc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcd4:	9002      	str	r0, [sp, #8]
 800bcd6:	9006      	str	r0, [sp, #24]
 800bcd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcdc:	4628      	mov	r0, r5
 800bcde:	ab21      	add	r3, sp, #132	; 0x84
 800bce0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bce2:	a902      	add	r1, sp, #8
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	f000 f9bd 	bl	800c064 <_svfiprintf_r>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	bfbc      	itt	lt
 800bcee:	238b      	movlt	r3, #139	; 0x8b
 800bcf0:	602b      	strlt	r3, [r5, #0]
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d0dd      	beq.n	800bcb2 <sniprintf+0x16>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	9b02      	ldr	r3, [sp, #8]
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	e7d9      	b.n	800bcb2 <sniprintf+0x16>
 800bcfe:	bf00      	nop
 800bd00:	20000088 	.word	0x20000088

0800bd04 <siprintf>:
 800bd04:	b40e      	push	{r1, r2, r3}
 800bd06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd0a:	b500      	push	{lr}
 800bd0c:	b09c      	sub	sp, #112	; 0x70
 800bd0e:	ab1d      	add	r3, sp, #116	; 0x74
 800bd10:	9002      	str	r0, [sp, #8]
 800bd12:	9006      	str	r0, [sp, #24]
 800bd14:	9107      	str	r1, [sp, #28]
 800bd16:	9104      	str	r1, [sp, #16]
 800bd18:	4808      	ldr	r0, [pc, #32]	; (800bd3c <siprintf+0x38>)
 800bd1a:	4909      	ldr	r1, [pc, #36]	; (800bd40 <siprintf+0x3c>)
 800bd1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd20:	9105      	str	r1, [sp, #20]
 800bd22:	6800      	ldr	r0, [r0, #0]
 800bd24:	a902      	add	r1, sp, #8
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	f000 f99c 	bl	800c064 <_svfiprintf_r>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	9b02      	ldr	r3, [sp, #8]
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	b01c      	add	sp, #112	; 0x70
 800bd34:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd38:	b003      	add	sp, #12
 800bd3a:	4770      	bx	lr
 800bd3c:	20000088 	.word	0x20000088
 800bd40:	ffff0208 	.word	0xffff0208

0800bd44 <memset>:
 800bd44:	4603      	mov	r3, r0
 800bd46:	4402      	add	r2, r0
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d100      	bne.n	800bd4e <memset+0xa>
 800bd4c:	4770      	bx	lr
 800bd4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd52:	e7f9      	b.n	800bd48 <memset+0x4>

0800bd54 <__errno>:
 800bd54:	4b01      	ldr	r3, [pc, #4]	; (800bd5c <__errno+0x8>)
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20000088 	.word	0x20000088

0800bd60 <__libc_init_array>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	2600      	movs	r6, #0
 800bd64:	4d0c      	ldr	r5, [pc, #48]	; (800bd98 <__libc_init_array+0x38>)
 800bd66:	4c0d      	ldr	r4, [pc, #52]	; (800bd9c <__libc_init_array+0x3c>)
 800bd68:	1b64      	subs	r4, r4, r5
 800bd6a:	10a4      	asrs	r4, r4, #2
 800bd6c:	42a6      	cmp	r6, r4
 800bd6e:	d109      	bne.n	800bd84 <__libc_init_array+0x24>
 800bd70:	f000 fc7a 	bl	800c668 <_init>
 800bd74:	2600      	movs	r6, #0
 800bd76:	4d0a      	ldr	r5, [pc, #40]	; (800bda0 <__libc_init_array+0x40>)
 800bd78:	4c0a      	ldr	r4, [pc, #40]	; (800bda4 <__libc_init_array+0x44>)
 800bd7a:	1b64      	subs	r4, r4, r5
 800bd7c:	10a4      	asrs	r4, r4, #2
 800bd7e:	42a6      	cmp	r6, r4
 800bd80:	d105      	bne.n	800bd8e <__libc_init_array+0x2e>
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
 800bd84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd88:	4798      	blx	r3
 800bd8a:	3601      	adds	r6, #1
 800bd8c:	e7ee      	b.n	800bd6c <__libc_init_array+0xc>
 800bd8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd92:	4798      	blx	r3
 800bd94:	3601      	adds	r6, #1
 800bd96:	e7f2      	b.n	800bd7e <__libc_init_array+0x1e>
 800bd98:	0800dd48 	.word	0x0800dd48
 800bd9c:	0800dd48 	.word	0x0800dd48
 800bda0:	0800dd48 	.word	0x0800dd48
 800bda4:	0800dd4c 	.word	0x0800dd4c

0800bda8 <__retarget_lock_acquire_recursive>:
 800bda8:	4770      	bx	lr

0800bdaa <__retarget_lock_release_recursive>:
 800bdaa:	4770      	bx	lr

0800bdac <memcpy>:
 800bdac:	440a      	add	r2, r1
 800bdae:	4291      	cmp	r1, r2
 800bdb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb4:	d100      	bne.n	800bdb8 <memcpy+0xc>
 800bdb6:	4770      	bx	lr
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdbe:	4291      	cmp	r1, r2
 800bdc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdc4:	d1f9      	bne.n	800bdba <memcpy+0xe>
 800bdc6:	bd10      	pop	{r4, pc}

0800bdc8 <_free_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4605      	mov	r5, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d040      	beq.n	800be52 <_free_r+0x8a>
 800bdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd4:	1f0c      	subs	r4, r1, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfb8      	it	lt
 800bdda:	18e4      	addlt	r4, r4, r3
 800bddc:	f000 f8dc 	bl	800bf98 <__malloc_lock>
 800bde0:	4a1c      	ldr	r2, [pc, #112]	; (800be54 <_free_r+0x8c>)
 800bde2:	6813      	ldr	r3, [r2, #0]
 800bde4:	b933      	cbnz	r3, 800bdf4 <_free_r+0x2c>
 800bde6:	6063      	str	r3, [r4, #4]
 800bde8:	6014      	str	r4, [r2, #0]
 800bdea:	4628      	mov	r0, r5
 800bdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf0:	f000 b8d8 	b.w	800bfa4 <__malloc_unlock>
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	d908      	bls.n	800be0a <_free_r+0x42>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	1821      	adds	r1, r4, r0
 800bdfc:	428b      	cmp	r3, r1
 800bdfe:	bf01      	itttt	eq
 800be00:	6819      	ldreq	r1, [r3, #0]
 800be02:	685b      	ldreq	r3, [r3, #4]
 800be04:	1809      	addeq	r1, r1, r0
 800be06:	6021      	streq	r1, [r4, #0]
 800be08:	e7ed      	b.n	800bde6 <_free_r+0x1e>
 800be0a:	461a      	mov	r2, r3
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	b10b      	cbz	r3, 800be14 <_free_r+0x4c>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d9fa      	bls.n	800be0a <_free_r+0x42>
 800be14:	6811      	ldr	r1, [r2, #0]
 800be16:	1850      	adds	r0, r2, r1
 800be18:	42a0      	cmp	r0, r4
 800be1a:	d10b      	bne.n	800be34 <_free_r+0x6c>
 800be1c:	6820      	ldr	r0, [r4, #0]
 800be1e:	4401      	add	r1, r0
 800be20:	1850      	adds	r0, r2, r1
 800be22:	4283      	cmp	r3, r0
 800be24:	6011      	str	r1, [r2, #0]
 800be26:	d1e0      	bne.n	800bdea <_free_r+0x22>
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4408      	add	r0, r1
 800be2e:	6010      	str	r0, [r2, #0]
 800be30:	6053      	str	r3, [r2, #4]
 800be32:	e7da      	b.n	800bdea <_free_r+0x22>
 800be34:	d902      	bls.n	800be3c <_free_r+0x74>
 800be36:	230c      	movs	r3, #12
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	e7d6      	b.n	800bdea <_free_r+0x22>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	1821      	adds	r1, r4, r0
 800be40:	428b      	cmp	r3, r1
 800be42:	bf01      	itttt	eq
 800be44:	6819      	ldreq	r1, [r3, #0]
 800be46:	685b      	ldreq	r3, [r3, #4]
 800be48:	1809      	addeq	r1, r1, r0
 800be4a:	6021      	streq	r1, [r4, #0]
 800be4c:	6063      	str	r3, [r4, #4]
 800be4e:	6054      	str	r4, [r2, #4]
 800be50:	e7cb      	b.n	800bdea <_free_r+0x22>
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	200009d8 	.word	0x200009d8

0800be58 <sbrk_aligned>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	4e0e      	ldr	r6, [pc, #56]	; (800be94 <sbrk_aligned+0x3c>)
 800be5c:	460c      	mov	r4, r1
 800be5e:	6831      	ldr	r1, [r6, #0]
 800be60:	4605      	mov	r5, r0
 800be62:	b911      	cbnz	r1, 800be6a <sbrk_aligned+0x12>
 800be64:	f000 fbaa 	bl	800c5bc <_sbrk_r>
 800be68:	6030      	str	r0, [r6, #0]
 800be6a:	4621      	mov	r1, r4
 800be6c:	4628      	mov	r0, r5
 800be6e:	f000 fba5 	bl	800c5bc <_sbrk_r>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	d00a      	beq.n	800be8c <sbrk_aligned+0x34>
 800be76:	1cc4      	adds	r4, r0, #3
 800be78:	f024 0403 	bic.w	r4, r4, #3
 800be7c:	42a0      	cmp	r0, r4
 800be7e:	d007      	beq.n	800be90 <sbrk_aligned+0x38>
 800be80:	1a21      	subs	r1, r4, r0
 800be82:	4628      	mov	r0, r5
 800be84:	f000 fb9a 	bl	800c5bc <_sbrk_r>
 800be88:	3001      	adds	r0, #1
 800be8a:	d101      	bne.n	800be90 <sbrk_aligned+0x38>
 800be8c:	f04f 34ff 	mov.w	r4, #4294967295
 800be90:	4620      	mov	r0, r4
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	200009dc 	.word	0x200009dc

0800be98 <_malloc_r>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	1ccd      	adds	r5, r1, #3
 800be9e:	f025 0503 	bic.w	r5, r5, #3
 800bea2:	3508      	adds	r5, #8
 800bea4:	2d0c      	cmp	r5, #12
 800bea6:	bf38      	it	cc
 800bea8:	250c      	movcc	r5, #12
 800beaa:	2d00      	cmp	r5, #0
 800beac:	4607      	mov	r7, r0
 800beae:	db01      	blt.n	800beb4 <_malloc_r+0x1c>
 800beb0:	42a9      	cmp	r1, r5
 800beb2:	d905      	bls.n	800bec0 <_malloc_r+0x28>
 800beb4:	230c      	movs	r3, #12
 800beb6:	2600      	movs	r6, #0
 800beb8:	603b      	str	r3, [r7, #0]
 800beba:	4630      	mov	r0, r6
 800bebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf94 <_malloc_r+0xfc>
 800bec4:	f000 f868 	bl	800bf98 <__malloc_lock>
 800bec8:	f8d8 3000 	ldr.w	r3, [r8]
 800becc:	461c      	mov	r4, r3
 800bece:	bb5c      	cbnz	r4, 800bf28 <_malloc_r+0x90>
 800bed0:	4629      	mov	r1, r5
 800bed2:	4638      	mov	r0, r7
 800bed4:	f7ff ffc0 	bl	800be58 <sbrk_aligned>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	4604      	mov	r4, r0
 800bedc:	d155      	bne.n	800bf8a <_malloc_r+0xf2>
 800bede:	f8d8 4000 	ldr.w	r4, [r8]
 800bee2:	4626      	mov	r6, r4
 800bee4:	2e00      	cmp	r6, #0
 800bee6:	d145      	bne.n	800bf74 <_malloc_r+0xdc>
 800bee8:	2c00      	cmp	r4, #0
 800beea:	d048      	beq.n	800bf7e <_malloc_r+0xe6>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	4631      	mov	r1, r6
 800bef0:	4638      	mov	r0, r7
 800bef2:	eb04 0903 	add.w	r9, r4, r3
 800bef6:	f000 fb61 	bl	800c5bc <_sbrk_r>
 800befa:	4581      	cmp	r9, r0
 800befc:	d13f      	bne.n	800bf7e <_malloc_r+0xe6>
 800befe:	6821      	ldr	r1, [r4, #0]
 800bf00:	4638      	mov	r0, r7
 800bf02:	1a6d      	subs	r5, r5, r1
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7ff ffa7 	bl	800be58 <sbrk_aligned>
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d037      	beq.n	800bf7e <_malloc_r+0xe6>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	442b      	add	r3, r5
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	f8d8 3000 	ldr.w	r3, [r8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d038      	beq.n	800bf8e <_malloc_r+0xf6>
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	42a2      	cmp	r2, r4
 800bf20:	d12b      	bne.n	800bf7a <_malloc_r+0xe2>
 800bf22:	2200      	movs	r2, #0
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	e00f      	b.n	800bf48 <_malloc_r+0xb0>
 800bf28:	6822      	ldr	r2, [r4, #0]
 800bf2a:	1b52      	subs	r2, r2, r5
 800bf2c:	d41f      	bmi.n	800bf6e <_malloc_r+0xd6>
 800bf2e:	2a0b      	cmp	r2, #11
 800bf30:	d917      	bls.n	800bf62 <_malloc_r+0xca>
 800bf32:	1961      	adds	r1, r4, r5
 800bf34:	42a3      	cmp	r3, r4
 800bf36:	6025      	str	r5, [r4, #0]
 800bf38:	bf18      	it	ne
 800bf3a:	6059      	strne	r1, [r3, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	bf08      	it	eq
 800bf40:	f8c8 1000 	streq.w	r1, [r8]
 800bf44:	5162      	str	r2, [r4, r5]
 800bf46:	604b      	str	r3, [r1, #4]
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f104 060b 	add.w	r6, r4, #11
 800bf4e:	f000 f829 	bl	800bfa4 <__malloc_unlock>
 800bf52:	f026 0607 	bic.w	r6, r6, #7
 800bf56:	1d23      	adds	r3, r4, #4
 800bf58:	1af2      	subs	r2, r6, r3
 800bf5a:	d0ae      	beq.n	800beba <_malloc_r+0x22>
 800bf5c:	1b9b      	subs	r3, r3, r6
 800bf5e:	50a3      	str	r3, [r4, r2]
 800bf60:	e7ab      	b.n	800beba <_malloc_r+0x22>
 800bf62:	42a3      	cmp	r3, r4
 800bf64:	6862      	ldr	r2, [r4, #4]
 800bf66:	d1dd      	bne.n	800bf24 <_malloc_r+0x8c>
 800bf68:	f8c8 2000 	str.w	r2, [r8]
 800bf6c:	e7ec      	b.n	800bf48 <_malloc_r+0xb0>
 800bf6e:	4623      	mov	r3, r4
 800bf70:	6864      	ldr	r4, [r4, #4]
 800bf72:	e7ac      	b.n	800bece <_malloc_r+0x36>
 800bf74:	4634      	mov	r4, r6
 800bf76:	6876      	ldr	r6, [r6, #4]
 800bf78:	e7b4      	b.n	800bee4 <_malloc_r+0x4c>
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	e7cc      	b.n	800bf18 <_malloc_r+0x80>
 800bf7e:	230c      	movs	r3, #12
 800bf80:	4638      	mov	r0, r7
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	f000 f80e 	bl	800bfa4 <__malloc_unlock>
 800bf88:	e797      	b.n	800beba <_malloc_r+0x22>
 800bf8a:	6025      	str	r5, [r4, #0]
 800bf8c:	e7dc      	b.n	800bf48 <_malloc_r+0xb0>
 800bf8e:	605b      	str	r3, [r3, #4]
 800bf90:	deff      	udf	#255	; 0xff
 800bf92:	bf00      	nop
 800bf94:	200009d8 	.word	0x200009d8

0800bf98 <__malloc_lock>:
 800bf98:	4801      	ldr	r0, [pc, #4]	; (800bfa0 <__malloc_lock+0x8>)
 800bf9a:	f7ff bf05 	b.w	800bda8 <__retarget_lock_acquire_recursive>
 800bf9e:	bf00      	nop
 800bfa0:	200009d4 	.word	0x200009d4

0800bfa4 <__malloc_unlock>:
 800bfa4:	4801      	ldr	r0, [pc, #4]	; (800bfac <__malloc_unlock+0x8>)
 800bfa6:	f7ff bf00 	b.w	800bdaa <__retarget_lock_release_recursive>
 800bfaa:	bf00      	nop
 800bfac:	200009d4 	.word	0x200009d4

0800bfb0 <__ssputs_r>:
 800bfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb4:	461f      	mov	r7, r3
 800bfb6:	688e      	ldr	r6, [r1, #8]
 800bfb8:	4682      	mov	sl, r0
 800bfba:	42be      	cmp	r6, r7
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	4690      	mov	r8, r2
 800bfc0:	680b      	ldr	r3, [r1, #0]
 800bfc2:	d82c      	bhi.n	800c01e <__ssputs_r+0x6e>
 800bfc4:	898a      	ldrh	r2, [r1, #12]
 800bfc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfca:	d026      	beq.n	800c01a <__ssputs_r+0x6a>
 800bfcc:	6965      	ldr	r5, [r4, #20]
 800bfce:	6909      	ldr	r1, [r1, #16]
 800bfd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfd4:	eba3 0901 	sub.w	r9, r3, r1
 800bfd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfdc:	1c7b      	adds	r3, r7, #1
 800bfde:	444b      	add	r3, r9
 800bfe0:	106d      	asrs	r5, r5, #1
 800bfe2:	429d      	cmp	r5, r3
 800bfe4:	bf38      	it	cc
 800bfe6:	461d      	movcc	r5, r3
 800bfe8:	0553      	lsls	r3, r2, #21
 800bfea:	d527      	bpl.n	800c03c <__ssputs_r+0x8c>
 800bfec:	4629      	mov	r1, r5
 800bfee:	f7ff ff53 	bl	800be98 <_malloc_r>
 800bff2:	4606      	mov	r6, r0
 800bff4:	b360      	cbz	r0, 800c050 <__ssputs_r+0xa0>
 800bff6:	464a      	mov	r2, r9
 800bff8:	6921      	ldr	r1, [r4, #16]
 800bffa:	f7ff fed7 	bl	800bdac <memcpy>
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	6126      	str	r6, [r4, #16]
 800c00c:	444e      	add	r6, r9
 800c00e:	6026      	str	r6, [r4, #0]
 800c010:	463e      	mov	r6, r7
 800c012:	6165      	str	r5, [r4, #20]
 800c014:	eba5 0509 	sub.w	r5, r5, r9
 800c018:	60a5      	str	r5, [r4, #8]
 800c01a:	42be      	cmp	r6, r7
 800c01c:	d900      	bls.n	800c020 <__ssputs_r+0x70>
 800c01e:	463e      	mov	r6, r7
 800c020:	4632      	mov	r2, r6
 800c022:	4641      	mov	r1, r8
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	f000 faaf 	bl	800c588 <memmove>
 800c02a:	2000      	movs	r0, #0
 800c02c:	68a3      	ldr	r3, [r4, #8]
 800c02e:	1b9b      	subs	r3, r3, r6
 800c030:	60a3      	str	r3, [r4, #8]
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	4433      	add	r3, r6
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	462a      	mov	r2, r5
 800c03e:	f000 fadb 	bl	800c5f8 <_realloc_r>
 800c042:	4606      	mov	r6, r0
 800c044:	2800      	cmp	r0, #0
 800c046:	d1e0      	bne.n	800c00a <__ssputs_r+0x5a>
 800c048:	4650      	mov	r0, sl
 800c04a:	6921      	ldr	r1, [r4, #16]
 800c04c:	f7ff febc 	bl	800bdc8 <_free_r>
 800c050:	230c      	movs	r3, #12
 800c052:	f8ca 3000 	str.w	r3, [sl]
 800c056:	89a3      	ldrh	r3, [r4, #12]
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	e7e9      	b.n	800c038 <__ssputs_r+0x88>

0800c064 <_svfiprintf_r>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	4698      	mov	r8, r3
 800c06a:	898b      	ldrh	r3, [r1, #12]
 800c06c:	4607      	mov	r7, r0
 800c06e:	061b      	lsls	r3, r3, #24
 800c070:	460d      	mov	r5, r1
 800c072:	4614      	mov	r4, r2
 800c074:	b09d      	sub	sp, #116	; 0x74
 800c076:	d50e      	bpl.n	800c096 <_svfiprintf_r+0x32>
 800c078:	690b      	ldr	r3, [r1, #16]
 800c07a:	b963      	cbnz	r3, 800c096 <_svfiprintf_r+0x32>
 800c07c:	2140      	movs	r1, #64	; 0x40
 800c07e:	f7ff ff0b 	bl	800be98 <_malloc_r>
 800c082:	6028      	str	r0, [r5, #0]
 800c084:	6128      	str	r0, [r5, #16]
 800c086:	b920      	cbnz	r0, 800c092 <_svfiprintf_r+0x2e>
 800c088:	230c      	movs	r3, #12
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	f04f 30ff 	mov.w	r0, #4294967295
 800c090:	e0d0      	b.n	800c234 <_svfiprintf_r+0x1d0>
 800c092:	2340      	movs	r3, #64	; 0x40
 800c094:	616b      	str	r3, [r5, #20]
 800c096:	2300      	movs	r3, #0
 800c098:	9309      	str	r3, [sp, #36]	; 0x24
 800c09a:	2320      	movs	r3, #32
 800c09c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0a0:	2330      	movs	r3, #48	; 0x30
 800c0a2:	f04f 0901 	mov.w	r9, #1
 800c0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c24c <_svfiprintf_r+0x1e8>
 800c0ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0b2:	4623      	mov	r3, r4
 800c0b4:	469a      	mov	sl, r3
 800c0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ba:	b10a      	cbz	r2, 800c0c0 <_svfiprintf_r+0x5c>
 800c0bc:	2a25      	cmp	r2, #37	; 0x25
 800c0be:	d1f9      	bne.n	800c0b4 <_svfiprintf_r+0x50>
 800c0c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c4:	d00b      	beq.n	800c0de <_svfiprintf_r+0x7a>
 800c0c6:	465b      	mov	r3, fp
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f7ff ff6f 	bl	800bfb0 <__ssputs_r>
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f000 80a9 	beq.w	800c22a <_svfiprintf_r+0x1c6>
 800c0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0da:	445a      	add	r2, fp
 800c0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0de:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 80a1 	beq.w	800c22a <_svfiprintf_r+0x1c6>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0f2:	f10a 0a01 	add.w	sl, sl, #1
 800c0f6:	9304      	str	r3, [sp, #16]
 800c0f8:	9307      	str	r3, [sp, #28]
 800c0fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c100:	4654      	mov	r4, sl
 800c102:	2205      	movs	r2, #5
 800c104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c108:	4850      	ldr	r0, [pc, #320]	; (800c24c <_svfiprintf_r+0x1e8>)
 800c10a:	f000 fa67 	bl	800c5dc <memchr>
 800c10e:	9a04      	ldr	r2, [sp, #16]
 800c110:	b9d8      	cbnz	r0, 800c14a <_svfiprintf_r+0xe6>
 800c112:	06d0      	lsls	r0, r2, #27
 800c114:	bf44      	itt	mi
 800c116:	2320      	movmi	r3, #32
 800c118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c11c:	0711      	lsls	r1, r2, #28
 800c11e:	bf44      	itt	mi
 800c120:	232b      	movmi	r3, #43	; 0x2b
 800c122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c126:	f89a 3000 	ldrb.w	r3, [sl]
 800c12a:	2b2a      	cmp	r3, #42	; 0x2a
 800c12c:	d015      	beq.n	800c15a <_svfiprintf_r+0xf6>
 800c12e:	4654      	mov	r4, sl
 800c130:	2000      	movs	r0, #0
 800c132:	f04f 0c0a 	mov.w	ip, #10
 800c136:	9a07      	ldr	r2, [sp, #28]
 800c138:	4621      	mov	r1, r4
 800c13a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c13e:	3b30      	subs	r3, #48	; 0x30
 800c140:	2b09      	cmp	r3, #9
 800c142:	d94d      	bls.n	800c1e0 <_svfiprintf_r+0x17c>
 800c144:	b1b0      	cbz	r0, 800c174 <_svfiprintf_r+0x110>
 800c146:	9207      	str	r2, [sp, #28]
 800c148:	e014      	b.n	800c174 <_svfiprintf_r+0x110>
 800c14a:	eba0 0308 	sub.w	r3, r0, r8
 800c14e:	fa09 f303 	lsl.w	r3, r9, r3
 800c152:	4313      	orrs	r3, r2
 800c154:	46a2      	mov	sl, r4
 800c156:	9304      	str	r3, [sp, #16]
 800c158:	e7d2      	b.n	800c100 <_svfiprintf_r+0x9c>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	1d19      	adds	r1, r3, #4
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	9103      	str	r1, [sp, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	bfbb      	ittet	lt
 800c166:	425b      	neglt	r3, r3
 800c168:	f042 0202 	orrlt.w	r2, r2, #2
 800c16c:	9307      	strge	r3, [sp, #28]
 800c16e:	9307      	strlt	r3, [sp, #28]
 800c170:	bfb8      	it	lt
 800c172:	9204      	strlt	r2, [sp, #16]
 800c174:	7823      	ldrb	r3, [r4, #0]
 800c176:	2b2e      	cmp	r3, #46	; 0x2e
 800c178:	d10c      	bne.n	800c194 <_svfiprintf_r+0x130>
 800c17a:	7863      	ldrb	r3, [r4, #1]
 800c17c:	2b2a      	cmp	r3, #42	; 0x2a
 800c17e:	d134      	bne.n	800c1ea <_svfiprintf_r+0x186>
 800c180:	9b03      	ldr	r3, [sp, #12]
 800c182:	3402      	adds	r4, #2
 800c184:	1d1a      	adds	r2, r3, #4
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	9203      	str	r2, [sp, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfb8      	it	lt
 800c18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c192:	9305      	str	r3, [sp, #20]
 800c194:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c250 <_svfiprintf_r+0x1ec>
 800c198:	2203      	movs	r2, #3
 800c19a:	4650      	mov	r0, sl
 800c19c:	7821      	ldrb	r1, [r4, #0]
 800c19e:	f000 fa1d 	bl	800c5dc <memchr>
 800c1a2:	b138      	cbz	r0, 800c1b4 <_svfiprintf_r+0x150>
 800c1a4:	2240      	movs	r2, #64	; 0x40
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	eba0 000a 	sub.w	r0, r0, sl
 800c1ac:	4082      	lsls	r2, r0
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	3401      	adds	r4, #1
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b8:	2206      	movs	r2, #6
 800c1ba:	4826      	ldr	r0, [pc, #152]	; (800c254 <_svfiprintf_r+0x1f0>)
 800c1bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1c0:	f000 fa0c 	bl	800c5dc <memchr>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d038      	beq.n	800c23a <_svfiprintf_r+0x1d6>
 800c1c8:	4b23      	ldr	r3, [pc, #140]	; (800c258 <_svfiprintf_r+0x1f4>)
 800c1ca:	bb1b      	cbnz	r3, 800c214 <_svfiprintf_r+0x1b0>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	3307      	adds	r3, #7
 800c1d0:	f023 0307 	bic.w	r3, r3, #7
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	9303      	str	r3, [sp, #12]
 800c1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1da:	4433      	add	r3, r6
 800c1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1de:	e768      	b.n	800c0b2 <_svfiprintf_r+0x4e>
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	2001      	movs	r0, #1
 800c1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1e8:	e7a6      	b.n	800c138 <_svfiprintf_r+0xd4>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f04f 0c0a 	mov.w	ip, #10
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	3401      	adds	r4, #1
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1fc:	3a30      	subs	r2, #48	; 0x30
 800c1fe:	2a09      	cmp	r2, #9
 800c200:	d903      	bls.n	800c20a <_svfiprintf_r+0x1a6>
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0c6      	beq.n	800c194 <_svfiprintf_r+0x130>
 800c206:	9105      	str	r1, [sp, #20]
 800c208:	e7c4      	b.n	800c194 <_svfiprintf_r+0x130>
 800c20a:	4604      	mov	r4, r0
 800c20c:	2301      	movs	r3, #1
 800c20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c212:	e7f0      	b.n	800c1f6 <_svfiprintf_r+0x192>
 800c214:	ab03      	add	r3, sp, #12
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	462a      	mov	r2, r5
 800c21a:	4638      	mov	r0, r7
 800c21c:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <_svfiprintf_r+0x1f8>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	f3af 8000 	nop.w
 800c224:	1c42      	adds	r2, r0, #1
 800c226:	4606      	mov	r6, r0
 800c228:	d1d6      	bne.n	800c1d8 <_svfiprintf_r+0x174>
 800c22a:	89ab      	ldrh	r3, [r5, #12]
 800c22c:	065b      	lsls	r3, r3, #25
 800c22e:	f53f af2d 	bmi.w	800c08c <_svfiprintf_r+0x28>
 800c232:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c234:	b01d      	add	sp, #116	; 0x74
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	ab03      	add	r3, sp, #12
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	462a      	mov	r2, r5
 800c240:	4638      	mov	r0, r7
 800c242:	4b06      	ldr	r3, [pc, #24]	; (800c25c <_svfiprintf_r+0x1f8>)
 800c244:	a904      	add	r1, sp, #16
 800c246:	f000 f87d 	bl	800c344 <_printf_i>
 800c24a:	e7eb      	b.n	800c224 <_svfiprintf_r+0x1c0>
 800c24c:	0800dd0a 	.word	0x0800dd0a
 800c250:	0800dd10 	.word	0x0800dd10
 800c254:	0800dd14 	.word	0x0800dd14
 800c258:	00000000 	.word	0x00000000
 800c25c:	0800bfb1 	.word	0x0800bfb1

0800c260 <_printf_common>:
 800c260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c264:	4616      	mov	r6, r2
 800c266:	4699      	mov	r9, r3
 800c268:	688a      	ldr	r2, [r1, #8]
 800c26a:	690b      	ldr	r3, [r1, #16]
 800c26c:	4607      	mov	r7, r0
 800c26e:	4293      	cmp	r3, r2
 800c270:	bfb8      	it	lt
 800c272:	4613      	movlt	r3, r2
 800c274:	6033      	str	r3, [r6, #0]
 800c276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c27a:	460c      	mov	r4, r1
 800c27c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c280:	b10a      	cbz	r2, 800c286 <_printf_common+0x26>
 800c282:	3301      	adds	r3, #1
 800c284:	6033      	str	r3, [r6, #0]
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	0699      	lsls	r1, r3, #26
 800c28a:	bf42      	ittt	mi
 800c28c:	6833      	ldrmi	r3, [r6, #0]
 800c28e:	3302      	addmi	r3, #2
 800c290:	6033      	strmi	r3, [r6, #0]
 800c292:	6825      	ldr	r5, [r4, #0]
 800c294:	f015 0506 	ands.w	r5, r5, #6
 800c298:	d106      	bne.n	800c2a8 <_printf_common+0x48>
 800c29a:	f104 0a19 	add.w	sl, r4, #25
 800c29e:	68e3      	ldr	r3, [r4, #12]
 800c2a0:	6832      	ldr	r2, [r6, #0]
 800c2a2:	1a9b      	subs	r3, r3, r2
 800c2a4:	42ab      	cmp	r3, r5
 800c2a6:	dc2b      	bgt.n	800c300 <_printf_common+0xa0>
 800c2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2ac:	1e13      	subs	r3, r2, #0
 800c2ae:	6822      	ldr	r2, [r4, #0]
 800c2b0:	bf18      	it	ne
 800c2b2:	2301      	movne	r3, #1
 800c2b4:	0692      	lsls	r2, r2, #26
 800c2b6:	d430      	bmi.n	800c31a <_printf_common+0xba>
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2c0:	47c0      	blx	r8
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	d023      	beq.n	800c30e <_printf_common+0xae>
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	f003 0306 	and.w	r3, r3, #6
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	bf14      	ite	ne
 800c2d2:	2500      	movne	r5, #0
 800c2d4:	6833      	ldreq	r3, [r6, #0]
 800c2d6:	f04f 0600 	mov.w	r6, #0
 800c2da:	bf08      	it	eq
 800c2dc:	68e5      	ldreq	r5, [r4, #12]
 800c2de:	f104 041a 	add.w	r4, r4, #26
 800c2e2:	bf08      	it	eq
 800c2e4:	1aed      	subeq	r5, r5, r3
 800c2e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c2ea:	bf08      	it	eq
 800c2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	bfc4      	itt	gt
 800c2f4:	1a9b      	subgt	r3, r3, r2
 800c2f6:	18ed      	addgt	r5, r5, r3
 800c2f8:	42b5      	cmp	r5, r6
 800c2fa:	d11a      	bne.n	800c332 <_printf_common+0xd2>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e008      	b.n	800c312 <_printf_common+0xb2>
 800c300:	2301      	movs	r3, #1
 800c302:	4652      	mov	r2, sl
 800c304:	4649      	mov	r1, r9
 800c306:	4638      	mov	r0, r7
 800c308:	47c0      	blx	r8
 800c30a:	3001      	adds	r0, #1
 800c30c:	d103      	bne.n	800c316 <_printf_common+0xb6>
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
 800c312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c316:	3501      	adds	r5, #1
 800c318:	e7c1      	b.n	800c29e <_printf_common+0x3e>
 800c31a:	2030      	movs	r0, #48	; 0x30
 800c31c:	18e1      	adds	r1, r4, r3
 800c31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c328:	4422      	add	r2, r4
 800c32a:	3302      	adds	r3, #2
 800c32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c330:	e7c2      	b.n	800c2b8 <_printf_common+0x58>
 800c332:	2301      	movs	r3, #1
 800c334:	4622      	mov	r2, r4
 800c336:	4649      	mov	r1, r9
 800c338:	4638      	mov	r0, r7
 800c33a:	47c0      	blx	r8
 800c33c:	3001      	adds	r0, #1
 800c33e:	d0e6      	beq.n	800c30e <_printf_common+0xae>
 800c340:	3601      	adds	r6, #1
 800c342:	e7d9      	b.n	800c2f8 <_printf_common+0x98>

0800c344 <_printf_i>:
 800c344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c348:	7e0f      	ldrb	r7, [r1, #24]
 800c34a:	4691      	mov	r9, r2
 800c34c:	2f78      	cmp	r7, #120	; 0x78
 800c34e:	4680      	mov	r8, r0
 800c350:	460c      	mov	r4, r1
 800c352:	469a      	mov	sl, r3
 800c354:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c35a:	d807      	bhi.n	800c36c <_printf_i+0x28>
 800c35c:	2f62      	cmp	r7, #98	; 0x62
 800c35e:	d80a      	bhi.n	800c376 <_printf_i+0x32>
 800c360:	2f00      	cmp	r7, #0
 800c362:	f000 80d5 	beq.w	800c510 <_printf_i+0x1cc>
 800c366:	2f58      	cmp	r7, #88	; 0x58
 800c368:	f000 80c1 	beq.w	800c4ee <_printf_i+0x1aa>
 800c36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c374:	e03a      	b.n	800c3ec <_printf_i+0xa8>
 800c376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c37a:	2b15      	cmp	r3, #21
 800c37c:	d8f6      	bhi.n	800c36c <_printf_i+0x28>
 800c37e:	a101      	add	r1, pc, #4	; (adr r1, 800c384 <_printf_i+0x40>)
 800c380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c384:	0800c3dd 	.word	0x0800c3dd
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c36d 	.word	0x0800c36d
 800c390:	0800c36d 	.word	0x0800c36d
 800c394:	0800c36d 	.word	0x0800c36d
 800c398:	0800c36d 	.word	0x0800c36d
 800c39c:	0800c3f1 	.word	0x0800c3f1
 800c3a0:	0800c36d 	.word	0x0800c36d
 800c3a4:	0800c36d 	.word	0x0800c36d
 800c3a8:	0800c36d 	.word	0x0800c36d
 800c3ac:	0800c36d 	.word	0x0800c36d
 800c3b0:	0800c4f7 	.word	0x0800c4f7
 800c3b4:	0800c41d 	.word	0x0800c41d
 800c3b8:	0800c4b1 	.word	0x0800c4b1
 800c3bc:	0800c36d 	.word	0x0800c36d
 800c3c0:	0800c36d 	.word	0x0800c36d
 800c3c4:	0800c519 	.word	0x0800c519
 800c3c8:	0800c36d 	.word	0x0800c36d
 800c3cc:	0800c41d 	.word	0x0800c41d
 800c3d0:	0800c36d 	.word	0x0800c36d
 800c3d4:	0800c36d 	.word	0x0800c36d
 800c3d8:	0800c4b9 	.word	0x0800c4b9
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	602a      	str	r2, [r5, #0]
 800c3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e0a0      	b.n	800c532 <_printf_i+0x1ee>
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	0607      	lsls	r7, r0, #24
 800c3f6:	f103 0104 	add.w	r1, r3, #4
 800c3fa:	6029      	str	r1, [r5, #0]
 800c3fc:	d501      	bpl.n	800c402 <_printf_i+0xbe>
 800c3fe:	681e      	ldr	r6, [r3, #0]
 800c400:	e003      	b.n	800c40a <_printf_i+0xc6>
 800c402:	0646      	lsls	r6, r0, #25
 800c404:	d5fb      	bpl.n	800c3fe <_printf_i+0xba>
 800c406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c40a:	2e00      	cmp	r6, #0
 800c40c:	da03      	bge.n	800c416 <_printf_i+0xd2>
 800c40e:	232d      	movs	r3, #45	; 0x2d
 800c410:	4276      	negs	r6, r6
 800c412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c416:	230a      	movs	r3, #10
 800c418:	4859      	ldr	r0, [pc, #356]	; (800c580 <_printf_i+0x23c>)
 800c41a:	e012      	b.n	800c442 <_printf_i+0xfe>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	6820      	ldr	r0, [r4, #0]
 800c420:	1d19      	adds	r1, r3, #4
 800c422:	6029      	str	r1, [r5, #0]
 800c424:	0605      	lsls	r5, r0, #24
 800c426:	d501      	bpl.n	800c42c <_printf_i+0xe8>
 800c428:	681e      	ldr	r6, [r3, #0]
 800c42a:	e002      	b.n	800c432 <_printf_i+0xee>
 800c42c:	0641      	lsls	r1, r0, #25
 800c42e:	d5fb      	bpl.n	800c428 <_printf_i+0xe4>
 800c430:	881e      	ldrh	r6, [r3, #0]
 800c432:	2f6f      	cmp	r7, #111	; 0x6f
 800c434:	bf0c      	ite	eq
 800c436:	2308      	moveq	r3, #8
 800c438:	230a      	movne	r3, #10
 800c43a:	4851      	ldr	r0, [pc, #324]	; (800c580 <_printf_i+0x23c>)
 800c43c:	2100      	movs	r1, #0
 800c43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c442:	6865      	ldr	r5, [r4, #4]
 800c444:	2d00      	cmp	r5, #0
 800c446:	bfa8      	it	ge
 800c448:	6821      	ldrge	r1, [r4, #0]
 800c44a:	60a5      	str	r5, [r4, #8]
 800c44c:	bfa4      	itt	ge
 800c44e:	f021 0104 	bicge.w	r1, r1, #4
 800c452:	6021      	strge	r1, [r4, #0]
 800c454:	b90e      	cbnz	r6, 800c45a <_printf_i+0x116>
 800c456:	2d00      	cmp	r5, #0
 800c458:	d04b      	beq.n	800c4f2 <_printf_i+0x1ae>
 800c45a:	4615      	mov	r5, r2
 800c45c:	fbb6 f1f3 	udiv	r1, r6, r3
 800c460:	fb03 6711 	mls	r7, r3, r1, r6
 800c464:	5dc7      	ldrb	r7, [r0, r7]
 800c466:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c46a:	4637      	mov	r7, r6
 800c46c:	42bb      	cmp	r3, r7
 800c46e:	460e      	mov	r6, r1
 800c470:	d9f4      	bls.n	800c45c <_printf_i+0x118>
 800c472:	2b08      	cmp	r3, #8
 800c474:	d10b      	bne.n	800c48e <_printf_i+0x14a>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	07de      	lsls	r6, r3, #31
 800c47a:	d508      	bpl.n	800c48e <_printf_i+0x14a>
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	6861      	ldr	r1, [r4, #4]
 800c480:	4299      	cmp	r1, r3
 800c482:	bfde      	ittt	le
 800c484:	2330      	movle	r3, #48	; 0x30
 800c486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c48a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c48e:	1b52      	subs	r2, r2, r5
 800c490:	6122      	str	r2, [r4, #16]
 800c492:	464b      	mov	r3, r9
 800c494:	4621      	mov	r1, r4
 800c496:	4640      	mov	r0, r8
 800c498:	f8cd a000 	str.w	sl, [sp]
 800c49c:	aa03      	add	r2, sp, #12
 800c49e:	f7ff fedf 	bl	800c260 <_printf_common>
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	d14a      	bne.n	800c53c <_printf_i+0x1f8>
 800c4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4aa:	b004      	add	sp, #16
 800c4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	f043 0320 	orr.w	r3, r3, #32
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	2778      	movs	r7, #120	; 0x78
 800c4ba:	4832      	ldr	r0, [pc, #200]	; (800c584 <_printf_i+0x240>)
 800c4bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	6829      	ldr	r1, [r5, #0]
 800c4c4:	061f      	lsls	r7, r3, #24
 800c4c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4ca:	d402      	bmi.n	800c4d2 <_printf_i+0x18e>
 800c4cc:	065f      	lsls	r7, r3, #25
 800c4ce:	bf48      	it	mi
 800c4d0:	b2b6      	uxthmi	r6, r6
 800c4d2:	07df      	lsls	r7, r3, #31
 800c4d4:	bf48      	it	mi
 800c4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4da:	6029      	str	r1, [r5, #0]
 800c4dc:	bf48      	it	mi
 800c4de:	6023      	strmi	r3, [r4, #0]
 800c4e0:	b91e      	cbnz	r6, 800c4ea <_printf_i+0x1a6>
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	f023 0320 	bic.w	r3, r3, #32
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	2310      	movs	r3, #16
 800c4ec:	e7a6      	b.n	800c43c <_printf_i+0xf8>
 800c4ee:	4824      	ldr	r0, [pc, #144]	; (800c580 <_printf_i+0x23c>)
 800c4f0:	e7e4      	b.n	800c4bc <_printf_i+0x178>
 800c4f2:	4615      	mov	r5, r2
 800c4f4:	e7bd      	b.n	800c472 <_printf_i+0x12e>
 800c4f6:	682b      	ldr	r3, [r5, #0]
 800c4f8:	6826      	ldr	r6, [r4, #0]
 800c4fa:	1d18      	adds	r0, r3, #4
 800c4fc:	6961      	ldr	r1, [r4, #20]
 800c4fe:	6028      	str	r0, [r5, #0]
 800c500:	0635      	lsls	r5, r6, #24
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	d501      	bpl.n	800c50a <_printf_i+0x1c6>
 800c506:	6019      	str	r1, [r3, #0]
 800c508:	e002      	b.n	800c510 <_printf_i+0x1cc>
 800c50a:	0670      	lsls	r0, r6, #25
 800c50c:	d5fb      	bpl.n	800c506 <_printf_i+0x1c2>
 800c50e:	8019      	strh	r1, [r3, #0]
 800c510:	2300      	movs	r3, #0
 800c512:	4615      	mov	r5, r2
 800c514:	6123      	str	r3, [r4, #16]
 800c516:	e7bc      	b.n	800c492 <_printf_i+0x14e>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	2100      	movs	r1, #0
 800c51c:	1d1a      	adds	r2, r3, #4
 800c51e:	602a      	str	r2, [r5, #0]
 800c520:	681d      	ldr	r5, [r3, #0]
 800c522:	6862      	ldr	r2, [r4, #4]
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f859 	bl	800c5dc <memchr>
 800c52a:	b108      	cbz	r0, 800c530 <_printf_i+0x1ec>
 800c52c:	1b40      	subs	r0, r0, r5
 800c52e:	6060      	str	r0, [r4, #4]
 800c530:	6863      	ldr	r3, [r4, #4]
 800c532:	6123      	str	r3, [r4, #16]
 800c534:	2300      	movs	r3, #0
 800c536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c53a:	e7aa      	b.n	800c492 <_printf_i+0x14e>
 800c53c:	462a      	mov	r2, r5
 800c53e:	4649      	mov	r1, r9
 800c540:	4640      	mov	r0, r8
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	47d0      	blx	sl
 800c546:	3001      	adds	r0, #1
 800c548:	d0ad      	beq.n	800c4a6 <_printf_i+0x162>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	079b      	lsls	r3, r3, #30
 800c54e:	d413      	bmi.n	800c578 <_printf_i+0x234>
 800c550:	68e0      	ldr	r0, [r4, #12]
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	4298      	cmp	r0, r3
 800c556:	bfb8      	it	lt
 800c558:	4618      	movlt	r0, r3
 800c55a:	e7a6      	b.n	800c4aa <_printf_i+0x166>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4632      	mov	r2, r6
 800c560:	4649      	mov	r1, r9
 800c562:	4640      	mov	r0, r8
 800c564:	47d0      	blx	sl
 800c566:	3001      	adds	r0, #1
 800c568:	d09d      	beq.n	800c4a6 <_printf_i+0x162>
 800c56a:	3501      	adds	r5, #1
 800c56c:	68e3      	ldr	r3, [r4, #12]
 800c56e:	9903      	ldr	r1, [sp, #12]
 800c570:	1a5b      	subs	r3, r3, r1
 800c572:	42ab      	cmp	r3, r5
 800c574:	dcf2      	bgt.n	800c55c <_printf_i+0x218>
 800c576:	e7eb      	b.n	800c550 <_printf_i+0x20c>
 800c578:	2500      	movs	r5, #0
 800c57a:	f104 0619 	add.w	r6, r4, #25
 800c57e:	e7f5      	b.n	800c56c <_printf_i+0x228>
 800c580:	0800dd1b 	.word	0x0800dd1b
 800c584:	0800dd2c 	.word	0x0800dd2c

0800c588 <memmove>:
 800c588:	4288      	cmp	r0, r1
 800c58a:	b510      	push	{r4, lr}
 800c58c:	eb01 0402 	add.w	r4, r1, r2
 800c590:	d902      	bls.n	800c598 <memmove+0x10>
 800c592:	4284      	cmp	r4, r0
 800c594:	4623      	mov	r3, r4
 800c596:	d807      	bhi.n	800c5a8 <memmove+0x20>
 800c598:	1e43      	subs	r3, r0, #1
 800c59a:	42a1      	cmp	r1, r4
 800c59c:	d008      	beq.n	800c5b0 <memmove+0x28>
 800c59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5a6:	e7f8      	b.n	800c59a <memmove+0x12>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4402      	add	r2, r0
 800c5ac:	428a      	cmp	r2, r1
 800c5ae:	d100      	bne.n	800c5b2 <memmove+0x2a>
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5ba:	e7f7      	b.n	800c5ac <memmove+0x24>

0800c5bc <_sbrk_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	2300      	movs	r3, #0
 800c5c0:	4d05      	ldr	r5, [pc, #20]	; (800c5d8 <_sbrk_r+0x1c>)
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	602b      	str	r3, [r5, #0]
 800c5c8:	f7fc f8a6 	bl	8008718 <_sbrk>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_sbrk_r+0x1a>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_sbrk_r+0x1a>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	200009d0 	.word	0x200009d0

0800c5dc <memchr>:
 800c5dc:	4603      	mov	r3, r0
 800c5de:	b510      	push	{r4, lr}
 800c5e0:	b2c9      	uxtb	r1, r1
 800c5e2:	4402      	add	r2, r0
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	d101      	bne.n	800c5ee <memchr+0x12>
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e003      	b.n	800c5f6 <memchr+0x1a>
 800c5ee:	7804      	ldrb	r4, [r0, #0]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	428c      	cmp	r4, r1
 800c5f4:	d1f6      	bne.n	800c5e4 <memchr+0x8>
 800c5f6:	bd10      	pop	{r4, pc}

0800c5f8 <_realloc_r>:
 800c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4614      	mov	r4, r2
 800c600:	460e      	mov	r6, r1
 800c602:	b921      	cbnz	r1, 800c60e <_realloc_r+0x16>
 800c604:	4611      	mov	r1, r2
 800c606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c60a:	f7ff bc45 	b.w	800be98 <_malloc_r>
 800c60e:	b92a      	cbnz	r2, 800c61c <_realloc_r+0x24>
 800c610:	f7ff fbda 	bl	800bdc8 <_free_r>
 800c614:	4625      	mov	r5, r4
 800c616:	4628      	mov	r0, r5
 800c618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61c:	f000 f81b 	bl	800c656 <_malloc_usable_size_r>
 800c620:	4284      	cmp	r4, r0
 800c622:	4607      	mov	r7, r0
 800c624:	d802      	bhi.n	800c62c <_realloc_r+0x34>
 800c626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c62a:	d812      	bhi.n	800c652 <_realloc_r+0x5a>
 800c62c:	4621      	mov	r1, r4
 800c62e:	4640      	mov	r0, r8
 800c630:	f7ff fc32 	bl	800be98 <_malloc_r>
 800c634:	4605      	mov	r5, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d0ed      	beq.n	800c616 <_realloc_r+0x1e>
 800c63a:	42bc      	cmp	r4, r7
 800c63c:	4622      	mov	r2, r4
 800c63e:	4631      	mov	r1, r6
 800c640:	bf28      	it	cs
 800c642:	463a      	movcs	r2, r7
 800c644:	f7ff fbb2 	bl	800bdac <memcpy>
 800c648:	4631      	mov	r1, r6
 800c64a:	4640      	mov	r0, r8
 800c64c:	f7ff fbbc 	bl	800bdc8 <_free_r>
 800c650:	e7e1      	b.n	800c616 <_realloc_r+0x1e>
 800c652:	4635      	mov	r5, r6
 800c654:	e7df      	b.n	800c616 <_realloc_r+0x1e>

0800c656 <_malloc_usable_size_r>:
 800c656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c65a:	1f18      	subs	r0, r3, #4
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bfbc      	itt	lt
 800c660:	580b      	ldrlt	r3, [r1, r0]
 800c662:	18c0      	addlt	r0, r0, r3
 800c664:	4770      	bx	lr
	...

0800c668 <_init>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	bf00      	nop
 800c66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66e:	bc08      	pop	{r3}
 800c670:	469e      	mov	lr, r3
 800c672:	4770      	bx	lr

0800c674 <_fini>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	bf00      	nop
 800c678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67a:	bc08      	pop	{r3}
 800c67c:	469e      	mov	lr, r3
 800c67e:	4770      	bx	lr
