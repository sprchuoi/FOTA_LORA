
LoRa_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .config_LoRa  00000004  0801fc04  0801fc04  0003fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f34c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e10  0800f460  0800f460  0001f460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011270  08011270  0003fc08  2**0
                  CONTENTS
  5 .ARM          00000008  08011270  08011270  00021270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011278  08011278  0003fc08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011278  08011278  00021278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801127c  0801127c  0002127c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000290  20000000  08011280  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000019e4  20000290  08011510  00030290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001c74  08011510  00031c74  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0003fc08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003fc31  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001befb  00000000  00000000  0003fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004666  00000000  00000000  0005bb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  000601d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000148f  00000000  00000000  00061b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cf94  00000000  00000000  0006301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020624  00000000  00000000  0007ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00096176  00000000  00000000  000a05d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008044  00000000  00000000  00136750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013e794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000290 	.word	0x20000290
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f444 	.word	0x0800f444

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000294 	.word	0x20000294
 800014c:	0800f444 	.word	0x0800f444

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__aeabi_uldivmod>:
 8001070:	b953      	cbnz	r3, 8001088 <__aeabi_uldivmod+0x18>
 8001072:	b94a      	cbnz	r2, 8001088 <__aeabi_uldivmod+0x18>
 8001074:	2900      	cmp	r1, #0
 8001076:	bf08      	it	eq
 8001078:	2800      	cmpeq	r0, #0
 800107a:	bf1c      	itt	ne
 800107c:	f04f 31ff 	movne.w	r1, #4294967295
 8001080:	f04f 30ff 	movne.w	r0, #4294967295
 8001084:	f000 b972 	b.w	800136c <__aeabi_idiv0>
 8001088:	f1ad 0c08 	sub.w	ip, sp, #8
 800108c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001090:	f000 f806 	bl	80010a0 <__udivmoddi4>
 8001094:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109c:	b004      	add	sp, #16
 800109e:	4770      	bx	lr

080010a0 <__udivmoddi4>:
 80010a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a4:	9e08      	ldr	r6, [sp, #32]
 80010a6:	460d      	mov	r5, r1
 80010a8:	4604      	mov	r4, r0
 80010aa:	468e      	mov	lr, r1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d14c      	bne.n	800114a <__udivmoddi4+0xaa>
 80010b0:	428a      	cmp	r2, r1
 80010b2:	4694      	mov	ip, r2
 80010b4:	d967      	bls.n	8001186 <__udivmoddi4+0xe6>
 80010b6:	fab2 f382 	clz	r3, r2
 80010ba:	b153      	cbz	r3, 80010d2 <__udivmoddi4+0x32>
 80010bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80010c0:	f1c3 0220 	rsb	r2, r3, #32
 80010c4:	fa01 fe03 	lsl.w	lr, r1, r3
 80010c8:	fa20 f202 	lsr.w	r2, r0, r2
 80010cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80010d0:	409c      	lsls	r4, r3
 80010d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d6:	fbbe f1f7 	udiv	r1, lr, r7
 80010da:	fa1f f58c 	uxth.w	r5, ip
 80010de:	fb07 ee11 	mls	lr, r7, r1, lr
 80010e2:	fb01 f005 	mul.w	r0, r1, r5
 80010e6:	0c22      	lsrs	r2, r4, #16
 80010e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80010ec:	4290      	cmp	r0, r2
 80010ee:	d90a      	bls.n	8001106 <__udivmoddi4+0x66>
 80010f0:	eb1c 0202 	adds.w	r2, ip, r2
 80010f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80010f8:	f080 8119 	bcs.w	800132e <__udivmoddi4+0x28e>
 80010fc:	4290      	cmp	r0, r2
 80010fe:	f240 8116 	bls.w	800132e <__udivmoddi4+0x28e>
 8001102:	3902      	subs	r1, #2
 8001104:	4462      	add	r2, ip
 8001106:	1a12      	subs	r2, r2, r0
 8001108:	fbb2 f0f7 	udiv	r0, r2, r7
 800110c:	fb07 2210 	mls	r2, r7, r0, r2
 8001110:	fb00 f505 	mul.w	r5, r0, r5
 8001114:	b2a4      	uxth	r4, r4
 8001116:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800111a:	42a5      	cmp	r5, r4
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x94>
 800111e:	eb1c 0404 	adds.w	r4, ip, r4
 8001122:	f100 32ff 	add.w	r2, r0, #4294967295
 8001126:	f080 8104 	bcs.w	8001332 <__udivmoddi4+0x292>
 800112a:	42a5      	cmp	r5, r4
 800112c:	f240 8101 	bls.w	8001332 <__udivmoddi4+0x292>
 8001130:	4464      	add	r4, ip
 8001132:	3802      	subs	r0, #2
 8001134:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001138:	2100      	movs	r1, #0
 800113a:	1b64      	subs	r4, r4, r5
 800113c:	b11e      	cbz	r6, 8001146 <__udivmoddi4+0xa6>
 800113e:	40dc      	lsrs	r4, r3
 8001140:	2300      	movs	r3, #0
 8001142:	e9c6 4300 	strd	r4, r3, [r6]
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114a:	428b      	cmp	r3, r1
 800114c:	d908      	bls.n	8001160 <__udivmoddi4+0xc0>
 800114e:	2e00      	cmp	r6, #0
 8001150:	f000 80ea 	beq.w	8001328 <__udivmoddi4+0x288>
 8001154:	2100      	movs	r1, #0
 8001156:	e9c6 0500 	strd	r0, r5, [r6]
 800115a:	4608      	mov	r0, r1
 800115c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001160:	fab3 f183 	clz	r1, r3
 8001164:	2900      	cmp	r1, #0
 8001166:	d148      	bne.n	80011fa <__udivmoddi4+0x15a>
 8001168:	42ab      	cmp	r3, r5
 800116a:	d302      	bcc.n	8001172 <__udivmoddi4+0xd2>
 800116c:	4282      	cmp	r2, r0
 800116e:	f200 80f8 	bhi.w	8001362 <__udivmoddi4+0x2c2>
 8001172:	1a84      	subs	r4, r0, r2
 8001174:	eb65 0203 	sbc.w	r2, r5, r3
 8001178:	2001      	movs	r0, #1
 800117a:	4696      	mov	lr, r2
 800117c:	2e00      	cmp	r6, #0
 800117e:	d0e2      	beq.n	8001146 <__udivmoddi4+0xa6>
 8001180:	e9c6 4e00 	strd	r4, lr, [r6]
 8001184:	e7df      	b.n	8001146 <__udivmoddi4+0xa6>
 8001186:	b902      	cbnz	r2, 800118a <__udivmoddi4+0xea>
 8001188:	deff      	udf	#255	; 0xff
 800118a:	fab2 f382 	clz	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 808e 	bne.w	80012b0 <__udivmoddi4+0x210>
 8001194:	1a88      	subs	r0, r1, r2
 8001196:	2101      	movs	r1, #1
 8001198:	0c17      	lsrs	r7, r2, #16
 800119a:	fa1f fe82 	uxth.w	lr, r2
 800119e:	fbb0 f5f7 	udiv	r5, r0, r7
 80011a2:	fb07 0015 	mls	r0, r7, r5, r0
 80011a6:	0c22      	lsrs	r2, r4, #16
 80011a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011ac:	fb0e f005 	mul.w	r0, lr, r5
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d908      	bls.n	80011c6 <__udivmoddi4+0x126>
 80011b4:	eb1c 0202 	adds.w	r2, ip, r2
 80011b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011bc:	d202      	bcs.n	80011c4 <__udivmoddi4+0x124>
 80011be:	4290      	cmp	r0, r2
 80011c0:	f200 80cc 	bhi.w	800135c <__udivmoddi4+0x2bc>
 80011c4:	4645      	mov	r5, r8
 80011c6:	1a12      	subs	r2, r2, r0
 80011c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80011cc:	fb07 2210 	mls	r2, r7, r0, r2
 80011d0:	fb0e fe00 	mul.w	lr, lr, r0
 80011d4:	b2a4      	uxth	r4, r4
 80011d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011da:	45a6      	cmp	lr, r4
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x150>
 80011de:	eb1c 0404 	adds.w	r4, ip, r4
 80011e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80011e6:	d202      	bcs.n	80011ee <__udivmoddi4+0x14e>
 80011e8:	45a6      	cmp	lr, r4
 80011ea:	f200 80b4 	bhi.w	8001356 <__udivmoddi4+0x2b6>
 80011ee:	4610      	mov	r0, r2
 80011f0:	eba4 040e 	sub.w	r4, r4, lr
 80011f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f8:	e7a0      	b.n	800113c <__udivmoddi4+0x9c>
 80011fa:	f1c1 0720 	rsb	r7, r1, #32
 80011fe:	408b      	lsls	r3, r1
 8001200:	fa22 fc07 	lsr.w	ip, r2, r7
 8001204:	ea4c 0c03 	orr.w	ip, ip, r3
 8001208:	fa25 fa07 	lsr.w	sl, r5, r7
 800120c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001210:	fbba f8f9 	udiv	r8, sl, r9
 8001214:	408d      	lsls	r5, r1
 8001216:	fa20 f307 	lsr.w	r3, r0, r7
 800121a:	fb09 aa18 	mls	sl, r9, r8, sl
 800121e:	fa1f fe8c 	uxth.w	lr, ip
 8001222:	432b      	orrs	r3, r5
 8001224:	fa00 f501 	lsl.w	r5, r0, r1
 8001228:	fb08 f00e 	mul.w	r0, r8, lr
 800122c:	0c1c      	lsrs	r4, r3, #16
 800122e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001232:	42a0      	cmp	r0, r4
 8001234:	fa02 f201 	lsl.w	r2, r2, r1
 8001238:	d90b      	bls.n	8001252 <__udivmoddi4+0x1b2>
 800123a:	eb1c 0404 	adds.w	r4, ip, r4
 800123e:	f108 3aff 	add.w	sl, r8, #4294967295
 8001242:	f080 8086 	bcs.w	8001352 <__udivmoddi4+0x2b2>
 8001246:	42a0      	cmp	r0, r4
 8001248:	f240 8083 	bls.w	8001352 <__udivmoddi4+0x2b2>
 800124c:	f1a8 0802 	sub.w	r8, r8, #2
 8001250:	4464      	add	r4, ip
 8001252:	1a24      	subs	r4, r4, r0
 8001254:	b298      	uxth	r0, r3
 8001256:	fbb4 f3f9 	udiv	r3, r4, r9
 800125a:	fb09 4413 	mls	r4, r9, r3, r4
 800125e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001262:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001266:	45a6      	cmp	lr, r4
 8001268:	d908      	bls.n	800127c <__udivmoddi4+0x1dc>
 800126a:	eb1c 0404 	adds.w	r4, ip, r4
 800126e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001272:	d26a      	bcs.n	800134a <__udivmoddi4+0x2aa>
 8001274:	45a6      	cmp	lr, r4
 8001276:	d968      	bls.n	800134a <__udivmoddi4+0x2aa>
 8001278:	3b02      	subs	r3, #2
 800127a:	4464      	add	r4, ip
 800127c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001280:	fba0 9302 	umull	r9, r3, r0, r2
 8001284:	eba4 040e 	sub.w	r4, r4, lr
 8001288:	429c      	cmp	r4, r3
 800128a:	46c8      	mov	r8, r9
 800128c:	469e      	mov	lr, r3
 800128e:	d354      	bcc.n	800133a <__udivmoddi4+0x29a>
 8001290:	d051      	beq.n	8001336 <__udivmoddi4+0x296>
 8001292:	2e00      	cmp	r6, #0
 8001294:	d067      	beq.n	8001366 <__udivmoddi4+0x2c6>
 8001296:	ebb5 0308 	subs.w	r3, r5, r8
 800129a:	eb64 040e 	sbc.w	r4, r4, lr
 800129e:	40cb      	lsrs	r3, r1
 80012a0:	fa04 f707 	lsl.w	r7, r4, r7
 80012a4:	431f      	orrs	r7, r3
 80012a6:	40cc      	lsrs	r4, r1
 80012a8:	e9c6 7400 	strd	r7, r4, [r6]
 80012ac:	2100      	movs	r1, #0
 80012ae:	e74a      	b.n	8001146 <__udivmoddi4+0xa6>
 80012b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b4:	f1c3 0020 	rsb	r0, r3, #32
 80012b8:	40c1      	lsrs	r1, r0
 80012ba:	409d      	lsls	r5, r3
 80012bc:	fa24 f000 	lsr.w	r0, r4, r0
 80012c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c4:	4328      	orrs	r0, r5
 80012c6:	fbb1 f5f7 	udiv	r5, r1, r7
 80012ca:	fb07 1115 	mls	r1, r7, r5, r1
 80012ce:	fa1f fe8c 	uxth.w	lr, ip
 80012d2:	0c02      	lsrs	r2, r0, #16
 80012d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d8:	fb05 f10e 	mul.w	r1, r5, lr
 80012dc:	4291      	cmp	r1, r2
 80012de:	fa04 f403 	lsl.w	r4, r4, r3
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0x256>
 80012e4:	eb1c 0202 	adds.w	r2, ip, r2
 80012e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80012ec:	d22f      	bcs.n	800134e <__udivmoddi4+0x2ae>
 80012ee:	4291      	cmp	r1, r2
 80012f0:	d92d      	bls.n	800134e <__udivmoddi4+0x2ae>
 80012f2:	3d02      	subs	r5, #2
 80012f4:	4462      	add	r2, ip
 80012f6:	1a52      	subs	r2, r2, r1
 80012f8:	fbb2 f1f7 	udiv	r1, r2, r7
 80012fc:	fb07 2211 	mls	r2, r7, r1, r2
 8001300:	b280      	uxth	r0, r0
 8001302:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001306:	fb01 f20e 	mul.w	r2, r1, lr
 800130a:	4282      	cmp	r2, r0
 800130c:	d908      	bls.n	8001320 <__udivmoddi4+0x280>
 800130e:	eb1c 0000 	adds.w	r0, ip, r0
 8001312:	f101 38ff 	add.w	r8, r1, #4294967295
 8001316:	d216      	bcs.n	8001346 <__udivmoddi4+0x2a6>
 8001318:	4282      	cmp	r2, r0
 800131a:	d914      	bls.n	8001346 <__udivmoddi4+0x2a6>
 800131c:	3902      	subs	r1, #2
 800131e:	4460      	add	r0, ip
 8001320:	1a80      	subs	r0, r0, r2
 8001322:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001326:	e73a      	b.n	800119e <__udivmoddi4+0xfe>
 8001328:	4631      	mov	r1, r6
 800132a:	4630      	mov	r0, r6
 800132c:	e70b      	b.n	8001146 <__udivmoddi4+0xa6>
 800132e:	4671      	mov	r1, lr
 8001330:	e6e9      	b.n	8001106 <__udivmoddi4+0x66>
 8001332:	4610      	mov	r0, r2
 8001334:	e6fe      	b.n	8001134 <__udivmoddi4+0x94>
 8001336:	454d      	cmp	r5, r9
 8001338:	d2ab      	bcs.n	8001292 <__udivmoddi4+0x1f2>
 800133a:	ebb9 0802 	subs.w	r8, r9, r2
 800133e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001342:	3801      	subs	r0, #1
 8001344:	e7a5      	b.n	8001292 <__udivmoddi4+0x1f2>
 8001346:	4641      	mov	r1, r8
 8001348:	e7ea      	b.n	8001320 <__udivmoddi4+0x280>
 800134a:	4603      	mov	r3, r0
 800134c:	e796      	b.n	800127c <__udivmoddi4+0x1dc>
 800134e:	4645      	mov	r5, r8
 8001350:	e7d1      	b.n	80012f6 <__udivmoddi4+0x256>
 8001352:	46d0      	mov	r8, sl
 8001354:	e77d      	b.n	8001252 <__udivmoddi4+0x1b2>
 8001356:	4464      	add	r4, ip
 8001358:	3802      	subs	r0, #2
 800135a:	e749      	b.n	80011f0 <__udivmoddi4+0x150>
 800135c:	3d02      	subs	r5, #2
 800135e:	4462      	add	r2, ip
 8001360:	e731      	b.n	80011c6 <__udivmoddi4+0x126>
 8001362:	4608      	mov	r0, r1
 8001364:	e70a      	b.n	800117c <__udivmoddi4+0xdc>
 8001366:	4631      	mov	r1, r6
 8001368:	e6ed      	b.n	8001146 <__udivmoddi4+0xa6>
 800136a:	bf00      	nop

0800136c <__aeabi_idiv0>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <Encrypt_Address_Read_Init>:
static uint32_t gl_u32CRC_FragmentFW;
struct AES_ctx ctx_fw;
struct AES_ctx ctx_fw_des;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void Encrypt_Address_Read_Init(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	gl_ReadAddress = STORE_AREA_START_ADDRESS;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <Encrypt_Address_Read_Init+0x18>)
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <Encrypt_Address_Read_Init+0x1c>)
 8001378:	601a      	str	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_fw_des, AES_CBC_128_Key, AES_CBC_128_IV);
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <Encrypt_Address_Read_Init+0x20>)
 800137c:	4905      	ldr	r1, [pc, #20]	; (8001394 <Encrypt_Address_Read_Init+0x24>)
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <Encrypt_Address_Read_Init+0x28>)
 8001380:	f004 fcb4 	bl	8005cec <AES_init_ctx_iv>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000340 	.word	0x20000340
 800138c:	08012800 	.word	0x08012800
 8001390:	20000010 	.word	0x20000010
 8001394:	20000000 	.word	0x20000000
 8001398:	2000040c 	.word	0x2000040c

0800139c <Calculate_CRC_firmware>:
uint32_t Calculate_CRC_firmware(uint8_t *buffer_firmware){
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32CRC_Code = INITIAL_VALUE_ZERO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
	RCC->AHBENR |=0x40;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <Calculate_CRC_firmware+0x88>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <Calculate_CRC_firmware+0x88>)
 80013ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b2:	6153      	str	r3, [r2, #20]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	609a      	str	r2, [r3, #8]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e024      	b.n	800140a <Calculate_CRC_firmware+0x6e>
		/* Calculate CRC */
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3303      	adds	r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	061a      	lsls	r2, r3, #24
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
									   |(buffer_firmware[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer_firmware[Local_u8Count*4] <<SHIFT_0_BIT);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	440b      	add	r3, r1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4313      	orrs	r3, r2
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4611      	mov	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	440a      	add	r2, r1
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	4313      	orrs	r3, r2
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80013fc:	60bb      	str	r3, [r7, #8]
		CRC->DR  = Local_u32CRC_Code;
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	6013      	str	r3, [r2, #0]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d9d7      	bls.n	80013c0 <Calculate_CRC_firmware+0x24>
	}
	Local_u32CRC_Code = CRC->DR;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]
	return Local_u32CRC_Code;
 8001416:	68bb      	ldr	r3, [r7, #8]

}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40023000 	.word	0x40023000

0800142c <Encrypt_MainFunc>:
void Encrypt_MainFunc()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	gl_u32CRC_FragmentFW = INITIAL_VALUE_ZERO;
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <Encrypt_MainFunc+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	uint8_t local_flag_request=INITIAL_VALUE_ZERO;
 8001438:	2300      	movs	r3, #0
 800143a:	717b      	strb	r3, [r7, #5]
	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 800143c:	4843      	ldr	r0, [pc, #268]	; (800154c <Encrypt_MainFunc+0x120>)
 800143e:	f001 fb47 	bl	8002ad0 <Rte_SystemState_ReadData>
 8001442:	4603      	mov	r3, r0
 8001444:	71bb      	strb	r3, [r7, #6]
	retVal = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8001446:	4842      	ldr	r0, [pc, #264]	; (8001550 <Encrypt_MainFunc+0x124>)
 8001448:	f001 fc7a 	bl	8002d40 <Rte_PacketSendLoraNum_ReadData>
 800144c:	4603      	mov	r3, r0
 800144e:	71bb      	strb	r3, [r7, #6]
	gl_ReadAddress = STORE_AREA_START_ADDRESS +(gl_u16NoPacket-1)*64;
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <Encrypt_MainFunc+0x124>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001458:	f203 439f 	addw	r3, r3, #1183	; 0x49f
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	461a      	mov	r2, r3
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001462:	601a      	str	r2, [r3, #0]
	//Initialize Cyper IV ctx
	AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8001464:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <Encrypt_MainFunc+0x12c>)
 8001466:	493d      	ldr	r1, [pc, #244]	; (800155c <Encrypt_MainFunc+0x130>)
 8001468:	483d      	ldr	r0, [pc, #244]	; (8001560 <Encrypt_MainFunc+0x134>)
 800146a:	f004 fc3f 	bl	8005cec <AES_init_ctx_iv>

	if(RTE_E_OKE == retVal){
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d164      	bne.n	800153e <Encrypt_MainFunc+0x112>
		if(SYS_ENCRYPT_FW == gl_u8SystemState){
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <Encrypt_MainFunc+0x120>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b06      	cmp	r3, #6
 800147a:	d160      	bne.n	800153e <Encrypt_MainFunc+0x112>
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 800147c:	2300      	movs	r3, #0
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e00f      	b.n	80014a2 <Encrypt_MainFunc+0x76>
				gl_u8FwFragment[local_counter] = (*(volatile uint8_t*)(gl_ReadAddress));
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <Encrypt_MainFunc+0x138>)
 8001490:	54d1      	strb	r1, [r2, r3]
				gl_ReadAddress++;
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a2e      	ldr	r2, [pc, #184]	; (8001554 <Encrypt_MainFunc+0x128>)
 800149a:	6013      	str	r3, [r2, #0]
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3301      	adds	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b3f      	cmp	r3, #63	; 0x3f
 80014a6:	d9ec      	bls.n	8001482 <Encrypt_MainFunc+0x56>
			}
			//decrypt fw
			//Decrypt
			gl_u32CRC_FragmentFW = Calculate_CRC_firmware((uint8_t*) gl_u8FwFragment);
 80014a8:	482e      	ldr	r0, [pc, #184]	; (8001564 <Encrypt_MainFunc+0x138>)
 80014aa:	f7ff ff77 	bl	800139c <Calculate_CRC_firmware>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a25      	ldr	r2, [pc, #148]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014b2:	6013      	str	r3, [r2, #0]
			//RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
			RTE_RUNNABLE_FLAG_LORA_RESP_ReadData(&local_flag_request);
 80014b4:	1d7b      	adds	r3, r7, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fc54 	bl	8002d64 <Rte_FlagLoRaResp_ReadData>
			gl_u8CipherText[0]= ADDR_BROADCAST;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	701a      	strb	r2, [r3, #0]
			gl_u8CipherText[1]= ADDR_BROADCAST;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	705a      	strb	r2, [r3, #1]
			gl_u8CipherText[2] =local_flag_request;
 80014c8:	797a      	ldrb	r2, [r7, #5]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014cc:	709a      	strb	r2, [r3, #2]
			gl_u8CipherText[3]= gl_u16NoPacket >> SHIFT_8_BIT;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <Encrypt_MainFunc+0x124>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014da:	70da      	strb	r2, [r3, #3]
			gl_u8CipherText[4]= gl_u16NoPacket >> SHIFT_0_BIT;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <Encrypt_MainFunc+0x124>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014e4:	711a      	strb	r2, [r3, #4]
			gl_u8CipherText[8] = gl_u32CRC_FragmentFW >>SHIFT_24_BIT;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0e1b      	lsrs	r3, r3, #24
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014f0:	721a      	strb	r2, [r3, #8]
			gl_u8CipherText[7] = gl_u32CRC_FragmentFW >>SHIFT_16_BIT;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014fc:	71da      	strb	r2, [r3, #7]
			gl_u8CipherText[6] = gl_u32CRC_FragmentFW >>SHIFT_8_BIT;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <Encrypt_MainFunc+0x11c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001508:	719a      	strb	r2, [r3, #6]
			gl_u8CipherText[5] = gl_u32CRC_FragmentFW >>SHIFT_0_BIT;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Encrypt_MainFunc+0x11c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001512:	715a      	strb	r2, [r3, #5]
			copy_Array((uint8_t*)gl_u8CipherText ,(uint8_t*) gl_u8FwFragment , 64);
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <Encrypt_MainFunc+0x138>)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <Encrypt_MainFunc+0x13c>)
 800151a:	f005 fe1a 	bl	8007152 <copy_Array>

			/*Encrypt buffer to cyberText*/
			AES_CTR_xcrypt_buffer(&ctx_fw, gl_u8CipherText, 80);
 800151e:	2250      	movs	r2, #80	; 0x50
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <Encrypt_MainFunc+0x134>)
 8001524:	f005 f9e3 	bl	80068ee <AES_CTR_xcrypt_buffer>
			retVal = RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_WriteData(gl_u8CipherText);
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <Encrypt_MainFunc+0x13c>)
 800152a:	f001 fae3 	bl	8002af4 <Rte_EncyptedBuffer_WriteData>
 800152e:	4603      	mov	r3, r0
 8001530:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <Encrypt_MainFunc+0x112>
				// Set to Send Update
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_SEND_UPDATE);
 8001538:	2007      	movs	r0, #7
 800153a:	f001 fab7 	bl	8002aac <Rte_SystemState_WriteData>
			}
		}

	}
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000348 	.word	0x20000348
 800154c:	2000033c 	.word	0x2000033c
 8001550:	20000344 	.word	0x20000344
 8001554:	20000340 	.word	0x20000340
 8001558:	20000010 	.word	0x20000010
 800155c:	20000000 	.word	0x20000000
 8001560:	2000034c 	.word	0x2000034c
 8001564:	200002fc 	.word	0x200002fc
 8001568:	200002ac 	.word	0x200002ac
 800156c:	00000000 	.word	0x00000000

08001570 <Decrypt_MainFunc>:
void Decrypt_MainFunc(uint8_t * gl_u8FwFragment){
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a0      	sub	sp, #128	; 0x80
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint32_t start,end, duration;
	float duration_ms, duration_s;

//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	start = __HAL_TIM_GET_COUNTER(&htim1);
 8001578:	4b63      	ldr	r3, [pc, #396]	; (8001708 <Decrypt_MainFunc+0x198>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
	AES_CBC_decrypt_buffer(&ctx_fw_des, gl_u8FwFragment, 1024);
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4861      	ldr	r0, [pc, #388]	; (800170c <Decrypt_MainFunc+0x19c>)
 8001588:	f005 f97c 	bl	8006884 <AES_CBC_decrypt_buffer>
	end = __HAL_TIM_GET_COUNTER(&htim1);
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <Decrypt_MainFunc+0x198>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	677b      	str	r3, [r7, #116]	; 0x74
	//reset counter
	TIM1->CNT = 0;
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <Decrypt_MainFunc+0x1a0>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	if (end >= start) {
 800159a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800159c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159e:	429a      	cmp	r2, r3
 80015a0:	d304      	bcc.n	80015ac <Decrypt_MainFunc+0x3c>
		duration = end - start;
 80015a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015aa:	e006      	b.n	80015ba <Decrypt_MainFunc+0x4a>
	} else {
		duration = (0xFFFF - start) + end;
 80015ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015b6:	33ff      	adds	r3, #255	; 0xff
 80015b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	}
	 // Chuyển đổi và xuất kết quả qua UART
	char buffer[100];

	sprintf(buffer, "Status:Successful! \n");
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4955      	ldr	r1, [pc, #340]	; (8001714 <Decrypt_MainFunc+0x1a4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00a fee7 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fdc0 	bl	8000150 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f107 0108 	add.w	r1, r7, #8
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	484e      	ldr	r0, [pc, #312]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80015de:	f009 fb91 	bl	800ad04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fdb2 	bl	8000150 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f107 0108 	add.w	r1, r7, #8
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	4847      	ldr	r0, [pc, #284]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80015fa:	f009 fb83 	bl	800ad04 <HAL_UART_Transmit>
	if (duration < 1000) {
 80015fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001604:	d207      	bcs.n	8001616 <Decrypt_MainFunc+0xa6>
	    sprintf(buffer, "Execution time: %lu us\r\n", duration);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <Decrypt_MainFunc+0x1ac>)
 800160e:	4618      	mov	r0, r3
 8001610:	f00a fec0 	bl	800c394 <siprintf>
 8001614:	e038      	b.n	8001688 <Decrypt_MainFunc+0x118>
	} else if (duration < 1000000) {
 8001616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001618:	4a41      	ldr	r2, [pc, #260]	; (8001720 <Decrypt_MainFunc+0x1b0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d81a      	bhi.n	8001654 <Decrypt_MainFunc+0xe4>
	    duration_ms = duration / 1000.0;
 800161e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001620:	f7fe fee0 	bl	80003e4 <__aeabi_ui2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <Decrypt_MainFunc+0x1b4>)
 800162a:	f7ff f87f 	bl	800072c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fa27 	bl	8000a88 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	66fb      	str	r3, [r7, #108]	; 0x6c
	    sprintf(buffer, "Execution time: %.2f ms\r\n", duration_ms);
 800163e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001640:	f7fe fef2 	bl	8000428 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	f107 0008 	add.w	r0, r7, #8
 800164c:	4936      	ldr	r1, [pc, #216]	; (8001728 <Decrypt_MainFunc+0x1b8>)
 800164e:	f00a fea1 	bl	800c394 <siprintf>
 8001652:	e019      	b.n	8001688 <Decrypt_MainFunc+0x118>
	} else {
	    duration_s = duration / 1000000.0;
 8001654:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001656:	f7fe fec5 	bl	80003e4 <__aeabi_ui2d>
 800165a:	a329      	add	r3, pc, #164	; (adr r3, 8001700 <Decrypt_MainFunc+0x190>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f864 	bl	800072c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa0c 	bl	8000a88 <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	673b      	str	r3, [r7, #112]	; 0x70
	    sprintf(buffer, "Execution time: %.2f s\r\n", duration_s);
 8001674:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001676:	f7fe fed7 	bl	8000428 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	f107 0008 	add.w	r0, r7, #8
 8001682:	492a      	ldr	r1, [pc, #168]	; (800172c <Decrypt_MainFunc+0x1bc>)
 8001684:	f00a fe86 	bl	800c394 <siprintf>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fd5f 	bl	8000150 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016a0:	f009 fb30 	bl	800ad04 <HAL_UART_Transmit>
	sprintf(buffer, "Key: 2B7E151628AED2A6ABF7158809CF4F3C \r\n");
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4921      	ldr	r1, [pc, #132]	; (8001730 <Decrypt_MainFunc+0x1c0>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00a fe72 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd4b 	bl	8000150 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f107 0108 	add.w	r1, r7, #8
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	4814      	ldr	r0, [pc, #80]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016c8:	f009 fb1c 	bl	800ad04 <HAL_UART_Transmit>
	sprintf(buffer, "IV: 000102030405060708090a0b0c0d0e0f \r\n");
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4918      	ldr	r1, [pc, #96]	; (8001734 <Decrypt_MainFunc+0x1c4>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00a fe5e 	bl	800c394 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd37 	bl	8000150 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f107 0108 	add.w	r1, r7, #8
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016f0:	f009 fb08 	bl	800ad04 <HAL_UART_Transmit>
}
 80016f4:	bf00      	nop
 80016f6:	3780      	adds	r7, #128	; 0x80
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	f3af 8000 	nop.w
 8001700:	00000000 	.word	0x00000000
 8001704:	412e8480 	.word	0x412e8480
 8001708:	2000171c 	.word	0x2000171c
 800170c:	2000040c 	.word	0x2000040c
 8001710:	40012c00 	.word	0x40012c00
 8001714:	0800f460 	.word	0x0800f460
 8001718:	200017f4 	.word	0x200017f4
 800171c:	0800f478 	.word	0x0800f478
 8001720:	000f423f 	.word	0x000f423f
 8001724:	408f4000 	.word	0x408f4000
 8001728:	0800f494 	.word	0x0800f494
 800172c:	0800f4b0 	.word	0x0800f4b0
 8001730:	0800f4cc 	.word	0x0800f4cc
 8001734:	0800f4f8 	.word	0x0800f4f8

08001738 <F_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void F_voidInitVariables (void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <F_voidInitVariables+0x14>)
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <F_voidInitVariables+0x18>)
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200004cc 	.word	0x200004cc
 8001750:	08012800 	.word	0x08012800

08001754 <F_FlashBlockToAddress>:


HAL_StatusTypeDef F_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 8001764:	2300      	movs	r3, #0
 8001766:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8001768:	2300      	movs	r3, #0
 800176a:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <F_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e024      	b.n	80017c2 <F_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8001778:	2300      	movs	r3, #0
 800177a:	81bb      	strh	r3, [r7, #12]
 800177c:	e01d      	b.n	80017ba <F_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 800177e:	89bb      	ldrh	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21a      	sxth	r2, r3
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	440b      	add	r3, r1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21b      	sxth	r3, r3
 800179a:	817b      	strh	r3, [r7, #10]
			F_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <F_FlashBlockToAddress+0x78>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	897a      	ldrh	r2, [r7, #10]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f832 	bl	800180e <F_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <F_FlashBlockToAddress+0x78>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3302      	adds	r3, #2
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <F_FlashBlockToAddress+0x78>)
 80017b2:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	3302      	adds	r3, #2
 80017b8:	81bb      	strh	r3, [r7, #12]
 80017ba:	89ba      	ldrh	r2, [r7, #12]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3dd      	bcc.n	800177e <F_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200004cc 	.word	0x200004cc

080017d0 <F_Erase_Image>:

HAL_StatusTypeDef F_Erase_Image(uint32_t ImageAddress)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	44;
 80017e4:	232c      	movs	r3, #44	; 0x2c
 80017e6:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80017e8:	f006 fb3a 	bl	8007e60 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80017ec:	f107 0208 	add.w	r2, r7, #8
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fc1a 	bl	8008030 <HAL_FLASHEx_Erase>
 80017fc:	4603      	mov	r3, r0
 80017fe:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8001800:	f006 fb54 	bl	8007eac <HAL_FLASH_Lock>
	return Local_retVal;
 8001804:	7ffb      	ldrb	r3, [r7, #31]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <F_FlashHalfWordToAddress>:


HAL_StatusTypeDef F_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 800180e:	b5b0      	push	{r4, r5, r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 800181a:	f006 fb21 	bl	8007e60 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	2200      	movs	r2, #0
 8001822:	461c      	mov	r4, r3
 8001824:	4615      	mov	r5, r2
 8001826:	4622      	mov	r2, r4
 8001828:	462b      	mov	r3, r5
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2001      	movs	r0, #1
 800182e:	f006 faa7 	bl	8007d80 <HAL_FLASH_Program>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8001836:	f006 fb39 	bl	8007eac <HAL_FLASH_Lock>

	return Local_retVal;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}

08001844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001848:	f3bf 8f4f 	dsb	sy
}
 800184c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <__NVIC_SystemReset+0x24>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001856:	4904      	ldr	r1, [pc, #16]	; (8001868 <__NVIC_SystemReset+0x24>)
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_SystemReset+0x28>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800185e:	f3bf 8f4f 	dsb	sy
}
 8001862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <__NVIC_SystemReset+0x20>
 8001868:	e000ed00 	.word	0xe000ed00
 800186c:	05fa0004 	.word	0x05fa0004

08001870 <FL_Syns_Config>:
static uint8_t gl_u8Flag_Sendbitmap = 0 ;
static uint8_t First_OTA = 0;
static uint8_t Request_OTA_Done = 0;
//uint32_t FL_uint32localAddress = ACTIVE_IMAGE + 0x80 ;
FL_Return_t FL_Syns_Config(uint32_t unicast_address, uint8_t* buffer_req, uint8_t* buffer_resp
	, uint8_t SF ,  uint8_t BandWidth , uint8_t CR ){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	70fb      	strb	r3, [r7, #3]
	/* Add info to packet */
	buffer_req[3] = SF ;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3303      	adds	r3, #3
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = BandWidth ;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3304      	adds	r3, #4
 800188a:	7e3a      	ldrb	r2, [r7, #24]
 800188c:	701a      	strb	r2, [r3, #0]
	/*	Wait to get Response from Node */
	buffer_req[5] = CR ;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3305      	adds	r3, #5
 8001892:	7f3a      	ldrb	r2, [r7, #28]
 8001894:	701a      	strb	r2, [r3, #0]
	gl_SF = SF ;
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <FL_Syns_Config+0xb0>)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	7013      	strb	r3, [r2, #0]
	gl_BW = BandWidth;
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <FL_Syns_Config+0xb4>)
 800189e:	7e3b      	ldrb	r3, [r7, #24]
 80018a0:	7013      	strb	r3, [r2, #0]
	gl_CR  = CR;
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <FL_Syns_Config+0xb8>)
 80018a4:	7f3b      	ldrb	r3, [r7, #28]
 80018a6:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80018a8:	2028      	movs	r0, #40	; 0x28
 80018aa:	f006 f99c 	bl	8007be6 <HAL_NVIC_DisableIRQ>
	//Check MCU receive config
	if(LORA_IF_Stransmit_Request(&SX1278_2, (uint8_t*) buffer_req,(uint8_t*) buffer_resp ,
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <FL_Syns_Config+0xbc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2221      	movs	r2, #33	; 0x21
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	481c      	ldr	r0, [pc, #112]	; (8001930 <FL_Syns_Config+0xc0>)
 80018c0:	f003 f880 	bl	80049c4 <LORA_IF_Stransmit_Request>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d124      	bne.n	8001914 <FL_Syns_Config+0xa4>
			ret,GW_SYNC_CONFIG , MCU_RECEIVED_CONFIG ) == LORA_OKE)
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <FL_Syns_Config+0xc4>)
 80018cc:	7d1a      	ldrb	r2, [r3, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	751a      	strb	r2, [r3, #20]
 80018d2:	7d5a      	ldrb	r2, [r3, #21]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f042 0204 	orr.w	r2, r2, #4
 80018da:	755a      	strb	r2, [r3, #21]
 80018dc:	7d9a      	ldrb	r2, [r3, #22]
 80018de:	2200      	movs	r2, #0
 80018e0:	759a      	strb	r2, [r3, #22]
 80018e2:	7dda      	ldrb	r2, [r3, #23]
 80018e4:	2200      	movs	r2, #0
 80018e6:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e8:	2028      	movs	r0, #40	; 0x28
 80018ea:	f006 f96e 	bl	8007bca <HAL_NVIC_EnableIRQ>
		ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, 5000);
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	2110      	movs	r1, #16
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <FL_Syns_Config+0xc0>)
 80018f6:	f002 fdc1 	bl	800447c <SX1278_LoRaEntryRx>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <FL_Syns_Config+0xbc>)
 8001900:	701a      	strb	r2, [r3, #0]
		HAL_Delay(3000);
 8001902:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001906:	f006 f825 	bl	8007954 <HAL_Delay>

		/************Change SYSTEM TO SEND Update********************************/

		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <FL_Syns_Config+0xc8>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f9e0 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
	}
	return FL_FAIL;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000bba 	.word	0x20000bba
 8001924:	20000bbb 	.word	0x20000bbb
 8001928:	20000bbc 	.word	0x20000bbc
 800192c:	20000bb9 	.word	0x20000bb9
 8001930:	200019d0 	.word	0x200019d0
 8001934:	40010400 	.word	0x40010400
 8001938:	20000020 	.word	0x20000020

0800193c <Sequence_Process>:
//	}
//		return FL_SUCCESS ;
//	return FL_FAIL;
//}
/* Start Send Fragment */
FL_Return_t Sequence_Process(uint8_t* buffer_flashing_data){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if(LORA_IF_Stransmit_Fragment_Firmware(&SX1278_1,(uint8_t*) buffer_flashing_data  ) == LORA_OKE){
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <Sequence_Process+0x24>)
 8001948:	f003 f87a 	bl	8004a40 <LORA_IF_Stransmit_Fragment_Firmware>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <Sequence_Process+0x1a>
		return FL_SUCCESS;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <Sequence_Process+0x1c>
	}
	return FL_FAIL;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200018a0 	.word	0x200018a0

08001964 <Flashing_end>:
/* End Programming process*/
uint8_t Flashing_end(uint8_t broadcast_addr,uint32_t unicast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp ,uint8_t ACK_REQ){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
	//AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001974:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001978:	2150      	movs	r1, #80	; 0x50
 800197a:	482c      	ldr	r0, [pc, #176]	; (8001a2c <Flashing_end+0xc8>)
 800197c:	f002 fe27 	bl	80045ce <SX1278_LoRaEntryTx>
 8001980:	4603      	mov	r3, r0
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <Flashing_end+0xcc>)
 8001986:	701a      	strb	r2, [r3, #0]
	//AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
	ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001988:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800198c:	2250      	movs	r2, #80	; 0x50
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4826      	ldr	r0, [pc, #152]	; (8001a2c <Flashing_end+0xc8>)
 8001992:	f002 fe74 	bl	800467e <SX1278_LoRaTxPacket>
 8001996:	4603      	mov	r3, r0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <Flashing_end+0xcc>)
 800199c:	701a      	strb	r2, [r3, #0]
	if(ret){
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <Flashing_end+0xcc>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03c      	beq.n	8001a20 <Flashing_end+0xbc>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	4822      	ldr	r0, [pc, #136]	; (8001a34 <Flashing_end+0xd0>)
 80019ac:	f006 fe57 	bl	800865e <HAL_GPIO_TogglePin>
		ret = SX1278_LoRaEntryRx(&SX1278_1, SIZE_BUFFER_112BYTES, 4000);
 80019b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80019b4:	2170      	movs	r1, #112	; 0x70
 80019b6:	481d      	ldr	r0, [pc, #116]	; (8001a2c <Flashing_end+0xc8>)
 80019b8:	f002 fd60 	bl	800447c <SX1278_LoRaEntryRx>
 80019bc:	4603      	mov	r3, r0
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <Flashing_end+0xcc>)
 80019c2:	701a      	strb	r2, [r3, #0]
		gl_u8Flag_Sendbitmap = 1;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <Flashing_end+0xd4>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <Flashing_end+0xd8>)
 80019cc:	7d1a      	ldrb	r2, [r3, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f042 0202 	orr.w	r2, r2, #2
 80019d4:	751a      	strb	r2, [r3, #20]
 80019d6:	7d5a      	ldrb	r2, [r3, #21]
 80019d8:	2200      	movs	r2, #0
 80019da:	755a      	strb	r2, [r3, #21]
 80019dc:	7d9a      	ldrb	r2, [r3, #22]
 80019de:	2200      	movs	r2, #0
 80019e0:	759a      	strb	r2, [r3, #22]
 80019e2:	7dda      	ldrb	r2, [r3, #23]
 80019e4:	2200      	movs	r2, #0
 80019e6:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019e8:	2007      	movs	r0, #7
 80019ea:	f006 f8ee 	bl	8007bca <HAL_NVIC_EnableIRQ>
		HAL_Delay(2000);
 80019ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f2:	f005 ffaf 	bl	8007954 <HAL_Delay>
		if( buffer_packet_Rx[4] != MCU_REQUEST_PACKET_FW_LOSS){
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <Flashing_end+0xdc>)
 80019f8:	791b      	ldrb	r3, [r3, #4]
 80019fa:	2b76      	cmp	r3, #118	; 0x76
 80019fc:	d00d      	beq.n	8001a1a <Flashing_end+0xb6>
			Request_OTA_Done++;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <Flashing_end+0xe0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <Flashing_end+0xe0>)
 8001a08:	701a      	strb	r2, [r3, #0]
			if(Request_OTA_Done == 10){
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <Flashing_end+0xe0>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d106      	bne.n	8001a20 <Flashing_end+0xbc>
				// Start IT timer to Reset
				HAL_TIM_Base_Start_IT(&htim4);
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <Flashing_end+0xe4>)
 8001a14:	f008 fd18 	bl	800a448 <HAL_TIM_Base_Start_IT>
 8001a18:	e002      	b.n	8001a20 <Flashing_end+0xbc>
			}
		}
		else Request_OTA_Done =0;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <Flashing_end+0xe0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200018a0 	.word	0x200018a0
 8001a30:	20000bb9 	.word	0x20000bb9
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	20000c82 	.word	0x20000c82
 8001a3c:	40010400 	.word	0x40010400
 8001a40:	2000054c 	.word	0x2000054c
 8001a44:	20000c83 	.word	0x20000c83
 8001a48:	200017ac 	.word	0x200017ac

08001a4c <FL_OTA_end>:



uint8_t FL_OTA_end(uint8_t broadcast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp , uint8_t ACK_REQ){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	73bb      	strb	r3, [r7, #14]
	buffer_packet[0] = broadcast_addr;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	701a      	strb	r2, [r3, #0]
	buffer_packet[1] = broadcast_addr;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	701a      	strb	r2, [r3, #0]
	buffer_packet[2] = ACK_REQ;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3302      	adds	r3, #2
 8001a72:	7bba      	ldrb	r2, [r7, #14]
 8001a74:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <FL_OTA_end+0x88>)
 8001a78:	4917      	ldr	r1, [pc, #92]	; (8001ad8 <FL_OTA_end+0x8c>)
 8001a7a:	4818      	ldr	r0, [pc, #96]	; (8001adc <FL_OTA_end+0x90>)
 8001a7c:	f004 f936 	bl	8005cec <AES_init_ctx_iv>
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001a80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a84:	2150      	movs	r1, #80	; 0x50
 8001a86:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <FL_OTA_end+0x94>)
 8001a88:	f002 fda1 	bl	80045ce <SX1278_LoRaEntryTx>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <FL_OTA_end+0x98>)
 8001a92:	701a      	strb	r2, [r3, #0]
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8001a94:	2250      	movs	r2, #80	; 0x50
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	4810      	ldr	r0, [pc, #64]	; (8001adc <FL_OTA_end+0x90>)
 8001a9a:	f004 ff28 	bl	80068ee <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001a9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aa2:	2250      	movs	r2, #80	; 0x50
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	480e      	ldr	r0, [pc, #56]	; (8001ae0 <FL_OTA_end+0x94>)
 8001aa8:	f002 fde9 	bl	800467e <SX1278_LoRaTxPacket>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <FL_OTA_end+0x98>)
 8001ab2:	701a      	strb	r2, [r3, #0]
	if(ret){
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <FL_OTA_end+0x98>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <FL_OTA_end+0x7e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <FL_OTA_end+0x9c>)
 8001ac2:	f006 fdcc 	bl	800865e <HAL_GPIO_TogglePin>
		//ret = SX1278_LoRaEntryRx(&SX1278_1, SIZE_BUFFER_112BYTES, 4000);
		//__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
		//HAL_NVIC_EnableIRQ(EXTI1_IRQn);
		//HAL_Delay(2000);
		return 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <FL_OTA_end+0x80>
	}
	return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000034 	.word	0x20000034
 8001ad8:	20000024 	.word	0x20000024
 8001adc:	20000bc0 	.word	0x20000bc0
 8001ae0:	200018a0 	.word	0x200018a0
 8001ae4:	20000bb9 	.word	0x20000bb9
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <Send_request>:

/*request get value from gateway*/
uint8_t Send_request(SX1278_t *module , uint32_t unicast_addr , uint8_t * buffer_req_2 , uint8_t ACK_REQ){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	70fb      	strb	r3, [r7, #3]
	buffer_req_2[0]  = (unicast_addr>>SHIFT_24_BIT)&0xff;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	0e1a      	lsrs	r2, r3, #24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
	buffer_req_2[1]  = (unicast_addr>>SHIFT_16_BIT)&0xff;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0c1a      	lsrs	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
	buffer_req_2[2]  = (unicast_addr>>SHIFT_8_BIT)&0xff;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3302      	adds	r3, #2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
	buffer_req_2[3]  = (unicast_addr>>SHIFT_0_BIT)&0xff;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3303      	adds	r3, #3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]
	buffer_req_2[4]  = GW_REQ_PARAMETER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	228c      	movs	r2, #140	; 0x8c
 8001b2c:	701a      	strb	r2, [r3, #0]
	uint32_t counter =0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
	// 2. Clear Pending Interrupt

	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001b32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b36:	2110      	movs	r1, #16
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f002 fd48 	bl	80045ce <SX1278_LoRaEntryTx>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <Send_request+0xe8>)
 8001b44:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <Send_request+0xec>)
 8001b48:	4924      	ldr	r1, [pc, #144]	; (8001bdc <Send_request+0xf0>)
 8001b4a:	4825      	ldr	r0, [pc, #148]	; (8001be0 <Send_request+0xf4>)
 8001b4c:	f004 f8ce 	bl	8005cec <AES_init_ctx_iv>
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req_2, 16);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2210      	movs	r2, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4822      	ldr	r0, [pc, #136]	; (8001be0 <Send_request+0xf4>)
 8001b58:	f004 fec9 	bl	80068ee <AES_CTR_xcrypt_buffer>

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b62:	2210      	movs	r2, #16
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f002 fd8a 	bl	800467e <SX1278_LoRaTxPacket>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <Send_request+0xe8>)
 8001b70:	701a      	strb	r2, [r3, #0]
	memset(&buffer_req_2 , 0xff , 16);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2210      	movs	r2, #16
 8001b76:	21ff      	movs	r1, #255	; 0xff
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00a fc6e 	bl	800c45a <memset>
	if(ret){
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <Send_request+0xe8>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <Send_request+0xa4>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8a:	4816      	ldr	r0, [pc, #88]	; (8001be4 <Send_request+0xf8>)
 8001b8c:	f006 fd67 	bl	800865e <HAL_GPIO_TogglePin>
	}

	__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <Send_request+0xfc>)
 8001b92:	7d1a      	ldrb	r2, [r3, #20]
 8001b94:	2200      	movs	r2, #0
 8001b96:	751a      	strb	r2, [r3, #20]
 8001b98:	7d5a      	ldrb	r2, [r3, #21]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f042 0204 	orr.w	r2, r2, #4
 8001ba0:	755a      	strb	r2, [r3, #21]
 8001ba2:	7d9a      	ldrb	r2, [r3, #22]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	759a      	strb	r2, [r3, #22]
 8001ba8:	7dda      	ldrb	r2, [r3, #23]
 8001baa:	2200      	movs	r2, #0
 8001bac:	75da      	strb	r2, [r3, #23]
	ret = SX1278_LoRaEntryRx(&SX1278_2, 16, 3000);
 8001bae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <Send_request+0x100>)
 8001bb6:	f002 fc61 	bl	800447c <SX1278_LoRaEntryRx>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <Send_request+0xe8>)
 8001bc0:	701a      	strb	r2, [r3, #0]
	//HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bc2:	2028      	movs	r0, #40	; 0x28
 8001bc4:	f006 f801 	bl	8007bca <HAL_NVIC_EnableIRQ>
	//Get data from SPI_2


}
 8001bc8:	bf00      	nop
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000bb9 	.word	0x20000bb9
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	20000024 	.word	0x20000024
 8001be0:	20000bc0 	.word	0x20000bc0
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40010400 	.word	0x40010400
 8001bec:	200019d0 	.word	0x200019d0

08001bf0 <Flashing_Request>:
uint8_t Flashing_Request(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_req ,uint8_t ACK_REQ ,uint8_t ACK_RESP ){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	603a      	str	r2, [r7, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	71bb      	strb	r3, [r7, #6]
 8001c02:	4613      	mov	r3, r2
 8001c04:	717b      	strb	r3, [r7, #5]
	uint16_t counter_tx =0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	82fb      	strh	r3, [r7, #22]
	uint32_t Address_update = INIT_VAL_ZERO;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
	uint8_t  buffer_flag ;
	RTE_RUNNABLE_NODE_ADDR_ReadData(&Address_update);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 f816 	bl	8002c44 <Rte_NodeAddr_ReadData>
	buffer_req[0] =  (Address_update>> SHIFT_24_BIT)& 0xFF; // unicast addr
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	0e1b      	lsrs	r3, r3, #24
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = (Address_update>> SHIFT_16_BIT)& 0xFF ; // unicast addr
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	0c1a      	lsrs	r2, r3, #16
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = (Address_update>> SHIFT_8_BIT)& 0xFF ;  // unicast addr
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	0a1a      	lsrs	r2, r3, #8
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3302      	adds	r3, #2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = (Address_update>> SHIFT_0_BIT)& 0xFF ;  // unicast addr
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = ACK_REQ;	// Not use
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	797a      	ldrb	r2, [r7, #5]
 8001c4a:	701a      	strb	r2, [r3, #0]
	//Get the current Packet;
	RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8001c4c:	f107 0316 	add.w	r3, r7, #22
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f875 	bl	8002d40 <Rte_PacketSendLoraNum_ReadData>
//	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
//						SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	ret = SX1278_LoRaEntryTx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001c56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	4827      	ldr	r0, [pc, #156]	; (8001cfc <Flashing_Request+0x10c>)
 8001c5e:	f002 fcb6 	bl	80045ce <SX1278_LoRaEntryTx>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <Flashing_Request+0x110>)
 8001c68:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001c6a:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <Flashing_Request+0x114>)
 8001c6c:	4926      	ldr	r1, [pc, #152]	; (8001d08 <Flashing_Request+0x118>)
 8001c6e:	4827      	ldr	r0, [pc, #156]	; (8001d0c <Flashing_Request+0x11c>)
 8001c70:	f004 f83c 	bl	8005cec <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req, 16);
 8001c74:	2210      	movs	r2, #16
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	4824      	ldr	r0, [pc, #144]	; (8001d0c <Flashing_Request+0x11c>)
 8001c7a:	f004 fe38 	bl	80068ee <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_2, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001c7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c82:	2210      	movs	r2, #16
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	481d      	ldr	r0, [pc, #116]	; (8001cfc <Flashing_Request+0x10c>)
 8001c88:	f002 fcf9 	bl	800467e <SX1278_LoRaTxPacket>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <Flashing_Request+0x110>)
 8001c92:	701a      	strb	r2, [r3, #0]
	//__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
	if(ret){
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <Flashing_Request+0x110>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d029      	beq.n	8001cf0 <Flashing_Request+0x100>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca0:	481b      	ldr	r0, [pc, #108]	; (8001d10 <Flashing_Request+0x120>)
 8001ca2:	f006 fcdc 	bl	800865e <HAL_GPIO_TogglePin>
		counter_tx++;
 8001ca6:	8afb      	ldrh	r3, [r7, #22]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	82fb      	strh	r3, [r7, #22]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(counter_tx);
 8001cae:	8afb      	ldrh	r3, [r7, #22]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 f80f 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
		if(counter_tx == 10){
 8001cb6:	8afb      	ldrh	r3, [r7, #22]
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d117      	bne.n	8001cec <Flashing_Request+0xfc>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 fef5 	bl	8002aac <Rte_SystemState_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(GW_OUTOFREQUEST_ERROR);
 8001cc2:	201f      	movs	r0, #31
 8001cc4:	f000 ffe2 	bl	8002c8c <Rte_UI_Error_WriteData>
			buffer_flag = 0xFB;
 8001cc8:	23fb      	movs	r3, #251	; 0xfb
 8001cca:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart2,&buffer_flag, 1, HAL_MAX_DELAY);
 8001ccc:	f107 010f 	add.w	r1, r7, #15
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	480f      	ldr	r0, [pc, #60]	; (8001d14 <Flashing_Request+0x124>)
 8001cd8:	f009 f814 	bl	800ad04 <HAL_UART_Transmit>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <Flashing_Request+0x124>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <Flashing_Request+0x124>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	60da      	str	r2, [r3, #12]

		}
		return 1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <Flashing_Request+0x102>
	}

	return -1;
 8001cf0:	23ff      	movs	r3, #255	; 0xff
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200019d0 	.word	0x200019d0
 8001d00:	20000bb9 	.word	0x20000bb9
 8001d04:	20000034 	.word	0x20000034
 8001d08:	20000024 	.word	0x20000024
 8001d0c:	20000bc0 	.word	0x20000bc0
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	2000183c 	.word	0x2000183c

08001d18 <Wait_Accept_OTA>:
uint8_t Wait_Accept_OTA(uint32_t addr_node,  uint8_t* buffer_resp ,uint8_t ACK_RESP ){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	71fb      	strb	r3, [r7, #7]
	uint32_t counter_rx = INITIAL_VALUE_ZERO;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
	uint32_t Node_Address_update = addr_node;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
	uint32_t Node_Address_receive = INITIAL_VALUE_ZERO;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaRxPacket(&SX1278_2);
 8001d32:	4821      	ldr	r0, [pc, #132]	; (8001db8 <Wait_Accept_OTA+0xa0>)
 8001d34:	f002 fc07 	bl	8004546 <SX1278_LoRaRxPacket>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <Wait_Accept_OTA+0xa4>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <Wait_Accept_OTA+0xa8>)
 8001d42:	4920      	ldr	r1, [pc, #128]	; (8001dc4 <Wait_Accept_OTA+0xac>)
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <Wait_Accept_OTA+0xb0>)
 8001d46:	f003 ffd1 	bl	8005cec <AES_init_ctx_iv>
	if(ret > 0){
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <Wait_Accept_OTA+0xa4>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02d      	beq.n	8001dae <Wait_Accept_OTA+0x96>
		ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_resp, ret);
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <Wait_Accept_OTA+0xa4>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <Wait_Accept_OTA+0xa0>)
 8001d5c:	f002 fcfb 	bl	8004756 <SX1278_read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <Wait_Accept_OTA+0xa4>)
 8001d66:	701a      	strb	r2, [r3, #0]
		AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp, 16);
 8001d68:	2210      	movs	r2, #16
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	4816      	ldr	r0, [pc, #88]	; (8001dc8 <Wait_Accept_OTA+0xb0>)
 8001d6e:	f004 fdbe 	bl	80068ee <AES_CTR_xcrypt_buffer>
		Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	061a      	lsls	r2, r3, #24
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	431a      	orrs	r2, r3
								|(buffer_resp[2] << SHIFT_8_BIT)|(buffer_resp[3] << SHIFT_0_BIT);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3302      	adds	r3, #2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	3203      	adds	r2, #3
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	4313      	orrs	r3, r2
		Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8001d94:	617b      	str	r3, [r7, #20]
		if(Node_Address_receive == Node_Address_update && buffer_resp[4]== ACK_RESP ){
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d107      	bne.n	8001dae <Wait_Accept_OTA+0x96>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3304      	adds	r3, #4
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d101      	bne.n	8001dae <Wait_Accept_OTA+0x96>
			return 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <Wait_Accept_OTA+0x98>
		}
	}
	return 0;
 8001dae:	2300      	movs	r3, #0

}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200019d0 	.word	0x200019d0
 8001dbc:	20000bb9 	.word	0x20000bb9
 8001dc0:	20000034 	.word	0x20000034
 8001dc4:	20000024 	.word	0x20000024
 8001dc8:	20000bc0 	.word	0x20000bc0

08001dcc <FL_u32ReadAddressData>:
		}

		}
}
// Using for testing flashing
uint32_t FL_u32ReadAddressData(uint32_t address){
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <FL_CalculateCRCFWLoRa>:

uint32_t FL_CalculateCRCFWLoRa(uint32_t u32Size_of_Image , uint32_t Active_Addr_Indicate){
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	uint32_t local_u32CRC = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <FL_CalculateCRCFWLoRa+0x74>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <FL_CalculateCRCFWLoRa+0x74>)
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	6153      	str	r3, [r2, #20]
	u32Size_of_Image = u32Size_of_Image/4;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	607b      	str	r3, [r7, #4]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <FL_CalculateCRCFWLoRa+0x78>)
 8001e0a:	7a1a      	ldrb	r2, [r3, #8]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	721a      	strb	r2, [r3, #8]
 8001e14:	7a5a      	ldrb	r2, [r3, #9]
 8001e16:	2200      	movs	r2, #0
 8001e18:	725a      	strb	r2, [r3, #9]
 8001e1a:	7a9a      	ldrb	r2, [r3, #10]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	729a      	strb	r2, [r3, #10]
 8001e20:	7ada      	ldrb	r2, [r3, #11]
 8001e22:	2200      	movs	r2, #0
 8001e24:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e00b      	b.n	8001e44 <FL_CalculateCRCFWLoRa+0x5c>
		/* Calculate CRC */
		CRC->DR  = FL_u32ReadAddressData(Active_Addr_Indicate);
 8001e2c:	4c0c      	ldr	r4, [pc, #48]	; (8001e60 <FL_CalculateCRCFWLoRa+0x78>)
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff ffcc 	bl	8001dcc <FL_u32ReadAddressData>
 8001e34:	4603      	mov	r3, r0
 8001e36:	6023      	str	r3, [r4, #0]
		Active_Addr_Indicate+=4;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	603b      	str	r3, [r7, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3ef      	bcc.n	8001e2c <FL_CalculateCRCFWLoRa+0x44>
	}
	local_u32CRC = CRC->DR;
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <FL_CalculateCRCFWLoRa+0x78>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60bb      	str	r3, [r7, #8]
	return local_u32CRC;
 8001e52:	68bb      	ldr	r3, [r7, #8]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40023000 	.word	0x40023000

08001e64 <FL_CalculateCRCBItmaskLoRa>:
uint32_t FL_CalculateCRCBItmaskLoRa(uint32_t u32Size_of_bitmask , uint8_t *buffer){
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck;
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e78:	6153      	str	r3, [r2, #20]
	u32Size_of_bitmask = u32Size_of_bitmask/4;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
	uint32_t local_u32CRC ;
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001e82:	7a1a      	ldrb	r2, [r3, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	721a      	strb	r2, [r3, #8]
 8001e8c:	7a5a      	ldrb	r2, [r3, #9]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	725a      	strb	r2, [r3, #9]
 8001e92:	7a9a      	ldrb	r2, [r3, #10]
 8001e94:	2200      	movs	r2, #0
 8001e96:	729a      	strb	r2, [r3, #10]
 8001e98:	7ada      	ldrb	r2, [r3, #11]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e023      	b.n	8001eec <FL_CalculateCRCBItmaskLoRa+0x88>
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	061a      	lsls	r2, r3, #24
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	440b      	add	r3, r1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	431a      	orrs	r2, r3
										|(buffer[Local_u32Count*4+1] <<SHIFT_8_BIT)|(buffer[Local_u32Count*4] <<SHIFT_0_BIT);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	440b      	add	r3, r1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	440a      	add	r2, r1
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	4313      	orrs	r3, r2
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 8001ede:	60fb      	str	r3, [r7, #12]
		/* Calculate CRC */
		CRC->DR  = Local_u32PlayloadCheck;
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6013      	str	r3, [r2, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3d7      	bcc.n	8001ea4 <FL_CalculateCRCBItmaskLoRa+0x40>
	}
	local_u32CRC = CRC->DR;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	613b      	str	r3, [r7, #16]
	return local_u32CRC;
 8001efa:	693b      	ldr	r3, [r7, #16]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40023000 	.word	0x40023000

08001f10 <Send_Start_OTA>:
//}

/*
 * @Request Start OTA
 */
void Send_Start_OTA(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af02      	add	r7, sp, #8
	gl_u32TargetAddr = INITIAL_VALUE_ZERO;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <Send_Start_OTA+0x84>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,&Status_flag, 1, HAL_MAX_DELAY);
//			HAL_TIM_Base_Start_IT(&htim4);
//		}
//		First_OTA = 1;
//	}
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <Send_Start_OTA+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fe11 	bl	8002b48 <Rte_Crc_WriteData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <Send_Start_OTA+0x84>)
 8001f28:	f000 fe8c 	bl	8002c44 <Rte_NodeAddr_ReadData>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f005 fe5a 	bl	8007be6 <HAL_NVIC_DisableIRQ>
	//Check CRC

	// Using for testing

	if(Flashing_Request(ADDR_BROADCAST, gl_u32TargetAddr, buffer_req, GW_START_OTA , MCU_ACCEPT_RESPONSE) == 1){
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <Send_Start_OTA+0x84>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b2d9      	uxtb	r1, r3
 8001f38:	2305      	movs	r3, #5
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <Send_Start_OTA+0x8c>)
 8001f40:	20ff      	movs	r0, #255	; 0xff
 8001f42:	f7ff fe55 	bl	8001bf0 <Flashing_Request>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11f      	bne.n	8001f8c <Send_Start_OTA+0x7c>
		//RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_WAIT_ACCEPT_OTA);
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <Send_Start_OTA+0x90>)
 8001f4e:	7d1a      	ldrb	r2, [r3, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	751a      	strb	r2, [r3, #20]
 8001f54:	7d5a      	ldrb	r2, [r3, #21]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	755a      	strb	r2, [r3, #21]
 8001f5e:	7d9a      	ldrb	r2, [r3, #22]
 8001f60:	2200      	movs	r2, #0
 8001f62:	759a      	strb	r2, [r3, #22]
 8001f64:	7dda      	ldrb	r2, [r3, #23]
 8001f66:	2200      	movs	r2, #0
 8001f68:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f6a:	2028      	movs	r0, #40	; 0x28
 8001f6c:	f005 fe2d 	bl	8007bca <HAL_NVIC_EnableIRQ>
		ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001f70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f74:	2110      	movs	r1, #16
 8001f76:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <Send_Start_OTA+0x94>)
 8001f78:	f002 fa80 	bl	800447c <SX1278_LoRaEntryRx>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <Send_Start_OTA+0x98>)
 8001f82:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000);
 8001f84:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f88:	f005 fce4 	bl	8007954 <HAL_Delay>
	}

}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200004d4 	.word	0x200004d4
 8001f98:	200004d8 	.word	0x200004d8
 8001f9c:	200005bc 	.word	0x200005bc
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	200019d0 	.word	0x200019d0
 8001fa8:	20000bb9 	.word	0x20000bb9

08001fac <FL_FlashLoRa_INIT>:
//
//
//}


void FL_FlashLoRa_INIT(void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af02      	add	r7, sp, #8
 	gl_u8StatusFlash 			= 		INITIAL_VALUE_ZERO;
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <FL_FlashLoRa_INIT+0x124>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
	gl_u16No_Packet_Flash		=		INITZERO_START+1;
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <FL_FlashLoRa_INIT+0x128>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	801a      	strh	r2, [r3, #0]
	gl_start_array_backup 		= 		INITIAL_VALUE_ZERO;
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <FL_FlashLoRa_INIT+0x12c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
	gl_u32CRCFW 				= 		INITIAL_VALUE_ZERO;
 8001fc4:	4b45      	ldr	r3, [pc, #276]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
	gl_u16AppVer 	   			= 		INITIAL_VALUE_ZERO;
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <FL_FlashLoRa_INIT+0x134>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]
	gl_u32CodeSize 				=		INITIAL_VALUE_ZERO;
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
	gl_u8backup_flag 			=  		INITIAL_VALUE_ZERO;
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <FL_FlashLoRa_INIT+0x13c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
	buffer_flashing_data        = 		NULL_PTR;
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <FL_FlashLoRa_INIT+0x140>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
	//Calculate Number packet Lora SPI
	//Get Variable Via RTE FW
	//RTE_RUNNABLE_CRC_VALUE_ReadData(&gl_u32CRCFW);
	RTE_RUNNABLE_APP_VER_ReadData(&gl_u16AppVer);
 8001fe2:	483f      	ldr	r0, [pc, #252]	; (80020e0 <FL_FlashLoRa_INIT+0x134>)
 8001fe4:	f000 fe0a 	bl	8002bfc <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_CODE_SIZE_ReadData(&gl_u32CodeSize);
 8001fe8:	483e      	ldr	r0, [pc, #248]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 8001fea:	f000 fe19 	bl	8002c20 <Rte_CodeSize_ReadData>

	gl_u16NumberPacket_LoRa = (uint16_t)((gl_u32CodeSize + PACKET_64bytes - 1) / PACKET_64bytes);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	333f      	adds	r3, #63	; 0x3f
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <FL_FlashLoRa_INIT+0x144>)
 8001ffa:	801a      	strh	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001ffc:	483d      	ldr	r0, [pc, #244]	; (80020f4 <FL_FlashLoRa_INIT+0x148>)
 8001ffe:	f000 fe21 	bl	8002c44 <Rte_NodeAddr_ReadData>
	RTE_RUNNABLE_FLAG_TOTAL_REQUEST_PACKET_WriteData(gl_u16NumberPacket_LoRa);
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <FL_FlashLoRa_INIT+0x144>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 ff2a 	bl	8002e60 <Rte_Flag_Total_request_packet_WriteData>
	//Calculate CRC
	gl_u32CRCFW = FL_CalculateCRCFWLoRa(gl_u32CodeSize, IMAGE_NEW_FIRMWARE);
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4939      	ldr	r1, [pc, #228]	; (80020f8 <FL_FlashLoRa_INIT+0x14c>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fee8 	bl	8001de8 <FL_CalculateCRCFWLoRa>
 8002018:	4603      	mov	r3, r0
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 800201c:	6013      	str	r3, [r2, #0]
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fd90 	bl	8002b48 <Rte_Crc_WriteData>

	// Get the Infor SW FLASH
	GW_Config_SetUp();
 8002028:	f000 fcee 	bl	8002a08 <GW_Config_SetUp>
	//Start Flashing
	// Pack inform to buffer
	// CRC
	buffer_req[0] = ADDR_BROADCAST;
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = ADDR_BROADCAST;
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	705a      	strb	r2, [r3, #1]
	buffer_req[15] = (gl_u32CRCFW>>SHIFT_24_BIT);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e1b      	lsrs	r3, r3, #24
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002042:	73da      	strb	r2, [r3, #15]
	buffer_req[14] = (gl_u32CRCFW>>SHIFT_16_BIT);
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 800204e:	739a      	strb	r2, [r3, #14]
	buffer_req[13] = (gl_u32CRCFW>>SHIFT_8_BIT);
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 800205a:	735a      	strb	r2, [r3, #13]
	buffer_req[12] = (gl_u32CRCFW>>SHIFT_0_BIT);
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <FL_FlashLoRa_INIT+0x130>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002064:	731a      	strb	r2, [r3, #12]
	// Appl ver
	buffer_req[11] =(gl_u16AppVer>>SHIFT_8_BIT);
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <FL_FlashLoRa_INIT+0x134>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	b29b      	uxth	r3, r3
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002072:	72da      	strb	r2, [r3, #11]
	buffer_req[10] =(gl_u16AppVer>>SHIFT_0_BIT);
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <FL_FlashLoRa_INIT+0x134>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 800207c:	729a      	strb	r2, [r3, #10]
	// size Code
	buffer_req[9] =(gl_u32CodeSize>>SHIFT_24_BIT);
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e1b      	lsrs	r3, r3, #24
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002088:	725a      	strb	r2, [r3, #9]
	buffer_req[8] =(gl_u32CodeSize>>SHIFT_16_BIT);
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 8002094:	721a      	strb	r2, [r3, #8]
	buffer_req[7] =(gl_u32CodeSize>>SHIFT_8_BIT);
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 80020a0:	71da      	strb	r2, [r3, #7]
	buffer_req[6] =(gl_u32CodeSize>>SHIFT_0_BIT);
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <FL_FlashLoRa_INIT+0x138>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 80020aa:	719a      	strb	r2, [r3, #6]
	// Node Addr
	FL_Syns_Config(gl_u32TargetAddr, (uint8_t*) buffer_req, (uint8_t*) buffer_resp, u8SF, u8BW, u8CR );
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <FL_FlashLoRa_INIT+0x148>)
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <FL_FlashLoRa_INIT+0x154>)
 80020b2:	7819      	ldrb	r1, [r3, #0]
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <FL_FlashLoRa_INIT+0x158>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <FL_FlashLoRa_INIT+0x15c>)
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	460b      	mov	r3, r1
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <FL_FlashLoRa_INIT+0x160>)
 80020c4:	490d      	ldr	r1, [pc, #52]	; (80020fc <FL_FlashLoRa_INIT+0x150>)
 80020c6:	f7ff fbd3 	bl	8001870 <FL_Syns_Config>
	//Flashing_end(ADDR_SLAVE_NODE_1,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, number_packet);
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200004d0 	.word	0x200004d0
 80020d4:	20000020 	.word	0x20000020
 80020d8:	200004d1 	.word	0x200004d1
 80020dc:	200004d8 	.word	0x200004d8
 80020e0:	200004dc 	.word	0x200004dc
 80020e4:	200004e0 	.word	0x200004e0
 80020e8:	200004e7 	.word	0x200004e7
 80020ec:	200005cc 	.word	0x200005cc
 80020f0:	200004e4 	.word	0x200004e4
 80020f4:	200004d4 	.word	0x200004d4
 80020f8:	08012800 	.word	0x08012800
 80020fc:	200005bc 	.word	0x200005bc
 8002100:	20000c85 	.word	0x20000c85
 8002104:	20000c84 	.word	0x20000c84
 8002108:	20000c86 	.word	0x20000c86
 800210c:	200004ec 	.word	0x200004ec

08002110 <FL_getPacketlost>:
uint16_t FL_getPacketlost(uint8_t* buffer_Rx , uint16_t packetNumber){
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
	uint16_t index =  (packetNumber)/8;
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	81fb      	strh	r3, [r7, #14]
	uint16_t offset = (packetNumber)%8;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	81bb      	strh	r3, [r7, #12]
	return (buffer_Rx[index] >> offset) &0x01;
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	89bb      	ldrh	r3, [r7, #12]
 8002136:	fa42 f303 	asr.w	r3, r2, r3
 800213a:	b29b      	uxth	r3, r3
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <FL_PacketLoRaSend_START>:
void FL_PacketLoRaSend_START(void){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
	uint8_t Local_u8StatusFlash = INITIAL_VALUE_ZERO;
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Flag_Sendbitmap = INITIAL_VALUE_ZERO;
 8002156:	2300      	movs	r3, #0
 8002158:	71bb      	strb	r3, [r7, #6]
	// clear buffer
	clearDataBuffer((uint8_t*) buffer_req, 16);
 800215a:	2110      	movs	r1, #16
 800215c:	4838      	ldr	r0, [pc, #224]	; (8002240 <FL_PacketLoRaSend_START+0xf4>)
 800215e:	f005 f83d 	bl	80071dc <clearDataBuffer>
	//getSizePacket(number_packet, (uint8_t*) buffer_req);
	if(gl_u16NumberPacket_LoRa>=0){
		//Get Data from EnCrypt cybertext
		RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_ReadData(&buffer_flashing_data);
 8002162:	4838      	ldr	r0, [pc, #224]	; (8002244 <FL_PacketLoRaSend_START+0xf8>)
 8002164:	f000 fcda 	bl	8002b1c <Rte_EncyptedBuffer_ReadData>
		//FL_u128PasteBuffer((uint8_t *)buffer_flashing_data ,gl_u8No_Packet_Flash);
		// Check is missing packet
		gl_u8Flag_Sendbitmap =0;
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <FL_PacketLoRaSend_START+0xfc>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
		if(gl_u16NumberPacket_LoRa == 1){
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <FL_PacketLoRaSend_START+0x100>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <FL_PacketLoRaSend_START+0x46>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002176:	2007      	movs	r0, #7
 8002178:	f005 fd35 	bl	8007be6 <HAL_NVIC_DisableIRQ>
			Flashing_end(ADDR_BROADCAST , gl_u32TargetAddr
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <FL_PacketLoRaSend_START+0x104>)
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <FL_PacketLoRaSend_START+0xf8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2339      	movs	r3, #57	; 0x39
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <FL_PacketLoRaSend_START+0x108>)
 800218a:	20ff      	movs	r0, #255	; 0xff
 800218c:	f7ff fbea 	bl	8001964 <Flashing_end>
 8002190:	e023      	b.n	80021da <FL_PacketLoRaSend_START+0x8e>
						,(uint8_t*)buffer_flashing_data , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_FINISHING_SENDING_CODE );
			}
		else{
			if(gl_u8backup_flag == 1){
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <FL_PacketLoRaSend_START+0x10c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d10d      	bne.n	80021b6 <FL_PacketLoRaSend_START+0x6a>
						// Get the lost message number
						gl_u16No_Packet_Flash = buffer_number_pack_lost[lost_counter_pos];
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <FL_PacketLoRaSend_START+0x110>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <FL_PacketLoRaSend_START+0x114>)
 80021a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 80021a8:	801a      	strh	r2, [r3, #0]
						lost_counter_pos++;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <FL_PacketLoRaSend_START+0x110>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <FL_PacketLoRaSend_START+0x110>)
 80021b4:	801a      	strh	r2, [r3, #0]
			}
			if(gl_u16No_Packet_Flash == 0xffff){
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021be:	4293      	cmp	r3, r2
 80021c0:	d105      	bne.n	80021ce <FL_PacketLoRaSend_START+0x82>
				gl_u8backup_flag = 0;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <FL_PacketLoRaSend_START+0x10c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
				gl_u16No_Packet_Flash = 0;
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	801a      	strh	r2, [r3, #0]
			}
			gl_u8start_array_backup++;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <FL_PacketLoRaSend_START+0x11c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <FL_PacketLoRaSend_START+0x11c>)
 80021d8:	701a      	strb	r2, [r3, #0]

		}
		if (gl_u16NumberPacket_LoRa >1 && gl_u8Flag_Sendbitmap == 0 ){
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <FL_PacketLoRaSend_START+0x100>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d91b      	bls.n	800221a <FL_PacketLoRaSend_START+0xce>
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <FL_PacketLoRaSend_START+0xfc>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d117      	bne.n	800221a <FL_PacketLoRaSend_START+0xce>
			//Send Packet Flashing
			Sequence_Process((uint8_t*)buffer_flashing_data );
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <FL_PacketLoRaSend_START+0xf8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fba4 	bl	800193c <Sequence_Process>
			/*Display UI*/
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80021f4:	2006      	movs	r0, #6
 80021f6:	f000 fc59 	bl	8002aac <Rte_SystemState_WriteData>
			gl_u16NumberPacket_LoRa--;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <FL_PacketLoRaSend_START+0x100>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <FL_PacketLoRaSend_START+0x100>)
 8002204:	801a      	strh	r2, [r3, #0]
			if(gl_u8backup_flag ==0)
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <FL_PacketLoRaSend_START+0x10c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <FL_PacketLoRaSend_START+0xce>
				gl_u16No_Packet_Flash++;
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 8002218:	801a      	strh	r2, [r3, #0]
		}
		// UPDATE TO PORT
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <FL_PacketLoRaSend_START+0x118>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fd58 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
		RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 8002224:	20fe      	movs	r0, #254	; 0xfe
 8002226:	f000 fd67 	bl	8002cf8 <Rte_FlagLoRaResp_WriteData>
		if(gl_u16NumberPacket_LoRa ==1 ){
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <FL_PacketLoRaSend_START+0x100>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <FL_PacketLoRaSend_START+0xec>
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(GW_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 8002232:	2039      	movs	r0, #57	; 0x39
 8002234:	f000 fd60 	bl	8002cf8 <Rte_FlagLoRaResp_WriteData>
		}
		// Last packet

	}
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200005bc 	.word	0x200005bc
 8002244:	200005cc 	.word	0x200005cc
 8002248:	20000c82 	.word	0x20000c82
 800224c:	200004e4 	.word	0x200004e4
 8002250:	200004d4 	.word	0x200004d4
 8002254:	2000054c 	.word	0x2000054c
 8002258:	200004e7 	.word	0x200004e7
 800225c:	200004e8 	.word	0x200004e8
 8002260:	20000628 	.word	0x20000628
 8002264:	20000020 	.word	0x20000020
 8002268:	200004e6 	.word	0x200004e6

0800226c <FL_PacketLoRaDone_OTA>:
void FL_PacketLoRaDone_OTA(void){
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	GW_State_Save_State((uint32_t)SYS_IDLE);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 fb8b 	bl	800298c <GW_State_Save_State>
	if(FL_OTA_end(ADDR_BROADCAST ,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_END_OTA )==1){
 8002276:	237c      	movs	r3, #124	; 0x7c
 8002278:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <FL_PacketLoRaDone_OTA+0x5c>)
 800227a:	4914      	ldr	r1, [pc, #80]	; (80022cc <FL_PacketLoRaDone_OTA+0x60>)
 800227c:	20ff      	movs	r0, #255	; 0xff
 800227e:	f7ff fbe5 	bl	8001a4c <FL_OTA_end>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <FL_PacketLoRaDone_OTA+0x28>
		Counter_Done_OTA++;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <FL_PacketLoRaDone_OTA+0x64>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <FL_PacketLoRaDone_OTA+0x64>)
 8002292:	701a      	strb	r2, [r3, #0]
	}
	if(Counter_Done_OTA == 5){
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <FL_PacketLoRaDone_OTA+0x64>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d112      	bne.n	80022c2 <FL_PacketLoRaDone_OTA+0x56>
		HAL_Delay(5000);
 800229c:	f241 3088 	movw	r0, #5000	; 0x1388
 80022a0:	f005 fb58 	bl	8007954 <HAL_Delay>
		RTE_RUNNABLE_PACKET_LORA_REIVECED_WriteData(buffer_packet_Rx);
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <FL_PacketLoRaDone_OTA+0x5c>)
 80022a6:	f000 fd81 	bl	8002dac <Rte_PacketLoRaReceived_WriteData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 fbfe 	bl	8002aac <Rte_SystemState_WriteData>
		RTE_RUNNABLE_UI_ERROR_WriteData(0xff);
 80022b0:	20ff      	movs	r0, #255	; 0xff
 80022b2:	f000 fceb 	bl	8002c8c <Rte_UI_Error_WriteData>
		Counter_Done_OTA= 0;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <FL_PacketLoRaDone_OTA+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <FL_PacketLoRaDone_OTA+0x68>)
 80022be:	f008 f8c3 	bl	800a448 <HAL_TIM_Base_Start_IT>
	}
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000054c 	.word	0x2000054c
 80022cc:	200004fc 	.word	0x200004fc
 80022d0:	20000c81 	.word	0x20000c81
 80022d4:	20001764 	.word	0x20001764

080022d8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d133      	bne.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  //uint8_t status_node = 0 ;
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_FlagLoraSendDevice);
 80022ea:	482f      	ldr	r0, [pc, #188]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022ec:	f000 fd82 	bl	8002df4 <Rte_Flag_LoRaRequestDevice_ReadData>

	  if(gl_FlagLoraSendDevice == 0x00){
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <HAL_TIM_PeriodElapsedCallback+0x28>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f000 fd69 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
 80022fe:	e025      	b.n	800234c <HAL_TIM_PeriodElapsedCallback+0x74>
	  }
	  else if(gl_FlagLoraSendDevice == 0x06){
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d108      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x42>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_3(gl_Flag_Timeout);
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fdef 	bl	8002ef0 <Rte_Flag_NodeStatus_WriteData_Node3>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fd5c 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
 8002318:	e018      	b.n	800234c <HAL_TIM_PeriodElapsedCallback+0x74>
	  }

	  else if(gl_FlagLoraSendDevice == 0x05){
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d108      	bne.n	8002334 <HAL_TIM_PeriodElapsedCallback+0x5c>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_2(gl_Flag_Timeout);
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fdd0 	bl	8002ecc <Rte_Flag_NodeStatus_WriteData_Node2>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x03);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fd4f 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
 8002332:	e00b      	b.n	800234c <HAL_TIM_PeriodElapsedCallback+0x74>
	  }
	  else if(gl_FlagLoraSendDevice == 0x04){
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <HAL_TIM_PeriodElapsedCallback+0x74>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_1(gl_Flag_Timeout);
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fdb1 	bl	8002ea8 <Rte_Flag_NodeStatus_WriteData_Node1>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x02);
 8002346:	2002      	movs	r0, #2
 8002348:	f000 fd42 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
	  }
	  gl_Flag_Timeout = 0;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]


  }
  if(htim->Instance == TIM4){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d121      	bne.n	80023a0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  if(counter ==2){
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d117      	bne.n	8002394 <HAL_TIM_PeriodElapsedCallback+0xbc>
		  // Disable UART interrupt
		  HAL_UART_Receive_IT(&huart2, &header_flag, 1);
 8002364:	2201      	movs	r2, #1
 8002366:	4914      	ldr	r1, [pc, #80]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002368:	4814      	ldr	r0, [pc, #80]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800236a:	f008 fd4e 	bl	800ae0a <HAL_UART_Receive_IT>
		  __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0220 	bic.w	r2, r2, #32
 800237c:	60da      	str	r2, [r3, #12]
		  // Reset UART configuration
		  HAL_UART_DeInit(&huart2);
 800237e:	480f      	ldr	r0, [pc, #60]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002380:	f008 fc8e 	bl	800aca0 <HAL_UART_DeInit>
		  RTE_RUNNABLE_UI_ERROR_WriteData(UI_ERROR_RESET);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 fc81 	bl	8002c8c <Rte_UI_Error_WriteData>
		  // Reinitialize UART
		  // Reset SW
		  HAL_TIM_Base_Stop_IT(&htim4);
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800238c:	f008 f8ae 	bl	800a4ec <HAL_TIM_Base_Stop_IT>
		  NVIC_SystemReset();
 8002390:	f7ff fa58 	bl	8001844 <__NVIC_SystemReset>

	  }
	  counter +=1;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800239e:	701a      	strb	r2, [r3, #0]
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200004ea 	.word	0x200004ea
 80023ac:	200004eb 	.word	0x200004eb
 80023b0:	40000800 	.word	0x40000800
 80023b4:	20000bbd 	.word	0x20000bbd
 80023b8:	20000bb8 	.word	0x20000bb8
 80023bc:	2000183c 	.word	0x2000183c
 80023c0:	200017ac 	.word	0x200017ac

080023c4 <HAL_GPIO_EXTI_Callback>:
// Interrupt DIO2
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   // <----- The ISR Function We're Looking For!
{	uint8_t local_state=0;
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af04      	add	r7, sp, #16
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
	uint32_t unicast_addr =0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
	uint8_t local_Flag = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t local_index_data = 0 ;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&local_state);
 80023e0:	f107 0317 	add.w	r3, r7, #23
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fb73 	bl	8002ad0 <Rte_SystemState_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&unicast_addr);
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fc28 	bl	8002c44 <Rte_NodeAddr_ReadData>

  		//Rte_FlagLoRaResp_ReadData(&flag_LoRa);
	if(GPIO_Pin == DIO_2_Pin){
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	f040 80cd 	bne.w	8002598 <HAL_GPIO_EXTI_Callback+0x1d4>
		uint32_t local_u32addrNode_req = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
		if(local_state == SYS_REQUEST_OTA){
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d123      	bne.n	8002450 <HAL_GPIO_EXTI_Callback+0x8c>
			if(Wait_Accept_OTA(gl_u32TargetAddr,  (uint8_t*) buffer_resp , MCU_ACCEPT_RESPONSE)==1){
 8002408:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2205      	movs	r2, #5
 800240e:	49a1      	ldr	r1, [pc, #644]	; (8002694 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc81 	bl	8001d18 <Wait_Accept_OTA>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d115      	bne.n	8002448 <HAL_GPIO_EXTI_Callback+0x84>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800241c:	2028      	movs	r0, #40	; 0x28
 800241e:	f005 fbe2 	bl	8007be6 <HAL_NVIC_DisableIRQ>
				__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8002422:	4b9d      	ldr	r3, [pc, #628]	; (8002698 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002424:	7d1a      	ldrb	r2, [r3, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	751a      	strb	r2, [r3, #20]
 800242a:	7d5a      	ldrb	r2, [r3, #21]
 800242c:	2200      	movs	r2, #0
 800242e:	f042 0204 	orr.w	r2, r2, #4
 8002432:	755a      	strb	r2, [r3, #21]
 8002434:	7d9a      	ldrb	r2, [r3, #22]
 8002436:	2200      	movs	r2, #0
 8002438:	759a      	strb	r2, [r3, #22]
 800243a:	7dda      	ldrb	r2, [r3, #23]
 800243c:	2200      	movs	r2, #0
 800243e:	75da      	strb	r2, [r3, #23]
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_CONFIG_LORA);
 8002440:	2005      	movs	r0, #5
 8002442:	f000 fb33 	bl	8002aac <Rte_SystemState_WriteData>
 8002446:	e0a7      	b.n	8002598 <HAL_GPIO_EXTI_Callback+0x1d4>
			}
			else{
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 fb2f 	bl	8002aac <Rte_SystemState_WriteData>
 800244e:	e0a3      	b.n	8002598 <HAL_GPIO_EXTI_Callback+0x1d4>
			}
		}
		else if ( local_state == SYS_CONFIG_LORA ){
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d12d      	bne.n	80024b2 <HAL_GPIO_EXTI_Callback+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002456:	2028      	movs	r0, #40	; 0x28
 8002458:	f005 fbc5 	bl	8007be6 <HAL_NVIC_DisableIRQ>
			if(LORA_IF_GetData_Frame(&SX1278_2 ,unicast_addr ,(uint8_t*) buffer_resp , ret , 5000 , SIZE_BUFFER_16BYTES ,MCU_RECEIVED_CONFIG ) == 1){
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2221      	movs	r2, #33	; 0x21
 8002464:	9202      	str	r2, [sp, #8]
 8002466:	2210      	movs	r2, #16
 8002468:	9201      	str	r2, [sp, #4]
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	4a88      	ldr	r2, [pc, #544]	; (8002694 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002472:	488b      	ldr	r0, [pc, #556]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002474:	f002 fa4e 	bl	8004914 <LORA_IF_GetData_Frame>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	f040 808c 	bne.w	8002598 <HAL_GPIO_EXTI_Callback+0x1d4>
				__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8002480:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002482:	7d1a      	ldrb	r2, [r3, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	751a      	strb	r2, [r3, #20]
 8002488:	7d5a      	ldrb	r2, [r3, #21]
 800248a:	2200      	movs	r2, #0
 800248c:	f042 0204 	orr.w	r2, r2, #4
 8002490:	755a      	strb	r2, [r3, #21]
 8002492:	7d9a      	ldrb	r2, [r3, #22]
 8002494:	2200      	movs	r2, #0
 8002496:	759a      	strb	r2, [r3, #22]
 8002498:	7dda      	ldrb	r2, [r3, #23]
 800249a:	2200      	movs	r2, #0
 800249c:	75da      	strb	r2, [r3, #23]
				gl_flag_receiveConfig = 1;
 800249e:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
				// Enable timer receive data hear
				// HAL_TIM_Base_Start_IT(&htim2);
				RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 80024a4:	20fe      	movs	r0, #254	; 0xfe
 80024a6:	f000 fc27 	bl	8002cf8 <Rte_FlagLoRaResp_WriteData>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80024aa:	2006      	movs	r0, #6
 80024ac:	f000 fafe 	bl	8002aac <Rte_SystemState_WriteData>
 80024b0:	e072      	b.n	8002598 <HAL_GPIO_EXTI_Callback+0x1d4>
				//GW_State_Save_State(SYS_ENCRYPT_FW);
			}
		}
		else{
			ret = SX1278_LoRaRxPacket(&SX1278_2);
 80024b2:	487b      	ldr	r0, [pc, #492]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80024b4:	f002 f847 	bl	8004546 <SX1278_LoRaRxPacket>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b77      	ldr	r3, [pc, #476]	; (800269c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80024be:	701a      	strb	r2, [r3, #0]
			if ( ret > 0 ) {
 80024c0:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d062      	beq.n	800258e <HAL_GPIO_EXTI_Callback+0x1ca>
				AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 80024c8:	4a77      	ldr	r2, [pc, #476]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80024ca:	4978      	ldr	r1, [pc, #480]	; (80026ac <HAL_GPIO_EXTI_Callback+0x2e8>)
 80024cc:	4878      	ldr	r0, [pc, #480]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80024ce:	f003 fc0d 	bl	8005cec <AES_init_ctx_iv>

				ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_req_2, ret);
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4976      	ldr	r1, [pc, #472]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024da:	4871      	ldr	r0, [pc, #452]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80024dc:	f002 f93b 	bl	8004756 <SX1278_read>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80024e6:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
				AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req_2, 16);
 80024e8:	2210      	movs	r2, #16
 80024ea:	4972      	ldr	r1, [pc, #456]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024ec:	4870      	ldr	r0, [pc, #448]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80024ee:	f004 f9fe 	bl	80068ee <AES_CTR_xcrypt_buffer>

				//convert buffer to address_node_req
				local_u32addrNode_req = (buffer_req_2[0] << SHIFT_24_BIT) |(buffer_req_2[1] << SHIFT_16_BIT)
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	061a      	lsls	r2, r3, #24
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
																		 |(buffer_req_2[2] << SHIFT_8_BIT) | (buffer_req_2[3] << SHIFT_0_BIT);
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002502:	789b      	ldrb	r3, [r3, #2]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	4313      	orrs	r3, r2
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800250a:	78d2      	ldrb	r2, [r2, #3]
 800250c:	4313      	orrs	r3, r2
				local_u32addrNode_req = (buffer_req_2[0] << SHIFT_24_BIT) |(buffer_req_2[1] << SHIFT_16_BIT)
 800250e:	61fb      	str	r3, [r7, #28]
				if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 ||
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4a69      	ldr	r2, [pc, #420]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_EXTI_Callback+0x164>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4a68      	ldr	r2, [pc, #416]	; (80026bc <HAL_GPIO_EXTI_Callback+0x2f8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_EXTI_Callback+0x164>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4a67      	ldr	r2, [pc, #412]	; (80026c0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d132      	bne.n	800258e <HAL_GPIO_EXTI_Callback+0x1ca>
						local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
					{  if(buffer_req_2[4] == 0x01 || buffer_req_2[4] == 0x02){
 8002528:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_EXTI_Callback+0x174>
 8002530:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002532:	791b      	ldrb	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d12a      	bne.n	800258e <HAL_GPIO_EXTI_Callback+0x1ca>
						RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_ReadData(&local_index_data);
 8002538:	f107 030f 	add.w	r3, r7, #15
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fc7d 	bl	8002e3c <Rte_Flag_NodeRequestIndex_ReadData>
						gl_Flag_Timeout =1;
 8002542:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x300>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, &buffer_req_2, 16, HAL_MAX_DELAY);
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	2210      	movs	r2, #16
 800254e:	4959      	ldr	r1, [pc, #356]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002550:	485d      	ldr	r0, [pc, #372]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x304>)
 8002552:	f008 fbd7 	bl	800ad04 <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255a:	485c      	ldr	r0, [pc, #368]	; (80026cc <HAL_GPIO_EXTI_Callback+0x308>)
 800255c:	f006 f87f 	bl	800865e <HAL_GPIO_TogglePin>
						//RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(true);
						// clear data After sending success
						memset(&buffer_req_2 , 0xff,16);
 8002560:	2210      	movs	r2, #16
 8002562:	21ff      	movs	r1, #255	; 0xff
 8002564:	4853      	ldr	r0, [pc, #332]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002566:	f009 ff78 	bl	800c45a <memset>
						HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800256a:	2028      	movs	r0, #40	; 0x28
 800256c:	f005 fb3b 	bl	8007be6 <HAL_NVIC_DisableIRQ>
						__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8002570:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002572:	7d1a      	ldrb	r2, [r3, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	751a      	strb	r2, [r3, #20]
 8002578:	7d5a      	ldrb	r2, [r3, #21]
 800257a:	2200      	movs	r2, #0
 800257c:	f042 0204 	orr.w	r2, r2, #4
 8002580:	755a      	strb	r2, [r3, #21]
 8002582:	7d9a      	ldrb	r2, [r3, #22]
 8002584:	2200      	movs	r2, #0
 8002586:	759a      	strb	r2, [r3, #22]
 8002588:	7dda      	ldrb	r2, [r3, #23]
 800258a:	2200      	movs	r2, #0
 800258c:	75da      	strb	r2, [r3, #23]
					}
					//return 1;
				}
		}
			memset(buffer_resp_2 , 0xff ,16);
 800258e:	2210      	movs	r2, #16
 8002590:	21ff      	movs	r1, #255	; 0xff
 8002592:	484f      	ldr	r0, [pc, #316]	; (80026d0 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002594:	f009 ff61 	bl	800c45a <memset>
		}
	}
	if(GPIO_Pin == DIO_Pin){
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80f1 	bne.w	8002782 <HAL_GPIO_EXTI_Callback+0x3be>
		if( local_state == SYS_SEND_UPDATE){
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	f040 80ed 	bne.w	8002782 <HAL_GPIO_EXTI_Callback+0x3be>
			local_Flag =LORA_IF_GetData_End_Frame(&SX1278_1, (uint8_t*) buffer_packet_Rx, unicast_addr,SIZE_BUFFER_112BYTES, MAX_TIME_OUT);
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2370      	movs	r3, #112	; 0x70
 80025b2:	4948      	ldr	r1, [pc, #288]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 80025b4:	4848      	ldr	r0, [pc, #288]	; (80026d8 <HAL_GPIO_EXTI_Callback+0x314>)
 80025b6:	f002 fa79 	bl	8004aac <LORA_IF_GetData_End_Frame>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			// Write status Flash to LORA RESP
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(local_Flag);
 80025c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fb97 	bl	8002cf8 <Rte_FlagLoRaResp_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(local_Flag);
 80025ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fb5c 	bl	8002c8c <Rte_UI_Error_WriteData>
			switch (local_Flag) {
 80025d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d8:	2b4f      	cmp	r3, #79	; 0x4f
 80025da:	f000 80bb 	beq.w	8002754 <HAL_GPIO_EXTI_Callback+0x390>
 80025de:	2b76      	cmp	r3, #118	; 0x76
 80025e0:	f040 80ce 	bne.w	8002780 <HAL_GPIO_EXTI_Callback+0x3bc>
				case MCU_REQUEST_PACKET_FW_LOSS:
					//get the number packet loss
					memset(buffer_number_pack_lost , 0xffff , 64);
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ea:	483c      	ldr	r0, [pc, #240]	; (80026dc <HAL_GPIO_EXTI_Callback+0x318>)
 80025ec:	f009 ff35 	bl	800c45a <memset>
					uint16_t localcounter = INITIAL_VALUE_ZERO ;
 80025f0:	2300      	movs	r3, #0
 80025f2:	84fb      	strh	r3, [r7, #38]	; 0x26
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 80025f6:	7a9b      	ldrb	r3, [r3, #10]
 80025f8:	061a      	lsls	r2, r3, #24
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 80025fc:	7a5b      	ldrb	r3, [r3, #9]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	431a      	orrs	r2, r3
																				|(buffer_packet_Rx[8] << SHIFT_8_BIT)|(buffer_packet_Rx[7] << SHIFT_0_BIT);
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 8002604:	7a1b      	ldrb	r3, [r3, #8]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	4313      	orrs	r3, r2
 800260a:	4a32      	ldr	r2, [pc, #200]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 800260c:	79d2      	ldrb	r2, [r2, #7]
 800260e:	4313      	orrs	r3, r2
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 8002610:	61bb      	str	r3, [r7, #24]
					copy_Array_BL(u8buffer_Pack_Lost, buffer_packet_Rx,11,88);
 8002612:	2358      	movs	r3, #88	; 0x58
 8002614:	220b      	movs	r2, #11
 8002616:	492f      	ldr	r1, [pc, #188]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x310>)
 8002618:	4831      	ldr	r0, [pc, #196]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x31c>)
 800261a:	f004 fdbb 	bl	8007194 <copy_Array_BL>
					if (FL_CalculateCRCBItmaskLoRa(88,u8buffer_Pack_Lost ) == CRC_bitmask_req){
 800261e:	4930      	ldr	r1, [pc, #192]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002620:	2058      	movs	r0, #88	; 0x58
 8002622:	f7ff fc1f 	bl	8001e64 <FL_CalculateCRCBItmaskLoRa>
 8002626:	4602      	mov	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4293      	cmp	r3, r2
 800262c:	d17f      	bne.n	800272e <HAL_GPIO_EXTI_Callback+0x36a>
						lost_counter_pos = 0;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_GPIO_EXTI_Callback+0x320>)
 8002630:	2200      	movs	r2, #0
 8002632:	801a      	strh	r2, [r3, #0]
						RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_GPIO_EXTI_Callback+0x324>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fb4b 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 800263e:	2300      	movs	r3, #0
 8002640:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002642:	e014      	b.n	800266e <HAL_GPIO_EXTI_Callback+0x2aa>
							if(!FL_getPacketlost((uint8_t*) u8buffer_Pack_Lost , i )){
 8002644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002646:	4619      	mov	r1, r3
 8002648:	4825      	ldr	r0, [pc, #148]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x31c>)
 800264a:	f7ff fd61 	bl	8002110 <FL_getPacketlost>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_GPIO_EXTI_Callback+0x2a4>
								buffer_number_pack_lost[localcounter] = i+1;
 8002654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002658:	3201      	adds	r2, #1
 800265a:	b291      	uxth	r1, r2
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_GPIO_EXTI_Callback+0x318>)
 800265e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								localcounter++;
 8002662:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002664:	3301      	adds	r3, #1
 8002666:	84fb      	strh	r3, [r7, #38]	; 0x26
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 8002668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800266e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_GPIO_EXTI_Callback+0x324>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	429a      	cmp	r2, r3
 8002678:	dbe4      	blt.n	8002644 <HAL_GPIO_EXTI_Callback+0x280>
							}
						}
						if(localcounter == 0){
 800267a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800267c:	2b00      	cmp	r3, #0
 800267e:	d135      	bne.n	80026ec <HAL_GPIO_EXTI_Callback+0x328>
							// no packet Lost
							RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_DONE_UPDATE);
 8002680:	2008      	movs	r0, #8
 8002682:	f000 fa13 	bl	8002aac <Rte_SystemState_WriteData>
							RTE_RUNNABLE_UI_ERROR_WriteData(MCU_ACKNOWLEDGE_FINISHING);
 8002686:	2077      	movs	r0, #119	; 0x77
 8002688:	f000 fb00 	bl	8002c8c <Rte_UI_Error_WriteData>
 800268c:	e04f      	b.n	800272e <HAL_GPIO_EXTI_Callback+0x36a>
 800268e:	bf00      	nop
 8002690:	200004d4 	.word	0x200004d4
 8002694:	200004ec 	.word	0x200004ec
 8002698:	40010400 	.word	0x40010400
 800269c:	20000bb9 	.word	0x20000bb9
 80026a0:	200019d0 	.word	0x200019d0
 80026a4:	20000c80 	.word	0x20000c80
 80026a8:	20000034 	.word	0x20000034
 80026ac:	20000024 	.word	0x20000024
 80026b0:	20000bc0 	.word	0x20000bc0
 80026b4:	20001aec 	.word	0x20001aec
 80026b8:	26011bcd 	.word	0x26011bcd
 80026bc:	26011def 	.word	0x26011def
 80026c0:	260120f0 	.word	0x260120f0
 80026c4:	200004eb 	.word	0x200004eb
 80026c8:	2000183c 	.word	0x2000183c
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	20000ba8 	.word	0x20000ba8
 80026d4:	2000054c 	.word	0x2000054c
 80026d8:	200018a0 	.word	0x200018a0
 80026dc:	20000628 	.word	0x20000628
 80026e0:	200005d0 	.word	0x200005d0
 80026e4:	200004e8 	.word	0x200004e8
 80026e8:	20000020 	.word	0x20000020
						}
						else{
							//Get the number packet
							gl_u16NumberPacket_LoRa = localcounter;
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_GPIO_EXTI_Callback+0x3c8>)
 80026ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026f0:	8013      	strh	r3, [r2, #0]
							gl_u8backup_flag =1;
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
							lost_counter_pos++;
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_GPIO_EXTI_Callback+0x3d0>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_GPIO_EXTI_Callback+0x3d0>)
 8002702:	801a      	strh	r2, [r3, #0]
							// Init first packet
							gl_u16No_Packet_Flash = buffer_number_pack_lost[INITIAL_VALUE_ZERO];
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_GPIO_EXTI_Callback+0x3d8>)
 800270a:	801a      	strh	r2, [r3, #0]
							if(gl_u16No_Packet_Flash != 0xffff){
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_GPIO_EXTI_Callback+0x3d8>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002714:	4293      	cmp	r3, r2
 8002716:	d00a      	beq.n	800272e <HAL_GPIO_EXTI_Callback+0x36a>
								RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_EXTI_Callback+0x3d8>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fad9 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
								RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 8002722:	20fe      	movs	r0, #254	; 0xfe
 8002724:	f000 fae8 	bl	8002cf8 <Rte_FlagLoRaResp_WriteData>
								RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8002728:	2006      	movs	r0, #6
 800272a:	f000 f9bf 	bl	8002aac <Rte_SystemState_WriteData>
							}
						}
					}
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800272e:	2007      	movs	r0, #7
 8002730:	f005 fa59 	bl	8007be6 <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002736:	7d1a      	ldrb	r2, [r3, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	f042 0202 	orr.w	r2, r2, #2
 800273e:	751a      	strb	r2, [r3, #20]
 8002740:	7d5a      	ldrb	r2, [r3, #21]
 8002742:	2200      	movs	r2, #0
 8002744:	755a      	strb	r2, [r3, #21]
 8002746:	7d9a      	ldrb	r2, [r3, #22]
 8002748:	2200      	movs	r2, #0
 800274a:	759a      	strb	r2, [r3, #22]
 800274c:	7dda      	ldrb	r2, [r3, #23]
 800274e:	2200      	movs	r2, #0
 8002750:	75da      	strb	r2, [r3, #23]
					break;
 8002752:	e016      	b.n	8002782 <HAL_GPIO_EXTI_Callback+0x3be>
				case MCU_ERROR_CRC :
					/* SEND UART NRC to ESP hear*/
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8002754:	2000      	movs	r0, #0
 8002756:	f000 f9a9 	bl	8002aac <Rte_SystemState_WriteData>
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800275a:	2007      	movs	r0, #7
 800275c:	f005 fa43 	bl	8007be6 <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002762:	7d1a      	ldrb	r2, [r3, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	f042 0202 	orr.w	r2, r2, #2
 800276a:	751a      	strb	r2, [r3, #20]
 800276c:	7d5a      	ldrb	r2, [r3, #21]
 800276e:	2200      	movs	r2, #0
 8002770:	755a      	strb	r2, [r3, #21]
 8002772:	7d9a      	ldrb	r2, [r3, #22]
 8002774:	2200      	movs	r2, #0
 8002776:	759a      	strb	r2, [r3, #22]
 8002778:	7dda      	ldrb	r2, [r3, #23]
 800277a:	2200      	movs	r2, #0
 800277c:	75da      	strb	r2, [r3, #23]
					//HAL_UART_Transmit(&huart2, gl_u8ErrorFlag, 1, HAL_MAX_DELAY);
					break;
 800277e:	e000      	b.n	8002782 <HAL_GPIO_EXTI_Callback+0x3be>
				default:
					/*Unknown Error*/
					break;
 8002780:	bf00      	nop
			}

		}
	}

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200004e4 	.word	0x200004e4
 8002790:	200004e7 	.word	0x200004e7
 8002794:	200004e8 	.word	0x200004e8
 8002798:	20000628 	.word	0x20000628
 800279c:	20000020 	.word	0x20000020
 80027a0:	40010400 	.word	0x40010400

080027a4 <GW_Config_GetParameter>:

// Global Parameter
uint8_t u8BW; // Bandwidth
uint8_t u8SF; // Spreading Frequency
uint8_t u8CR; // Coding Rate
uint32_t GW_Config_GetParameter(uint32_t Address){
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	return *((volatile uint32_t*)(Address));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <GW_voidEraseRestoreConfigPage>:


void GW_voidEraseRestoreConfigPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 80027bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c0:	b0b2      	sub	sp, #200	; 0xc8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <GW_voidEraseRestoreConfigPage+0x124>)
 80027dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e0:	e031      	b.n	8002846 <GW_voidEraseRestoreConfigPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 80027e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4013      	ands	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d017      	beq.n	800283c <GW_voidEraseRestoreConfigPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 800280c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	33c8      	adds	r3, #200	; 0xc8
 8002814:	443b      	add	r3, r7
 8002816:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800281a:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 800281e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002822:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	33c8      	adds	r3, #200	; 0xc8
 800282c:	443b      	add	r3, r7
 800282e:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 8002832:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002836:	3301      	adds	r3, #1
 8002838:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 800283c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002840:	3304      	adds	r3, #4
 8002842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 8002846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <GW_voidEraseRestoreConfigPage+0x128>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d9c8      	bls.n	80027e2 <GW_voidEraseRestoreConfigPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8002854:	2301      	movs	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_STATUS_GW_CONFIG;
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <GW_voidEraseRestoreConfigPage+0x124>)
 800285a:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 800285c:	2301      	movs	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8002860:	f005 fafe 	bl	8007e60 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8002864:	f107 020c 	add.w	r2, r7, #12
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f005 fbde 	bl	8008030 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8002874:	2300      	movs	r3, #0
 8002876:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800287a:	e01a      	b.n	80028b2 <GW_voidEraseRestoreConfigPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 800287c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	33c8      	adds	r3, #200	; 0xc8
 8002884:	443b      	add	r3, r7
 8002886:	f853 1c58 	ldr.w	r1, [r3, #-88]
 800288a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	33c8      	adds	r3, #200	; 0xc8
 8002892:	443b      	add	r3, r7
 8002894:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002898:	2200      	movs	r2, #0
 800289a:	4698      	mov	r8, r3
 800289c:	4691      	mov	r9, r2
 800289e:	4642      	mov	r2, r8
 80028a0:	464b      	mov	r3, r9
 80028a2:	2002      	movs	r0, #2
 80028a4:	f005 fa6c 	bl	8007d80 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80028a8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80028ac:	3301      	adds	r3, #1
 80028ae:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80028b2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80028b6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3de      	bcc.n	800287c <GW_voidEraseRestoreConfigPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	461c      	mov	r4, r3
 80028c4:	4615      	mov	r5, r2
 80028c6:	4622      	mov	r2, r4
 80028c8:	462b      	mov	r3, r5
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	2002      	movs	r0, #2
 80028ce:	f005 fa57 	bl	8007d80 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80028d2:	f005 faeb 	bl	8007eac <HAL_FLASH_Lock>
}
 80028d6:	bf00      	nop
 80028d8:	37c8      	adds	r7, #200	; 0xc8
 80028da:	46bd      	mov	sp, r7
 80028dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028e0:	0801fc00 	.word	0x0801fc00
 80028e4:	0801fc4f 	.word	0x0801fc4f

080028e8 <GW_Config_Init>:


void GW_Config_Init(void){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 80028ee:	2310      	movs	r3, #16
 80028f0:	9305      	str	r3, [sp, #20]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9304      	str	r3, [sp, #16]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9303      	str	r3, [sp, #12]
 80028fa:	2307      	movs	r3, #7
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	2306      	movs	r3, #6
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2301      	movs	r3, #1
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	a31f      	add	r3, pc, #124	; (adr r3, 8002984 <GW_Config_Init+0x9c>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	4818      	ldr	r0, [pc, #96]	; (8002970 <GW_Config_Init+0x88>)
 800290e:	f001 fef5 	bl	80046fc <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 8002912:	2310      	movs	r3, #16
 8002914:	9305      	str	r3, [sp, #20]
 8002916:	2300      	movs	r3, #0
 8002918:	9304      	str	r3, [sp, #16]
 800291a:	2300      	movs	r3, #0
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	2307      	movs	r3, #7
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2306      	movs	r3, #6
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2301      	movs	r3, #1
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	a30f      	add	r3, pc, #60	; (adr r3, 8002968 <GW_Config_Init+0x80>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	4810      	ldr	r0, [pc, #64]	; (8002974 <GW_Config_Init+0x8c>)
 8002932:	f001 fee3 	bl	80046fc <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);

	//init Lora RA-02 spi 2 RX mode
	//SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	RTE_RUNNABLE_APP_VER_WriteData(GW_Config_GetParameter(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS));
 8002936:	4810      	ldr	r0, [pc, #64]	; (8002978 <GW_Config_Init+0x90>)
 8002938:	f7ff ff34 	bl	80027a4 <GW_Config_GetParameter>
 800293c:	4603      	mov	r3, r0
 800293e:	b29b      	uxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f913 	bl	8002b6c <Rte_ApplVer_WriteData>
	RTE_RUNNABLE_NODE_ADDR_WriteData(GW_Config_GetParameter(FLAG_STATUS_ADDRESS_TARGET_ADDRESS));
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <GW_Config_Init+0x94>)
 8002948:	f7ff ff2c 	bl	80027a4 <GW_Config_GetParameter>
 800294c:	4603      	mov	r3, r0
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f930 	bl	8002bb4 <Rte_NodeAddr_WriteData>
	RTE_RUNNABLE_CODE_SIZE_WriteData(GW_Config_GetParameter(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS));
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <GW_Config_Init+0x98>)
 8002956:	f7ff ff25 	bl	80027a4 <GW_Config_GetParameter>
 800295a:	4603      	mov	r3, r0
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f917 	bl	8002b90 <Rte_CodeSize_WriteData>
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	19cf0e40 	.word	0x19cf0e40
 800296c:	00000000 	.word	0x00000000
 8002970:	200018a0 	.word	0x200018a0
 8002974:	200019d0 	.word	0x200019d0
 8002978:	0801fc30 	.word	0x0801fc30
 800297c:	0801fc34 	.word	0x0801fc34
 8002980:	0801fc38 	.word	0x0801fc38
 8002984:	19de5080 	.word	0x19de5080
 8002988:	00000000 	.word	0x00000000

0800298c <GW_State_Save_State>:

void GW_State_Save_State(uint8_t State){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
	GW_voidEraseRestoreConfigPage(FLAG_STATE_GW_CONFIG,State );
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4619      	mov	r1, r3
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <GW_State_Save_State+0x1c>)
 800299c:	f7ff ff0e 	bl	80027bc <GW_voidEraseRestoreConfigPage>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	0801fc08 	.word	0x0801fc08

080029ac <GW_Reset_State>:
void GW_Reset_State(void){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	uint8_t flag_reset = 0xFB;
 80029b2:	23fb      	movs	r3, #251	; 0xfb
 80029b4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&flag_reset, 1, HAL_MAX_DELAY);
 80029b6:	1df9      	adds	r1, r7, #7
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295
 80029bc:	2201      	movs	r2, #1
 80029be:	4803      	ldr	r0, [pc, #12]	; (80029cc <GW_Reset_State+0x20>)
 80029c0:	f008 f9a0 	bl	800ad04 <HAL_UART_Transmit>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000183c 	.word	0x2000183c

080029d0 <GW_State_Init>:
void GW_State_Init(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
	uint8_t local_state = 0 ;
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]
	local_state = GW_Config_GetParameter(FLAG_STATE_GW_CONFIG);
 80029da:	480a      	ldr	r0, [pc, #40]	; (8002a04 <GW_State_Init+0x34>)
 80029dc:	f7ff fee2 	bl	80027a4 <GW_Config_GetParameter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
	if (local_state  == 0xFF){
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d103      	bne.n	80029f2 <GW_State_Init+0x22>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f85e 	bl	8002aac <Rte_SystemState_WriteData>
	}
	else{
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
	}
}
 80029f0:	e003      	b.n	80029fa <GW_State_Init+0x2a>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f859 	bl	8002aac <Rte_SystemState_WriteData>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	0801fc08 	.word	0x0801fc08

08002a08 <GW_Config_SetUp>:
void GW_Config_SetUp(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af06      	add	r7, sp, #24
	uint32_t GW_u32LocalStatus_GW_Config = GW_Config_GetParameter(FLAG_STATUS_GW_CONFIG);
 8002a0e:	4820      	ldr	r0, [pc, #128]	; (8002a90 <GW_Config_SetUp+0x88>)
 8002a10:	f7ff fec8 	bl	80027a4 <GW_Config_GetParameter>
 8002a14:	6078      	str	r0, [r7, #4]
	uint32_t GW_u32LocalParameter= GW_Config_GetParameter(FLAG_PARAMETER_GW_CONFIG);
 8002a16:	481f      	ldr	r0, [pc, #124]	; (8002a94 <GW_Config_SetUp+0x8c>)
 8002a18:	f7ff fec4 	bl	80027a4 <GW_Config_GetParameter>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	603b      	str	r3, [r7, #0]
	// Get Parameter

	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_SET ){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <GW_Config_SetUp+0x28>

		// SET CONFIG Value as Default
		GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG ,GW_CONFIG_PARAMETER_SF_BW_CR_DEFAULT );
 8002a28:	491b      	ldr	r1, [pc, #108]	; (8002a98 <GW_Config_SetUp+0x90>)
 8002a2a:	481a      	ldr	r0, [pc, #104]	; (8002a94 <GW_Config_SetUp+0x8c>)
 8002a2c:	f7ff fec6 	bl	80027bc <GW_voidEraseRestoreConfigPage>
	}
	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_RESET ){
		// do nothing
	}
	RTE_RUNNABLE_CONFIG_LORA_ReadData(&GW_u32LocalParameter);
 8002a30:	463b      	mov	r3, r7
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f9a8 	bl	8002d88 <Rte_FlagConfigLoRA_ReadData>
	u8SF = (GW_u32LocalParameter >> SHIFT_16_BIT)& 0xFF ;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <GW_Config_SetUp+0x94>)
 8002a40:	701a      	strb	r2, [r3, #0]
	u8BW = (GW_u32LocalParameter >> SHIFT_8_BIT)& 0xFF ;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <GW_Config_SetUp+0x98>)
 8002a4a:	701a      	strb	r2, [r3, #0]
	u8CR = (GW_u32LocalParameter >> SHIFT_0_BIT)& 0xFF ;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <GW_Config_SetUp+0x9c>)
 8002a52:	701a      	strb	r2, [r3, #0]
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, u8SF,
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <GW_Config_SetUp+0x94>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <GW_Config_SetUp+0x98>)
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <GW_Config_SetUp+0x9c>)
 8002a5e:	7809      	ldrb	r1, [r1, #0]
 8002a60:	2010      	movs	r0, #16
 8002a62:	9005      	str	r0, [sp, #20]
 8002a64:	2000      	movs	r0, #0
 8002a66:	9004      	str	r0, [sp, #16]
 8002a68:	9103      	str	r1, [sp, #12]
 8002a6a:	9202      	str	r2, [sp, #8]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	a305      	add	r3, pc, #20	; (adr r3, 8002a88 <GW_Config_SetUp+0x80>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <GW_Config_SetUp+0xa0>)
 8002a7a:	f001 fe3f 	bl	80046fc <SX1278_init>
			u8BW, u8CR, SX1278_LORA_CRC_EN, 16);
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	19de5080 	.word	0x19de5080
 8002a8c:	00000000 	.word	0x00000000
 8002a90:	0801fc00 	.word	0x0801fc00
 8002a94:	0801fc04 	.word	0x0801fc04
 8002a98:	00010801 	.word	0x00010801
 8002a9c:	20000c85 	.word	0x20000c85
 8002aa0:	20000c84 	.word	0x20000c84
 8002aa4:	20000c86 	.word	0x20000c86
 8002aa8:	200018a0 	.word	0x200018a0

08002aac <Rte_SystemState_WriteData>:
static uint8_t gl_u8Flag_Node_Status_Node1 =INITIAL_VALUE_ZERO ;
/*Port*/
/**************************************************************************/
/*                         Ports Write SystemState                         */
/**************************************************************************/
Std_ReturnType Rte_SystemState_WriteData(uint8_t SystemStateVar){
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
	gl_u8SystemState = SystemStateVar;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <Rte_SystemState_WriteData+0x20>)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000c87 	.word	0x20000c87

08002ad0 <Rte_SystemState_ReadData>:
/**************************************************************************/
/*                         Ports Read SystemState                        */
/**************************************************************************/
Std_ReturnType Rte_SystemState_ReadData(uint8_t *SystemStateVar){
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
	(*SystemStateVar) = gl_u8SystemState;
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <Rte_SystemState_ReadData+0x20>)
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	20000c87 	.word	0x20000c87

08002af4 <Rte_EncyptedBuffer_WriteData>:
/**************************************************************************/
/*                         Ports Write Encrypt                            */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_WriteData(uint8_t *EncyptedBufferP2Var){
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <Rte_EncyptedBuffer_WriteData+0x18>
		gl_EncryptDataBufferPtr = EncyptedBufferP2Var;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <Rte_EncyptedBuffer_WriteData+0x24>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6013      	str	r3, [r2, #0]
	return retVal;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	20000c9c 	.word	0x20000c9c

08002b1c <Rte_EncyptedBuffer_ReadData>:
	return retVal;
}
/**************************************************************************/
/*                         Ports Read Encrypt                             */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_ReadData(uint8_t **EncyptedBufferP2Var){
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <Rte_EncyptedBuffer_ReadData+0x1a>
		(*EncyptedBufferP2Var) = gl_EncryptDataBufferPtr;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <Rte_EncyptedBuffer_ReadData+0x28>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
	return retVal;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000c9c 	.word	0x20000c9c

08002b48 <Rte_Crc_WriteData>:


/**************************************************************************/
/*                         Ports Write Update FW                         */
/**************************************************************************/
Std_ReturnType Rte_Crc_WriteData(uint32_t CRCVar){
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
	gl_u32CRCVar = CRCVar;
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <Rte_Crc_WriteData+0x20>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
	return retVal;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000c88 	.word	0x20000c88

08002b6c <Rte_ApplVer_WriteData>:
Std_ReturnType Rte_ApplVer_WriteData(uint16_t ApplVerVar){
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
	gl_u8ApplVerVar = ApplVerVar;
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <Rte_ApplVer_WriteData+0x20>)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000c8c 	.word	0x20000c8c

08002b90 <Rte_CodeSize_WriteData>:
Std_ReturnType Rte_CodeSize_WriteData(uint32_t CodeSizeVar){
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
	gl_u32CodeSizeVar = CodeSizeVar;
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <Rte_CodeSize_WriteData+0x20>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
	return retVal;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000c90 	.word	0x20000c90

08002bb4 <Rte_NodeAddr_WriteData>:
Std_ReturnType Rte_NodeAddr_WriteData(uint32_t NodeAddrVar){
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
	gl_u32NodeAddrVar = NodeAddrVar;
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <Rte_NodeAddr_WriteData+0x20>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
	return retVal;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000c94 	.word	0x20000c94

08002bd8 <Rte_UpdateProgress_WriteData>:
{
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8HeaderAckFLagVar = HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_WriteData(uint8_t UpdateProgressVar){
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
	gl_u8UpdateProgressVar = UpdateProgressVar;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <Rte_UpdateProgress_WriteData+0x20>)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	20000c98 	.word	0x20000c98

08002bfc <Rte_ApplVer_ReadData>:
Std_ReturnType Rte_Crc_ReadData(uint32_t *CRCVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*CRCVar) = gl_u32CRCVar;
	return retVal;
}
Std_ReturnType Rte_ApplVer_ReadData(uint16_t *ApplVerVar){
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
	(*ApplVerVar) = gl_u8ApplVerVar;
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <Rte_ApplVer_ReadData+0x20>)
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000c8c 	.word	0x20000c8c

08002c20 <Rte_CodeSize_ReadData>:
Std_ReturnType Rte_CodeSize_ReadData(uint32_t *CodeSizeVar){
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
	(*CodeSizeVar) = gl_u32CodeSizeVar;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <Rte_CodeSize_ReadData+0x20>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
	return retVal;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000c90 	.word	0x20000c90

08002c44 <Rte_NodeAddr_ReadData>:
Std_ReturnType Rte_NodeAddr_ReadData(uint32_t *NodeAddrVar){
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
	(*NodeAddrVar) = gl_u32NodeAddrVar;
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <Rte_NodeAddr_ReadData+0x20>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
	return retVal;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	20000c94 	.word	0x20000c94

08002c68 <Rte_UpdateProgress_ReadData>:
Std_ReturnType Rte_HeaderAckFlag_ReadData(uint8_t *HeaderAckFLagVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*HeaderAckFLagVar) = gl_u8HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_ReadData(uint8_t *UpdateProgressVar){
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
	(*UpdateProgressVar) = gl_u8UpdateProgressVar;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <Rte_UpdateProgress_ReadData+0x20>)
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000c98 	.word	0x20000c98

08002c8c <Rte_UI_Error_WriteData>:
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8UserResponseVar = UserResponseVar;
	return retVal;
}

Std_ReturnType Rte_UI_Error_WriteData(uint8_t UIErrorVar){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
	gl_u8UIErrorVar = UIErrorVar;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <Rte_UI_Error_WriteData+0x20>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000ca0 	.word	0x20000ca0

08002cb0 <Rte_UI_Error_ReadData>:

/**************************************************************************/
/*                        Ports  Read UI						 		  */
/**************************************************************************/
Std_ReturnType Rte_UI_Error_ReadData(uint8_t *UIErrorVar ){
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
	(*UIErrorVar) = gl_u8UIErrorVar;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <Rte_UI_Error_ReadData+0x20>)
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000ca0 	.word	0x20000ca0

08002cd4 <Rte_PacketSendLoraNum_WriteData>:
	return retVal;
}
/**************************************************************************/
/*                        Ports  Write num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_WriteData(uint16_t NumPacketLoraFWVar){
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
	gl_u16NumPacketLoraFWVar = NumPacketLoraFWVar;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <Rte_PacketSendLoraNum_WriteData+0x20>)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000ca2 	.word	0x20000ca2

08002cf8 <Rte_FlagLoRaResp_WriteData>:

Std_ReturnType Rte_FlagLoRaResp_WriteData(uint8_t FlagLoRaRespVar){
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRaRespVar = FlagLoRaRespVar;
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <Rte_FlagLoRaResp_WriteData+0x20>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000ca4 	.word	0x20000ca4

08002d1c <Rte_FlagConfigLoRA_WriteData>:

Std_ReturnType Rte_FlagConfigLoRA_WriteData(uint32_t FlagLoraConfigVar){
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
	gl_u32FlagLoraConfigVar = FlagLoraConfigVar;
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <Rte_FlagConfigLoRA_WriteData+0x20>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
	return retVal;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000ca8 	.word	0x20000ca8

08002d40 <Rte_PacketSendLoraNum_ReadData>:


/**************************************************************************/
/*                        Ports  Read num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_ReadData(uint16_t *NumPacketLoraFWVar){
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
	(*NumPacketLoraFWVar) = gl_u16NumPacketLoraFWVar;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <Rte_PacketSendLoraNum_ReadData+0x20>)
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000ca2 	.word	0x20000ca2

08002d64 <Rte_FlagLoRaResp_ReadData>:
Std_ReturnType Rte_FlagLoRaResp_ReadData(uint8_t *FlagLoRaRespVar){
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
	(*FlagLoRaRespVar) = gl_u8FlagLoRaRespVar;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <Rte_FlagLoRaResp_ReadData+0x20>)
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000ca4 	.word	0x20000ca4

08002d88 <Rte_FlagConfigLoRA_ReadData>:

Std_ReturnType Rte_FlagConfigLoRA_ReadData(uint32_t *FlagLoraConfigVar){
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
	(*FlagLoraConfigVar) =gl_u32FlagLoraConfigVar ;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <Rte_FlagConfigLoRA_ReadData+0x20>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	601a      	str	r2, [r3, #0]
	return retVal;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000ca8 	.word	0x20000ca8

08002dac <Rte_PacketLoRaReceived_WriteData>:

/**************************************************************************/
/*                         Ports Write Received Packet LoRa            */
/**************************************************************************/
Std_ReturnType Rte_PacketLoRaReceived_WriteData(uint8_t *BufferLoRaReceivedP2Var ){
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
	gl_DataBufferLoRaPtr= BufferLoRaReceivedP2Var;
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <Rte_PacketLoRaReceived_WriteData+0x20>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
	return retVal;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000cb0 	.word	0x20000cb0

08002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>:
	(*BufferLoRaReceivedP2Var) = gl_DataBufferLoRaPtr;
	return retVal;
}


Std_ReturnType Rte_Flag_LoRaRequestDevice_WriteData(uint8_t FlagLoRa_DeviceVar){
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRa_DeviceVar = FlagLoRa_DeviceVar;
 8002dde:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <Rte_Flag_LoRaRequestDevice_WriteData+0x20>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000cac 	.word	0x20000cac

08002df4 <Rte_Flag_LoRaRequestDevice_ReadData>:

Std_ReturnType Rte_Flag_LoRaRequestDevice_ReadData(uint8_t *FlagLoRa_DeviceVar){
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
	(*FlagLoRa_DeviceVar) = gl_u8FlagLoRa_DeviceVar;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <Rte_Flag_LoRaRequestDevice_ReadData+0x20>)
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000cac 	.word	0x20000cac

08002e18 <Rte_Flag_NodeRequestIndex_WriteData>:

/***************************************************************************/
/* 							Ports Define Node Connect                      */
/***************************************************************************/
Std_ReturnType Rte_Flag_NodeRequestIndex_WriteData(uint8_t NumIndex_Node){
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
	gl_u8NumIndex_Node = NumIndex_Node;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <Rte_Flag_NodeRequestIndex_WriteData+0x20>)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000cb4 	.word	0x20000cb4

08002e3c <Rte_Flag_NodeRequestIndex_ReadData>:
Std_ReturnType Rte_Flag_NodeRequestIndex_ReadData(uint8_t *NumIndex_Node){
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
	(*NumIndex_Node) = gl_u8NumIndex_Node;
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <Rte_Flag_NodeRequestIndex_ReadData+0x20>)
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000cb4 	.word	0x20000cb4

08002e60 <Rte_Flag_Total_request_packet_WriteData>:

Std_ReturnType Rte_Flag_Total_request_packet_WriteData(uint16_t Num_Total_Packet){
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
	gl_u16totalpacket = Num_Total_Packet;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <Rte_Flag_Total_request_packet_WriteData+0x20>)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	20000cb6 	.word	0x20000cb6

08002e84 <Rte_Flag_Total_request_packet_ReadData>:

Std_ReturnType Rte_Flag_Total_request_packet_ReadData(uint16_t *Num_Total_Packet){
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
	(*Num_Total_Packet) = gl_u16totalpacket;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <Rte_Flag_Total_request_packet_ReadData+0x20>)
 8002e92:	881a      	ldrh	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	20000cb6 	.word	0x20000cb6

08002ea8 <Rte_Flag_NodeStatus_WriteData_Node1>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node1(uint8_t Flag_Node_Status){
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node1  = Flag_Node_Status;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <Rte_Flag_NodeStatus_WriteData_Node1+0x20>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000cba 	.word	0x20000cba

08002ecc <Rte_Flag_NodeStatus_WriteData_Node2>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node2(uint8_t Flag_Node_Status){
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node2  = Flag_Node_Status;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <Rte_Flag_NodeStatus_WriteData_Node2+0x20>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000cb8 	.word	0x20000cb8

08002ef0 <Rte_Flag_NodeStatus_WriteData_Node3>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node3(uint8_t Flag_Node_Status){
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node3  = Flag_Node_Status;
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <Rte_Flag_NodeStatus_WriteData_Node3+0x20>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	20000cb9 	.word	0x20000cb9

08002f14 <Rte_Flag_NodeStatus_ReadData_Node1>:
Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node1(uint8_t *Flag_Node_Status){
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node1;
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <Rte_Flag_NodeStatus_ReadData_Node1+0x20>)
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	20000cba 	.word	0x20000cba

08002f38 <Rte_Flag_NodeStatus_ReadData_Node2>:

Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node2(uint8_t *Flag_Node_Status){
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node2 ;
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <Rte_Flag_NodeStatus_ReadData_Node2+0x20>)
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	20000cb8 	.word	0x20000cb8

08002f5c <Rte_Flag_NodeStatus_ReadData_Node3>:

Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node3(uint8_t *Flag_Node_Status){
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node3 ;
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <Rte_Flag_NodeStatus_ReadData_Node3+0x20>)
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000cb9 	.word	0x20000cb9

08002f80 <ReceiveFWUpdate_Init>:

/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveFWUpdate_Init(void){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	gl_u32NodeAddr 						= INITIAL_VALUE_ZERO;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <ReceiveFWUpdate_Init+0x84>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
	gl_u8TypeFlag 						= INITIAL_VALUE_ZERO;
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <ReceiveFWUpdate_Init+0x88>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
	gl_u32ImgSize 						= INITIAL_VALUE_ZERO;
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <ReceiveFWUpdate_Init+0x8c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
	gl_u16AppVersion 					= INITIAL_VALUE_ZERO;
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <ReceiveFWUpdate_Init+0x90>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
	gl_u32CRCValue 						= INITIAL_VALUE_ZERO;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <ReceiveFWUpdate_Init+0x94>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
	gl_u32ConfigLoRa 					= INITIAL_VALUE_ZERO;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <ReceiveFWUpdate_Init+0x98>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
	gl_u8SystemState 					= SYS_IDLE;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <ReceiveFWUpdate_Init+0x9c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
	gl_RXUartInternal_State 			= RX_IDLE;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <ReceiveFWUpdate_Init+0xa0>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
	gl_u8RxUserResp						= INITIAL_VALUE_ZERO;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <ReceiveFWUpdate_Init+0xa4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
	gl_u8DonwLoadPercentProogess 		= INITIAL_VALUE_ZERO;
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <ReceiveFWUpdate_Init+0xa8>)
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
	gl_u32Remain_Byte					= INITIAL_VALUE_ZERO;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <ReceiveFWUpdate_Init+0xac>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
	gl_u8DownLoadUpdateProgress 		= INITIAL_VALUE_ZERO;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <ReceiveFWUpdate_Init+0xb0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
	gl_u8NumberPacket_Uart 				= INITIAL_VALUE_ZERO;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <ReceiveFWUpdate_Init+0xb4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
	gl_u16NumberPacket_LoRa 				= INITIAL_VALUE_ZERO;
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <ReceiveFWUpdate_Init+0xb8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	801a      	strh	r2, [r3, #0]
	gl_u32ReceiveBytes 					= INITIAL_VALUE_ZERO;
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <ReceiveFWUpdate_Init+0xbc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <ReceiveFWUpdate_Init+0xc0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <ReceiveFWUpdate_Init+0xc0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 	1);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4914      	ldr	r1, [pc, #80]	; (8003044 <ReceiveFWUpdate_Init+0xc4>)
 8002ff4:	4812      	ldr	r0, [pc, #72]	; (8003040 <ReceiveFWUpdate_Init+0xc0>)
 8002ff6:	f007 ff08 	bl	800ae0a <HAL_UART_Receive_IT>

	F_voidInitVariables();
 8002ffa:	f7fe fb9d 	bl	8001738 <F_voidInitVariables>
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000cbc 	.word	0x20000cbc
 8003008:	20000cc0 	.word	0x20000cc0
 800300c:	20000cc4 	.word	0x20000cc4
 8003010:	20000cc8 	.word	0x20000cc8
 8003014:	20000ccc 	.word	0x20000ccc
 8003018:	20000cd0 	.word	0x20000cd0
 800301c:	20001101 	.word	0x20001101
 8003020:	20000cd4 	.word	0x20000cd4
 8003024:	20001100 	.word	0x20001100
 8003028:	200010f8 	.word	0x200010f8
 800302c:	200010f0 	.word	0x200010f0
 8003030:	200010f4 	.word	0x200010f4
 8003034:	200010ed 	.word	0x200010ed
 8003038:	200010ee 	.word	0x200010ee
 800303c:	200010fc 	.word	0x200010fc
 8003040:	2000183c 	.word	0x2000183c
 8003044:	200010d8 	.word	0x200010d8

08003048 <ReceiveFWUpdate_MainFunc>:
void ReceiveFWUpdate_MainFunc(void){
 8003048:	b598      	push	{r3, r4, r7, lr}
 800304a:	af00      	add	r7, sp, #0
	switch (gl_RXUartInternal_State) {
 800304c:	4ba5      	ldr	r3, [pc, #660]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	f200 8280 	bhi.w	8003556 <ReceiveFWUpdate_MainFunc+0x50e>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <ReceiveFWUpdate_MainFunc+0x14>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	08003091 	.word	0x08003091
 8003060:	080030b3 	.word	0x080030b3
 8003064:	0800311f 	.word	0x0800311f
 8003068:	08003557 	.word	0x08003557
 800306c:	0800333d 	.word	0x0800333d
 8003070:	08003557 	.word	0x08003557
 8003074:	08003557 	.word	0x08003557
 8003078:	08003557 	.word	0x08003557
 800307c:	08003557 	.word	0x08003557
 8003080:	08003557 	.word	0x08003557
 8003084:	08003557 	.word	0x08003557
 8003088:	080034d5 	.word	0x080034d5
 800308c:	080030e7 	.word	0x080030e7
		case RX_IDLE:

		{	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003090:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	60da      	str	r2, [r3, #12]
			if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST)
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 8258 	bne.w	800355a <ReceiveFWUpdate_MainFunc+0x512>
				gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 80030aa:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
			break;
 80030b0:	e253      	b.n	800355a <ReceiveFWUpdate_MainFunc+0x512>
		}
		case RX_ACCEPT_UPDATE :
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;
 80030b2:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030b4:	2205      	movs	r2, #5
 80030b6:	701a      	strb	r2, [r3, #0]
			// Stop IT Timer vs EXT
			HAL_TIM_Base_Stop_IT(&htim2);
 80030b8:	488e      	ldr	r0, [pc, #568]	; (80032f4 <ReceiveFWUpdate_MainFunc+0x2ac>)
 80030ba:	f007 fa17 	bl	800a4ec <HAL_TIM_Base_Stop_IT>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80030be:	2028      	movs	r0, #40	; 0x28
 80030c0:	f004 fd91 	bl	8007be6 <HAL_NVIC_DisableIRQ>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 80030c4:	2004      	movs	r0, #4
 80030c6:	f7ff fe83 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
			F_Erase_Image(IMAGE_NEW_FIRMWARE);
 80030ca:	488b      	ldr	r0, [pc, #556]	; (80032f8 <ReceiveFWUpdate_MainFunc+0x2b0>)
 80030cc:	f7fe fb80 	bl	80017d0 <F_Erase_Image>
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	2201      	movs	r2, #1
 80030d6:	4986      	ldr	r1, [pc, #536]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030d8:	4883      	ldr	r0, [pc, #524]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030da:	f007 fe13 	bl	800ad04 <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 80030de:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 80030e0:	2202      	movs	r2, #2
 80030e2:	701a      	strb	r2, [r3, #0]
			break;
 80030e4:	e23e      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
		}
		case RX_DENY_UPDATE:
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_DENY;
 80030e6:	4b82      	ldr	r3, [pc, #520]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030e8:	2206      	movs	r2, #6
 80030ea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	2201      	movs	r2, #1
 80030f2:	497f      	ldr	r1, [pc, #508]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030f4:	487c      	ldr	r0, [pc, #496]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030f6:	f007 fe05 	bl	800ad04 <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_u8RxUserResp = INITIAL_VALUE_ZERO;
 80030fa:	4b80      	ldr	r3, [pc, #512]	; (80032fc <ReceiveFWUpdate_MainFunc+0x2b4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff fcd3 	bl	8002aac <Rte_SystemState_WriteData>
			// Enable Uart Interrupt hear
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003106:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0220 	orr.w	r2, r2, #32
 8003114:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State = RX_IDLE;
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
			break;
 800311c:	e222      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
			/*Receive Header file*/
			//HAL_UART_Receive(&huart2, gl_u8RXBuffer_Header, HEADER_CONFIG_SIZE, HAL_MAX_DELAY);
			/*Put Information FW to RTE*/
			//byte 7 to byte 4 is size

			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003120:	7a1b      	ldrb	r3, [r3, #8]
 8003122:	461a      	mov	r2, r3
 8003124:	4b76      	ldr	r3, [pc, #472]	; (8003300 <ReceiveFWUpdate_MainFunc+0x2b8>)
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	4b70      	ldr	r3, [pc, #448]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800312c:	79db      	ldrb	r3, [r3, #7]
 800312e:	4619      	mov	r1, r3
 8003130:	f242 7310 	movw	r3, #10000	; 0x2710
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	441a      	add	r2, r3
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 800313a:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	4619      	mov	r1, r3
 8003140:	2364      	movs	r3, #100	; 0x64
 8003142:	fb01 f303 	mul.w	r3, r1, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8003146:	4413      	add	r3, r2
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8003148:	4a68      	ldr	r2, [pc, #416]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800314a:	7952      	ldrb	r2, [r2, #5]
 800314c:	4413      	add	r3, r2
 800314e:	461a      	mov	r2, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003152:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = (gl_u8RXBuffer_Header[9] << SHIFT_8_BIT) | (gl_u8RXBuffer_Header[10] << SHIFT_0_BIT);
 8003154:	4b65      	ldr	r3, [pc, #404]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003156:	7a5b      	ldrb	r3, [r3, #9]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b21a      	sxth	r2, r3
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800315e:	7a9b      	ldrb	r3, [r3, #10]
 8003160:	b21b      	sxth	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b67      	ldr	r3, [pc, #412]	; (8003308 <ReceiveFWUpdate_MainFunc+0x2c0>)
 800316a:	801a      	strh	r2, [r3, #0]
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800316e:	7b9b      	ldrb	r3, [r3, #14]
 8003170:	061a      	lsls	r2, r3, #24
 8003172:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003174:	7b1b      	ldrb	r3, [r3, #12]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
							 |(gl_u8RXBuffer_Header[11] <<  SHIFT_8_BIT)  | (gl_u8RXBuffer_Header[13] << SHIFT_0_BIT);
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800317c:	7adb      	ldrb	r3, [r3, #11]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	4313      	orrs	r3, r2
 8003182:	4a5a      	ldr	r2, [pc, #360]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003184:	7b52      	ldrb	r2, [r2, #13]
 8003186:	4313      	orrs	r3, r2
 8003188:	461a      	mov	r2, r3
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 800318a:	4b60      	ldr	r3, [pc, #384]	; (800330c <ReceiveFWUpdate_MainFunc+0x2c4>)
 800318c:	601a      	str	r2, [r3, #0]
			//Update Parameter
			//F_FlashWordToAddress(FLAG_PARAMETER_GW_CONFIG, gl_u32ConfigLoRa);



			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	061a      	lsls	r2, r3, #24
 8003194:	4b55      	ldr	r3, [pc, #340]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
					|(gl_u8RXBuffer_Header[2]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[3]<<  SHIFT_0_BIT);
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 800319e:	789b      	ldrb	r3, [r3, #2]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	4313      	orrs	r3, r2
 80031a4:	4a51      	ldr	r2, [pc, #324]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031a6:	78d2      	ldrb	r2, [r2, #3]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	461a      	mov	r2, r3
			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 80031ac:	4b58      	ldr	r3, [pc, #352]	; (8003310 <ReceiveFWUpdate_MainFunc+0x2c8>)
 80031ae:	601a      	str	r2, [r3, #0]
			//CRC firmware
			gl_u32CRCValue =(gl_u8RXBuffer_Header[17]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[16]<<  SHIFT_16_BIT)
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031b2:	7c5b      	ldrb	r3, [r3, #17]
 80031b4:	061a      	lsls	r2, r3, #24
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031b8:	7c1b      	ldrb	r3, [r3, #16]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
							|(gl_u8RXBuffer_Header[15]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[14]<<  SHIFT_0_BIT);
 80031be:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031c0:	7bdb      	ldrb	r3, [r3, #15]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	4313      	orrs	r3, r2
 80031c6:	4a49      	ldr	r2, [pc, #292]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031c8:	7b92      	ldrb	r2, [r2, #14]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	461a      	mov	r2, r3
			gl_u32CRCValue =(gl_u8RXBuffer_Header[17]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[16]<<  SHIFT_16_BIT)
 80031ce:	4b51      	ldr	r3, [pc, #324]	; (8003314 <ReceiveFWUpdate_MainFunc+0x2cc>)
 80031d0:	601a      	str	r2, [r3, #0]


			gl_u8RXBuffer_Flag_Req_Bytes = gl_u8RXBuffer_Header[4];
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80031d4:	791a      	ldrb	r2, [r3, #4]
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80031d8:	701a      	strb	r2, [r3, #0]
			if(gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_HEADER_FLAG ){
 80031da:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b07      	cmp	r3, #7
 80031e0:	d165      	bne.n	80032ae <ReceiveFWUpdate_MainFunc+0x266>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,(uint32_t)gl_u16AppVersion);
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <ReceiveFWUpdate_MainFunc+0x2c0>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	484b      	ldr	r0, [pc, #300]	; (8003318 <ReceiveFWUpdate_MainFunc+0x2d0>)
 80031ea:	f7ff fae7 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,gl_u32ImgSize);
 80031ee:	4b45      	ldr	r3, [pc, #276]	; (8003304 <ReceiveFWUpdate_MainFunc+0x2bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4849      	ldr	r0, [pc, #292]	; (800331c <ReceiveFWUpdate_MainFunc+0x2d4>)
 80031f6:	f7ff fae1 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_ADDRESS_TARGET_ADDRESS,gl_u32NodeAddr);
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <ReceiveFWUpdate_MainFunc+0x2c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4847      	ldr	r0, [pc, #284]	; (8003320 <ReceiveFWUpdate_MainFunc+0x2d8>)
 8003202:	f7ff fadb 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG,gl_u32ConfigLoRa);
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4619      	mov	r1, r3
 800320c:	4845      	ldr	r0, [pc, #276]	; (8003324 <ReceiveFWUpdate_MainFunc+0x2dc>)
 800320e:	f7ff fad5 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS, gl_u32CRCValue);
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <ReceiveFWUpdate_MainFunc+0x2cc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4843      	ldr	r0, [pc, #268]	; (8003328 <ReceiveFWUpdate_MainFunc+0x2e0>)
 800321a:	f7ff facf 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_GW_CONFIG,GW_CONFIG_PARAMETER_SET);
 800321e:	f04f 31ff 	mov.w	r1, #4294967295
 8003222:	4842      	ldr	r0, [pc, #264]	; (800332c <ReceiveFWUpdate_MainFunc+0x2e4>)
 8003224:	f7ff faca 	bl	80027bc <GW_voidEraseRestoreConfigPage>
				RTE_RUNNABLE_APP_VER_WriteData(gl_u16AppVersion);
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <ReceiveFWUpdate_MainFunc+0x2c0>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fc9d 	bl	8002b6c <Rte_ApplVer_WriteData>
				RTE_RUNNABLE_CODE_SIZE_WriteData(gl_u32ImgSize);
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fcaa 	bl	8002b90 <Rte_CodeSize_WriteData>
				//RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCValue);
				RTE_RUNNABLE_NODE_ADDR_WriteData(gl_u32NodeAddr);
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <ReceiveFWUpdate_MainFunc+0x2c8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fcb7 	bl	8002bb4 <Rte_NodeAddr_WriteData>
				RTE_RUNNABLE_CONFIG_LORA_WriteData(gl_u32ConfigLoRa);
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fd66 	bl	8002d1c <Rte_FlagConfigLoRA_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
				//Calculate Number packet Rx Uart
				gl_u8NumberPacket_Uart = (uint8_t)(gl_u32ImgSize/PACKET_1024bytes)+1;
 8003256:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3301      	adds	r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <ReceiveFWUpdate_MainFunc+0x2e8>)
 8003264:	701a      	strb	r2, [r3, #0]
				/* Get info from header */

				gl_u32Remain_Byte = (gl_u32ImgSize % PACKET_1024bytes);
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326e:	4a31      	ldr	r2, [pc, #196]	; (8003334 <ReceiveFWUpdate_MainFunc+0x2ec>)
 8003270:	6013      	str	r3, [r2, #0]

				RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16NumberPacket_LoRa);
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <ReceiveFWUpdate_MainFunc+0x2f0>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fd2c 	bl	8002cd4 <Rte_PacketSendLoraNum_WriteData>
				gl_u8RXBuffer_Flag_Req_Bytes = HEADER_FLAG_RECEIVED;
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 800327e:	2208      	movs	r2, #8
 8003280:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_IDLE);
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,0);
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	2201      	movs	r2, #1
 8003288:	4919      	ldr	r1, [pc, #100]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 800328a:	4817      	ldr	r0, [pc, #92]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800328c:	f007 fd3a 	bl	800ad04 <HAL_UART_Transmit>
				/*Change state */
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_RECEIVE_UPDATE);
 8003290:	2002      	movs	r0, #2
 8003292:	f7ff fc0b 	bl	8002aac <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_PACKET;
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8003298:	2204      	movs	r2, #4
 800329a:	701a      	strb	r2, [r3, #0]

				__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0220 	bic.w	r2, r2, #32
 80032aa:	60da      	str	r2, [r3, #12]
					memset(gl_u8RXBuffer_Header , 0x00 , 16);
				}

			}

			break;
 80032ac:	e157      	b.n	800355e <ReceiveFWUpdate_MainFunc+0x516>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0220 	orr.w	r2, r2, #32
 80032bc:	60da      	str	r2, [r3, #12]
				if (gl_u8RXBuffer_Flag_Req_Bytes == NEW_UPDATE_REQUEST_ACCEPT){
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	f040 814b 	bne.w	800355e <ReceiveFWUpdate_MainFunc+0x516>
					HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	2201      	movs	r2, #1
 80032ce:	4908      	ldr	r1, [pc, #32]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80032d2:	f007 fd17 	bl	800ad04 <HAL_UART_Transmit>
					memset(gl_u8RXBuffer_Header , 0x00 , 16);
 80032d6:	2210      	movs	r2, #16
 80032d8:	2100      	movs	r1, #0
 80032da:	4804      	ldr	r0, [pc, #16]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 80032dc:	f009 f8bd 	bl	800c45a <memset>
			break;
 80032e0:	e13d      	b.n	800355e <ReceiveFWUpdate_MainFunc+0x516>
 80032e2:	bf00      	nop
 80032e4:	20000cd4 	.word	0x20000cd4
 80032e8:	2000183c 	.word	0x2000183c
 80032ec:	200010d8 	.word	0x200010d8
 80032f0:	200010ec 	.word	0x200010ec
 80032f4:	20001764 	.word	0x20001764
 80032f8:	08012800 	.word	0x08012800
 80032fc:	20001100 	.word	0x20001100
 8003300:	000f4240 	.word	0x000f4240
 8003304:	20000cc4 	.word	0x20000cc4
 8003308:	20000cc8 	.word	0x20000cc8
 800330c:	20000cd0 	.word	0x20000cd0
 8003310:	20000cbc 	.word	0x20000cbc
 8003314:	20000ccc 	.word	0x20000ccc
 8003318:	0801fc30 	.word	0x0801fc30
 800331c:	0801fc38 	.word	0x0801fc38
 8003320:	0801fc34 	.word	0x0801fc34
 8003324:	0801fc04 	.word	0x0801fc04
 8003328:	0801fc3c 	.word	0x0801fc3c
 800332c:	0801fc00 	.word	0x0801fc00
 8003330:	200010ed 	.word	0x200010ed
 8003334:	200010f0 	.word	0x200010f0
 8003338:	200010ee 	.word	0x200010ee
		}
		case RX_RECEIVED_PACKET:
		{

			if(gl_u32ReceiveBytes == 0)
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11b      	bne.n	800337c <ReceiveFWUpdate_MainFunc+0x334>
			{
				HAL_TIM_Base_Start(&htim1);
 8003344:	4889      	ldr	r0, [pc, #548]	; (800356c <ReceiveFWUpdate_MainFunc+0x524>)
 8003346:	f007 f80f 	bl	800a368 <HAL_TIM_Base_Start>
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 800334a:	4b89      	ldr	r3, [pc, #548]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 800334c:	220a      	movs	r2, #10
 800334e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8003350:	f04f 33ff 	mov.w	r3, #4294967295
 8003354:	2201      	movs	r2, #1
 8003356:	4986      	ldr	r1, [pc, #536]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 8003358:	4886      	ldr	r0, [pc, #536]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 800335a:	f007 fcd3 	bl	800ad04 <HAL_UART_Transmit>

				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800335e:	4b85      	ldr	r3, [pc, #532]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4b83      	ldr	r3, [pc, #524]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	60da      	str	r2, [r3, #12]

				gl_u32ReceiveBytes += PACKET_1024bytes;
 800336e:	4b7e      	ldr	r3, [pc, #504]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e057      	b.n	800342c <ReceiveFWUpdate_MainFunc+0x3e4>
			}
			else if(gl_u8NumberPacket_Uart >= 1 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET)
 800337c:	4b7e      	ldr	r3, [pc, #504]	; (8003578 <ReceiveFWUpdate_MainFunc+0x530>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d053      	beq.n	800342c <ReceiveFWUpdate_MainFunc+0x3e4>
 8003384:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b0b      	cmp	r3, #11
 800338a:	d14f      	bne.n	800342c <ReceiveFWUpdate_MainFunc+0x3e4>
			{
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
				//HAL_TIM_Base_Stop_IT(&htim4);
				gl_u8NumberPacket_Uart--;
 800338c:	4b7a      	ldr	r3, [pc, #488]	; (8003578 <ReceiveFWUpdate_MainFunc+0x530>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b78      	ldr	r3, [pc, #480]	; (8003578 <ReceiveFWUpdate_MainFunc+0x530>)
 8003396:	701a      	strb	r2, [r3, #0]
				/*Calculate Progress*/
				gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fc79 	bl	8000c94 <__aeabi_ui2f>
 80033a2:	4604      	mov	r4, r0
 80033a4:	4b75      	ldr	r3, [pc, #468]	; (800357c <ReceiveFWUpdate_MainFunc+0x534>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fc73 	bl	8000c94 <__aeabi_ui2f>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4619      	mov	r1, r3
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7fd fd7a 	bl	8000eac <__aeabi_fdiv>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <ReceiveFWUpdate_MainFunc+0x538>)
 80033be:	601a      	str	r2, [r3, #0]
				gl_u8DownLoadUpdateProgress = (uint8_t)(gl_u8DonwLoadPercentProogess*100);
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <ReceiveFWUpdate_MainFunc+0x538>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	496f      	ldr	r1, [pc, #444]	; (8003584 <ReceiveFWUpdate_MainFunc+0x53c>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fcbc 	bl	8000d44 <__aeabi_fmul>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd fe2e 	bl	8001030 <__aeabi_f2uiz>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b6b      	ldr	r3, [pc, #428]	; (8003588 <ReceiveFWUpdate_MainFunc+0x540>)
 80033da:	701a      	strb	r2, [r3, #0]
				/*Write to RTE */

				RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <ReceiveFWUpdate_MainFunc+0x540>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fbf9 	bl	8002bd8 <Rte_UpdateProgress_WriteData>
				//Flash to block
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	2201      	movs	r2, #1
 80033ec:	4960      	ldr	r1, [pc, #384]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 80033ee:	4861      	ldr	r0, [pc, #388]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80033f0:	f007 fc88 	bl	800ad04 <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80033f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f8:	4864      	ldr	r0, [pc, #400]	; (800358c <ReceiveFWUpdate_MainFunc+0x544>)
 80033fa:	f005 f930 	bl	800865e <HAL_GPIO_TogglePin>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,1);
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	60da      	str	r2, [r3, #12]
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 8003410:	220a      	movs	r2, #10
 8003412:	701a      	strb	r2, [r3, #0]
				gl_u32ReceiveBytes += PACKET_1024bytes;
 8003414:	4b54      	ldr	r3, [pc, #336]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800341e:	6013      	str	r3, [r2, #0]
				//reset counter
				TIM4->CNT = 0;
 8003420:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <ReceiveFWUpdate_MainFunc+0x548>)
 8003422:	2200      	movs	r2, #0
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim4);
 8003426:	485b      	ldr	r0, [pc, #364]	; (8003594 <ReceiveFWUpdate_MainFunc+0x54c>)
 8003428:	f007 f80e 	bl	800a448 <HAL_TIM_Base_Start_IT>
			}
			if(gl_u8NumberPacket_Uart == 0 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_RECEIVE_ALL)
 800342c:	4b52      	ldr	r3, [pc, #328]	; (8003578 <ReceiveFWUpdate_MainFunc+0x530>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8096 	bne.w	8003562 <ReceiveFWUpdate_MainFunc+0x51a>
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	f040 8091 	bne.w	8003562 <ReceiveFWUpdate_MainFunc+0x51a>
			{
				//gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
				/*ERROR*/
				HAL_TIM_Base_Stop_IT(&htim4);
 8003440:	4854      	ldr	r0, [pc, #336]	; (8003594 <ReceiveFWUpdate_MainFunc+0x54c>)
 8003442:	f007 f853 	bl	800a4ec <HAL_TIM_Base_Stop_IT>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8003446:	2003      	movs	r0, #3
 8003448:	f7ff fb30 	bl	8002aac <Rte_SystemState_WriteData>
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	2201      	movs	r2, #1
 8003452:	4947      	ldr	r1, [pc, #284]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 8003454:	4847      	ldr	r0, [pc, #284]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 8003456:	f007 fc55 	bl	800ad04 <HAL_UART_Transmit>
				//F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
				gl_u32ReceiveBytes += gl_u32Remain_Byte;
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <ReceiveFWUpdate_MainFunc+0x550>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	4a40      	ldr	r2, [pc, #256]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 8003466:	6013      	str	r3, [r2, #0]
				gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fc11 	bl	8000c94 <__aeabi_ui2f>
 8003472:	4604      	mov	r4, r0
 8003474:	4b41      	ldr	r3, [pc, #260]	; (800357c <ReceiveFWUpdate_MainFunc+0x534>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fc0b 	bl	8000c94 <__aeabi_ui2f>
 800347e:	4603      	mov	r3, r0
 8003480:	4619      	mov	r1, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f7fd fd12 	bl	8000eac <__aeabi_fdiv>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	4b3c      	ldr	r3, [pc, #240]	; (8003580 <ReceiveFWUpdate_MainFunc+0x538>)
 800348e:	601a      	str	r2, [r3, #0]
				gl_u8DownLoadUpdateProgress = (uint8_t)(gl_u8DonwLoadPercentProogess*100);
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <ReceiveFWUpdate_MainFunc+0x538>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	493b      	ldr	r1, [pc, #236]	; (8003584 <ReceiveFWUpdate_MainFunc+0x53c>)
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd fc54 	bl	8000d44 <__aeabi_fmul>
 800349c:	4603      	mov	r3, r0
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fdc6 	bl	8001030 <__aeabi_f2uiz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b37      	ldr	r3, [pc, #220]	; (8003588 <ReceiveFWUpdate_MainFunc+0x540>)
 80034aa:	701a      	strb	r2, [r3, #0]
				RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 80034ac:	4b36      	ldr	r3, [pc, #216]	; (8003588 <ReceiveFWUpdate_MainFunc+0x540>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fb91 	bl	8002bd8 <Rte_UpdateProgress_WriteData>
				gl_RXUartInternal_State = RX_END_STATE;
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <ReceiveFWUpdate_MainFunc+0x554>)
 80034b8:	220b      	movs	r2, #11
 80034ba:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_REQUEST_OTA);
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	60da      	str	r2, [r3, #12]
				HAL_TIM_Base_Stop(&htim1);
 80034cc:	4827      	ldr	r0, [pc, #156]	; (800356c <ReceiveFWUpdate_MainFunc+0x524>)
 80034ce:	f006 ff95 	bl	800a3fc <HAL_TIM_Base_Stop>
			else{
				/*ERROR*/

			}

			break;
 80034d2:	e046      	b.n	8003562 <ReceiveFWUpdate_MainFunc+0x51a>
		}
		case RX_END_STATE:
		{
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	60da      	str	r2, [r3, #12]
			gl_u8RXBuffer_Flag_Req_Bytes = DONE_OTA;
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 80034e6:	227b      	movs	r2, #123	; 0x7b
 80034e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	2201      	movs	r2, #1
 80034f0:	491f      	ldr	r1, [pc, #124]	; (8003570 <ReceiveFWUpdate_MainFunc+0x528>)
 80034f2:	4820      	ldr	r0, [pc, #128]	; (8003574 <ReceiveFWUpdate_MainFunc+0x52c>)
 80034f4:	f007 fc06 	bl	800ad04 <HAL_UART_Transmit>
			gl_u32NodeAddr = INITIAL_VALUE_ZERO;
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <ReceiveFWUpdate_MainFunc+0x558>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
			gl_u8TypeFlag = INITIAL_VALUE_ZERO;
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <ReceiveFWUpdate_MainFunc+0x55c>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
			gl_u32ImgSize =INITIAL_VALUE_ZERO;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <ReceiveFWUpdate_MainFunc+0x534>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = INITIAL_VALUE_ZERO;
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <ReceiveFWUpdate_MainFunc+0x560>)
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]
			gl_u32CRCValue = INITIAL_VALUE_ZERO ;
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <ReceiveFWUpdate_MainFunc+0x564>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
			gl_u8SystemState = SYS_IDLE;
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <ReceiveFWUpdate_MainFunc+0x568>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
			gl_RXUartInternal_State = RX_IDLE;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <ReceiveFWUpdate_MainFunc+0x554>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
			gl_u8RxUserResp=INITIAL_VALUE_ZERO;
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <ReceiveFWUpdate_MainFunc+0x56c>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
			gl_u8DonwLoadPercentProogess =INITIAL_VALUE_ZERO;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <ReceiveFWUpdate_MainFunc+0x538>)
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
			gl_u32Remain_Byte= INITIAL_VALUE_ZERO;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <ReceiveFWUpdate_MainFunc+0x550>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = INITIAL_VALUE_ZERO;
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <ReceiveFWUpdate_MainFunc+0x540>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart = INITIAL_VALUE_ZERO;
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <ReceiveFWUpdate_MainFunc+0x530>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
			gl_u16NumberPacket_LoRa = INITIAL_VALUE_ZERO;
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <ReceiveFWUpdate_MainFunc+0x570>)
 8003544:	2200      	movs	r2, #0
 8003546:	801a      	strh	r2, [r3, #0]
			gl_u32ReceiveBytes = INITIAL_VALUE_ZERO;
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <ReceiveFWUpdate_MainFunc+0x520>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(INITIAL_VALUE_ZERO);
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff fb42 	bl	8002bd8 <Rte_UpdateProgress_WriteData>
			break;
 8003554:	e006      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
		}
		default:
			break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
			break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
			break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <ReceiveFWUpdate_MainFunc+0x51c>
			break;
 8003562:	bf00      	nop
	}
}
 8003564:	bf00      	nop
 8003566:	bd98      	pop	{r3, r4, r7, pc}
 8003568:	200010fc 	.word	0x200010fc
 800356c:	2000171c 	.word	0x2000171c
 8003570:	200010ec 	.word	0x200010ec
 8003574:	2000183c 	.word	0x2000183c
 8003578:	200010ed 	.word	0x200010ed
 800357c:	20000cc4 	.word	0x20000cc4
 8003580:	200010f8 	.word	0x200010f8
 8003584:	42c80000 	.word	0x42c80000
 8003588:	200010f4 	.word	0x200010f4
 800358c:	40011000 	.word	0x40011000
 8003590:	40000800 	.word	0x40000800
 8003594:	200017ac 	.word	0x200017ac
 8003598:	200010f0 	.word	0x200010f0
 800359c:	20000cd4 	.word	0x20000cd4
 80035a0:	20000cbc 	.word	0x20000cbc
 80035a4:	20000cc0 	.word	0x20000cc0
 80035a8:	20000cc8 	.word	0x20000cc8
 80035ac:	20000ccc 	.word	0x20000ccc
 80035b0:	20001101 	.word	0x20001101
 80035b4:	20001100 	.word	0x20001100
 80035b8:	200010ee 	.word	0x200010ee

080035bc <HAL_UART_RxCpltCallback>:
/********************HAL_UART_CALLBACK***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	//  HAL_GPIO_WritePin(GPIOA	, GPIO_PIN_10,0);
	// for testing time encrypt

	Std_ReturnType retVal;
 	retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 80035c4:	4864      	ldr	r0, [pc, #400]	; (8003758 <HAL_UART_RxCpltCallback+0x19c>)
 80035c6:	f7ff fa83 	bl	8002ad0 <Rte_SystemState_ReadData>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]
	// Handle for Get Wifi
	if(gl_u8RXBuffer_Header[0] == ESP_RESET_SPI && gl_u8SystemState != SYS_REQUEST_OTA){
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2bf0      	cmp	r3, #240	; 0xf0
 80035d4:	d118      	bne.n	8003608 <HAL_UART_RxCpltCallback+0x4c>
 80035d6:	4b60      	ldr	r3, [pc, #384]	; (8003758 <HAL_UART_RxCpltCallback+0x19c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d014      	beq.n	8003608 <HAL_UART_RxCpltCallback+0x4c>
		if(RTE_E_OKE == retVal){
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 80b4 	bne.w	800374e <HAL_UART_RxCpltCallback+0x192>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(WAIT_FOR_ESP_CONNECT);
 80035e6:	200a      	movs	r0, #10
 80035e8:	f7ff fa60 	bl	8002aac <Rte_SystemState_WriteData>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80035ec:	4b5c      	ldr	r3, [pc, #368]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80035fc:	2201      	movs	r2, #1
 80035fe:	4957      	ldr	r1, [pc, #348]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 8003600:	4857      	ldr	r0, [pc, #348]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003602:	f007 fc02 	bl	800ae0a <HAL_UART_Receive_IT>
		if(RTE_E_OKE == retVal){
 8003606:	e0a2      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
		}
	}
	else if( gl_u8RXBuffer_Header[0] == WIFI_CONNECTED){
 8003608:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2bf1      	cmp	r3, #241	; 0xf1
 800360e:	d117      	bne.n	8003640 <HAL_UART_RxCpltCallback+0x84>
		if(RTE_E_OKE == retVal){
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 809b 	bne.w	800374e <HAL_UART_RxCpltCallback+0x192>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(WIFI_CONNECTED);
 8003618:	20f1      	movs	r0, #241	; 0xf1
 800361a:	f7ff fa47 	bl	8002aac <Rte_SystemState_WriteData>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800361e:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State  = RX_IDLE;
 800362e:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_UART_RxCpltCallback+0x1a8>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 8003634:	2201      	movs	r2, #1
 8003636:	4949      	ldr	r1, [pc, #292]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 8003638:	4849      	ldr	r0, [pc, #292]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 800363a:	f007 fbe6 	bl	800ae0a <HAL_UART_Receive_IT>
	}

	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);


}
 800363e:	e086      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
	else if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST && gl_u8SystemState != SYS_REQUEST_OTA ){
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d11e      	bne.n	8003686 <HAL_UART_RxCpltCallback+0xca>
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_UART_RxCpltCallback+0x19c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d01a      	beq.n	8003686 <HAL_UART_RxCpltCallback+0xca>
		if(RTE_E_OKE == retVal){
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d113      	bne.n	800367e <HAL_UART_RxCpltCallback+0xc2>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_NEW_UPDATE_REQ);
 8003656:	2001      	movs	r0, #1
 8003658:	f7ff fa28 	bl	8002aac <Rte_SystemState_WriteData>
			gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 800365c:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_UART_RxCpltCallback+0x1a8>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 20);
 8003672:	2214      	movs	r2, #20
 8003674:	4939      	ldr	r1, [pc, #228]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 8003676:	483a      	ldr	r0, [pc, #232]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003678:	f007 fbc7 	bl	800ae0a <HAL_UART_Receive_IT>
		if(RTE_E_OKE == retVal){
 800367c:	e067      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
			gl_u8RXBuffer_Flag_Req_Bytes = GATEWAY_BUSY;
 800367e:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 8003680:	2203      	movs	r2, #3
 8003682:	701a      	strb	r2, [r3, #0]
		if(RTE_E_OKE == retVal){
 8003684:	e063      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
	else if (gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_NEXT_PACKET || gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET ){
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d003      	beq.n	8003696 <HAL_UART_RxCpltCallback+0xda>
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b0b      	cmp	r3, #11
 8003694:	d13f      	bne.n	8003716 <HAL_UART_RxCpltCallback+0x15a>
		HAL_TIM_Base_Start_IT(&htim4);
 8003696:	4835      	ldr	r0, [pc, #212]	; (800376c <HAL_UART_RxCpltCallback+0x1b0>)
 8003698:	f006 fed6 	bl	800a448 <HAL_TIM_Base_Start_IT>
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	60da      	str	r2, [r3, #12]
		Decrypt_MainFunc((uint8_t*)gl_u8RXBuffer);
 80036ac:	4830      	ldr	r0, [pc, #192]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 80036ae:	f7fd ff5f 	bl	8001570 <Decrypt_MainFunc>
		if(gl_u8NumberPacket_Uart == 1){
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_UART_RxCpltCallback+0x1b8>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d118      	bne.n	80036ec <HAL_UART_RxCpltCallback+0x130>
			HAL_TIM_Base_Stop_IT(&htim4);
 80036ba:	482c      	ldr	r0, [pc, #176]	; (800376c <HAL_UART_RxCpltCallback+0x1b0>)
 80036bc:	f006 ff16 	bl	800a4ec <HAL_TIM_Base_Stop_IT>
			F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_UART_RxCpltCallback+0x1bc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	4829      	ldr	r0, [pc, #164]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 80036ca:	f7fe f843 	bl	8001754 <F_FlashBlockToAddress>
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80036ce:	2201      	movs	r2, #1
 80036d0:	4922      	ldr	r1, [pc, #136]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 80036d2:	4823      	ldr	r0, [pc, #140]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 80036d4:	f007 fb99 	bl	800ae0a <HAL_UART_Receive_IT>
			gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 80036da:	220c      	movs	r2, #12
 80036dc:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart--;
 80036de:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_UART_RxCpltCallback+0x1b8>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_UART_RxCpltCallback+0x1b8>)
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_UART_RxCpltCallback+0x140>
			F_FlashBlockToAddress(gl_u8RXBuffer, PACKET_1024bytes);
 80036ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036f0:	481f      	ldr	r0, [pc, #124]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 80036f2:	f7fe f82f 	bl	8001754 <F_FlashBlockToAddress>
			gl_u8RXBuffer_Flag_Req_Bytes = MASTER_ACCEPT_PACKET;
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 80036f8:	220b      	movs	r2, #11
 80036fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 80036fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003700:	491b      	ldr	r1, [pc, #108]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 8003702:	4817      	ldr	r0, [pc, #92]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003704:	f007 fb81 	bl	800ae0a <HAL_UART_Receive_IT>
		memset(gl_u8RXBuffer , 0xff , 1024);
 8003708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370c:	21ff      	movs	r1, #255	; 0xff
 800370e:	4818      	ldr	r0, [pc, #96]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 8003710:	f008 fea3 	bl	800c45a <memset>
 8003714:	e01b      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
	else if(gl_RXUartInternal_State == RX_RECEIVED_HEADER)
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_UART_RxCpltCallback+0x1a8>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d106      	bne.n	800372c <HAL_UART_RxCpltCallback+0x170>
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 800371e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003722:	4913      	ldr	r1, [pc, #76]	; (8003770 <HAL_UART_RxCpltCallback+0x1b4>)
 8003724:	480e      	ldr	r0, [pc, #56]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003726:	f007 fb70 	bl	800ae0a <HAL_UART_Receive_IT>
}
 800372a:	e010      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
		gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;;
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_UART_RxCpltCallback+0x1ac>)
 800372e:	2205      	movs	r2, #5
 8003730:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 8003742:	2201      	movs	r2, #1
 8003744:	4905      	ldr	r1, [pc, #20]	; (800375c <HAL_UART_RxCpltCallback+0x1a0>)
 8003746:	4806      	ldr	r0, [pc, #24]	; (8003760 <HAL_UART_RxCpltCallback+0x1a4>)
 8003748:	f007 fb5f 	bl	800ae0a <HAL_UART_Receive_IT>
}
 800374c:	e7ff      	b.n	800374e <HAL_UART_RxCpltCallback+0x192>
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20001101 	.word	0x20001101
 800375c:	200010d8 	.word	0x200010d8
 8003760:	2000183c 	.word	0x2000183c
 8003764:	20000cd4 	.word	0x20000cd4
 8003768:	200010ec 	.word	0x200010ec
 800376c:	200017ac 	.word	0x200017ac
 8003770:	20000cd8 	.word	0x20000cd8
 8003774:	200010ed 	.word	0x200010ed
 8003778:	200010f0 	.word	0x200010f0

0800377c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003782:	f000 fbe9 	bl	8003f58 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003786:	f644 6320 	movw	r3, #20000	; 0x4e20
 800378a:	2201      	movs	r2, #1
 800378c:	2178      	movs	r1, #120	; 0x78
 800378e:	485b      	ldr	r0, [pc, #364]	; (80038fc <SSD1306_Init+0x180>)
 8003790:	f005 f9d8 	bl	8008b44 <HAL_I2C_IsDeviceReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800379a:	2300      	movs	r3, #0
 800379c:	e0a9      	b.n	80038f2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800379e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80037a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037a4:	e002      	b.n	80037ac <SSD1306_Init+0x30>
		p--;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f9      	bne.n	80037a6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80037b2:	22ae      	movs	r2, #174	; 0xae
 80037b4:	2100      	movs	r1, #0
 80037b6:	2078      	movs	r0, #120	; 0x78
 80037b8:	f000 fc48 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80037bc:	2220      	movs	r2, #32
 80037be:	2100      	movs	r1, #0
 80037c0:	2078      	movs	r0, #120	; 0x78
 80037c2:	f000 fc43 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80037c6:	2210      	movs	r2, #16
 80037c8:	2100      	movs	r1, #0
 80037ca:	2078      	movs	r0, #120	; 0x78
 80037cc:	f000 fc3e 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80037d0:	22b0      	movs	r2, #176	; 0xb0
 80037d2:	2100      	movs	r1, #0
 80037d4:	2078      	movs	r0, #120	; 0x78
 80037d6:	f000 fc39 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80037da:	22c8      	movs	r2, #200	; 0xc8
 80037dc:	2100      	movs	r1, #0
 80037de:	2078      	movs	r0, #120	; 0x78
 80037e0:	f000 fc34 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	2078      	movs	r0, #120	; 0x78
 80037ea:	f000 fc2f 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80037ee:	2210      	movs	r2, #16
 80037f0:	2100      	movs	r1, #0
 80037f2:	2078      	movs	r0, #120	; 0x78
 80037f4:	f000 fc2a 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	2100      	movs	r1, #0
 80037fc:	2078      	movs	r0, #120	; 0x78
 80037fe:	f000 fc25 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003802:	2281      	movs	r2, #129	; 0x81
 8003804:	2100      	movs	r1, #0
 8003806:	2078      	movs	r0, #120	; 0x78
 8003808:	f000 fc20 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800380c:	22ff      	movs	r2, #255	; 0xff
 800380e:	2100      	movs	r1, #0
 8003810:	2078      	movs	r0, #120	; 0x78
 8003812:	f000 fc1b 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003816:	22a1      	movs	r2, #161	; 0xa1
 8003818:	2100      	movs	r1, #0
 800381a:	2078      	movs	r0, #120	; 0x78
 800381c:	f000 fc16 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003820:	22a6      	movs	r2, #166	; 0xa6
 8003822:	2100      	movs	r1, #0
 8003824:	2078      	movs	r0, #120	; 0x78
 8003826:	f000 fc11 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800382a:	22a8      	movs	r2, #168	; 0xa8
 800382c:	2100      	movs	r1, #0
 800382e:	2078      	movs	r0, #120	; 0x78
 8003830:	f000 fc0c 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003834:	223f      	movs	r2, #63	; 0x3f
 8003836:	2100      	movs	r1, #0
 8003838:	2078      	movs	r0, #120	; 0x78
 800383a:	f000 fc07 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800383e:	22a4      	movs	r2, #164	; 0xa4
 8003840:	2100      	movs	r1, #0
 8003842:	2078      	movs	r0, #120	; 0x78
 8003844:	f000 fc02 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003848:	22d3      	movs	r2, #211	; 0xd3
 800384a:	2100      	movs	r1, #0
 800384c:	2078      	movs	r0, #120	; 0x78
 800384e:	f000 fbfd 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	2078      	movs	r0, #120	; 0x78
 8003858:	f000 fbf8 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800385c:	22d5      	movs	r2, #213	; 0xd5
 800385e:	2100      	movs	r1, #0
 8003860:	2078      	movs	r0, #120	; 0x78
 8003862:	f000 fbf3 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003866:	22f0      	movs	r2, #240	; 0xf0
 8003868:	2100      	movs	r1, #0
 800386a:	2078      	movs	r0, #120	; 0x78
 800386c:	f000 fbee 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003870:	22d9      	movs	r2, #217	; 0xd9
 8003872:	2100      	movs	r1, #0
 8003874:	2078      	movs	r0, #120	; 0x78
 8003876:	f000 fbe9 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	2100      	movs	r1, #0
 800387e:	2078      	movs	r0, #120	; 0x78
 8003880:	f000 fbe4 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003884:	22da      	movs	r2, #218	; 0xda
 8003886:	2100      	movs	r1, #0
 8003888:	2078      	movs	r0, #120	; 0x78
 800388a:	f000 fbdf 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800388e:	2212      	movs	r2, #18
 8003890:	2100      	movs	r1, #0
 8003892:	2078      	movs	r0, #120	; 0x78
 8003894:	f000 fbda 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003898:	22db      	movs	r2, #219	; 0xdb
 800389a:	2100      	movs	r1, #0
 800389c:	2078      	movs	r0, #120	; 0x78
 800389e:	f000 fbd5 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80038a2:	2220      	movs	r2, #32
 80038a4:	2100      	movs	r1, #0
 80038a6:	2078      	movs	r0, #120	; 0x78
 80038a8:	f000 fbd0 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80038ac:	228d      	movs	r2, #141	; 0x8d
 80038ae:	2100      	movs	r1, #0
 80038b0:	2078      	movs	r0, #120	; 0x78
 80038b2:	f000 fbcb 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80038b6:	2214      	movs	r2, #20
 80038b8:	2100      	movs	r1, #0
 80038ba:	2078      	movs	r0, #120	; 0x78
 80038bc:	f000 fbc6 	bl	800404c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80038c0:	22af      	movs	r2, #175	; 0xaf
 80038c2:	2100      	movs	r1, #0
 80038c4:	2078      	movs	r0, #120	; 0x78
 80038c6:	f000 fbc1 	bl	800404c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80038ca:	222e      	movs	r2, #46	; 0x2e
 80038cc:	2100      	movs	r1, #0
 80038ce:	2078      	movs	r0, #120	; 0x78
 80038d0:	f000 fbbc 	bl	800404c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f000 f847 	bl	8003968 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80038da:	f000 f813 	bl	8003904 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <SSD1306_Init+0x184>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <SSD1306_Init+0x184>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SSD1306_Init+0x184>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80038f0:	2301      	movs	r3, #1
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20001618 	.word	0x20001618
 8003900:	20001524 	.word	0x20001524

08003904 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800390a:	2300      	movs	r3, #0
 800390c:	71fb      	strb	r3, [r7, #7]
 800390e:	e021      	b.n	8003954 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	3b50      	subs	r3, #80	; 0x50
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	2100      	movs	r1, #0
 800391a:	2078      	movs	r0, #120	; 0x78
 800391c:	f000 fb96 	bl	800404c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003920:	2200      	movs	r2, #0
 8003922:	2100      	movs	r1, #0
 8003924:	2078      	movs	r0, #120	; 0x78
 8003926:	f000 fb91 	bl	800404c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800392a:	2210      	movs	r2, #16
 800392c:	2100      	movs	r1, #0
 800392e:	2078      	movs	r0, #120	; 0x78
 8003930:	f000 fb8c 	bl	800404c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003934:	79fa      	ldrb	r2, [r7, #7]
 8003936:	4613      	mov	r3, r2
 8003938:	015b      	lsls	r3, r3, #5
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	461a      	mov	r2, r3
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <SSD1306_UpdateScreen+0x60>)
 8003942:	441a      	add	r2, r3
 8003944:	2384      	movs	r3, #132	; 0x84
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	2078      	movs	r0, #120	; 0x78
 800394a:	f000 fb19 	bl	8003f80 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	3301      	adds	r3, #1
 8003952:	71fb      	strb	r3, [r7, #7]
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d9da      	bls.n	8003910 <SSD1306_UpdateScreen+0xc>
	}
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20001104 	.word	0x20001104

08003968 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <SSD1306_Fill+0x14>
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <SSD1306_Fill+0x16>
 800397c:	23ff      	movs	r3, #255	; 0xff
 800397e:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003982:	4619      	mov	r1, r3
 8003984:	4803      	ldr	r0, [pc, #12]	; (8003994 <SSD1306_Fill+0x2c>)
 8003986:	f008 fd68 	bl	800c45a <memset>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20001104 	.word	0x20001104

08003998 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003998:	b490      	push	{r4, r7}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	460b      	mov	r3, r1
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	70fb      	strb	r3, [r7, #3]
	if (
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b83      	cmp	r3, #131	; 0x83
 80039ae:	d854      	bhi.n	8003a5a <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	2b3f      	cmp	r3, #63	; 0x3f
 80039b4:	d851      	bhi.n	8003a5a <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <SSD1306_DrawPixel+0xcc>)
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d120      	bne.n	8003a14 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	88bb      	ldrh	r3, [r7, #4]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	b298      	uxth	r0, r3
 80039da:	4601      	mov	r1, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	015b      	lsls	r3, r3, #5
 80039e0:	440b      	add	r3, r1
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <SSD1306_DrawPixel+0xd0>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	b25a      	sxtb	r2, r3
 80039ec:	88bb      	ldrh	r3, [r7, #4]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b25c      	sxtb	r4, r3
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	4601      	mov	r1, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	015b      	lsls	r3, r3, #5
 8003a06:	440b      	add	r3, r1
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2e1      	uxtb	r1, r4
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <SSD1306_DrawPixel+0xd0>)
 8003a10:	54d1      	strb	r1, [r2, r3]
 8003a12:	e023      	b.n	8003a5c <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	88bb      	ldrh	r3, [r7, #4]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	b298      	uxth	r0, r3
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	015b      	lsls	r3, r3, #5
 8003a22:	440b      	add	r3, r1
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <SSD1306_DrawPixel+0xd0>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	b25a      	sxtb	r2, r3
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	4013      	ands	r3, r2
 8003a42:	b25c      	sxtb	r4, r3
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	4601      	mov	r1, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	440b      	add	r3, r1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	b2e1      	uxtb	r1, r4
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <SSD1306_DrawPixel+0xd0>)
 8003a56:	54d1      	strb	r1, [r2, r3]
 8003a58:	e000      	b.n	8003a5c <SSD1306_DrawPixel+0xc4>
		return;
 8003a5a:	bf00      	nop
	}
}
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc90      	pop	{r4, r7}
 8003a62:	4770      	bx	lr
 8003a64:	20001524 	.word	0x20001524
 8003a68:	20001104 	.word	0x20001104

08003a6c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	460a      	mov	r2, r1
 8003a76:	80fb      	strh	r3, [r7, #6]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <SSD1306_GotoXY+0x28>)
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <SSD1306_GotoXY+0x28>)
 8003a84:	88bb      	ldrh	r3, [r7, #4]
 8003a86:	8053      	strh	r3, [r2, #2]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20001524 	.word	0x20001524

08003a98 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	6039      	str	r1, [r7, #0]
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
	if (
 8003ab4:	2b83      	cmp	r3, #131	; 0x83
 8003ab6:	dc07      	bgt.n	8003ac8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003aba:	885b      	ldrh	r3, [r3, #2]
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ac4:	2b3f      	cmp	r3, #63	; 0x3f
 8003ac6:	dd01      	ble.n	8003acc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e05e      	b.n	8003b8a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e04b      	b.n	8003b6a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	3b20      	subs	r3, #32
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	7849      	ldrb	r1, [r1, #1]
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	440b      	add	r3, r1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e030      	b.n	8003b58 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003b06:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b08:	881a      	ldrh	r2, [r3, #0]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	b298      	uxth	r0, r3
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b14:	885a      	ldrh	r2, [r3, #2]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	79ba      	ldrb	r2, [r7, #6]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7ff ff39 	bl	8003998 <SSD1306_DrawPixel>
 8003b26:	e014      	b.n	8003b52 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	b298      	uxth	r0, r3
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b36:	885a      	ldrh	r2, [r3, #2]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b299      	uxth	r1, r3
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7ff ff23 	bl	8003998 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3301      	adds	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d3c8      	bcc.n	8003af6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3301      	adds	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d3ad      	bcc.n	8003ad2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b78:	881a      	ldrh	r2, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <SSD1306_Putc+0xfc>)
 8003b86:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003b88:	79fb      	ldrb	r3, [r7, #7]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20001524 	.word	0x20001524

08003b98 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003ba6:	e012      	b.n	8003bce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff71 	bl	8003a98 <SSD1306_Putc>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d002      	beq.n	8003bc8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	e008      	b.n	8003bda <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e8      	bne.n	8003ba8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003be2:	b590      	push	{r4, r7, lr}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4604      	mov	r4, r0
 8003bea:	4608      	mov	r0, r1
 8003bec:	4611      	mov	r1, r2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	80fb      	strh	r3, [r7, #6]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	80bb      	strh	r3, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2b83      	cmp	r3, #131	; 0x83
 8003c04:	d901      	bls.n	8003c0a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8003c06:	2383      	movs	r3, #131	; 0x83
 8003c08:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	2b83      	cmp	r3, #131	; 0x83
 8003c0e:	d901      	bls.n	8003c14 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003c10:	2383      	movs	r3, #131	; 0x83
 8003c12:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003c14:	88bb      	ldrh	r3, [r7, #4]
 8003c16:	2b3f      	cmp	r3, #63	; 0x3f
 8003c18:	d901      	bls.n	8003c1e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003c1a:	233f      	movs	r3, #63	; 0x3f
 8003c1c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003c1e:	883b      	ldrh	r3, [r7, #0]
 8003c20:	2b3f      	cmp	r3, #63	; 0x3f
 8003c22:	d901      	bls.n	8003c28 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003c24:	233f      	movs	r3, #63	; 0x3f
 8003c26:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d205      	bcs.n	8003c3c <SSD1306_DrawLine+0x5a>
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	e004      	b.n	8003c46 <SSD1306_DrawLine+0x64>
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b21b      	sxth	r3, r3
 8003c46:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003c48:	88ba      	ldrh	r2, [r7, #4]
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d205      	bcs.n	8003c5c <SSD1306_DrawLine+0x7a>
 8003c50:	883a      	ldrh	r2, [r7, #0]
 8003c52:	88bb      	ldrh	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b21b      	sxth	r3, r3
 8003c5a:	e004      	b.n	8003c66 <SSD1306_DrawLine+0x84>
 8003c5c:	88ba      	ldrh	r2, [r7, #4]
 8003c5e:	883b      	ldrh	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d201      	bcs.n	8003c74 <SSD1306_DrawLine+0x92>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e001      	b.n	8003c78 <SSD1306_DrawLine+0x96>
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8003c7a:	88ba      	ldrh	r2, [r7, #4]
 8003c7c:	883b      	ldrh	r3, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d201      	bcs.n	8003c86 <SSD1306_DrawLine+0xa4>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e001      	b.n	8003c8a <SSD1306_DrawLine+0xa8>
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003c8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	dd06      	ble.n	8003ca6 <SSD1306_DrawLine+0xc4>
 8003c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c9c:	0fda      	lsrs	r2, r3, #31
 8003c9e:	4413      	add	r3, r2
 8003ca0:	105b      	asrs	r3, r3, #1
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	e006      	b.n	8003cb4 <SSD1306_DrawLine+0xd2>
 8003ca6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003caa:	0fda      	lsrs	r2, r3, #31
 8003cac:	4413      	add	r3, r2
 8003cae:	105b      	asrs	r3, r3, #1
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	b21b      	sxth	r3, r3
 8003cb4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003cb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d129      	bne.n	8003d12 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003cbe:	883a      	ldrh	r2, [r7, #0]
 8003cc0:	88bb      	ldrh	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d205      	bcs.n	8003cd2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8003cc6:	883b      	ldrh	r3, [r7, #0]
 8003cc8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003cca:	88bb      	ldrh	r3, [r7, #4]
 8003ccc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d205      	bcs.n	8003ce6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8003ce6:	88bb      	ldrh	r3, [r7, #4]
 8003ce8:	82bb      	strh	r3, [r7, #20]
 8003cea:	e00c      	b.n	8003d06 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003cec:	8ab9      	ldrh	r1, [r7, #20]
 8003cee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fe4f 	bl	8003998 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003cfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	82bb      	strh	r3, [r7, #20]
 8003d06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d0a:	883b      	ldrh	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dded      	ble.n	8003cec <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8003d10:	e05f      	b.n	8003dd2 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8003d12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d129      	bne.n	8003d6e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003d1a:	883a      	ldrh	r2, [r7, #0]
 8003d1c:	88bb      	ldrh	r3, [r7, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d205      	bcs.n	8003d2e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003d22:	883b      	ldrh	r3, [r7, #0]
 8003d24:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003d26:	88bb      	ldrh	r3, [r7, #4]
 8003d28:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d205      	bcs.n	8003d42 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	82bb      	strh	r3, [r7, #20]
 8003d46:	e00c      	b.n	8003d62 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003d48:	8abb      	ldrh	r3, [r7, #20]
 8003d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d4e:	88b9      	ldrh	r1, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fe21 	bl	8003998 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003d56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	82bb      	strh	r3, [r7, #20]
 8003d62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	dded      	ble.n	8003d48 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8003d6c:	e031      	b.n	8003dd2 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003d6e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d72:	88b9      	ldrh	r1, [r7, #4]
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fe0e 	bl	8003998 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d103      	bne.n	8003d8c <SSD1306_DrawLine+0x1aa>
 8003d84:	88ba      	ldrh	r2, [r7, #4]
 8003d86:	883b      	ldrh	r3, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d021      	beq.n	8003dd0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003d90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d98:	425b      	negs	r3, r3
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	dd08      	ble.n	8003db0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003d9e:	8afa      	ldrh	r2, [r7, #22]
 8003da0:	8a3b      	ldrh	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003da8:	89fa      	ldrh	r2, [r7, #14]
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	4413      	add	r3, r2
 8003dae:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8003db0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003db4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	dad8      	bge.n	8003d6e <SSD1306_DrawLine+0x18c>
			err += dx;
 8003dbc:	8afa      	ldrh	r2, [r7, #22]
 8003dbe:	8a7b      	ldrh	r3, [r7, #18]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003dc6:	89ba      	ldrh	r2, [r7, #12]
 8003dc8:	88bb      	ldrh	r3, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003dce:	e7ce      	b.n	8003d6e <SSD1306_DrawLine+0x18c>
			break;
 8003dd0:	bf00      	nop
		}
	}
}
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	4604      	mov	r4, r0
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	80fb      	strh	r3, [r7, #6]
 8003dea:	4603      	mov	r3, r0
 8003dec:	80bb      	strh	r3, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	807b      	strh	r3, [r7, #2]
 8003df2:	4613      	mov	r3, r2
 8003df4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	2b83      	cmp	r3, #131	; 0x83
 8003dfa:	d853      	bhi.n	8003ea4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8003dfc:	88bb      	ldrh	r3, [r7, #4]
 8003dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8003e00:	d850      	bhi.n	8003ea4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	4413      	add	r3, r2
 8003e08:	2b83      	cmp	r3, #131	; 0x83
 8003e0a:	dd03      	ble.n	8003e14 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	f1c3 0384 	rsb	r3, r3, #132	; 0x84
 8003e12:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003e14:	88ba      	ldrh	r2, [r7, #4]
 8003e16:	883b      	ldrh	r3, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	2b3f      	cmp	r3, #63	; 0x3f
 8003e1c:	dd03      	ble.n	8003e26 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003e1e:	88bb      	ldrh	r3, [r7, #4]
 8003e20:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e24:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	88bc      	ldrh	r4, [r7, #4]
 8003e30:	88b9      	ldrh	r1, [r7, #4]
 8003e32:	88f8      	ldrh	r0, [r7, #6]
 8003e34:	7e3b      	ldrb	r3, [r7, #24]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4623      	mov	r3, r4
 8003e3a:	f7ff fed2 	bl	8003be2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8003e3e:	88ba      	ldrh	r2, [r7, #4]
 8003e40:	883b      	ldrh	r3, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	b299      	uxth	r1, r3
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	b29c      	uxth	r4, r3
 8003e4e:	88ba      	ldrh	r2, [r7, #4]
 8003e50:	883b      	ldrh	r3, [r7, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	88f8      	ldrh	r0, [r7, #6]
 8003e58:	7e3b      	ldrb	r3, [r7, #24]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	4622      	mov	r2, r4
 8003e60:	f7ff febf 	bl	8003be2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003e64:	88ba      	ldrh	r2, [r7, #4]
 8003e66:	883b      	ldrh	r3, [r7, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	b29c      	uxth	r4, r3
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	88b9      	ldrh	r1, [r7, #4]
 8003e70:	88f8      	ldrh	r0, [r7, #6]
 8003e72:	7e3b      	ldrb	r3, [r7, #24]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4623      	mov	r3, r4
 8003e78:	f7ff feb3 	bl	8003be2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	4413      	add	r3, r2
 8003e82:	b298      	uxth	r0, r3
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	4413      	add	r3, r2
 8003e8a:	b29c      	uxth	r4, r3
 8003e8c:	88ba      	ldrh	r2, [r7, #4]
 8003e8e:	883b      	ldrh	r3, [r7, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	88b9      	ldrh	r1, [r7, #4]
 8003e96:	7e3b      	ldrb	r3, [r7, #24]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	f7ff fea0 	bl	8003be2 <SSD1306_DrawLine>
 8003ea2:	e000      	b.n	8003ea6 <SSD1306_DrawRectangle+0xce>
		return;
 8003ea4:	bf00      	nop
}
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd90      	pop	{r4, r7, pc}

08003eac <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4623      	mov	r3, r4
 8003ebc:	80fb      	strh	r3, [r7, #6]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80bb      	strh	r3, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b83      	cmp	r3, #131	; 0x83
 8003ece:	d836      	bhi.n	8003f3e <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8003ed0:	88bb      	ldrh	r3, [r7, #4]
 8003ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ed4:	d833      	bhi.n	8003f3e <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4413      	add	r3, r2
 8003edc:	2b83      	cmp	r3, #131	; 0x83
 8003ede:	dd03      	ble.n	8003ee8 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	f1c3 0384 	rsb	r3, r3, #132	; 0x84
 8003ee6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003ee8:	88ba      	ldrh	r2, [r7, #4]
 8003eea:	883b      	ldrh	r3, [r7, #0]
 8003eec:	4413      	add	r3, r2
 8003eee:	2b3f      	cmp	r3, #63	; 0x3f
 8003ef0:	dd03      	ble.n	8003efa <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003ef2:	88bb      	ldrh	r3, [r7, #4]
 8003ef4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ef8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	e018      	b.n	8003f32 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	88bb      	ldrh	r3, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	4413      	add	r3, r2
 8003f10:	b29c      	uxth	r4, r3
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	88bb      	ldrh	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	88f8      	ldrh	r0, [r7, #6]
 8003f1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	4622      	mov	r2, r4
 8003f28:	f7ff fe5b 	bl	8003be2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	883a      	ldrh	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d2e1      	bcs.n	8003f00 <SSD1306_DrawFilledRectangle+0x54>
 8003f3c:	e000      	b.n	8003f40 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8003f3e:	bf00      	nop
	}
}
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}

08003f46 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff fd0c 	bl	8003968 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003f50:	f7ff fcd8 	bl	8003904 <SSD1306_UpdateScreen>
}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <ssd1306_I2C_Init+0x24>)
 8003f60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f62:	e002      	b.n	8003f6a <ssd1306_I2C_Init+0x12>
		p--;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f9      	bne.n	8003f64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	0003d090 	.word	0x0003d090

08003f80 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b0c7      	sub	sp, #284	; 0x11c
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003f8e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003f92:	600a      	str	r2, [r1, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f9a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fa6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003faa:	4602      	mov	r2, r0
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003fc6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003fd4:	e015      	b.n	8004002 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003fd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003fda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003fde:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003fea:	3301      	adds	r3, #1
 8003fec:	7811      	ldrb	r1, [r2, #0]
 8003fee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003ff2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003ff6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003ff8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004002:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004006:	b29b      	uxth	r3, r3
 8004008:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800400c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004010:	8812      	ldrh	r2, [r2, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d8df      	bhi.n	8003fd6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800401a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b299      	uxth	r1, r3
 8004022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	b29b      	uxth	r3, r3
 8004030:	f107 020c 	add.w	r2, r7, #12
 8004034:	200a      	movs	r0, #10
 8004036:	9000      	str	r0, [sp, #0]
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <ssd1306_I2C_WriteMulti+0xc8>)
 800403a:	f004 fc85 	bl	8008948 <HAL_I2C_Master_Transmit>
}
 800403e:	bf00      	nop
 8004040:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004044:	46bd      	mov	sp, r7
 8004046:	bd90      	pop	{r4, r7, pc}
 8004048:	20001618 	.word	0x20001618

0800404c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af02      	add	r7, sp, #8
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
 8004056:	460b      	mov	r3, r1
 8004058:	71bb      	strb	r3, [r7, #6]
 800405a:	4613      	mov	r3, r2
 800405c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004062:	797b      	ldrb	r3, [r7, #5]
 8004064:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	b299      	uxth	r1, r3
 800406a:	f107 020c 	add.w	r2, r7, #12
 800406e:	230a      	movs	r3, #10
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2302      	movs	r3, #2
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <ssd1306_I2C_Write+0x38>)
 8004076:	f004 fc67 	bl	8008948 <HAL_I2C_Master_Transmit>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20001618 	.word	0x20001618

08004088 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fbd0 	bl	8004842 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fbeb 	bl	8004882 <SX1278_hw_SPIReadByte>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb88 	bl	80047cc <SX1278_hw_SetNSS>
	return tmp;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
 80040d2:	4613      	mov	r3, r2
 80040d4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fb75 	bl	80047cc <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f000 fba6 	bl	8004842 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	78ba      	ldrb	r2, [r7, #2]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fb9f 	bl	8004842 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fb5e 	bl	80047cc <SX1278_hw_SetNSS>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	461a      	mov	r2, r3
 8004124:	460b      	mov	r3, r1
 8004126:	72fb      	strb	r3, [r7, #11]
 8004128:	4613      	mov	r3, r2
 800412a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800412c:	7abb      	ldrb	r3, [r7, #10]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d927      	bls.n	8004182 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fb47 	bl	80047cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	7afa      	ldrb	r2, [r7, #11]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fb7b 	bl	8004842 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800414c:	2300      	movs	r3, #0
 800414e:	75fb      	strb	r3, [r7, #23]
 8004150:	e00c      	b.n	800416c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	18d4      	adds	r4, r2, r3
 800415c:	4608      	mov	r0, r1
 800415e:	f000 fb90 	bl	8004882 <SX1278_hw_SPIReadByte>
 8004162:	4603      	mov	r3, r0
 8004164:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	3301      	adds	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
 800416c:	7dfa      	ldrb	r2, [r7, #23]
 800416e:	7abb      	ldrb	r3, [r7, #10]
 8004170:	429a      	cmp	r2, r3
 8004172:	d3ee      	bcc.n	8004152 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb26 	bl	80047cc <SX1278_hw_SetNSS>
 8004180:	e000      	b.n	8004184 <SX1278_SPIBurstRead+0x6c>
		return;
 8004182:	bf00      	nop
	}
}
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}

0800418a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	461a      	mov	r2, r3
 8004196:	460b      	mov	r3, r1
 8004198:	72fb      	strb	r3, [r7, #11]
 800419a:	4613      	mov	r3, r2
 800419c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800419e:	7abb      	ldrb	r3, [r7, #10]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d929      	bls.n	80041f8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fb0e 	bl	80047cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	7afb      	ldrb	r3, [r7, #11]
 80041b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 fb3f 	bl	8004842 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]
 80041c8:	e00b      	b.n	80041e2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4619      	mov	r1, r3
 80041d8:	f000 fb33 	bl	8004842 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	3301      	adds	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
 80041e2:	7dfa      	ldrb	r2, [r7, #23]
 80041e4:	7abb      	ldrb	r3, [r7, #10]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3ef      	bcc.n	80041ca <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 faeb 	bl	80047cc <SX1278_hw_SetNSS>
 80041f6:	e000      	b.n	80041fa <SX1278_SPIBurstWrite+0x70>
		return;
 80041f8:	bf00      	nop
	}
}
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f90d 	bl	8004428 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800420e:	200f      	movs	r0, #15
 8004210:	f000 fb5d 	bl	80048ce <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f917 	bl	8004448 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	684a      	ldr	r2, [r1, #4]
 800421e:	688b      	ldr	r3, [r1, #8]
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	04d9      	lsls	r1, r3, #19
 800422a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800422e:	04d0      	lsls	r0, r2, #19
 8004230:	4a6f      	ldr	r2, [pc, #444]	; (80043f0 <SX1278_config+0x1f0>)
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	f7fc ff1b 	bl	8001070 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8004242:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	0c02      	lsrs	r2, r0, #16
 8004250:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004254:	0c0b      	lsrs	r3, r1, #16
 8004256:	b2d3      	uxtb	r3, r2
 8004258:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800425a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	0a02      	lsrs	r2, r0, #8
 8004268:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800426c:	0a0b      	lsrs	r3, r1, #8
 800426e:	b2d3      	uxtb	r3, r2
 8004270:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8004272:	7c3b      	ldrb	r3, [r7, #16]
 8004274:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8004276:	f107 020c 	add.w	r2, r7, #12
 800427a:	2303      	movs	r3, #3
 800427c:	2106      	movs	r1, #6
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ff83 	bl	800418a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8004284:	2234      	movs	r2, #52	; 0x34
 8004286:	2139      	movs	r1, #57	; 0x39
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff1c 	bl	80040c6 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7b1b      	ldrb	r3, [r3, #12]
 8004292:	461a      	mov	r2, r3
 8004294:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <SX1278_config+0x1f4>)
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	461a      	mov	r2, r3
 800429a:	2109      	movs	r1, #9
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff12 	bl	80040c6 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80042a2:	220b      	movs	r2, #11
 80042a4:	210b      	movs	r1, #11
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff0d 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80042ac:	2223      	movs	r2, #35	; 0x23
 80042ae:	210c      	movs	r1, #12
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ff08 	bl	80040c6 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7b5b      	ldrb	r3, [r3, #13]
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b4e      	ldr	r3, [pc, #312]	; (80043f8 <SX1278_config+0x1f8>)
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d147      	bne.n	8004354 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7b9b      	ldrb	r3, [r3, #14]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <SX1278_config+0x1fc>)
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	7bdb      	ldrb	r3, [r3, #15]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4b49      	ldr	r3, [pc, #292]	; (8004400 <SX1278_config+0x200>)
 80042da:	5c5b      	ldrb	r3, [r3, r1]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80042e4:	3301      	adds	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	211d      	movs	r1, #29
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff feea 	bl	80040c6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7b5b      	ldrb	r3, [r3, #13]
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <SX1278_config+0x1f8>)
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7c1b      	ldrb	r3, [r3, #16]
 8004304:	4619      	mov	r1, r3
 8004306:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <SX1278_config+0x204>)
 8004308:	5c5b      	ldrb	r3, [r3, r1]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4413      	add	r3, r2
 8004310:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004312:	3303      	adds	r3, #3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	211e      	movs	r1, #30
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fed3 	bl	80040c6 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8004320:	2131      	movs	r1, #49	; 0x31
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff feb0 	bl	8004088 <SX1278_SPIRead>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	f043 0305 	orr.w	r3, r3, #5
 800433a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	461a      	mov	r2, r3
 8004340:	2131      	movs	r1, #49	; 0x31
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff febf 	bl	80040c6 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004348:	220c      	movs	r2, #12
 800434a:	2137      	movs	r1, #55	; 0x37
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff feba 	bl	80040c6 <SX1278_SPIWrite>
 8004352:	e029      	b.n	80043a8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7b9b      	ldrb	r3, [r3, #14]
 8004358:	461a      	mov	r2, r3
 800435a:	4b28      	ldr	r3, [pc, #160]	; (80043fc <SX1278_config+0x1fc>)
 800435c:	5c9b      	ldrb	r3, [r3, r2]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7bdb      	ldrb	r3, [r3, #15]
 8004366:	4619      	mov	r1, r3
 8004368:	4b25      	ldr	r3, [pc, #148]	; (8004400 <SX1278_config+0x200>)
 800436a:	5c5b      	ldrb	r3, [r3, r1]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004370:	4413      	add	r3, r2
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	211d      	movs	r1, #29
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff fea4 	bl	80040c6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7b5b      	ldrb	r3, [r3, #13]
 8004382:	461a      	mov	r2, r3
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <SX1278_config+0x1f8>)
 8004386:	5c9b      	ldrb	r3, [r3, r2]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7c1b      	ldrb	r3, [r3, #16]
 8004390:	4619      	mov	r1, r3
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <SX1278_config+0x204>)
 8004394:	5c5b      	ldrb	r3, [r3, r1]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800439a:	4413      	add	r3, r2
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	211e      	movs	r1, #30
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fe8f 	bl	80040c6 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80043a8:	2204      	movs	r2, #4
 80043aa:	2126      	movs	r1, #38	; 0x26
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fe8a 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80043b2:	2208      	movs	r2, #8
 80043b4:	211f      	movs	r1, #31
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fe85 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80043bc:	2200      	movs	r2, #0
 80043be:	2120      	movs	r1, #32
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fe80 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80043c6:	2208      	movs	r2, #8
 80043c8:	2121      	movs	r1, #33	; 0x21
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fe7b 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80043d0:	2201      	movs	r2, #1
 80043d2:	2141      	movs	r1, #65	; 0x41
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff fe76 	bl	80040c6 <SX1278_SPIWrite>
	module->readBytes = 0;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f810 	bl	8004408 <SX1278_standby>
}
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	01e84800 	.word	0x01e84800
 80043f4:	0800f764 	.word	0x0800f764
 80043f8:	0800f768 	.word	0x0800f768
 80043fc:	0800f770 	.word	0x0800f770
 8004400:	0800f77c 	.word	0x0800f77c
 8004404:	0800f780 	.word	0x0800f780

08004408 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8004410:	2209      	movs	r2, #9
 8004412:	2101      	movs	r1, #1
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fe56 	bl	80040c6 <SX1278_SPIWrite>
	module->status = STANDBY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	749a      	strb	r2, [r3, #18]
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8004430:	2208      	movs	r2, #8
 8004432:	2101      	movs	r1, #1
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe46 	bl	80040c6 <SX1278_SPIWrite>
	module->status = SLEEP;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	749a      	strb	r2, [r3, #18]
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8004450:	2288      	movs	r2, #136	; 0x88
 8004452:	2101      	movs	r1, #1
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fe36 	bl	80040c6 <SX1278_SPIWrite>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	2112      	movs	r1, #18
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fe29 	bl	80040c6 <SX1278_SPIWrite>
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	460b      	mov	r3, r1
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	7afa      	ldrb	r2, [r7, #11]
 800448e:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff feb5 	bl	8004200 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004496:	2284      	movs	r2, #132	; 0x84
 8004498:	214d      	movs	r1, #77	; 0x4d
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff fe13 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80044a0:	22ff      	movs	r2, #255	; 0xff
 80044a2:	2124      	movs	r1, #36	; 0x24
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff fe0e 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80044aa:	2201      	movs	r2, #1
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fe09 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80044b4:	223f      	movs	r2, #63	; 0x3f
 80044b6:	2111      	movs	r1, #17
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff fe04 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff ffcf 	bl	8004462 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80044c4:	7afb      	ldrb	r3, [r7, #11]
 80044c6:	461a      	mov	r2, r3
 80044c8:	2122      	movs	r1, #34	; 0x22
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fdfb 	bl	80040c6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80044d0:	210f      	movs	r1, #15
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fdd8 	bl	8004088 <SX1278_SPIRead>
 80044d8:	4603      	mov	r3, r0
 80044da:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	461a      	mov	r2, r3
 80044e0:	210d      	movs	r1, #13
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fdef 	bl	80040c6 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 80044e8:	2205      	movs	r2, #5
 80044ea:	2101      	movs	r1, #1
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff fdea 	bl	80040c6 <SX1278_SPIWrite>
	module->readBytes = 0;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80044fa:	2118      	movs	r1, #24
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fdc3 	bl	8004088 <SX1278_SPIRead>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d104      	bne.n	8004516 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2203      	movs	r2, #3
 8004510:	749a      	strb	r2, [r3, #18]
			return 1;
 8004512:	2301      	movs	r3, #1
 8004514:	e013      	b.n	800453e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3b01      	subs	r3, #1
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f967 	bl	80047fa <SX1278_hw_Reset>
			SX1278_config(module);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fe67 	bl	8004200 <SX1278_config>
			return 0;
 8004532:	2300      	movs	r3, #0
 8004534:	e003      	b.n	800453e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8004536:	2001      	movs	r0, #1
 8004538:	f000 f9c9 	bl	80048ce <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800453c:	e7dd      	b.n	80044fa <SX1278_LoRaEntryRx+0x7e>
	}
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f9c6 	bl	80048e4 <SX1278_hw_GetDIO0>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d030      	beq.n	80045c0 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3313      	adds	r3, #19
 8004562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f007 ff76 	bl	800c45a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800456e:	2110      	movs	r1, #16
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fd89 	bl	8004088 <SX1278_SPIRead>
 8004576:	4603      	mov	r3, r0
 8004578:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	461a      	mov	r2, r3
 800457e:	210d      	movs	r1, #13
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fda0 	bl	80040c6 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7b5b      	ldrb	r3, [r3, #13]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7c5b      	ldrb	r3, [r3, #17]
 8004592:	73fb      	strb	r3, [r7, #15]
 8004594:	e005      	b.n	80045a2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004596:	2113      	movs	r1, #19
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fd75 	bl	8004088 <SX1278_SPIRead>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0213 	add.w	r2, r3, #19
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2100      	movs	r1, #0
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fdb3 	bl	8004118 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff51 	bl	8004462 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	460b      	mov	r3, r1
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	7afa      	ldrb	r2, [r7, #11]
 80045e0:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fe0c 	bl	8004200 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80045e8:	2287      	movs	r2, #135	; 0x87
 80045ea:	214d      	movs	r1, #77	; 0x4d
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fd6a 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80045f2:	2200      	movs	r2, #0
 80045f4:	2124      	movs	r1, #36	; 0x24
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fd65 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80045fc:	2241      	movs	r2, #65	; 0x41
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fd60 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff2b 	bl	8004462 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800460c:	22f7      	movs	r2, #247	; 0xf7
 800460e:	2111      	movs	r1, #17
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fd58 	bl	80040c6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8004616:	7afb      	ldrb	r3, [r7, #11]
 8004618:	461a      	mov	r2, r3
 800461a:	2122      	movs	r1, #34	; 0x22
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fd52 	bl	80040c6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004622:	210e      	movs	r1, #14
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fd2f 	bl	8004088 <SX1278_SPIRead>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	461a      	mov	r2, r3
 8004632:	210d      	movs	r1, #13
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fd46 	bl	80040c6 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800463a:	2122      	movs	r1, #34	; 0x22
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fd23 	bl	8004088 <SX1278_SPIRead>
 8004642:	4603      	mov	r3, r0
 8004644:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8004646:	7dba      	ldrb	r2, [r7, #22]
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	429a      	cmp	r2, r3
 800464c:	d104      	bne.n	8004658 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2202      	movs	r2, #2
 8004652:	749a      	strb	r2, [r3, #18]
			return 1;
 8004654:	2301      	movs	r3, #1
 8004656:	e00e      	b.n	8004676 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ea      	bne.n	800463a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f8c6 	bl	80047fa <SX1278_hw_Reset>
			SX1278_config(module);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fdc6 	bl	8004200 <SX1278_config>
			return 0;
 8004674:	2300      	movs	r3, #0
		}
	}
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	2100      	movs	r1, #0
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fd78 	bl	800418a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800469a:	228b      	movs	r2, #139	; 0x8b
 800469c:	2101      	movs	r1, #1
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fd11 	bl	80040c6 <SX1278_SPIWrite>
	while (1) {
		//Set Flag to Ignore EXT

		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f91b 	bl	80048e4 <SX1278_hw_GetDIO0>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80046b4:	2112      	movs	r1, #18
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff fce6 	bl	8004088 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fed0 	bl	8004462 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fea0 	bl	8004408 <SX1278_standby>
			return 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e013      	b.n	80046f4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f88c 	bl	80047fa <SX1278_hw_Reset>
			SX1278_config(module);
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fd8c 	bl	8004200 <SX1278_config>
			return 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e003      	b.n	80046f4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80046ec:	2001      	movs	r0, #1
 80046ee:	f000 f8ee 	bl	80048ce <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80046f2:	e7d7      	b.n	80046a4 <SX1278_LoRaTxPacket+0x26>
	}
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f848 	bl	80047a2 <SX1278_hw_init>
	module->frequency = frequency;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	609a      	str	r2, [r3, #8]
	module->power = power;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	7e3a      	ldrb	r2, [r7, #24]
 8004720:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	7f3a      	ldrb	r2, [r7, #28]
 8004726:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800472e:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004736:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800473e:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004746:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fd59 	bl	8004200 <SX1278_config>
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800476a:	79fa      	ldrb	r2, [r7, #7]
 800476c:	429a      	cmp	r2, r3
 800476e:	d003      	beq.n	8004778 <SX1278_read+0x22>
		length = module->readBytes;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004776:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3313      	adds	r3, #19
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	4619      	mov	r1, r3
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f007 fef8 	bl	800c576 <memcpy>
	rxBuf[length] = '\0';
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4413      	add	r3, r2
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8004798:	79fb      	ldrb	r3, [r7, #7]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80047aa:	2101      	movs	r1, #1
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f80d 	bl	80047cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6858      	ldr	r0, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2201      	movs	r2, #1
 80047be:	4619      	mov	r1, r3
 80047c0:	f003 ff35 	bl	800862e <HAL_GPIO_WritePin>
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6958      	ldr	r0, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	b299      	uxth	r1, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	f003 ff1e 	bl	800862e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004802:	2101      	movs	r1, #1
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ffe1 	bl	80047cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6858      	ldr	r0, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	2200      	movs	r2, #0
 8004816:	4619      	mov	r1, r3
 8004818:	f003 ff09 	bl	800862e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800481c:	2001      	movs	r0, #1
 800481e:	f000 f856 	bl	80048ce <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6858      	ldr	r0, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	2201      	movs	r2, #1
 800482e:	4619      	mov	r1, r3
 8004830:	f003 fefd 	bl	800862e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004834:	2064      	movs	r0, #100	; 0x64
 8004836:	f000 f84a 	bl	80048ce <SX1278_hw_DelayMs>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800484e:	2100      	movs	r1, #0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffbb 	bl	80047cc <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6998      	ldr	r0, [r3, #24]
 800485a:	1cf9      	adds	r1, r7, #3
 800485c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004860:	2201      	movs	r2, #1
 8004862:	f005 f98b 	bl	8009b7c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004866:	bf00      	nop
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4618      	mov	r0, r3
 800486e:	f005 fc78 	bl	800a162 <HAL_SPI_GetState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b01      	cmp	r3, #1
 8004876:	d1f7      	bne.n	8004868 <SX1278_hw_SPICommand+0x26>
		;
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af02      	add	r7, sp, #8
 8004888:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004892:	2100      	movs	r1, #0
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff99 	bl	80047cc <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6998      	ldr	r0, [r3, #24]
 800489e:	f107 020e 	add.w	r2, r7, #14
 80048a2:	f107 010f 	add.w	r1, r7, #15
 80048a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2301      	movs	r3, #1
 80048ae:	f005 faa8 	bl	8009e02 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80048b2:	bf00      	nop
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f005 fc52 	bl	800a162 <HAL_SPI_GetState>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d1f7      	bne.n	80048b4 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80048c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f003 f83c 	bl	8007954 <HAL_Delay>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f003 fe81 	bl	8008600 <HAL_GPIO_ReadPin>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <LORA_IF_GetData_Frame>:
				return FL_FRAGMENT_FIRMWARE ;
			}
		}
	    return 0;
}
uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint32_t unicast_address,uint8_t* buffer_resp , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_resp ){
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
	uint32 address_node_req = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
	ret = SX1278_LoRaRxPacket(module);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fe0b 	bl	8004546 <SX1278_LoRaRxPacket>
 8004930:	4603      	mov	r3, r0
 8004932:	70fb      	strb	r3, [r7, #3]
	if ( ret > 0 ) {
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d035      	beq.n	80049a6 <LORA_IF_GetData_Frame+0x92>
		// Replace Receive Led hear
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800493a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800493e:	481d      	ldr	r0, [pc, #116]	; (80049b4 <LORA_IF_GetData_Frame+0xa0>)
 8004940:	f003 fe8d 	bl	800865e <HAL_GPIO_TogglePin>
		ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	461a      	mov	r2, r3
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff ff03 	bl	8004756 <SX1278_read>
 8004950:	4603      	mov	r3, r0
 8004952:	70fb      	strb	r3, [r7, #3]
		AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <LORA_IF_GetData_Frame+0xa4>)
 8004956:	4919      	ldr	r1, [pc, #100]	; (80049bc <LORA_IF_GetData_Frame+0xa8>)
 8004958:	4819      	ldr	r0, [pc, #100]	; (80049c0 <LORA_IF_GetData_Frame+0xac>)
 800495a:	f001 f9c7 	bl	8005cec <AES_init_ctx_iv>
		AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 800495e:	2210      	movs	r2, #16
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4817      	ldr	r0, [pc, #92]	; (80049c0 <LORA_IF_GetData_Frame+0xac>)
 8004964:	f001 ffc3 	bl	80068ee <AES_CTR_xcrypt_buffer>
		address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	061a      	lsls	r2, r3, #24
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3301      	adds	r3, #1
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	431a      	orrs	r2, r3
									   |(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3302      	adds	r3, #2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	4313      	orrs	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	3203      	adds	r2, #3
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	4313      	orrs	r3, r2
		address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 800498a:	613b      	str	r3, [r7, #16]
		if(address_node_req == unicast_address && buffer_resp[4] == ACK_resp)
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d10a      	bne.n	80049aa <LORA_IF_GetData_Frame+0x96>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800499e:	429a      	cmp	r2, r3
 80049a0:	d103      	bne.n	80049aa <LORA_IF_GetData_Frame+0x96>
			return 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e001      	b.n	80049aa <LORA_IF_GetData_Frame+0x96>
	}
	else return 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e7ff      	b.n	80049aa <LORA_IF_GetData_Frame+0x96>

}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40011000 	.word	0x40011000
 80049b8:	20000054 	.word	0x20000054
 80049bc:	20000044 	.word	0x20000044
 80049c0:	2000152c 	.word	0x2000152c

080049c4 <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret ,uint8_t ACK_req , uint8_t ACK_resp ){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	70fb      	strb	r3, [r7, #3]
	buffer_req[2] = ACK_req;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3302      	adds	r3, #2
 80049d6:	7e3a      	ldrb	r2, [r7, #24]
 80049d8:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <LORA_IF_Stransmit_Request+0x6c>)
 80049dc:	4915      	ldr	r1, [pc, #84]	; (8004a34 <LORA_IF_Stransmit_Request+0x70>)
 80049de:	4816      	ldr	r0, [pc, #88]	; (8004a38 <LORA_IF_Stransmit_Request+0x74>)
 80049e0:	f001 f984 	bl	8005cec <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 80049e4:	2210      	movs	r2, #16
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	4813      	ldr	r0, [pc, #76]	; (8004a38 <LORA_IF_Stransmit_Request+0x74>)
 80049ea:	f001 ff80 	bl	80068ee <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80049ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049f2:	2110      	movs	r1, #16
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fdea 	bl	80045ce <SX1278_LoRaEntryTx>
 80049fa:	4603      	mov	r3, r0
 80049fc:	70fb      	strb	r3, [r7, #3]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80049fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004a02:	2210      	movs	r2, #16
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fe39 	bl	800467e <SX1278_LoRaTxPacket>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	70fb      	strb	r3, [r7, #3]
	/*Read the first Frame */
	 if(ret >0){
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <LORA_IF_Stransmit_Request+0x60>
		//Replace Blink Send hear
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a1a:	4808      	ldr	r0, [pc, #32]	; (8004a3c <LORA_IF_Stransmit_Request+0x78>)
 8004a1c:	f003 fe1f 	bl	800865e <HAL_GPIO_TogglePin>
		return LORA_OKE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <LORA_IF_Stransmit_Request+0x62>
	 }
	 return LORA_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000054 	.word	0x20000054
 8004a34:	20000044 	.word	0x20000044
 8004a38:	2000152c 	.word	0x2000152c
 8004a3c:	40010c00 	.word	0x40010c00

08004a40 <LORA_IF_Stransmit_Fragment_Firmware>:

LoRa_Return_t LORA_IF_Stransmit_Fragment_Firmware(SX1278_t *module ,uint8_t* buffer_flashing_data ){
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a52:	2150      	movs	r1, #80	; 0x50
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fdba 	bl	80045ce <SX1278_LoRaEntryTx>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a60:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_flashing_data, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004a66:	2250      	movs	r2, #80	; 0x50
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fe07 	bl	800467e <SX1278_LoRaTxPacket>
 8004a70:	4603      	mov	r3, r0
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a76:	701a      	strb	r2, [r3, #0]
	 if(ret){
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <LORA_IF_Stransmit_Fragment_Firmware+0x54>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a84:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <LORA_IF_Stransmit_Fragment_Firmware+0x68>)
 8004a86:	f003 fdea 	bl	800865e <HAL_GPIO_TogglePin>
		 HAL_Delay(WAIT_PACKET_SEND);
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f002 ff62 	bl	8007954 <HAL_Delay>
		/*Read the first Frame */
//		switch(local_u8Check_Code = LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_16BYTES)){
//			case(MCU_ACKNOWLEDGE_FINISHING):
//				buffer_packet[2] = buffer_resp[2];
		 return LORA_OKE ;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e003      	b.n	8004a9c <LORA_IF_Stransmit_Fragment_Firmware+0x5c>
//			case(MCU_IMAGE_CRC_NOT_CORRECT):
//				return LORA_FLASHING_ERROR;
	 }
//		}
	 else{
		 counter++;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a9a:	e7d8      	b.n	8004a4e <LORA_IF_Stransmit_Fragment_Firmware+0xe>
			 return LORA_ERROR;
		 }
	 }

	}
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000bb9 	.word	0x20000bb9
 8004aa8:	40010c00 	.word	0x40010c00

08004aac <LORA_IF_GetData_End_Frame>:

uint8_t LORA_IF_GetData_End_Frame(SX1278_t *module, uint8_t *rxBuffer, uint32_t unicast_addr , uint8_t length, uint32_t timeout){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
	uint32_t local_u32addrNode_req;
	memset(rxBuffer , 0xff ,112);
 8004abe:	2270      	movs	r2, #112	; 0x70
 8004ac0:	21ff      	movs	r1, #255	; 0xff
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f007 fcc9 	bl	800c45a <memset>
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <LORA_IF_GetData_End_Frame+0xb4>)
 8004aca:	4926      	ldr	r1, [pc, #152]	; (8004b64 <LORA_IF_GetData_End_Frame+0xb8>)
 8004acc:	4826      	ldr	r0, [pc, #152]	; (8004b68 <LORA_IF_GetData_End_Frame+0xbc>)
 8004ace:	f001 f90d 	bl	8005cec <AES_init_ctx_iv>
	ret = SX1278_LoRaRxPacket(module);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fd37 	bl	8004546 <SX1278_LoRaRxPacket>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	461a      	mov	r2, r3
 8004adc:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <LORA_IF_GetData_End_Frame+0xc0>)
 8004ade:	701a      	strb	r2, [r3, #0]
	if ( ret > 0 ) {
 8004ae0:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <LORA_IF_GetData_End_Frame+0xc0>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d036      	beq.n	8004b56 <LORA_IF_GetData_End_Frame+0xaa>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8004ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aec:	4820      	ldr	r0, [pc, #128]	; (8004b70 <LORA_IF_GetData_End_Frame+0xc4>)
 8004aee:	f003 fdb6 	bl	800865e <HAL_GPIO_TogglePin>
		ret = SX1278_read(module, (uint8_t*) rxBuffer, ret);
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <LORA_IF_GetData_End_Frame+0xc0>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fe2b 	bl	8004756 <SX1278_read>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <LORA_IF_GetData_End_Frame+0xc0>)
 8004b06:	701a      	strb	r2, [r3, #0]
		AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) rxBuffer, length);
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4816      	ldr	r0, [pc, #88]	; (8004b68 <LORA_IF_GetData_End_Frame+0xbc>)
 8004b10:	f001 feed 	bl	80068ee <AES_CTR_xcrypt_buffer>
		//convert buffer to address_node_req
		local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	061a      	lsls	r2, r3, #24
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
											|(rxBuffer[2] << SHIFT_8_BIT) | (rxBuffer[3] << SHIFT_0_BIT);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3302      	adds	r3, #2
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	3203      	adds	r2, #3
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	4313      	orrs	r3, r2
		local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8004b36:	613b      	str	r3, [r7, #16]
		if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 || local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <LORA_IF_GetData_End_Frame+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <LORA_IF_GetData_End_Frame+0xa4>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <LORA_IF_GetData_End_Frame+0xcc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <LORA_IF_GetData_End_Frame+0xa4>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <LORA_IF_GetData_End_Frame+0xd0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d102      	bne.n	8004b56 <LORA_IF_GetData_End_Frame+0xaa>
			//return flag
			return rxBuffer[4];
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	e7ff      	b.n	8004b56 <LORA_IF_GetData_End_Frame+0xaa>
	}
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000054 	.word	0x20000054
 8004b64:	20000044 	.word	0x20000044
 8004b68:	2000152c 	.word	0x2000152c
 8004b6c:	20000bb9 	.word	0x20000bb9
 8004b70:	40010c00 	.word	0x40010c00
 8004b74:	26011bcd 	.word	0x26011bcd
 8004b78:	26011def 	.word	0x26011def
 8004b7c:	260120f0 	.word	0x260120f0

08004b80 <UI_Init>:
static const uint8_t SX1278_SpreadFactor_Values[7] = { 6, 7, 8, 9, 10, 11, 12 };
static const float SX1278_CodingRate_Values[4] = { 1, 2, 3, 4 };
/**************************************************/
/*				  Init FUNC					      */
/**************************************************/
void UI_Init(void){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
	// Init variables
	gl_UISTATE = UI_IDLE;
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <UI_Init+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
	//gl_UISTATE = UI_START_OTA;
	gl_u8DownLoadProgress = INIT_VAL_ZERO;
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <UI_Init+0x3c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
	gl_u32SizeCodeFw = INIT_VAL_ZERO;
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <UI_Init+0x40>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
	gl_counterdot = INIT_VAL_ZERO;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <UI_Init+0x44>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
	uint16_t  TOTAL_PACKETS = INIT_VAL_ZERO;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	80fb      	strh	r3, [r7, #6]
	// Init OLED display
	SSD1306_Init();
 8004ba2:	f7fe fdeb 	bl	800377c <SSD1306_Init>
	/*Run main Appication before go to Flashing Appl*/
	// Init Flashing
	UI_Init_Flashing_Screen();
 8004ba6:	f000 fa49 	bl	800503c <UI_Init_Flashing_Screen>
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004baa:	4807      	ldr	r0, [pc, #28]	; (8004bc8 <UI_Init+0x48>)
 8004bac:	f7fd ff90 	bl	8002ad0 <Rte_SystemState_ReadData>


}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200015ec 	.word	0x200015ec
 8004bbc:	200015ef 	.word	0x200015ef
 8004bc0:	200015f4 	.word	0x200015f4
 8004bc4:	200015f8 	.word	0x200015f8
 8004bc8:	200015ed 	.word	0x200015ed

08004bcc <UI_Main_FLASHING>:

void UI_Main_FLASHING(void){
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
	switch (gl_UISTATE) {
 8004bd2:	4ba7      	ldr	r3, [pc, #668]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b0a      	cmp	r3, #10
 8004bd8:	f200 820b 	bhi.w	8004ff2 <UI_Main_FLASHING+0x426>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UI_Main_FLASHING+0x18>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c11 	.word	0x08004c11
 8004be8:	08004ff3 	.word	0x08004ff3
 8004bec:	08004d47 	.word	0x08004d47
 8004bf0:	08004d83 	.word	0x08004d83
 8004bf4:	08004e45 	.word	0x08004e45
 8004bf8:	08004ef5 	.word	0x08004ef5
 8004bfc:	08004f5b 	.word	0x08004f5b
 8004c00:	08004fd1 	.word	0x08004fd1
 8004c04:	08004fab 	.word	0x08004fab
 8004c08:	08004cef 	.word	0x08004cef
 8004c0c:	08004caf 	.word	0x08004caf
		/* UI_IDE STATE */
		case UI_IDLE:
		{
			//RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_ReadData(&gl_u8NodeIndex);
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_1(&gl_u8NodeStatus_1);
 8004c10:	4898      	ldr	r0, [pc, #608]	; (8004e74 <UI_Main_FLASHING+0x2a8>)
 8004c12:	f7fe f97f 	bl	8002f14 <Rte_Flag_NodeStatus_ReadData_Node1>
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_2(&gl_u8NodeStatus_2);
 8004c16:	4898      	ldr	r0, [pc, #608]	; (8004e78 <UI_Main_FLASHING+0x2ac>)
 8004c18:	f7fe f98e 	bl	8002f38 <Rte_Flag_NodeStatus_ReadData_Node2>
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_3(&gl_u8NodeStatus_3);
 8004c1c:	4897      	ldr	r0, [pc, #604]	; (8004e7c <UI_Main_FLASHING+0x2b0>)
 8004c1e:	f7fe f99d 	bl	8002f5c <Rte_Flag_NodeStatus_ReadData_Node3>
			UI_Node_Connect(0x0,gl_u8NodeStatus_1);
 8004c22:	4b94      	ldr	r3, [pc, #592]	; (8004e74 <UI_Main_FLASHING+0x2a8>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	2000      	movs	r0, #0
 8004c34:	f000 fa38 	bl	80050a8 <UI_Node_Connect>
			UI_Node_Connect(0x01,gl_u8NodeStatus_2);
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <UI_Main_FLASHING+0x2ac>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	4619      	mov	r1, r3
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f000 fa2d 	bl	80050a8 <UI_Node_Connect>
			UI_Node_Connect(0x02,gl_u8NodeStatus_3);
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <UI_Main_FLASHING+0x2b0>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	2300      	moveq	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2002      	movs	r0, #2
 8004c60:	f000 fa22 	bl	80050a8 <UI_Node_Connect>
			// Get System state Via RTE
			Std_ReturnType retVal  = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004c64:	4886      	ldr	r0, [pc, #536]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004c66:	f7fd ff33 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	70bb      	strb	r3, [r7, #2]
			if(RTE_E_OKE == retVal){
 8004c6e:	78bb      	ldrb	r3, [r7, #2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d118      	bne.n	8004ca6 <UI_Main_FLASHING+0xda>
				if(SYS_RECEIVE_UPDATE == gl_SystemState )
 8004c74:	4b82      	ldr	r3, [pc, #520]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d109      	bne.n	8004c90 <UI_Main_FLASHING+0xc4>
				{
					// Clean UI screen
					UI_Clean();
 8004c7c:	f000 fa60 	bl	8005140 <UI_Clean>
					UI_WaitForResp();
 8004c80:	f000 fa66 	bl	8005150 <UI_WaitForResp>
					// Display Information for FLashing
					UI_Downloading_FW();
 8004c84:	f000 faea 	bl	800525c <UI_Downloading_FW>
					gl_UISTATE =  UI_DOWNLOADING_FW;
 8004c88:	4b79      	ldr	r3, [pc, #484]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004c8a:	2209      	movs	r2, #9
 8004c8c:	701a      	strb	r2, [r3, #0]

			else{
				/*State In IDLE STATE and Change UI to ERROR STATE*/
				gl_UISTATE = UI_DISPLAYERROR;
			}
			break;
 8004c8e:	e1b4      	b.n	8004ffa <UI_Main_FLASHING+0x42e>
				else if(WAIT_FOR_ESP_CONNECT == gl_SystemState){
 8004c90:	4b7b      	ldr	r3, [pc, #492]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b0a      	cmp	r3, #10
 8004c96:	f040 81b0 	bne.w	8004ffa <UI_Main_FLASHING+0x42e>
					UI_Clean();
 8004c9a:	f000 fa51 	bl	8005140 <UI_Clean>
					gl_UISTATE = UI_WAIT_FOR_WIFI;
 8004c9e:	4b74      	ldr	r3, [pc, #464]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004ca0:	220a      	movs	r2, #10
 8004ca2:	701a      	strb	r2, [r3, #0]
			break;
 8004ca4:	e1a9      	b.n	8004ffa <UI_Main_FLASHING+0x42e>
				gl_UISTATE = UI_DISPLAYERROR;
 8004ca6:	4b72      	ldr	r3, [pc, #456]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	701a      	strb	r2, [r3, #0]
			break;
 8004cac:	e1a5      	b.n	8004ffa <UI_Main_FLASHING+0x42e>
		}
		case UI_WAIT_FOR_WIFI:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004cae:	4874      	ldr	r0, [pc, #464]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004cb0:	f7fd ff0e 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
			UI_Wait_ForConnect_WiFi();
 8004cb8:	f000 fe46 	bl	8005948 <UI_Wait_ForConnect_WiFi>
			if(RTE_E_OKE == retVal){
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 819d 	bne.w	8004ffe <UI_Main_FLASHING+0x432>
				if(WIFI_CONNECTED == gl_SystemState )
 8004cc4:	4b6e      	ldr	r3, [pc, #440]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2bf1      	cmp	r3, #241	; 0xf1
 8004cca:	f040 8198 	bne.w	8004ffe <UI_Main_FLASHING+0x432>
				{
					UI_Clean();
 8004cce:	f000 fa37 	bl	8005140 <UI_Clean>
					UI_WiFi_Connected();
 8004cd2:	f000 feaf 	bl	8005a34 <UI_WiFi_Connected>
					//Change to UI_IDE
					gl_UISTATE = UI_IDLE;
 8004cd6:	4b66      	ldr	r3, [pc, #408]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 8004cdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ce0:	f002 fe38 	bl	8007954 <HAL_Delay>
					UI_Clean();
 8004ce4:	f000 fa2c 	bl	8005140 <UI_Clean>
					UI_Init_Flashing_Screen();
 8004ce8:	f000 f9a8 	bl	800503c <UI_Init_Flashing_Screen>
				}
			}
			break;
 8004cec:	e187      	b.n	8004ffe <UI_Main_FLASHING+0x432>
		}
		case UI_DOWNLOADING_FW:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_DOWNLOAD_PROGRESS_ReadData(&gl_u8DownLoadProgress);
 8004cee:	4865      	ldr	r0, [pc, #404]	; (8004e84 <UI_Main_FLASHING+0x2b8>)
 8004cf0:	f7fd ffba 	bl	8002c68 <Rte_UpdateProgress_ReadData>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75bb      	strb	r3, [r7, #22]
			if( RTE_E_OKE == retVal){
 8004cf8:	7dbb      	ldrb	r3, [r7, #22]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 8181 	bne.w	8005002 <UI_Main_FLASHING+0x436>
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				UI_UpdateDownloading_FW(gl_u8DownLoadProgress);
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <UI_Main_FLASHING+0x2b8>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fabb 	bl	8005280 <UI_UpdateDownloading_FW>
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				if(gl_u8DownLoadProgress >100)
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <UI_Main_FLASHING+0x2b8>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d902      	bls.n	8004d18 <UI_Main_FLASHING+0x14c>
					gl_u8DownLoadProgress=100;
 8004d12:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <UI_Main_FLASHING+0x2b8>)
 8004d14:	2264      	movs	r2, #100	; 0x64
 8004d16:	701a      	strb	r2, [r3, #0]
				if(100 == gl_u8DownLoadProgress)
 8004d18:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <UI_Main_FLASHING+0x2b8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b64      	cmp	r3, #100	; 0x64
 8004d1e:	d104      	bne.n	8004d2a <UI_Main_FLASHING+0x15e>
				{
					//HAL_Delay(2000);
					UI_Clean();
 8004d20:	f000 fa0e 	bl	8005140 <UI_Clean>
					gl_UISTATE = UI_START_OTA;
 8004d24:	4b52      	ldr	r3, [pc, #328]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
				}
				retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_UIERRORTYPE);
 8004d2a:	4857      	ldr	r0, [pc, #348]	; (8004e88 <UI_Main_FLASHING+0x2bc>)
 8004d2c:	f7fd ffc0 	bl	8002cb0 <Rte_UI_Error_ReadData>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75bb      	strb	r3, [r7, #22]
				if(gl_UIERRORTYPE ==UI_ERROR_RESET )
 8004d34:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <UI_Main_FLASHING+0x2bc>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	f040 8162 	bne.w	8005002 <UI_Main_FLASHING+0x436>
					gl_UISTATE = UI_DISPLAYERROR;
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004d44:	e15d      	b.n	8005002 <UI_Main_FLASHING+0x436>
		}
		case UI_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004d46:	484e      	ldr	r0, [pc, #312]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004d48:	f7fd fec2 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	70fb      	strb	r3, [r7, #3]
			retVal = Rte_PacketSendLoraNum_ReadData(&gl_TimeRequest);
 8004d50:	484e      	ldr	r0, [pc, #312]	; (8004e8c <UI_Main_FLASHING+0x2c0>)
 8004d52:	f7fd fff5 	bl	8002d40 <Rte_PacketSendLoraNum_ReadData>
 8004d56:	4603      	mov	r3, r0
 8004d58:	70fb      	strb	r3, [r7, #3]
			if (RTE_E_OKE == retVal){
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 8152 	bne.w	8005006 <UI_Main_FLASHING+0x43a>
				if(gl_SystemState == SYS_REQUEST_OTA){
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d107      	bne.n	8004d7a <UI_Main_FLASHING+0x1ae>
					UI_StartOTA();
 8004d6a:	f000 fca7 	bl	80056bc <UI_StartOTA>
					UI_Wait_ACCEPT_OTA(gl_TimeRequest);
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <UI_Main_FLASHING+0x2c0>)
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fcb6 	bl	80056e4 <UI_Wait_ACCEPT_OTA>
				else {
					gl_UISTATE = UI_WAIT_START_OTA;
					//UI_Clean();
				}
			}
			break;
 8004d78:	e145      	b.n	8005006 <UI_Main_FLASHING+0x43a>
					gl_UISTATE = UI_WAIT_START_OTA;
 8004d7a:	4b3d      	ldr	r3, [pc, #244]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	701a      	strb	r2, [r3, #0]
			break;
 8004d80:	e141      	b.n	8005006 <UI_Main_FLASHING+0x43a>
		}
		case UI_WAIT_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004d82:	483f      	ldr	r0, [pc, #252]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004d84:	f7fd fea4 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73bb      	strb	r3, [r7, #14]
			if (gl_SystemState == SYS_CONFIG_LORA){
 8004d8c:	4b3c      	ldr	r3, [pc, #240]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d151      	bne.n	8004e38 <UI_Main_FLASHING+0x26c>
				gl_UISTATE = UI_SYNCONFIGURATION;
 8004d94:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]
				UI_Clean();
 8004d9a:	f000 f9d1 	bl	8005140 <UI_Clean>
				RTE_RUNNABLE_CONFIG_LORA_ReadData(&gl_u32configLoRa);
 8004d9e:	483c      	ldr	r0, [pc, #240]	; (8004e90 <UI_Main_FLASHING+0x2c4>)
 8004da0:	f7fd fff2 	bl	8002d88 <Rte_FlagConfigLoRA_ReadData>
				u8SF = (gl_u32configLoRa >> SHIFT_16_BIT)& 0xFF ;
 8004da4:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <UI_Main_FLASHING+0x2c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <UI_Main_FLASHING+0x2c8>)
 8004dae:	701a      	strb	r2, [r3, #0]
				u8BW = (gl_u32configLoRa >> SHIFT_8_BIT)& 0xFF ;
 8004db0:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <UI_Main_FLASHING+0x2c4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <UI_Main_FLASHING+0x2cc>)
 8004dba:	701a      	strb	r2, [r3, #0]
				u8CR = (gl_u32configLoRa >> SHIFT_0_BIT)& 0xFF ;
 8004dbc:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <UI_Main_FLASHING+0x2c4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <UI_Main_FLASHING+0x2d0>)
 8004dc4:	701a      	strb	r2, [r3, #0]

				uint8_t sf = SX1278_SpreadFactor_Values[u8SF];
 8004dc6:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <UI_Main_FLASHING+0x2c8>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <UI_Main_FLASHING+0x2d4>)
 8004dce:	5c9b      	ldrb	r3, [r3, r2]
 8004dd0:	737b      	strb	r3, [r7, #13]
				float bw = SX1278_Bandwidth_Values[u8BW];
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <UI_Main_FLASHING+0x2cc>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <UI_Main_FLASHING+0x2d8>)
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	60bb      	str	r3, [r7, #8]
				float cr = SX1278_CodingRate_Values[u8CR];
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <UI_Main_FLASHING+0x2d0>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <UI_Main_FLASHING+0x2dc>)
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	607b      	str	r3, [r7, #4]
				data_rate = UI_CalculateLoRaDataRate(sf, bw, cr);
 8004dee:	68b8      	ldr	r0, [r7, #8]
 8004df0:	f7fc f91e 	bl	8001030 <__aeabi_f2uiz>
 8004df4:	4604      	mov	r4, r0
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc f91a 	bl	8001030 <__aeabi_f2uiz>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	7b7b      	ldrb	r3, [r7, #13]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fe41 	bl	8005a8c <UI_CalculateLoRaDataRate>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <UI_Main_FLASHING+0x2e0>)
 8004e0e:	6013      	str	r3, [r2, #0]
				transmission_time_per_packet = (PACKET_SIZE * 8.0) / data_rate;
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <UI_Main_FLASHING+0x2e0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4826      	ldr	r0, [pc, #152]	; (8004eb0 <UI_Main_FLASHING+0x2e4>)
 8004e18:	f7fc f848 	bl	8000eac <__aeabi_fdiv>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <UI_Main_FLASHING+0x2e8>)
 8004e22:	601a      	str	r2, [r3, #0]
				UI_DisplayConfig(u8BW ,u8SF ,u8CR);
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <UI_Main_FLASHING+0x2cc>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <UI_Main_FLASHING+0x2c8>)
 8004e2a:	7811      	ldrb	r1, [r2, #0]
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <UI_Main_FLASHING+0x2d0>)
 8004e2e:	7812      	ldrb	r2, [r2, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fd1f 	bl	8005874 <UI_DisplayConfig>
			else {
				/*OUT OF REQUEST*/
				gl_UISTATE=UI_DISPLAYERROR;
				UI_Clean();
			}
			break;
 8004e36:	e0f1      	b.n	800501c <UI_Main_FLASHING+0x450>
				gl_UISTATE=UI_DISPLAYERROR;
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <UI_Main_FLASHING+0x2a4>)
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	701a      	strb	r2, [r3, #0]
				UI_Clean();
 8004e3e:	f000 f97f 	bl	8005140 <UI_Clean>
			break;
 8004e42:	e0eb      	b.n	800501c <UI_Main_FLASHING+0x450>
		}
		case UI_SYNCONFIGURATION:
		{	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004e44:	480e      	ldr	r0, [pc, #56]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004e46:	f7fd fe43 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
			retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004e4e:	481a      	ldr	r0, [pc, #104]	; (8004eb8 <UI_Main_FLASHING+0x2ec>)
 8004e50:	f7fd ff2e 	bl	8002cb0 <Rte_UI_Error_ReadData>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]
			if( RTE_E_OKE == retVal){
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	f040 80d5 	bne.w	800500a <UI_Main_FLASHING+0x43e>
				if(gl_SystemState == SYS_CONFIG_LORA){
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <UI_Main_FLASHING+0x2b4>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d129      	bne.n	8004ebc <UI_Main_FLASHING+0x2f0>
					UI_Synconfiguaraton();
 8004e68:	f000 fab0 	bl	80053cc <UI_Synconfiguaraton>
 8004e6c:	e032      	b.n	8004ed4 <UI_Main_FLASHING+0x308>
 8004e6e:	bf00      	nop
 8004e70:	200015ec 	.word	0x200015ec
 8004e74:	20001602 	.word	0x20001602
 8004e78:	20001603 	.word	0x20001603
 8004e7c:	20001604 	.word	0x20001604
 8004e80:	200015ed 	.word	0x200015ed
 8004e84:	200015ef 	.word	0x200015ef
 8004e88:	200015ee 	.word	0x200015ee
 8004e8c:	200015fa 	.word	0x200015fa
 8004e90:	20001608 	.word	0x20001608
 8004e94:	20000c85 	.word	0x20000c85
 8004e98:	20000c84 	.word	0x20000c84
 8004e9c:	20000c86 	.word	0x20000c86
 8004ea0:	0800f7b4 	.word	0x0800f7b4
 8004ea4:	0800f78c 	.word	0x0800f78c
 8004ea8:	0800f7bc 	.word	0x0800f7bc
 8004eac:	2000160c 	.word	0x2000160c
 8004eb0:	44200000 	.word	0x44200000
 8004eb4:	20001610 	.word	0x20001610
 8004eb8:	200015f0 	.word	0x200015f0
				}
				else if(gl_SystemState == SYS_SEND_UPDATE){
 8004ebc:	4b59      	ldr	r3, [pc, #356]	; (8005024 <UI_Main_FLASHING+0x458>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b07      	cmp	r3, #7
 8004ec2:	d107      	bne.n	8004ed4 <UI_Main_FLASHING+0x308>
					UI_Clean();
 8004ec4:	f000 f93c 	bl	8005140 <UI_Clean>
					RTE_RUNNABLE_FLAG_TOTAL_REQUEST_PACKET_ReadData(&TOTAL_PACKETS);
 8004ec8:	4857      	ldr	r0, [pc, #348]	; (8005028 <UI_Main_FLASHING+0x45c>)
 8004eca:	f7fd ffdb 	bl	8002e84 <Rte_Flag_Total_request_packet_ReadData>
					gl_UISTATE = UI_SENDPACKET_LORA_FW;
 8004ece:	4b57      	ldr	r3, [pc, #348]	; (800502c <UI_Main_FLASHING+0x460>)
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	701a      	strb	r2, [r3, #0]
				}

				if(gl_u8ErrorFlag == GW_REQUEST_UPDATE_ERROR){
 8004ed4:	4b56      	ldr	r3, [pc, #344]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eda:	f040 8096 	bne.w	800500a <UI_Main_FLASHING+0x43e>
					UI_Clean();
 8004ede:	f000 f92f 	bl	8005140 <UI_Clean>
					gl_UISTATE =UI_DISPLAYERROR;
 8004ee2:	4b52      	ldr	r3, [pc, #328]	; (800502c <UI_Main_FLASHING+0x460>)
 8004ee4:	2207      	movs	r2, #7
 8004ee6:	701a      	strb	r2, [r3, #0]
					UI_DisplayERROR(gl_u8ErrorFlag);
 8004ee8:	4b51      	ldr	r3, [pc, #324]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fc25 	bl	800573c <UI_DisplayERROR>
				}
			}
			break;
 8004ef2:	e08a      	b.n	800500a <UI_Main_FLASHING+0x43e>
		}
		case UI_SENDPACKET_LORA_FW:
		{

			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8004ef4:	484f      	ldr	r0, [pc, #316]	; (8005034 <UI_Main_FLASHING+0x468>)
 8004ef6:	f7fd ff23 	bl	8002d40 <Rte_PacketSendLoraNum_ReadData>
 8004efa:	4603      	mov	r3, r0
 8004efc:	747b      	strb	r3, [r7, #17]

			if(RTE_E_OKE == retVal_1){
 8004efe:	7c7b      	ldrb	r3, [r7, #17]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 8084 	bne.w	800500e <UI_Main_FLASHING+0x442>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004f06:	484a      	ldr	r0, [pc, #296]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f08:	f7fd fed2 	bl	8002cb0 <Rte_UI_Error_ReadData>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	743b      	strb	r3, [r7, #16]
				UI_SendSW_LoRa(gl_u16Packet_LoRa_FW);
 8004f10:	4b48      	ldr	r3, [pc, #288]	; (8005034 <UI_Main_FLASHING+0x468>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fab7 	bl	8005488 <UI_SendSW_LoRa>
				if( MCU_ERROR_CRC == gl_u8ErrorFlag  ){
 8004f1a:	4b45      	ldr	r3, [pc, #276]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b4f      	cmp	r3, #79	; 0x4f
 8004f20:	d105      	bne.n	8004f2e <UI_Main_FLASHING+0x362>
					UI_Clean();
 8004f22:	f000 f90d 	bl	8005140 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8004f26:	4b41      	ldr	r3, [pc, #260]	; (800502c <UI_Main_FLASHING+0x460>)
 8004f28:	2207      	movs	r2, #7
 8004f2a:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
				}

			}
			break;
 8004f2c:	e06f      	b.n	800500e <UI_Main_FLASHING+0x442>
				else if( MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8004f2e:	4b40      	ldr	r3, [pc, #256]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b77      	cmp	r3, #119	; 0x77
 8004f34:	d107      	bne.n	8004f46 <UI_Main_FLASHING+0x37a>
					UI_Clean();
 8004f36:	f000 f903 	bl	8005140 <UI_Clean>
					UI_DoneDownload_FW();
 8004f3a:	f000 f9d3 	bl	80052e4 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	; (800502c <UI_Main_FLASHING+0x460>)
 8004f40:	2208      	movs	r2, #8
 8004f42:	701a      	strb	r2, [r3, #0]
			break;
 8004f44:	e063      	b.n	800500e <UI_Main_FLASHING+0x442>
				else if(MCU_REQUEST_PACKET_FW_LOSS ==gl_u8ErrorFlag ){
 8004f46:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b76      	cmp	r3, #118	; 0x76
 8004f4c:	d15f      	bne.n	800500e <UI_Main_FLASHING+0x442>
					UI_Clean();
 8004f4e:	f000 f8f7 	bl	8005140 <UI_Clean>
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
 8004f52:	4b36      	ldr	r3, [pc, #216]	; (800502c <UI_Main_FLASHING+0x460>)
 8004f54:	2206      	movs	r2, #6
 8004f56:	701a      	strb	r2, [r3, #0]
			break;
 8004f58:	e059      	b.n	800500e <UI_Main_FLASHING+0x442>
		}
		case UI_RESENDPACKET_LORA_FW:
		{
			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8004f5a:	4836      	ldr	r0, [pc, #216]	; (8005034 <UI_Main_FLASHING+0x468>)
 8004f5c:	f7fd fef0 	bl	8002d40 <Rte_PacketSendLoraNum_ReadData>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
			if(RTE_E_OKE == retVal_1){
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d153      	bne.n	8005012 <UI_Main_FLASHING+0x446>
				UI_Send_Packet_Lost(gl_u16Packet_LoRa_FW);
 8004f6a:	4b32      	ldr	r3, [pc, #200]	; (8005034 <UI_Main_FLASHING+0x468>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fc48 	bl	8005804 <UI_Send_Packet_Lost>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004f74:	482e      	ldr	r0, [pc, #184]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f76:	f7fd fe9b 	bl	8002cb0 <Rte_UI_Error_ReadData>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	74bb      	strb	r3, [r7, #18]
				if(MCU_ERROR_CRC  ==gl_u8ErrorFlag){
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b4f      	cmp	r3, #79	; 0x4f
 8004f84:	d105      	bne.n	8004f92 <UI_Main_FLASHING+0x3c6>
					UI_Clean();
 8004f86:	f000 f8db 	bl	8005140 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <UI_Main_FLASHING+0x460>)
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					UI_DoneDownload_FW();
					gl_UISTATE = UI_DONE_OTA;
				}
			}
			break;
 8004f90:	e03f      	b.n	8005012 <UI_Main_FLASHING+0x446>
				else if(MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b77      	cmp	r3, #119	; 0x77
 8004f98:	d13b      	bne.n	8005012 <UI_Main_FLASHING+0x446>
					UI_Clean();
 8004f9a:	f000 f8d1 	bl	8005140 <UI_Clean>
					UI_DoneDownload_FW();
 8004f9e:	f000 f9a1 	bl	80052e4 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <UI_Main_FLASHING+0x460>)
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	701a      	strb	r2, [r3, #0]
			break;
 8004fa8:	e033      	b.n	8005012 <UI_Main_FLASHING+0x446>
		}
		case UI_DONE_OTA:
		{

			UI_DoneDownload_FW();
 8004faa:	f000 f99b 	bl	80052e4 <UI_DoneDownload_FW>
			//HAL_Delay(2000);
			//UI_Init_Flashing_Screen();
			//RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
			uint8_t retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004fae:	481d      	ldr	r0, [pc, #116]	; (8005024 <UI_Main_FLASHING+0x458>)
 8004fb0:	f7fd fd8e 	bl	8002ad0 <Rte_SystemState_ReadData>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	757b      	strb	r3, [r7, #21]
			if(gl_SystemState ==SYS_IDLE ){
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <UI_Main_FLASHING+0x458>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d12a      	bne.n	8005016 <UI_Main_FLASHING+0x44a>
				UI_Clean();
 8004fc0:	f000 f8be 	bl	8005140 <UI_Clean>
				UI_Init_Flashing_Screen();
 8004fc4:	f000 f83a 	bl	800503c <UI_Init_Flashing_Screen>
				gl_UISTATE = UI_IDLE;
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <UI_Main_FLASHING+0x460>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004fce:	e022      	b.n	8005016 <UI_Main_FLASHING+0x44a>
		}
		case UI_DISPLAYERROR:
		{
			/*ERROR Handler */
			Std_ReturnType retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004fd0:	4817      	ldr	r0, [pc, #92]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004fd2:	f7fd fe6d 	bl	8002cb0 <Rte_UI_Error_ReadData>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	753b      	strb	r3, [r7, #20]
			if(RTE_E_OKE == retVal){
 8004fda:	7d3b      	ldrb	r3, [r7, #20]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d11c      	bne.n	800501a <UI_Main_FLASHING+0x44e>
				UI_DisplayERROR(gl_u8ErrorFlag);
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <UI_Main_FLASHING+0x464>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fba9 	bl	800573c <UI_DisplayERROR>
				// START TIMER FOR RS SW
				HAL_TIM_Base_Start_IT(&htim4);
 8004fea:	4813      	ldr	r0, [pc, #76]	; (8005038 <UI_Main_FLASHING+0x46c>)
 8004fec:	f005 fa2c 	bl	800a448 <HAL_TIM_Base_Start_IT>
			}
			break;
 8004ff0:	e013      	b.n	800501a <UI_Main_FLASHING+0x44e>
		}
		default:
			/*ERROR */
			gl_UISTATE = UI_DISPLAYERROR;
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <UI_Main_FLASHING+0x460>)
 8004ff4:	2207      	movs	r2, #7
 8004ff6:	701a      	strb	r2, [r3, #0]
			break;
 8004ff8:	e010      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8004ffa:	bf00      	nop
 8004ffc:	e00e      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8004ffe:	bf00      	nop
 8005000:	e00c      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8005002:	bf00      	nop
 8005004:	e00a      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8005006:	bf00      	nop
 8005008:	e008      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 800500a:	bf00      	nop
 800500c:	e006      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 800500e:	bf00      	nop
 8005010:	e004      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8005012:	bf00      	nop
 8005014:	e002      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 8005016:	bf00      	nop
 8005018:	e000      	b.n	800501c <UI_Main_FLASHING+0x450>
			break;
 800501a:	bf00      	nop
	}
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	200015ed 	.word	0x200015ed
 8005028:	20001600 	.word	0x20001600
 800502c:	200015ec 	.word	0x200015ec
 8005030:	200015f0 	.word	0x200015f0
 8005034:	200015f2 	.word	0x200015f2
 8005038:	200017ac 	.word	0x200017ac

0800503c <UI_Init_Flashing_Screen>:
/**********************************************************/
/*					   Private UI FUNC					  */
/**********************************************************/
static void UI_Init_Flashing_Screen(void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
    /* Set Background color */
    SSD1306_GotoXY(5, 0);
 8005040:	2100      	movs	r1, #0
 8005042:	2005      	movs	r0, #5
 8005044:	f7fe fd12 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 8005048:	2201      	movs	r2, #1
 800504a:	4911      	ldr	r1, [pc, #68]	; (8005090 <UI_Init_Flashing_Screen+0x54>)
 800504c:	4811      	ldr	r0, [pc, #68]	; (8005094 <UI_Init_Flashing_Screen+0x58>)
 800504e:	f7fe fda3 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(10, 20);
 8005052:	2114      	movs	r1, #20
 8005054:	200a      	movs	r0, #10
 8005056:	f7fe fd09 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("Node 1: Loss", &Font_7x10, 1); // Initial status for Node 1
 800505a:	2201      	movs	r2, #1
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <UI_Init_Flashing_Screen+0x5c>)
 800505e:	480f      	ldr	r0, [pc, #60]	; (800509c <UI_Init_Flashing_Screen+0x60>)
 8005060:	f7fe fd9a 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(10, 30);
 8005064:	211e      	movs	r1, #30
 8005066:	200a      	movs	r0, #10
 8005068:	f7fe fd00 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("Node 2: Loss", &Font_7x10, 1); // Initial status for Node 2
 800506c:	2201      	movs	r2, #1
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <UI_Init_Flashing_Screen+0x5c>)
 8005070:	480b      	ldr	r0, [pc, #44]	; (80050a0 <UI_Init_Flashing_Screen+0x64>)
 8005072:	f7fe fd91 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(10, 40);
 8005076:	2128      	movs	r1, #40	; 0x28
 8005078:	200a      	movs	r0, #10
 800507a:	f7fe fcf7 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("Node 3: Loss", &Font_7x10, 1); // Initial status for Node 3
 800507e:	2201      	movs	r2, #1
 8005080:	4905      	ldr	r1, [pc, #20]	; (8005098 <UI_Init_Flashing_Screen+0x5c>)
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <UI_Init_Flashing_Screen+0x68>)
 8005084:	f7fe fd88 	bl	8003b98 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // Update screen
 8005088:	f7fe fc3c 	bl	8003904 <SSD1306_UpdateScreen>
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200000a4 	.word	0x200000a4
 8005094:	0800f570 	.word	0x0800f570
 8005098:	2000009c 	.word	0x2000009c
 800509c:	0800f578 	.word	0x0800f578
 80050a0:	0800f588 	.word	0x0800f588
 80050a4:	0800f598 	.word	0x0800f598

080050a8 <UI_Node_Connect>:

static void UI_Node_Connect(int nodeIndex, bool connected) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
    SSD1306_GotoXY(10, 20 + (nodeIndex * 10)); // Calculate Y position based on node index
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	0092      	lsls	r2, r2, #2
 80050bc:	4413      	add	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3314      	adds	r3, #20
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	4619      	mov	r1, r3
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7fe fccf 	bl	8003a6c <SSD1306_GotoXY>
    if (connected) {
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <UI_Node_Connect+0x54>
        SSD1306_Puts("Node ", &Font_7x10, 1);
 80050d4:	2201      	movs	r2, #1
 80050d6:	4916      	ldr	r1, [pc, #88]	; (8005130 <UI_Node_Connect+0x88>)
 80050d8:	4816      	ldr	r0, [pc, #88]	; (8005134 <UI_Node_Connect+0x8c>)
 80050da:	f7fe fd5d 	bl	8003b98 <SSD1306_Puts>
        SSD1306_Putc(nodeIndex + '1', &Font_7x10, 1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3331      	adds	r3, #49	; 0x31
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2201      	movs	r2, #1
 80050e8:	4911      	ldr	r1, [pc, #68]	; (8005130 <UI_Node_Connect+0x88>)
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fcd4 	bl	8003a98 <SSD1306_Putc>
        SSD1306_Puts(": Alive ", &Font_7x10, 1);
 80050f0:	2201      	movs	r2, #1
 80050f2:	490f      	ldr	r1, [pc, #60]	; (8005130 <UI_Node_Connect+0x88>)
 80050f4:	4810      	ldr	r0, [pc, #64]	; (8005138 <UI_Node_Connect+0x90>)
 80050f6:	f7fe fd4f 	bl	8003b98 <SSD1306_Puts>
 80050fa:	e012      	b.n	8005122 <UI_Node_Connect+0x7a>
    } else {
        SSD1306_Puts("Node ", &Font_7x10, 1);
 80050fc:	2201      	movs	r2, #1
 80050fe:	490c      	ldr	r1, [pc, #48]	; (8005130 <UI_Node_Connect+0x88>)
 8005100:	480c      	ldr	r0, [pc, #48]	; (8005134 <UI_Node_Connect+0x8c>)
 8005102:	f7fe fd49 	bl	8003b98 <SSD1306_Puts>
        SSD1306_Putc(nodeIndex + '1', &Font_7x10, 1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	3331      	adds	r3, #49	; 0x31
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2201      	movs	r2, #1
 8005110:	4907      	ldr	r1, [pc, #28]	; (8005130 <UI_Node_Connect+0x88>)
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fcc0 	bl	8003a98 <SSD1306_Putc>
        SSD1306_Puts(": Loss  ", &Font_7x10, 1);
 8005118:	2201      	movs	r2, #1
 800511a:	4905      	ldr	r1, [pc, #20]	; (8005130 <UI_Node_Connect+0x88>)
 800511c:	4807      	ldr	r0, [pc, #28]	; (800513c <UI_Node_Connect+0x94>)
 800511e:	f7fe fd3b 	bl	8003b98 <SSD1306_Puts>
    }
    SSD1306_UpdateScreen(); // Update screen
 8005122:	f7fe fbef 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000009c 	.word	0x2000009c
 8005134:	0800f5a8 	.word	0x0800f5a8
 8005138:	0800f5b0 	.word	0x0800f5b0
 800513c:	0800f5bc 	.word	0x0800f5bc

08005140 <UI_Clean>:
static void UI_Clean(void){
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8005144:	f7fe feff 	bl	8003f46 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8005148:	f7fe fbdc 	bl	8003904 <SSD1306_UpdateScreen>
}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}

08005150 <UI_WaitForResp>:

static void UI_WaitForResp(void){
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
	uint32_t local_u32NodeAddr = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
	uint32_t local_u32Codesize = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
	uint16_t local_u16Appver=0U;
 800515e:	2300      	movs	r3, #0
 8005160:	837b      	strh	r3, [r7, #26]
	RTE_RUNNABLE_CODE_SIZE_ReadData(&local_u32Codesize);
 8005162:	f107 031c 	add.w	r3, r7, #28
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd fd5a 	bl	8002c20 <Rte_CodeSize_ReadData>
	RTE_RUNNABLE_APP_VER_ReadData(&local_u16Appver);
 800516c:	f107 031a 	add.w	r3, r7, #26
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd fd43 	bl	8002bfc <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 8005176:	f107 0320 	add.w	r3, r7, #32
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fd62 	bl	8002c44 <Rte_NodeAddr_ReadData>
	char buffer_version[10];
	char buffer_data_id[10];

	uint8_t major_version = (local_u16Appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8005180:	8b7b      	ldrh	r3, [r7, #26]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t minor_version = local_u16Appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 800518a:	8b7b      	ldrh	r3, [r7, #26]
 800518c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	sprintf(buffer_data_id, "%X", local_u32NodeAddr);
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	4929      	ldr	r1, [pc, #164]	; (800523c <UI_WaitForResp+0xec>)
 8005196:	4618      	mov	r0, r3
 8005198:	f007 f8fc 	bl	800c394 <siprintf>
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 800519c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80051a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a4:	f107 0010 	add.w	r0, r7, #16
 80051a8:	4925      	ldr	r1, [pc, #148]	; (8005240 <UI_WaitForResp+0xf0>)
 80051aa:	f007 f8f3 	bl	800c394 <siprintf>
	char Local_DataBuffer[4];
	uint8_t local_estimatime = local_u32Codesize/BandWidth_UART +20;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <UI_WaitForResp+0xf4>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	3314      	adds	r3, #20
 80051bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SSD1306_GotoXY (5, 0);
 80051c0:	2100      	movs	r1, #0
 80051c2:	2005      	movs	r0, #5
 80051c4:	f7fe fc52 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATE DOWNLOAD!!", &Font_7x10, 1);
 80051c8:	2201      	movs	r2, #1
 80051ca:	491f      	ldr	r1, [pc, #124]	; (8005248 <UI_WaitForResp+0xf8>)
 80051cc:	481f      	ldr	r0, [pc, #124]	; (800524c <UI_WaitForResp+0xfc>)
 80051ce:	f7fe fce3 	bl	8003b98 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u16Appver );
 80051d2:	8b7b      	ldrh	r3, [r7, #26]
 80051d4:	461a      	mov	r2, r3
 80051d6:	463b      	mov	r3, r7
 80051d8:	491d      	ldr	r1, [pc, #116]	; (8005250 <UI_WaitForResp+0x100>)
 80051da:	4618      	mov	r0, r3
 80051dc:	f007 f8da 	bl	800c394 <siprintf>
	SSD1306_GotoXY (5, 10);
 80051e0:	210a      	movs	r1, #10
 80051e2:	2005      	movs	r0, #5
 80051e4:	f7fe fc42 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("VERSION:", &Font_7x10, 1);
 80051e8:	2201      	movs	r2, #1
 80051ea:	4917      	ldr	r1, [pc, #92]	; (8005248 <UI_WaitForResp+0xf8>)
 80051ec:	4819      	ldr	r0, [pc, #100]	; (8005254 <UI_WaitForResp+0x104>)
 80051ee:	f7fe fcd3 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (70, 10);
 80051f2:	210a      	movs	r1, #10
 80051f4:	2046      	movs	r0, #70	; 0x46
 80051f6:	f7fe fc39 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 80051fa:	f107 0310 	add.w	r3, r7, #16
 80051fe:	2201      	movs	r2, #1
 8005200:	4911      	ldr	r1, [pc, #68]	; (8005248 <UI_WaitForResp+0xf8>)
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fcc8 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 8005208:	2114      	movs	r1, #20
 800520a:	2005      	movs	r0, #5
 800520c:	f7fe fc2e 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 8005210:	2201      	movs	r2, #1
 8005212:	490d      	ldr	r1, [pc, #52]	; (8005248 <UI_WaitForResp+0xf8>)
 8005214:	4810      	ldr	r0, [pc, #64]	; (8005258 <UI_WaitForResp+0x108>)
 8005216:	f7fe fcbf 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (60, 20);
 800521a:	2114      	movs	r1, #20
 800521c:	203c      	movs	r0, #60	; 0x3c
 800521e:	f7fe fc25 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	2201      	movs	r2, #1
 8005226:	4908      	ldr	r1, [pc, #32]	; (8005248 <UI_WaitForResp+0xf8>)
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fcb5 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 800522e:	f7fe fb69 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005232:	bf00      	nop
 8005234:	3728      	adds	r7, #40	; 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	0800f5c8 	.word	0x0800f5c8
 8005240:	0800f5cc 	.word	0x0800f5cc
 8005244:	10624dd3 	.word	0x10624dd3
 8005248:	2000009c 	.word	0x2000009c
 800524c:	0800f5d4 	.word	0x0800f5d4
 8005250:	0800f5e8 	.word	0x0800f5e8
 8005254:	0800f5ec 	.word	0x0800f5ec
 8005258:	0800f5f8 	.word	0x0800f5f8

0800525c <UI_Downloading_FW>:
static void UI_Downloading_FW(void){
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (30, 30);
 8005260:	211e      	movs	r1, #30
 8005262:	201e      	movs	r0, #30
 8005264:	f7fe fc02 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("PROGRESS", &Font_7x10, 1);
 8005268:	2201      	movs	r2, #1
 800526a:	4903      	ldr	r1, [pc, #12]	; (8005278 <UI_Downloading_FW+0x1c>)
 800526c:	4803      	ldr	r0, [pc, #12]	; (800527c <UI_Downloading_FW+0x20>)
 800526e:	f7fe fc93 	bl	8003b98 <SSD1306_Puts>
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000009c 	.word	0x2000009c
 800527c:	0800f604 	.word	0x0800f604

08005280 <UI_UpdateDownloading_FW>:
static void UI_UpdateDownloading_FW(uint8_t Var_Progress){
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	if(Var_Progress >100)
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	2b64      	cmp	r3, #100	; 0x64
 800528e:	d901      	bls.n	8005294 <UI_UpdateDownloading_FW+0x14>
		Var_Progress =100;
 8005290:	2364      	movs	r3, #100	; 0x64
 8005292:	71fb      	strb	r3, [r7, #7]
	sprintf(local_UpdateBuffer, "%d", Var_Progress);
 8005294:	79fa      	ldrb	r2, [r7, #7]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	490f      	ldr	r1, [pc, #60]	; (80052d8 <UI_UpdateDownloading_FW+0x58>)
 800529c:	4618      	mov	r0, r3
 800529e:	f007 f879 	bl	800c394 <siprintf>
	SSD1306_GotoXY (50, 40);
 80052a2:	2128      	movs	r1, #40	; 0x28
 80052a4:	2032      	movs	r0, #50	; 0x32
 80052a6:	f7fe fbe1 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 80052aa:	2201      	movs	r2, #1
 80052ac:	490b      	ldr	r1, [pc, #44]	; (80052dc <UI_UpdateDownloading_FW+0x5c>)
 80052ae:	480c      	ldr	r0, [pc, #48]	; (80052e0 <UI_UpdateDownloading_FW+0x60>)
 80052b0:	f7fe fc72 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 80052b4:	2128      	movs	r1, #40	; 0x28
 80052b6:	2032      	movs	r0, #50	; 0x32
 80052b8:	f7fe fbd8 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	2201      	movs	r2, #1
 80052c2:	4906      	ldr	r1, [pc, #24]	; (80052dc <UI_UpdateDownloading_FW+0x5c>)
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fc67 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80052ca:	f7fe fb1b 	bl	8003904 <SSD1306_UpdateScreen>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	0800f5e8 	.word	0x0800f5e8
 80052dc:	2000009c 	.word	0x2000009c
 80052e0:	0800f610 	.word	0x0800f610

080052e4 <UI_DoneDownload_FW>:
static void UI_DoneDownload_FW(void){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
	/* Writing Text */
	Std_ReturnType retVal = RTE_RUNNABLE_APP_VER_ReadData(&gl_u32Version);
 80052ea:	482f      	ldr	r0, [pc, #188]	; (80053a8 <UI_DoneDownload_FW+0xc4>)
 80052ec:	f7fd fc86 	bl	8002bfc <Rte_ApplVer_ReadData>
 80052f0:	4603      	mov	r3, r0
 80052f2:	77fb      	strb	r3, [r7, #31]
	char buffer_version[10];
	char buffer_data_id[10];
	uint32_t local_u32NodeAddr = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	603b      	str	r3, [r7, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 80052f8:	463b      	mov	r3, r7
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd fca2 	bl	8002c44 <Rte_NodeAddr_ReadData>
	uint8_t major_version = (gl_u32Version >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <UI_DoneDownload_FW+0xc4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	77bb      	strb	r3, [r7, #30]
	uint8_t minor_version = gl_u32Version & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 8005308:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <UI_DoneDownload_FW+0xc4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	777b      	strb	r3, [r7, #29]
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 800530e:	7fba      	ldrb	r2, [r7, #30]
 8005310:	7f7b      	ldrb	r3, [r7, #29]
 8005312:	f107 0010 	add.w	r0, r7, #16
 8005316:	4925      	ldr	r1, [pc, #148]	; (80053ac <UI_DoneDownload_FW+0xc8>)
 8005318:	f007 f83c 	bl	800c394 <siprintf>
	sprintf(buffer_data_id, "%X", local_u32NodeAddr);
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	4923      	ldr	r1, [pc, #140]	; (80053b0 <UI_DoneDownload_FW+0xcc>)
 8005322:	4618      	mov	r0, r3
 8005324:	f007 f836 	bl	800c394 <siprintf>
	//char local_UpdateBuffer[4];
	SSD1306_GotoXY (40, 10);
 8005328:	210a      	movs	r1, #10
 800532a:	2028      	movs	r0, #40	; 0x28
 800532c:	f7fe fb9e 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA", &Font_11x18, 1);
 8005330:	2201      	movs	r2, #1
 8005332:	4920      	ldr	r1, [pc, #128]	; (80053b4 <UI_DoneDownload_FW+0xd0>)
 8005334:	4820      	ldr	r0, [pc, #128]	; (80053b8 <UI_DoneDownload_FW+0xd4>)
 8005336:	f7fe fc2f 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (30, 30);
 800533a:	211e      	movs	r1, #30
 800533c:	201e      	movs	r0, #30
 800533e:	f7fe fb95 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("COMPLETED", &Font_7x10, 1);
 8005342:	2201      	movs	r2, #1
 8005344:	491d      	ldr	r1, [pc, #116]	; (80053bc <UI_DoneDownload_FW+0xd8>)
 8005346:	481e      	ldr	r0, [pc, #120]	; (80053c0 <UI_DoneDownload_FW+0xdc>)
 8005348:	f7fe fc26 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (30, 40);
 800534c:	2128      	movs	r1, #40	; 0x28
 800534e:	201e      	movs	r0, #30
 8005350:	f7fe fb8c 	bl	8003a6c <SSD1306_GotoXY>

	SSD1306_Puts ("VERSION: ", &Font_7x10, 1);
 8005354:	2201      	movs	r2, #1
 8005356:	4919      	ldr	r1, [pc, #100]	; (80053bc <UI_DoneDownload_FW+0xd8>)
 8005358:	481a      	ldr	r0, [pc, #104]	; (80053c4 <UI_DoneDownload_FW+0xe0>)
 800535a:	f7fe fc1d 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 800535e:	2128      	movs	r1, #40	; 0x28
 8005360:	2064      	movs	r0, #100	; 0x64
 8005362:	f7fe fb83 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 8005366:	f107 0310 	add.w	r3, r7, #16
 800536a:	2201      	movs	r2, #1
 800536c:	4913      	ldr	r1, [pc, #76]	; (80053bc <UI_DoneDownload_FW+0xd8>)
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fc12 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (5, 50);
 8005374:	2132      	movs	r1, #50	; 0x32
 8005376:	2005      	movs	r0, #5
 8005378:	f7fe fb78 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 800537c:	2201      	movs	r2, #1
 800537e:	490f      	ldr	r1, [pc, #60]	; (80053bc <UI_DoneDownload_FW+0xd8>)
 8005380:	4811      	ldr	r0, [pc, #68]	; (80053c8 <UI_DoneDownload_FW+0xe4>)
 8005382:	f7fe fc09 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 8005386:	2132      	movs	r1, #50	; 0x32
 8005388:	203c      	movs	r0, #60	; 0x3c
 800538a:	f7fe fb6f 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	2201      	movs	r2, #1
 8005392:	490a      	ldr	r1, [pc, #40]	; (80053bc <UI_DoneDownload_FW+0xd8>)
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe fbff 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800539a:	f7fe fab3 	bl	8003904 <SSD1306_UpdateScreen>
}
 800539e:	bf00      	nop
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200015fc 	.word	0x200015fc
 80053ac:	0800f5cc 	.word	0x0800f5cc
 80053b0:	0800f5c8 	.word	0x0800f5c8
 80053b4:	200000a4 	.word	0x200000a4
 80053b8:	0800f618 	.word	0x0800f618
 80053bc:	2000009c 	.word	0x2000009c
 80053c0:	0800f620 	.word	0x0800f620
 80053c4:	0800f62c 	.word	0x0800f62c
 80053c8:	0800f5f8 	.word	0x0800f5f8

080053cc <UI_Synconfiguaraton>:

static void UI_Synconfiguaraton(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
	static uint8_t dot_count = 0; // Biến tĩnh để theo dõi trạng thái của hiệu ứng
	char dots[4]; // Chuỗi chứa hiệu ứng chấm
	// Cập nhật chuỗi hiệu ứng chấm dựa trên dot_count
	 switch (dot_count) {
 80053d2:	4b27      	ldr	r3, [pc, #156]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d01f      	beq.n	800541a <UI_Synconfiguaraton+0x4e>
 80053da:	2b02      	cmp	r3, #2
 80053dc:	dc23      	bgt.n	8005426 <UI_Synconfiguaraton+0x5a>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <UI_Synconfiguaraton+0x1c>
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d00a      	beq.n	80053fc <UI_Synconfiguaraton+0x30>
 80053e6:	e01e      	b.n	8005426 <UI_Synconfiguaraton+0x5a>
	 case 0:
		 strcpy(dots, ".");
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	222e      	movs	r2, #46	; 0x2e
 80053ec:	801a      	strh	r2, [r3, #0]
		 dot_count++;
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 80053f8:	701a      	strb	r2, [r3, #0]
		 break;
 80053fa:	e017      	b.n	800542c <UI_Synconfiguaraton+0x60>
	 case 1:
		 strcpy(dots, "..");
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <UI_Synconfiguaraton+0xa8>)
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	4611      	mov	r1, r2
 8005404:	8019      	strh	r1, [r3, #0]
 8005406:	3302      	adds	r3, #2
 8005408:	0c12      	lsrs	r2, r2, #16
 800540a:	701a      	strb	r2, [r3, #0]
		 dot_count++;
 800540c:	4b18      	ldr	r3, [pc, #96]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 8005416:	701a      	strb	r2, [r3, #0]
		 break;
 8005418:	e008      	b.n	800542c <UI_Synconfiguaraton+0x60>
	 case 2:
		 strcpy(dots, "...");
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <UI_Synconfiguaraton+0xac>)
 800541c:	607b      	str	r3, [r7, #4]
		 dot_count = 0; // Quay lại trạng thái đầu tiên sau khi đạt tới "..."
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <UI_Synconfiguaraton+0xa4>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
		 break;
 8005424:	e002      	b.n	800542c <UI_Synconfiguaraton+0x60>
	 default:
		 strcpy(dots, ""); // Trường hợp mặc định (không bao giờ xảy ra)
 8005426:	2300      	movs	r3, #0
 8005428:	713b      	strb	r3, [r7, #4]
		 break;
 800542a:	bf00      	nop
	 }
	 // Chỉ xóa dòng cần cập nhật thay vì toàn bộ màn hình
	 SSD1306_GotoXY(60, 0);
 800542c:	2100      	movs	r1, #0
 800542e:	203c      	movs	r0, #60	; 0x3c
 8005430:	f7fe fb1c 	bl	8003a6c <SSD1306_GotoXY>
	 SSD1306_Puts("   ", &Font_7x10, 1); // Xóa các dấu chấm cũ
 8005434:	2201      	movs	r2, #1
 8005436:	4911      	ldr	r1, [pc, #68]	; (800547c <UI_Synconfiguaraton+0xb0>)
 8005438:	4811      	ldr	r0, [pc, #68]	; (8005480 <UI_Synconfiguaraton+0xb4>)
 800543a:	f7fe fbad 	bl	8003b98 <SSD1306_Puts>
	 SSD1306_GotoXY(5, 10);
 800543e:	210a      	movs	r1, #10
 8005440:	2005      	movs	r0, #5
 8005442:	f7fe fb13 	bl	8003a6c <SSD1306_GotoXY>
	 SSD1306_Puts("SYNC UP ", &Font_7x10, 1);
 8005446:	2201      	movs	r2, #1
 8005448:	490c      	ldr	r1, [pc, #48]	; (800547c <UI_Synconfiguaraton+0xb0>)
 800544a:	480e      	ldr	r0, [pc, #56]	; (8005484 <UI_Synconfiguaraton+0xb8>)
 800544c:	f7fe fba4 	bl	8003b98 <SSD1306_Puts>
	 SSD1306_GotoXY(60, 10);
 8005450:	210a      	movs	r1, #10
 8005452:	203c      	movs	r0, #60	; 0x3c
 8005454:	f7fe fb0a 	bl	8003a6c <SSD1306_GotoXY>
	 SSD1306_Puts(dots, &Font_7x10, 1);
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	2201      	movs	r2, #1
 800545c:	4907      	ldr	r1, [pc, #28]	; (800547c <UI_Synconfiguaraton+0xb0>)
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fb9a 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Cập nhật màn hình
 8005464:	f7fe fa4e 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20001614 	.word	0x20001614
 8005474:	0800f638 	.word	0x0800f638
 8005478:	002e2e2e 	.word	0x002e2e2e
 800547c:	2000009c 	.word	0x2000009c
 8005480:	0800f63c 	.word	0x0800f63c
 8005484:	0800f640 	.word	0x0800f640

08005488 <UI_SendSW_LoRa>:
static void UI_SendSW_LoRa(uint16_t Var_numPacket) {
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b08e      	sub	sp, #56	; 0x38
 800548c:	af02      	add	r7, sp, #8
 800548e:	4603      	mov	r3, r0
 8005490:	80fb      	strh	r3, [r7, #6]

    static uint8_t dot_count = 0; // Biến tĩnh để theo dõi trạng thái của hiệu ứng
    char dots[4]; // Chuỗi chứa hiệu ứng chấm
    char local_UpdateBuffer[4];
    // Cập nhật chuỗi hiệu ứng chấm dựa trên dot_count
    switch (dot_count) {
 8005492:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d021      	beq.n	80054de <UI_SendSW_LoRa+0x56>
 800549a:	2b02      	cmp	r3, #2
 800549c:	dc25      	bgt.n	80054ea <UI_SendSW_LoRa+0x62>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <UI_SendSW_LoRa+0x20>
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d00b      	beq.n	80054be <UI_SendSW_LoRa+0x36>
 80054a6:	e020      	b.n	80054ea <UI_SendSW_LoRa+0x62>
        case 0:
            strcpy(dots, ".");
 80054a8:	f107 0318 	add.w	r3, r7, #24
 80054ac:	222e      	movs	r2, #46	; 0x2e
 80054ae:	801a      	strh	r2, [r3, #0]
            dot_count++;
 80054b0:	4b73      	ldr	r3, [pc, #460]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b71      	ldr	r3, [pc, #452]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 80054ba:	701a      	strb	r2, [r3, #0]
            break;
 80054bc:	e018      	b.n	80054f0 <UI_SendSW_LoRa+0x68>
        case 1:
            strcpy(dots, "..");
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	4a70      	ldr	r2, [pc, #448]	; (8005684 <UI_SendSW_LoRa+0x1fc>)
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	4611      	mov	r1, r2
 80054c8:	8019      	strh	r1, [r3, #0]
 80054ca:	3302      	adds	r3, #2
 80054cc:	0c12      	lsrs	r2, r2, #16
 80054ce:	701a      	strb	r2, [r3, #0]
            dot_count++;
 80054d0:	4b6b      	ldr	r3, [pc, #428]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	4b69      	ldr	r3, [pc, #420]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 80054da:	701a      	strb	r2, [r3, #0]
            break;
 80054dc:	e008      	b.n	80054f0 <UI_SendSW_LoRa+0x68>
        case 2:
            strcpy(dots, "...");
 80054de:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <UI_SendSW_LoRa+0x200>)
 80054e0:	61bb      	str	r3, [r7, #24]
            dot_count = 0; // Quay lại trạng thái đầu tiên sau khi đạt tới "..."
 80054e2:	4b67      	ldr	r3, [pc, #412]	; (8005680 <UI_SendSW_LoRa+0x1f8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
            break;
 80054e8:	e002      	b.n	80054f0 <UI_SendSW_LoRa+0x68>
        default:
            strcpy(dots, ""); // Trường hợp mặc định (không bao giờ xảy ra)
 80054ea:	2300      	movs	r3, #0
 80054ec:	763b      	strb	r3, [r7, #24]
            break;
 80054ee:	bf00      	nop
    }
    // Calculate remain time
    float remaining_time = (transmission_time_per_packet+0.14) * (TOTAL_PACKETS - Var_numPacket);
 80054f0:	4b66      	ldr	r3, [pc, #408]	; (800568c <UI_SendSW_LoRa+0x204>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fa ff97 	bl	8000428 <__aeabi_f2d>
 80054fa:	a35f      	add	r3, pc, #380	; (adr r3, 8005678 <UI_SendSW_LoRa+0x1f0>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fe34 	bl	800016c <__adddf3>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4b60      	ldr	r3, [pc, #384]	; (8005690 <UI_SendSW_LoRa+0x208>)
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4618      	mov	r0, r3
 8005518:	f7fa ff74 	bl	8000404 <__aeabi_i2d>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4620      	mov	r0, r4
 8005522:	4629      	mov	r1, r5
 8005524:	f7fa ffd8 	bl	80004d8 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	f7fb faaa 	bl	8000a88 <__aeabi_d2f>
 8005534:	4603      	mov	r3, r0
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Chuyển đổi thời gian còn lại sang phút và giây
    int minutes = (int)(remaining_time / 60);
 8005538:	4956      	ldr	r1, [pc, #344]	; (8005694 <UI_SendSW_LoRa+0x20c>)
 800553a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800553c:	f7fb fcb6 	bl	8000eac <__aeabi_fdiv>
 8005540:	4603      	mov	r3, r0
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb fd4e 	bl	8000fe4 <__aeabi_f2iz>
 8005548:	4603      	mov	r3, r0
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
    int seconds = (int)(remaining_time) % 60;
 800554c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800554e:	f7fb fd49 	bl	8000fe4 <__aeabi_f2iz>
 8005552:	4602      	mov	r2, r0
 8005554:	4b50      	ldr	r3, [pc, #320]	; (8005698 <UI_SendSW_LoRa+0x210>)
 8005556:	fb83 1302 	smull	r1, r3, r3, r2
 800555a:	4413      	add	r3, r2
 800555c:	1159      	asrs	r1, r3, #5
 800555e:	17d3      	asrs	r3, r2, #31
 8005560:	1ac9      	subs	r1, r1, r3
 8005562:	460b      	mov	r3, r1
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a5b      	subs	r3, r3, r1
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
    char remaining_time_str[10];
    sprintf(remaining_time_str, "%02dm %02ds", minutes, seconds);
 800556e:	f107 0008 	add.w	r0, r7, #8
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	4949      	ldr	r1, [pc, #292]	; (800569c <UI_SendSW_LoRa+0x214>)
 8005578:	f006 ff0c 	bl	800c394 <siprintf>
    // Chuẩn bị nội dung để hiển thị
    sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4947      	ldr	r1, [pc, #284]	; (80056a0 <UI_SendSW_LoRa+0x218>)
 8005584:	4618      	mov	r0, r3
 8005586:	f006 ff05 	bl	800c394 <siprintf>

    // Chỉ xóa phần cần cập nhật thay vì toàn bộ màn hình
    SSD1306_GotoXY(5, 0);
 800558a:	2100      	movs	r1, #0
 800558c:	2005      	movs	r0, #5
 800558e:	f7fe fa6d 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("UPDATING", &Font_7x10, 1);
 8005592:	2201      	movs	r2, #1
 8005594:	4943      	ldr	r1, [pc, #268]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 8005596:	4844      	ldr	r0, [pc, #272]	; (80056a8 <UI_SendSW_LoRa+0x220>)
 8005598:	f7fe fafe 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(80, 0); // Vị trí bắt đầu của dấu chấm
 800559c:	2100      	movs	r1, #0
 800559e:	2050      	movs	r0, #80	; 0x50
 80055a0:	f7fe fa64 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("   ", &Font_7x10, 1); // Xóa dấu chấm cũ
 80055a4:	2201      	movs	r2, #1
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 80055a8:	4840      	ldr	r0, [pc, #256]	; (80056ac <UI_SendSW_LoRa+0x224>)
 80055aa:	f7fe faf5 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(80, 0); // Vị trí bắt đầu của dấu chấm
 80055ae:	2100      	movs	r1, #0
 80055b0:	2050      	movs	r0, #80	; 0x50
 80055b2:	f7fe fa5b 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(dots, &Font_7x10, 1);
 80055b6:	f107 0318 	add.w	r3, r7, #24
 80055ba:	2201      	movs	r2, #1
 80055bc:	4939      	ldr	r1, [pc, #228]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe faea 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(5, 20);
 80055c4:	2114      	movs	r1, #20
 80055c6:	2005      	movs	r0, #5
 80055c8:	f7fe fa50 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("TIME LEFT:", &Font_7x10, 1);
 80055cc:	2201      	movs	r2, #1
 80055ce:	4935      	ldr	r1, [pc, #212]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 80055d0:	4837      	ldr	r0, [pc, #220]	; (80056b0 <UI_SendSW_LoRa+0x228>)
 80055d2:	f7fe fae1 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(80, 20);
 80055d6:	2114      	movs	r1, #20
 80055d8:	2050      	movs	r0, #80	; 0x50
 80055da:	f7fe fa47 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(remaining_time_str, &Font_7x10, 1);
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	2201      	movs	r2, #1
 80055e4:	492f      	ldr	r1, [pc, #188]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe fad6 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(5, 40);
 80055ec:	2128      	movs	r1, #40	; 0x28
 80055ee:	2005      	movs	r0, #5
 80055f0:	f7fe fa3c 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("PACKET SEND:", &Font_7x10, 1);
 80055f4:	2201      	movs	r2, #1
 80055f6:	492b      	ldr	r1, [pc, #172]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 80055f8:	482e      	ldr	r0, [pc, #184]	; (80056b4 <UI_SendSW_LoRa+0x22c>)
 80055fa:	f7fe facd 	bl	8003b98 <SSD1306_Puts>
    SSD1306_GotoXY(100, 40);
 80055fe:	2128      	movs	r1, #40	; 0x28
 8005600:	2064      	movs	r0, #100	; 0x64
 8005602:	f7fe fa33 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(local_UpdateBuffer, &Font_7x10, 1);
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	2201      	movs	r2, #1
 800560c:	4925      	ldr	r1, [pc, #148]	; (80056a4 <UI_SendSW_LoRa+0x21c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe fac2 	bl	8003b98 <SSD1306_Puts>
    // Tính toán phần trăm hoàn thành

    float progress = (float)Var_numPacket / TOTAL_PACKETS;
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fb fb3c 	bl	8000c94 <__aeabi_ui2f>
 800561c:	4604      	mov	r4, r0
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <UI_SendSW_LoRa+0x208>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fb fb3a 	bl	8000c9c <__aeabi_i2f>
 8005628:	4603      	mov	r3, r0
 800562a:	4619      	mov	r1, r3
 800562c:	4620      	mov	r0, r4
 800562e:	f7fb fc3d 	bl	8000eac <__aeabi_fdiv>
 8005632:	4603      	mov	r3, r0
 8005634:	623b      	str	r3, [r7, #32]
    int progress_bar_length = (int)(progress * PROGRESS_BAR_WIDTH);
 8005636:	4920      	ldr	r1, [pc, #128]	; (80056b8 <UI_SendSW_LoRa+0x230>)
 8005638:	6a38      	ldr	r0, [r7, #32]
 800563a:	f7fb fb83 	bl	8000d44 <__aeabi_fmul>
 800563e:	4603      	mov	r3, r0
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb fccf 	bl	8000fe4 <__aeabi_f2iz>
 8005646:	4603      	mov	r3, r0
 8005648:	61fb      	str	r3, [r7, #28]
    // Vẽ thanh tiến trình
    SSD1306_DrawRectangle(5, 50, PROGRESS_BAR_WIDTH, 10, SSD1306_COLOR_WHITE); // Vẽ khung
 800564a:	2301      	movs	r3, #1
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	230a      	movs	r3, #10
 8005650:	2264      	movs	r2, #100	; 0x64
 8005652:	2132      	movs	r1, #50	; 0x32
 8005654:	2005      	movs	r0, #5
 8005656:	f7fe fbbf 	bl	8003dd8 <SSD1306_DrawRectangle>
    SSD1306_DrawFilledRectangle(5, 50, progress_bar_length, 10, SSD1306_COLOR_WHITE); // Vẽ thanh tiến trình
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	b29a      	uxth	r2, r3
 800565e:	2301      	movs	r3, #1
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	230a      	movs	r3, #10
 8005664:	2132      	movs	r1, #50	; 0x32
 8005666:	2005      	movs	r0, #5
 8005668:	f7fe fc20 	bl	8003eac <SSD1306_DrawFilledRectangle>
    SSD1306_UpdateScreen(); // Cập nhật màn hình
 800566c:	f7fe f94a 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005670:	bf00      	nop
 8005672:	3730      	adds	r7, #48	; 0x30
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}
 8005678:	1eb851ec 	.word	0x1eb851ec
 800567c:	3fc1eb85 	.word	0x3fc1eb85
 8005680:	20001615 	.word	0x20001615
 8005684:	0800f638 	.word	0x0800f638
 8005688:	002e2e2e 	.word	0x002e2e2e
 800568c:	20001610 	.word	0x20001610
 8005690:	20001600 	.word	0x20001600
 8005694:	42700000 	.word	0x42700000
 8005698:	88888889 	.word	0x88888889
 800569c:	0800f64c 	.word	0x0800f64c
 80056a0:	0800f5e8 	.word	0x0800f5e8
 80056a4:	2000009c 	.word	0x2000009c
 80056a8:	0800f658 	.word	0x0800f658
 80056ac:	0800f63c 	.word	0x0800f63c
 80056b0:	0800f664 	.word	0x0800f664
 80056b4:	0800f670 	.word	0x0800f670
 80056b8:	42c80000 	.word	0x42c80000

080056bc <UI_StartOTA>:

static void UI_StartOTA(void){
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,10); // goto 10, 10
 80056c0:	210a      	movs	r1, #10
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fe f9d2 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("Send Request OTA!!", &Font_7x10, 1); // print start FUOTA
 80056c8:	2201      	movs	r2, #1
 80056ca:	4904      	ldr	r1, [pc, #16]	; (80056dc <UI_StartOTA+0x20>)
 80056cc:	4804      	ldr	r0, [pc, #16]	; (80056e0 <UI_StartOTA+0x24>)
 80056ce:	f7fe fa63 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80056d2:	f7fe f917 	bl	8003904 <SSD1306_UpdateScreen>
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	2000009c 	.word	0x2000009c
 80056e0:	0800f680 	.word	0x0800f680

080056e4 <UI_Wait_ACCEPT_OTA>:
static void UI_Wait_ACCEPT_OTA(uint16_t Var_Time_request){
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	80fb      	strh	r3, [r7, #6]
	char local_DataBuffer[4];
	sprintf(local_DataBuffer, "%d", Var_Time_request);
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <UI_Wait_ACCEPT_OTA+0x4c>)
 80056f6:	4618      	mov	r0, r3
 80056f8:	f006 fe4c 	bl	800c394 <siprintf>
	SSD1306_GotoXY (0, 40);
 80056fc:	2128      	movs	r1, #40	; 0x28
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fe f9b4 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("Time Request OTA:", &Font_7x10, 1);
 8005704:	2201      	movs	r2, #1
 8005706:	490b      	ldr	r1, [pc, #44]	; (8005734 <UI_Wait_ACCEPT_OTA+0x50>)
 8005708:	480b      	ldr	r0, [pc, #44]	; (8005738 <UI_Wait_ACCEPT_OTA+0x54>)
 800570a:	f7fe fa45 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (120, 40);
 800570e:	2128      	movs	r1, #40	; 0x28
 8005710:	2078      	movs	r0, #120	; 0x78
 8005712:	f7fe f9ab 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (local_DataBuffer, &Font_7x10, 1);
 8005716:	f107 030c 	add.w	r3, r7, #12
 800571a:	2201      	movs	r2, #1
 800571c:	4905      	ldr	r1, [pc, #20]	; (8005734 <UI_Wait_ACCEPT_OTA+0x50>)
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fa3a 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8005724:	f7fe f8ee 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	0800f5e8 	.word	0x0800f5e8
 8005734:	2000009c 	.word	0x2000009c
 8005738:	0800f694 	.word	0x0800f694

0800573c <UI_DisplayERROR>:

static void UI_DisplayERROR(uint8_t Var_UIError){
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
	char local_ErrorBuffer[4];
	sprintf(local_ErrorBuffer, "%d", Var_UIError);
 8005746:	79fa      	ldrb	r2, [r7, #7]
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	4925      	ldr	r1, [pc, #148]	; (80057e4 <UI_DisplayERROR+0xa8>)
 800574e:	4618      	mov	r0, r3
 8005750:	f006 fe20 	bl	800c394 <siprintf>
	SSD1306_GotoXY (50, 10);
 8005754:	210a      	movs	r1, #10
 8005756:	2032      	movs	r0, #50	; 0x32
 8005758:	f7fe f988 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("ERROR :", &Font_7x10, 1);
 800575c:	2201      	movs	r2, #1
 800575e:	4922      	ldr	r1, [pc, #136]	; (80057e8 <UI_DisplayERROR+0xac>)
 8005760:	4822      	ldr	r0, [pc, #136]	; (80057ec <UI_DisplayERROR+0xb0>)
 8005762:	f7fe fa19 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (10, 30);
 8005766:	211e      	movs	r1, #30
 8005768:	200a      	movs	r0, #10
 800576a:	f7fe f97f 	bl	8003a6c <SSD1306_GotoXY>
	switch (Var_UIError) {
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b4f      	cmp	r3, #79	; 0x4f
 8005772:	d006      	beq.n	8005782 <UI_DisplayERROR+0x46>
 8005774:	2b4f      	cmp	r3, #79	; 0x4f
 8005776:	dc28      	bgt.n	80057ca <UI_DisplayERROR+0x8e>
 8005778:	2b1f      	cmp	r3, #31
 800577a:	d017      	beq.n	80057ac <UI_DisplayERROR+0x70>
 800577c:	2b2f      	cmp	r3, #47	; 0x2f
 800577e:	d006      	beq.n	800578e <UI_DisplayERROR+0x52>
 8005780:	e023      	b.n	80057ca <UI_DisplayERROR+0x8e>
		case MCU_ERROR_CRC:
			SSD1306_Puts ("INVALID CRC", &Font_7x10, 1);
 8005782:	2201      	movs	r2, #1
 8005784:	4918      	ldr	r1, [pc, #96]	; (80057e8 <UI_DisplayERROR+0xac>)
 8005786:	481a      	ldr	r0, [pc, #104]	; (80057f0 <UI_DisplayERROR+0xb4>)
 8005788:	f7fe fa06 	bl	8003b98 <SSD1306_Puts>
			break;
 800578c:	e023      	b.n	80057d6 <UI_DisplayERROR+0x9a>
		case GW_REQUEST_UPDATE_ERROR:
			SSD1306_Puts ("REQUEST UPDATE", &Font_7x10, 1);
 800578e:	2201      	movs	r2, #1
 8005790:	4915      	ldr	r1, [pc, #84]	; (80057e8 <UI_DisplayERROR+0xac>)
 8005792:	4818      	ldr	r0, [pc, #96]	; (80057f4 <UI_DisplayERROR+0xb8>)
 8005794:	f7fe fa00 	bl	8003b98 <SSD1306_Puts>
			SSD1306_GotoXY (50, 40);
 8005798:	2128      	movs	r1, #40	; 0x28
 800579a:	2032      	movs	r0, #50	; 0x32
 800579c:	f7fe f966 	bl	8003a6c <SSD1306_GotoXY>
			SSD1306_Puts ("ERROR", &Font_7x10, 1);
 80057a0:	2201      	movs	r2, #1
 80057a2:	4911      	ldr	r1, [pc, #68]	; (80057e8 <UI_DisplayERROR+0xac>)
 80057a4:	4814      	ldr	r0, [pc, #80]	; (80057f8 <UI_DisplayERROR+0xbc>)
 80057a6:	f7fe f9f7 	bl	8003b98 <SSD1306_Puts>
			break;
 80057aa:	e014      	b.n	80057d6 <UI_DisplayERROR+0x9a>
		case GW_OUTOFREQUEST_ERROR:
			SSD1306_Puts ("REQUEST UPDATE", &Font_7x10, 1);
 80057ac:	2201      	movs	r2, #1
 80057ae:	490e      	ldr	r1, [pc, #56]	; (80057e8 <UI_DisplayERROR+0xac>)
 80057b0:	4810      	ldr	r0, [pc, #64]	; (80057f4 <UI_DisplayERROR+0xb8>)
 80057b2:	f7fe f9f1 	bl	8003b98 <SSD1306_Puts>
			SSD1306_GotoXY (50, 40);
 80057b6:	2128      	movs	r1, #40	; 0x28
 80057b8:	2032      	movs	r0, #50	; 0x32
 80057ba:	f7fe f957 	bl	8003a6c <SSD1306_GotoXY>
			SSD1306_Puts ("FAIL", &Font_7x10, 1);
 80057be:	2201      	movs	r2, #1
 80057c0:	4909      	ldr	r1, [pc, #36]	; (80057e8 <UI_DisplayERROR+0xac>)
 80057c2:	480e      	ldr	r0, [pc, #56]	; (80057fc <UI_DisplayERROR+0xc0>)
 80057c4:	f7fe f9e8 	bl	8003b98 <SSD1306_Puts>
			break;
 80057c8:	e005      	b.n	80057d6 <UI_DisplayERROR+0x9a>
		default:
			SSD1306_Puts ("UNKNOWN ERROR!!", &Font_7x10, 1);
 80057ca:	2201      	movs	r2, #1
 80057cc:	4906      	ldr	r1, [pc, #24]	; (80057e8 <UI_DisplayERROR+0xac>)
 80057ce:	480c      	ldr	r0, [pc, #48]	; (8005800 <UI_DisplayERROR+0xc4>)
 80057d0:	f7fe f9e2 	bl	8003b98 <SSD1306_Puts>
			break;
 80057d4:	bf00      	nop
	}
	SSD1306_UpdateScreen(); //display
 80057d6:	f7fe f895 	bl	8003904 <SSD1306_UpdateScreen>

}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	0800f5e8 	.word	0x0800f5e8
 80057e8:	2000009c 	.word	0x2000009c
 80057ec:	0800f6a8 	.word	0x0800f6a8
 80057f0:	0800f6b0 	.word	0x0800f6b0
 80057f4:	0800f6bc 	.word	0x0800f6bc
 80057f8:	0800f6cc 	.word	0x0800f6cc
 80057fc:	0800f6d4 	.word	0x0800f6d4
 8005800:	0800f6dc 	.word	0x0800f6dc

08005804 <UI_Send_Packet_Lost>:

static void UI_Send_Packet_Lost(uint16_t Var_numPacket){
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4913      	ldr	r1, [pc, #76]	; (8005864 <UI_Send_Packet_Lost+0x60>)
 8005816:	4618      	mov	r0, r3
 8005818:	f006 fdbc 	bl	800c394 <siprintf>
	SSD1306_GotoXY (5, 10);
 800581c:	210a      	movs	r1, #10
 800581e:	2005      	movs	r0, #5
 8005820:	f7fe f924 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8005824:	2201      	movs	r2, #1
 8005826:	4910      	ldr	r1, [pc, #64]	; (8005868 <UI_Send_Packet_Lost+0x64>)
 8005828:	4810      	ldr	r0, [pc, #64]	; (800586c <UI_Send_Packet_Lost+0x68>)
 800582a:	f7fe f9b5 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 800582e:	2114      	movs	r1, #20
 8005830:	2005      	movs	r0, #5
 8005832:	f7fe f91b 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET RESENT:", &Font_7x10, 1);
 8005836:	2201      	movs	r2, #1
 8005838:	490b      	ldr	r1, [pc, #44]	; (8005868 <UI_Send_Packet_Lost+0x64>)
 800583a:	480d      	ldr	r0, [pc, #52]	; (8005870 <UI_Send_Packet_Lost+0x6c>)
 800583c:	f7fe f9ac 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY (100, 30);
 8005840:	211e      	movs	r1, #30
 8005842:	2064      	movs	r0, #100	; 0x64
 8005844:	f7fe f912 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	2201      	movs	r2, #1
 800584e:	4906      	ldr	r1, [pc, #24]	; (8005868 <UI_Send_Packet_Lost+0x64>)
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe f9a1 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8005856:	f7fe f855 	bl	8003904 <SSD1306_UpdateScreen>
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	0800f5e8 	.word	0x0800f5e8
 8005868:	2000009c 	.word	0x2000009c
 800586c:	0800f6ec 	.word	0x0800f6ec
 8005870:	0800f6f8 	.word	0x0800f6f8

08005874 <UI_DisplayConfig>:


static void UI_DisplayConfig(uint8_t bw, uint8_t sf, uint8_t cr) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	460b      	mov	r3, r1
 8005880:	71bb      	strb	r3, [r7, #6]
 8005882:	4613      	mov	r3, r2
 8005884:	717b      	strb	r3, [r7, #5]
    char buffer[30]; // Buffer để chứa chuỗi hiển thị

    // Xóa màn hình trước khi cập nhật
    SSD1306_Clear();
 8005886:	f7fe fb5e 	bl	8003f46 <SSD1306_Clear>
    // Hiển thị tiêu đề
    SSD1306_GotoXY(5, 20);
 800588a:	2114      	movs	r1, #20
 800588c:	2005      	movs	r0, #5
 800588e:	f7fe f8ed 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("LoRa Config", &Font_7x10, 1);
 8005892:	2201      	movs	r2, #1
 8005894:	4924      	ldr	r1, [pc, #144]	; (8005928 <UI_DisplayConfig+0xb4>)
 8005896:	4825      	ldr	r0, [pc, #148]	; (800592c <UI_DisplayConfig+0xb8>)
 8005898:	f7fe f97e 	bl	8003b98 <SSD1306_Puts>
    // Hiển thị giá trị Bandwidth (BW)
    sprintf(buffer, "BW: %s kHz", SX1278_Bandwidth_UI[bw]);
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a24      	ldr	r2, [pc, #144]	; (8005930 <UI_DisplayConfig+0xbc>)
 80058a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4922      	ldr	r1, [pc, #136]	; (8005934 <UI_DisplayConfig+0xc0>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f006 fd72 	bl	800c394 <siprintf>
    SSD1306_GotoXY(5, 30);
 80058b0:	211e      	movs	r1, #30
 80058b2:	2005      	movs	r0, #5
 80058b4:	f7fe f8da 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 80058b8:	f107 0308 	add.w	r3, r7, #8
 80058bc:	2201      	movs	r2, #1
 80058be:	491a      	ldr	r1, [pc, #104]	; (8005928 <UI_DisplayConfig+0xb4>)
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe f969 	bl	8003b98 <SSD1306_Puts>
    // Hiển thị giá trị Spread Factor (SF)
    sprintf(buffer, "SF: %u", SX1278_SpreadFactor_UI[sf]);
 80058c6:	79bb      	ldrb	r3, [r7, #6]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <UI_DisplayConfig+0xc4>)
 80058ca:	5cd3      	ldrb	r3, [r2, r3]
 80058cc:	461a      	mov	r2, r3
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	491a      	ldr	r1, [pc, #104]	; (800593c <UI_DisplayConfig+0xc8>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	f006 fd5d 	bl	800c394 <siprintf>
    SSD1306_GotoXY(5, 40);
 80058da:	2128      	movs	r1, #40	; 0x28
 80058dc:	2005      	movs	r0, #5
 80058de:	f7fe f8c5 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	2201      	movs	r2, #1
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <UI_DisplayConfig+0xb4>)
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f954 	bl	8003b98 <SSD1306_Puts>

    // Hiển thị giá trị Coding Rate (CR)
    sprintf(buffer, "CR: %s", SX1278_CodingRate_UI[cr]);
 80058f0:	797b      	ldrb	r3, [r7, #5]
 80058f2:	4a13      	ldr	r2, [pc, #76]	; (8005940 <UI_DisplayConfig+0xcc>)
 80058f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <UI_DisplayConfig+0xd0>)
 80058fe:	4618      	mov	r0, r3
 8005900:	f006 fd48 	bl	800c394 <siprintf>
    SSD1306_GotoXY(5, 50);
 8005904:	2132      	movs	r1, #50	; 0x32
 8005906:	2005      	movs	r0, #5
 8005908:	f7fe f8b0 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	2201      	movs	r2, #1
 8005912:	4905      	ldr	r1, [pc, #20]	; (8005928 <UI_DisplayConfig+0xb4>)
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe f93f 	bl	8003b98 <SSD1306_Puts>

    // Cập nhật màn hình
    SSD1306_UpdateScreen();
 800591a:	f7fd fff3 	bl	8003904 <SSD1306_UpdateScreen>
}
 800591e:	bf00      	nop
 8005920:	3728      	adds	r7, #40	; 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000009c 	.word	0x2000009c
 800592c:	0800f708 	.word	0x0800f708
 8005930:	20000064 	.word	0x20000064
 8005934:	0800f714 	.word	0x0800f714
 8005938:	0800f784 	.word	0x0800f784
 800593c:	0800f720 	.word	0x0800f720
 8005940:	2000008c 	.word	0x2000008c
 8005944:	0800f728 	.word	0x0800f728

08005948 <UI_Wait_ForConnect_WiFi>:

static void UI_Wait_ForConnect_WiFi(){
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	// Variable to track the dot effect
	static uint8_t dot_count = 0;
	char dots[4];
	switch (dot_count) {
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d01f      	beq.n	8005996 <UI_Wait_ForConnect_WiFi+0x4e>
 8005956:	2b02      	cmp	r3, #2
 8005958:	dc23      	bgt.n	80059a2 <UI_Wait_ForConnect_WiFi+0x5a>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UI_Wait_ForConnect_WiFi+0x1c>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00a      	beq.n	8005978 <UI_Wait_ForConnect_WiFi+0x30>
 8005962:	e01e      	b.n	80059a2 <UI_Wait_ForConnect_WiFi+0x5a>
	case 0:
		strcpy(dots, ".");
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	222e      	movs	r2, #46	; 0x2e
 8005968:	801a      	strh	r2, [r3, #0]
		dot_count++;
 800596a:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005974:	701a      	strb	r2, [r3, #0]
		break;
 8005976:	e017      	b.n	80059a8 <UI_Wait_ForConnect_WiFi+0x60>
	case 1:
		strcpy(dots, "..");
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <UI_Wait_ForConnect_WiFi+0xcc>)
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	4611      	mov	r1, r2
 8005980:	8019      	strh	r1, [r3, #0]
 8005982:	3302      	adds	r3, #2
 8005984:	0c12      	lsrs	r2, r2, #16
 8005986:	701a      	strb	r2, [r3, #0]
		dot_count++;
 8005988:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005992:	701a      	strb	r2, [r3, #0]
		break;
 8005994:	e008      	b.n	80059a8 <UI_Wait_ForConnect_WiFi+0x60>
	case 2:
		strcpy(dots, "...");
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <UI_Wait_ForConnect_WiFi+0xd0>)
 8005998:	607b      	str	r3, [r7, #4]
		dot_count = 0; // Reset after reaching "..."
 800599a:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <UI_Wait_ForConnect_WiFi+0xc8>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
		break;
 80059a0:	e002      	b.n	80059a8 <UI_Wait_ForConnect_WiFi+0x60>
	default:
		strcpy(dots, ""); // Default case (should not occur)
 80059a2:	2300      	movs	r3, #0
 80059a4:	713b      	strb	r3, [r7, #4]
		break;
 80059a6:	bf00      	nop
	}
	 // Clear only the necessary area of the screen instead of the whole screen
	SSD1306_GotoXY(90, 30);
 80059a8:	211e      	movs	r1, #30
 80059aa:	205a      	movs	r0, #90	; 0x5a
 80059ac:	f7fe f85e 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("   ", &Font_7x10, 1); // Clear old dots
 80059b0:	2201      	movs	r2, #1
 80059b2:	491a      	ldr	r1, [pc, #104]	; (8005a1c <UI_Wait_ForConnect_WiFi+0xd4>)
 80059b4:	481a      	ldr	r0, [pc, #104]	; (8005a20 <UI_Wait_ForConnect_WiFi+0xd8>)
 80059b6:	f7fe f8ef 	bl	8003b98 <SSD1306_Puts>
	// Display the static message
    /* Set Background color */
    SSD1306_GotoXY(5, 0);
 80059ba:	2100      	movs	r1, #0
 80059bc:	2005      	movs	r0, #5
 80059be:	f7fe f855 	bl	8003a6c <SSD1306_GotoXY>
    SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 80059c2:	2201      	movs	r2, #1
 80059c4:	4917      	ldr	r1, [pc, #92]	; (8005a24 <UI_Wait_ForConnect_WiFi+0xdc>)
 80059c6:	4818      	ldr	r0, [pc, #96]	; (8005a28 <UI_Wait_ForConnect_WiFi+0xe0>)
 80059c8:	f7fe f8e6 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY(5, 20);
 80059cc:	2114      	movs	r1, #20
 80059ce:	2005      	movs	r0, #5
 80059d0:	f7fe f84c 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("Wait for", &Font_7x10, 1);
 80059d4:	2201      	movs	r2, #1
 80059d6:	4911      	ldr	r1, [pc, #68]	; (8005a1c <UI_Wait_ForConnect_WiFi+0xd4>)
 80059d8:	4814      	ldr	r0, [pc, #80]	; (8005a2c <UI_Wait_ForConnect_WiFi+0xe4>)
 80059da:	f7fe f8dd 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY(5, 30);
 80059de:	211e      	movs	r1, #30
 80059e0:	2005      	movs	r0, #5
 80059e2:	f7fe f843 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("Connect WiFi", &Font_7x10, 1);
 80059e6:	2201      	movs	r2, #1
 80059e8:	490c      	ldr	r1, [pc, #48]	; (8005a1c <UI_Wait_ForConnect_WiFi+0xd4>)
 80059ea:	4811      	ldr	r0, [pc, #68]	; (8005a30 <UI_Wait_ForConnect_WiFi+0xe8>)
 80059ec:	f7fe f8d4 	bl	8003b98 <SSD1306_Puts>
	// Display the dots
	SSD1306_GotoXY(90, 30);
 80059f0:	211e      	movs	r1, #30
 80059f2:	205a      	movs	r0, #90	; 0x5a
 80059f4:	f7fe f83a 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts(dots, &Font_7x10, 1);
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	2201      	movs	r2, #1
 80059fc:	4907      	ldr	r1, [pc, #28]	; (8005a1c <UI_Wait_ForConnect_WiFi+0xd4>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe f8ca 	bl	8003b98 <SSD1306_Puts>
	// Update the screen
	SSD1306_UpdateScreen();
 8005a04:	f7fd ff7e 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20001616 	.word	0x20001616
 8005a14:	0800f638 	.word	0x0800f638
 8005a18:	002e2e2e 	.word	0x002e2e2e
 8005a1c:	2000009c 	.word	0x2000009c
 8005a20:	0800f63c 	.word	0x0800f63c
 8005a24:	200000a4 	.word	0x200000a4
 8005a28:	0800f570 	.word	0x0800f570
 8005a2c:	0800f730 	.word	0x0800f730
 8005a30:	0800f73c 	.word	0x0800f73c

08005a34 <UI_WiFi_Connected>:
static void UI_WiFi_Connected(){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	// Variable to track the dot effect
	SSD1306_GotoXY(5, 0);
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2005      	movs	r0, #5
 8005a3c:	f7fe f816 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 8005a40:	2201      	movs	r2, #1
 8005a42:	490d      	ldr	r1, [pc, #52]	; (8005a78 <UI_WiFi_Connected+0x44>)
 8005a44:	480d      	ldr	r0, [pc, #52]	; (8005a7c <UI_WiFi_Connected+0x48>)
 8005a46:	f7fe f8a7 	bl	8003b98 <SSD1306_Puts>
	// Display the static message
	SSD1306_GotoXY(5, 20);
 8005a4a:	2114      	movs	r1, #20
 8005a4c:	2005      	movs	r0, #5
 8005a4e:	f7fe f80d 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("WIFI ", &Font_7x10, 1);
 8005a52:	2201      	movs	r2, #1
 8005a54:	490a      	ldr	r1, [pc, #40]	; (8005a80 <UI_WiFi_Connected+0x4c>)
 8005a56:	480b      	ldr	r0, [pc, #44]	; (8005a84 <UI_WiFi_Connected+0x50>)
 8005a58:	f7fe f89e 	bl	8003b98 <SSD1306_Puts>
	SSD1306_GotoXY(5, 30);
 8005a5c:	211e      	movs	r1, #30
 8005a5e:	2005      	movs	r0, #5
 8005a60:	f7fe f804 	bl	8003a6c <SSD1306_GotoXY>
	SSD1306_Puts("CONNECTED !!", &Font_7x10, 1);
 8005a64:	2201      	movs	r2, #1
 8005a66:	4906      	ldr	r1, [pc, #24]	; (8005a80 <UI_WiFi_Connected+0x4c>)
 8005a68:	4807      	ldr	r0, [pc, #28]	; (8005a88 <UI_WiFi_Connected+0x54>)
 8005a6a:	f7fe f895 	bl	8003b98 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8005a6e:	f7fd ff49 	bl	8003904 <SSD1306_UpdateScreen>
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200000a4 	.word	0x200000a4
 8005a7c:	0800f570 	.word	0x0800f570
 8005a80:	2000009c 	.word	0x2000009c
 8005a84:	0800f74c 	.word	0x0800f74c
 8005a88:	0800f754 	.word	0x0800f754

08005a8c <UI_CalculateLoRaDataRate>:
float UI_CalculateLoRaDataRate(uint8_t sf, uint32_t bw, uint8_t cr) {
 8005a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	4603      	mov	r3, r0
 8005a96:	6039      	str	r1, [r7, #0]
 8005a98:	71fb      	strb	r3, [r7, #7]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71bb      	strb	r3, [r7, #6]
	return sf * ((4.0 / (4.0 + cr)) / (pow(2.0, sf) / bw)) * 1000.0;
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fa fcaf 	bl	8000404 <__aeabi_i2d>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fca9 	bl	8000404 <__aeabi_i2d>
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <UI_CalculateLoRaDataRate+0xb8>)
 8005ab8:	f7fa fb58 	bl	800016c <__adddf3>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	f04f 0000 	mov.w	r0, #0
 8005ac4:	491f      	ldr	r1, [pc, #124]	; (8005b44 <UI_CalculateLoRaDataRate+0xb8>)
 8005ac6:	f7fa fe31 	bl	800072c <__aeabi_ddiv>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4692      	mov	sl, r2
 8005ad0:	469b      	mov	fp, r3
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fc85 	bl	80003e4 <__aeabi_ui2d>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	f04f 0000 	mov.w	r0, #0
 8005ae2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005ae6:	f008 fda3 	bl	800e630 <pow>
 8005aea:	4680      	mov	r8, r0
 8005aec:	4689      	mov	r9, r1
 8005aee:	6838      	ldr	r0, [r7, #0]
 8005af0:	f7fa fc78 	bl	80003e4 <__aeabi_ui2d>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa fe16 	bl	800072c <__aeabi_ddiv>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4650      	mov	r0, sl
 8005b06:	4659      	mov	r1, fp
 8005b08:	f7fa fe10 	bl	800072c <__aeabi_ddiv>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f7fa fce0 	bl	80004d8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <UI_CalculateLoRaDataRate+0xbc>)
 8005b26:	f7fa fcd7 	bl	80004d8 <__aeabi_dmul>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	f7fa ffa9 	bl	8000a88 <__aeabi_d2f>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b42:	bf00      	nop
 8005b44:	40100000 	.word	0x40100000
 8005b48:	408f4000 	.word	0x408f4000

08005b4c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	; 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e030      	b.n	8005bbe <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	441a      	add	r2, r3
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	440b      	add	r3, r1
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	3301      	adds	r3, #1
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	441a      	add	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	440b      	add	r3, r1
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	441a      	add	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	3302      	adds	r3, #2
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	440b      	add	r3, r1
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	441a      	add	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	3303      	adds	r3, #3
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	440b      	add	r3, r1
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d9cb      	bls.n	8005b5c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e081      	b.n	8005cce <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	3301      	adds	r3, #1
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	3302      	adds	r3, #2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d125      	bne.n	8005c56 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8005c0a:	7b3b      	ldrb	r3, [r7, #12]
 8005c0c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8005c0e:	7b7b      	ldrb	r3, [r7, #13]
 8005c10:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8005c1e:	7b3b      	ldrb	r3, [r7, #12]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <KeyExpansion+0x198>)
 8005c24:	5c9b      	ldrb	r3, [r3, r2]
 8005c26:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8005c28:	7b7b      	ldrb	r3, [r7, #13]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <KeyExpansion+0x198>)
 8005c2e:	5c9b      	ldrb	r3, [r3, r2]
 8005c30:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <KeyExpansion+0x198>)
 8005c38:	5c9b      	ldrb	r3, [r3, r2]
 8005c3a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <KeyExpansion+0x198>)
 8005c42:	5c9b      	ldrb	r3, [r3, r2]
 8005c44:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8005c46:	7b3a      	ldrb	r2, [r7, #12]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	4926      	ldr	r1, [pc, #152]	; (8005ce8 <KeyExpansion+0x19c>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	4053      	eors	r3, r2
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3b04      	subs	r3, #4
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	4413      	add	r3, r2
 8005c6a:	7819      	ldrb	r1, [r3, #0]
 8005c6c:	7b3a      	ldrb	r2, [r7, #12]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4403      	add	r3, r0
 8005c74:	404a      	eors	r2, r1
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	7819      	ldrb	r1, [r3, #0]
 8005c84:	7b7a      	ldrb	r2, [r7, #13]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4403      	add	r3, r0
 8005c8e:	404a      	eors	r2, r1
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3302      	adds	r3, #2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	7bba      	ldrb	r2, [r7, #14]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4403      	add	r3, r0
 8005ca8:	404a      	eors	r2, r1
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	7819      	ldrb	r1, [r3, #0]
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3303      	adds	r3, #3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4403      	add	r3, r0
 8005cc2:	404a      	eors	r2, r1
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b2b      	cmp	r3, #43	; 0x2b
 8005cd2:	f67f af7a 	bls.w	8005bca <KeyExpansion+0x7e>
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	3724      	adds	r7, #36	; 0x24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	0800f7cc 	.word	0x0800f7cc
 8005ce8:	0800f9cc 	.word	0x0800f9cc

08005cec <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff25 	bl	8005b4c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	33b0      	adds	r3, #176	; 0xb0
 8005d06:	2210      	movs	r2, #16
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f006 fc33 	bl	800c576 <memcpy>
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
 8005d2a:	e027      	b.n	8005d7c <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75bb      	strb	r3, [r7, #22]
 8005d30:	e01e      	b.n	8005d70 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8005d32:	7dfa      	ldrb	r2, [r7, #23]
 8005d34:	7dbb      	ldrb	r3, [r7, #22]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	0092      	lsls	r2, r2, #2
 8005d3a:	440a      	add	r2, r1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	7818      	ldrb	r0, [r3, #0]
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	009a      	lsls	r2, r3, #2
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	4413      	add	r3, r2
 8005d48:	009a      	lsls	r2, r3, #2
 8005d4a:	7dbb      	ldrb	r3, [r7, #22]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	7819      	ldrb	r1, [r3, #0]
 8005d56:	7dfa      	ldrb	r2, [r7, #23]
 8005d58:	7dbb      	ldrb	r3, [r7, #22]
 8005d5a:	4041      	eors	r1, r0
 8005d5c:	b2c8      	uxtb	r0, r1
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	0092      	lsls	r2, r2, #2
 8005d62:	440a      	add	r2, r1
 8005d64:	4413      	add	r3, r2
 8005d66:	4602      	mov	r2, r0
 8005d68:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8005d6a:	7dbb      	ldrb	r3, [r7, #22]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	75bb      	strb	r3, [r7, #22]
 8005d70:	7dbb      	ldrb	r3, [r7, #22]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d9dd      	bls.n	8005d32 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	75fb      	strb	r3, [r7, #23]
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d9d4      	bls.n	8005d2c <AddRoundKey+0x14>
    }
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
	...

08005d90 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e01d      	b.n	8005dda <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73bb      	strb	r3, [r7, #14]
 8005da2:	e014      	b.n	8005dce <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8005da4:	7bba      	ldrb	r2, [r7, #14]
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	0092      	lsls	r2, r2, #2
 8005dac:	440a      	add	r2, r1
 8005dae:	4413      	add	r3, r2
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	7bba      	ldrb	r2, [r7, #14]
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	490c      	ldr	r1, [pc, #48]	; (8005dec <SubBytes+0x5c>)
 8005dba:	5c08      	ldrb	r0, [r1, r0]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	73bb      	strb	r3, [r7, #14]
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d9e7      	bls.n	8005da4 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d9de      	bls.n	8005d9e <SubBytes+0xe>
    }
  }
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	0800f7cc 	.word	0x0800f7cc

08005df0 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	795a      	ldrb	r2, [r3, #5]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7a5a      	ldrb	r2, [r3, #9]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7b5a      	ldrb	r2, [r3, #13]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	789b      	ldrb	r3, [r3, #2]
 8005e20:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7a9a      	ldrb	r2, [r3, #10]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	799b      	ldrb	r3, [r3, #6]
 8005e34:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7b9a      	ldrb	r2, [r3, #14]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7bda      	ldrb	r2, [r3, #15]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7ada      	ldrb	r2, [r3, #11]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	79da      	ldrb	r2, [r3, #7]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7bfa      	ldrb	r2, [r7, #15]
 8005e66:	71da      	strb	r2, [r3, #7]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr

08005e72 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	b25a      	sxtb	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4619      	mov	r1, r3
 8005e8a:	0049      	lsls	r1, r1, #1
 8005e8c:	440b      	add	r3, r1
 8005e8e:	4619      	mov	r1, r3
 8005e90:	00c8      	lsls	r0, r1, #3
 8005e92:	4619      	mov	r1, r3
 8005e94:	4603      	mov	r3, r0
 8005e96:	440b      	add	r3, r1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	4053      	eors	r3, r2
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	b2db      	uxtb	r3, r3
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e0a4      	b.n	8006004 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8005eba:	7bfa      	ldrb	r2, [r7, #15]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8005ec2:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8005ec4:	7bfa      	ldrb	r2, [r7, #15]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	4053      	eors	r3, r2
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	789b      	ldrb	r3, [r3, #2]
 8005ee4:	4053      	eors	r3, r2
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	78db      	ldrb	r3, [r3, #3]
 8005ef2:	4053      	eors	r3, r2
 8005ef4:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8005ef6:	7bfa      	ldrb	r2, [r7, #15]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	4053      	eors	r3, r2
 8005f0a:	733b      	strb	r3, [r7, #12]
 8005f0c:	7b3b      	ldrb	r3, [r7, #12]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff ffaf 	bl	8005e72 <xtime>
 8005f14:	4603      	mov	r3, r0
 8005f16:	733b      	strb	r3, [r7, #12]
 8005f18:	7bfa      	ldrb	r2, [r7, #15]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8005f20:	7b3a      	ldrb	r2, [r7, #12]
 8005f22:	7b7b      	ldrb	r3, [r7, #13]
 8005f24:	4053      	eors	r3, r2
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	404b      	eors	r3, r1
 8005f2c:	b2d9      	uxtb	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	785a      	ldrb	r2, [r3, #1]
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	789b      	ldrb	r3, [r3, #2]
 8005f48:	4053      	eors	r3, r2
 8005f4a:	733b      	strb	r3, [r7, #12]
 8005f4c:	7b3b      	ldrb	r3, [r7, #12]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff ff8f 	bl	8005e72 <xtime>
 8005f54:	4603      	mov	r3, r0
 8005f56:	733b      	strb	r3, [r7, #12]
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	7859      	ldrb	r1, [r3, #1]
 8005f62:	7b3a      	ldrb	r2, [r7, #12]
 8005f64:	7b7b      	ldrb	r3, [r7, #13]
 8005f66:	4053      	eors	r3, r2
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	404a      	eors	r2, r1
 8005f6e:	b2d1      	uxtb	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	460a      	mov	r2, r1
 8005f78:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	789a      	ldrb	r2, [r3, #2]
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	78db      	ldrb	r3, [r3, #3]
 8005f8e:	4053      	eors	r3, r2
 8005f90:	733b      	strb	r3, [r7, #12]
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff6c 	bl	8005e72 <xtime>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	733b      	strb	r3, [r7, #12]
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	7899      	ldrb	r1, [r3, #2]
 8005fa8:	7b3a      	ldrb	r2, [r7, #12]
 8005faa:	7b7b      	ldrb	r3, [r7, #13]
 8005fac:	4053      	eors	r3, r2
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	404a      	eors	r2, r1
 8005fb4:	b2d1      	uxtb	r1, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	78da      	ldrb	r2, [r3, #3]
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	4053      	eors	r3, r2
 8005fce:	733b      	strb	r3, [r7, #12]
 8005fd0:	7b3b      	ldrb	r3, [r7, #12]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff ff4d 	bl	8005e72 <xtime>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	733b      	strb	r3, [r7, #12]
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	78d9      	ldrb	r1, [r3, #3]
 8005fe6:	7b3a      	ldrb	r2, [r7, #12]
 8005fe8:	7b7b      	ldrb	r3, [r7, #13]
 8005fea:	4053      	eors	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	404a      	eors	r2, r1
 8005ff2:	b2d1      	uxtb	r1, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	3301      	adds	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b03      	cmp	r3, #3
 8006008:	f67f af57 	bls.w	8005eba <MixColumns+0xe>
  }
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8006016:	b5b0      	push	{r4, r5, r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e33b      	b.n	800669c <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800602c:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	789b      	ldrb	r3, [r3, #2]
 8006044:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	78db      	ldrb	r3, [r3, #3]
 8006050:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff0c 	bl	8005e72 <xtime>
 800605a:	4603      	mov	r3, r0
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff08 	bl	8005e72 <xtime>
 8006062:	4603      	mov	r3, r0
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff04 	bl	8005e72 <xtime>
 800606a:	4603      	mov	r3, r0
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff ff00 	bl	8005e72 <xtime>
 8006072:	7abb      	ldrb	r3, [r7, #10]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fefc 	bl	8005e72 <xtime>
 800607a:	4603      	mov	r3, r0
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fef8 	bl	8005e72 <xtime>
 8006082:	7abb      	ldrb	r3, [r7, #10]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fef4 	bl	8005e72 <xtime>
 800608a:	4603      	mov	r3, r0
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fef0 	bl	8005e72 <xtime>
 8006092:	4603      	mov	r3, r0
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff feec 	bl	8005e72 <xtime>
 800609a:	4603      	mov	r3, r0
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fee8 	bl	8005e72 <xtime>
 80060a2:	7a7b      	ldrb	r3, [r7, #9]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fee4 	bl	8005e72 <xtime>
 80060aa:	7a7b      	ldrb	r3, [r7, #9]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fee0 	bl	8005e72 <xtime>
 80060b2:	4603      	mov	r3, r0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fedc 	bl	8005e72 <xtime>
 80060ba:	4603      	mov	r3, r0
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fed8 	bl	8005e72 <xtime>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fed4 	bl	8005e72 <xtime>
 80060ca:	7a3b      	ldrb	r3, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fed0 	bl	8005e72 <xtime>
 80060d2:	7a3b      	ldrb	r3, [r7, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fecc 	bl	8005e72 <xtime>
 80060da:	4603      	mov	r3, r0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fec8 	bl	8005e72 <xtime>
 80060e2:	7a3b      	ldrb	r3, [r7, #8]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fec4 	bl	8005e72 <xtime>
 80060ea:	4603      	mov	r3, r0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fec0 	bl	8005e72 <xtime>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff febc 	bl	8005e72 <xtime>
 80060fa:	4603      	mov	r3, r0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff feb8 	bl	8005e72 <xtime>
 8006102:	7afb      	ldrb	r3, [r7, #11]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff feb4 	bl	8005e72 <xtime>
 800610a:	4603      	mov	r3, r0
 800610c:	461c      	mov	r4, r3
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff feae 	bl	8005e72 <xtime>
 8006116:	4603      	mov	r3, r0
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff feaa 	bl	8005e72 <xtime>
 800611e:	4603      	mov	r3, r0
 8006120:	4063      	eors	r3, r4
 8006122:	b2dc      	uxtb	r4, r3
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fea3 	bl	8005e72 <xtime>
 800612c:	4603      	mov	r3, r0
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fe9f 	bl	8005e72 <xtime>
 8006134:	4603      	mov	r3, r0
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fe9b 	bl	8005e72 <xtime>
 800613c:	4603      	mov	r3, r0
 800613e:	4063      	eors	r3, r4
 8006140:	b2dc      	uxtb	r4, r3
 8006142:	7abb      	ldrb	r3, [r7, #10]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fe94 	bl	8005e72 <xtime>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	7abb      	ldrb	r3, [r7, #10]
 8006150:	4053      	eors	r3, r2
 8006152:	b2dd      	uxtb	r5, r3
 8006154:	7abb      	ldrb	r3, [r7, #10]
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fe8b 	bl	8005e72 <xtime>
 800615c:	4603      	mov	r3, r0
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fe87 	bl	8005e72 <xtime>
 8006164:	4603      	mov	r3, r0
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fe83 	bl	8005e72 <xtime>
 800616c:	4603      	mov	r3, r0
 800616e:	406b      	eors	r3, r5
 8006170:	b2db      	uxtb	r3, r3
 8006172:	4063      	eors	r3, r4
 8006174:	b2dc      	uxtb	r4, r3
 8006176:	7a7b      	ldrb	r3, [r7, #9]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fe7a 	bl	8005e72 <xtime>
 800617e:	4603      	mov	r3, r0
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fe76 	bl	8005e72 <xtime>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	7a7b      	ldrb	r3, [r7, #9]
 800618c:	4053      	eors	r3, r2
 800618e:	b2dd      	uxtb	r5, r3
 8006190:	7a7b      	ldrb	r3, [r7, #9]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fe6d 	bl	8005e72 <xtime>
 8006198:	4603      	mov	r3, r0
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fe69 	bl	8005e72 <xtime>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fe65 	bl	8005e72 <xtime>
 80061a8:	4603      	mov	r3, r0
 80061aa:	406b      	eors	r3, r5
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4063      	eors	r3, r4
 80061b0:	b2dc      	uxtb	r4, r3
 80061b2:	7a3b      	ldrb	r3, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fe5c 	bl	8005e72 <xtime>
 80061ba:	4603      	mov	r3, r0
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fe58 	bl	8005e72 <xtime>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fe54 	bl	8005e72 <xtime>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	7a3b      	ldrb	r3, [r7, #8]
 80061d0:	4053      	eors	r3, r2
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	4063      	eors	r3, r4
 80061d6:	b2d9      	uxtb	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fe45 	bl	8005e72 <xtime>
 80061e8:	7afb      	ldrb	r3, [r7, #11]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fe41 	bl	8005e72 <xtime>
 80061f0:	4603      	mov	r3, r0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fe3d 	bl	8005e72 <xtime>
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fe39 	bl	8005e72 <xtime>
 8006200:	4603      	mov	r3, r0
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe35 	bl	8005e72 <xtime>
 8006208:	4603      	mov	r3, r0
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fe31 	bl	8005e72 <xtime>
 8006210:	4603      	mov	r3, r0
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fe2d 	bl	8005e72 <xtime>
 8006218:	7abb      	ldrb	r3, [r7, #10]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fe29 	bl	8005e72 <xtime>
 8006220:	4603      	mov	r3, r0
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fe25 	bl	8005e72 <xtime>
 8006228:	4603      	mov	r3, r0
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fe21 	bl	8005e72 <xtime>
 8006230:	4603      	mov	r3, r0
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fe1d 	bl	8005e72 <xtime>
 8006238:	7a7b      	ldrb	r3, [r7, #9]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fe19 	bl	8005e72 <xtime>
 8006240:	4603      	mov	r3, r0
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fe15 	bl	8005e72 <xtime>
 8006248:	7a7b      	ldrb	r3, [r7, #9]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fe11 	bl	8005e72 <xtime>
 8006250:	4603      	mov	r3, r0
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fe0d 	bl	8005e72 <xtime>
 8006258:	4603      	mov	r3, r0
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fe09 	bl	8005e72 <xtime>
 8006260:	4603      	mov	r3, r0
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fe05 	bl	8005e72 <xtime>
 8006268:	7a3b      	ldrb	r3, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fe01 	bl	8005e72 <xtime>
 8006270:	7a3b      	ldrb	r3, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fdfd 	bl	8005e72 <xtime>
 8006278:	4603      	mov	r3, r0
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fdf9 	bl	8005e72 <xtime>
 8006280:	4603      	mov	r3, r0
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fdf5 	bl	8005e72 <xtime>
 8006288:	4603      	mov	r3, r0
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fdf1 	bl	8005e72 <xtime>
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fded 	bl	8005e72 <xtime>
 8006298:	4603      	mov	r3, r0
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fde9 	bl	8005e72 <xtime>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fde5 	bl	8005e72 <xtime>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	4053      	eors	r3, r2
 80062b0:	b2dc      	uxtb	r4, r3
 80062b2:	7abb      	ldrb	r3, [r7, #10]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fddc 	bl	8005e72 <xtime>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461d      	mov	r5, r3
 80062be:	7abb      	ldrb	r3, [r7, #10]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fdd6 	bl	8005e72 <xtime>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fdd2 	bl	8005e72 <xtime>
 80062ce:	4603      	mov	r3, r0
 80062d0:	406b      	eors	r3, r5
 80062d2:	b2dd      	uxtb	r5, r3
 80062d4:	7abb      	ldrb	r3, [r7, #10]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fdcb 	bl	8005e72 <xtime>
 80062dc:	4603      	mov	r3, r0
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fdc7 	bl	8005e72 <xtime>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fdc3 	bl	8005e72 <xtime>
 80062ec:	4603      	mov	r3, r0
 80062ee:	406b      	eors	r3, r5
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4063      	eors	r3, r4
 80062f4:	b2dc      	uxtb	r4, r3
 80062f6:	7a7b      	ldrb	r3, [r7, #9]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fdba 	bl	8005e72 <xtime>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	7a7b      	ldrb	r3, [r7, #9]
 8006304:	4053      	eors	r3, r2
 8006306:	b2dd      	uxtb	r5, r3
 8006308:	7a7b      	ldrb	r3, [r7, #9]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fdb1 	bl	8005e72 <xtime>
 8006310:	4603      	mov	r3, r0
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fdad 	bl	8005e72 <xtime>
 8006318:	4603      	mov	r3, r0
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fda9 	bl	8005e72 <xtime>
 8006320:	4603      	mov	r3, r0
 8006322:	406b      	eors	r3, r5
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4063      	eors	r3, r4
 8006328:	b2dc      	uxtb	r4, r3
 800632a:	7a3b      	ldrb	r3, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff fda0 	bl	8005e72 <xtime>
 8006332:	4603      	mov	r3, r0
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fd9c 	bl	8005e72 <xtime>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	7a3b      	ldrb	r3, [r7, #8]
 8006340:	4053      	eors	r3, r2
 8006342:	b2dd      	uxtb	r5, r3
 8006344:	7a3b      	ldrb	r3, [r7, #8]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fd93 	bl	8005e72 <xtime>
 800634c:	4603      	mov	r3, r0
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fd8f 	bl	8005e72 <xtime>
 8006354:	4603      	mov	r3, r0
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff fd8b 	bl	8005e72 <xtime>
 800635c:	4603      	mov	r3, r0
 800635e:	406b      	eors	r3, r5
 8006360:	b2db      	uxtb	r3, r3
 8006362:	4063      	eors	r3, r4
 8006364:	b2d9      	uxtb	r1, r3
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	460a      	mov	r2, r1
 8006370:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8006372:	7afb      	ldrb	r3, [r7, #11]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fd7c 	bl	8005e72 <xtime>
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fd78 	bl	8005e72 <xtime>
 8006382:	4603      	mov	r3, r0
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fd74 	bl	8005e72 <xtime>
 800638a:	4603      	mov	r3, r0
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fd70 	bl	8005e72 <xtime>
 8006392:	4603      	mov	r3, r0
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fd6c 	bl	8005e72 <xtime>
 800639a:	7abb      	ldrb	r3, [r7, #10]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fd68 	bl	8005e72 <xtime>
 80063a2:	7abb      	ldrb	r3, [r7, #10]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fd64 	bl	8005e72 <xtime>
 80063aa:	4603      	mov	r3, r0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fd60 	bl	8005e72 <xtime>
 80063b2:	7abb      	ldrb	r3, [r7, #10]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd5c 	bl	8005e72 <xtime>
 80063ba:	4603      	mov	r3, r0
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fd58 	bl	8005e72 <xtime>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fd54 	bl	8005e72 <xtime>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fd50 	bl	8005e72 <xtime>
 80063d2:	7a7b      	ldrb	r3, [r7, #9]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fd4c 	bl	8005e72 <xtime>
 80063da:	4603      	mov	r3, r0
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fd48 	bl	8005e72 <xtime>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fd44 	bl	8005e72 <xtime>
 80063ea:	4603      	mov	r3, r0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fd40 	bl	8005e72 <xtime>
 80063f2:	7a3b      	ldrb	r3, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fd3c 	bl	8005e72 <xtime>
 80063fa:	4603      	mov	r3, r0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fd38 	bl	8005e72 <xtime>
 8006402:	7a3b      	ldrb	r3, [r7, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fd34 	bl	8005e72 <xtime>
 800640a:	4603      	mov	r3, r0
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fd30 	bl	8005e72 <xtime>
 8006412:	4603      	mov	r3, r0
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fd2c 	bl	8005e72 <xtime>
 800641a:	4603      	mov	r3, r0
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fd28 	bl	8005e72 <xtime>
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fd24 	bl	8005e72 <xtime>
 800642a:	4603      	mov	r3, r0
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fd20 	bl	8005e72 <xtime>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	4053      	eors	r3, r2
 800643a:	b2dc      	uxtb	r4, r3
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fd17 	bl	8005e72 <xtime>
 8006444:	4603      	mov	r3, r0
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fd13 	bl	8005e72 <xtime>
 800644c:	4603      	mov	r3, r0
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fd0f 	bl	8005e72 <xtime>
 8006454:	4603      	mov	r3, r0
 8006456:	4063      	eors	r3, r4
 8006458:	b2dc      	uxtb	r4, r3
 800645a:	7abb      	ldrb	r3, [r7, #10]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fd08 	bl	8005e72 <xtime>
 8006462:	4603      	mov	r3, r0
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fd04 	bl	8005e72 <xtime>
 800646a:	4603      	mov	r3, r0
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fd00 	bl	8005e72 <xtime>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	7abb      	ldrb	r3, [r7, #10]
 8006478:	4053      	eors	r3, r2
 800647a:	b2db      	uxtb	r3, r3
 800647c:	4063      	eors	r3, r4
 800647e:	b2dc      	uxtb	r4, r3
 8006480:	7a7b      	ldrb	r3, [r7, #9]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fcf5 	bl	8005e72 <xtime>
 8006488:	4603      	mov	r3, r0
 800648a:	461d      	mov	r5, r3
 800648c:	7a7b      	ldrb	r3, [r7, #9]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fcef 	bl	8005e72 <xtime>
 8006494:	4603      	mov	r3, r0
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff fceb 	bl	8005e72 <xtime>
 800649c:	4603      	mov	r3, r0
 800649e:	406b      	eors	r3, r5
 80064a0:	b2dd      	uxtb	r5, r3
 80064a2:	7a7b      	ldrb	r3, [r7, #9]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fce4 	bl	8005e72 <xtime>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fce0 	bl	8005e72 <xtime>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fcdc 	bl	8005e72 <xtime>
 80064ba:	4603      	mov	r3, r0
 80064bc:	406b      	eors	r3, r5
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	4063      	eors	r3, r4
 80064c2:	b2dc      	uxtb	r4, r3
 80064c4:	7a3b      	ldrb	r3, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff fcd3 	bl	8005e72 <xtime>
 80064cc:	4603      	mov	r3, r0
 80064ce:	461a      	mov	r2, r3
 80064d0:	7a3b      	ldrb	r3, [r7, #8]
 80064d2:	4053      	eors	r3, r2
 80064d4:	b2dd      	uxtb	r5, r3
 80064d6:	7a3b      	ldrb	r3, [r7, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fcca 	bl	8005e72 <xtime>
 80064de:	4603      	mov	r3, r0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fcc6 	bl	8005e72 <xtime>
 80064e6:	4603      	mov	r3, r0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fcc2 	bl	8005e72 <xtime>
 80064ee:	4603      	mov	r3, r0
 80064f0:	406b      	eors	r3, r5
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	4063      	eors	r3, r4
 80064f6:	b2d9      	uxtb	r1, r3
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	460a      	mov	r2, r1
 8006502:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fcb3 	bl	8005e72 <xtime>
 800650c:	4603      	mov	r3, r0
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fcaf 	bl	8005e72 <xtime>
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fcab 	bl	8005e72 <xtime>
 800651c:	4603      	mov	r3, r0
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fca7 	bl	8005e72 <xtime>
 8006524:	4603      	mov	r3, r0
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fca3 	bl	8005e72 <xtime>
 800652c:	4603      	mov	r3, r0
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fc9f 	bl	8005e72 <xtime>
 8006534:	7abb      	ldrb	r3, [r7, #10]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fc9b 	bl	8005e72 <xtime>
 800653c:	7abb      	ldrb	r3, [r7, #10]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fc97 	bl	8005e72 <xtime>
 8006544:	4603      	mov	r3, r0
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fc93 	bl	8005e72 <xtime>
 800654c:	4603      	mov	r3, r0
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fc8f 	bl	8005e72 <xtime>
 8006554:	4603      	mov	r3, r0
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fc8b 	bl	8005e72 <xtime>
 800655c:	7a7b      	ldrb	r3, [r7, #9]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fc87 	bl	8005e72 <xtime>
 8006564:	7a7b      	ldrb	r3, [r7, #9]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fc83 	bl	8005e72 <xtime>
 800656c:	4603      	mov	r3, r0
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fc7f 	bl	8005e72 <xtime>
 8006574:	7a7b      	ldrb	r3, [r7, #9]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fc7b 	bl	8005e72 <xtime>
 800657c:	4603      	mov	r3, r0
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fc77 	bl	8005e72 <xtime>
 8006584:	4603      	mov	r3, r0
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fc73 	bl	8005e72 <xtime>
 800658c:	4603      	mov	r3, r0
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fc6f 	bl	8005e72 <xtime>
 8006594:	7a3b      	ldrb	r3, [r7, #8]
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff fc6b 	bl	8005e72 <xtime>
 800659c:	4603      	mov	r3, r0
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fc67 	bl	8005e72 <xtime>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fc63 	bl	8005e72 <xtime>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fc5f 	bl	8005e72 <xtime>
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fc5b 	bl	8005e72 <xtime>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	4053      	eors	r3, r2
 80065c4:	b2dc      	uxtb	r4, r3
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fc52 	bl	8005e72 <xtime>
 80065ce:	4603      	mov	r3, r0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fc4e 	bl	8005e72 <xtime>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fc4a 	bl	8005e72 <xtime>
 80065de:	4603      	mov	r3, r0
 80065e0:	4063      	eors	r3, r4
 80065e2:	b2dc      	uxtb	r4, r3
 80065e4:	7abb      	ldrb	r3, [r7, #10]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fc43 	bl	8005e72 <xtime>
 80065ec:	4603      	mov	r3, r0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fc3f 	bl	8005e72 <xtime>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	7abb      	ldrb	r3, [r7, #10]
 80065fa:	4053      	eors	r3, r2
 80065fc:	b2dd      	uxtb	r5, r3
 80065fe:	7abb      	ldrb	r3, [r7, #10]
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fc36 	bl	8005e72 <xtime>
 8006606:	4603      	mov	r3, r0
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fc32 	bl	8005e72 <xtime>
 800660e:	4603      	mov	r3, r0
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fc2e 	bl	8005e72 <xtime>
 8006616:	4603      	mov	r3, r0
 8006618:	406b      	eors	r3, r5
 800661a:	b2db      	uxtb	r3, r3
 800661c:	4063      	eors	r3, r4
 800661e:	b2dc      	uxtb	r4, r3
 8006620:	7a7b      	ldrb	r3, [r7, #9]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fc25 	bl	8005e72 <xtime>
 8006628:	4603      	mov	r3, r0
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fc21 	bl	8005e72 <xtime>
 8006630:	4603      	mov	r3, r0
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fc1d 	bl	8005e72 <xtime>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	7a7b      	ldrb	r3, [r7, #9]
 800663e:	4053      	eors	r3, r2
 8006640:	b2db      	uxtb	r3, r3
 8006642:	4063      	eors	r3, r4
 8006644:	b2dc      	uxtb	r4, r3
 8006646:	7a3b      	ldrb	r3, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fc12 	bl	8005e72 <xtime>
 800664e:	4603      	mov	r3, r0
 8006650:	461d      	mov	r5, r3
 8006652:	7a3b      	ldrb	r3, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fc0c 	bl	8005e72 <xtime>
 800665a:	4603      	mov	r3, r0
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fc08 	bl	8005e72 <xtime>
 8006662:	4603      	mov	r3, r0
 8006664:	406b      	eors	r3, r5
 8006666:	b2dd      	uxtb	r5, r3
 8006668:	7a3b      	ldrb	r3, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fc01 	bl	8005e72 <xtime>
 8006670:	4603      	mov	r3, r0
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fbfd 	bl	8005e72 <xtime>
 8006678:	4603      	mov	r3, r0
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fbf9 	bl	8005e72 <xtime>
 8006680:	4603      	mov	r3, r0
 8006682:	406b      	eors	r3, r5
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4063      	eors	r3, r4
 8006688:	b2d9      	uxtb	r1, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	460a      	mov	r2, r1
 8006694:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f77f acc0 	ble.w	8006024 <InvMixColumns+0xe>
  }
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080066b0 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e01d      	b.n	80066fa <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80066be:	2300      	movs	r3, #0
 80066c0:	73bb      	strb	r3, [r7, #14]
 80066c2:	e014      	b.n	80066ee <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80066c4:	7bba      	ldrb	r2, [r7, #14]
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	0092      	lsls	r2, r2, #2
 80066cc:	440a      	add	r2, r1
 80066ce:	4413      	add	r3, r2
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	7bba      	ldrb	r2, [r7, #14]
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <InvSubBytes+0x5c>)
 80066da:	5c08      	ldrb	r0, [r1, r0]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	0092      	lsls	r2, r2, #2
 80066e0:	440a      	add	r2, r1
 80066e2:	4413      	add	r3, r2
 80066e4:	4602      	mov	r2, r0
 80066e6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	3301      	adds	r3, #1
 80066ec:	73bb      	strb	r3, [r7, #14]
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d9e7      	bls.n	80066c4 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	3301      	adds	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d9de      	bls.n	80066be <InvSubBytes+0xe>
    }
  }
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	0800f8cc 	.word	0x0800f8cc

08006710 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7b5b      	ldrb	r3, [r3, #13]
 800671c:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7a5a      	ldrb	r2, [r3, #9]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	795a      	ldrb	r2, [r3, #5]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	785a      	ldrb	r2, [r3, #1]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7bfa      	ldrb	r2, [r7, #15]
 800673a:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	789b      	ldrb	r3, [r3, #2]
 8006740:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7a9a      	ldrb	r2, [r3, #10]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	799b      	ldrb	r3, [r3, #6]
 8006754:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7b9a      	ldrb	r2, [r3, #14]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7bfa      	ldrb	r2, [r7, #15]
 8006762:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	78db      	ldrb	r3, [r3, #3]
 8006768:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	79da      	ldrb	r2, [r3, #7]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7ada      	ldrb	r2, [r3, #11]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	7bda      	ldrb	r2, [r3, #15]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7bfa      	ldrb	r2, [r7, #15]
 8006786:	73da      	strb	r2, [r3, #15]
}
 8006788:	bf00      	nop
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7ff fab7 	bl	8005d18 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff faee 	bl	8005d90 <SubBytes>
    ShiftRows(state);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fb1b 	bl	8005df0 <ShiftRows>
    if (round == Nr) {
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b0a      	cmp	r3, #10
 80067be:	d00c      	beq.n	80067da <Cipher+0x48>
      break;
    }
    MixColumns(state);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff fb73 	bl	8005eac <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff faa3 	bl	8005d18 <AddRoundKey>
  for (round = 1; ; ++round)
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3301      	adds	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 80067d8:	e7e9      	b.n	80067ae <Cipher+0x1c>
      break;
 80067da:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	200a      	movs	r0, #10
 80067e2:	f7ff fa99 	bl	8005d18 <AddRoundKey>
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	200a      	movs	r0, #10
 8006802:	f7ff fa89 	bl	8005d18 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8006806:	2309      	movs	r3, #9
 8006808:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff80 	bl	8006710 <InvShiftRows>
    InvSubBytes(state);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff4d 	bl	80066b0 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fa7b 	bl	8005d18 <AddRoundKey>
    if (round == 0) {
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d006      	beq.n	8006836 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fbf4 	bl	8006016 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	3b01      	subs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8006834:	e7e9      	b.n	800680a <InvCipher+0x1c>
      break;
 8006836:	bf00      	nop
  }

}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
 800684e:	e010      	b.n	8006872 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	7819      	ldrb	r1, [r3, #0]
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4413      	add	r3, r2
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4403      	add	r3, r0
 8006866:	404a      	eors	r2, r1
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3301      	adds	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b0f      	cmp	r3, #15
 8006876:	d9eb      	bls.n	8006850 <XorWithIv+0x10>
  }
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006890:	2300      	movs	r3, #0
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
 8006894:	e022      	b.n	80068dc <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f107 0414 	add.w	r4, r7, #20
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4619      	mov	r1, r3
 80068aa:	68b8      	ldr	r0, [r7, #8]
 80068ac:	f7ff ff9f 	bl	80067ee <InvCipher>
    XorWithIv(buf, ctx->Iv);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	33b0      	adds	r3, #176	; 0xb0
 80068b4:	4619      	mov	r1, r3
 80068b6:	68b8      	ldr	r0, [r7, #8]
 80068b8:	f7ff ffc2 	bl	8006840 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	33b0      	adds	r3, #176	; 0xb0
 80068c0:	461d      	mov	r5, r3
 80068c2:	f107 0414 	add.w	r4, r7, #20
 80068c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c8:	6028      	str	r0, [r5, #0]
 80068ca:	6069      	str	r1, [r5, #4]
 80068cc:	60aa      	str	r2, [r5, #8]
 80068ce:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	3310      	adds	r3, #16
 80068d4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	3310      	adds	r3, #16
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
 80068dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d3d8      	bcc.n	8006896 <AES_CBC_decrypt_buffer+0x12>
  }

}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3728      	adds	r7, #40	; 0x28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bdb0      	pop	{r4, r5, r7, pc}

080068ee <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80068ee:	b590      	push	{r4, r7, lr}
 80068f0:	b08b      	sub	sp, #44	; 0x2c
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80068fa:	2300      	movs	r3, #0
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	2310      	movs	r3, #16
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	e04e      	b.n	80069a2 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b10      	cmp	r3, #16
 8006908:	d136      	bne.n	8006978 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	33b0      	adds	r3, #176	; 0xb0
 800690e:	f107 0410 	add.w	r4, r7, #16
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff ff34 	bl	8006792 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800692a:	230f      	movs	r3, #15
 800692c:	623b      	str	r3, [r7, #32]
 800692e:	e01e      	b.n	800696e <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	4413      	add	r3, r2
 8006936:	33b0      	adds	r3, #176	; 0xb0
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2bff      	cmp	r3, #255	; 0xff
 800693c:	d106      	bne.n	800694c <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	4413      	add	r3, r2
 8006944:	33b0      	adds	r3, #176	; 0xb0
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
          continue;
 800694a:	e00d      	b.n	8006968 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	4413      	add	r3, r2
 8006952:	33b0      	adds	r3, #176	; 0xb0
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	b2d9      	uxtb	r1, r3
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	4413      	add	r3, r2
 8006960:	33b0      	adds	r3, #176	; 0xb0
 8006962:	460a      	mov	r2, r1
 8006964:	701a      	strb	r2, [r3, #0]
        break;
 8006966:	e005      	b.n	8006974 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	3b01      	subs	r3, #1
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dadd      	bge.n	8006930 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	4413      	add	r3, r2
 800697e:	7819      	ldrb	r1, [r3, #0]
 8006980:	f107 0210 	add.w	r2, r7, #16
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	4413      	add	r3, r2
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68b8      	ldr	r0, [r7, #8]
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	4403      	add	r3, r0
 8006990:	404a      	eors	r2, r1
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	3301      	adds	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	3301      	adds	r3, #1
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3ac      	bcc.n	8006904 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	372c      	adds	r7, #44	; 0x2c
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd90      	pop	{r4, r7, pc}

080069b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069b8:	f000 ff6a 	bl	8007890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069bc:	f000 f900 	bl	8006bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069c0:	f000 fb20 	bl	8007004 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 80069c4:	f000 f972 	bl	8006cac <MX_SPI1_Init>
  MX_I2C1_Init();
 80069c8:	f000 f942 	bl	8006c50 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80069cc:	f000 faf0 	bl	8006fb0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80069d0:	f000 f9a2 	bl	8006d18 <MX_SPI2_Init>
  MX_TIM2_Init();
 80069d4:	f000 fa26 	bl	8006e24 <MX_TIM2_Init>
  MX_TIM4_Init();
 80069d8:	f000 fa72 	bl	8006ec0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80069dc:	f000 f9d2 	bl	8006d84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80069e0:	f000 fabc 	bl	8006f5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module 1
  SX1278_hw_1.dio0.port = DIO_GPIO_Port;
 80069e4:	4b67      	ldr	r3, [pc, #412]	; (8006b84 <main+0x1d0>)
 80069e6:	4a68      	ldr	r2, [pc, #416]	; (8006b88 <main+0x1d4>)
 80069e8:	60da      	str	r2, [r3, #12]
  SX1278_hw_1.dio0.pin = DIO_Pin;
 80069ea:	4b66      	ldr	r3, [pc, #408]	; (8006b84 <main+0x1d0>)
 80069ec:	2202      	movs	r2, #2
 80069ee:	609a      	str	r2, [r3, #8]
  SX1278_hw_1.nss.port = NSS_GPIO_Port;
 80069f0:	4b64      	ldr	r3, [pc, #400]	; (8006b84 <main+0x1d0>)
 80069f2:	4a66      	ldr	r2, [pc, #408]	; (8006b8c <main+0x1d8>)
 80069f4:	615a      	str	r2, [r3, #20]
  SX1278_hw_1.nss.pin = NSS_Pin;
 80069f6:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <main+0x1d0>)
 80069f8:	2210      	movs	r2, #16
 80069fa:	611a      	str	r2, [r3, #16]
  SX1278_hw_1.reset.port = RESET_GPIO_Port;
 80069fc:	4b61      	ldr	r3, [pc, #388]	; (8006b84 <main+0x1d0>)
 80069fe:	4a62      	ldr	r2, [pc, #392]	; (8006b88 <main+0x1d4>)
 8006a00:	605a      	str	r2, [r3, #4]
  SX1278_hw_1.reset.pin = RESET_Pin;
 8006a02:	4b60      	ldr	r3, [pc, #384]	; (8006b84 <main+0x1d0>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
  SX1278_hw_1.spi = &hspi1;
 8006a08:	4b5e      	ldr	r3, [pc, #376]	; (8006b84 <main+0x1d0>)
 8006a0a:	4a61      	ldr	r2, [pc, #388]	; (8006b90 <main+0x1dc>)
 8006a0c:	619a      	str	r2, [r3, #24]
  SX1278_1.hw = &SX1278_hw_1;
 8006a0e:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <main+0x1e0>)
 8006a10:	4a5c      	ldr	r2, [pc, #368]	; (8006b84 <main+0x1d0>)
 8006a12:	601a      	str	r2, [r3, #0]

  //initialize LoRa module 2
  SX1278_hw_2.dio0.port = DIO_2_GPIO_Port;
 8006a14:	4b60      	ldr	r3, [pc, #384]	; (8006b98 <main+0x1e4>)
 8006a16:	4a5c      	ldr	r2, [pc, #368]	; (8006b88 <main+0x1d4>)
 8006a18:	60da      	str	r2, [r3, #12]
  SX1278_hw_2.dio0.pin = DIO_2_Pin;
 8006a1a:	4b5f      	ldr	r3, [pc, #380]	; (8006b98 <main+0x1e4>)
 8006a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a20:	609a      	str	r2, [r3, #8]
  SX1278_hw_2.nss.port = SPI2_NSS_GPIO_Port;
 8006a22:	4b5d      	ldr	r3, [pc, #372]	; (8006b98 <main+0x1e4>)
 8006a24:	4a58      	ldr	r2, [pc, #352]	; (8006b88 <main+0x1d4>)
 8006a26:	615a      	str	r2, [r3, #20]
  SX1278_hw_2.nss.pin = SPI2_NSS_Pin;
 8006a28:	4b5b      	ldr	r3, [pc, #364]	; (8006b98 <main+0x1e4>)
 8006a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a2e:	611a      	str	r2, [r3, #16]
  SX1278_hw_2.reset.port = RESET2_GPIO_Port;
 8006a30:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <main+0x1e4>)
 8006a32:	4a55      	ldr	r2, [pc, #340]	; (8006b88 <main+0x1d4>)
 8006a34:	605a      	str	r2, [r3, #4]
  SX1278_hw_2.reset.pin = RESET2_Pin;
 8006a36:	4b58      	ldr	r3, [pc, #352]	; (8006b98 <main+0x1e4>)
 8006a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a3c:	601a      	str	r2, [r3, #0]
  SX1278_hw_2.spi = &hspi2;
 8006a3e:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <main+0x1e4>)
 8006a40:	4a56      	ldr	r2, [pc, #344]	; (8006b9c <main+0x1e8>)
 8006a42:	619a      	str	r2, [r3, #24]
  SX1278_2.hw = &SX1278_hw_2;
 8006a44:	4b56      	ldr	r3, [pc, #344]	; (8006ba0 <main+0x1ec>)
 8006a46:	4a54      	ldr	r2, [pc, #336]	; (8006b98 <main+0x1e4>)
 8006a48:	601a      	str	r2, [r3, #0]

  /*GW Config Init first to get the config */
  GW_State_Init();
 8006a4a:	f7fb ffc1 	bl	80029d0 <GW_State_Init>
  GW_Reset_State();
 8006a4e:	f7fb ffad 	bl	80029ac <GW_Reset_State>
  GW_Config_Init();
 8006a52:	f7fb ff49 	bl	80028e8 <GW_Config_Init>
  Encrypt_Address_Read_Init();
 8006a56:	f7fa fc8b 	bl	8001370 <Encrypt_Address_Read_Init>
  UI_Init();
 8006a5a:	f7fe f891 	bl	8004b80 <UI_Init>
  ReceiveFWUpdate_Init();
 8006a5e:	f7fc fa8f 	bl	8002f80 <ReceiveFWUpdate_Init>
  // Init timer
  //HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);
 8006a62:	4850      	ldr	r0, [pc, #320]	; (8006ba4 <main+0x1f0>)
 8006a64:	f003 fcf0 	bl	800a448 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8006a68:	2007      	movs	r0, #7
 8006a6a:	f001 f8bc 	bl	8007be6 <HAL_NVIC_DisableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State For Flashing
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8006a6e:	484e      	ldr	r0, [pc, #312]	; (8006ba8 <main+0x1f4>)
 8006a70:	f7fc f82e 	bl	8002ad0 <Rte_SystemState_ReadData>
	  switch (SysTem_State)
 8006a74:	4b4c      	ldr	r3, [pc, #304]	; (8006ba8 <main+0x1f4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	d840      	bhi.n	8006b00 <main+0x14c>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <main+0xd0>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006acd 	.word	0x08006acd
 8006a90:	08006b01 	.word	0x08006b01
 8006a94:	08006ad7 	.word	0x08006ad7
 8006a98:	08006ae1 	.word	0x08006ae1
 8006a9c:	08006ae7 	.word	0x08006ae7
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006b01 	.word	0x08006b01
 8006aa8:	08006aad 	.word	0x08006aad
	  {
	    case WAIT_FOR_ESP_CONNECT:
	    	ReceiveFWUpdate_MainFunc();
 8006aac:	f7fc facc 	bl	8003048 <ReceiveFWUpdate_MainFunc>
	    	break;
 8006ab0:	e027      	b.n	8006b02 <main+0x14e>
		case SYS_NEW_UPDATE_REQ:
			F_voidInitVariables();
 8006ab2:	f7fa fe41 	bl	8001738 <F_voidInitVariables>
			Encrypt_Address_Read_Init();
 8006ab6:	f7fa fc5b 	bl	8001370 <Encrypt_Address_Read_Init>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8006aba:	2004      	movs	r0, #4
 8006abc:	f7fc f988 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
			ReceiveFWUpdate_MainFunc();
 8006ac0:	f7fc fac2 	bl	8003048 <ReceiveFWUpdate_MainFunc>
			break;
 8006ac4:	e01d      	b.n	8006b02 <main+0x14e>
		case SYS_RECEIVE_UPDATE:
			//UI_Main_FLASHING();
			ReceiveFWUpdate_MainFunc();
 8006ac6:	f7fc fabf 	bl	8003048 <ReceiveFWUpdate_MainFunc>
			break;
 8006aca:	e01a      	b.n	8006b02 <main+0x14e>
		case SYS_REQUEST_OTA:
			UI_Main_FLASHING();
 8006acc:	f7fe f87e 	bl	8004bcc <UI_Main_FLASHING>
			Send_Start_OTA();
 8006ad0:	f7fb fa1e 	bl	8001f10 <Send_Start_OTA>
			break;
 8006ad4:	e015      	b.n	8006b02 <main+0x14e>
		case SYS_CONFIG_LORA:
			UI_Main_FLASHING();
 8006ad6:	f7fe f879 	bl	8004bcc <UI_Main_FLASHING>
			FL_FlashLoRa_INIT();
 8006ada:	f7fb fa67 	bl	8001fac <FL_FlashLoRa_INIT>
			break;
 8006ade:	e010      	b.n	8006b02 <main+0x14e>
		case SYS_ENCRYPT_FW:
			Encrypt_MainFunc();
 8006ae0:	f7fa fca4 	bl	800142c <Encrypt_MainFunc>
			break;
 8006ae4:	e00d      	b.n	8006b02 <main+0x14e>
		case SYS_SEND_UPDATE:
			UI_Main_FLASHING();
 8006ae6:	f7fe f871 	bl	8004bcc <UI_Main_FLASHING>
			FL_PacketLoRaSend_START();
 8006aea:	f7fb fb2f 	bl	800214c <FL_PacketLoRaSend_START>
			break;
 8006aee:	e008      	b.n	8006b02 <main+0x14e>
		case SYS_DONE_UPDATE:
			ReceiveFWUpdate_MainFunc();
 8006af0:	f7fc faaa 	bl	8003048 <ReceiveFWUpdate_MainFunc>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x00);
 8006af4:	2000      	movs	r0, #0
 8006af6:	f7fc f96b 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
			FL_PacketLoRaDone_OTA();
 8006afa:	f7fb fbb7 	bl	800226c <FL_PacketLoRaDone_OTA>
			break;
 8006afe:	e000      	b.n	8006b02 <main+0x14e>
		default:
			break;
 8006b00:	bf00      	nop
	  }
	  UI_Main_FLASHING();
 8006b02:	f7fe f863 	bl	8004bcc <UI_Main_FLASHING>
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_flagRequest);
 8006b06:	4829      	ldr	r0, [pc, #164]	; (8006bac <main+0x1f8>)
 8006b08:	f7fc f974 	bl	8002df4 <Rte_Flag_LoRaRequestDevice_ReadData>
	  if(gl_flagRequest == 0x01){
 8006b0c:	4b27      	ldr	r3, [pc, #156]	; (8006bac <main+0x1f8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d10f      	bne.n	8006b34 <main+0x180>
		 HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b14:	2028      	movs	r0, #40	; 0x28
 8006b16:	f001 f866 	bl	8007be6 <HAL_NVIC_DisableIRQ>

		 RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x00);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f7fc f97c 	bl	8002e18 <Rte_Flag_NodeRequestIndex_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_1, buffer_req_2 , GW_REQ_PARAMETER);
 8006b20:	238c      	movs	r3, #140	; 0x8c
 8006b22:	4a23      	ldr	r2, [pc, #140]	; (8006bb0 <main+0x1fc>)
 8006b24:	4923      	ldr	r1, [pc, #140]	; (8006bb4 <main+0x200>)
 8006b26:	481e      	ldr	r0, [pc, #120]	; (8006ba0 <main+0x1ec>)
 8006b28:	f7fa ffe0 	bl	8001aec <Send_request>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		 RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8006b2c:	2004      	movs	r0, #4
 8006b2e:	f7fc f94f 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
 8006b32:	e79c      	b.n	8006a6e <main+0xba>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);



	  }
	  else if(gl_flagRequest == 0x02){
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <main+0x1f8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d10f      	bne.n	8006b5c <main+0x1a8>
		 HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b3c:	2028      	movs	r0, #40	; 0x28
 8006b3e:	f001 f852 	bl	8007be6 <HAL_NVIC_DisableIRQ>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		 RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x01);
 8006b42:	2001      	movs	r0, #1
 8006b44:	f7fc f968 	bl	8002e18 <Rte_Flag_NodeRequestIndex_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_2, buffer_req_2 , GW_REQ_PARAMETER);
 8006b48:	238c      	movs	r3, #140	; 0x8c
 8006b4a:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <main+0x1fc>)
 8006b4c:	491a      	ldr	r1, [pc, #104]	; (8006bb8 <main+0x204>)
 8006b4e:	4814      	ldr	r0, [pc, #80]	; (8006ba0 <main+0x1ec>)
 8006b50:	f7fa ffcc 	bl	8001aec <Send_request>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_1(false);
		 RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x05);
 8006b54:	2005      	movs	r0, #5
 8006b56:	f7fc f93b 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
 8006b5a:	e788      	b.n	8006a6e <main+0xba>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	  }
	  else if(gl_flagRequest == 0x03){
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <main+0x1f8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d184      	bne.n	8006a6e <main+0xba>
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b64:	2028      	movs	r0, #40	; 0x28
 8006b66:	f001 f83e 	bl	8007be6 <HAL_NVIC_DisableIRQ>
		  //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		  RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x02);
 8006b6a:	2002      	movs	r0, #2
 8006b6c:	f7fc f954 	bl	8002e18 <Rte_Flag_NodeRequestIndex_WriteData>
		  Send_request(&SX1278_2, ADDRESS__MAC_NODE_3, buffer_req_2, GW_REQ_PARAMETER);
 8006b70:	238c      	movs	r3, #140	; 0x8c
 8006b72:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <main+0x1fc>)
 8006b74:	4911      	ldr	r1, [pc, #68]	; (8006bbc <main+0x208>)
 8006b76:	480a      	ldr	r0, [pc, #40]	; (8006ba0 <main+0x1ec>)
 8006b78:	f7fa ffb8 	bl	8001aec <Send_request>
		  //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x06);
 8006b7c:	2006      	movs	r0, #6
 8006b7e:	f7fc f927 	bl	8002dd0 <Rte_Flag_LoRaRequestDevice_WriteData>
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8006b82:	e774      	b.n	8006a6e <main+0xba>
 8006b84:	20001884 	.word	0x20001884
 8006b88:	40010c00 	.word	0x40010c00
 8006b8c:	40010800 	.word	0x40010800
 8006b90:	2000166c 	.word	0x2000166c
 8006b94:	200018a0 	.word	0x200018a0
 8006b98:	200019b4 	.word	0x200019b4
 8006b9c:	200016c4 	.word	0x200016c4
 8006ba0:	200019d0 	.word	0x200019d0
 8006ba4:	20001764 	.word	0x20001764
 8006ba8:	20001ae4 	.word	0x20001ae4
 8006bac:	20001ae8 	.word	0x20001ae8
 8006bb0:	20001aec 	.word	0x20001aec
 8006bb4:	26011bcd 	.word	0x26011bcd
 8006bb8:	26011def 	.word	0x26011def
 8006bbc:	260120f0 	.word	0x260120f0

08006bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	; 0x40
 8006bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bc6:	f107 0318 	add.w	r3, r7, #24
 8006bca:	2228      	movs	r2, #40	; 0x28
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f005 fc43 	bl	800c45a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bd4:	1d3b      	adds	r3, r7, #4
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006be2:	2309      	movs	r3, #9
 8006be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006bec:	2300      	movs	r3, #0
 8006bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006c02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c08:	f107 0318 	add.w	r3, r7, #24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f002 fb21 	bl	8009254 <HAL_RCC_OscConfig>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8006c18:	f000 fa96 	bl	8007148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c20:	2302      	movs	r3, #2
 8006c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f002 fd8e 	bl	8009758 <HAL_RCC_ClockConfig>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006c42:	f000 fa81 	bl	8007148 <Error_Handler>
  }
}
 8006c46:	bf00      	nop
 8006c48:	3740      	adds	r7, #64	; 0x40
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <MX_I2C1_Init+0x54>)
 8006c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006c5a:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c5c:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <MX_I2C1_Init+0x58>)
 8006c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c8c:	4804      	ldr	r0, [pc, #16]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c8e:	f001 fd17 	bl	80086c0 <HAL_I2C_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006c98:	f000 fa56 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c9c:	bf00      	nop
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20001618 	.word	0x20001618
 8006ca4:	40005400 	.word	0x40005400
 8006ca8:	00061a80 	.word	0x00061a80

08006cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <MX_SPI1_Init+0x68>)
 8006cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006cbe:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006cfc:	4804      	ldr	r0, [pc, #16]	; (8006d10 <MX_SPI1_Init+0x64>)
 8006cfe:	f002 feb9 	bl	8009a74 <HAL_SPI_Init>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006d08:	f000 fa1e 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	2000166c 	.word	0x2000166c
 8006d14:	40013000 	.word	0x40013000

08006d18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006d1c:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d1e:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <MX_SPI2_Init+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006d22:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006d42:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006d56:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d64:	220a      	movs	r2, #10
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006d68:	4804      	ldr	r0, [pc, #16]	; (8006d7c <MX_SPI2_Init+0x64>)
 8006d6a:	f002 fe83 	bl	8009a74 <HAL_SPI_Init>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006d74:	f000 f9e8 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200016c4 	.word	0x200016c4
 8006d80:	40003800 	.word	0x40003800

08006d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d8a:	f107 0308 	add.w	r3, r7, #8
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	609a      	str	r2, [r3, #8]
 8006d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d98:	463b      	mov	r3, r7
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006da0:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <MX_TIM1_Init+0x9c>)
 8006da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006da8:	2247      	movs	r2, #71	; 0x47
 8006daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8006db2:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006db4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dba:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006dc6:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006dcc:	4813      	ldr	r0, [pc, #76]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dce:	f003 fa7b 	bl	800a2c8 <HAL_TIM_Base_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006dd8:	f000 f9b6 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4619      	mov	r1, r3
 8006de8:	480c      	ldr	r0, [pc, #48]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006dea:	f003 fcb5 	bl	800a758 <HAL_TIM_ConfigClockSource>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006df4:	f000 f9a8 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006e00:	463b      	mov	r3, r7
 8006e02:	4619      	mov	r1, r3
 8006e04:	4805      	ldr	r0, [pc, #20]	; (8006e1c <MX_TIM1_Init+0x98>)
 8006e06:	f003 fe8b 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006e10:	f000 f99a 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006e14:	bf00      	nop
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	2000171c 	.word	0x2000171c
 8006e20:	40012c00 	.word	0x40012c00

08006e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e38:	463b      	mov	r3, r7
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006e40:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11015;
 8006e48:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e4a:	f642 3207 	movw	r2, #11015	; 0x2b07
 8006e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65358;
 8006e56:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e58:	f64f 724e 	movw	r2, #65358	; 0xff4e
 8006e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e64:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006e6a:	4814      	ldr	r0, [pc, #80]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e6c:	f003 fa2c 	bl	800a2c8 <HAL_TIM_Base_Init>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006e76:	f000 f967 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	4619      	mov	r1, r3
 8006e86:	480d      	ldr	r0, [pc, #52]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006e88:	f003 fc66 	bl	800a758 <HAL_TIM_ConfigClockSource>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006e92:	f000 f959 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e96:	2300      	movs	r3, #0
 8006e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4806      	ldr	r0, [pc, #24]	; (8006ebc <MX_TIM2_Init+0x98>)
 8006ea4:	f003 fe3c 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006eae:	f000 f94b 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006eb2:	bf00      	nop
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001764 	.word	0x20001764

08006ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	609a      	str	r2, [r3, #8]
 8006ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <MX_TIM4_Init+0x98>)
 8006ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5543;
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006ee4:	f241 52a7 	movw	r2, #5543	; 0x15a7
 8006ee8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eea:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64934;
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006ef2:	f64f 52a6 	movw	r2, #64934	; 0xfda6
 8006ef6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ef8:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006f04:	4813      	ldr	r0, [pc, #76]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006f06:	f003 f9df 	bl	800a2c8 <HAL_TIM_Base_Init>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8006f10:	f000 f91a 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006f1a:	f107 0308 	add.w	r3, r7, #8
 8006f1e:	4619      	mov	r1, r3
 8006f20:	480c      	ldr	r0, [pc, #48]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006f22:	f003 fc19 	bl	800a758 <HAL_TIM_ConfigClockSource>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8006f2c:	f000 f90c 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f30:	2300      	movs	r3, #0
 8006f32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f38:	463b      	mov	r3, r7
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <MX_TIM4_Init+0x94>)
 8006f3e:	f003 fdef 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8006f48:	f000 f8fe 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006f4c:	bf00      	nop
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	200017ac 	.word	0x200017ac
 8006f58:	40000800 	.word	0x40000800

08006f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f62:	4a12      	ldr	r2, [pc, #72]	; (8006fac <MX_USART1_UART_Init+0x50>)
 8006f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f66:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f82:	220c      	movs	r2, #12
 8006f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f92:	4805      	ldr	r0, [pc, #20]	; (8006fa8 <MX_USART1_UART_Init+0x4c>)
 8006f94:	f003 fe34 	bl	800ac00 <HAL_UART_Init>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006f9e:	f000 f8d3 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006fa2:	bf00      	nop
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200017f4 	.word	0x200017f4
 8006fac:	40013800 	.word	0x40013800

08006fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fb6:	4a12      	ldr	r2, [pc, #72]	; (8007000 <MX_USART2_UART_Init+0x50>)
 8006fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <MX_USART2_UART_Init+0x4c>)
 8006fe8:	f003 fe0a 	bl	800ac00 <HAL_UART_Init>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006ff2:	f000 f8a9 	bl	8007148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000183c 	.word	0x2000183c
 8007000:	40004400 	.word	0x40004400

08007004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800700a:	f107 0310 	add.w	r3, r7, #16
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	605a      	str	r2, [r3, #4]
 8007014:	609a      	str	r2, [r3, #8]
 8007016:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007018:	4b46      	ldr	r3, [pc, #280]	; (8007134 <MX_GPIO_Init+0x130>)
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	4a45      	ldr	r2, [pc, #276]	; (8007134 <MX_GPIO_Init+0x130>)
 800701e:	f043 0310 	orr.w	r3, r3, #16
 8007022:	6193      	str	r3, [r2, #24]
 8007024:	4b43      	ldr	r3, [pc, #268]	; (8007134 <MX_GPIO_Init+0x130>)
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007030:	4b40      	ldr	r3, [pc, #256]	; (8007134 <MX_GPIO_Init+0x130>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <MX_GPIO_Init+0x130>)
 8007036:	f043 0320 	orr.w	r3, r3, #32
 800703a:	6193      	str	r3, [r2, #24]
 800703c:	4b3d      	ldr	r3, [pc, #244]	; (8007134 <MX_GPIO_Init+0x130>)
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007048:	4b3a      	ldr	r3, [pc, #232]	; (8007134 <MX_GPIO_Init+0x130>)
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	4a39      	ldr	r2, [pc, #228]	; (8007134 <MX_GPIO_Init+0x130>)
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	6193      	str	r3, [r2, #24]
 8007054:	4b37      	ldr	r3, [pc, #220]	; (8007134 <MX_GPIO_Init+0x130>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007060:	4b34      	ldr	r3, [pc, #208]	; (8007134 <MX_GPIO_Init+0x130>)
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	4a33      	ldr	r2, [pc, #204]	; (8007134 <MX_GPIO_Init+0x130>)
 8007066:	f043 0308 	orr.w	r3, r3, #8
 800706a:	6193      	str	r3, [r2, #24]
 800706c:	4b31      	ldr	r3, [pc, #196]	; (8007134 <MX_GPIO_Init+0x130>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007078:	2200      	movs	r2, #0
 800707a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800707e:	482e      	ldr	r0, [pc, #184]	; (8007138 <MX_GPIO_Init+0x134>)
 8007080:	f001 fad5 	bl	800862e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8007084:	2200      	movs	r2, #0
 8007086:	2110      	movs	r1, #16
 8007088:	482c      	ldr	r0, [pc, #176]	; (800713c <MX_GPIO_Init+0x138>)
 800708a:	f001 fad0 	bl	800862e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 800708e:	2200      	movs	r2, #0
 8007090:	f641 3105 	movw	r1, #6917	; 0x1b05
 8007094:	482a      	ldr	r0, [pc, #168]	; (8007140 <MX_GPIO_Init+0x13c>)
 8007096:	f001 faca 	bl	800862e <HAL_GPIO_WritePin>
                          |RECEIIVE_Pin|SEND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800709a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800709e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070a8:	2302      	movs	r3, #2
 80070aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	4619      	mov	r1, r3
 80070b2:	4821      	ldr	r0, [pc, #132]	; (8007138 <MX_GPIO_Init+0x134>)
 80070b4:	f001 f864 	bl	8008180 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80070b8:	2310      	movs	r3, #16
 80070ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c4:	2302      	movs	r3, #2
 80070c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80070c8:	f107 0310 	add.w	r3, r7, #16
 80070cc:	4619      	mov	r1, r3
 80070ce:	481b      	ldr	r0, [pc, #108]	; (800713c <MX_GPIO_Init+0x138>)
 80070d0:	f001 f856 	bl	8008180 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin MODE_Pin RESET2_Pin SPI2_NSS_Pin
                           RECEIIVE_Pin SEND_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 80070d4:	f641 3305 	movw	r3, #6917	; 0x1b05
 80070d8:	613b      	str	r3, [r7, #16]
                          |RECEIIVE_Pin|SEND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070e2:	2302      	movs	r3, #2
 80070e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070e6:	f107 0310 	add.w	r3, r7, #16
 80070ea:	4619      	mov	r1, r3
 80070ec:	4814      	ldr	r0, [pc, #80]	; (8007140 <MX_GPIO_Init+0x13c>)
 80070ee:	f001 f847 	bl	8008180 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO_Pin DIO_2_Pin */
  GPIO_InitStruct.Pin = DIO_Pin|DIO_2_Pin;
 80070f2:	f240 4302 	movw	r3, #1026	; 0x402
 80070f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80070f8:	4b12      	ldr	r3, [pc, #72]	; (8007144 <MX_GPIO_Init+0x140>)
 80070fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	4619      	mov	r1, r3
 8007106:	480e      	ldr	r0, [pc, #56]	; (8007140 <MX_GPIO_Init+0x13c>)
 8007108:	f001 f83a 	bl	8008180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800710c:	2200      	movs	r2, #0
 800710e:	2102      	movs	r1, #2
 8007110:	2007      	movs	r0, #7
 8007112:	f000 fd3e 	bl	8007b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007116:	2007      	movs	r0, #7
 8007118:	f000 fd57 	bl	8007bca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800711c:	2200      	movs	r2, #0
 800711e:	2101      	movs	r1, #1
 8007120:	2028      	movs	r0, #40	; 0x28
 8007122:	f000 fd36 	bl	8007b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007126:	2028      	movs	r0, #40	; 0x28
 8007128:	f000 fd4f 	bl	8007bca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800712c:	bf00      	nop
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40021000 	.word	0x40021000
 8007138:	40011000 	.word	0x40011000
 800713c:	40010800 	.word	0x40010800
 8007140:	40010c00 	.word	0x40010c00
 8007144:	10110000 	.word	0x10110000

08007148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800714c:	b672      	cpsid	i
}
 800714e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007150:	e7fe      	b.n	8007150 <Error_Handler+0x8>

08007152 <copy_Array>:
 *      Author: quang
 */

#include "operation.h"

void copy_Array(uint8* a , uint8* b , uint32 size){
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
	// Start Position is the 4th of a
	uint8* prtA = a + 16 ;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3310      	adds	r3, #16
 8007162:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8007164:	2300      	movs	r3, #0
 8007166:	74fb      	strb	r3, [r7, #19]
 8007168:	e00a      	b.n	8007180 <copy_Array+0x2e>
		*(prtA++) = *(b++);
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	1c53      	adds	r3, r2, #1
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	6179      	str	r1, [r7, #20]
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 800717a:	7cfb      	ldrb	r3, [r7, #19]
 800717c:	3301      	adds	r3, #1
 800717e:	74fb      	strb	r3, [r7, #19]
 8007180:	7cfb      	ldrb	r3, [r7, #19]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d8f0      	bhi.n	800716a <copy_Array+0x18>
	}
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <copy_Array_BL>:
void copy_Array_BL(uint8* a , uint8* b , uint8 init_val, uint32 size){
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
	uint8* prtB = b + init_val ;
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	4413      	add	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 80071ac:	2300      	movs	r3, #0
 80071ae:	74fb      	strb	r3, [r7, #19]
 80071b0:	e00a      	b.n	80071c8 <copy_Array_BL+0x34>
		*(a++) = *(prtB++);
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	1c53      	adds	r3, r2, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	60f9      	str	r1, [r7, #12]
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 80071c2:	7cfb      	ldrb	r3, [r7, #19]
 80071c4:	3301      	adds	r3, #1
 80071c6:	74fb      	strb	r3, [r7, #19]
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d8f0      	bhi.n	80071b2 <copy_Array_BL+0x1e>
	}
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <clearDataBuffer>:


Return_Operation_t clearDataBuffer(uint8 *buffer , uint32 buffer_size){
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	// Clear buffer size
	memset(buffer, 0x00, buffer_size);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f005 f935 	bl	800c45a <memset>
	return DONE;
 80071f0:	2301      	movs	r3, #1
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_MspInit+0x5c>)
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <HAL_MspInit+0x5c>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6193      	str	r3, [r2, #24]
 800720e:	4b12      	ldr	r3, [pc, #72]	; (8007258 <HAL_MspInit+0x5c>)
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	60bb      	str	r3, [r7, #8]
 8007218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_MspInit+0x5c>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4a0e      	ldr	r2, [pc, #56]	; (8007258 <HAL_MspInit+0x5c>)
 8007220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007224:	61d3      	str	r3, [r2, #28]
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <HAL_MspInit+0x5c>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_MspInit+0x60>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <HAL_MspInit+0x60>)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	40021000 	.word	0x40021000
 800725c:	40010000 	.word	0x40010000

08007260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007268:	f107 0310 	add.w	r3, r7, #16
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	609a      	str	r2, [r3, #8]
 8007274:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <HAL_I2C_MspInit+0x70>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d123      	bne.n	80072c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007280:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 8007286:	f043 0308 	orr.w	r3, r3, #8
 800728a:	6193      	str	r3, [r2, #24]
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007298:	23c0      	movs	r3, #192	; 0xc0
 800729a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800729c:	2312      	movs	r3, #18
 800729e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072a0:	2303      	movs	r3, #3
 80072a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072a4:	f107 0310 	add.w	r3, r7, #16
 80072a8:	4619      	mov	r1, r3
 80072aa:	480b      	ldr	r0, [pc, #44]	; (80072d8 <HAL_I2C_MspInit+0x78>)
 80072ac:	f000 ff68 	bl	8008180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80072b0:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 80072b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072ba:	61d3      	str	r3, [r2, #28]
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <HAL_I2C_MspInit+0x74>)
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80072c8:	bf00      	nop
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40005400 	.word	0x40005400
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40010c00 	.word	0x40010c00

080072dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	f107 0318 	add.w	r3, r7, #24
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a37      	ldr	r2, [pc, #220]	; (80073d4 <HAL_SPI_MspInit+0xf8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d130      	bne.n	800735e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80072fc:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	4a35      	ldr	r2, [pc, #212]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007302:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007306:	6193      	str	r3, [r2, #24]
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007314:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 800731a:	f043 0304 	orr.w	r3, r3, #4
 800731e:	6193      	str	r3, [r2, #24]
 8007320:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800732c:	23a0      	movs	r3, #160	; 0xa0
 800732e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007330:	2302      	movs	r3, #2
 8007332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007334:	2303      	movs	r3, #3
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007338:	f107 0318 	add.w	r3, r7, #24
 800733c:	4619      	mov	r1, r3
 800733e:	4827      	ldr	r0, [pc, #156]	; (80073dc <HAL_SPI_MspInit+0x100>)
 8007340:	f000 ff1e 	bl	8008180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734c:	2300      	movs	r3, #0
 800734e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007350:	f107 0318 	add.w	r3, r7, #24
 8007354:	4619      	mov	r1, r3
 8007356:	4821      	ldr	r0, [pc, #132]	; (80073dc <HAL_SPI_MspInit+0x100>)
 8007358:	f000 ff12 	bl	8008180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800735c:	e036      	b.n	80073cc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <HAL_SPI_MspInit+0x104>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d131      	bne.n	80073cc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 800736e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007372:	61d3      	str	r3, [r2, #28]
 8007374:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 8007386:	f043 0308 	orr.w	r3, r3, #8
 800738a:	6193      	str	r3, [r2, #24]
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_SPI_MspInit+0xfc>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007398:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800739c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739e:	2302      	movs	r3, #2
 80073a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073a2:	2303      	movs	r3, #3
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a6:	f107 0318 	add.w	r3, r7, #24
 80073aa:	4619      	mov	r1, r3
 80073ac:	480d      	ldr	r0, [pc, #52]	; (80073e4 <HAL_SPI_MspInit+0x108>)
 80073ae:	f000 fee7 	bl	8008180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80073b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c0:	f107 0318 	add.w	r3, r7, #24
 80073c4:	4619      	mov	r1, r3
 80073c6:	4807      	ldr	r0, [pc, #28]	; (80073e4 <HAL_SPI_MspInit+0x108>)
 80073c8:	f000 feda 	bl	8008180 <HAL_GPIO_Init>
}
 80073cc:	bf00      	nop
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40013000 	.word	0x40013000
 80073d8:	40021000 	.word	0x40021000
 80073dc:	40010800 	.word	0x40010800
 80073e0:	40003800 	.word	0x40003800
 80073e4:	40010c00 	.word	0x40010c00

080073e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a23      	ldr	r2, [pc, #140]	; (8007484 <HAL_TIM_Base_MspInit+0x9c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d10c      	bne.n	8007414 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	4a22      	ldr	r2, [pc, #136]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007404:	6193      	str	r3, [r2, #24]
 8007406:	4b20      	ldr	r3, [pc, #128]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007412:	e032      	b.n	800747a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741c:	d114      	bne.n	8007448 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800741e:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4a19      	ldr	r2, [pc, #100]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	61d3      	str	r3, [r2, #28]
 800742a:	4b17      	ldr	r3, [pc, #92]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2103      	movs	r1, #3
 800743a:	201c      	movs	r0, #28
 800743c:	f000 fba9 	bl	8007b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007440:	201c      	movs	r0, #28
 8007442:	f000 fbc2 	bl	8007bca <HAL_NVIC_EnableIRQ>
}
 8007446:	e018      	b.n	800747a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0f      	ldr	r2, [pc, #60]	; (800748c <HAL_TIM_Base_MspInit+0xa4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4a0c      	ldr	r2, [pc, #48]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007458:	f043 0304 	orr.w	r3, r3, #4
 800745c:	61d3      	str	r3, [r2, #28]
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <HAL_TIM_Base_MspInit+0xa0>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	201e      	movs	r0, #30
 8007470:	f000 fb8f 	bl	8007b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007474:	201e      	movs	r0, #30
 8007476:	f000 fba8 	bl	8007bca <HAL_NVIC_EnableIRQ>
}
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40012c00 	.word	0x40012c00
 8007488:	40021000 	.word	0x40021000
 800748c:	40000800 	.word	0x40000800

08007490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0318 	add.w	r3, r7, #24
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <HAL_UART_MspInit+0x108>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d132      	bne.n	8007516 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074b0:	4b3a      	ldr	r3, [pc, #232]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	4a39      	ldr	r2, [pc, #228]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ba:	6193      	str	r3, [r2, #24]
 80074bc:	4b37      	ldr	r3, [pc, #220]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	4b34      	ldr	r3, [pc, #208]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	4a33      	ldr	r2, [pc, #204]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	6193      	str	r3, [r2, #24]
 80074d4:	4b31      	ldr	r3, [pc, #196]	; (800759c <HAL_UART_MspInit+0x10c>)
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e6:	2302      	movs	r3, #2
 80074e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ea:	2303      	movs	r3, #3
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	f107 0318 	add.w	r3, r7, #24
 80074f2:	4619      	mov	r1, r3
 80074f4:	482a      	ldr	r0, [pc, #168]	; (80075a0 <HAL_UART_MspInit+0x110>)
 80074f6:	f000 fe43 	bl	8008180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007504:	2300      	movs	r3, #0
 8007506:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007508:	f107 0318 	add.w	r3, r7, #24
 800750c:	4619      	mov	r1, r3
 800750e:	4824      	ldr	r0, [pc, #144]	; (80075a0 <HAL_UART_MspInit+0x110>)
 8007510:	f000 fe36 	bl	8008180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007514:	e03c      	b.n	8007590 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <HAL_UART_MspInit+0x114>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d137      	bne.n	8007590 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007520:	4b1e      	ldr	r3, [pc, #120]	; (800759c <HAL_UART_MspInit+0x10c>)
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4a1d      	ldr	r2, [pc, #116]	; (800759c <HAL_UART_MspInit+0x10c>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752a:	61d3      	str	r3, [r2, #28]
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <HAL_UART_MspInit+0x10c>)
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007538:	4b18      	ldr	r3, [pc, #96]	; (800759c <HAL_UART_MspInit+0x10c>)
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4a17      	ldr	r2, [pc, #92]	; (800759c <HAL_UART_MspInit+0x10c>)
 800753e:	f043 0304 	orr.w	r3, r3, #4
 8007542:	6193      	str	r3, [r2, #24]
 8007544:	4b15      	ldr	r3, [pc, #84]	; (800759c <HAL_UART_MspInit+0x10c>)
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007550:	2304      	movs	r3, #4
 8007552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007554:	2302      	movs	r3, #2
 8007556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007558:	2303      	movs	r3, #3
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755c:	f107 0318 	add.w	r3, r7, #24
 8007560:	4619      	mov	r1, r3
 8007562:	480f      	ldr	r0, [pc, #60]	; (80075a0 <HAL_UART_MspInit+0x110>)
 8007564:	f000 fe0c 	bl	8008180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007568:	2308      	movs	r3, #8
 800756a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	2300      	movs	r3, #0
 8007572:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007574:	f107 0318 	add.w	r3, r7, #24
 8007578:	4619      	mov	r1, r3
 800757a:	4809      	ldr	r0, [pc, #36]	; (80075a0 <HAL_UART_MspInit+0x110>)
 800757c:	f000 fe00 	bl	8008180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007580:	2200      	movs	r2, #0
 8007582:	2100      	movs	r1, #0
 8007584:	2026      	movs	r0, #38	; 0x26
 8007586:	f000 fb04 	bl	8007b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800758a:	2026      	movs	r0, #38	; 0x26
 800758c:	f000 fb1d 	bl	8007bca <HAL_NVIC_EnableIRQ>
}
 8007590:	bf00      	nop
 8007592:	3728      	adds	r7, #40	; 0x28
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40010800 	.word	0x40010800
 80075a4:	40004400 	.word	0x40004400

080075a8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a12      	ldr	r2, [pc, #72]	; (8007600 <HAL_UART_MspDeInit+0x58>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10b      	bne.n	80075d2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <HAL_UART_MspDeInit+0x5c>)
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	4a11      	ldr	r2, [pc, #68]	; (8007604 <HAL_UART_MspDeInit+0x5c>)
 80075c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80075c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075ca:	480f      	ldr	r0, [pc, #60]	; (8007608 <HAL_UART_MspDeInit+0x60>)
 80075cc:	f000 ff5c 	bl	8008488 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80075d0:	e011      	b.n	80075f6 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0d      	ldr	r2, [pc, #52]	; (800760c <HAL_UART_MspDeInit+0x64>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10c      	bne.n	80075f6 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <HAL_UART_MspDeInit+0x5c>)
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <HAL_UART_MspDeInit+0x5c>)
 80075e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075e6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80075e8:	210c      	movs	r1, #12
 80075ea:	4807      	ldr	r0, [pc, #28]	; (8007608 <HAL_UART_MspDeInit+0x60>)
 80075ec:	f000 ff4c 	bl	8008488 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80075f0:	2026      	movs	r0, #38	; 0x26
 80075f2:	f000 faf8 	bl	8007be6 <HAL_NVIC_DisableIRQ>
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40013800 	.word	0x40013800
 8007604:	40021000 	.word	0x40021000
 8007608:	40010800 	.word	0x40010800
 800760c:	40004400 	.word	0x40004400

08007610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007614:	e7fe      	b.n	8007614 <NMI_Handler+0x4>

08007616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007616:	b480      	push	{r7}
 8007618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800761a:	e7fe      	b.n	800761a <HardFault_Handler+0x4>

0800761c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007620:	e7fe      	b.n	8007620 <MemManage_Handler+0x4>

08007622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007626:	e7fe      	b.n	8007626 <BusFault_Handler+0x4>

08007628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800762c:	e7fe      	b.n	800762c <UsageFault_Handler+0x4>

0800762e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800762e:	b480      	push	{r7}
 8007630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007632:	bf00      	nop
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr

0800763a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800763a:	b480      	push	{r7}
 800763c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr

08007646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007646:	b480      	push	{r7}
 8007648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800764a:	bf00      	nop
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007656:	f000 f961 	bl	800791c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}

0800765e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO_Pin);
 8007662:	2002      	movs	r0, #2
 8007664:	f001 f814 	bl	8008690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007668:	bf00      	nop
 800766a:	bd80      	pop	{r7, pc}

0800766c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007670:	4802      	ldr	r0, [pc, #8]	; (800767c <TIM2_IRQHandler+0x10>)
 8007672:	f002 ff69 	bl	800a548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007676:	bf00      	nop
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20001764 	.word	0x20001764

08007680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007684:	4802      	ldr	r0, [pc, #8]	; (8007690 <TIM4_IRQHandler+0x10>)
 8007686:	f002 ff5f 	bl	800a548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200017ac 	.word	0x200017ac

08007694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007698:	4802      	ldr	r0, [pc, #8]	; (80076a4 <USART2_IRQHandler+0x10>)
 800769a:	f003 fbdb 	bl	800ae54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800769e:	bf00      	nop
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	2000183c 	.word	0x2000183c

080076a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO_2_Pin);
 80076ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80076b0:	f000 ffee 	bl	8008690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80076b4:	bf00      	nop
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return 1;
 80076bc:	2301      	movs	r3, #1
}
 80076be:	4618      	mov	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <_kill>:

int _kill(int pid, int sig)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80076d0:	f004 ff16 	bl	800c500 <__errno>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2216      	movs	r2, #22
 80076d8:	601a      	str	r2, [r3, #0]
  return -1;
 80076da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_exit>:

void _exit (int status)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80076ee:	f04f 31ff 	mov.w	r1, #4294967295
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff ffe7 	bl	80076c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80076f8:	e7fe      	b.n	80076f8 <_exit+0x12>

080076fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e00a      	b.n	8007722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800770c:	f3af 8000 	nop.w
 8007710:	4601      	mov	r1, r0
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	60ba      	str	r2, [r7, #8]
 8007718:	b2ca      	uxtb	r2, r1
 800771a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3301      	adds	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	dbf0      	blt.n	800770c <_read+0x12>
  }

  return len;
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e009      	b.n	800775a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	60ba      	str	r2, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3301      	adds	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	429a      	cmp	r2, r3
 8007760:	dbf1      	blt.n	8007746 <_write+0x12>
  }
  return len;
 8007762:	687b      	ldr	r3, [r7, #4]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <_close>:

int _close(int file)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007792:	605a      	str	r2, [r3, #4]
  return 0;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <_isatty>:

int _isatty(int file)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80077a8:	2301      	movs	r3, #1
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr

080077b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077d4:	4a14      	ldr	r2, [pc, #80]	; (8007828 <_sbrk+0x5c>)
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <_sbrk+0x60>)
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <_sbrk+0x64>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <_sbrk+0x64>)
 80077ea:	4a12      	ldr	r2, [pc, #72]	; (8007834 <_sbrk+0x68>)
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <_sbrk+0x64>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d207      	bcs.n	800780c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077fc:	f004 fe80 	bl	800c500 <__errno>
 8007800:	4603      	mov	r3, r0
 8007802:	220c      	movs	r2, #12
 8007804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
 800780a:	e009      	b.n	8007820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <_sbrk+0x64>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <_sbrk+0x64>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	4a05      	ldr	r2, [pc, #20]	; (8007830 <_sbrk+0x64>)
 800781c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20005000 	.word	0x20005000
 800782c:	00000400 	.word	0x00000400
 8007830:	20001afc 	.word	0x20001afc
 8007834:	20001c78 	.word	0x20001c78

08007838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800783c:	bf00      	nop
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr

08007844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007844:	f7ff fff8 	bl	8007838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007848:	480b      	ldr	r0, [pc, #44]	; (8007878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800784a:	490c      	ldr	r1, [pc, #48]	; (800787c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800784e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007850:	e002      	b.n	8007858 <LoopCopyDataInit>

08007852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007856:	3304      	adds	r3, #4

08007858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800785a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800785c:	d3f9      	bcc.n	8007852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007860:	4c09      	ldr	r4, [pc, #36]	; (8007888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007864:	e001      	b.n	800786a <LoopFillZerobss>

08007866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007868:	3204      	adds	r2, #4

0800786a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800786a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800786c:	d3fb      	bcc.n	8007866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800786e:	f004 fe4d 	bl	800c50c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007872:	f7ff f89f 	bl	80069b4 <main>
  bx lr
 8007876:	4770      	bx	lr
  ldr r0, =_sdata
 8007878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800787c:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8007880:	08011280 	.word	0x08011280
  ldr r2, =_sbss
 8007884:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8007888:	20001c74 	.word	0x20001c74

0800788c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800788c:	e7fe      	b.n	800788c <ADC1_2_IRQHandler>
	...

08007890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_Init+0x28>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <HAL_Init+0x28>)
 800789a:	f043 0310 	orr.w	r3, r3, #16
 800789e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078a0:	2003      	movs	r0, #3
 80078a2:	f000 f96b 	bl	8007b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078a6:	200f      	movs	r0, #15
 80078a8:	f000 f808 	bl	80078bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078ac:	f7ff fca6 	bl	80071fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40022000 	.word	0x40022000

080078bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <HAL_InitTick+0x54>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b12      	ldr	r3, [pc, #72]	; (8007914 <HAL_InitTick+0x58>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f991 	bl	8007c02 <HAL_SYSTICK_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e00e      	b.n	8007908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d80a      	bhi.n	8007906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078f0:	2200      	movs	r2, #0
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	f000 f94b 	bl	8007b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078fc:	4a06      	ldr	r2, [pc, #24]	; (8007918 <HAL_InitTick+0x5c>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	200000ac 	.word	0x200000ac
 8007914:	200000b4 	.word	0x200000b4
 8007918:	200000b0 	.word	0x200000b0

0800791c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <HAL_IncTick+0x1c>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_IncTick+0x20>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4413      	add	r3, r2
 800792c:	4a03      	ldr	r2, [pc, #12]	; (800793c <HAL_IncTick+0x20>)
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr
 8007938:	200000b4 	.word	0x200000b4
 800793c:	20001b00 	.word	0x20001b00

08007940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return uwTick;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <HAL_GetTick+0x10>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	20001b00 	.word	0x20001b00

08007954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800795c:	f7ff fff0 	bl	8007940 <HAL_GetTick>
 8007960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d005      	beq.n	800797a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <HAL_Delay+0x44>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800797a:	bf00      	nop
 800797c:	f7ff ffe0 	bl	8007940 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d8f7      	bhi.n	800797c <HAL_Delay+0x28>
  {
  }
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200000b4 	.word	0x200000b4

0800799c <__NVIC_SetPriorityGrouping>:
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <__NVIC_SetPriorityGrouping+0x44>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079b8:	4013      	ands	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079ce:	4a04      	ldr	r2, [pc, #16]	; (80079e0 <__NVIC_SetPriorityGrouping+0x44>)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	60d3      	str	r3, [r2, #12]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000ed00 	.word	0xe000ed00

080079e4 <__NVIC_GetPriorityGrouping>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__NVIC_GetPriorityGrouping+0x18>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	f003 0307 	and.w	r3, r3, #7
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	e000ed00 	.word	0xe000ed00

08007a00 <__NVIC_EnableIRQ>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db0b      	blt.n	8007a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	f003 021f 	and.w	r2, r3, #31
 8007a18:	4906      	ldr	r1, [pc, #24]	; (8007a34 <__NVIC_EnableIRQ+0x34>)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2001      	movs	r0, #1
 8007a22:	fa00 f202 	lsl.w	r2, r0, r2
 8007a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr
 8007a34:	e000e100 	.word	0xe000e100

08007a38 <__NVIC_DisableIRQ>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	db12      	blt.n	8007a70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	f003 021f 	and.w	r2, r3, #31
 8007a50:	490a      	ldr	r1, [pc, #40]	; (8007a7c <__NVIC_DisableIRQ+0x44>)
 8007a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	2001      	movs	r0, #1
 8007a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8007a5e:	3320      	adds	r3, #32
 8007a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a64:	f3bf 8f4f 	dsb	sy
}
 8007a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a6a:	f3bf 8f6f 	isb	sy
}
 8007a6e:	bf00      	nop
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	e000e100 	.word	0xe000e100

08007a80 <__NVIC_SetPriority>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db0a      	blt.n	8007aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	490c      	ldr	r1, [pc, #48]	; (8007acc <__NVIC_SetPriority+0x4c>)
 8007a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9e:	0112      	lsls	r2, r2, #4
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007aa8:	e00a      	b.n	8007ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	4908      	ldr	r1, [pc, #32]	; (8007ad0 <__NVIC_SetPriority+0x50>)
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	3b04      	subs	r3, #4
 8007ab8:	0112      	lsls	r2, r2, #4
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	440b      	add	r3, r1
 8007abe:	761a      	strb	r2, [r3, #24]
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	e000e100 	.word	0xe000e100
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <NVIC_EncodePriority>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b089      	sub	sp, #36	; 0x24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f1c3 0307 	rsb	r3, r3, #7
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	bf28      	it	cs
 8007af2:	2304      	movcs	r3, #4
 8007af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d902      	bls.n	8007b04 <NVIC_EncodePriority+0x30>
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3b03      	subs	r3, #3
 8007b02:	e000      	b.n	8007b06 <NVIC_EncodePriority+0x32>
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43da      	mvns	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	401a      	ands	r2, r3
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	fa01 f303 	lsl.w	r3, r1, r3
 8007b26:	43d9      	mvns	r1, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b2c:	4313      	orrs	r3, r2
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3724      	adds	r7, #36	; 0x24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b48:	d301      	bcc.n	8007b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e00f      	b.n	8007b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b4e:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <SysTick_Config+0x40>)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b56:	210f      	movs	r1, #15
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	f7ff ff90 	bl	8007a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <SysTick_Config+0x40>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b66:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <SysTick_Config+0x40>)
 8007b68:	2207      	movs	r2, #7
 8007b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	e000e010 	.word	0xe000e010

08007b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff ff09 	bl	800799c <__NVIC_SetPriorityGrouping>
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	4603      	mov	r3, r0
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ba4:	f7ff ff1e 	bl	80079e4 <__NVIC_GetPriorityGrouping>
 8007ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	6978      	ldr	r0, [r7, #20]
 8007bb0:	f7ff ff90 	bl	8007ad4 <NVIC_EncodePriority>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff ff5f 	bl	8007a80 <__NVIC_SetPriority>
}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff ff11 	bl	8007a00 <__NVIC_EnableIRQ>
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	4603      	mov	r3, r0
 8007bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff ff1f 	bl	8007a38 <__NVIC_DisableIRQ>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff ff94 	bl	8007b38 <SysTick_Config>
 8007c10:	4603      	mov	r3, r0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d008      	beq.n	8007c44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2204      	movs	r2, #4
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e020      	b.n	8007c86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 020e 	bic.w	r2, r2, #14
 8007c52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d005      	beq.n	8007cb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2204      	movs	r2, #4
 8007cac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
 8007cb2:	e051      	b.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 020e 	bic.w	r2, r2, #14
 8007cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a22      	ldr	r2, [pc, #136]	; (8007d64 <HAL_DMA_Abort_IT+0xd4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d029      	beq.n	8007d32 <HAL_DMA_Abort_IT+0xa2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <HAL_DMA_Abort_IT+0xd8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d022      	beq.n	8007d2e <HAL_DMA_Abort_IT+0x9e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1f      	ldr	r2, [pc, #124]	; (8007d6c <HAL_DMA_Abort_IT+0xdc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01a      	beq.n	8007d28 <HAL_DMA_Abort_IT+0x98>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <HAL_DMA_Abort_IT+0xe0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d012      	beq.n	8007d22 <HAL_DMA_Abort_IT+0x92>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_DMA_Abort_IT+0xe4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00a      	beq.n	8007d1c <HAL_DMA_Abort_IT+0x8c>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_DMA_Abort_IT+0xe8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d102      	bne.n	8007d16 <HAL_DMA_Abort_IT+0x86>
 8007d10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d14:	e00e      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d1a:	e00b      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d20:	e008      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d26:	e005      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d2c:	e002      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d2e:	2310      	movs	r3, #16
 8007d30:	e000      	b.n	8007d34 <HAL_DMA_Abort_IT+0xa4>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4a11      	ldr	r2, [pc, #68]	; (8007d7c <HAL_DMA_Abort_IT+0xec>)
 8007d36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
    } 
  }
  return status;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40020008 	.word	0x40020008
 8007d68:	4002001c 	.word	0x4002001c
 8007d6c:	40020030 	.word	0x40020030
 8007d70:	40020044 	.word	0x40020044
 8007d74:	40020058 	.word	0x40020058
 8007d78:	4002006c 	.word	0x4002006c
 8007d7c:	40020000 	.word	0x40020000

08007d80 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d9a:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <HAL_FLASH_Program+0xd8>)
 8007d9c:	7e1b      	ldrb	r3, [r3, #24]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_FLASH_Program+0x26>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e054      	b.n	8007e50 <HAL_FLASH_Program+0xd0>
 8007da6:	4b2c      	ldr	r3, [pc, #176]	; (8007e58 <HAL_FLASH_Program+0xd8>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007db0:	f000 f8a8 	bl	8007f04 <FLASH_WaitForLastOperation>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d144      	bne.n	8007e48 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d102      	bne.n	8007dca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	757b      	strb	r3, [r7, #21]
 8007dc8:	e007      	b.n	8007dda <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d102      	bne.n	8007dd6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	757b      	strb	r3, [r7, #21]
 8007dd4:	e001      	b.n	8007dda <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8007dd6:	2304      	movs	r3, #4
 8007dd8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75bb      	strb	r3, [r7, #22]
 8007dde:	e02d      	b.n	8007e3c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007de0:	7dbb      	ldrb	r3, [r7, #22]
 8007de2:	005a      	lsls	r2, r3, #1
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	eb02 0c03 	add.w	ip, r2, r3
 8007dea:	7dbb      	ldrb	r3, [r7, #22]
 8007dec:	0119      	lsls	r1, r3, #4
 8007dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df2:	f1c1 0620 	rsb	r6, r1, #32
 8007df6:	f1a1 0020 	sub.w	r0, r1, #32
 8007dfa:	fa22 f401 	lsr.w	r4, r2, r1
 8007dfe:	fa03 f606 	lsl.w	r6, r3, r6
 8007e02:	4334      	orrs	r4, r6
 8007e04:	fa23 f000 	lsr.w	r0, r3, r0
 8007e08:	4304      	orrs	r4, r0
 8007e0a:	fa23 f501 	lsr.w	r5, r3, r1
 8007e0e:	b2a3      	uxth	r3, r4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4660      	mov	r0, ip
 8007e14:	f000 f85a 	bl	8007ecc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e1c:	f000 f872 	bl	8007f04 <FLASH_WaitForLastOperation>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e24:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <HAL_FLASH_Program+0xdc>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	4a0c      	ldr	r2, [pc, #48]	; (8007e5c <HAL_FLASH_Program+0xdc>)
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d107      	bne.n	8007e46 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007e36:	7dbb      	ldrb	r3, [r7, #22]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	75bb      	strb	r3, [r7, #22]
 8007e3c:	7dba      	ldrb	r2, [r7, #22]
 8007e3e:	7d7b      	ldrb	r3, [r7, #21]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d3cd      	bcc.n	8007de0 <HAL_FLASH_Program+0x60>
 8007e44:	e000      	b.n	8007e48 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007e46:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e48:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <HAL_FLASH_Program+0xd8>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	761a      	strb	r2, [r3, #24]

  return status;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e58:	20001b08 	.word	0x20001b08
 8007e5c:	40022000 	.word	0x40022000

08007e60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <HAL_FLASH_Unlock+0x40>)
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_FLASH_Unlock+0x40>)
 8007e78:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <HAL_FLASH_Unlock+0x44>)
 8007e7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007e7c:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <HAL_FLASH_Unlock+0x40>)
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_FLASH_Unlock+0x48>)
 8007e80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e82:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <HAL_FLASH_Unlock+0x40>)
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007e92:	79fb      	ldrb	r3, [r7, #7]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40022000 	.word	0x40022000
 8007ea4:	45670123 	.word	0x45670123
 8007ea8:	cdef89ab 	.word	0xcdef89ab

08007eac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <HAL_FLASH_Lock+0x1c>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4a04      	ldr	r2, [pc, #16]	; (8007ec8 <HAL_FLASH_Lock+0x1c>)
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40022000 	.word	0x40022000

08007ecc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ed8:	4b08      	ldr	r3, [pc, #32]	; (8007efc <FLASH_Program_HalfWord+0x30>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007ede:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <FLASH_Program_HalfWord+0x34>)
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4a07      	ldr	r2, [pc, #28]	; (8007f00 <FLASH_Program_HalfWord+0x34>)
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	887a      	ldrh	r2, [r7, #2]
 8007eee:	801a      	strh	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20001b08 	.word	0x20001b08
 8007f00:	40022000 	.word	0x40022000

08007f04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007f0c:	f7ff fd18 	bl	8007940 <HAL_GetTick>
 8007f10:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007f12:	e010      	b.n	8007f36 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d00c      	beq.n	8007f36 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <FLASH_WaitForLastOperation+0x2e>
 8007f22:	f7ff fd0d 	bl	8007940 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d201      	bcs.n	8007f36 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e025      	b.n	8007f82 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007f36:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e8      	bne.n	8007f14 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f50:	2220      	movs	r2, #32
 8007f52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007f6c:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <FLASH_WaitForLastOperation+0x88>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007f78:	f000 f80a 	bl	8007f90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40022000 	.word	0x40022000

08007f90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007f9a:	4b23      	ldr	r3, [pc, #140]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007fa6:	4b21      	ldr	r3, [pc, #132]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f043 0302 	orr.w	r3, r3, #2
 8007fae:	4a1f      	ldr	r2, [pc, #124]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007fb0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f043 0310 	orr.w	r3, r3, #16
 8007fb8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007fc6:	4b19      	ldr	r3, [pc, #100]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	4a17      	ldr	r2, [pc, #92]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007fd0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f043 0304 	orr.w	r3, r3, #4
 8007fd8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f043 0304 	orr.w	r3, r3, #4
 8007fee:	4a0f      	ldr	r2, [pc, #60]	; (800802c <FLASH_SetErrorCode+0x9c>)
 8007ff0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f240 1201 	movw	r2, #257	; 0x101
 8008004:	4293      	cmp	r3, r2
 8008006:	d106      	bne.n	8008016 <FLASH_SetErrorCode+0x86>
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <FLASH_SetErrorCode+0x98>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4a06      	ldr	r2, [pc, #24]	; (8008028 <FLASH_SetErrorCode+0x98>)
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	61d3      	str	r3, [r2, #28]
}  
 8008014:	e002      	b.n	800801c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008016:	4a04      	ldr	r2, [pc, #16]	; (8008028 <FLASH_SetErrorCode+0x98>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60d3      	str	r3, [r2, #12]
}  
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40022000 	.word	0x40022000
 800802c:	20001b08 	.word	0x20001b08

08008030 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008042:	4b2f      	ldr	r3, [pc, #188]	; (8008100 <HAL_FLASHEx_Erase+0xd0>)
 8008044:	7e1b      	ldrb	r3, [r3, #24]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_FLASHEx_Erase+0x1e>
 800804a:	2302      	movs	r3, #2
 800804c:	e053      	b.n	80080f6 <HAL_FLASHEx_Erase+0xc6>
 800804e:	4b2c      	ldr	r3, [pc, #176]	; (8008100 <HAL_FLASHEx_Erase+0xd0>)
 8008050:	2201      	movs	r2, #1
 8008052:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d116      	bne.n	800808a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800805c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008060:	f7ff ff50 	bl	8007f04 <FLASH_WaitForLastOperation>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d141      	bne.n	80080ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800806a:	2001      	movs	r0, #1
 800806c:	f000 f84c 	bl	8008108 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008070:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008074:	f7ff ff46 	bl	8007f04 <FLASH_WaitForLastOperation>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800807c:	4b21      	ldr	r3, [pc, #132]	; (8008104 <HAL_FLASHEx_Erase+0xd4>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	4a20      	ldr	r2, [pc, #128]	; (8008104 <HAL_FLASHEx_Erase+0xd4>)
 8008082:	f023 0304 	bic.w	r3, r3, #4
 8008086:	6113      	str	r3, [r2, #16]
 8008088:	e031      	b.n	80080ee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800808a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800808e:	f7ff ff39 	bl	8007f04 <FLASH_WaitForLastOperation>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d12a      	bne.n	80080ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	e019      	b.n	80080dc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80080a8:	68b8      	ldr	r0, [r7, #8]
 80080aa:	f000 f849 	bl	8008140 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80080b2:	f7ff ff27 	bl	8007f04 <FLASH_WaitForLastOperation>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <HAL_FLASHEx_Erase+0xd4>)
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	4a11      	ldr	r2, [pc, #68]	; (8008104 <HAL_FLASHEx_Erase+0xd4>)
 80080c0:	f023 0302 	bic.w	r3, r3, #2
 80080c4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	601a      	str	r2, [r3, #0]
            break;
 80080d2:	e00c      	b.n	80080ee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080da:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	029a      	lsls	r2, r3, #10
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	4413      	add	r3, r2
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d3dc      	bcc.n	80080a8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <HAL_FLASHEx_Erase+0xd0>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	761a      	strb	r2, [r3, #24]

  return status;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20001b08 	.word	0x20001b08
 8008104:	40022000 	.word	0x40022000

08008108 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008110:	4b09      	ldr	r3, [pc, #36]	; (8008138 <FLASH_MassErase+0x30>)
 8008112:	2200      	movs	r2, #0
 8008114:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <FLASH_MassErase+0x34>)
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <FLASH_MassErase+0x34>)
 800811c:	f043 0304 	orr.w	r3, r3, #4
 8008120:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <FLASH_MassErase+0x34>)
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	4a05      	ldr	r2, [pc, #20]	; (800813c <FLASH_MassErase+0x34>)
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr
 8008138:	20001b08 	.word	0x20001b08
 800813c:	40022000 	.word	0x40022000

08008140 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008148:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <FLASH_PageErase+0x38>)
 800814a:	2200      	movs	r2, #0
 800814c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800814e:	4b0b      	ldr	r3, [pc, #44]	; (800817c <FLASH_PageErase+0x3c>)
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	4a0a      	ldr	r2, [pc, #40]	; (800817c <FLASH_PageErase+0x3c>)
 8008154:	f043 0302 	orr.w	r3, r3, #2
 8008158:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800815a:	4a08      	ldr	r2, [pc, #32]	; (800817c <FLASH_PageErase+0x3c>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <FLASH_PageErase+0x3c>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	4a05      	ldr	r2, [pc, #20]	; (800817c <FLASH_PageErase+0x3c>)
 8008166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20001b08 	.word	0x20001b08
 800817c:	40022000 	.word	0x40022000

08008180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008180:	b480      	push	{r7}
 8008182:	b08b      	sub	sp, #44	; 0x2c
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800818a:	2300      	movs	r3, #0
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800818e:	2300      	movs	r3, #0
 8008190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008192:	e169      	b.n	8008468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008194:	2201      	movs	r2, #1
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	4013      	ands	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	f040 8158 	bne.w	8008462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4a9a      	ldr	r2, [pc, #616]	; (8008420 <HAL_GPIO_Init+0x2a0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d05e      	beq.n	800827a <HAL_GPIO_Init+0xfa>
 80081bc:	4a98      	ldr	r2, [pc, #608]	; (8008420 <HAL_GPIO_Init+0x2a0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d875      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081c2:	4a98      	ldr	r2, [pc, #608]	; (8008424 <HAL_GPIO_Init+0x2a4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d058      	beq.n	800827a <HAL_GPIO_Init+0xfa>
 80081c8:	4a96      	ldr	r2, [pc, #600]	; (8008424 <HAL_GPIO_Init+0x2a4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d86f      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081ce:	4a96      	ldr	r2, [pc, #600]	; (8008428 <HAL_GPIO_Init+0x2a8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d052      	beq.n	800827a <HAL_GPIO_Init+0xfa>
 80081d4:	4a94      	ldr	r2, [pc, #592]	; (8008428 <HAL_GPIO_Init+0x2a8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d869      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081da:	4a94      	ldr	r2, [pc, #592]	; (800842c <HAL_GPIO_Init+0x2ac>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d04c      	beq.n	800827a <HAL_GPIO_Init+0xfa>
 80081e0:	4a92      	ldr	r2, [pc, #584]	; (800842c <HAL_GPIO_Init+0x2ac>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d863      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081e6:	4a92      	ldr	r2, [pc, #584]	; (8008430 <HAL_GPIO_Init+0x2b0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d046      	beq.n	800827a <HAL_GPIO_Init+0xfa>
 80081ec:	4a90      	ldr	r2, [pc, #576]	; (8008430 <HAL_GPIO_Init+0x2b0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d85d      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081f2:	2b12      	cmp	r3, #18
 80081f4:	d82a      	bhi.n	800824c <HAL_GPIO_Init+0xcc>
 80081f6:	2b12      	cmp	r3, #18
 80081f8:	d859      	bhi.n	80082ae <HAL_GPIO_Init+0x12e>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <HAL_GPIO_Init+0x80>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	0800827b 	.word	0x0800827b
 8008204:	08008255 	.word	0x08008255
 8008208:	08008267 	.word	0x08008267
 800820c:	080082a9 	.word	0x080082a9
 8008210:	080082af 	.word	0x080082af
 8008214:	080082af 	.word	0x080082af
 8008218:	080082af 	.word	0x080082af
 800821c:	080082af 	.word	0x080082af
 8008220:	080082af 	.word	0x080082af
 8008224:	080082af 	.word	0x080082af
 8008228:	080082af 	.word	0x080082af
 800822c:	080082af 	.word	0x080082af
 8008230:	080082af 	.word	0x080082af
 8008234:	080082af 	.word	0x080082af
 8008238:	080082af 	.word	0x080082af
 800823c:	080082af 	.word	0x080082af
 8008240:	080082af 	.word	0x080082af
 8008244:	0800825d 	.word	0x0800825d
 8008248:	08008271 	.word	0x08008271
 800824c:	4a79      	ldr	r2, [pc, #484]	; (8008434 <HAL_GPIO_Init+0x2b4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008252:	e02c      	b.n	80082ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	623b      	str	r3, [r7, #32]
          break;
 800825a:	e029      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	3304      	adds	r3, #4
 8008262:	623b      	str	r3, [r7, #32]
          break;
 8008264:	e024      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	3308      	adds	r3, #8
 800826c:	623b      	str	r3, [r7, #32]
          break;
 800826e:	e01f      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	330c      	adds	r3, #12
 8008276:	623b      	str	r3, [r7, #32]
          break;
 8008278:	e01a      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008282:	2304      	movs	r3, #4
 8008284:	623b      	str	r3, [r7, #32]
          break;
 8008286:	e013      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d105      	bne.n	800829c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008290:	2308      	movs	r3, #8
 8008292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	611a      	str	r2, [r3, #16]
          break;
 800829a:	e009      	b.n	80082b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800829c:	2308      	movs	r3, #8
 800829e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	615a      	str	r2, [r3, #20]
          break;
 80082a6:	e003      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80082a8:	2300      	movs	r3, #0
 80082aa:	623b      	str	r3, [r7, #32]
          break;
 80082ac:	e000      	b.n	80082b0 <HAL_GPIO_Init+0x130>
          break;
 80082ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	d801      	bhi.n	80082ba <HAL_GPIO_Init+0x13a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	e001      	b.n	80082be <HAL_GPIO_Init+0x13e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3304      	adds	r3, #4
 80082be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2bff      	cmp	r3, #255	; 0xff
 80082c4:	d802      	bhi.n	80082cc <HAL_GPIO_Init+0x14c>
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	e002      	b.n	80082d2 <HAL_GPIO_Init+0x152>
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	3b08      	subs	r3, #8
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	210f      	movs	r1, #15
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	fa01 f303 	lsl.w	r3, r1, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	6a39      	ldr	r1, [r7, #32]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	431a      	orrs	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 80b1 	beq.w	8008462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008300:	4b4d      	ldr	r3, [pc, #308]	; (8008438 <HAL_GPIO_Init+0x2b8>)
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	4a4c      	ldr	r2, [pc, #304]	; (8008438 <HAL_GPIO_Init+0x2b8>)
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	6193      	str	r3, [r2, #24]
 800830c:	4b4a      	ldr	r3, [pc, #296]	; (8008438 <HAL_GPIO_Init+0x2b8>)
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008318:	4a48      	ldr	r2, [pc, #288]	; (800843c <HAL_GPIO_Init+0x2bc>)
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	089b      	lsrs	r3, r3, #2
 800831e:	3302      	adds	r3, #2
 8008320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	220f      	movs	r2, #15
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a40      	ldr	r2, [pc, #256]	; (8008440 <HAL_GPIO_Init+0x2c0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d013      	beq.n	800836c <HAL_GPIO_Init+0x1ec>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a3f      	ldr	r2, [pc, #252]	; (8008444 <HAL_GPIO_Init+0x2c4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00d      	beq.n	8008368 <HAL_GPIO_Init+0x1e8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <HAL_GPIO_Init+0x2c8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <HAL_GPIO_Init+0x1e4>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a3d      	ldr	r2, [pc, #244]	; (800844c <HAL_GPIO_Init+0x2cc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d101      	bne.n	8008360 <HAL_GPIO_Init+0x1e0>
 800835c:	2303      	movs	r3, #3
 800835e:	e006      	b.n	800836e <HAL_GPIO_Init+0x1ee>
 8008360:	2304      	movs	r3, #4
 8008362:	e004      	b.n	800836e <HAL_GPIO_Init+0x1ee>
 8008364:	2302      	movs	r3, #2
 8008366:	e002      	b.n	800836e <HAL_GPIO_Init+0x1ee>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <HAL_GPIO_Init+0x1ee>
 800836c:	2300      	movs	r3, #0
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	f002 0203 	and.w	r2, r2, #3
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4093      	lsls	r3, r2
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800837e:	492f      	ldr	r1, [pc, #188]	; (800843c <HAL_GPIO_Init+0x2bc>)
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	089b      	lsrs	r3, r3, #2
 8008384:	3302      	adds	r3, #2
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008398:	4b2d      	ldr	r3, [pc, #180]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	492c      	ldr	r1, [pc, #176]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	608b      	str	r3, [r1, #8]
 80083a4:	e006      	b.n	80083b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80083a6:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	43db      	mvns	r3, r3
 80083ae:	4928      	ldr	r1, [pc, #160]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80083c0:	4b23      	ldr	r3, [pc, #140]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	4922      	ldr	r1, [pc, #136]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60cb      	str	r3, [r1, #12]
 80083cc:	e006      	b.n	80083dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	43db      	mvns	r3, r3
 80083d6:	491e      	ldr	r1, [pc, #120]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083d8:	4013      	ands	r3, r2
 80083da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80083e8:	4b19      	ldr	r3, [pc, #100]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	4918      	ldr	r1, [pc, #96]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	604b      	str	r3, [r1, #4]
 80083f4:	e006      	b.n	8008404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80083f6:	4b16      	ldr	r3, [pc, #88]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	43db      	mvns	r3, r3
 80083fe:	4914      	ldr	r1, [pc, #80]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 8008400:	4013      	ands	r3, r2
 8008402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d021      	beq.n	8008454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	490e      	ldr	r1, [pc, #56]	; (8008450 <HAL_GPIO_Init+0x2d0>)
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	4313      	orrs	r3, r2
 800841a:	600b      	str	r3, [r1, #0]
 800841c:	e021      	b.n	8008462 <HAL_GPIO_Init+0x2e2>
 800841e:	bf00      	nop
 8008420:	10320000 	.word	0x10320000
 8008424:	10310000 	.word	0x10310000
 8008428:	10220000 	.word	0x10220000
 800842c:	10210000 	.word	0x10210000
 8008430:	10120000 	.word	0x10120000
 8008434:	10110000 	.word	0x10110000
 8008438:	40021000 	.word	0x40021000
 800843c:	40010000 	.word	0x40010000
 8008440:	40010800 	.word	0x40010800
 8008444:	40010c00 	.word	0x40010c00
 8008448:	40011000 	.word	0x40011000
 800844c:	40011400 	.word	0x40011400
 8008450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <HAL_GPIO_Init+0x304>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	43db      	mvns	r3, r3
 800845c:	4909      	ldr	r1, [pc, #36]	; (8008484 <HAL_GPIO_Init+0x304>)
 800845e:	4013      	ands	r3, r2
 8008460:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	3301      	adds	r3, #1
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	f47f ae8e 	bne.w	8008194 <HAL_GPIO_Init+0x14>
  }
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	372c      	adds	r7, #44	; 0x2c
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	40010400 	.word	0x40010400

08008488 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008488:	b480      	push	{r7}
 800848a:	b089      	sub	sp, #36	; 0x24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008496:	e09a      	b.n	80085ce <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008498:	2201      	movs	r2, #1
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	fa02 f303 	lsl.w	r3, r2, r3
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	4013      	ands	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 808d 	beq.w	80085c8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80084ae:	4a4e      	ldr	r2, [pc, #312]	; (80085e8 <HAL_GPIO_DeInit+0x160>)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	3302      	adds	r3, #2
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	220f      	movs	r2, #15
 80084c6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	4013      	ands	r3, r2
 80084ce:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a46      	ldr	r2, [pc, #280]	; (80085ec <HAL_GPIO_DeInit+0x164>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <HAL_GPIO_DeInit+0x78>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a45      	ldr	r2, [pc, #276]	; (80085f0 <HAL_GPIO_DeInit+0x168>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00d      	beq.n	80084fc <HAL_GPIO_DeInit+0x74>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a44      	ldr	r2, [pc, #272]	; (80085f4 <HAL_GPIO_DeInit+0x16c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d007      	beq.n	80084f8 <HAL_GPIO_DeInit+0x70>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a43      	ldr	r2, [pc, #268]	; (80085f8 <HAL_GPIO_DeInit+0x170>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d101      	bne.n	80084f4 <HAL_GPIO_DeInit+0x6c>
 80084f0:	2303      	movs	r3, #3
 80084f2:	e006      	b.n	8008502 <HAL_GPIO_DeInit+0x7a>
 80084f4:	2304      	movs	r3, #4
 80084f6:	e004      	b.n	8008502 <HAL_GPIO_DeInit+0x7a>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e002      	b.n	8008502 <HAL_GPIO_DeInit+0x7a>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <HAL_GPIO_DeInit+0x7a>
 8008500:	2300      	movs	r3, #0
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	f002 0203 	and.w	r2, r2, #3
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	4093      	lsls	r3, r2
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	429a      	cmp	r2, r3
 8008510:	d132      	bne.n	8008578 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008512:	4b3a      	ldr	r3, [pc, #232]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	43db      	mvns	r3, r3
 800851a:	4938      	ldr	r1, [pc, #224]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 800851c:	4013      	ands	r3, r2
 800851e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008520:	4b36      	ldr	r3, [pc, #216]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	43db      	mvns	r3, r3
 8008528:	4934      	ldr	r1, [pc, #208]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 800852a:	4013      	ands	r3, r2
 800852c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800852e:	4b33      	ldr	r3, [pc, #204]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	43db      	mvns	r3, r3
 8008536:	4931      	ldr	r1, [pc, #196]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 8008538:	4013      	ands	r3, r2
 800853a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800853c:	4b2f      	ldr	r3, [pc, #188]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	43db      	mvns	r3, r3
 8008544:	492d      	ldr	r1, [pc, #180]	; (80085fc <HAL_GPIO_DeInit+0x174>)
 8008546:	4013      	ands	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	220f      	movs	r2, #15
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800855a:	4a23      	ldr	r2, [pc, #140]	; (80085e8 <HAL_GPIO_DeInit+0x160>)
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3302      	adds	r3, #2
 8008562:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	43da      	mvns	r2, r3
 800856a:	481f      	ldr	r0, [pc, #124]	; (80085e8 <HAL_GPIO_DeInit+0x160>)
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	089b      	lsrs	r3, r3, #2
 8008570:	400a      	ands	r2, r1
 8008572:	3302      	adds	r3, #2
 8008574:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2bff      	cmp	r3, #255	; 0xff
 800857c:	d801      	bhi.n	8008582 <HAL_GPIO_DeInit+0xfa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	e001      	b.n	8008586 <HAL_GPIO_DeInit+0xfe>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3304      	adds	r3, #4
 8008586:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2bff      	cmp	r3, #255	; 0xff
 800858c:	d802      	bhi.n	8008594 <HAL_GPIO_DeInit+0x10c>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	e002      	b.n	800859a <HAL_GPIO_DeInit+0x112>
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	3b08      	subs	r3, #8
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	210f      	movs	r1, #15
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	401a      	ands	r2, r3
 80085ac:	2104      	movs	r1, #4
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	fa01 f303 	lsl.w	r3, r1, r3
 80085b4:	431a      	orrs	r2, r3
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	fa22 f303 	lsr.w	r3, r2, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f47f af5e 	bne.w	8008498 <HAL_GPIO_DeInit+0x10>
  }
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	3724      	adds	r7, #36	; 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr
 80085e8:	40010000 	.word	0x40010000
 80085ec:	40010800 	.word	0x40010800
 80085f0:	40010c00 	.word	0x40010c00
 80085f4:	40011000 	.word	0x40011000
 80085f8:	40011400 	.word	0x40011400
 80085fc:	40010400 	.word	0x40010400

08008600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	887b      	ldrh	r3, [r7, #2]
 8008612:	4013      	ands	r3, r2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	e001      	b.n	8008622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	807b      	strh	r3, [r7, #2]
 800863a:	4613      	mov	r3, r2
 800863c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800863e:	787b      	ldrb	r3, [r7, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008644:	887a      	ldrh	r2, [r7, #2]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800864a:	e003      	b.n	8008654 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800864c:	887b      	ldrh	r3, [r7, #2]
 800864e:	041a      	lsls	r2, r3, #16
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	611a      	str	r2, [r3, #16]
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008670:	887a      	ldrh	r2, [r7, #2]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4013      	ands	r3, r2
 8008676:	041a      	lsls	r2, r3, #16
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	43d9      	mvns	r1, r3
 800867c:	887b      	ldrh	r3, [r7, #2]
 800867e:	400b      	ands	r3, r1
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	611a      	str	r2, [r3, #16]
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800869a:	4b08      	ldr	r3, [pc, #32]	; (80086bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	4013      	ands	r3, r2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086a6:	4a05      	ldr	r2, [pc, #20]	; (80086bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f9 fe88 	bl	80023c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40010400 	.word	0x40010400

080086c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e12b      	b.n	800892a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d106      	bne.n	80086ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fe fdba 	bl	8007260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2224      	movs	r2, #36	; 0x24
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0201 	bic.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008724:	f001 f960 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 8008728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	4a81      	ldr	r2, [pc, #516]	; (8008934 <HAL_I2C_Init+0x274>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d807      	bhi.n	8008744 <HAL_I2C_Init+0x84>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4a80      	ldr	r2, [pc, #512]	; (8008938 <HAL_I2C_Init+0x278>)
 8008738:	4293      	cmp	r3, r2
 800873a:	bf94      	ite	ls
 800873c:	2301      	movls	r3, #1
 800873e:	2300      	movhi	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	e006      	b.n	8008752 <HAL_I2C_Init+0x92>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4a7d      	ldr	r2, [pc, #500]	; (800893c <HAL_I2C_Init+0x27c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	bf94      	ite	ls
 800874c:	2301      	movls	r3, #1
 800874e:	2300      	movhi	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e0e7      	b.n	800892a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a78      	ldr	r2, [pc, #480]	; (8008940 <HAL_I2C_Init+0x280>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	0c9b      	lsrs	r3, r3, #18
 8008764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4a6a      	ldr	r2, [pc, #424]	; (8008934 <HAL_I2C_Init+0x274>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d802      	bhi.n	8008794 <HAL_I2C_Init+0xd4>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3301      	adds	r3, #1
 8008792:	e009      	b.n	80087a8 <HAL_I2C_Init+0xe8>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	4a69      	ldr	r2, [pc, #420]	; (8008944 <HAL_I2C_Init+0x284>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	099b      	lsrs	r3, r3, #6
 80087a6:	3301      	adds	r3, #1
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	430b      	orrs	r3, r1
 80087ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80087ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	495c      	ldr	r1, [pc, #368]	; (8008934 <HAL_I2C_Init+0x274>)
 80087c4:	428b      	cmp	r3, r1
 80087c6:	d819      	bhi.n	80087fc <HAL_I2C_Init+0x13c>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	1e59      	subs	r1, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087dc:	400b      	ands	r3, r1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <HAL_I2C_Init+0x138>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1e59      	subs	r1, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80087f0:	3301      	adds	r3, #1
 80087f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f6:	e051      	b.n	800889c <HAL_I2C_Init+0x1dc>
 80087f8:	2304      	movs	r3, #4
 80087fa:	e04f      	b.n	800889c <HAL_I2C_Init+0x1dc>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d111      	bne.n	8008828 <HAL_I2C_Init+0x168>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	1e58      	subs	r0, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6859      	ldr	r1, [r3, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	440b      	add	r3, r1
 8008812:	fbb0 f3f3 	udiv	r3, r0, r3
 8008816:	3301      	adds	r3, #1
 8008818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf0c      	ite	eq
 8008820:	2301      	moveq	r3, #1
 8008822:	2300      	movne	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	e012      	b.n	800884e <HAL_I2C_Init+0x18e>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	1e58      	subs	r0, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6859      	ldr	r1, [r3, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	0099      	lsls	r1, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	fbb0 f3f3 	udiv	r3, r0, r3
 800883e:	3301      	adds	r3, #1
 8008840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <HAL_I2C_Init+0x196>
 8008852:	2301      	movs	r3, #1
 8008854:	e022      	b.n	800889c <HAL_I2C_Init+0x1dc>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10e      	bne.n	800887c <HAL_I2C_Init+0x1bc>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1e58      	subs	r0, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	440b      	add	r3, r1
 800886c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008870:	3301      	adds	r3, #1
 8008872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887a:	e00f      	b.n	800889c <HAL_I2C_Init+0x1dc>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	1e58      	subs	r0, r3, #1
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6859      	ldr	r1, [r3, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	0099      	lsls	r1, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008892:	3301      	adds	r3, #1
 8008894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	6809      	ldr	r1, [r1, #0]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69da      	ldr	r2, [r3, #28]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80088ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6911      	ldr	r1, [r2, #16]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	4311      	orrs	r1, r2
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	430b      	orrs	r3, r1
 80088de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	000186a0 	.word	0x000186a0
 8008938:	001e847f 	.word	0x001e847f
 800893c:	003d08ff 	.word	0x003d08ff
 8008940:	431bde83 	.word	0x431bde83
 8008944:	10624dd3 	.word	0x10624dd3

08008948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	461a      	mov	r2, r3
 8008954:	460b      	mov	r3, r1
 8008956:	817b      	strh	r3, [r7, #10]
 8008958:	4613      	mov	r3, r2
 800895a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800895c:	f7fe fff0 	bl	8007940 <HAL_GetTick>
 8008960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b20      	cmp	r3, #32
 800896c:	f040 80e0 	bne.w	8008b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2319      	movs	r3, #25
 8008976:	2201      	movs	r2, #1
 8008978:	4970      	ldr	r1, [pc, #448]	; (8008b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fa92 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008986:	2302      	movs	r3, #2
 8008988:	e0d3      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_I2C_Master_Transmit+0x50>
 8008994:	2302      	movs	r3, #2
 8008996:	e0cc      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d007      	beq.n	80089be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0201 	orr.w	r2, r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2221      	movs	r2, #33	; 0x21
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2210      	movs	r2, #16
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	893a      	ldrh	r2, [r7, #8]
 80089ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4a50      	ldr	r2, [pc, #320]	; (8008b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80089fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a00:	8979      	ldrh	r1, [r7, #10]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f9ca 	bl	8008da0 <I2C_MasterRequestWrite>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e08d      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	613b      	str	r3, [r7, #16]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008a2c:	e066      	b.n	8008afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	6a39      	ldr	r1, [r7, #32]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fb50 	bl	80090d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00d      	beq.n	8008a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d107      	bne.n	8008a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e06b      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d11b      	bne.n	8008ad0 <HAL_I2C_Master_Transmit+0x188>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d017      	beq.n	8008ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	6a39      	ldr	r1, [r7, #32]
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fb47 	bl	8009168 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d107      	bne.n	8008af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e01a      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d194      	bne.n	8008a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e000      	b.n	8008b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
  }
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	00100002 	.word	0x00100002
 8008b40:	ffff0000 	.word	0xffff0000

08008b44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	460b      	mov	r3, r1
 8008b52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008b54:	f7fe fef4 	bl	8007940 <HAL_GetTick>
 8008b58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	f040 8111 	bne.w	8008d8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2319      	movs	r3, #25
 8008b72:	2201      	movs	r2, #1
 8008b74:	4988      	ldr	r1, [pc, #544]	; (8008d98 <HAL_I2C_IsDeviceReady+0x254>)
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f994 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008b82:	2302      	movs	r3, #2
 8008b84:	e104      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_I2C_IsDeviceReady+0x50>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e0fd      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d007      	beq.n	8008bba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0201 	orr.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2224      	movs	r2, #36	; 0x24
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a70      	ldr	r2, [pc, #448]	; (8008d9c <HAL_I2C_IsDeviceReady+0x258>)
 8008bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f952 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00d      	beq.n	8008c22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c14:	d103      	bne.n	8008c1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e0b6      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c22:	897b      	ldrh	r3, [r7, #10]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008c32:	f7fe fe85 	bl	8007940 <HAL_GetTick>
 8008c36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	bf0c      	ite	eq
 8008c46:	2301      	moveq	r3, #1
 8008c48:	2300      	movne	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	2300      	movne	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008c66:	e025      	b.n	8008cb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c68:	f7fe fe6a 	bl	8007940 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <HAL_I2C_IsDeviceReady+0x13a>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	22a0      	movs	r2, #160	; 0xa0
 8008c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2ba0      	cmp	r3, #160	; 0xa0
 8008cbe:	d005      	beq.n	8008ccc <HAL_I2C_IsDeviceReady+0x188>
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <HAL_I2C_IsDeviceReady+0x188>
 8008cc6:	7dbb      	ldrb	r3, [r7, #22]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0cd      	beq.n	8008c68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d129      	bne.n	8008d36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2319      	movs	r3, #25
 8008d0e:	2201      	movs	r2, #1
 8008d10:	4921      	ldr	r1, [pc, #132]	; (8008d98 <HAL_I2C_IsDeviceReady+0x254>)
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 f8c6 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e036      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e02c      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2319      	movs	r3, #25
 8008d56:	2201      	movs	r2, #1
 8008d58:	490f      	ldr	r1, [pc, #60]	; (8008d98 <HAL_I2C_IsDeviceReady+0x254>)
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f8a2 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e012      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	f4ff af32 	bcc.w	8008bde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008d8e:	2302      	movs	r3, #2
  }
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	00100002 	.word	0x00100002
 8008d9c:	ffff0000 	.word	0xffff0000

08008da0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	460b      	mov	r3, r1
 8008dae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d006      	beq.n	8008dca <I2C_MasterRequestWrite+0x2a>
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d003      	beq.n	8008dca <I2C_MasterRequestWrite+0x2a>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dc8:	d108      	bne.n	8008ddc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	e00b      	b.n	8008df4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b12      	cmp	r3, #18
 8008de2:	d107      	bne.n	8008df4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f84f 	bl	8008ea4 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00d      	beq.n	8008e28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1a:	d103      	bne.n	8008e24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e035      	b.n	8008e94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e30:	d108      	bne.n	8008e44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e32:	897b      	ldrh	r3, [r7, #10]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	461a      	mov	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e40:	611a      	str	r2, [r3, #16]
 8008e42:	e01b      	b.n	8008e7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e44:	897b      	ldrh	r3, [r7, #10]
 8008e46:	11db      	asrs	r3, r3, #7
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0306 	and.w	r3, r3, #6
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f063 030f 	orn	r3, r3, #15
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	490e      	ldr	r1, [pc, #56]	; (8008e9c <I2C_MasterRequestWrite+0xfc>)
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 f898 	bl	8008f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e010      	b.n	8008e94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008e72:	897b      	ldrh	r3, [r7, #10]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4907      	ldr	r1, [pc, #28]	; (8008ea0 <I2C_MasterRequestWrite+0x100>)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f888 	bl	8008f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e000      	b.n	8008e94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	00010008 	.word	0x00010008
 8008ea0:	00010002 	.word	0x00010002

08008ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eb4:	e048      	b.n	8008f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d044      	beq.n	8008f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ebe:	f7fe fd3f 	bl	8007940 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d302      	bcc.n	8008ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d139      	bne.n	8008f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	0c1b      	lsrs	r3, r3, #16
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d10d      	bne.n	8008efa <I2C_WaitOnFlagUntilTimeout+0x56>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	43da      	mvns	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bf0c      	ite	eq
 8008ef0:	2301      	moveq	r3, #1
 8008ef2:	2300      	movne	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	e00c      	b.n	8008f14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	43da      	mvns	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	4013      	ands	r3, r2
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d116      	bne.n	8008f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	f043 0220 	orr.w	r2, r3, #32
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e023      	b.n	8008f90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10d      	bne.n	8008f6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	43da      	mvns	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	bf0c      	ite	eq
 8008f64:	2301      	moveq	r3, #1
 8008f66:	2300      	movne	r3, #0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	e00c      	b.n	8008f88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	43da      	mvns	r2, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bf0c      	ite	eq
 8008f80:	2301      	moveq	r3, #1
 8008f82:	2300      	movne	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	461a      	mov	r2, r3
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d093      	beq.n	8008eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fa6:	e071      	b.n	800908c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb6:	d123      	bne.n	8009000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fec:	f043 0204 	orr.w	r2, r3, #4
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e067      	b.n	80090d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d041      	beq.n	800908c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009008:	f7fe fc9a 	bl	8007940 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d136      	bne.n	800908c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10c      	bne.n	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	43da      	mvns	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4013      	ands	r3, r2
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf14      	ite	ne
 800903a:	2301      	movne	r3, #1
 800903c:	2300      	moveq	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	e00b      	b.n	800905a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	43da      	mvns	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4013      	ands	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	bf14      	ite	ne
 8009054:	2301      	movne	r3, #1
 8009056:	2300      	moveq	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d016      	beq.n	800908c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	f043 0220 	orr.w	r2, r3, #32
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e021      	b.n	80090d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d10c      	bne.n	80090b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	43da      	mvns	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4013      	ands	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bf14      	ite	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	2300      	moveq	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e00b      	b.n	80090c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	43da      	mvns	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf14      	ite	ne
 80090c2:	2301      	movne	r3, #1
 80090c4:	2300      	moveq	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f47f af6d 	bne.w	8008fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090e4:	e034      	b.n	8009150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f886 	bl	80091f8 <I2C_IsAcknowledgeFailed>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e034      	b.n	8009160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d028      	beq.n	8009150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090fe:	f7fe fc1f 	bl	8007940 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	d302      	bcc.n	8009114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d11d      	bne.n	8009150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911e:	2b80      	cmp	r3, #128	; 0x80
 8009120:	d016      	beq.n	8009150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	f043 0220 	orr.w	r2, r3, #32
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e007      	b.n	8009160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915a:	2b80      	cmp	r3, #128	; 0x80
 800915c:	d1c3      	bne.n	80090e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009174:	e034      	b.n	80091e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f83e 	bl	80091f8 <I2C_IsAcknowledgeFailed>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e034      	b.n	80091f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d028      	beq.n	80091e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918e:	f7fe fbd7 	bl	8007940 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	429a      	cmp	r2, r3
 800919c:	d302      	bcc.n	80091a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d11d      	bne.n	80091e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d016      	beq.n	80091e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091cc:	f043 0220 	orr.w	r2, r3, #32
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e007      	b.n	80091f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d1c3      	bne.n	8009176 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800920a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920e:	d11b      	bne.n	8009248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	f043 0204 	orr.w	r2, r3, #4
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr

08009254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e272      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 8087 	beq.w	8009382 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009274:	4b92      	ldr	r3, [pc, #584]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f003 030c 	and.w	r3, r3, #12
 800927c:	2b04      	cmp	r3, #4
 800927e:	d00c      	beq.n	800929a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009280:	4b8f      	ldr	r3, [pc, #572]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f003 030c 	and.w	r3, r3, #12
 8009288:	2b08      	cmp	r3, #8
 800928a:	d112      	bne.n	80092b2 <HAL_RCC_OscConfig+0x5e>
 800928c:	4b8c      	ldr	r3, [pc, #560]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009298:	d10b      	bne.n	80092b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800929a:	4b89      	ldr	r3, [pc, #548]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d06c      	beq.n	8009380 <HAL_RCC_OscConfig+0x12c>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d168      	bne.n	8009380 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e24c      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ba:	d106      	bne.n	80092ca <HAL_RCC_OscConfig+0x76>
 80092bc:	4b80      	ldr	r3, [pc, #512]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a7f      	ldr	r2, [pc, #508]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	e02e      	b.n	8009328 <HAL_RCC_OscConfig+0xd4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10c      	bne.n	80092ec <HAL_RCC_OscConfig+0x98>
 80092d2:	4b7b      	ldr	r3, [pc, #492]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a7a      	ldr	r2, [pc, #488]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	4b78      	ldr	r3, [pc, #480]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a77      	ldr	r2, [pc, #476]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e01d      	b.n	8009328 <HAL_RCC_OscConfig+0xd4>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092f4:	d10c      	bne.n	8009310 <HAL_RCC_OscConfig+0xbc>
 80092f6:	4b72      	ldr	r3, [pc, #456]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a71      	ldr	r2, [pc, #452]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80092fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a6e      	ldr	r2, [pc, #440]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	e00b      	b.n	8009328 <HAL_RCC_OscConfig+0xd4>
 8009310:	4b6b      	ldr	r3, [pc, #428]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a6a      	ldr	r2, [pc, #424]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4b68      	ldr	r3, [pc, #416]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a67      	ldr	r2, [pc, #412]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009326:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d013      	beq.n	8009358 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009330:	f7fe fb06 	bl	8007940 <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009338:	f7fe fb02 	bl	8007940 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b64      	cmp	r3, #100	; 0x64
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e200      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800934a:	4b5d      	ldr	r3, [pc, #372]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0xe4>
 8009356:	e014      	b.n	8009382 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009358:	f7fe faf2 	bl	8007940 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009360:	f7fe faee 	bl	8007940 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b64      	cmp	r3, #100	; 0x64
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e1ec      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009372:	4b53      	ldr	r3, [pc, #332]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f0      	bne.n	8009360 <HAL_RCC_OscConfig+0x10c>
 800937e:	e000      	b.n	8009382 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d063      	beq.n	8009456 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800938e:	4b4c      	ldr	r3, [pc, #304]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f003 030c 	and.w	r3, r3, #12
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800939a:	4b49      	ldr	r3, [pc, #292]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f003 030c 	and.w	r3, r3, #12
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d11c      	bne.n	80093e0 <HAL_RCC_OscConfig+0x18c>
 80093a6:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d116      	bne.n	80093e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093b2:	4b43      	ldr	r3, [pc, #268]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <HAL_RCC_OscConfig+0x176>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d001      	beq.n	80093ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e1c0      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ca:	4b3d      	ldr	r3, [pc, #244]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	4939      	ldr	r1, [pc, #228]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093de:	e03a      	b.n	8009456 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d020      	beq.n	800942a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093e8:	4b36      	ldr	r3, [pc, #216]	; (80094c4 <HAL_RCC_OscConfig+0x270>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ee:	f7fe faa7 	bl	8007940 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f6:	f7fe faa3 	bl	8007940 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e1a1      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009408:	4b2d      	ldr	r3, [pc, #180]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009414:	4b2a      	ldr	r3, [pc, #168]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	4927      	ldr	r1, [pc, #156]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 8009424:	4313      	orrs	r3, r2
 8009426:	600b      	str	r3, [r1, #0]
 8009428:	e015      	b.n	8009456 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800942a:	4b26      	ldr	r3, [pc, #152]	; (80094c4 <HAL_RCC_OscConfig+0x270>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009430:	f7fe fa86 	bl	8007940 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009438:	f7fe fa82 	bl	8007940 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e180      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f0      	bne.n	8009438 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d03a      	beq.n	80094d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d019      	beq.n	800949e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800946a:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <HAL_RCC_OscConfig+0x274>)
 800946c:	2201      	movs	r2, #1
 800946e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009470:	f7fe fa66 	bl	8007940 <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009478:	f7fe fa62 	bl	8007940 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e160      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800948a:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <HAL_RCC_OscConfig+0x26c>)
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009496:	2001      	movs	r0, #1
 8009498:	f000 face 	bl	8009a38 <RCC_Delay>
 800949c:	e01c      	b.n	80094d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_RCC_OscConfig+0x274>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094a4:	f7fe fa4c 	bl	8007940 <HAL_GetTick>
 80094a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094aa:	e00f      	b.n	80094cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094ac:	f7fe fa48 	bl	8007940 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d908      	bls.n	80094cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e146      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
 80094be:	bf00      	nop
 80094c0:	40021000 	.word	0x40021000
 80094c4:	42420000 	.word	0x42420000
 80094c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094cc:	4b92      	ldr	r3, [pc, #584]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e9      	bne.n	80094ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80a6 	beq.w	8009632 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094e6:	2300      	movs	r3, #0
 80094e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ea:	4b8b      	ldr	r3, [pc, #556]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094f6:	4b88      	ldr	r3, [pc, #544]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	4a87      	ldr	r2, [pc, #540]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80094fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009500:	61d3      	str	r3, [r2, #28]
 8009502:	4b85      	ldr	r3, [pc, #532]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009512:	4b82      	ldr	r3, [pc, #520]	; (800971c <HAL_RCC_OscConfig+0x4c8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d118      	bne.n	8009550 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800951e:	4b7f      	ldr	r3, [pc, #508]	; (800971c <HAL_RCC_OscConfig+0x4c8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a7e      	ldr	r2, [pc, #504]	; (800971c <HAL_RCC_OscConfig+0x4c8>)
 8009524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800952a:	f7fe fa09 	bl	8007940 <HAL_GetTick>
 800952e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009530:	e008      	b.n	8009544 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009532:	f7fe fa05 	bl	8007940 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	2b64      	cmp	r3, #100	; 0x64
 800953e:	d901      	bls.n	8009544 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e103      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009544:	4b75      	ldr	r3, [pc, #468]	; (800971c <HAL_RCC_OscConfig+0x4c8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0f0      	beq.n	8009532 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d106      	bne.n	8009566 <HAL_RCC_OscConfig+0x312>
 8009558:	4b6f      	ldr	r3, [pc, #444]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	4a6e      	ldr	r2, [pc, #440]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	6213      	str	r3, [r2, #32]
 8009564:	e02d      	b.n	80095c2 <HAL_RCC_OscConfig+0x36e>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10c      	bne.n	8009588 <HAL_RCC_OscConfig+0x334>
 800956e:	4b6a      	ldr	r3, [pc, #424]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	4a69      	ldr	r2, [pc, #420]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	6213      	str	r3, [r2, #32]
 800957a:	4b67      	ldr	r3, [pc, #412]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	4a66      	ldr	r2, [pc, #408]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009580:	f023 0304 	bic.w	r3, r3, #4
 8009584:	6213      	str	r3, [r2, #32]
 8009586:	e01c      	b.n	80095c2 <HAL_RCC_OscConfig+0x36e>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	2b05      	cmp	r3, #5
 800958e:	d10c      	bne.n	80095aa <HAL_RCC_OscConfig+0x356>
 8009590:	4b61      	ldr	r3, [pc, #388]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	4a60      	ldr	r2, [pc, #384]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009596:	f043 0304 	orr.w	r3, r3, #4
 800959a:	6213      	str	r3, [r2, #32]
 800959c:	4b5e      	ldr	r3, [pc, #376]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	4a5d      	ldr	r2, [pc, #372]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095a2:	f043 0301 	orr.w	r3, r3, #1
 80095a6:	6213      	str	r3, [r2, #32]
 80095a8:	e00b      	b.n	80095c2 <HAL_RCC_OscConfig+0x36e>
 80095aa:	4b5b      	ldr	r3, [pc, #364]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	4a5a      	ldr	r2, [pc, #360]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095b0:	f023 0301 	bic.w	r3, r3, #1
 80095b4:	6213      	str	r3, [r2, #32]
 80095b6:	4b58      	ldr	r3, [pc, #352]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	4a57      	ldr	r2, [pc, #348]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095bc:	f023 0304 	bic.w	r3, r3, #4
 80095c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d015      	beq.n	80095f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095ca:	f7fe f9b9 	bl	8007940 <HAL_GetTick>
 80095ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d0:	e00a      	b.n	80095e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095d2:	f7fe f9b5 	bl	8007940 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e0b1      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095e8:	4b4b      	ldr	r3, [pc, #300]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0ee      	beq.n	80095d2 <HAL_RCC_OscConfig+0x37e>
 80095f4:	e014      	b.n	8009620 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095f6:	f7fe f9a3 	bl	8007940 <HAL_GetTick>
 80095fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095fc:	e00a      	b.n	8009614 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095fe:	f7fe f99f 	bl	8007940 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	f241 3288 	movw	r2, #5000	; 0x1388
 800960c:	4293      	cmp	r3, r2
 800960e:	d901      	bls.n	8009614 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e09b      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009614:	4b40      	ldr	r3, [pc, #256]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1ee      	bne.n	80095fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d105      	bne.n	8009632 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009626:	4b3c      	ldr	r3, [pc, #240]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	4a3b      	ldr	r2, [pc, #236]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800962c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009630:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8087 	beq.w	800974a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800963c:	4b36      	ldr	r3, [pc, #216]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f003 030c 	and.w	r3, r3, #12
 8009644:	2b08      	cmp	r3, #8
 8009646:	d061      	beq.n	800970c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d146      	bne.n	80096de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009650:	4b33      	ldr	r3, [pc, #204]	; (8009720 <HAL_RCC_OscConfig+0x4cc>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009656:	f7fe f973 	bl	8007940 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800965c:	e008      	b.n	8009670 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800965e:	f7fe f96f 	bl	8007940 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	2b02      	cmp	r3, #2
 800966a:	d901      	bls.n	8009670 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e06d      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009670:	4b29      	ldr	r3, [pc, #164]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f0      	bne.n	800965e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009684:	d108      	bne.n	8009698 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009686:	4b24      	ldr	r3, [pc, #144]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	4921      	ldr	r1, [pc, #132]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009694:	4313      	orrs	r3, r2
 8009696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009698:	4b1f      	ldr	r3, [pc, #124]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a19      	ldr	r1, [r3, #32]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	430b      	orrs	r3, r1
 80096aa:	491b      	ldr	r1, [pc, #108]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096b0:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <HAL_RCC_OscConfig+0x4cc>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b6:	f7fe f943 	bl	8007940 <HAL_GetTick>
 80096ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096bc:	e008      	b.n	80096d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096be:	f7fe f93f 	bl	8007940 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d901      	bls.n	80096d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e03d      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096d0:	4b11      	ldr	r3, [pc, #68]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0f0      	beq.n	80096be <HAL_RCC_OscConfig+0x46a>
 80096dc:	e035      	b.n	800974a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <HAL_RCC_OscConfig+0x4cc>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e4:	f7fe f92c 	bl	8007940 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096ec:	f7fe f928 	bl	8007940 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e026      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096fe:	4b06      	ldr	r3, [pc, #24]	; (8009718 <HAL_RCC_OscConfig+0x4c4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f0      	bne.n	80096ec <HAL_RCC_OscConfig+0x498>
 800970a:	e01e      	b.n	800974a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d107      	bne.n	8009724 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e019      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
 8009718:	40021000 	.word	0x40021000
 800971c:	40007000 	.word	0x40007000
 8009720:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <HAL_RCC_OscConfig+0x500>)
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	429a      	cmp	r2, r3
 8009736:	d106      	bne.n	8009746 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009742:	429a      	cmp	r2, r3
 8009744:	d001      	beq.n	800974a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40021000 	.word	0x40021000

08009758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e0d0      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800976c:	4b6a      	ldr	r3, [pc, #424]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d910      	bls.n	800979c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800977a:	4b67      	ldr	r3, [pc, #412]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f023 0207 	bic.w	r2, r3, #7
 8009782:	4965      	ldr	r1, [pc, #404]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	4313      	orrs	r3, r2
 8009788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800978a:	4b63      	ldr	r3, [pc, #396]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d001      	beq.n	800979c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e0b8      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d020      	beq.n	80097ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4a58      	ldr	r2, [pc, #352]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097cc:	4b53      	ldr	r3, [pc, #332]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	4a52      	ldr	r2, [pc, #328]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80097d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097d8:	4b50      	ldr	r3, [pc, #320]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	494d      	ldr	r1, [pc, #308]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d040      	beq.n	8009878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d107      	bne.n	800980e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097fe:	4b47      	ldr	r3, [pc, #284]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d115      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e07f      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d107      	bne.n	8009826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009816:	4b41      	ldr	r3, [pc, #260]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e073      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009826:	4b3d      	ldr	r3, [pc, #244]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e06b      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009836:	4b39      	ldr	r3, [pc, #228]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f023 0203 	bic.w	r2, r3, #3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	4936      	ldr	r1, [pc, #216]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009844:	4313      	orrs	r3, r2
 8009846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009848:	f7fe f87a 	bl	8007940 <HAL_GetTick>
 800984c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800984e:	e00a      	b.n	8009866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009850:	f7fe f876 	bl	8007940 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	f241 3288 	movw	r2, #5000	; 0x1388
 800985e:	4293      	cmp	r3, r2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e053      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009866:	4b2d      	ldr	r3, [pc, #180]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f003 020c 	and.w	r2, r3, #12
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	429a      	cmp	r2, r3
 8009876:	d1eb      	bne.n	8009850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009878:	4b27      	ldr	r3, [pc, #156]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d210      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f023 0207 	bic.w	r2, r3, #7
 800988e:	4922      	ldr	r1, [pc, #136]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	4313      	orrs	r3, r2
 8009894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009896:	4b20      	ldr	r3, [pc, #128]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d001      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e032      	b.n	800990e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098b4:	4b19      	ldr	r3, [pc, #100]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4916      	ldr	r1, [pc, #88]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80098d2:	4b12      	ldr	r3, [pc, #72]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	490e      	ldr	r1, [pc, #56]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098e6:	f000 f821 	bl	800992c <HAL_RCC_GetSysClockFreq>
 80098ea:	4602      	mov	r2, r0
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	490a      	ldr	r1, [pc, #40]	; (8009920 <HAL_RCC_ClockConfig+0x1c8>)
 80098f8:	5ccb      	ldrb	r3, [r1, r3]
 80098fa:	fa22 f303 	lsr.w	r3, r2, r3
 80098fe:	4a09      	ldr	r2, [pc, #36]	; (8009924 <HAL_RCC_ClockConfig+0x1cc>)
 8009900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <HAL_RCC_ClockConfig+0x1d0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f7fd ffd8 	bl	80078bc <HAL_InitTick>

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40022000 	.word	0x40022000
 800991c:	40021000 	.word	0x40021000
 8009920:	08010ea0 	.word	0x08010ea0
 8009924:	200000ac 	.word	0x200000ac
 8009928:	200000b0 	.word	0x200000b0

0800992c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009946:	4b1e      	ldr	r3, [pc, #120]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f003 030c 	and.w	r3, r3, #12
 8009952:	2b04      	cmp	r3, #4
 8009954:	d002      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0x30>
 8009956:	2b08      	cmp	r3, #8
 8009958:	d003      	beq.n	8009962 <HAL_RCC_GetSysClockFreq+0x36>
 800995a:	e027      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800995c:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800995e:	613b      	str	r3, [r7, #16]
      break;
 8009960:	e027      	b.n	80099b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	0c9b      	lsrs	r3, r3, #18
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800996c:	5cd3      	ldrb	r3, [r2, r3]
 800996e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d010      	beq.n	800999c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	0c5b      	lsrs	r3, r3, #17
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	4a11      	ldr	r2, [pc, #68]	; (80099cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8009986:	5cd3      	ldrb	r3, [r2, r3]
 8009988:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a0d      	ldr	r2, [pc, #52]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800998e:	fb03 f202 	mul.w	r2, r3, r2
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e004      	b.n	80099a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a0c      	ldr	r2, [pc, #48]	; (80099d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80099a0:	fb02 f303 	mul.w	r3, r2, r3
 80099a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	613b      	str	r3, [r7, #16]
      break;
 80099aa:	e002      	b.n	80099b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80099ae:	613b      	str	r3, [r7, #16]
      break;
 80099b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099b2:	693b      	ldr	r3, [r7, #16]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40021000 	.word	0x40021000
 80099c4:	007a1200 	.word	0x007a1200
 80099c8:	08010eb8 	.word	0x08010eb8
 80099cc:	08010ec8 	.word	0x08010ec8
 80099d0:	003d0900 	.word	0x003d0900

080099d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80099da:	681b      	ldr	r3, [r3, #0]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr
 80099e4:	200000ac 	.word	0x200000ac

080099e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099ec:	f7ff fff2 	bl	80099d4 <HAL_RCC_GetHCLKFreq>
 80099f0:	4602      	mov	r2, r0
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	4903      	ldr	r1, [pc, #12]	; (8009a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80099fe:	5ccb      	ldrb	r3, [r1, r3]
 8009a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40021000 	.word	0x40021000
 8009a0c:	08010eb0 	.word	0x08010eb0

08009a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a14:	f7ff ffde 	bl	80099d4 <HAL_RCC_GetHCLKFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	0adb      	lsrs	r3, r3, #11
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4903      	ldr	r1, [pc, #12]	; (8009a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	40021000 	.word	0x40021000
 8009a34:	08010eb0 	.word	0x08010eb0

08009a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <RCC_Delay+0x34>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a0a      	ldr	r2, [pc, #40]	; (8009a70 <RCC_Delay+0x38>)
 8009a46:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4a:	0a5b      	lsrs	r3, r3, #9
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009a54:	bf00      	nop
  }
  while (Delay --);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	1e5a      	subs	r2, r3, #1
 8009a5a:	60fa      	str	r2, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1f9      	bne.n	8009a54 <RCC_Delay+0x1c>
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr
 8009a6c:	200000ac 	.word	0x200000ac
 8009a70:	10624dd3 	.word	0x10624dd3

08009a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e076      	b.n	8009b74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d108      	bne.n	8009aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a96:	d009      	beq.n	8009aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	61da      	str	r2, [r3, #28]
 8009a9e:	e005      	b.n	8009aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fd fc08 	bl	80072dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b30:	ea42 0103 	orr.w	r1, r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	0c1a      	lsrs	r2, r3, #16
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f002 0204 	and.w	r2, r2, #4
 8009b52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69da      	ldr	r2, [r3, #28]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_SPI_Transmit+0x22>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e12d      	b.n	8009dfa <HAL_SPI_Transmit+0x27e>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ba6:	f7fd fecb 	bl	8007940 <HAL_GetTick>
 8009baa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d002      	beq.n	8009bc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bc0:	e116      	b.n	8009df0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_SPI_Transmit+0x52>
 8009bc8:	88fb      	ldrh	r3, [r7, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bd2:	e10d      	b.n	8009df0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	88fa      	ldrh	r2, [r7, #6]
 8009bf2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c1a:	d10f      	bne.n	8009c3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c46:	2b40      	cmp	r3, #64	; 0x40
 8009c48:	d007      	beq.n	8009c5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c62:	d14f      	bne.n	8009d04 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <HAL_SPI_Transmit+0xf6>
 8009c6c:	8afb      	ldrh	r3, [r7, #22]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d142      	bne.n	8009cf8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c76:	881a      	ldrh	r2, [r3, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	1c9a      	adds	r2, r3, #2
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c96:	e02f      	b.n	8009cf8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d112      	bne.n	8009ccc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009caa:	881a      	ldrh	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	1c9a      	adds	r2, r3, #2
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cca:	e015      	b.n	8009cf8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ccc:	f7fd fe38 	bl	8007940 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d803      	bhi.n	8009ce4 <HAL_SPI_Transmit+0x168>
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	d102      	bne.n	8009cea <HAL_SPI_Transmit+0x16e>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009cf6:	e07b      	b.n	8009df0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1ca      	bne.n	8009c98 <HAL_SPI_Transmit+0x11c>
 8009d02:	e050      	b.n	8009da6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <HAL_SPI_Transmit+0x196>
 8009d0c:	8afb      	ldrh	r3, [r7, #22]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d144      	bne.n	8009d9c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	3b01      	subs	r3, #1
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d38:	e030      	b.n	8009d9c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d113      	bne.n	8009d70 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	330c      	adds	r3, #12
 8009d52:	7812      	ldrb	r2, [r2, #0]
 8009d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d6e:	e015      	b.n	8009d9c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d70:	f7fd fde6 	bl	8007940 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d803      	bhi.n	8009d88 <HAL_SPI_Transmit+0x20c>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d102      	bne.n	8009d8e <HAL_SPI_Transmit+0x212>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009d9a:	e029      	b.n	8009df0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1c9      	bne.n	8009d3a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 fa6e 	bl	800a28c <SPI_EndRxTxTransaction>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	613b      	str	r3, [r7, #16]
 8009dd8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	77fb      	strb	r3, [r7, #31]
 8009de6:	e003      	b.n	8009df0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3720      	adds	r7, #32
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b08c      	sub	sp, #48	; 0x30
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e10:	2301      	movs	r3, #1
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_SPI_TransmitReceive+0x26>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e198      	b.n	800a15a <HAL_SPI_TransmitReceive+0x358>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e30:	f7fd fd86 	bl	8007940 <HAL_GetTick>
 8009e34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d00f      	beq.n	8009e72 <HAL_SPI_TransmitReceive+0x70>
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e58:	d107      	bne.n	8009e6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d103      	bne.n	8009e6a <HAL_SPI_TransmitReceive+0x68>
 8009e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d003      	beq.n	8009e72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e70:	e16d      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <HAL_SPI_TransmitReceive+0x82>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_SPI_TransmitReceive+0x82>
 8009e7e:	887b      	ldrh	r3, [r7, #2]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e8a:	e160      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d003      	beq.n	8009ea0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	887a      	ldrh	r2, [r7, #2]
 8009eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	887a      	ldrh	r2, [r7, #2]
 8009eb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	887a      	ldrh	r2, [r7, #2]
 8009ec2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	887a      	ldrh	r2, [r7, #2]
 8009ec8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee0:	2b40      	cmp	r3, #64	; 0x40
 8009ee2:	d007      	beq.n	8009ef4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009efc:	d17c      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <HAL_SPI_TransmitReceive+0x10a>
 8009f06:	8b7b      	ldrh	r3, [r7, #26]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d16a      	bne.n	8009fe2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	881a      	ldrh	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	1c9a      	adds	r2, r3, #2
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f30:	e057      	b.n	8009fe2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d11b      	bne.n	8009f78 <HAL_SPI_TransmitReceive+0x176>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_SPI_TransmitReceive+0x176>
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d113      	bne.n	8009f78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	881a      	ldrh	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f60:	1c9a      	adds	r2, r3, #2
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d119      	bne.n	8009fba <HAL_SPI_TransmitReceive+0x1b8>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d014      	beq.n	8009fba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	b292      	uxth	r2, r2
 8009f9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	1c9a      	adds	r2, r3, #2
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009fba:	f7fd fcc1 	bl	8007940 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d80b      	bhi.n	8009fe2 <HAL_SPI_TransmitReceive+0x1e0>
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd0:	d007      	beq.n	8009fe2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009fe0:	e0b5      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1a2      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x130>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d19d      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x130>
 8009ff6:	e080      	b.n	800a0fa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <HAL_SPI_TransmitReceive+0x204>
 800a000:	8b7b      	ldrh	r3, [r7, #26]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d16f      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	330c      	adds	r3, #12
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a02c:	e05b      	b.n	800a0e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d11c      	bne.n	800a076 <HAL_SPI_TransmitReceive+0x274>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d017      	beq.n	800a076 <HAL_SPI_TransmitReceive+0x274>
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d114      	bne.n	800a076 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b01      	cmp	r3, #1
 800a082:	d119      	bne.n	800a0b8 <HAL_SPI_TransmitReceive+0x2b6>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d014      	beq.n	800a0b8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0b8:	f7fd fc42 	bl	8007940 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d803      	bhi.n	800a0d0 <HAL_SPI_TransmitReceive+0x2ce>
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d102      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x2d4>
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d107      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a0e4:	e033      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d19e      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x22c>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d199      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f8c4 	bl	800a28c <SPI_EndRxTxTransaction>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d006      	beq.n	800a118 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a116:	e01a      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a144:	e003      	b.n	800a14e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3730      	adds	r7, #48	; 0x30
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a170:	b2db      	uxtb	r3, r3
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a18c:	f7fd fbd8 	bl	8007940 <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a19c:	f7fd fbd0 	bl	8007940 <HAL_GetTick>
 800a1a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1a2:	4b39      	ldr	r3, [pc, #228]	; (800a288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	015b      	lsls	r3, r3, #5
 800a1a8:	0d1b      	lsrs	r3, r3, #20
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1b2:	e054      	b.n	800a25e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d050      	beq.n	800a25e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1bc:	f7fd fbc0 	bl	8007940 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d902      	bls.n	800a1d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d13d      	bne.n	800a24e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ea:	d111      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f4:	d004      	beq.n	800a200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fe:	d107      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a20e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a218:	d10f      	bne.n	800a23a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e017      	b.n	800a27e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4013      	ands	r3, r2
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	bf0c      	ite	eq
 800a26e:	2301      	moveq	r3, #1
 800a270:	2300      	movne	r3, #0
 800a272:	b2db      	uxtb	r3, r3
 800a274:	461a      	mov	r2, r3
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d19b      	bne.n	800a1b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200000ac 	.word	0x200000ac

0800a28c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff ff6a 	bl	800a17c <SPI_WaitFlagStateUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	f043 0220 	orr.w	r2, r3, #32
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e000      	b.n	800a2c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e041      	b.n	800a35e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fd f87a 	bl	80073e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3304      	adds	r3, #4
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f000 fb12 	bl	800a930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d001      	beq.n	800a380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e032      	b.n	800a3e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <HAL_TIM_Base_Start+0x88>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00e      	beq.n	800a3b0 <HAL_TIM_Base_Start+0x48>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39a:	d009      	beq.n	800a3b0 <HAL_TIM_Base_Start+0x48>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a14      	ldr	r2, [pc, #80]	; (800a3f4 <HAL_TIM_Base_Start+0x8c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d004      	beq.n	800a3b0 <HAL_TIM_Base_Start+0x48>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a13      	ldr	r2, [pc, #76]	; (800a3f8 <HAL_TIM_Base_Start+0x90>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d111      	bne.n	800a3d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b06      	cmp	r3, #6
 800a3c0:	d010      	beq.n	800a3e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f042 0201 	orr.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d2:	e007      	b.n	800a3e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0201 	orr.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr
 800a3f0:	40012c00 	.word	0x40012c00
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800

0800a3fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6a1a      	ldr	r2, [r3, #32]
 800a40a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a40e:	4013      	ands	r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10f      	bne.n	800a434 <HAL_TIM_Base_Stop+0x38>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	f240 4344 	movw	r3, #1092	; 0x444
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d107      	bne.n	800a434 <HAL_TIM_Base_Stop+0x38>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0201 	bic.w	r2, r2, #1
 800a432:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	bc80      	pop	{r7}
 800a446:	4770      	bx	lr

0800a448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d001      	beq.n	800a460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e03a      	b.n	800a4d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0201 	orr.w	r2, r2, #1
 800a476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <HAL_TIM_Base_Start_IT+0x98>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00e      	beq.n	800a4a0 <HAL_TIM_Base_Start_IT+0x58>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48a:	d009      	beq.n	800a4a0 <HAL_TIM_Base_Start_IT+0x58>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a14      	ldr	r2, [pc, #80]	; (800a4e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d004      	beq.n	800a4a0 <HAL_TIM_Base_Start_IT+0x58>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a13      	ldr	r2, [pc, #76]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d111      	bne.n	800a4c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b06      	cmp	r3, #6
 800a4b0:	d010      	beq.n	800a4d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f042 0201 	orr.w	r2, r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c2:	e007      	b.n	800a4d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr
 800a4e0:	40012c00 	.word	0x40012c00
 800a4e4:	40000400 	.word	0x40000400
 800a4e8:	40000800 	.word	0x40000800

0800a4ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0201 	bic.w	r2, r2, #1
 800a502:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6a1a      	ldr	r2, [r3, #32]
 800a50a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a50e:	4013      	ands	r3, r2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10f      	bne.n	800a534 <HAL_TIM_Base_Stop_IT+0x48>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6a1a      	ldr	r2, [r3, #32]
 800a51a:	f240 4344 	movw	r3, #1092	; 0x444
 800a51e:	4013      	ands	r3, r2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d107      	bne.n	800a534 <HAL_TIM_Base_Stop_IT+0x48>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f022 0201 	bic.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	bc80      	pop	{r7}
 800a546:	4770      	bx	lr

0800a548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d122      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d11b      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0202 	mvn.w	r2, #2
 800a574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f9b4 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a590:	e005      	b.n	800a59e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f9a7 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f9b6 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d122      	bne.n	800a5f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d11b      	bne.n	800a5f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f06f 0204 	mvn.w	r2, #4
 800a5c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f98a 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a5e4:	e005      	b.n	800a5f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f97d 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f98c 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f003 0308 	and.w	r3, r3, #8
 800a602:	2b08      	cmp	r3, #8
 800a604:	d122      	bne.n	800a64c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f003 0308 	and.w	r3, r3, #8
 800a610:	2b08      	cmp	r3, #8
 800a612:	d11b      	bne.n	800a64c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f06f 0208 	mvn.w	r2, #8
 800a61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2204      	movs	r2, #4
 800a622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f960 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a638:	e005      	b.n	800a646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f953 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f962 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0310 	and.w	r3, r3, #16
 800a656:	2b10      	cmp	r3, #16
 800a658:	d122      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b10      	cmp	r3, #16
 800a666:	d11b      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f06f 0210 	mvn.w	r2, #16
 800a670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2208      	movs	r2, #8
 800a676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f936 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a68c:	e005      	b.n	800a69a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f929 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f938 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d10e      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d107      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0201 	mvn.w	r2, #1
 800a6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7f7 fe06 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d6:	2b80      	cmp	r3, #128	; 0x80
 800a6d8:	d10e      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e4:	2b80      	cmp	r3, #128	; 0x80
 800a6e6:	d107      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa7b 	bl	800abee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a702:	2b40      	cmp	r3, #64	; 0x40
 800a704:	d10e      	bne.n	800a724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a710:	2b40      	cmp	r3, #64	; 0x40
 800a712:	d107      	bne.n	800a724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f8fc 	bl	800a91c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d10e      	bne.n	800a750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b20      	cmp	r3, #32
 800a73e:	d107      	bne.n	800a750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f06f 0220 	mvn.w	r2, #32
 800a748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fa46 	bl	800abdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d101      	bne.n	800a774 <HAL_TIM_ConfigClockSource+0x1c>
 800a770:	2302      	movs	r3, #2
 800a772:	e0b4      	b.n	800a8de <HAL_TIM_ConfigClockSource+0x186>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a79a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ac:	d03e      	beq.n	800a82c <HAL_TIM_ConfigClockSource+0xd4>
 800a7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b2:	f200 8087 	bhi.w	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ba:	f000 8086 	beq.w	800a8ca <HAL_TIM_ConfigClockSource+0x172>
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	d87f      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c4:	2b70      	cmp	r3, #112	; 0x70
 800a7c6:	d01a      	beq.n	800a7fe <HAL_TIM_ConfigClockSource+0xa6>
 800a7c8:	2b70      	cmp	r3, #112	; 0x70
 800a7ca:	d87b      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7cc:	2b60      	cmp	r3, #96	; 0x60
 800a7ce:	d050      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x11a>
 800a7d0:	2b60      	cmp	r3, #96	; 0x60
 800a7d2:	d877      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7d4:	2b50      	cmp	r3, #80	; 0x50
 800a7d6:	d03c      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0xfa>
 800a7d8:	2b50      	cmp	r3, #80	; 0x50
 800a7da:	d873      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7dc:	2b40      	cmp	r3, #64	; 0x40
 800a7de:	d058      	beq.n	800a892 <HAL_TIM_ConfigClockSource+0x13a>
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d86f      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7e4:	2b30      	cmp	r3, #48	; 0x30
 800a7e6:	d064      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a7e8:	2b30      	cmp	r3, #48	; 0x30
 800a7ea:	d86b      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d060      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d867      	bhi.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d05c      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d05a      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a7fc:	e062      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a80e:	f000 f968 	bl	800aae2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	609a      	str	r2, [r3, #8]
      break;
 800a82a:	e04f      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a83c:	f000 f951 	bl	800aae2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689a      	ldr	r2, [r3, #8]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a84e:	609a      	str	r2, [r3, #8]
      break;
 800a850:	e03c      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85e:	461a      	mov	r2, r3
 800a860:	f000 f8c8 	bl	800a9f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2150      	movs	r1, #80	; 0x50
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f91f 	bl	800aaae <TIM_ITRx_SetConfig>
      break;
 800a870:	e02c      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a87e:	461a      	mov	r2, r3
 800a880:	f000 f8e6 	bl	800aa50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2160      	movs	r1, #96	; 0x60
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 f90f 	bl	800aaae <TIM_ITRx_SetConfig>
      break;
 800a890:	e01c      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f000 f8a8 	bl	800a9f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2140      	movs	r1, #64	; 0x40
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f8ff 	bl	800aaae <TIM_ITRx_SetConfig>
      break;
 800a8b0:	e00c      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f000 f8f6 	bl	800aaae <TIM_ITRx_SetConfig>
      break;
 800a8c2:	e003      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c8:	e000      	b.n	800a8cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a8ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	bc80      	pop	{r7}
 800a908:	4770      	bx	lr

0800a90a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr

0800a91c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc80      	pop	{r7}
 800a92c:	4770      	bx	lr
	...

0800a930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a29      	ldr	r2, [pc, #164]	; (800a9e8 <TIM_Base_SetConfig+0xb8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00b      	beq.n	800a960 <TIM_Base_SetConfig+0x30>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94e:	d007      	beq.n	800a960 <TIM_Base_SetConfig+0x30>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a26      	ldr	r2, [pc, #152]	; (800a9ec <TIM_Base_SetConfig+0xbc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_Base_SetConfig+0x30>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a25      	ldr	r2, [pc, #148]	; (800a9f0 <TIM_Base_SetConfig+0xc0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d108      	bne.n	800a972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a1c      	ldr	r2, [pc, #112]	; (800a9e8 <TIM_Base_SetConfig+0xb8>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_Base_SetConfig+0x62>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a980:	d007      	beq.n	800a992 <TIM_Base_SetConfig+0x62>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a19      	ldr	r2, [pc, #100]	; (800a9ec <TIM_Base_SetConfig+0xbc>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_Base_SetConfig+0x62>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a18      	ldr	r2, [pc, #96]	; (800a9f0 <TIM_Base_SetConfig+0xc0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d108      	bne.n	800a9a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a07      	ldr	r2, [pc, #28]	; (800a9e8 <TIM_Base_SetConfig+0xb8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d103      	bne.n	800a9d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	691a      	ldr	r2, [r3, #16]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	615a      	str	r2, [r3, #20]
}
 800a9de:	bf00      	nop
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bc80      	pop	{r7}
 800a9e6:	4770      	bx	lr
 800a9e8:	40012c00 	.word	0x40012c00
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800

0800a9f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0201 	bic.w	r2, r3, #1
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f023 030a 	bic.w	r3, r3, #10
 800aa30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	621a      	str	r2, [r3, #32]
}
 800aa46:	bf00      	nop
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr

0800aa50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f023 0210 	bic.w	r2, r3, #16
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	031b      	lsls	r3, r3, #12
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	621a      	str	r2, [r3, #32]
}
 800aaa4:	bf00      	nop
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bc80      	pop	{r7}
 800aaac:	4770      	bx	lr

0800aaae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	f043 0307 	orr.w	r3, r3, #7
 800aad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	609a      	str	r2, [r3, #8]
}
 800aad8:	bf00      	nop
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr

0800aae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b087      	sub	sp, #28
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	607a      	str	r2, [r7, #4]
 800aaee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aafc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	021a      	lsls	r2, r3, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	431a      	orrs	r2, r3
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	609a      	str	r2, [r3, #8]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bc80      	pop	{r7}
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e046      	b.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00e      	beq.n	800ab9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab84:	d009      	beq.n	800ab9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a12      	ldr	r2, [pc, #72]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d004      	beq.n	800ab9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a10      	ldr	r2, [pc, #64]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d10c      	bne.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	bc80      	pop	{r7}
 800abce:	4770      	bx	lr
 800abd0:	40012c00 	.word	0x40012c00
 800abd4:	40000400 	.word	0x40000400
 800abd8:	40000800 	.word	0x40000800

0800abdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	bc80      	pop	{r7}
 800abec:	4770      	bx	lr

0800abee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bc80      	pop	{r7}
 800abfe:	4770      	bx	lr

0800ac00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e042      	b.n	800ac98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d106      	bne.n	800ac2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7fc fc32 	bl	8007490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2224      	movs	r2, #36	; 0x24
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68da      	ldr	r2, [r3, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fdf7 	bl	800b838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	691a      	ldr	r2, [r3, #16]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	695a      	ldr	r2, [r3, #20]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68da      	ldr	r2, [r3, #12]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2220      	movs	r2, #32
 800ac84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e024      	b.n	800acfc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2224      	movs	r2, #36	; 0x24
 800acb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acc8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7fc fc6c 	bl	80075a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08a      	sub	sp, #40	; 0x28
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	4613      	mov	r3, r2
 800ad12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b20      	cmp	r3, #32
 800ad22:	d16d      	bne.n	800ae00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <HAL_UART_Transmit+0x2c>
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e066      	b.n	800ae02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2221      	movs	r2, #33	; 0x21
 800ad3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad42:	f7fc fdfd 	bl	8007940 <HAL_GetTick>
 800ad46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	88fa      	ldrh	r2, [r7, #6]
 800ad4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	88fa      	ldrh	r2, [r7, #6]
 800ad52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5c:	d108      	bne.n	800ad70 <HAL_UART_Transmit+0x6c>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d104      	bne.n	800ad70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	61bb      	str	r3, [r7, #24]
 800ad6e:	e003      	b.n	800ad78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad78:	e02a      	b.n	800add0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	2180      	movs	r1, #128	; 0x80
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 fb14 	bl	800b3b2 <UART_WaitOnFlagUntilTimeout>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e036      	b.n	800ae02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	3302      	adds	r3, #2
 800adae:	61bb      	str	r3, [r7, #24]
 800adb0:	e007      	b.n	800adc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	3301      	adds	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	b29a      	uxth	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800add4:	b29b      	uxth	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1cf      	bne.n	800ad7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2200      	movs	r2, #0
 800ade2:	2140      	movs	r1, #64	; 0x40
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 fae4 	bl	800b3b2 <UART_WaitOnFlagUntilTimeout>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e006      	b.n	800ae02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	e000      	b.n	800ae02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ae00:	2302      	movs	r3, #2
  }
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	4613      	mov	r3, r2
 800ae16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	d112      	bne.n	800ae4a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <HAL_UART_Receive_IT+0x26>
 800ae2a:	88fb      	ldrh	r3, [r7, #6]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e00b      	b.n	800ae4c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae3a:	88fb      	ldrh	r3, [r7, #6]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 fb24 	bl	800b48e <UART_Start_Receive_IT>
 800ae46:	4603      	mov	r3, r0
 800ae48:	e000      	b.n	800ae4c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ae4a:	2302      	movs	r3, #2
  }
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b0ba      	sub	sp, #232	; 0xe8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10f      	bne.n	800aeba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	f003 0320 	and.w	r3, r3, #32
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <HAL_UART_IRQHandler+0x66>
 800aea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fc01 	bl	800b6ba <UART_Receive_IT>
      return;
 800aeb8:	e25b      	b.n	800b372 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aeba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 80de 	beq.w	800b080 <HAL_UART_IRQHandler+0x22c>
 800aec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80d1 	beq.w	800b080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <HAL_UART_IRQHandler+0xae>
 800aeea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d005      	beq.n	800af02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefa:	f043 0201 	orr.w	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af06:	f003 0304 	and.w	r3, r3, #4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <HAL_UART_IRQHandler+0xd2>
 800af0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1e:	f043 0202 	orr.w	r2, r3, #2
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <HAL_UART_IRQHandler+0xf6>
 800af32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d005      	beq.n	800af4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af42:	f043 0204 	orr.w	r2, r3, #4
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4e:	f003 0308 	and.w	r3, r3, #8
 800af52:	2b00      	cmp	r3, #0
 800af54:	d011      	beq.n	800af7a <HAL_UART_IRQHandler+0x126>
 800af56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d105      	bne.n	800af6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d005      	beq.n	800af7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af72:	f043 0208 	orr.w	r2, r3, #8
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 81f2 	beq.w	800b368 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_UART_IRQHandler+0x14e>
 800af90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fb8c 	bl	800b6ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afac:	2b00      	cmp	r3, #0
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afbe:	f003 0308 	and.w	r3, r3, #8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <HAL_UART_IRQHandler+0x17a>
 800afc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d04f      	beq.n	800b06e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa96 	bl	800b500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d041      	beq.n	800b066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3314      	adds	r3, #20
 800afe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800affc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3314      	adds	r3, #20
 800b00a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b00e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b01a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1d9      	bne.n	800afe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d013      	beq.n	800b05e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b03a:	4a7e      	ldr	r2, [pc, #504]	; (800b234 <HAL_UART_IRQHandler+0x3e0>)
 800b03c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b042:	4618      	mov	r0, r3
 800b044:	f7fc fe24 	bl	8007c90 <HAL_DMA_Abort_IT>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d016      	beq.n	800b07c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b05c:	e00e      	b.n	800b07c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f993 	bl	800b38a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b064:	e00a      	b.n	800b07c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f98f 	bl	800b38a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b06c:	e006      	b.n	800b07c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f98b 	bl	800b38a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b07a:	e175      	b.n	800b368 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b07c:	bf00      	nop
    return;
 800b07e:	e173      	b.n	800b368 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	2b01      	cmp	r3, #1
 800b086:	f040 814f 	bne.w	800b328 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08e:	f003 0310 	and.w	r3, r3, #16
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8148 	beq.w	800b328 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b09c:	f003 0310 	and.w	r3, r3, #16
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 8141 	beq.w	800b328 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60bb      	str	r3, [r7, #8]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	60bb      	str	r3, [r7, #8]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	60bb      	str	r3, [r7, #8]
 800b0ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80b6 	beq.w	800b238 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8145 	beq.w	800b36c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	f080 813e 	bcs.w	800b36c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	f000 8088 	beq.w	800b214 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b112:	e853 3f00 	ldrex	r3, [r3]
 800b116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b11e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b122:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	330c      	adds	r3, #12
 800b12c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b130:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b13c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1d9      	bne.n	800b104 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3314      	adds	r3, #20
 800b156:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3314      	adds	r3, #20
 800b170:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b174:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b178:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b17c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e1      	bne.n	800b150 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3314      	adds	r3, #20
 800b192:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3314      	adds	r3, #20
 800b1ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e3      	bne.n	800b18c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	330c      	adds	r3, #12
 800b1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e4:	f023 0310 	bic.w	r3, r3, #16
 800b1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	330c      	adds	r3, #12
 800b1f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1f6:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e3      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fc fd03 	bl	8007c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b222:	b29b      	uxth	r3, r3
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	b29b      	uxth	r3, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8b6 	bl	800b39c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b230:	e09c      	b.n	800b36c <HAL_UART_IRQHandler+0x518>
 800b232:	bf00      	nop
 800b234:	0800b5c5 	.word	0x0800b5c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b240:	b29b      	uxth	r3, r3
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 808e 	beq.w	800b370 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8089 	beq.w	800b370 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	330c      	adds	r3, #12
 800b264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	330c      	adds	r3, #12
 800b27e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b282:	647a      	str	r2, [r7, #68]	; 0x44
 800b284:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e3      	bne.n	800b25e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3314      	adds	r3, #20
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	f023 0301 	bic.w	r3, r3, #1
 800b2ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e3      	bne.n	800b296 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0310 	bic.w	r3, r3, #16
 800b2f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	330c      	adds	r3, #12
 800b2fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b300:	61fa      	str	r2, [r7, #28]
 800b302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	617b      	str	r3, [r7, #20]
   return(result);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e3      	bne.n	800b2dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b31a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f83b 	bl	800b39c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b326:	e023      	b.n	800b370 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	d009      	beq.n	800b348 <HAL_UART_IRQHandler+0x4f4>
 800b334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f953 	bl	800b5ec <UART_Transmit_IT>
    return;
 800b346:	e014      	b.n	800b372 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00e      	beq.n	800b372 <HAL_UART_IRQHandler+0x51e>
 800b354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d008      	beq.n	800b372 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f992 	bl	800b68a <UART_EndTransmit_IT>
    return;
 800b366:	e004      	b.n	800b372 <HAL_UART_IRQHandler+0x51e>
    return;
 800b368:	bf00      	nop
 800b36a:	e002      	b.n	800b372 <HAL_UART_IRQHandler+0x51e>
      return;
 800b36c:	bf00      	nop
 800b36e:	e000      	b.n	800b372 <HAL_UART_IRQHandler+0x51e>
      return;
 800b370:	bf00      	nop
  }
}
 800b372:	37e8      	adds	r7, #232	; 0xe8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	bc80      	pop	{r7}
 800b388:	4770      	bx	lr

0800b38a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	bc80      	pop	{r7}
 800b39a:	4770      	bx	lr

0800b39c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bc80      	pop	{r7}
 800b3b0:	4770      	bx	lr

0800b3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b090      	sub	sp, #64	; 0x40
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	603b      	str	r3, [r7, #0]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c2:	e050      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ca:	d04c      	beq.n	800b466 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3d2:	f7fc fab5 	bl	8007940 <HAL_GetTick>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d241      	bcs.n	800b466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	330c      	adds	r3, #12
 800b3e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ec:	e853 3f00 	ldrex	r3, [r3]
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	330c      	adds	r3, #12
 800b400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b402:	637a      	str	r2, [r7, #52]	; 0x34
 800b404:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e5      	bne.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3314      	adds	r3, #20
 800b41c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	613b      	str	r3, [r7, #16]
   return(result);
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f023 0301 	bic.w	r3, r3, #1
 800b42c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3314      	adds	r3, #20
 800b434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b436:	623a      	str	r2, [r7, #32]
 800b438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	69f9      	ldr	r1, [r7, #28]
 800b43c:	6a3a      	ldr	r2, [r7, #32]
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	61bb      	str	r3, [r7, #24]
   return(result);
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e5      	bne.n	800b416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2220      	movs	r2, #32
 800b456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e00f      	b.n	800b486 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	4013      	ands	r3, r2
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	429a      	cmp	r2, r3
 800b474:	bf0c      	ite	eq
 800b476:	2301      	moveq	r3, #1
 800b478:	2300      	movne	r3, #0
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	461a      	mov	r2, r3
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	429a      	cmp	r2, r3
 800b482:	d09f      	beq.n	800b3c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3740      	adds	r7, #64	; 0x40
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	4613      	mov	r3, r2
 800b49a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	88fa      	ldrh	r2, [r7, #6]
 800b4a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	88fa      	ldrh	r2, [r7, #6]
 800b4ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2222      	movs	r2, #34	; 0x22
 800b4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d007      	beq.n	800b4d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695a      	ldr	r2, [r3, #20]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68da      	ldr	r2, [r3, #12]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0220 	orr.w	r2, r2, #32
 800b4f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr

0800b500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b095      	sub	sp, #84	; 0x54
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b51e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b528:	643a      	str	r2, [r7, #64]	; 0x40
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b52e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e5      	bne.n	800b508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3314      	adds	r3, #20
 800b542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f023 0301 	bic.w	r3, r3, #1
 800b552:	64bb      	str	r3, [r7, #72]	; 0x48
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3314      	adds	r3, #20
 800b55a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e5      	bne.n	800b53c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b574:	2b01      	cmp	r3, #1
 800b576:	d119      	bne.n	800b5ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	60bb      	str	r3, [r7, #8]
   return(result);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f023 0310 	bic.w	r3, r3, #16
 800b58e:	647b      	str	r3, [r7, #68]	; 0x44
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b598:	61ba      	str	r2, [r7, #24]
 800b59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6979      	ldr	r1, [r7, #20]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e5      	bne.n	800b578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b5ba:	bf00      	nop
 800b5bc:	3754      	adds	r7, #84	; 0x54
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bc80      	pop	{r7}
 800b5c2:	4770      	bx	lr

0800b5c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7ff fed3 	bl	800b38a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5e4:	bf00      	nop
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b21      	cmp	r3, #33	; 0x21
 800b5fe:	d13e      	bne.n	800b67e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b608:	d114      	bne.n	800b634 <UART_Transmit_IT+0x48>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d110      	bne.n	800b634 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b626:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	1c9a      	adds	r2, r3, #2
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	621a      	str	r2, [r3, #32]
 800b632:	e008      	b.n	800b646 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	1c59      	adds	r1, r3, #1
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6211      	str	r1, [r2, #32]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	3b01      	subs	r3, #1
 800b64e:	b29b      	uxth	r3, r3
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	4619      	mov	r1, r3
 800b654:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10f      	bne.n	800b67a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b668:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b678:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	e000      	b.n	800b680 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b67e:	2302      	movs	r3, #2
  }
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	bc80      	pop	{r7}
 800b688:	4770      	bx	lr

0800b68a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b082      	sub	sp, #8
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fe64 	bl	800b378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b08c      	sub	sp, #48	; 0x30
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b22      	cmp	r3, #34	; 0x22
 800b6cc:	f040 80ae 	bne.w	800b82c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d8:	d117      	bne.n	800b70a <UART_Receive_IT+0x50>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d113      	bne.n	800b70a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	1c9a      	adds	r2, r3, #2
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	629a      	str	r2, [r3, #40]	; 0x28
 800b708:	e026      	b.n	800b758 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b710:	2300      	movs	r3, #0
 800b712:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71c:	d007      	beq.n	800b72e <UART_Receive_IT+0x74>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10a      	bne.n	800b73c <UART_Receive_IT+0x82>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	b2da      	uxtb	r2, r3
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e008      	b.n	800b74e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29b      	uxth	r3, r3
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	4619      	mov	r1, r3
 800b766:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d15d      	bne.n	800b828 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68da      	ldr	r2, [r3, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f022 0220 	bic.w	r2, r2, #32
 800b77a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b78a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	695a      	ldr	r2, [r3, #20]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0201 	bic.w	r2, r2, #1
 800b79a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d135      	bne.n	800b81e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	330c      	adds	r3, #12
 800b7be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	e853 3f00 	ldrex	r3, [r3]
 800b7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	f023 0310 	bic.w	r3, r3, #16
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	330c      	adds	r3, #12
 800b7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d8:	623a      	str	r2, [r7, #32]
 800b7da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7dc:	69f9      	ldr	r1, [r7, #28]
 800b7de:	6a3a      	ldr	r2, [r7, #32]
 800b7e0:	e841 2300 	strex	r3, r2, [r1]
 800b7e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e5      	bne.n	800b7b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 0310 	and.w	r3, r3, #16
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	d10a      	bne.n	800b810 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fdc0 	bl	800b39c <HAL_UARTEx_RxEventCallback>
 800b81c:	e002      	b.n	800b824 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7f7 fecc 	bl	80035bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	e002      	b.n	800b82e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	e000      	b.n	800b82e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b82c:	2302      	movs	r3, #2
  }
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3730      	adds	r7, #48	; 0x30
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689a      	ldr	r2, [r3, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	431a      	orrs	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	4313      	orrs	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b872:	f023 030c 	bic.w	r3, r3, #12
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	6812      	ldr	r2, [r2, #0]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	430b      	orrs	r3, r1
 800b87e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a2c      	ldr	r2, [pc, #176]	; (800b94c <UART_SetConfig+0x114>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d103      	bne.n	800b8a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b8a0:	f7fe f8b6 	bl	8009a10 <HAL_RCC_GetPCLK2Freq>
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	e002      	b.n	800b8ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b8a8:	f7fe f89e 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800b8ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009a      	lsls	r2, r3, #2
 800b8b8:	441a      	add	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c4:	4a22      	ldr	r2, [pc, #136]	; (800b950 <UART_SetConfig+0x118>)
 800b8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ca:	095b      	lsrs	r3, r3, #5
 800b8cc:	0119      	lsls	r1, r3, #4
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009a      	lsls	r2, r3, #2
 800b8d8:	441a      	add	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8e4:	4b1a      	ldr	r3, [pc, #104]	; (800b950 <UART_SetConfig+0x118>)
 800b8e6:	fba3 0302 	umull	r0, r3, r3, r2
 800b8ea:	095b      	lsrs	r3, r3, #5
 800b8ec:	2064      	movs	r0, #100	; 0x64
 800b8ee:	fb00 f303 	mul.w	r3, r0, r3
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	3332      	adds	r3, #50	; 0x32
 800b8f8:	4a15      	ldr	r2, [pc, #84]	; (800b950 <UART_SetConfig+0x118>)
 800b8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fe:	095b      	lsrs	r3, r3, #5
 800b900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b904:	4419      	add	r1, r3
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009a      	lsls	r2, r3, #2
 800b910:	441a      	add	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	fbb2 f2f3 	udiv	r2, r2, r3
 800b91c:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <UART_SetConfig+0x118>)
 800b91e:	fba3 0302 	umull	r0, r3, r3, r2
 800b922:	095b      	lsrs	r3, r3, #5
 800b924:	2064      	movs	r0, #100	; 0x64
 800b926:	fb00 f303 	mul.w	r3, r0, r3
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	3332      	adds	r3, #50	; 0x32
 800b930:	4a07      	ldr	r2, [pc, #28]	; (800b950 <UART_SetConfig+0x118>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	f003 020f 	and.w	r2, r3, #15
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	440a      	add	r2, r1
 800b942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b944:	bf00      	nop
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40013800 	.word	0x40013800
 800b950:	51eb851f 	.word	0x51eb851f

0800b954 <__cvt>:
 800b954:	2b00      	cmp	r3, #0
 800b956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b95a:	461f      	mov	r7, r3
 800b95c:	bfbb      	ittet	lt
 800b95e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b962:	461f      	movlt	r7, r3
 800b964:	2300      	movge	r3, #0
 800b966:	232d      	movlt	r3, #45	; 0x2d
 800b968:	b088      	sub	sp, #32
 800b96a:	4614      	mov	r4, r2
 800b96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b96e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b970:	7013      	strb	r3, [r2, #0]
 800b972:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b974:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b978:	f023 0820 	bic.w	r8, r3, #32
 800b97c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b980:	d005      	beq.n	800b98e <__cvt+0x3a>
 800b982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b986:	d100      	bne.n	800b98a <__cvt+0x36>
 800b988:	3501      	adds	r5, #1
 800b98a:	2302      	movs	r3, #2
 800b98c:	e000      	b.n	800b990 <__cvt+0x3c>
 800b98e:	2303      	movs	r3, #3
 800b990:	aa07      	add	r2, sp, #28
 800b992:	9204      	str	r2, [sp, #16]
 800b994:	aa06      	add	r2, sp, #24
 800b996:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b99a:	e9cd 3500 	strd	r3, r5, [sp]
 800b99e:	4622      	mov	r2, r4
 800b9a0:	463b      	mov	r3, r7
 800b9a2:	f000 fe81 	bl	800c6a8 <_dtoa_r>
 800b9a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	d102      	bne.n	800b9b4 <__cvt+0x60>
 800b9ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9b0:	07db      	lsls	r3, r3, #31
 800b9b2:	d522      	bpl.n	800b9fa <__cvt+0xa6>
 800b9b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b9b8:	eb06 0905 	add.w	r9, r6, r5
 800b9bc:	d110      	bne.n	800b9e0 <__cvt+0x8c>
 800b9be:	7833      	ldrb	r3, [r6, #0]
 800b9c0:	2b30      	cmp	r3, #48	; 0x30
 800b9c2:	d10a      	bne.n	800b9da <__cvt+0x86>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f4 ffec 	bl	80009a8 <__aeabi_dcmpeq>
 800b9d0:	b918      	cbnz	r0, 800b9da <__cvt+0x86>
 800b9d2:	f1c5 0501 	rsb	r5, r5, #1
 800b9d6:	f8ca 5000 	str.w	r5, [sl]
 800b9da:	f8da 3000 	ldr.w	r3, [sl]
 800b9de:	4499      	add	r9, r3
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f4 ffde 	bl	80009a8 <__aeabi_dcmpeq>
 800b9ec:	b108      	cbz	r0, 800b9f2 <__cvt+0x9e>
 800b9ee:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9f2:	2230      	movs	r2, #48	; 0x30
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	454b      	cmp	r3, r9
 800b9f8:	d307      	bcc.n	800ba0a <__cvt+0xb6>
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	9b07      	ldr	r3, [sp, #28]
 800b9fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba00:	1b9b      	subs	r3, r3, r6
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	b008      	add	sp, #32
 800ba06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	9107      	str	r1, [sp, #28]
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e7f0      	b.n	800b9f4 <__cvt+0xa0>

0800ba12 <__exponent>:
 800ba12:	4603      	mov	r3, r0
 800ba14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba16:	2900      	cmp	r1, #0
 800ba18:	f803 2b02 	strb.w	r2, [r3], #2
 800ba1c:	bfb6      	itet	lt
 800ba1e:	222d      	movlt	r2, #45	; 0x2d
 800ba20:	222b      	movge	r2, #43	; 0x2b
 800ba22:	4249      	neglt	r1, r1
 800ba24:	2909      	cmp	r1, #9
 800ba26:	7042      	strb	r2, [r0, #1]
 800ba28:	dd2a      	ble.n	800ba80 <__exponent+0x6e>
 800ba2a:	f10d 0207 	add.w	r2, sp, #7
 800ba2e:	4617      	mov	r7, r2
 800ba30:	260a      	movs	r6, #10
 800ba32:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba36:	4694      	mov	ip, r2
 800ba38:	fb06 1415 	mls	r4, r6, r5, r1
 800ba3c:	3430      	adds	r4, #48	; 0x30
 800ba3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ba42:	460c      	mov	r4, r1
 800ba44:	2c63      	cmp	r4, #99	; 0x63
 800ba46:	4629      	mov	r1, r5
 800ba48:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba4c:	dcf1      	bgt.n	800ba32 <__exponent+0x20>
 800ba4e:	3130      	adds	r1, #48	; 0x30
 800ba50:	f1ac 0402 	sub.w	r4, ip, #2
 800ba54:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba58:	4622      	mov	r2, r4
 800ba5a:	1c41      	adds	r1, r0, #1
 800ba5c:	42ba      	cmp	r2, r7
 800ba5e:	d30a      	bcc.n	800ba76 <__exponent+0x64>
 800ba60:	f10d 0209 	add.w	r2, sp, #9
 800ba64:	eba2 020c 	sub.w	r2, r2, ip
 800ba68:	42bc      	cmp	r4, r7
 800ba6a:	bf88      	it	hi
 800ba6c:	2200      	movhi	r2, #0
 800ba6e:	4413      	add	r3, r2
 800ba70:	1a18      	subs	r0, r3, r0
 800ba72:	b003      	add	sp, #12
 800ba74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba76:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ba7e:	e7ed      	b.n	800ba5c <__exponent+0x4a>
 800ba80:	2330      	movs	r3, #48	; 0x30
 800ba82:	3130      	adds	r1, #48	; 0x30
 800ba84:	7083      	strb	r3, [r0, #2]
 800ba86:	70c1      	strb	r1, [r0, #3]
 800ba88:	1d03      	adds	r3, r0, #4
 800ba8a:	e7f1      	b.n	800ba70 <__exponent+0x5e>

0800ba8c <_printf_float>:
 800ba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba90:	b091      	sub	sp, #68	; 0x44
 800ba92:	460c      	mov	r4, r1
 800ba94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ba98:	4616      	mov	r6, r2
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	f000 fce5 	bl	800c46c <_localeconv_r>
 800baa2:	6803      	ldr	r3, [r0, #0]
 800baa4:	4618      	mov	r0, r3
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	f7f4 fb52 	bl	8000150 <strlen>
 800baac:	2300      	movs	r3, #0
 800baae:	930e      	str	r3, [sp, #56]	; 0x38
 800bab0:	f8d8 3000 	ldr.w	r3, [r8]
 800bab4:	900a      	str	r0, [sp, #40]	; 0x28
 800bab6:	3307      	adds	r3, #7
 800bab8:	f023 0307 	bic.w	r3, r3, #7
 800babc:	f103 0208 	add.w	r2, r3, #8
 800bac0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bac4:	f8d4 b000 	ldr.w	fp, [r4]
 800bac8:	f8c8 2000 	str.w	r2, [r8]
 800bacc:	e9d3 a800 	ldrd	sl, r8, [r3]
 800bad0:	4652      	mov	r2, sl
 800bad2:	4643      	mov	r3, r8
 800bad4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bad8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800badc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bade:	f04f 32ff 	mov.w	r2, #4294967295
 800bae2:	4650      	mov	r0, sl
 800bae4:	4b9c      	ldr	r3, [pc, #624]	; (800bd58 <_printf_float+0x2cc>)
 800bae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bae8:	f7f4 ff90 	bl	8000a0c <__aeabi_dcmpun>
 800baec:	bb70      	cbnz	r0, 800bb4c <_printf_float+0xc0>
 800baee:	f04f 32ff 	mov.w	r2, #4294967295
 800baf2:	4650      	mov	r0, sl
 800baf4:	4b98      	ldr	r3, [pc, #608]	; (800bd58 <_printf_float+0x2cc>)
 800baf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baf8:	f7f4 ff6a 	bl	80009d0 <__aeabi_dcmple>
 800bafc:	bb30      	cbnz	r0, 800bb4c <_printf_float+0xc0>
 800bafe:	2200      	movs	r2, #0
 800bb00:	2300      	movs	r3, #0
 800bb02:	4650      	mov	r0, sl
 800bb04:	4641      	mov	r1, r8
 800bb06:	f7f4 ff59 	bl	80009bc <__aeabi_dcmplt>
 800bb0a:	b110      	cbz	r0, 800bb12 <_printf_float+0x86>
 800bb0c:	232d      	movs	r3, #45	; 0x2d
 800bb0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb12:	4a92      	ldr	r2, [pc, #584]	; (800bd5c <_printf_float+0x2d0>)
 800bb14:	4b92      	ldr	r3, [pc, #584]	; (800bd60 <_printf_float+0x2d4>)
 800bb16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bb1a:	bf94      	ite	ls
 800bb1c:	4690      	movls	r8, r2
 800bb1e:	4698      	movhi	r8, r3
 800bb20:	2303      	movs	r3, #3
 800bb22:	f04f 0a00 	mov.w	sl, #0
 800bb26:	6123      	str	r3, [r4, #16]
 800bb28:	f02b 0304 	bic.w	r3, fp, #4
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	4633      	mov	r3, r6
 800bb30:	4621      	mov	r1, r4
 800bb32:	4628      	mov	r0, r5
 800bb34:	9700      	str	r7, [sp, #0]
 800bb36:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb38:	f000 f9d6 	bl	800bee8 <_printf_common>
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f040 8090 	bne.w	800bc62 <_printf_float+0x1d6>
 800bb42:	f04f 30ff 	mov.w	r0, #4294967295
 800bb46:	b011      	add	sp, #68	; 0x44
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	4643      	mov	r3, r8
 800bb50:	4650      	mov	r0, sl
 800bb52:	4641      	mov	r1, r8
 800bb54:	f7f4 ff5a 	bl	8000a0c <__aeabi_dcmpun>
 800bb58:	b148      	cbz	r0, 800bb6e <_printf_float+0xe2>
 800bb5a:	f1b8 0f00 	cmp.w	r8, #0
 800bb5e:	bfb8      	it	lt
 800bb60:	232d      	movlt	r3, #45	; 0x2d
 800bb62:	4a80      	ldr	r2, [pc, #512]	; (800bd64 <_printf_float+0x2d8>)
 800bb64:	bfb8      	it	lt
 800bb66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb6a:	4b7f      	ldr	r3, [pc, #508]	; (800bd68 <_printf_float+0x2dc>)
 800bb6c:	e7d3      	b.n	800bb16 <_printf_float+0x8a>
 800bb6e:	6863      	ldr	r3, [r4, #4]
 800bb70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	d142      	bne.n	800bbfe <_printf_float+0x172>
 800bb78:	2306      	movs	r3, #6
 800bb7a:	6063      	str	r3, [r4, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	9206      	str	r2, [sp, #24]
 800bb80:	aa0e      	add	r2, sp, #56	; 0x38
 800bb82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bb86:	aa0d      	add	r2, sp, #52	; 0x34
 800bb88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bb8c:	9203      	str	r2, [sp, #12]
 800bb8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bb92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	4628      	mov	r0, r5
 800bba0:	4643      	mov	r3, r8
 800bba2:	910b      	str	r1, [sp, #44]	; 0x2c
 800bba4:	f7ff fed6 	bl	800b954 <__cvt>
 800bba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbaa:	4680      	mov	r8, r0
 800bbac:	2947      	cmp	r1, #71	; 0x47
 800bbae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bbb0:	d108      	bne.n	800bbc4 <_printf_float+0x138>
 800bbb2:	1cc8      	adds	r0, r1, #3
 800bbb4:	db02      	blt.n	800bbbc <_printf_float+0x130>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	dd40      	ble.n	800bc3e <_printf_float+0x1b2>
 800bbbc:	f1a9 0902 	sub.w	r9, r9, #2
 800bbc0:	fa5f f989 	uxtb.w	r9, r9
 800bbc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bbc8:	d81f      	bhi.n	800bc0a <_printf_float+0x17e>
 800bbca:	464a      	mov	r2, r9
 800bbcc:	3901      	subs	r1, #1
 800bbce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bbd2:	910d      	str	r1, [sp, #52]	; 0x34
 800bbd4:	f7ff ff1d 	bl	800ba12 <__exponent>
 800bbd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbda:	4682      	mov	sl, r0
 800bbdc:	1813      	adds	r3, r2, r0
 800bbde:	2a01      	cmp	r2, #1
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	dc02      	bgt.n	800bbea <_printf_float+0x15e>
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	07d2      	lsls	r2, r2, #31
 800bbe8:	d501      	bpl.n	800bbee <_printf_float+0x162>
 800bbea:	3301      	adds	r3, #1
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d09b      	beq.n	800bb2e <_printf_float+0xa2>
 800bbf6:	232d      	movs	r3, #45	; 0x2d
 800bbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbfc:	e797      	b.n	800bb2e <_printf_float+0xa2>
 800bbfe:	2947      	cmp	r1, #71	; 0x47
 800bc00:	d1bc      	bne.n	800bb7c <_printf_float+0xf0>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1ba      	bne.n	800bb7c <_printf_float+0xf0>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7b7      	b.n	800bb7a <_printf_float+0xee>
 800bc0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bc0e:	d118      	bne.n	800bc42 <_printf_float+0x1b6>
 800bc10:	2900      	cmp	r1, #0
 800bc12:	6863      	ldr	r3, [r4, #4]
 800bc14:	dd0b      	ble.n	800bc2e <_printf_float+0x1a2>
 800bc16:	6121      	str	r1, [r4, #16]
 800bc18:	b913      	cbnz	r3, 800bc20 <_printf_float+0x194>
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	07d0      	lsls	r0, r2, #31
 800bc1e:	d502      	bpl.n	800bc26 <_printf_float+0x19a>
 800bc20:	3301      	adds	r3, #1
 800bc22:	440b      	add	r3, r1
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	f04f 0a00 	mov.w	sl, #0
 800bc2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc2c:	e7df      	b.n	800bbee <_printf_float+0x162>
 800bc2e:	b913      	cbnz	r3, 800bc36 <_printf_float+0x1aa>
 800bc30:	6822      	ldr	r2, [r4, #0]
 800bc32:	07d2      	lsls	r2, r2, #31
 800bc34:	d501      	bpl.n	800bc3a <_printf_float+0x1ae>
 800bc36:	3302      	adds	r3, #2
 800bc38:	e7f4      	b.n	800bc24 <_printf_float+0x198>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e7f2      	b.n	800bc24 <_printf_float+0x198>
 800bc3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc44:	4299      	cmp	r1, r3
 800bc46:	db05      	blt.n	800bc54 <_printf_float+0x1c8>
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	6121      	str	r1, [r4, #16]
 800bc4c:	07d8      	lsls	r0, r3, #31
 800bc4e:	d5ea      	bpl.n	800bc26 <_printf_float+0x19a>
 800bc50:	1c4b      	adds	r3, r1, #1
 800bc52:	e7e7      	b.n	800bc24 <_printf_float+0x198>
 800bc54:	2900      	cmp	r1, #0
 800bc56:	bfcc      	ite	gt
 800bc58:	2201      	movgt	r2, #1
 800bc5a:	f1c1 0202 	rsble	r2, r1, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	e7e0      	b.n	800bc24 <_printf_float+0x198>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	055a      	lsls	r2, r3, #21
 800bc66:	d407      	bmi.n	800bc78 <_printf_float+0x1ec>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	4642      	mov	r2, r8
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	d12b      	bne.n	800bcce <_printf_float+0x242>
 800bc76:	e764      	b.n	800bb42 <_printf_float+0xb6>
 800bc78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc7c:	f240 80dd 	bls.w	800be3a <_printf_float+0x3ae>
 800bc80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc84:	2200      	movs	r2, #0
 800bc86:	2300      	movs	r3, #0
 800bc88:	f7f4 fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d033      	beq.n	800bcf8 <_printf_float+0x26c>
 800bc90:	2301      	movs	r3, #1
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	4a35      	ldr	r2, [pc, #212]	; (800bd6c <_printf_float+0x2e0>)
 800bc98:	47b8      	blx	r7
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	f43f af51 	beq.w	800bb42 <_printf_float+0xb6>
 800bca0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bca4:	429a      	cmp	r2, r3
 800bca6:	db02      	blt.n	800bcae <_printf_float+0x222>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	07d8      	lsls	r0, r3, #31
 800bcac:	d50f      	bpl.n	800bcce <_printf_float+0x242>
 800bcae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f43f af42 	beq.w	800bb42 <_printf_float+0xb6>
 800bcbe:	f04f 0800 	mov.w	r8, #0
 800bcc2:	f104 091a 	add.w	r9, r4, #26
 800bcc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	4543      	cmp	r3, r8
 800bccc:	dc09      	bgt.n	800bce2 <_printf_float+0x256>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	079b      	lsls	r3, r3, #30
 800bcd2:	f100 8104 	bmi.w	800bede <_printf_float+0x452>
 800bcd6:	68e0      	ldr	r0, [r4, #12]
 800bcd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcda:	4298      	cmp	r0, r3
 800bcdc:	bfb8      	it	lt
 800bcde:	4618      	movlt	r0, r3
 800bce0:	e731      	b.n	800bb46 <_printf_float+0xba>
 800bce2:	2301      	movs	r3, #1
 800bce4:	464a      	mov	r2, r9
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	f43f af28 	beq.w	800bb42 <_printf_float+0xb6>
 800bcf2:	f108 0801 	add.w	r8, r8, #1
 800bcf6:	e7e6      	b.n	800bcc6 <_printf_float+0x23a>
 800bcf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dc38      	bgt.n	800bd70 <_printf_float+0x2e4>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4631      	mov	r1, r6
 800bd02:	4628      	mov	r0, r5
 800bd04:	4a19      	ldr	r2, [pc, #100]	; (800bd6c <_printf_float+0x2e0>)
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f af1a 	beq.w	800bb42 <_printf_float+0xb6>
 800bd0e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd12:	4313      	orrs	r3, r2
 800bd14:	d102      	bne.n	800bd1c <_printf_float+0x290>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	07d9      	lsls	r1, r3, #31
 800bd1a:	d5d8      	bpl.n	800bcce <_printf_float+0x242>
 800bd1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	47b8      	blx	r7
 800bd26:	3001      	adds	r0, #1
 800bd28:	f43f af0b 	beq.w	800bb42 <_printf_float+0xb6>
 800bd2c:	f04f 0900 	mov.w	r9, #0
 800bd30:	f104 0a1a 	add.w	sl, r4, #26
 800bd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd36:	425b      	negs	r3, r3
 800bd38:	454b      	cmp	r3, r9
 800bd3a:	dc01      	bgt.n	800bd40 <_printf_float+0x2b4>
 800bd3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd3e:	e794      	b.n	800bc6a <_printf_float+0x1de>
 800bd40:	2301      	movs	r3, #1
 800bd42:	4652      	mov	r2, sl
 800bd44:	4631      	mov	r1, r6
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b8      	blx	r7
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	f43f aef9 	beq.w	800bb42 <_printf_float+0xb6>
 800bd50:	f109 0901 	add.w	r9, r9, #1
 800bd54:	e7ee      	b.n	800bd34 <_printf_float+0x2a8>
 800bd56:	bf00      	nop
 800bd58:	7fefffff 	.word	0x7fefffff
 800bd5c:	08010eca 	.word	0x08010eca
 800bd60:	08010ece 	.word	0x08010ece
 800bd64:	08010ed2 	.word	0x08010ed2
 800bd68:	08010ed6 	.word	0x08010ed6
 800bd6c:	08010eda 	.word	0x08010eda
 800bd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd74:	429a      	cmp	r2, r3
 800bd76:	bfa8      	it	ge
 800bd78:	461a      	movge	r2, r3
 800bd7a:	2a00      	cmp	r2, #0
 800bd7c:	4691      	mov	r9, r2
 800bd7e:	dc37      	bgt.n	800bdf0 <_printf_float+0x364>
 800bd80:	f04f 0b00 	mov.w	fp, #0
 800bd84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd88:	f104 021a 	add.w	r2, r4, #26
 800bd8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd90:	ebaa 0309 	sub.w	r3, sl, r9
 800bd94:	455b      	cmp	r3, fp
 800bd96:	dc33      	bgt.n	800be00 <_printf_float+0x374>
 800bd98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	db3b      	blt.n	800be18 <_printf_float+0x38c>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	07da      	lsls	r2, r3, #31
 800bda4:	d438      	bmi.n	800be18 <_printf_float+0x38c>
 800bda6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bdaa:	eba2 0903 	sub.w	r9, r2, r3
 800bdae:	eba2 020a 	sub.w	r2, r2, sl
 800bdb2:	4591      	cmp	r9, r2
 800bdb4:	bfa8      	it	ge
 800bdb6:	4691      	movge	r9, r2
 800bdb8:	f1b9 0f00 	cmp.w	r9, #0
 800bdbc:	dc34      	bgt.n	800be28 <_printf_float+0x39c>
 800bdbe:	f04f 0800 	mov.w	r8, #0
 800bdc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdc6:	f104 0a1a 	add.w	sl, r4, #26
 800bdca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bdce:	1a9b      	subs	r3, r3, r2
 800bdd0:	eba3 0309 	sub.w	r3, r3, r9
 800bdd4:	4543      	cmp	r3, r8
 800bdd6:	f77f af7a 	ble.w	800bcce <_printf_float+0x242>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	f43f aeac 	beq.w	800bb42 <_printf_float+0xb6>
 800bdea:	f108 0801 	add.w	r8, r8, #1
 800bdee:	e7ec      	b.n	800bdca <_printf_float+0x33e>
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d1c0      	bne.n	800bd80 <_printf_float+0x2f4>
 800bdfe:	e6a0      	b.n	800bb42 <_printf_float+0xb6>
 800be00:	2301      	movs	r3, #1
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	920b      	str	r2, [sp, #44]	; 0x2c
 800be08:	47b8      	blx	r7
 800be0a:	3001      	adds	r0, #1
 800be0c:	f43f ae99 	beq.w	800bb42 <_printf_float+0xb6>
 800be10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be12:	f10b 0b01 	add.w	fp, fp, #1
 800be16:	e7b9      	b.n	800bd8c <_printf_float+0x300>
 800be18:	4631      	mov	r1, r6
 800be1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be1e:	4628      	mov	r0, r5
 800be20:	47b8      	blx	r7
 800be22:	3001      	adds	r0, #1
 800be24:	d1bf      	bne.n	800bda6 <_printf_float+0x31a>
 800be26:	e68c      	b.n	800bb42 <_printf_float+0xb6>
 800be28:	464b      	mov	r3, r9
 800be2a:	4631      	mov	r1, r6
 800be2c:	4628      	mov	r0, r5
 800be2e:	eb08 020a 	add.w	r2, r8, sl
 800be32:	47b8      	blx	r7
 800be34:	3001      	adds	r0, #1
 800be36:	d1c2      	bne.n	800bdbe <_printf_float+0x332>
 800be38:	e683      	b.n	800bb42 <_printf_float+0xb6>
 800be3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be3c:	2a01      	cmp	r2, #1
 800be3e:	dc01      	bgt.n	800be44 <_printf_float+0x3b8>
 800be40:	07db      	lsls	r3, r3, #31
 800be42:	d539      	bpl.n	800beb8 <_printf_float+0x42c>
 800be44:	2301      	movs	r3, #1
 800be46:	4642      	mov	r2, r8
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	47b8      	blx	r7
 800be4e:	3001      	adds	r0, #1
 800be50:	f43f ae77 	beq.w	800bb42 <_printf_float+0xb6>
 800be54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be58:	4631      	mov	r1, r6
 800be5a:	4628      	mov	r0, r5
 800be5c:	47b8      	blx	r7
 800be5e:	3001      	adds	r0, #1
 800be60:	f43f ae6f 	beq.w	800bb42 <_printf_float+0xb6>
 800be64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be68:	2200      	movs	r2, #0
 800be6a:	2300      	movs	r3, #0
 800be6c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800be70:	f7f4 fd9a 	bl	80009a8 <__aeabi_dcmpeq>
 800be74:	b9d8      	cbnz	r0, 800beae <_printf_float+0x422>
 800be76:	f109 33ff 	add.w	r3, r9, #4294967295
 800be7a:	f108 0201 	add.w	r2, r8, #1
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	d10e      	bne.n	800bea6 <_printf_float+0x41a>
 800be88:	e65b      	b.n	800bb42 <_printf_float+0xb6>
 800be8a:	2301      	movs	r3, #1
 800be8c:	464a      	mov	r2, r9
 800be8e:	4631      	mov	r1, r6
 800be90:	4628      	mov	r0, r5
 800be92:	47b8      	blx	r7
 800be94:	3001      	adds	r0, #1
 800be96:	f43f ae54 	beq.w	800bb42 <_printf_float+0xb6>
 800be9a:	f108 0801 	add.w	r8, r8, #1
 800be9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea0:	3b01      	subs	r3, #1
 800bea2:	4543      	cmp	r3, r8
 800bea4:	dcf1      	bgt.n	800be8a <_printf_float+0x3fe>
 800bea6:	4653      	mov	r3, sl
 800bea8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800beac:	e6de      	b.n	800bc6c <_printf_float+0x1e0>
 800beae:	f04f 0800 	mov.w	r8, #0
 800beb2:	f104 091a 	add.w	r9, r4, #26
 800beb6:	e7f2      	b.n	800be9e <_printf_float+0x412>
 800beb8:	2301      	movs	r3, #1
 800beba:	4642      	mov	r2, r8
 800bebc:	e7df      	b.n	800be7e <_printf_float+0x3f2>
 800bebe:	2301      	movs	r3, #1
 800bec0:	464a      	mov	r2, r9
 800bec2:	4631      	mov	r1, r6
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b8      	blx	r7
 800bec8:	3001      	adds	r0, #1
 800beca:	f43f ae3a 	beq.w	800bb42 <_printf_float+0xb6>
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bed6:	1a5b      	subs	r3, r3, r1
 800bed8:	4543      	cmp	r3, r8
 800beda:	dcf0      	bgt.n	800bebe <_printf_float+0x432>
 800bedc:	e6fb      	b.n	800bcd6 <_printf_float+0x24a>
 800bede:	f04f 0800 	mov.w	r8, #0
 800bee2:	f104 0919 	add.w	r9, r4, #25
 800bee6:	e7f4      	b.n	800bed2 <_printf_float+0x446>

0800bee8 <_printf_common>:
 800bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beec:	4616      	mov	r6, r2
 800beee:	4699      	mov	r9, r3
 800bef0:	688a      	ldr	r2, [r1, #8]
 800bef2:	690b      	ldr	r3, [r1, #16]
 800bef4:	4607      	mov	r7, r0
 800bef6:	4293      	cmp	r3, r2
 800bef8:	bfb8      	it	lt
 800befa:	4613      	movlt	r3, r2
 800befc:	6033      	str	r3, [r6, #0]
 800befe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf02:	460c      	mov	r4, r1
 800bf04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf08:	b10a      	cbz	r2, 800bf0e <_printf_common+0x26>
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	0699      	lsls	r1, r3, #26
 800bf12:	bf42      	ittt	mi
 800bf14:	6833      	ldrmi	r3, [r6, #0]
 800bf16:	3302      	addmi	r3, #2
 800bf18:	6033      	strmi	r3, [r6, #0]
 800bf1a:	6825      	ldr	r5, [r4, #0]
 800bf1c:	f015 0506 	ands.w	r5, r5, #6
 800bf20:	d106      	bne.n	800bf30 <_printf_common+0x48>
 800bf22:	f104 0a19 	add.w	sl, r4, #25
 800bf26:	68e3      	ldr	r3, [r4, #12]
 800bf28:	6832      	ldr	r2, [r6, #0]
 800bf2a:	1a9b      	subs	r3, r3, r2
 800bf2c:	42ab      	cmp	r3, r5
 800bf2e:	dc2b      	bgt.n	800bf88 <_printf_common+0xa0>
 800bf30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf34:	1e13      	subs	r3, r2, #0
 800bf36:	6822      	ldr	r2, [r4, #0]
 800bf38:	bf18      	it	ne
 800bf3a:	2301      	movne	r3, #1
 800bf3c:	0692      	lsls	r2, r2, #26
 800bf3e:	d430      	bmi.n	800bfa2 <_printf_common+0xba>
 800bf40:	4649      	mov	r1, r9
 800bf42:	4638      	mov	r0, r7
 800bf44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf48:	47c0      	blx	r8
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	d023      	beq.n	800bf96 <_printf_common+0xae>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	6922      	ldr	r2, [r4, #16]
 800bf52:	f003 0306 	and.w	r3, r3, #6
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	bf14      	ite	ne
 800bf5a:	2500      	movne	r5, #0
 800bf5c:	6833      	ldreq	r3, [r6, #0]
 800bf5e:	f04f 0600 	mov.w	r6, #0
 800bf62:	bf08      	it	eq
 800bf64:	68e5      	ldreq	r5, [r4, #12]
 800bf66:	f104 041a 	add.w	r4, r4, #26
 800bf6a:	bf08      	it	eq
 800bf6c:	1aed      	subeq	r5, r5, r3
 800bf6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf72:	bf08      	it	eq
 800bf74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	bfc4      	itt	gt
 800bf7c:	1a9b      	subgt	r3, r3, r2
 800bf7e:	18ed      	addgt	r5, r5, r3
 800bf80:	42b5      	cmp	r5, r6
 800bf82:	d11a      	bne.n	800bfba <_printf_common+0xd2>
 800bf84:	2000      	movs	r0, #0
 800bf86:	e008      	b.n	800bf9a <_printf_common+0xb2>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	4649      	mov	r1, r9
 800bf8e:	4638      	mov	r0, r7
 800bf90:	47c0      	blx	r8
 800bf92:	3001      	adds	r0, #1
 800bf94:	d103      	bne.n	800bf9e <_printf_common+0xb6>
 800bf96:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	e7c1      	b.n	800bf26 <_printf_common+0x3e>
 800bfa2:	2030      	movs	r0, #48	; 0x30
 800bfa4:	18e1      	adds	r1, r4, r3
 800bfa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfb0:	4422      	add	r2, r4
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfb8:	e7c2      	b.n	800bf40 <_printf_common+0x58>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	47c0      	blx	r8
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d0e6      	beq.n	800bf96 <_printf_common+0xae>
 800bfc8:	3601      	adds	r6, #1
 800bfca:	e7d9      	b.n	800bf80 <_printf_common+0x98>

0800bfcc <_printf_i>:
 800bfcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd0:	7e0f      	ldrb	r7, [r1, #24]
 800bfd2:	4691      	mov	r9, r2
 800bfd4:	2f78      	cmp	r7, #120	; 0x78
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	460c      	mov	r4, r1
 800bfda:	469a      	mov	sl, r3
 800bfdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfe2:	d807      	bhi.n	800bff4 <_printf_i+0x28>
 800bfe4:	2f62      	cmp	r7, #98	; 0x62
 800bfe6:	d80a      	bhi.n	800bffe <_printf_i+0x32>
 800bfe8:	2f00      	cmp	r7, #0
 800bfea:	f000 80d5 	beq.w	800c198 <_printf_i+0x1cc>
 800bfee:	2f58      	cmp	r7, #88	; 0x58
 800bff0:	f000 80c1 	beq.w	800c176 <_printf_i+0x1aa>
 800bff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bffc:	e03a      	b.n	800c074 <_printf_i+0xa8>
 800bffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c002:	2b15      	cmp	r3, #21
 800c004:	d8f6      	bhi.n	800bff4 <_printf_i+0x28>
 800c006:	a101      	add	r1, pc, #4	; (adr r1, 800c00c <_printf_i+0x40>)
 800c008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c00c:	0800c065 	.word	0x0800c065
 800c010:	0800c079 	.word	0x0800c079
 800c014:	0800bff5 	.word	0x0800bff5
 800c018:	0800bff5 	.word	0x0800bff5
 800c01c:	0800bff5 	.word	0x0800bff5
 800c020:	0800bff5 	.word	0x0800bff5
 800c024:	0800c079 	.word	0x0800c079
 800c028:	0800bff5 	.word	0x0800bff5
 800c02c:	0800bff5 	.word	0x0800bff5
 800c030:	0800bff5 	.word	0x0800bff5
 800c034:	0800bff5 	.word	0x0800bff5
 800c038:	0800c17f 	.word	0x0800c17f
 800c03c:	0800c0a5 	.word	0x0800c0a5
 800c040:	0800c139 	.word	0x0800c139
 800c044:	0800bff5 	.word	0x0800bff5
 800c048:	0800bff5 	.word	0x0800bff5
 800c04c:	0800c1a1 	.word	0x0800c1a1
 800c050:	0800bff5 	.word	0x0800bff5
 800c054:	0800c0a5 	.word	0x0800c0a5
 800c058:	0800bff5 	.word	0x0800bff5
 800c05c:	0800bff5 	.word	0x0800bff5
 800c060:	0800c141 	.word	0x0800c141
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	1d1a      	adds	r2, r3, #4
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	602a      	str	r2, [r5, #0]
 800c06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c074:	2301      	movs	r3, #1
 800c076:	e0a0      	b.n	800c1ba <_printf_i+0x1ee>
 800c078:	6820      	ldr	r0, [r4, #0]
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	0607      	lsls	r7, r0, #24
 800c07e:	f103 0104 	add.w	r1, r3, #4
 800c082:	6029      	str	r1, [r5, #0]
 800c084:	d501      	bpl.n	800c08a <_printf_i+0xbe>
 800c086:	681e      	ldr	r6, [r3, #0]
 800c088:	e003      	b.n	800c092 <_printf_i+0xc6>
 800c08a:	0646      	lsls	r6, r0, #25
 800c08c:	d5fb      	bpl.n	800c086 <_printf_i+0xba>
 800c08e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c092:	2e00      	cmp	r6, #0
 800c094:	da03      	bge.n	800c09e <_printf_i+0xd2>
 800c096:	232d      	movs	r3, #45	; 0x2d
 800c098:	4276      	negs	r6, r6
 800c09a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c09e:	230a      	movs	r3, #10
 800c0a0:	4859      	ldr	r0, [pc, #356]	; (800c208 <_printf_i+0x23c>)
 800c0a2:	e012      	b.n	800c0ca <_printf_i+0xfe>
 800c0a4:	682b      	ldr	r3, [r5, #0]
 800c0a6:	6820      	ldr	r0, [r4, #0]
 800c0a8:	1d19      	adds	r1, r3, #4
 800c0aa:	6029      	str	r1, [r5, #0]
 800c0ac:	0605      	lsls	r5, r0, #24
 800c0ae:	d501      	bpl.n	800c0b4 <_printf_i+0xe8>
 800c0b0:	681e      	ldr	r6, [r3, #0]
 800c0b2:	e002      	b.n	800c0ba <_printf_i+0xee>
 800c0b4:	0641      	lsls	r1, r0, #25
 800c0b6:	d5fb      	bpl.n	800c0b0 <_printf_i+0xe4>
 800c0b8:	881e      	ldrh	r6, [r3, #0]
 800c0ba:	2f6f      	cmp	r7, #111	; 0x6f
 800c0bc:	bf0c      	ite	eq
 800c0be:	2308      	moveq	r3, #8
 800c0c0:	230a      	movne	r3, #10
 800c0c2:	4851      	ldr	r0, [pc, #324]	; (800c208 <_printf_i+0x23c>)
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ca:	6865      	ldr	r5, [r4, #4]
 800c0cc:	2d00      	cmp	r5, #0
 800c0ce:	bfa8      	it	ge
 800c0d0:	6821      	ldrge	r1, [r4, #0]
 800c0d2:	60a5      	str	r5, [r4, #8]
 800c0d4:	bfa4      	itt	ge
 800c0d6:	f021 0104 	bicge.w	r1, r1, #4
 800c0da:	6021      	strge	r1, [r4, #0]
 800c0dc:	b90e      	cbnz	r6, 800c0e2 <_printf_i+0x116>
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	d04b      	beq.n	800c17a <_printf_i+0x1ae>
 800c0e2:	4615      	mov	r5, r2
 800c0e4:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0e8:	fb03 6711 	mls	r7, r3, r1, r6
 800c0ec:	5dc7      	ldrb	r7, [r0, r7]
 800c0ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0f2:	4637      	mov	r7, r6
 800c0f4:	42bb      	cmp	r3, r7
 800c0f6:	460e      	mov	r6, r1
 800c0f8:	d9f4      	bls.n	800c0e4 <_printf_i+0x118>
 800c0fa:	2b08      	cmp	r3, #8
 800c0fc:	d10b      	bne.n	800c116 <_printf_i+0x14a>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	07de      	lsls	r6, r3, #31
 800c102:	d508      	bpl.n	800c116 <_printf_i+0x14a>
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	6861      	ldr	r1, [r4, #4]
 800c108:	4299      	cmp	r1, r3
 800c10a:	bfde      	ittt	le
 800c10c:	2330      	movle	r3, #48	; 0x30
 800c10e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c112:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c116:	1b52      	subs	r2, r2, r5
 800c118:	6122      	str	r2, [r4, #16]
 800c11a:	464b      	mov	r3, r9
 800c11c:	4621      	mov	r1, r4
 800c11e:	4640      	mov	r0, r8
 800c120:	f8cd a000 	str.w	sl, [sp]
 800c124:	aa03      	add	r2, sp, #12
 800c126:	f7ff fedf 	bl	800bee8 <_printf_common>
 800c12a:	3001      	adds	r0, #1
 800c12c:	d14a      	bne.n	800c1c4 <_printf_i+0x1f8>
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	b004      	add	sp, #16
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	f043 0320 	orr.w	r3, r3, #32
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	2778      	movs	r7, #120	; 0x78
 800c142:	4832      	ldr	r0, [pc, #200]	; (800c20c <_printf_i+0x240>)
 800c144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	6829      	ldr	r1, [r5, #0]
 800c14c:	061f      	lsls	r7, r3, #24
 800c14e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c152:	d402      	bmi.n	800c15a <_printf_i+0x18e>
 800c154:	065f      	lsls	r7, r3, #25
 800c156:	bf48      	it	mi
 800c158:	b2b6      	uxthmi	r6, r6
 800c15a:	07df      	lsls	r7, r3, #31
 800c15c:	bf48      	it	mi
 800c15e:	f043 0320 	orrmi.w	r3, r3, #32
 800c162:	6029      	str	r1, [r5, #0]
 800c164:	bf48      	it	mi
 800c166:	6023      	strmi	r3, [r4, #0]
 800c168:	b91e      	cbnz	r6, 800c172 <_printf_i+0x1a6>
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	f023 0320 	bic.w	r3, r3, #32
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	2310      	movs	r3, #16
 800c174:	e7a6      	b.n	800c0c4 <_printf_i+0xf8>
 800c176:	4824      	ldr	r0, [pc, #144]	; (800c208 <_printf_i+0x23c>)
 800c178:	e7e4      	b.n	800c144 <_printf_i+0x178>
 800c17a:	4615      	mov	r5, r2
 800c17c:	e7bd      	b.n	800c0fa <_printf_i+0x12e>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	6826      	ldr	r6, [r4, #0]
 800c182:	1d18      	adds	r0, r3, #4
 800c184:	6961      	ldr	r1, [r4, #20]
 800c186:	6028      	str	r0, [r5, #0]
 800c188:	0635      	lsls	r5, r6, #24
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	d501      	bpl.n	800c192 <_printf_i+0x1c6>
 800c18e:	6019      	str	r1, [r3, #0]
 800c190:	e002      	b.n	800c198 <_printf_i+0x1cc>
 800c192:	0670      	lsls	r0, r6, #25
 800c194:	d5fb      	bpl.n	800c18e <_printf_i+0x1c2>
 800c196:	8019      	strh	r1, [r3, #0]
 800c198:	2300      	movs	r3, #0
 800c19a:	4615      	mov	r5, r2
 800c19c:	6123      	str	r3, [r4, #16]
 800c19e:	e7bc      	b.n	800c11a <_printf_i+0x14e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	1d1a      	adds	r2, r3, #4
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	681d      	ldr	r5, [r3, #0]
 800c1aa:	6862      	ldr	r2, [r4, #4]
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 f9d4 	bl	800c55a <memchr>
 800c1b2:	b108      	cbz	r0, 800c1b8 <_printf_i+0x1ec>
 800c1b4:	1b40      	subs	r0, r0, r5
 800c1b6:	6060      	str	r0, [r4, #4]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1c2:	e7aa      	b.n	800c11a <_printf_i+0x14e>
 800c1c4:	462a      	mov	r2, r5
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	47d0      	blx	sl
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d0ad      	beq.n	800c12e <_printf_i+0x162>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	079b      	lsls	r3, r3, #30
 800c1d6:	d413      	bmi.n	800c200 <_printf_i+0x234>
 800c1d8:	68e0      	ldr	r0, [r4, #12]
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	4298      	cmp	r0, r3
 800c1de:	bfb8      	it	lt
 800c1e0:	4618      	movlt	r0, r3
 800c1e2:	e7a6      	b.n	800c132 <_printf_i+0x166>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	47d0      	blx	sl
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d09d      	beq.n	800c12e <_printf_i+0x162>
 800c1f2:	3501      	adds	r5, #1
 800c1f4:	68e3      	ldr	r3, [r4, #12]
 800c1f6:	9903      	ldr	r1, [sp, #12]
 800c1f8:	1a5b      	subs	r3, r3, r1
 800c1fa:	42ab      	cmp	r3, r5
 800c1fc:	dcf2      	bgt.n	800c1e4 <_printf_i+0x218>
 800c1fe:	e7eb      	b.n	800c1d8 <_printf_i+0x20c>
 800c200:	2500      	movs	r5, #0
 800c202:	f104 0619 	add.w	r6, r4, #25
 800c206:	e7f5      	b.n	800c1f4 <_printf_i+0x228>
 800c208:	08010edc 	.word	0x08010edc
 800c20c:	08010eed 	.word	0x08010eed

0800c210 <std>:
 800c210:	2300      	movs	r3, #0
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	e9c0 3300 	strd	r3, r3, [r0]
 800c21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21e:	6083      	str	r3, [r0, #8]
 800c220:	8181      	strh	r1, [r0, #12]
 800c222:	6643      	str	r3, [r0, #100]	; 0x64
 800c224:	81c2      	strh	r2, [r0, #14]
 800c226:	6183      	str	r3, [r0, #24]
 800c228:	4619      	mov	r1, r3
 800c22a:	2208      	movs	r2, #8
 800c22c:	305c      	adds	r0, #92	; 0x5c
 800c22e:	f000 f914 	bl	800c45a <memset>
 800c232:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <std+0x58>)
 800c234:	6224      	str	r4, [r4, #32]
 800c236:	6263      	str	r3, [r4, #36]	; 0x24
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <std+0x5c>)
 800c23a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c23c:	4b0c      	ldr	r3, [pc, #48]	; (800c270 <std+0x60>)
 800c23e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c240:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <std+0x64>)
 800c242:	6323      	str	r3, [r4, #48]	; 0x30
 800c244:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <std+0x68>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d006      	beq.n	800c258 <std+0x48>
 800c24a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c24e:	4294      	cmp	r4, r2
 800c250:	d002      	beq.n	800c258 <std+0x48>
 800c252:	33d0      	adds	r3, #208	; 0xd0
 800c254:	429c      	cmp	r4, r3
 800c256:	d105      	bne.n	800c264 <std+0x54>
 800c258:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c260:	f000 b978 	b.w	800c554 <__retarget_lock_init_recursive>
 800c264:	bd10      	pop	{r4, pc}
 800c266:	bf00      	nop
 800c268:	0800c3d5 	.word	0x0800c3d5
 800c26c:	0800c3f7 	.word	0x0800c3f7
 800c270:	0800c42f 	.word	0x0800c42f
 800c274:	0800c453 	.word	0x0800c453
 800c278:	20001b28 	.word	0x20001b28

0800c27c <stdio_exit_handler>:
 800c27c:	4a02      	ldr	r2, [pc, #8]	; (800c288 <stdio_exit_handler+0xc>)
 800c27e:	4903      	ldr	r1, [pc, #12]	; (800c28c <stdio_exit_handler+0x10>)
 800c280:	4803      	ldr	r0, [pc, #12]	; (800c290 <stdio_exit_handler+0x14>)
 800c282:	f000 b869 	b.w	800c358 <_fwalk_sglue>
 800c286:	bf00      	nop
 800c288:	200000b8 	.word	0x200000b8
 800c28c:	0800df0d 	.word	0x0800df0d
 800c290:	200000c4 	.word	0x200000c4

0800c294 <cleanup_stdio>:
 800c294:	6841      	ldr	r1, [r0, #4]
 800c296:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <cleanup_stdio+0x34>)
 800c298:	b510      	push	{r4, lr}
 800c29a:	4299      	cmp	r1, r3
 800c29c:	4604      	mov	r4, r0
 800c29e:	d001      	beq.n	800c2a4 <cleanup_stdio+0x10>
 800c2a0:	f001 fe34 	bl	800df0c <_fflush_r>
 800c2a4:	68a1      	ldr	r1, [r4, #8]
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <cleanup_stdio+0x38>)
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d002      	beq.n	800c2b2 <cleanup_stdio+0x1e>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f001 fe2d 	bl	800df0c <_fflush_r>
 800c2b2:	68e1      	ldr	r1, [r4, #12]
 800c2b4:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <cleanup_stdio+0x3c>)
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d004      	beq.n	800c2c4 <cleanup_stdio+0x30>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c0:	f001 be24 	b.w	800df0c <_fflush_r>
 800c2c4:	bd10      	pop	{r4, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20001b28 	.word	0x20001b28
 800c2cc:	20001b90 	.word	0x20001b90
 800c2d0:	20001bf8 	.word	0x20001bf8

0800c2d4 <global_stdio_init.part.0>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <global_stdio_init.part.0+0x30>)
 800c2d8:	4c0b      	ldr	r4, [pc, #44]	; (800c308 <global_stdio_init.part.0+0x34>)
 800c2da:	4a0c      	ldr	r2, [pc, #48]	; (800c30c <global_stdio_init.part.0+0x38>)
 800c2dc:	4620      	mov	r0, r4
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7ff ff94 	bl	800c210 <std>
 800c2e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	2109      	movs	r1, #9
 800c2f0:	f7ff ff8e 	bl	800c210 <std>
 800c2f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fe:	2112      	movs	r1, #18
 800c300:	f7ff bf86 	b.w	800c210 <std>
 800c304:	20001c60 	.word	0x20001c60
 800c308:	20001b28 	.word	0x20001b28
 800c30c:	0800c27d 	.word	0x0800c27d

0800c310 <__sfp_lock_acquire>:
 800c310:	4801      	ldr	r0, [pc, #4]	; (800c318 <__sfp_lock_acquire+0x8>)
 800c312:	f000 b920 	b.w	800c556 <__retarget_lock_acquire_recursive>
 800c316:	bf00      	nop
 800c318:	20001c69 	.word	0x20001c69

0800c31c <__sfp_lock_release>:
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <__sfp_lock_release+0x8>)
 800c31e:	f000 b91b 	b.w	800c558 <__retarget_lock_release_recursive>
 800c322:	bf00      	nop
 800c324:	20001c69 	.word	0x20001c69

0800c328 <__sinit>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	4604      	mov	r4, r0
 800c32c:	f7ff fff0 	bl	800c310 <__sfp_lock_acquire>
 800c330:	6a23      	ldr	r3, [r4, #32]
 800c332:	b11b      	cbz	r3, 800c33c <__sinit+0x14>
 800c334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c338:	f7ff bff0 	b.w	800c31c <__sfp_lock_release>
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <__sinit+0x28>)
 800c33e:	6223      	str	r3, [r4, #32]
 800c340:	4b04      	ldr	r3, [pc, #16]	; (800c354 <__sinit+0x2c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f5      	bne.n	800c334 <__sinit+0xc>
 800c348:	f7ff ffc4 	bl	800c2d4 <global_stdio_init.part.0>
 800c34c:	e7f2      	b.n	800c334 <__sinit+0xc>
 800c34e:	bf00      	nop
 800c350:	0800c295 	.word	0x0800c295
 800c354:	20001c60 	.word	0x20001c60

0800c358 <_fwalk_sglue>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4607      	mov	r7, r0
 800c35e:	4688      	mov	r8, r1
 800c360:	4614      	mov	r4, r2
 800c362:	2600      	movs	r6, #0
 800c364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c368:	f1b9 0901 	subs.w	r9, r9, #1
 800c36c:	d505      	bpl.n	800c37a <_fwalk_sglue+0x22>
 800c36e:	6824      	ldr	r4, [r4, #0]
 800c370:	2c00      	cmp	r4, #0
 800c372:	d1f7      	bne.n	800c364 <_fwalk_sglue+0xc>
 800c374:	4630      	mov	r0, r6
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d907      	bls.n	800c390 <_fwalk_sglue+0x38>
 800c380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c384:	3301      	adds	r3, #1
 800c386:	d003      	beq.n	800c390 <_fwalk_sglue+0x38>
 800c388:	4629      	mov	r1, r5
 800c38a:	4638      	mov	r0, r7
 800c38c:	47c0      	blx	r8
 800c38e:	4306      	orrs	r6, r0
 800c390:	3568      	adds	r5, #104	; 0x68
 800c392:	e7e9      	b.n	800c368 <_fwalk_sglue+0x10>

0800c394 <siprintf>:
 800c394:	b40e      	push	{r1, r2, r3}
 800c396:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c39a:	b500      	push	{lr}
 800c39c:	b09c      	sub	sp, #112	; 0x70
 800c39e:	ab1d      	add	r3, sp, #116	; 0x74
 800c3a0:	9002      	str	r0, [sp, #8]
 800c3a2:	9006      	str	r0, [sp, #24]
 800c3a4:	9107      	str	r1, [sp, #28]
 800c3a6:	9104      	str	r1, [sp, #16]
 800c3a8:	4808      	ldr	r0, [pc, #32]	; (800c3cc <siprintf+0x38>)
 800c3aa:	4909      	ldr	r1, [pc, #36]	; (800c3d0 <siprintf+0x3c>)
 800c3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b0:	9105      	str	r1, [sp, #20]
 800c3b2:	6800      	ldr	r0, [r0, #0]
 800c3b4:	a902      	add	r1, sp, #8
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f001 fc28 	bl	800dc0c <_svfiprintf_r>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	9b02      	ldr	r3, [sp, #8]
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	b01c      	add	sp, #112	; 0x70
 800c3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c8:	b003      	add	sp, #12
 800c3ca:	4770      	bx	lr
 800c3cc:	20000110 	.word	0x20000110
 800c3d0:	ffff0208 	.word	0xffff0208

0800c3d4 <__sread>:
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3dc:	f000 f86c 	bl	800c4b8 <_read_r>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	bfab      	itete	ge
 800c3e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3e8:	181b      	addge	r3, r3, r0
 800c3ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3ee:	bfac      	ite	ge
 800c3f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3f2:	81a3      	strhlt	r3, [r4, #12]
 800c3f4:	bd10      	pop	{r4, pc}

0800c3f6 <__swrite>:
 800c3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fa:	461f      	mov	r7, r3
 800c3fc:	898b      	ldrh	r3, [r1, #12]
 800c3fe:	4605      	mov	r5, r0
 800c400:	05db      	lsls	r3, r3, #23
 800c402:	460c      	mov	r4, r1
 800c404:	4616      	mov	r6, r2
 800c406:	d505      	bpl.n	800c414 <__swrite+0x1e>
 800c408:	2302      	movs	r3, #2
 800c40a:	2200      	movs	r2, #0
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	f000 f840 	bl	800c494 <_lseek_r>
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	4632      	mov	r2, r6
 800c418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c41c:	81a3      	strh	r3, [r4, #12]
 800c41e:	4628      	mov	r0, r5
 800c420:	463b      	mov	r3, r7
 800c422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c42a:	f000 b857 	b.w	800c4dc <_write_r>

0800c42e <__sseek>:
 800c42e:	b510      	push	{r4, lr}
 800c430:	460c      	mov	r4, r1
 800c432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c436:	f000 f82d 	bl	800c494 <_lseek_r>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	bf15      	itete	ne
 800c440:	6560      	strne	r0, [r4, #84]	; 0x54
 800c442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c44a:	81a3      	strheq	r3, [r4, #12]
 800c44c:	bf18      	it	ne
 800c44e:	81a3      	strhne	r3, [r4, #12]
 800c450:	bd10      	pop	{r4, pc}

0800c452 <__sclose>:
 800c452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c456:	f000 b80d 	b.w	800c474 <_close_r>

0800c45a <memset>:
 800c45a:	4603      	mov	r3, r0
 800c45c:	4402      	add	r2, r0
 800c45e:	4293      	cmp	r3, r2
 800c460:	d100      	bne.n	800c464 <memset+0xa>
 800c462:	4770      	bx	lr
 800c464:	f803 1b01 	strb.w	r1, [r3], #1
 800c468:	e7f9      	b.n	800c45e <memset+0x4>
	...

0800c46c <_localeconv_r>:
 800c46c:	4800      	ldr	r0, [pc, #0]	; (800c470 <_localeconv_r+0x4>)
 800c46e:	4770      	bx	lr
 800c470:	20000204 	.word	0x20000204

0800c474 <_close_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	2300      	movs	r3, #0
 800c478:	4d05      	ldr	r5, [pc, #20]	; (800c490 <_close_r+0x1c>)
 800c47a:	4604      	mov	r4, r0
 800c47c:	4608      	mov	r0, r1
 800c47e:	602b      	str	r3, [r5, #0]
 800c480:	f7fb f974 	bl	800776c <_close>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_close_r+0x1a>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_close_r+0x1a>
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	20001c64 	.word	0x20001c64

0800c494 <_lseek_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	2200      	movs	r2, #0
 800c49e:	4d05      	ldr	r5, [pc, #20]	; (800c4b4 <_lseek_r+0x20>)
 800c4a0:	602a      	str	r2, [r5, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7fb f986 	bl	80077b4 <_lseek>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_lseek_r+0x1e>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_lseek_r+0x1e>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20001c64 	.word	0x20001c64

0800c4b8 <_read_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	4611      	mov	r1, r2
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4d05      	ldr	r5, [pc, #20]	; (800c4d8 <_read_r+0x20>)
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7fb f917 	bl	80076fa <_read>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_read_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_read_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20001c64 	.word	0x20001c64

0800c4dc <_write_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4d05      	ldr	r5, [pc, #20]	; (800c4fc <_write_r+0x20>)
 800c4e8:	602a      	str	r2, [r5, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7fb f922 	bl	8007734 <_write>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_write_r+0x1e>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_write_r+0x1e>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20001c64 	.word	0x20001c64

0800c500 <__errno>:
 800c500:	4b01      	ldr	r3, [pc, #4]	; (800c508 <__errno+0x8>)
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	20000110 	.word	0x20000110

0800c50c <__libc_init_array>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	2600      	movs	r6, #0
 800c510:	4d0c      	ldr	r5, [pc, #48]	; (800c544 <__libc_init_array+0x38>)
 800c512:	4c0d      	ldr	r4, [pc, #52]	; (800c548 <__libc_init_array+0x3c>)
 800c514:	1b64      	subs	r4, r4, r5
 800c516:	10a4      	asrs	r4, r4, #2
 800c518:	42a6      	cmp	r6, r4
 800c51a:	d109      	bne.n	800c530 <__libc_init_array+0x24>
 800c51c:	f002 ff92 	bl	800f444 <_init>
 800c520:	2600      	movs	r6, #0
 800c522:	4d0a      	ldr	r5, [pc, #40]	; (800c54c <__libc_init_array+0x40>)
 800c524:	4c0a      	ldr	r4, [pc, #40]	; (800c550 <__libc_init_array+0x44>)
 800c526:	1b64      	subs	r4, r4, r5
 800c528:	10a4      	asrs	r4, r4, #2
 800c52a:	42a6      	cmp	r6, r4
 800c52c:	d105      	bne.n	800c53a <__libc_init_array+0x2e>
 800c52e:	bd70      	pop	{r4, r5, r6, pc}
 800c530:	f855 3b04 	ldr.w	r3, [r5], #4
 800c534:	4798      	blx	r3
 800c536:	3601      	adds	r6, #1
 800c538:	e7ee      	b.n	800c518 <__libc_init_array+0xc>
 800c53a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c53e:	4798      	blx	r3
 800c540:	3601      	adds	r6, #1
 800c542:	e7f2      	b.n	800c52a <__libc_init_array+0x1e>
 800c544:	08011278 	.word	0x08011278
 800c548:	08011278 	.word	0x08011278
 800c54c:	08011278 	.word	0x08011278
 800c550:	0801127c 	.word	0x0801127c

0800c554 <__retarget_lock_init_recursive>:
 800c554:	4770      	bx	lr

0800c556 <__retarget_lock_acquire_recursive>:
 800c556:	4770      	bx	lr

0800c558 <__retarget_lock_release_recursive>:
 800c558:	4770      	bx	lr

0800c55a <memchr>:
 800c55a:	4603      	mov	r3, r0
 800c55c:	b510      	push	{r4, lr}
 800c55e:	b2c9      	uxtb	r1, r1
 800c560:	4402      	add	r2, r0
 800c562:	4293      	cmp	r3, r2
 800c564:	4618      	mov	r0, r3
 800c566:	d101      	bne.n	800c56c <memchr+0x12>
 800c568:	2000      	movs	r0, #0
 800c56a:	e003      	b.n	800c574 <memchr+0x1a>
 800c56c:	7804      	ldrb	r4, [r0, #0]
 800c56e:	3301      	adds	r3, #1
 800c570:	428c      	cmp	r4, r1
 800c572:	d1f6      	bne.n	800c562 <memchr+0x8>
 800c574:	bd10      	pop	{r4, pc}

0800c576 <memcpy>:
 800c576:	440a      	add	r2, r1
 800c578:	4291      	cmp	r1, r2
 800c57a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c57e:	d100      	bne.n	800c582 <memcpy+0xc>
 800c580:	4770      	bx	lr
 800c582:	b510      	push	{r4, lr}
 800c584:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c588:	4291      	cmp	r1, r2
 800c58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c58e:	d1f9      	bne.n	800c584 <memcpy+0xe>
 800c590:	bd10      	pop	{r4, pc}

0800c592 <quorem>:
 800c592:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c596:	6903      	ldr	r3, [r0, #16]
 800c598:	690c      	ldr	r4, [r1, #16]
 800c59a:	4607      	mov	r7, r0
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	db7f      	blt.n	800c6a0 <quorem+0x10e>
 800c5a0:	3c01      	subs	r4, #1
 800c5a2:	f100 0514 	add.w	r5, r0, #20
 800c5a6:	f101 0814 	add.w	r8, r1, #20
 800c5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5c8:	d331      	bcc.n	800c62e <quorem+0x9c>
 800c5ca:	f04f 0e00 	mov.w	lr, #0
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	46ac      	mov	ip, r5
 800c5d2:	46f2      	mov	sl, lr
 800c5d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5d8:	b293      	uxth	r3, r2
 800c5da:	fb06 e303 	mla	r3, r6, r3, lr
 800c5de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5e2:	0c1a      	lsrs	r2, r3, #16
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	fb06 220e 	mla	r2, r6, lr, r2
 800c5ea:	ebaa 0303 	sub.w	r3, sl, r3
 800c5ee:	f8dc a000 	ldr.w	sl, [ip]
 800c5f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5f6:	fa1f fa8a 	uxth.w	sl, sl
 800c5fa:	4453      	add	r3, sl
 800c5fc:	f8dc a000 	ldr.w	sl, [ip]
 800c600:	b292      	uxth	r2, r2
 800c602:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c606:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c610:	4581      	cmp	r9, r0
 800c612:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c616:	f84c 3b04 	str.w	r3, [ip], #4
 800c61a:	d2db      	bcs.n	800c5d4 <quorem+0x42>
 800c61c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c620:	b92b      	cbnz	r3, 800c62e <quorem+0x9c>
 800c622:	9b01      	ldr	r3, [sp, #4]
 800c624:	3b04      	subs	r3, #4
 800c626:	429d      	cmp	r5, r3
 800c628:	461a      	mov	r2, r3
 800c62a:	d32d      	bcc.n	800c688 <quorem+0xf6>
 800c62c:	613c      	str	r4, [r7, #16]
 800c62e:	4638      	mov	r0, r7
 800c630:	f001 f994 	bl	800d95c <__mcmp>
 800c634:	2800      	cmp	r0, #0
 800c636:	db23      	blt.n	800c680 <quorem+0xee>
 800c638:	4629      	mov	r1, r5
 800c63a:	2000      	movs	r0, #0
 800c63c:	3601      	adds	r6, #1
 800c63e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c642:	f8d1 c000 	ldr.w	ip, [r1]
 800c646:	b293      	uxth	r3, r2
 800c648:	1ac3      	subs	r3, r0, r3
 800c64a:	0c12      	lsrs	r2, r2, #16
 800c64c:	fa1f f08c 	uxth.w	r0, ip
 800c650:	4403      	add	r3, r0
 800c652:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c656:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c660:	45c1      	cmp	r9, r8
 800c662:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c666:	f841 3b04 	str.w	r3, [r1], #4
 800c66a:	d2e8      	bcs.n	800c63e <quorem+0xac>
 800c66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c674:	b922      	cbnz	r2, 800c680 <quorem+0xee>
 800c676:	3b04      	subs	r3, #4
 800c678:	429d      	cmp	r5, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	d30a      	bcc.n	800c694 <quorem+0x102>
 800c67e:	613c      	str	r4, [r7, #16]
 800c680:	4630      	mov	r0, r6
 800c682:	b003      	add	sp, #12
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	6812      	ldr	r2, [r2, #0]
 800c68a:	3b04      	subs	r3, #4
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	d1cd      	bne.n	800c62c <quorem+0x9a>
 800c690:	3c01      	subs	r4, #1
 800c692:	e7c8      	b.n	800c626 <quorem+0x94>
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	3b04      	subs	r3, #4
 800c698:	2a00      	cmp	r2, #0
 800c69a:	d1f0      	bne.n	800c67e <quorem+0xec>
 800c69c:	3c01      	subs	r4, #1
 800c69e:	e7eb      	b.n	800c678 <quorem+0xe6>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e7ee      	b.n	800c682 <quorem+0xf0>
 800c6a4:	0000      	movs	r0, r0
	...

0800c6a8 <_dtoa_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	4616      	mov	r6, r2
 800c6ae:	461f      	mov	r7, r3
 800c6b0:	69c4      	ldr	r4, [r0, #28]
 800c6b2:	b099      	sub	sp, #100	; 0x64
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c6ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c6be:	b974      	cbnz	r4, 800c6de <_dtoa_r+0x36>
 800c6c0:	2010      	movs	r0, #16
 800c6c2:	f000 fe1d 	bl	800d300 <malloc>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	61e8      	str	r0, [r5, #28]
 800c6ca:	b920      	cbnz	r0, 800c6d6 <_dtoa_r+0x2e>
 800c6cc:	21ef      	movs	r1, #239	; 0xef
 800c6ce:	4bac      	ldr	r3, [pc, #688]	; (800c980 <_dtoa_r+0x2d8>)
 800c6d0:	48ac      	ldr	r0, [pc, #688]	; (800c984 <_dtoa_r+0x2dc>)
 800c6d2:	f001 fc6d 	bl	800dfb0 <__assert_func>
 800c6d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6da:	6004      	str	r4, [r0, #0]
 800c6dc:	60c4      	str	r4, [r0, #12]
 800c6de:	69eb      	ldr	r3, [r5, #28]
 800c6e0:	6819      	ldr	r1, [r3, #0]
 800c6e2:	b151      	cbz	r1, 800c6fa <_dtoa_r+0x52>
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	4093      	lsls	r3, r2
 800c6ea:	604a      	str	r2, [r1, #4]
 800c6ec:	608b      	str	r3, [r1, #8]
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f000 fefa 	bl	800d4e8 <_Bfree>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	69eb      	ldr	r3, [r5, #28]
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	1e3b      	subs	r3, r7, #0
 800c6fc:	bfaf      	iteee	ge
 800c6fe:	2300      	movge	r3, #0
 800c700:	2201      	movlt	r2, #1
 800c702:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c706:	9305      	strlt	r3, [sp, #20]
 800c708:	bfa8      	it	ge
 800c70a:	f8c8 3000 	strge.w	r3, [r8]
 800c70e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c712:	4b9d      	ldr	r3, [pc, #628]	; (800c988 <_dtoa_r+0x2e0>)
 800c714:	bfb8      	it	lt
 800c716:	f8c8 2000 	strlt.w	r2, [r8]
 800c71a:	ea33 0309 	bics.w	r3, r3, r9
 800c71e:	d119      	bne.n	800c754 <_dtoa_r+0xac>
 800c720:	f242 730f 	movw	r3, #9999	; 0x270f
 800c724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c72c:	4333      	orrs	r3, r6
 800c72e:	f000 8589 	beq.w	800d244 <_dtoa_r+0xb9c>
 800c732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c734:	b953      	cbnz	r3, 800c74c <_dtoa_r+0xa4>
 800c736:	4b95      	ldr	r3, [pc, #596]	; (800c98c <_dtoa_r+0x2e4>)
 800c738:	e023      	b.n	800c782 <_dtoa_r+0xda>
 800c73a:	4b95      	ldr	r3, [pc, #596]	; (800c990 <_dtoa_r+0x2e8>)
 800c73c:	9303      	str	r3, [sp, #12]
 800c73e:	3308      	adds	r3, #8
 800c740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	9803      	ldr	r0, [sp, #12]
 800c746:	b019      	add	sp, #100	; 0x64
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	4b8f      	ldr	r3, [pc, #572]	; (800c98c <_dtoa_r+0x2e4>)
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	3303      	adds	r3, #3
 800c752:	e7f5      	b.n	800c740 <_dtoa_r+0x98>
 800c754:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c758:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c75c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c760:	2200      	movs	r2, #0
 800c762:	2300      	movs	r3, #0
 800c764:	f7f4 f920 	bl	80009a8 <__aeabi_dcmpeq>
 800c768:	4680      	mov	r8, r0
 800c76a:	b160      	cbz	r0, 800c786 <_dtoa_r+0xde>
 800c76c:	2301      	movs	r3, #1
 800c76e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 8562 	beq.w	800d23e <_dtoa_r+0xb96>
 800c77a:	4b86      	ldr	r3, [pc, #536]	; (800c994 <_dtoa_r+0x2ec>)
 800c77c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	3b01      	subs	r3, #1
 800c782:	9303      	str	r3, [sp, #12]
 800c784:	e7de      	b.n	800c744 <_dtoa_r+0x9c>
 800c786:	ab16      	add	r3, sp, #88	; 0x58
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	ab17      	add	r3, sp, #92	; 0x5c
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	4628      	mov	r0, r5
 800c790:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c794:	f001 f98a 	bl	800daac <__d2b>
 800c798:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c79c:	4682      	mov	sl, r0
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	d07e      	beq.n	800c8a0 <_dtoa_r+0x1f8>
 800c7a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c7ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c7b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c7b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c7bc:	4619      	mov	r1, r3
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4b75      	ldr	r3, [pc, #468]	; (800c998 <_dtoa_r+0x2f0>)
 800c7c2:	f7f3 fcd1 	bl	8000168 <__aeabi_dsub>
 800c7c6:	a368      	add	r3, pc, #416	; (adr r3, 800c968 <_dtoa_r+0x2c0>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	f7f3 fe84 	bl	80004d8 <__aeabi_dmul>
 800c7d0:	a367      	add	r3, pc, #412	; (adr r3, 800c970 <_dtoa_r+0x2c8>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 fcc9 	bl	800016c <__adddf3>
 800c7da:	4606      	mov	r6, r0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	460f      	mov	r7, r1
 800c7e0:	f7f3 fe10 	bl	8000404 <__aeabi_i2d>
 800c7e4:	a364      	add	r3, pc, #400	; (adr r3, 800c978 <_dtoa_r+0x2d0>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fe75 	bl	80004d8 <__aeabi_dmul>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f3 fcb9 	bl	800016c <__adddf3>
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	f7f4 f91b 	bl	8000a38 <__aeabi_d2iz>
 800c802:	2200      	movs	r2, #0
 800c804:	4683      	mov	fp, r0
 800c806:	2300      	movs	r3, #0
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f4 f8d6 	bl	80009bc <__aeabi_dcmplt>
 800c810:	b148      	cbz	r0, 800c826 <_dtoa_r+0x17e>
 800c812:	4658      	mov	r0, fp
 800c814:	f7f3 fdf6 	bl	8000404 <__aeabi_i2d>
 800c818:	4632      	mov	r2, r6
 800c81a:	463b      	mov	r3, r7
 800c81c:	f7f4 f8c4 	bl	80009a8 <__aeabi_dcmpeq>
 800c820:	b908      	cbnz	r0, 800c826 <_dtoa_r+0x17e>
 800c822:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c826:	f1bb 0f16 	cmp.w	fp, #22
 800c82a:	d857      	bhi.n	800c8dc <_dtoa_r+0x234>
 800c82c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c830:	4b5a      	ldr	r3, [pc, #360]	; (800c99c <_dtoa_r+0x2f4>)
 800c832:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	f7f4 f8bf 	bl	80009bc <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d04e      	beq.n	800c8e0 <_dtoa_r+0x238>
 800c842:	2300      	movs	r3, #0
 800c844:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c848:	930f      	str	r3, [sp, #60]	; 0x3c
 800c84a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c84c:	1b1b      	subs	r3, r3, r4
 800c84e:	1e5a      	subs	r2, r3, #1
 800c850:	bf46      	itte	mi
 800c852:	f1c3 0901 	rsbmi	r9, r3, #1
 800c856:	2300      	movmi	r3, #0
 800c858:	f04f 0900 	movpl.w	r9, #0
 800c85c:	9209      	str	r2, [sp, #36]	; 0x24
 800c85e:	bf48      	it	mi
 800c860:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c862:	f1bb 0f00 	cmp.w	fp, #0
 800c866:	db3d      	blt.n	800c8e4 <_dtoa_r+0x23c>
 800c868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c86e:	445b      	add	r3, fp
 800c870:	9309      	str	r3, [sp, #36]	; 0x24
 800c872:	2300      	movs	r3, #0
 800c874:	930a      	str	r3, [sp, #40]	; 0x28
 800c876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c878:	2b09      	cmp	r3, #9
 800c87a:	d867      	bhi.n	800c94c <_dtoa_r+0x2a4>
 800c87c:	2b05      	cmp	r3, #5
 800c87e:	bfc4      	itt	gt
 800c880:	3b04      	subgt	r3, #4
 800c882:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c886:	bfc8      	it	gt
 800c888:	2400      	movgt	r4, #0
 800c88a:	f1a3 0302 	sub.w	r3, r3, #2
 800c88e:	bfd8      	it	le
 800c890:	2401      	movle	r4, #1
 800c892:	2b03      	cmp	r3, #3
 800c894:	f200 8086 	bhi.w	800c9a4 <_dtoa_r+0x2fc>
 800c898:	e8df f003 	tbb	[pc, r3]
 800c89c:	5637392c 	.word	0x5637392c
 800c8a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c8a4:	441c      	add	r4, r3
 800c8a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c8aa:	2b20      	cmp	r3, #32
 800c8ac:	bfc1      	itttt	gt
 800c8ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8b2:	fa09 f903 	lslgt.w	r9, r9, r3
 800c8b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800c8ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c8be:	bfd6      	itet	le
 800c8c0:	f1c3 0320 	rsble	r3, r3, #32
 800c8c4:	ea49 0003 	orrgt.w	r0, r9, r3
 800c8c8:	fa06 f003 	lslle.w	r0, r6, r3
 800c8cc:	f7f3 fd8a 	bl	80003e4 <__aeabi_ui2d>
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c8d6:	3c01      	subs	r4, #1
 800c8d8:	9213      	str	r2, [sp, #76]	; 0x4c
 800c8da:	e76f      	b.n	800c7bc <_dtoa_r+0x114>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e7b3      	b.n	800c848 <_dtoa_r+0x1a0>
 800c8e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c8e2:	e7b2      	b.n	800c84a <_dtoa_r+0x1a2>
 800c8e4:	f1cb 0300 	rsb	r3, fp, #0
 800c8e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	eba9 090b 	sub.w	r9, r9, fp
 800c8f0:	930e      	str	r3, [sp, #56]	; 0x38
 800c8f2:	e7c0      	b.n	800c876 <_dtoa_r+0x1ce>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dc55      	bgt.n	800c9aa <_dtoa_r+0x302>
 800c8fe:	2301      	movs	r3, #1
 800c900:	461a      	mov	r2, r3
 800c902:	9306      	str	r3, [sp, #24]
 800c904:	9308      	str	r3, [sp, #32]
 800c906:	9223      	str	r2, [sp, #140]	; 0x8c
 800c908:	e00b      	b.n	800c922 <_dtoa_r+0x27a>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e7f3      	b.n	800c8f6 <_dtoa_r+0x24e>
 800c90e:	2300      	movs	r3, #0
 800c910:	930b      	str	r3, [sp, #44]	; 0x2c
 800c912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c914:	445b      	add	r3, fp
 800c916:	9306      	str	r3, [sp, #24]
 800c918:	3301      	adds	r3, #1
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	9308      	str	r3, [sp, #32]
 800c91e:	bfb8      	it	lt
 800c920:	2301      	movlt	r3, #1
 800c922:	2100      	movs	r1, #0
 800c924:	2204      	movs	r2, #4
 800c926:	69e8      	ldr	r0, [r5, #28]
 800c928:	f102 0614 	add.w	r6, r2, #20
 800c92c:	429e      	cmp	r6, r3
 800c92e:	d940      	bls.n	800c9b2 <_dtoa_r+0x30a>
 800c930:	6041      	str	r1, [r0, #4]
 800c932:	4628      	mov	r0, r5
 800c934:	f000 fd98 	bl	800d468 <_Balloc>
 800c938:	9003      	str	r0, [sp, #12]
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d13c      	bne.n	800c9b8 <_dtoa_r+0x310>
 800c93e:	4602      	mov	r2, r0
 800c940:	f240 11af 	movw	r1, #431	; 0x1af
 800c944:	4b16      	ldr	r3, [pc, #88]	; (800c9a0 <_dtoa_r+0x2f8>)
 800c946:	e6c3      	b.n	800c6d0 <_dtoa_r+0x28>
 800c948:	2301      	movs	r3, #1
 800c94a:	e7e1      	b.n	800c910 <_dtoa_r+0x268>
 800c94c:	2401      	movs	r4, #1
 800c94e:	2300      	movs	r3, #0
 800c950:	940b      	str	r4, [sp, #44]	; 0x2c
 800c952:	9322      	str	r3, [sp, #136]	; 0x88
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	2200      	movs	r2, #0
 800c95a:	9306      	str	r3, [sp, #24]
 800c95c:	9308      	str	r3, [sp, #32]
 800c95e:	2312      	movs	r3, #18
 800c960:	e7d1      	b.n	800c906 <_dtoa_r+0x25e>
 800c962:	bf00      	nop
 800c964:	f3af 8000 	nop.w
 800c968:	636f4361 	.word	0x636f4361
 800c96c:	3fd287a7 	.word	0x3fd287a7
 800c970:	8b60c8b3 	.word	0x8b60c8b3
 800c974:	3fc68a28 	.word	0x3fc68a28
 800c978:	509f79fb 	.word	0x509f79fb
 800c97c:	3fd34413 	.word	0x3fd34413
 800c980:	08010f0b 	.word	0x08010f0b
 800c984:	08010f22 	.word	0x08010f22
 800c988:	7ff00000 	.word	0x7ff00000
 800c98c:	08010f07 	.word	0x08010f07
 800c990:	08010efe 	.word	0x08010efe
 800c994:	08010edb 	.word	0x08010edb
 800c998:	3ff80000 	.word	0x3ff80000
 800c99c:	08011010 	.word	0x08011010
 800c9a0:	08010f7a 	.word	0x08010f7a
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9a8:	e7d4      	b.n	800c954 <_dtoa_r+0x2ac>
 800c9aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9ac:	9306      	str	r3, [sp, #24]
 800c9ae:	9308      	str	r3, [sp, #32]
 800c9b0:	e7b7      	b.n	800c922 <_dtoa_r+0x27a>
 800c9b2:	3101      	adds	r1, #1
 800c9b4:	0052      	lsls	r2, r2, #1
 800c9b6:	e7b7      	b.n	800c928 <_dtoa_r+0x280>
 800c9b8:	69eb      	ldr	r3, [r5, #28]
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	9b08      	ldr	r3, [sp, #32]
 800c9c0:	2b0e      	cmp	r3, #14
 800c9c2:	f200 80a8 	bhi.w	800cb16 <_dtoa_r+0x46e>
 800c9c6:	2c00      	cmp	r4, #0
 800c9c8:	f000 80a5 	beq.w	800cb16 <_dtoa_r+0x46e>
 800c9cc:	f1bb 0f00 	cmp.w	fp, #0
 800c9d0:	dd34      	ble.n	800ca3c <_dtoa_r+0x394>
 800c9d2:	4b9a      	ldr	r3, [pc, #616]	; (800cc3c <_dtoa_r+0x594>)
 800c9d4:	f00b 020f 	and.w	r2, fp, #15
 800c9d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c9e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c9e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800c9ec:	d016      	beq.n	800ca1c <_dtoa_r+0x374>
 800c9ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c9f2:	4b93      	ldr	r3, [pc, #588]	; (800cc40 <_dtoa_r+0x598>)
 800c9f4:	2703      	movs	r7, #3
 800c9f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9fa:	f7f3 fe97 	bl	800072c <__aeabi_ddiv>
 800c9fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca02:	f004 040f 	and.w	r4, r4, #15
 800ca06:	4e8e      	ldr	r6, [pc, #568]	; (800cc40 <_dtoa_r+0x598>)
 800ca08:	b954      	cbnz	r4, 800ca20 <_dtoa_r+0x378>
 800ca0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca12:	f7f3 fe8b 	bl	800072c <__aeabi_ddiv>
 800ca16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca1a:	e029      	b.n	800ca70 <_dtoa_r+0x3c8>
 800ca1c:	2702      	movs	r7, #2
 800ca1e:	e7f2      	b.n	800ca06 <_dtoa_r+0x35e>
 800ca20:	07e1      	lsls	r1, r4, #31
 800ca22:	d508      	bpl.n	800ca36 <_dtoa_r+0x38e>
 800ca24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca2c:	f7f3 fd54 	bl	80004d8 <__aeabi_dmul>
 800ca30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ca34:	3701      	adds	r7, #1
 800ca36:	1064      	asrs	r4, r4, #1
 800ca38:	3608      	adds	r6, #8
 800ca3a:	e7e5      	b.n	800ca08 <_dtoa_r+0x360>
 800ca3c:	f000 80a5 	beq.w	800cb8a <_dtoa_r+0x4e2>
 800ca40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca44:	f1cb 0400 	rsb	r4, fp, #0
 800ca48:	4b7c      	ldr	r3, [pc, #496]	; (800cc3c <_dtoa_r+0x594>)
 800ca4a:	f004 020f 	and.w	r2, r4, #15
 800ca4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fd3f 	bl	80004d8 <__aeabi_dmul>
 800ca5a:	2702      	movs	r7, #2
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca62:	4e77      	ldr	r6, [pc, #476]	; (800cc40 <_dtoa_r+0x598>)
 800ca64:	1124      	asrs	r4, r4, #4
 800ca66:	2c00      	cmp	r4, #0
 800ca68:	f040 8084 	bne.w	800cb74 <_dtoa_r+0x4cc>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1d2      	bne.n	800ca16 <_dtoa_r+0x36e>
 800ca70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ca74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ca78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 8087 	beq.w	800cb8e <_dtoa_r+0x4e6>
 800ca80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca84:	2200      	movs	r2, #0
 800ca86:	4b6f      	ldr	r3, [pc, #444]	; (800cc44 <_dtoa_r+0x59c>)
 800ca88:	f7f3 ff98 	bl	80009bc <__aeabi_dcmplt>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d07e      	beq.n	800cb8e <_dtoa_r+0x4e6>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d07b      	beq.n	800cb8e <_dtoa_r+0x4e6>
 800ca96:	9b06      	ldr	r3, [sp, #24]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dd38      	ble.n	800cb0e <_dtoa_r+0x466>
 800ca9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800caa0:	2200      	movs	r2, #0
 800caa2:	4b69      	ldr	r3, [pc, #420]	; (800cc48 <_dtoa_r+0x5a0>)
 800caa4:	f7f3 fd18 	bl	80004d8 <__aeabi_dmul>
 800caa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caac:	9c06      	ldr	r4, [sp, #24]
 800caae:	f10b 38ff 	add.w	r8, fp, #4294967295
 800cab2:	3701      	adds	r7, #1
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7f3 fca5 	bl	8000404 <__aeabi_i2d>
 800caba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cabe:	f7f3 fd0b 	bl	80004d8 <__aeabi_dmul>
 800cac2:	2200      	movs	r2, #0
 800cac4:	4b61      	ldr	r3, [pc, #388]	; (800cc4c <_dtoa_r+0x5a4>)
 800cac6:	f7f3 fb51 	bl	800016c <__adddf3>
 800caca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cace:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cad2:	9611      	str	r6, [sp, #68]	; 0x44
 800cad4:	2c00      	cmp	r4, #0
 800cad6:	d15d      	bne.n	800cb94 <_dtoa_r+0x4ec>
 800cad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cadc:	2200      	movs	r2, #0
 800cade:	4b5c      	ldr	r3, [pc, #368]	; (800cc50 <_dtoa_r+0x5a8>)
 800cae0:	f7f3 fb42 	bl	8000168 <__aeabi_dsub>
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800caec:	4633      	mov	r3, r6
 800caee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800caf0:	f7f3 ff82 	bl	80009f8 <__aeabi_dcmpgt>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f040 8295 	bne.w	800d024 <_dtoa_r+0x97c>
 800cafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cafe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb04:	f7f3 ff5a 	bl	80009bc <__aeabi_dcmplt>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	f040 8289 	bne.w	800d020 <_dtoa_r+0x978>
 800cb0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cb12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f2c0 8151 	blt.w	800cdc0 <_dtoa_r+0x718>
 800cb1e:	f1bb 0f0e 	cmp.w	fp, #14
 800cb22:	f300 814d 	bgt.w	800cdc0 <_dtoa_r+0x718>
 800cb26:	4b45      	ldr	r3, [pc, #276]	; (800cc3c <_dtoa_r+0x594>)
 800cb28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cb34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f280 80da 	bge.w	800ccf0 <_dtoa_r+0x648>
 800cb3c:	9b08      	ldr	r3, [sp, #32]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f300 80d6 	bgt.w	800ccf0 <_dtoa_r+0x648>
 800cb44:	f040 826b 	bne.w	800d01e <_dtoa_r+0x976>
 800cb48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4b40      	ldr	r3, [pc, #256]	; (800cc50 <_dtoa_r+0x5a8>)
 800cb50:	f7f3 fcc2 	bl	80004d8 <__aeabi_dmul>
 800cb54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb58:	f7f3 ff44 	bl	80009e4 <__aeabi_dcmpge>
 800cb5c:	9c08      	ldr	r4, [sp, #32]
 800cb5e:	4626      	mov	r6, r4
 800cb60:	2800      	cmp	r0, #0
 800cb62:	f040 8241 	bne.w	800cfe8 <_dtoa_r+0x940>
 800cb66:	2331      	movs	r3, #49	; 0x31
 800cb68:	9f03      	ldr	r7, [sp, #12]
 800cb6a:	f10b 0b01 	add.w	fp, fp, #1
 800cb6e:	f807 3b01 	strb.w	r3, [r7], #1
 800cb72:	e23d      	b.n	800cff0 <_dtoa_r+0x948>
 800cb74:	07e2      	lsls	r2, r4, #31
 800cb76:	d505      	bpl.n	800cb84 <_dtoa_r+0x4dc>
 800cb78:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb7c:	f7f3 fcac 	bl	80004d8 <__aeabi_dmul>
 800cb80:	2301      	movs	r3, #1
 800cb82:	3701      	adds	r7, #1
 800cb84:	1064      	asrs	r4, r4, #1
 800cb86:	3608      	adds	r6, #8
 800cb88:	e76d      	b.n	800ca66 <_dtoa_r+0x3be>
 800cb8a:	2702      	movs	r7, #2
 800cb8c:	e770      	b.n	800ca70 <_dtoa_r+0x3c8>
 800cb8e:	46d8      	mov	r8, fp
 800cb90:	9c08      	ldr	r4, [sp, #32]
 800cb92:	e78f      	b.n	800cab4 <_dtoa_r+0x40c>
 800cb94:	9903      	ldr	r1, [sp, #12]
 800cb96:	4b29      	ldr	r3, [pc, #164]	; (800cc3c <_dtoa_r+0x594>)
 800cb98:	4421      	add	r1, r4
 800cb9a:	9112      	str	r1, [sp, #72]	; 0x48
 800cb9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cba2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cba6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbaa:	2900      	cmp	r1, #0
 800cbac:	d054      	beq.n	800cc58 <_dtoa_r+0x5b0>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	4928      	ldr	r1, [pc, #160]	; (800cc54 <_dtoa_r+0x5ac>)
 800cbb2:	f7f3 fdbb 	bl	800072c <__aeabi_ddiv>
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	4632      	mov	r2, r6
 800cbba:	f7f3 fad5 	bl	8000168 <__aeabi_dsub>
 800cbbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cbc2:	9f03      	ldr	r7, [sp, #12]
 800cbc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbc8:	f7f3 ff36 	bl	8000a38 <__aeabi_d2iz>
 800cbcc:	4604      	mov	r4, r0
 800cbce:	f7f3 fc19 	bl	8000404 <__aeabi_i2d>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbda:	f7f3 fac5 	bl	8000168 <__aeabi_dsub>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	3430      	adds	r4, #48	; 0x30
 800cbe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbec:	f807 4b01 	strb.w	r4, [r7], #1
 800cbf0:	f7f3 fee4 	bl	80009bc <__aeabi_dcmplt>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d173      	bne.n	800cce0 <_dtoa_r+0x638>
 800cbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	4911      	ldr	r1, [pc, #68]	; (800cc44 <_dtoa_r+0x59c>)
 800cc00:	f7f3 fab2 	bl	8000168 <__aeabi_dsub>
 800cc04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc08:	f7f3 fed8 	bl	80009bc <__aeabi_dcmplt>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f040 80b6 	bne.w	800cd7e <_dtoa_r+0x6d6>
 800cc12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc14:	429f      	cmp	r7, r3
 800cc16:	f43f af7a 	beq.w	800cb0e <_dtoa_r+0x466>
 800cc1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4b09      	ldr	r3, [pc, #36]	; (800cc48 <_dtoa_r+0x5a0>)
 800cc22:	f7f3 fc59 	bl	80004d8 <__aeabi_dmul>
 800cc26:	2200      	movs	r2, #0
 800cc28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc30:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <_dtoa_r+0x5a0>)
 800cc32:	f7f3 fc51 	bl	80004d8 <__aeabi_dmul>
 800cc36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc3a:	e7c3      	b.n	800cbc4 <_dtoa_r+0x51c>
 800cc3c:	08011010 	.word	0x08011010
 800cc40:	08010fe8 	.word	0x08010fe8
 800cc44:	3ff00000 	.word	0x3ff00000
 800cc48:	40240000 	.word	0x40240000
 800cc4c:	401c0000 	.word	0x401c0000
 800cc50:	40140000 	.word	0x40140000
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	f7f3 fc3c 	bl	80004d8 <__aeabi_dmul>
 800cc60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc66:	9c03      	ldr	r4, [sp, #12]
 800cc68:	9314      	str	r3, [sp, #80]	; 0x50
 800cc6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc6e:	f7f3 fee3 	bl	8000a38 <__aeabi_d2iz>
 800cc72:	9015      	str	r0, [sp, #84]	; 0x54
 800cc74:	f7f3 fbc6 	bl	8000404 <__aeabi_i2d>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc80:	f7f3 fa72 	bl	8000168 <__aeabi_dsub>
 800cc84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc86:	4606      	mov	r6, r0
 800cc88:	3330      	adds	r3, #48	; 0x30
 800cc8a:	f804 3b01 	strb.w	r3, [r4], #1
 800cc8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc90:	460f      	mov	r7, r1
 800cc92:	429c      	cmp	r4, r3
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	d124      	bne.n	800cce4 <_dtoa_r+0x63c>
 800cc9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc9e:	4baf      	ldr	r3, [pc, #700]	; (800cf5c <_dtoa_r+0x8b4>)
 800cca0:	f7f3 fa64 	bl	800016c <__adddf3>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4630      	mov	r0, r6
 800ccaa:	4639      	mov	r1, r7
 800ccac:	f7f3 fea4 	bl	80009f8 <__aeabi_dcmpgt>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d163      	bne.n	800cd7c <_dtoa_r+0x6d4>
 800ccb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccb8:	2000      	movs	r0, #0
 800ccba:	49a8      	ldr	r1, [pc, #672]	; (800cf5c <_dtoa_r+0x8b4>)
 800ccbc:	f7f3 fa54 	bl	8000168 <__aeabi_dsub>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 fe78 	bl	80009bc <__aeabi_dcmplt>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f43f af1e 	beq.w	800cb0e <_dtoa_r+0x466>
 800ccd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ccd4:	1e7b      	subs	r3, r7, #1
 800ccd6:	9314      	str	r3, [sp, #80]	; 0x50
 800ccd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ccdc:	2b30      	cmp	r3, #48	; 0x30
 800ccde:	d0f8      	beq.n	800ccd2 <_dtoa_r+0x62a>
 800cce0:	46c3      	mov	fp, r8
 800cce2:	e03b      	b.n	800cd5c <_dtoa_r+0x6b4>
 800cce4:	4b9e      	ldr	r3, [pc, #632]	; (800cf60 <_dtoa_r+0x8b8>)
 800cce6:	f7f3 fbf7 	bl	80004d8 <__aeabi_dmul>
 800ccea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccee:	e7bc      	b.n	800cc6a <_dtoa_r+0x5c2>
 800ccf0:	9f03      	ldr	r7, [sp, #12]
 800ccf2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ccf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 fd15 	bl	800072c <__aeabi_ddiv>
 800cd02:	f7f3 fe99 	bl	8000a38 <__aeabi_d2iz>
 800cd06:	4604      	mov	r4, r0
 800cd08:	f7f3 fb7c 	bl	8000404 <__aeabi_i2d>
 800cd0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd10:	f7f3 fbe2 	bl	80004d8 <__aeabi_dmul>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4640      	mov	r0, r8
 800cd1a:	4649      	mov	r1, r9
 800cd1c:	f7f3 fa24 	bl	8000168 <__aeabi_dsub>
 800cd20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cd24:	f807 6b01 	strb.w	r6, [r7], #1
 800cd28:	9e03      	ldr	r6, [sp, #12]
 800cd2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cd2e:	1bbe      	subs	r6, r7, r6
 800cd30:	45b4      	cmp	ip, r6
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	d136      	bne.n	800cda6 <_dtoa_r+0x6fe>
 800cd38:	f7f3 fa18 	bl	800016c <__adddf3>
 800cd3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd40:	4680      	mov	r8, r0
 800cd42:	4689      	mov	r9, r1
 800cd44:	f7f3 fe58 	bl	80009f8 <__aeabi_dcmpgt>
 800cd48:	bb58      	cbnz	r0, 800cda2 <_dtoa_r+0x6fa>
 800cd4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd4e:	4640      	mov	r0, r8
 800cd50:	4649      	mov	r1, r9
 800cd52:	f7f3 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 800cd56:	b108      	cbz	r0, 800cd5c <_dtoa_r+0x6b4>
 800cd58:	07e3      	lsls	r3, r4, #31
 800cd5a:	d422      	bmi.n	800cda2 <_dtoa_r+0x6fa>
 800cd5c:	4651      	mov	r1, sl
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 fbc2 	bl	800d4e8 <_Bfree>
 800cd64:	2300      	movs	r3, #0
 800cd66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cd68:	703b      	strb	r3, [r7, #0]
 800cd6a:	f10b 0301 	add.w	r3, fp, #1
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f43f ace6 	beq.w	800c744 <_dtoa_r+0x9c>
 800cd78:	601f      	str	r7, [r3, #0]
 800cd7a:	e4e3      	b.n	800c744 <_dtoa_r+0x9c>
 800cd7c:	4627      	mov	r7, r4
 800cd7e:	463b      	mov	r3, r7
 800cd80:	461f      	mov	r7, r3
 800cd82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd86:	2a39      	cmp	r2, #57	; 0x39
 800cd88:	d107      	bne.n	800cd9a <_dtoa_r+0x6f2>
 800cd8a:	9a03      	ldr	r2, [sp, #12]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d1f7      	bne.n	800cd80 <_dtoa_r+0x6d8>
 800cd90:	2230      	movs	r2, #48	; 0x30
 800cd92:	9903      	ldr	r1, [sp, #12]
 800cd94:	f108 0801 	add.w	r8, r8, #1
 800cd98:	700a      	strb	r2, [r1, #0]
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	3201      	adds	r2, #1
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	e79e      	b.n	800cce0 <_dtoa_r+0x638>
 800cda2:	46d8      	mov	r8, fp
 800cda4:	e7eb      	b.n	800cd7e <_dtoa_r+0x6d6>
 800cda6:	2200      	movs	r2, #0
 800cda8:	4b6d      	ldr	r3, [pc, #436]	; (800cf60 <_dtoa_r+0x8b8>)
 800cdaa:	f7f3 fb95 	bl	80004d8 <__aeabi_dmul>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	4689      	mov	r9, r1
 800cdb6:	f7f3 fdf7 	bl	80009a8 <__aeabi_dcmpeq>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d09b      	beq.n	800ccf6 <_dtoa_r+0x64e>
 800cdbe:	e7cd      	b.n	800cd5c <_dtoa_r+0x6b4>
 800cdc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdc2:	2a00      	cmp	r2, #0
 800cdc4:	f000 80c4 	beq.w	800cf50 <_dtoa_r+0x8a8>
 800cdc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cdca:	2a01      	cmp	r2, #1
 800cdcc:	f300 80a8 	bgt.w	800cf20 <_dtoa_r+0x878>
 800cdd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	f000 80a0 	beq.w	800cf18 <_dtoa_r+0x870>
 800cdd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cddc:	464f      	mov	r7, r9
 800cdde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cde0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde2:	2101      	movs	r1, #1
 800cde4:	441a      	add	r2, r3
 800cde6:	4628      	mov	r0, r5
 800cde8:	4499      	add	r9, r3
 800cdea:	9209      	str	r2, [sp, #36]	; 0x24
 800cdec:	f000 fc32 	bl	800d654 <__i2b>
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	b15f      	cbz	r7, 800ce0c <_dtoa_r+0x764>
 800cdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dd08      	ble.n	800ce0c <_dtoa_r+0x764>
 800cdfa:	42bb      	cmp	r3, r7
 800cdfc:	bfa8      	it	ge
 800cdfe:	463b      	movge	r3, r7
 800ce00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce02:	eba9 0903 	sub.w	r9, r9, r3
 800ce06:	1aff      	subs	r7, r7, r3
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce0e:	b1f3      	cbz	r3, 800ce4e <_dtoa_r+0x7a6>
 800ce10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 80a0 	beq.w	800cf58 <_dtoa_r+0x8b0>
 800ce18:	2c00      	cmp	r4, #0
 800ce1a:	dd10      	ble.n	800ce3e <_dtoa_r+0x796>
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4622      	mov	r2, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 fcd5 	bl	800d7d0 <__pow5mult>
 800ce26:	4652      	mov	r2, sl
 800ce28:	4601      	mov	r1, r0
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 fc27 	bl	800d680 <__multiply>
 800ce32:	4680      	mov	r8, r0
 800ce34:	4651      	mov	r1, sl
 800ce36:	4628      	mov	r0, r5
 800ce38:	f000 fb56 	bl	800d4e8 <_Bfree>
 800ce3c:	46c2      	mov	sl, r8
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce40:	1b1a      	subs	r2, r3, r4
 800ce42:	d004      	beq.n	800ce4e <_dtoa_r+0x7a6>
 800ce44:	4651      	mov	r1, sl
 800ce46:	4628      	mov	r0, r5
 800ce48:	f000 fcc2 	bl	800d7d0 <__pow5mult>
 800ce4c:	4682      	mov	sl, r0
 800ce4e:	2101      	movs	r1, #1
 800ce50:	4628      	mov	r0, r5
 800ce52:	f000 fbff 	bl	800d654 <__i2b>
 800ce56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce58:	4604      	mov	r4, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f340 8082 	ble.w	800cf64 <_dtoa_r+0x8bc>
 800ce60:	461a      	mov	r2, r3
 800ce62:	4601      	mov	r1, r0
 800ce64:	4628      	mov	r0, r5
 800ce66:	f000 fcb3 	bl	800d7d0 <__pow5mult>
 800ce6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	dd7b      	ble.n	800cf6a <_dtoa_r+0x8c2>
 800ce72:	f04f 0800 	mov.w	r8, #0
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce7c:	6918      	ldr	r0, [r3, #16]
 800ce7e:	f000 fb9b 	bl	800d5b8 <__hi0bits>
 800ce82:	f1c0 0020 	rsb	r0, r0, #32
 800ce86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce88:	4418      	add	r0, r3
 800ce8a:	f010 001f 	ands.w	r0, r0, #31
 800ce8e:	f000 8092 	beq.w	800cfb6 <_dtoa_r+0x90e>
 800ce92:	f1c0 0320 	rsb	r3, r0, #32
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	f340 8085 	ble.w	800cfa6 <_dtoa_r+0x8fe>
 800ce9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9e:	f1c0 001c 	rsb	r0, r0, #28
 800cea2:	4403      	add	r3, r0
 800cea4:	4481      	add	r9, r0
 800cea6:	4407      	add	r7, r0
 800cea8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceaa:	f1b9 0f00 	cmp.w	r9, #0
 800ceae:	dd05      	ble.n	800cebc <_dtoa_r+0x814>
 800ceb0:	4651      	mov	r1, sl
 800ceb2:	464a      	mov	r2, r9
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f000 fce5 	bl	800d884 <__lshift>
 800ceba:	4682      	mov	sl, r0
 800cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd05      	ble.n	800cece <_dtoa_r+0x826>
 800cec2:	4621      	mov	r1, r4
 800cec4:	461a      	mov	r2, r3
 800cec6:	4628      	mov	r0, r5
 800cec8:	f000 fcdc 	bl	800d884 <__lshift>
 800cecc:	4604      	mov	r4, r0
 800cece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d072      	beq.n	800cfba <_dtoa_r+0x912>
 800ced4:	4621      	mov	r1, r4
 800ced6:	4650      	mov	r0, sl
 800ced8:	f000 fd40 	bl	800d95c <__mcmp>
 800cedc:	2800      	cmp	r0, #0
 800cede:	da6c      	bge.n	800cfba <_dtoa_r+0x912>
 800cee0:	2300      	movs	r3, #0
 800cee2:	4651      	mov	r1, sl
 800cee4:	220a      	movs	r2, #10
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 fb20 	bl	800d52c <__multadd>
 800ceec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceee:	4682      	mov	sl, r0
 800cef0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 81ac 	beq.w	800d252 <_dtoa_r+0xbaa>
 800cefa:	2300      	movs	r3, #0
 800cefc:	4631      	mov	r1, r6
 800cefe:	220a      	movs	r2, #10
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 fb13 	bl	800d52c <__multadd>
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	4606      	mov	r6, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f300 8093 	bgt.w	800d036 <_dtoa_r+0x98e>
 800cf10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	dc59      	bgt.n	800cfca <_dtoa_r+0x922>
 800cf16:	e08e      	b.n	800d036 <_dtoa_r+0x98e>
 800cf18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf1e:	e75d      	b.n	800cddc <_dtoa_r+0x734>
 800cf20:	9b08      	ldr	r3, [sp, #32]
 800cf22:	1e5c      	subs	r4, r3, #1
 800cf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf26:	42a3      	cmp	r3, r4
 800cf28:	bfbf      	itttt	lt
 800cf2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800cf2e:	1ae3      	sublt	r3, r4, r3
 800cf30:	18d2      	addlt	r2, r2, r3
 800cf32:	bfa8      	it	ge
 800cf34:	1b1c      	subge	r4, r3, r4
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	bfbe      	ittt	lt
 800cf3a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cf3c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800cf3e:	2400      	movlt	r4, #0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	bfb5      	itete	lt
 800cf44:	eba9 0703 	sublt.w	r7, r9, r3
 800cf48:	464f      	movge	r7, r9
 800cf4a:	2300      	movlt	r3, #0
 800cf4c:	9b08      	ldrge	r3, [sp, #32]
 800cf4e:	e747      	b.n	800cde0 <_dtoa_r+0x738>
 800cf50:	464f      	mov	r7, r9
 800cf52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cf56:	e74c      	b.n	800cdf2 <_dtoa_r+0x74a>
 800cf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf5a:	e773      	b.n	800ce44 <_dtoa_r+0x79c>
 800cf5c:	3fe00000 	.word	0x3fe00000
 800cf60:	40240000 	.word	0x40240000
 800cf64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	dc18      	bgt.n	800cf9c <_dtoa_r+0x8f4>
 800cf6a:	9b04      	ldr	r3, [sp, #16]
 800cf6c:	b9b3      	cbnz	r3, 800cf9c <_dtoa_r+0x8f4>
 800cf6e:	9b05      	ldr	r3, [sp, #20]
 800cf70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf74:	b993      	cbnz	r3, 800cf9c <_dtoa_r+0x8f4>
 800cf76:	9b05      	ldr	r3, [sp, #20]
 800cf78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf7c:	0d1b      	lsrs	r3, r3, #20
 800cf7e:	051b      	lsls	r3, r3, #20
 800cf80:	b17b      	cbz	r3, 800cfa2 <_dtoa_r+0x8fa>
 800cf82:	f04f 0801 	mov.w	r8, #1
 800cf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf88:	f109 0901 	add.w	r9, r9, #1
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f47f af6f 	bne.w	800ce76 <_dtoa_r+0x7ce>
 800cf98:	2001      	movs	r0, #1
 800cf9a:	e774      	b.n	800ce86 <_dtoa_r+0x7de>
 800cf9c:	f04f 0800 	mov.w	r8, #0
 800cfa0:	e7f6      	b.n	800cf90 <_dtoa_r+0x8e8>
 800cfa2:	4698      	mov	r8, r3
 800cfa4:	e7f4      	b.n	800cf90 <_dtoa_r+0x8e8>
 800cfa6:	d080      	beq.n	800ceaa <_dtoa_r+0x802>
 800cfa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfaa:	331c      	adds	r3, #28
 800cfac:	441a      	add	r2, r3
 800cfae:	4499      	add	r9, r3
 800cfb0:	441f      	add	r7, r3
 800cfb2:	9209      	str	r2, [sp, #36]	; 0x24
 800cfb4:	e779      	b.n	800ceaa <_dtoa_r+0x802>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	e7f6      	b.n	800cfa8 <_dtoa_r+0x900>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc34      	bgt.n	800d02a <_dtoa_r+0x982>
 800cfc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	dd31      	ble.n	800d02a <_dtoa_r+0x982>
 800cfc6:	9b08      	ldr	r3, [sp, #32]
 800cfc8:	9306      	str	r3, [sp, #24]
 800cfca:	9b06      	ldr	r3, [sp, #24]
 800cfcc:	b963      	cbnz	r3, 800cfe8 <_dtoa_r+0x940>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	2205      	movs	r2, #5
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f000 faaa 	bl	800d52c <__multadd>
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4650      	mov	r0, sl
 800cfde:	f000 fcbd 	bl	800d95c <__mcmp>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f73f adbf 	bgt.w	800cb66 <_dtoa_r+0x4be>
 800cfe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cfea:	9f03      	ldr	r7, [sp, #12]
 800cfec:	ea6f 0b03 	mvn.w	fp, r3
 800cff0:	f04f 0800 	mov.w	r8, #0
 800cff4:	4621      	mov	r1, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	f000 fa76 	bl	800d4e8 <_Bfree>
 800cffc:	2e00      	cmp	r6, #0
 800cffe:	f43f aead 	beq.w	800cd5c <_dtoa_r+0x6b4>
 800d002:	f1b8 0f00 	cmp.w	r8, #0
 800d006:	d005      	beq.n	800d014 <_dtoa_r+0x96c>
 800d008:	45b0      	cmp	r8, r6
 800d00a:	d003      	beq.n	800d014 <_dtoa_r+0x96c>
 800d00c:	4641      	mov	r1, r8
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 fa6a 	bl	800d4e8 <_Bfree>
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	f000 fa66 	bl	800d4e8 <_Bfree>
 800d01c:	e69e      	b.n	800cd5c <_dtoa_r+0x6b4>
 800d01e:	2400      	movs	r4, #0
 800d020:	4626      	mov	r6, r4
 800d022:	e7e1      	b.n	800cfe8 <_dtoa_r+0x940>
 800d024:	46c3      	mov	fp, r8
 800d026:	4626      	mov	r6, r4
 800d028:	e59d      	b.n	800cb66 <_dtoa_r+0x4be>
 800d02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 80c8 	beq.w	800d1c2 <_dtoa_r+0xb1a>
 800d032:	9b08      	ldr	r3, [sp, #32]
 800d034:	9306      	str	r3, [sp, #24]
 800d036:	2f00      	cmp	r7, #0
 800d038:	dd05      	ble.n	800d046 <_dtoa_r+0x99e>
 800d03a:	4631      	mov	r1, r6
 800d03c:	463a      	mov	r2, r7
 800d03e:	4628      	mov	r0, r5
 800d040:	f000 fc20 	bl	800d884 <__lshift>
 800d044:	4606      	mov	r6, r0
 800d046:	f1b8 0f00 	cmp.w	r8, #0
 800d04a:	d05b      	beq.n	800d104 <_dtoa_r+0xa5c>
 800d04c:	4628      	mov	r0, r5
 800d04e:	6871      	ldr	r1, [r6, #4]
 800d050:	f000 fa0a 	bl	800d468 <_Balloc>
 800d054:	4607      	mov	r7, r0
 800d056:	b928      	cbnz	r0, 800d064 <_dtoa_r+0x9bc>
 800d058:	4602      	mov	r2, r0
 800d05a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d05e:	4b81      	ldr	r3, [pc, #516]	; (800d264 <_dtoa_r+0xbbc>)
 800d060:	f7ff bb36 	b.w	800c6d0 <_dtoa_r+0x28>
 800d064:	6932      	ldr	r2, [r6, #16]
 800d066:	f106 010c 	add.w	r1, r6, #12
 800d06a:	3202      	adds	r2, #2
 800d06c:	0092      	lsls	r2, r2, #2
 800d06e:	300c      	adds	r0, #12
 800d070:	f7ff fa81 	bl	800c576 <memcpy>
 800d074:	2201      	movs	r2, #1
 800d076:	4639      	mov	r1, r7
 800d078:	4628      	mov	r0, r5
 800d07a:	f000 fc03 	bl	800d884 <__lshift>
 800d07e:	46b0      	mov	r8, r6
 800d080:	4606      	mov	r6, r0
 800d082:	9b03      	ldr	r3, [sp, #12]
 800d084:	9a03      	ldr	r2, [sp, #12]
 800d086:	3301      	adds	r3, #1
 800d088:	9308      	str	r3, [sp, #32]
 800d08a:	9b06      	ldr	r3, [sp, #24]
 800d08c:	4413      	add	r3, r2
 800d08e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d090:	9b04      	ldr	r3, [sp, #16]
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	930a      	str	r3, [sp, #40]	; 0x28
 800d098:	9b08      	ldr	r3, [sp, #32]
 800d09a:	4621      	mov	r1, r4
 800d09c:	3b01      	subs	r3, #1
 800d09e:	4650      	mov	r0, sl
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	f7ff fa76 	bl	800c592 <quorem>
 800d0a6:	4641      	mov	r1, r8
 800d0a8:	9006      	str	r0, [sp, #24]
 800d0aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	f000 fc54 	bl	800d95c <__mcmp>
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	9009      	str	r0, [sp, #36]	; 0x24
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f000 fc6a 	bl	800d994 <__mdiff>
 800d0c0:	68c2      	ldr	r2, [r0, #12]
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	bb02      	cbnz	r2, 800d108 <_dtoa_r+0xa60>
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	4650      	mov	r0, sl
 800d0ca:	f000 fc47 	bl	800d95c <__mcmp>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	920c      	str	r2, [sp, #48]	; 0x30
 800d0d6:	f000 fa07 	bl	800d4e8 <_Bfree>
 800d0da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0de:	9f08      	ldr	r7, [sp, #32]
 800d0e0:	ea43 0102 	orr.w	r1, r3, r2
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e6:	4319      	orrs	r1, r3
 800d0e8:	d110      	bne.n	800d10c <_dtoa_r+0xa64>
 800d0ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0ee:	d029      	beq.n	800d144 <_dtoa_r+0xa9c>
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dd02      	ble.n	800d0fc <_dtoa_r+0xa54>
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d0fc:	9b04      	ldr	r3, [sp, #16]
 800d0fe:	f883 9000 	strb.w	r9, [r3]
 800d102:	e777      	b.n	800cff4 <_dtoa_r+0x94c>
 800d104:	4630      	mov	r0, r6
 800d106:	e7ba      	b.n	800d07e <_dtoa_r+0x9d6>
 800d108:	2201      	movs	r2, #1
 800d10a:	e7e1      	b.n	800d0d0 <_dtoa_r+0xa28>
 800d10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10e:	2b00      	cmp	r3, #0
 800d110:	db04      	blt.n	800d11c <_dtoa_r+0xa74>
 800d112:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d114:	430b      	orrs	r3, r1
 800d116:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d118:	430b      	orrs	r3, r1
 800d11a:	d120      	bne.n	800d15e <_dtoa_r+0xab6>
 800d11c:	2a00      	cmp	r2, #0
 800d11e:	dded      	ble.n	800d0fc <_dtoa_r+0xa54>
 800d120:	4651      	mov	r1, sl
 800d122:	2201      	movs	r2, #1
 800d124:	4628      	mov	r0, r5
 800d126:	f000 fbad 	bl	800d884 <__lshift>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4682      	mov	sl, r0
 800d12e:	f000 fc15 	bl	800d95c <__mcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	dc03      	bgt.n	800d13e <_dtoa_r+0xa96>
 800d136:	d1e1      	bne.n	800d0fc <_dtoa_r+0xa54>
 800d138:	f019 0f01 	tst.w	r9, #1
 800d13c:	d0de      	beq.n	800d0fc <_dtoa_r+0xa54>
 800d13e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d142:	d1d8      	bne.n	800d0f6 <_dtoa_r+0xa4e>
 800d144:	2339      	movs	r3, #57	; 0x39
 800d146:	9a04      	ldr	r2, [sp, #16]
 800d148:	7013      	strb	r3, [r2, #0]
 800d14a:	463b      	mov	r3, r7
 800d14c:	461f      	mov	r7, r3
 800d14e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d152:	3b01      	subs	r3, #1
 800d154:	2a39      	cmp	r2, #57	; 0x39
 800d156:	d06b      	beq.n	800d230 <_dtoa_r+0xb88>
 800d158:	3201      	adds	r2, #1
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	e74a      	b.n	800cff4 <_dtoa_r+0x94c>
 800d15e:	2a00      	cmp	r2, #0
 800d160:	dd07      	ble.n	800d172 <_dtoa_r+0xaca>
 800d162:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d166:	d0ed      	beq.n	800d144 <_dtoa_r+0xa9c>
 800d168:	9a04      	ldr	r2, [sp, #16]
 800d16a:	f109 0301 	add.w	r3, r9, #1
 800d16e:	7013      	strb	r3, [r2, #0]
 800d170:	e740      	b.n	800cff4 <_dtoa_r+0x94c>
 800d172:	9b08      	ldr	r3, [sp, #32]
 800d174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d176:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d042      	beq.n	800d204 <_dtoa_r+0xb5c>
 800d17e:	4651      	mov	r1, sl
 800d180:	2300      	movs	r3, #0
 800d182:	220a      	movs	r2, #10
 800d184:	4628      	mov	r0, r5
 800d186:	f000 f9d1 	bl	800d52c <__multadd>
 800d18a:	45b0      	cmp	r8, r6
 800d18c:	4682      	mov	sl, r0
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	f04f 020a 	mov.w	r2, #10
 800d196:	4641      	mov	r1, r8
 800d198:	4628      	mov	r0, r5
 800d19a:	d107      	bne.n	800d1ac <_dtoa_r+0xb04>
 800d19c:	f000 f9c6 	bl	800d52c <__multadd>
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	9b08      	ldr	r3, [sp, #32]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	9308      	str	r3, [sp, #32]
 800d1aa:	e775      	b.n	800d098 <_dtoa_r+0x9f0>
 800d1ac:	f000 f9be 	bl	800d52c <__multadd>
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	220a      	movs	r2, #10
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f000 f9b7 	bl	800d52c <__multadd>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	e7f0      	b.n	800d1a4 <_dtoa_r+0xafc>
 800d1c2:	9b08      	ldr	r3, [sp, #32]
 800d1c4:	9306      	str	r3, [sp, #24]
 800d1c6:	9f03      	ldr	r7, [sp, #12]
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4650      	mov	r0, sl
 800d1cc:	f7ff f9e1 	bl	800c592 <quorem>
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d1d6:	f807 9b01 	strb.w	r9, [r7], #1
 800d1da:	1afa      	subs	r2, r7, r3
 800d1dc:	9b06      	ldr	r3, [sp, #24]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	dd07      	ble.n	800d1f2 <_dtoa_r+0xb4a>
 800d1e2:	4651      	mov	r1, sl
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	220a      	movs	r2, #10
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 f99f 	bl	800d52c <__multadd>
 800d1ee:	4682      	mov	sl, r0
 800d1f0:	e7ea      	b.n	800d1c8 <_dtoa_r+0xb20>
 800d1f2:	9b06      	ldr	r3, [sp, #24]
 800d1f4:	f04f 0800 	mov.w	r8, #0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	bfcc      	ite	gt
 800d1fc:	461f      	movgt	r7, r3
 800d1fe:	2701      	movle	r7, #1
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	441f      	add	r7, r3
 800d204:	4651      	mov	r1, sl
 800d206:	2201      	movs	r2, #1
 800d208:	4628      	mov	r0, r5
 800d20a:	f000 fb3b 	bl	800d884 <__lshift>
 800d20e:	4621      	mov	r1, r4
 800d210:	4682      	mov	sl, r0
 800d212:	f000 fba3 	bl	800d95c <__mcmp>
 800d216:	2800      	cmp	r0, #0
 800d218:	dc97      	bgt.n	800d14a <_dtoa_r+0xaa2>
 800d21a:	d102      	bne.n	800d222 <_dtoa_r+0xb7a>
 800d21c:	f019 0f01 	tst.w	r9, #1
 800d220:	d193      	bne.n	800d14a <_dtoa_r+0xaa2>
 800d222:	463b      	mov	r3, r7
 800d224:	461f      	mov	r7, r3
 800d226:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d22a:	2a30      	cmp	r2, #48	; 0x30
 800d22c:	d0fa      	beq.n	800d224 <_dtoa_r+0xb7c>
 800d22e:	e6e1      	b.n	800cff4 <_dtoa_r+0x94c>
 800d230:	9a03      	ldr	r2, [sp, #12]
 800d232:	429a      	cmp	r2, r3
 800d234:	d18a      	bne.n	800d14c <_dtoa_r+0xaa4>
 800d236:	2331      	movs	r3, #49	; 0x31
 800d238:	f10b 0b01 	add.w	fp, fp, #1
 800d23c:	e797      	b.n	800d16e <_dtoa_r+0xac6>
 800d23e:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <_dtoa_r+0xbc0>)
 800d240:	f7ff ba9f 	b.w	800c782 <_dtoa_r+0xda>
 800d244:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d246:	2b00      	cmp	r3, #0
 800d248:	f47f aa77 	bne.w	800c73a <_dtoa_r+0x92>
 800d24c:	4b07      	ldr	r3, [pc, #28]	; (800d26c <_dtoa_r+0xbc4>)
 800d24e:	f7ff ba98 	b.w	800c782 <_dtoa_r+0xda>
 800d252:	9b06      	ldr	r3, [sp, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	dcb6      	bgt.n	800d1c6 <_dtoa_r+0xb1e>
 800d258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	f73f aeb5 	bgt.w	800cfca <_dtoa_r+0x922>
 800d260:	e7b1      	b.n	800d1c6 <_dtoa_r+0xb1e>
 800d262:	bf00      	nop
 800d264:	08010f7a 	.word	0x08010f7a
 800d268:	08010eda 	.word	0x08010eda
 800d26c:	08010efe 	.word	0x08010efe

0800d270 <_free_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4605      	mov	r5, r0
 800d274:	2900      	cmp	r1, #0
 800d276:	d040      	beq.n	800d2fa <_free_r+0x8a>
 800d278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d27c:	1f0c      	subs	r4, r1, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bfb8      	it	lt
 800d282:	18e4      	addlt	r4, r4, r3
 800d284:	f000 f8e4 	bl	800d450 <__malloc_lock>
 800d288:	4a1c      	ldr	r2, [pc, #112]	; (800d2fc <_free_r+0x8c>)
 800d28a:	6813      	ldr	r3, [r2, #0]
 800d28c:	b933      	cbnz	r3, 800d29c <_free_r+0x2c>
 800d28e:	6063      	str	r3, [r4, #4]
 800d290:	6014      	str	r4, [r2, #0]
 800d292:	4628      	mov	r0, r5
 800d294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d298:	f000 b8e0 	b.w	800d45c <__malloc_unlock>
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	d908      	bls.n	800d2b2 <_free_r+0x42>
 800d2a0:	6820      	ldr	r0, [r4, #0]
 800d2a2:	1821      	adds	r1, r4, r0
 800d2a4:	428b      	cmp	r3, r1
 800d2a6:	bf01      	itttt	eq
 800d2a8:	6819      	ldreq	r1, [r3, #0]
 800d2aa:	685b      	ldreq	r3, [r3, #4]
 800d2ac:	1809      	addeq	r1, r1, r0
 800d2ae:	6021      	streq	r1, [r4, #0]
 800d2b0:	e7ed      	b.n	800d28e <_free_r+0x1e>
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b10b      	cbz	r3, 800d2bc <_free_r+0x4c>
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d9fa      	bls.n	800d2b2 <_free_r+0x42>
 800d2bc:	6811      	ldr	r1, [r2, #0]
 800d2be:	1850      	adds	r0, r2, r1
 800d2c0:	42a0      	cmp	r0, r4
 800d2c2:	d10b      	bne.n	800d2dc <_free_r+0x6c>
 800d2c4:	6820      	ldr	r0, [r4, #0]
 800d2c6:	4401      	add	r1, r0
 800d2c8:	1850      	adds	r0, r2, r1
 800d2ca:	4283      	cmp	r3, r0
 800d2cc:	6011      	str	r1, [r2, #0]
 800d2ce:	d1e0      	bne.n	800d292 <_free_r+0x22>
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	4408      	add	r0, r1
 800d2d6:	6010      	str	r0, [r2, #0]
 800d2d8:	6053      	str	r3, [r2, #4]
 800d2da:	e7da      	b.n	800d292 <_free_r+0x22>
 800d2dc:	d902      	bls.n	800d2e4 <_free_r+0x74>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	e7d6      	b.n	800d292 <_free_r+0x22>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	1821      	adds	r1, r4, r0
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf01      	itttt	eq
 800d2ec:	6819      	ldreq	r1, [r3, #0]
 800d2ee:	685b      	ldreq	r3, [r3, #4]
 800d2f0:	1809      	addeq	r1, r1, r0
 800d2f2:	6021      	streq	r1, [r4, #0]
 800d2f4:	6063      	str	r3, [r4, #4]
 800d2f6:	6054      	str	r4, [r2, #4]
 800d2f8:	e7cb      	b.n	800d292 <_free_r+0x22>
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	20001c6c 	.word	0x20001c6c

0800d300 <malloc>:
 800d300:	4b02      	ldr	r3, [pc, #8]	; (800d30c <malloc+0xc>)
 800d302:	4601      	mov	r1, r0
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	f000 b823 	b.w	800d350 <_malloc_r>
 800d30a:	bf00      	nop
 800d30c:	20000110 	.word	0x20000110

0800d310 <sbrk_aligned>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	4e0e      	ldr	r6, [pc, #56]	; (800d34c <sbrk_aligned+0x3c>)
 800d314:	460c      	mov	r4, r1
 800d316:	6831      	ldr	r1, [r6, #0]
 800d318:	4605      	mov	r5, r0
 800d31a:	b911      	cbnz	r1, 800d322 <sbrk_aligned+0x12>
 800d31c:	f000 fe38 	bl	800df90 <_sbrk_r>
 800d320:	6030      	str	r0, [r6, #0]
 800d322:	4621      	mov	r1, r4
 800d324:	4628      	mov	r0, r5
 800d326:	f000 fe33 	bl	800df90 <_sbrk_r>
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	d00a      	beq.n	800d344 <sbrk_aligned+0x34>
 800d32e:	1cc4      	adds	r4, r0, #3
 800d330:	f024 0403 	bic.w	r4, r4, #3
 800d334:	42a0      	cmp	r0, r4
 800d336:	d007      	beq.n	800d348 <sbrk_aligned+0x38>
 800d338:	1a21      	subs	r1, r4, r0
 800d33a:	4628      	mov	r0, r5
 800d33c:	f000 fe28 	bl	800df90 <_sbrk_r>
 800d340:	3001      	adds	r0, #1
 800d342:	d101      	bne.n	800d348 <sbrk_aligned+0x38>
 800d344:	f04f 34ff 	mov.w	r4, #4294967295
 800d348:	4620      	mov	r0, r4
 800d34a:	bd70      	pop	{r4, r5, r6, pc}
 800d34c:	20001c70 	.word	0x20001c70

0800d350 <_malloc_r>:
 800d350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d354:	1ccd      	adds	r5, r1, #3
 800d356:	f025 0503 	bic.w	r5, r5, #3
 800d35a:	3508      	adds	r5, #8
 800d35c:	2d0c      	cmp	r5, #12
 800d35e:	bf38      	it	cc
 800d360:	250c      	movcc	r5, #12
 800d362:	2d00      	cmp	r5, #0
 800d364:	4607      	mov	r7, r0
 800d366:	db01      	blt.n	800d36c <_malloc_r+0x1c>
 800d368:	42a9      	cmp	r1, r5
 800d36a:	d905      	bls.n	800d378 <_malloc_r+0x28>
 800d36c:	230c      	movs	r3, #12
 800d36e:	2600      	movs	r6, #0
 800d370:	603b      	str	r3, [r7, #0]
 800d372:	4630      	mov	r0, r6
 800d374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d44c <_malloc_r+0xfc>
 800d37c:	f000 f868 	bl	800d450 <__malloc_lock>
 800d380:	f8d8 3000 	ldr.w	r3, [r8]
 800d384:	461c      	mov	r4, r3
 800d386:	bb5c      	cbnz	r4, 800d3e0 <_malloc_r+0x90>
 800d388:	4629      	mov	r1, r5
 800d38a:	4638      	mov	r0, r7
 800d38c:	f7ff ffc0 	bl	800d310 <sbrk_aligned>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	4604      	mov	r4, r0
 800d394:	d155      	bne.n	800d442 <_malloc_r+0xf2>
 800d396:	f8d8 4000 	ldr.w	r4, [r8]
 800d39a:	4626      	mov	r6, r4
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	d145      	bne.n	800d42c <_malloc_r+0xdc>
 800d3a0:	2c00      	cmp	r4, #0
 800d3a2:	d048      	beq.n	800d436 <_malloc_r+0xe6>
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	eb04 0903 	add.w	r9, r4, r3
 800d3ae:	f000 fdef 	bl	800df90 <_sbrk_r>
 800d3b2:	4581      	cmp	r9, r0
 800d3b4:	d13f      	bne.n	800d436 <_malloc_r+0xe6>
 800d3b6:	6821      	ldr	r1, [r4, #0]
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	1a6d      	subs	r5, r5, r1
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f7ff ffa7 	bl	800d310 <sbrk_aligned>
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	d037      	beq.n	800d436 <_malloc_r+0xe6>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	442b      	add	r3, r5
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d038      	beq.n	800d446 <_malloc_r+0xf6>
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	42a2      	cmp	r2, r4
 800d3d8:	d12b      	bne.n	800d432 <_malloc_r+0xe2>
 800d3da:	2200      	movs	r2, #0
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	e00f      	b.n	800d400 <_malloc_r+0xb0>
 800d3e0:	6822      	ldr	r2, [r4, #0]
 800d3e2:	1b52      	subs	r2, r2, r5
 800d3e4:	d41f      	bmi.n	800d426 <_malloc_r+0xd6>
 800d3e6:	2a0b      	cmp	r2, #11
 800d3e8:	d917      	bls.n	800d41a <_malloc_r+0xca>
 800d3ea:	1961      	adds	r1, r4, r5
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	6025      	str	r5, [r4, #0]
 800d3f0:	bf18      	it	ne
 800d3f2:	6059      	strne	r1, [r3, #4]
 800d3f4:	6863      	ldr	r3, [r4, #4]
 800d3f6:	bf08      	it	eq
 800d3f8:	f8c8 1000 	streq.w	r1, [r8]
 800d3fc:	5162      	str	r2, [r4, r5]
 800d3fe:	604b      	str	r3, [r1, #4]
 800d400:	4638      	mov	r0, r7
 800d402:	f104 060b 	add.w	r6, r4, #11
 800d406:	f000 f829 	bl	800d45c <__malloc_unlock>
 800d40a:	f026 0607 	bic.w	r6, r6, #7
 800d40e:	1d23      	adds	r3, r4, #4
 800d410:	1af2      	subs	r2, r6, r3
 800d412:	d0ae      	beq.n	800d372 <_malloc_r+0x22>
 800d414:	1b9b      	subs	r3, r3, r6
 800d416:	50a3      	str	r3, [r4, r2]
 800d418:	e7ab      	b.n	800d372 <_malloc_r+0x22>
 800d41a:	42a3      	cmp	r3, r4
 800d41c:	6862      	ldr	r2, [r4, #4]
 800d41e:	d1dd      	bne.n	800d3dc <_malloc_r+0x8c>
 800d420:	f8c8 2000 	str.w	r2, [r8]
 800d424:	e7ec      	b.n	800d400 <_malloc_r+0xb0>
 800d426:	4623      	mov	r3, r4
 800d428:	6864      	ldr	r4, [r4, #4]
 800d42a:	e7ac      	b.n	800d386 <_malloc_r+0x36>
 800d42c:	4634      	mov	r4, r6
 800d42e:	6876      	ldr	r6, [r6, #4]
 800d430:	e7b4      	b.n	800d39c <_malloc_r+0x4c>
 800d432:	4613      	mov	r3, r2
 800d434:	e7cc      	b.n	800d3d0 <_malloc_r+0x80>
 800d436:	230c      	movs	r3, #12
 800d438:	4638      	mov	r0, r7
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	f000 f80e 	bl	800d45c <__malloc_unlock>
 800d440:	e797      	b.n	800d372 <_malloc_r+0x22>
 800d442:	6025      	str	r5, [r4, #0]
 800d444:	e7dc      	b.n	800d400 <_malloc_r+0xb0>
 800d446:	605b      	str	r3, [r3, #4]
 800d448:	deff      	udf	#255	; 0xff
 800d44a:	bf00      	nop
 800d44c:	20001c6c 	.word	0x20001c6c

0800d450 <__malloc_lock>:
 800d450:	4801      	ldr	r0, [pc, #4]	; (800d458 <__malloc_lock+0x8>)
 800d452:	f7ff b880 	b.w	800c556 <__retarget_lock_acquire_recursive>
 800d456:	bf00      	nop
 800d458:	20001c68 	.word	0x20001c68

0800d45c <__malloc_unlock>:
 800d45c:	4801      	ldr	r0, [pc, #4]	; (800d464 <__malloc_unlock+0x8>)
 800d45e:	f7ff b87b 	b.w	800c558 <__retarget_lock_release_recursive>
 800d462:	bf00      	nop
 800d464:	20001c68 	.word	0x20001c68

0800d468 <_Balloc>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	69c6      	ldr	r6, [r0, #28]
 800d46c:	4604      	mov	r4, r0
 800d46e:	460d      	mov	r5, r1
 800d470:	b976      	cbnz	r6, 800d490 <_Balloc+0x28>
 800d472:	2010      	movs	r0, #16
 800d474:	f7ff ff44 	bl	800d300 <malloc>
 800d478:	4602      	mov	r2, r0
 800d47a:	61e0      	str	r0, [r4, #28]
 800d47c:	b920      	cbnz	r0, 800d488 <_Balloc+0x20>
 800d47e:	216b      	movs	r1, #107	; 0x6b
 800d480:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <_Balloc+0x78>)
 800d482:	4818      	ldr	r0, [pc, #96]	; (800d4e4 <_Balloc+0x7c>)
 800d484:	f000 fd94 	bl	800dfb0 <__assert_func>
 800d488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d48c:	6006      	str	r6, [r0, #0]
 800d48e:	60c6      	str	r6, [r0, #12]
 800d490:	69e6      	ldr	r6, [r4, #28]
 800d492:	68f3      	ldr	r3, [r6, #12]
 800d494:	b183      	cbz	r3, 800d4b8 <_Balloc+0x50>
 800d496:	69e3      	ldr	r3, [r4, #28]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d49e:	b9b8      	cbnz	r0, 800d4d0 <_Balloc+0x68>
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4a6:	1d72      	adds	r2, r6, #5
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	0092      	lsls	r2, r2, #2
 800d4ac:	f000 fd9e 	bl	800dfec <_calloc_r>
 800d4b0:	b160      	cbz	r0, 800d4cc <_Balloc+0x64>
 800d4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4b6:	e00e      	b.n	800d4d6 <_Balloc+0x6e>
 800d4b8:	2221      	movs	r2, #33	; 0x21
 800d4ba:	2104      	movs	r1, #4
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fd95 	bl	800dfec <_calloc_r>
 800d4c2:	69e3      	ldr	r3, [r4, #28]
 800d4c4:	60f0      	str	r0, [r6, #12]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e4      	bne.n	800d496 <_Balloc+0x2e>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}
 800d4d0:	6802      	ldr	r2, [r0, #0]
 800d4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4dc:	e7f7      	b.n	800d4ce <_Balloc+0x66>
 800d4de:	bf00      	nop
 800d4e0:	08010f0b 	.word	0x08010f0b
 800d4e4:	08010f8b 	.word	0x08010f8b

0800d4e8 <_Bfree>:
 800d4e8:	b570      	push	{r4, r5, r6, lr}
 800d4ea:	69c6      	ldr	r6, [r0, #28]
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	b976      	cbnz	r6, 800d510 <_Bfree+0x28>
 800d4f2:	2010      	movs	r0, #16
 800d4f4:	f7ff ff04 	bl	800d300 <malloc>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	61e8      	str	r0, [r5, #28]
 800d4fc:	b920      	cbnz	r0, 800d508 <_Bfree+0x20>
 800d4fe:	218f      	movs	r1, #143	; 0x8f
 800d500:	4b08      	ldr	r3, [pc, #32]	; (800d524 <_Bfree+0x3c>)
 800d502:	4809      	ldr	r0, [pc, #36]	; (800d528 <_Bfree+0x40>)
 800d504:	f000 fd54 	bl	800dfb0 <__assert_func>
 800d508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d50c:	6006      	str	r6, [r0, #0]
 800d50e:	60c6      	str	r6, [r0, #12]
 800d510:	b13c      	cbz	r4, 800d522 <_Bfree+0x3a>
 800d512:	69eb      	ldr	r3, [r5, #28]
 800d514:	6862      	ldr	r2, [r4, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d51c:	6021      	str	r1, [r4, #0]
 800d51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	08010f0b 	.word	0x08010f0b
 800d528:	08010f8b 	.word	0x08010f8b

0800d52c <__multadd>:
 800d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d530:	4607      	mov	r7, r0
 800d532:	460c      	mov	r4, r1
 800d534:	461e      	mov	r6, r3
 800d536:	2000      	movs	r0, #0
 800d538:	690d      	ldr	r5, [r1, #16]
 800d53a:	f101 0c14 	add.w	ip, r1, #20
 800d53e:	f8dc 3000 	ldr.w	r3, [ip]
 800d542:	3001      	adds	r0, #1
 800d544:	b299      	uxth	r1, r3
 800d546:	fb02 6101 	mla	r1, r2, r1, r6
 800d54a:	0c1e      	lsrs	r6, r3, #16
 800d54c:	0c0b      	lsrs	r3, r1, #16
 800d54e:	fb02 3306 	mla	r3, r2, r6, r3
 800d552:	b289      	uxth	r1, r1
 800d554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d558:	4285      	cmp	r5, r0
 800d55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d55e:	f84c 1b04 	str.w	r1, [ip], #4
 800d562:	dcec      	bgt.n	800d53e <__multadd+0x12>
 800d564:	b30e      	cbz	r6, 800d5aa <__multadd+0x7e>
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	42ab      	cmp	r3, r5
 800d56a:	dc19      	bgt.n	800d5a0 <__multadd+0x74>
 800d56c:	6861      	ldr	r1, [r4, #4]
 800d56e:	4638      	mov	r0, r7
 800d570:	3101      	adds	r1, #1
 800d572:	f7ff ff79 	bl	800d468 <_Balloc>
 800d576:	4680      	mov	r8, r0
 800d578:	b928      	cbnz	r0, 800d586 <__multadd+0x5a>
 800d57a:	4602      	mov	r2, r0
 800d57c:	21ba      	movs	r1, #186	; 0xba
 800d57e:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <__multadd+0x84>)
 800d580:	480c      	ldr	r0, [pc, #48]	; (800d5b4 <__multadd+0x88>)
 800d582:	f000 fd15 	bl	800dfb0 <__assert_func>
 800d586:	6922      	ldr	r2, [r4, #16]
 800d588:	f104 010c 	add.w	r1, r4, #12
 800d58c:	3202      	adds	r2, #2
 800d58e:	0092      	lsls	r2, r2, #2
 800d590:	300c      	adds	r0, #12
 800d592:	f7fe fff0 	bl	800c576 <memcpy>
 800d596:	4621      	mov	r1, r4
 800d598:	4638      	mov	r0, r7
 800d59a:	f7ff ffa5 	bl	800d4e8 <_Bfree>
 800d59e:	4644      	mov	r4, r8
 800d5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	615e      	str	r6, [r3, #20]
 800d5a8:	6125      	str	r5, [r4, #16]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b0:	08010f7a 	.word	0x08010f7a
 800d5b4:	08010f8b 	.word	0x08010f8b

0800d5b8 <__hi0bits>:
 800d5b8:	0c02      	lsrs	r2, r0, #16
 800d5ba:	0412      	lsls	r2, r2, #16
 800d5bc:	4603      	mov	r3, r0
 800d5be:	b9ca      	cbnz	r2, 800d5f4 <__hi0bits+0x3c>
 800d5c0:	0403      	lsls	r3, r0, #16
 800d5c2:	2010      	movs	r0, #16
 800d5c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d5c8:	bf04      	itt	eq
 800d5ca:	021b      	lsleq	r3, r3, #8
 800d5cc:	3008      	addeq	r0, #8
 800d5ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d5d2:	bf04      	itt	eq
 800d5d4:	011b      	lsleq	r3, r3, #4
 800d5d6:	3004      	addeq	r0, #4
 800d5d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d5dc:	bf04      	itt	eq
 800d5de:	009b      	lsleq	r3, r3, #2
 800d5e0:	3002      	addeq	r0, #2
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	db05      	blt.n	800d5f2 <__hi0bits+0x3a>
 800d5e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d5ea:	f100 0001 	add.w	r0, r0, #1
 800d5ee:	bf08      	it	eq
 800d5f0:	2020      	moveq	r0, #32
 800d5f2:	4770      	bx	lr
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e7e5      	b.n	800d5c4 <__hi0bits+0xc>

0800d5f8 <__lo0bits>:
 800d5f8:	6803      	ldr	r3, [r0, #0]
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	f013 0007 	ands.w	r0, r3, #7
 800d600:	d00b      	beq.n	800d61a <__lo0bits+0x22>
 800d602:	07d9      	lsls	r1, r3, #31
 800d604:	d421      	bmi.n	800d64a <__lo0bits+0x52>
 800d606:	0798      	lsls	r0, r3, #30
 800d608:	bf49      	itett	mi
 800d60a:	085b      	lsrmi	r3, r3, #1
 800d60c:	089b      	lsrpl	r3, r3, #2
 800d60e:	2001      	movmi	r0, #1
 800d610:	6013      	strmi	r3, [r2, #0]
 800d612:	bf5c      	itt	pl
 800d614:	2002      	movpl	r0, #2
 800d616:	6013      	strpl	r3, [r2, #0]
 800d618:	4770      	bx	lr
 800d61a:	b299      	uxth	r1, r3
 800d61c:	b909      	cbnz	r1, 800d622 <__lo0bits+0x2a>
 800d61e:	2010      	movs	r0, #16
 800d620:	0c1b      	lsrs	r3, r3, #16
 800d622:	b2d9      	uxtb	r1, r3
 800d624:	b909      	cbnz	r1, 800d62a <__lo0bits+0x32>
 800d626:	3008      	adds	r0, #8
 800d628:	0a1b      	lsrs	r3, r3, #8
 800d62a:	0719      	lsls	r1, r3, #28
 800d62c:	bf04      	itt	eq
 800d62e:	091b      	lsreq	r3, r3, #4
 800d630:	3004      	addeq	r0, #4
 800d632:	0799      	lsls	r1, r3, #30
 800d634:	bf04      	itt	eq
 800d636:	089b      	lsreq	r3, r3, #2
 800d638:	3002      	addeq	r0, #2
 800d63a:	07d9      	lsls	r1, r3, #31
 800d63c:	d403      	bmi.n	800d646 <__lo0bits+0x4e>
 800d63e:	085b      	lsrs	r3, r3, #1
 800d640:	f100 0001 	add.w	r0, r0, #1
 800d644:	d003      	beq.n	800d64e <__lo0bits+0x56>
 800d646:	6013      	str	r3, [r2, #0]
 800d648:	4770      	bx	lr
 800d64a:	2000      	movs	r0, #0
 800d64c:	4770      	bx	lr
 800d64e:	2020      	movs	r0, #32
 800d650:	4770      	bx	lr
	...

0800d654 <__i2b>:
 800d654:	b510      	push	{r4, lr}
 800d656:	460c      	mov	r4, r1
 800d658:	2101      	movs	r1, #1
 800d65a:	f7ff ff05 	bl	800d468 <_Balloc>
 800d65e:	4602      	mov	r2, r0
 800d660:	b928      	cbnz	r0, 800d66e <__i2b+0x1a>
 800d662:	f240 1145 	movw	r1, #325	; 0x145
 800d666:	4b04      	ldr	r3, [pc, #16]	; (800d678 <__i2b+0x24>)
 800d668:	4804      	ldr	r0, [pc, #16]	; (800d67c <__i2b+0x28>)
 800d66a:	f000 fca1 	bl	800dfb0 <__assert_func>
 800d66e:	2301      	movs	r3, #1
 800d670:	6144      	str	r4, [r0, #20]
 800d672:	6103      	str	r3, [r0, #16]
 800d674:	bd10      	pop	{r4, pc}
 800d676:	bf00      	nop
 800d678:	08010f7a 	.word	0x08010f7a
 800d67c:	08010f8b 	.word	0x08010f8b

0800d680 <__multiply>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	4691      	mov	r9, r2
 800d686:	690a      	ldr	r2, [r1, #16]
 800d688:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d68c:	460c      	mov	r4, r1
 800d68e:	429a      	cmp	r2, r3
 800d690:	bfbe      	ittt	lt
 800d692:	460b      	movlt	r3, r1
 800d694:	464c      	movlt	r4, r9
 800d696:	4699      	movlt	r9, r3
 800d698:	6927      	ldr	r7, [r4, #16]
 800d69a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d69e:	68a3      	ldr	r3, [r4, #8]
 800d6a0:	6861      	ldr	r1, [r4, #4]
 800d6a2:	eb07 060a 	add.w	r6, r7, sl
 800d6a6:	42b3      	cmp	r3, r6
 800d6a8:	b085      	sub	sp, #20
 800d6aa:	bfb8      	it	lt
 800d6ac:	3101      	addlt	r1, #1
 800d6ae:	f7ff fedb 	bl	800d468 <_Balloc>
 800d6b2:	b930      	cbnz	r0, 800d6c2 <__multiply+0x42>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d6ba:	4b43      	ldr	r3, [pc, #268]	; (800d7c8 <__multiply+0x148>)
 800d6bc:	4843      	ldr	r0, [pc, #268]	; (800d7cc <__multiply+0x14c>)
 800d6be:	f000 fc77 	bl	800dfb0 <__assert_func>
 800d6c2:	f100 0514 	add.w	r5, r0, #20
 800d6c6:	462b      	mov	r3, r5
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6ce:	4543      	cmp	r3, r8
 800d6d0:	d321      	bcc.n	800d716 <__multiply+0x96>
 800d6d2:	f104 0314 	add.w	r3, r4, #20
 800d6d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6da:	f109 0314 	add.w	r3, r9, #20
 800d6de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6e2:	9202      	str	r2, [sp, #8]
 800d6e4:	1b3a      	subs	r2, r7, r4
 800d6e6:	3a15      	subs	r2, #21
 800d6e8:	f022 0203 	bic.w	r2, r2, #3
 800d6ec:	3204      	adds	r2, #4
 800d6ee:	f104 0115 	add.w	r1, r4, #21
 800d6f2:	428f      	cmp	r7, r1
 800d6f4:	bf38      	it	cc
 800d6f6:	2204      	movcc	r2, #4
 800d6f8:	9201      	str	r2, [sp, #4]
 800d6fa:	9a02      	ldr	r2, [sp, #8]
 800d6fc:	9303      	str	r3, [sp, #12]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d80c      	bhi.n	800d71c <__multiply+0x9c>
 800d702:	2e00      	cmp	r6, #0
 800d704:	dd03      	ble.n	800d70e <__multiply+0x8e>
 800d706:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d05a      	beq.n	800d7c4 <__multiply+0x144>
 800d70e:	6106      	str	r6, [r0, #16]
 800d710:	b005      	add	sp, #20
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	f843 2b04 	str.w	r2, [r3], #4
 800d71a:	e7d8      	b.n	800d6ce <__multiply+0x4e>
 800d71c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d720:	f1ba 0f00 	cmp.w	sl, #0
 800d724:	d023      	beq.n	800d76e <__multiply+0xee>
 800d726:	46a9      	mov	r9, r5
 800d728:	f04f 0c00 	mov.w	ip, #0
 800d72c:	f104 0e14 	add.w	lr, r4, #20
 800d730:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d734:	f8d9 1000 	ldr.w	r1, [r9]
 800d738:	fa1f fb82 	uxth.w	fp, r2
 800d73c:	b289      	uxth	r1, r1
 800d73e:	fb0a 110b 	mla	r1, sl, fp, r1
 800d742:	4461      	add	r1, ip
 800d744:	f8d9 c000 	ldr.w	ip, [r9]
 800d748:	0c12      	lsrs	r2, r2, #16
 800d74a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d74e:	fb0a c202 	mla	r2, sl, r2, ip
 800d752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d756:	b289      	uxth	r1, r1
 800d758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d75c:	4577      	cmp	r7, lr
 800d75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d762:	f849 1b04 	str.w	r1, [r9], #4
 800d766:	d8e3      	bhi.n	800d730 <__multiply+0xb0>
 800d768:	9a01      	ldr	r2, [sp, #4]
 800d76a:	f845 c002 	str.w	ip, [r5, r2]
 800d76e:	9a03      	ldr	r2, [sp, #12]
 800d770:	3304      	adds	r3, #4
 800d772:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d776:	f1b9 0f00 	cmp.w	r9, #0
 800d77a:	d021      	beq.n	800d7c0 <__multiply+0x140>
 800d77c:	46ae      	mov	lr, r5
 800d77e:	f04f 0a00 	mov.w	sl, #0
 800d782:	6829      	ldr	r1, [r5, #0]
 800d784:	f104 0c14 	add.w	ip, r4, #20
 800d788:	f8bc b000 	ldrh.w	fp, [ip]
 800d78c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d790:	b289      	uxth	r1, r1
 800d792:	fb09 220b 	mla	r2, r9, fp, r2
 800d796:	4452      	add	r2, sl
 800d798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d79c:	f84e 1b04 	str.w	r1, [lr], #4
 800d7a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7a8:	f8be 1000 	ldrh.w	r1, [lr]
 800d7ac:	4567      	cmp	r7, ip
 800d7ae:	fb09 110a 	mla	r1, r9, sl, r1
 800d7b2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d7b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7ba:	d8e5      	bhi.n	800d788 <__multiply+0x108>
 800d7bc:	9a01      	ldr	r2, [sp, #4]
 800d7be:	50a9      	str	r1, [r5, r2]
 800d7c0:	3504      	adds	r5, #4
 800d7c2:	e79a      	b.n	800d6fa <__multiply+0x7a>
 800d7c4:	3e01      	subs	r6, #1
 800d7c6:	e79c      	b.n	800d702 <__multiply+0x82>
 800d7c8:	08010f7a 	.word	0x08010f7a
 800d7cc:	08010f8b 	.word	0x08010f8b

0800d7d0 <__pow5mult>:
 800d7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7d4:	4615      	mov	r5, r2
 800d7d6:	f012 0203 	ands.w	r2, r2, #3
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460f      	mov	r7, r1
 800d7de:	d007      	beq.n	800d7f0 <__pow5mult+0x20>
 800d7e0:	4c25      	ldr	r4, [pc, #148]	; (800d878 <__pow5mult+0xa8>)
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7ea:	f7ff fe9f 	bl	800d52c <__multadd>
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	10ad      	asrs	r5, r5, #2
 800d7f2:	d03d      	beq.n	800d870 <__pow5mult+0xa0>
 800d7f4:	69f4      	ldr	r4, [r6, #28]
 800d7f6:	b97c      	cbnz	r4, 800d818 <__pow5mult+0x48>
 800d7f8:	2010      	movs	r0, #16
 800d7fa:	f7ff fd81 	bl	800d300 <malloc>
 800d7fe:	4602      	mov	r2, r0
 800d800:	61f0      	str	r0, [r6, #28]
 800d802:	b928      	cbnz	r0, 800d810 <__pow5mult+0x40>
 800d804:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d808:	4b1c      	ldr	r3, [pc, #112]	; (800d87c <__pow5mult+0xac>)
 800d80a:	481d      	ldr	r0, [pc, #116]	; (800d880 <__pow5mult+0xb0>)
 800d80c:	f000 fbd0 	bl	800dfb0 <__assert_func>
 800d810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d814:	6004      	str	r4, [r0, #0]
 800d816:	60c4      	str	r4, [r0, #12]
 800d818:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d820:	b94c      	cbnz	r4, 800d836 <__pow5mult+0x66>
 800d822:	f240 2171 	movw	r1, #625	; 0x271
 800d826:	4630      	mov	r0, r6
 800d828:	f7ff ff14 	bl	800d654 <__i2b>
 800d82c:	2300      	movs	r3, #0
 800d82e:	4604      	mov	r4, r0
 800d830:	f8c8 0008 	str.w	r0, [r8, #8]
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	f04f 0900 	mov.w	r9, #0
 800d83a:	07eb      	lsls	r3, r5, #31
 800d83c:	d50a      	bpl.n	800d854 <__pow5mult+0x84>
 800d83e:	4639      	mov	r1, r7
 800d840:	4622      	mov	r2, r4
 800d842:	4630      	mov	r0, r6
 800d844:	f7ff ff1c 	bl	800d680 <__multiply>
 800d848:	4680      	mov	r8, r0
 800d84a:	4639      	mov	r1, r7
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff fe4b 	bl	800d4e8 <_Bfree>
 800d852:	4647      	mov	r7, r8
 800d854:	106d      	asrs	r5, r5, #1
 800d856:	d00b      	beq.n	800d870 <__pow5mult+0xa0>
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	b938      	cbnz	r0, 800d86c <__pow5mult+0x9c>
 800d85c:	4622      	mov	r2, r4
 800d85e:	4621      	mov	r1, r4
 800d860:	4630      	mov	r0, r6
 800d862:	f7ff ff0d 	bl	800d680 <__multiply>
 800d866:	6020      	str	r0, [r4, #0]
 800d868:	f8c0 9000 	str.w	r9, [r0]
 800d86c:	4604      	mov	r4, r0
 800d86e:	e7e4      	b.n	800d83a <__pow5mult+0x6a>
 800d870:	4638      	mov	r0, r7
 800d872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d876:	bf00      	nop
 800d878:	080110d8 	.word	0x080110d8
 800d87c:	08010f0b 	.word	0x08010f0b
 800d880:	08010f8b 	.word	0x08010f8b

0800d884 <__lshift>:
 800d884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d888:	460c      	mov	r4, r1
 800d88a:	4607      	mov	r7, r0
 800d88c:	4691      	mov	r9, r2
 800d88e:	6923      	ldr	r3, [r4, #16]
 800d890:	6849      	ldr	r1, [r1, #4]
 800d892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d896:	68a3      	ldr	r3, [r4, #8]
 800d898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d89c:	f108 0601 	add.w	r6, r8, #1
 800d8a0:	42b3      	cmp	r3, r6
 800d8a2:	db0b      	blt.n	800d8bc <__lshift+0x38>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f7ff fddf 	bl	800d468 <_Balloc>
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b948      	cbnz	r0, 800d8c2 <__lshift+0x3e>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d8b4:	4b27      	ldr	r3, [pc, #156]	; (800d954 <__lshift+0xd0>)
 800d8b6:	4828      	ldr	r0, [pc, #160]	; (800d958 <__lshift+0xd4>)
 800d8b8:	f000 fb7a 	bl	800dfb0 <__assert_func>
 800d8bc:	3101      	adds	r1, #1
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	e7ee      	b.n	800d8a0 <__lshift+0x1c>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f100 0114 	add.w	r1, r0, #20
 800d8c8:	f100 0210 	add.w	r2, r0, #16
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	4553      	cmp	r3, sl
 800d8d0:	db33      	blt.n	800d93a <__lshift+0xb6>
 800d8d2:	6920      	ldr	r0, [r4, #16]
 800d8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8d8:	f104 0314 	add.w	r3, r4, #20
 800d8dc:	f019 091f 	ands.w	r9, r9, #31
 800d8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8e8:	d02b      	beq.n	800d942 <__lshift+0xbe>
 800d8ea:	468a      	mov	sl, r1
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f1c9 0e20 	rsb	lr, r9, #32
 800d8f2:	6818      	ldr	r0, [r3, #0]
 800d8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d8f8:	4310      	orrs	r0, r2
 800d8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d902:	459c      	cmp	ip, r3
 800d904:	fa22 f20e 	lsr.w	r2, r2, lr
 800d908:	d8f3      	bhi.n	800d8f2 <__lshift+0x6e>
 800d90a:	ebac 0304 	sub.w	r3, ip, r4
 800d90e:	3b15      	subs	r3, #21
 800d910:	f023 0303 	bic.w	r3, r3, #3
 800d914:	3304      	adds	r3, #4
 800d916:	f104 0015 	add.w	r0, r4, #21
 800d91a:	4584      	cmp	ip, r0
 800d91c:	bf38      	it	cc
 800d91e:	2304      	movcc	r3, #4
 800d920:	50ca      	str	r2, [r1, r3]
 800d922:	b10a      	cbz	r2, 800d928 <__lshift+0xa4>
 800d924:	f108 0602 	add.w	r6, r8, #2
 800d928:	3e01      	subs	r6, #1
 800d92a:	4638      	mov	r0, r7
 800d92c:	4621      	mov	r1, r4
 800d92e:	612e      	str	r6, [r5, #16]
 800d930:	f7ff fdda 	bl	800d4e8 <_Bfree>
 800d934:	4628      	mov	r0, r5
 800d936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d93e:	3301      	adds	r3, #1
 800d940:	e7c5      	b.n	800d8ce <__lshift+0x4a>
 800d942:	3904      	subs	r1, #4
 800d944:	f853 2b04 	ldr.w	r2, [r3], #4
 800d948:	459c      	cmp	ip, r3
 800d94a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d94e:	d8f9      	bhi.n	800d944 <__lshift+0xc0>
 800d950:	e7ea      	b.n	800d928 <__lshift+0xa4>
 800d952:	bf00      	nop
 800d954:	08010f7a 	.word	0x08010f7a
 800d958:	08010f8b 	.word	0x08010f8b

0800d95c <__mcmp>:
 800d95c:	4603      	mov	r3, r0
 800d95e:	690a      	ldr	r2, [r1, #16]
 800d960:	6900      	ldr	r0, [r0, #16]
 800d962:	b530      	push	{r4, r5, lr}
 800d964:	1a80      	subs	r0, r0, r2
 800d966:	d10d      	bne.n	800d984 <__mcmp+0x28>
 800d968:	3314      	adds	r3, #20
 800d96a:	3114      	adds	r1, #20
 800d96c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d970:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d97c:	4295      	cmp	r5, r2
 800d97e:	d002      	beq.n	800d986 <__mcmp+0x2a>
 800d980:	d304      	bcc.n	800d98c <__mcmp+0x30>
 800d982:	2001      	movs	r0, #1
 800d984:	bd30      	pop	{r4, r5, pc}
 800d986:	42a3      	cmp	r3, r4
 800d988:	d3f4      	bcc.n	800d974 <__mcmp+0x18>
 800d98a:	e7fb      	b.n	800d984 <__mcmp+0x28>
 800d98c:	f04f 30ff 	mov.w	r0, #4294967295
 800d990:	e7f8      	b.n	800d984 <__mcmp+0x28>
	...

0800d994 <__mdiff>:
 800d994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d998:	460d      	mov	r5, r1
 800d99a:	4607      	mov	r7, r0
 800d99c:	4611      	mov	r1, r2
 800d99e:	4628      	mov	r0, r5
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	f7ff ffdb 	bl	800d95c <__mcmp>
 800d9a6:	1e06      	subs	r6, r0, #0
 800d9a8:	d111      	bne.n	800d9ce <__mdiff+0x3a>
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f7ff fd5b 	bl	800d468 <_Balloc>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	b928      	cbnz	r0, 800d9c2 <__mdiff+0x2e>
 800d9b6:	f240 2137 	movw	r1, #567	; 0x237
 800d9ba:	4b3a      	ldr	r3, [pc, #232]	; (800daa4 <__mdiff+0x110>)
 800d9bc:	483a      	ldr	r0, [pc, #232]	; (800daa8 <__mdiff+0x114>)
 800d9be:	f000 faf7 	bl	800dfb0 <__assert_func>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ce:	bfa4      	itt	ge
 800d9d0:	4623      	movge	r3, r4
 800d9d2:	462c      	movge	r4, r5
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	6861      	ldr	r1, [r4, #4]
 800d9d8:	bfa6      	itte	ge
 800d9da:	461d      	movge	r5, r3
 800d9dc:	2600      	movge	r6, #0
 800d9de:	2601      	movlt	r6, #1
 800d9e0:	f7ff fd42 	bl	800d468 <_Balloc>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	b918      	cbnz	r0, 800d9f0 <__mdiff+0x5c>
 800d9e8:	f240 2145 	movw	r1, #581	; 0x245
 800d9ec:	4b2d      	ldr	r3, [pc, #180]	; (800daa4 <__mdiff+0x110>)
 800d9ee:	e7e5      	b.n	800d9bc <__mdiff+0x28>
 800d9f0:	f102 0814 	add.w	r8, r2, #20
 800d9f4:	46c2      	mov	sl, r8
 800d9f6:	f04f 0c00 	mov.w	ip, #0
 800d9fa:	6927      	ldr	r7, [r4, #16]
 800d9fc:	60c6      	str	r6, [r0, #12]
 800d9fe:	692e      	ldr	r6, [r5, #16]
 800da00:	f104 0014 	add.w	r0, r4, #20
 800da04:	f105 0914 	add.w	r9, r5, #20
 800da08:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800da0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da10:	3410      	adds	r4, #16
 800da12:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800da16:	f859 3b04 	ldr.w	r3, [r9], #4
 800da1a:	fa1f f18b 	uxth.w	r1, fp
 800da1e:	4461      	add	r1, ip
 800da20:	fa1f fc83 	uxth.w	ip, r3
 800da24:	0c1b      	lsrs	r3, r3, #16
 800da26:	eba1 010c 	sub.w	r1, r1, ip
 800da2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800da32:	b289      	uxth	r1, r1
 800da34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800da38:	454e      	cmp	r6, r9
 800da3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800da3e:	f84a 1b04 	str.w	r1, [sl], #4
 800da42:	d8e6      	bhi.n	800da12 <__mdiff+0x7e>
 800da44:	1b73      	subs	r3, r6, r5
 800da46:	3b15      	subs	r3, #21
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	3515      	adds	r5, #21
 800da4e:	3304      	adds	r3, #4
 800da50:	42ae      	cmp	r6, r5
 800da52:	bf38      	it	cc
 800da54:	2304      	movcc	r3, #4
 800da56:	4418      	add	r0, r3
 800da58:	4443      	add	r3, r8
 800da5a:	461e      	mov	r6, r3
 800da5c:	4605      	mov	r5, r0
 800da5e:	4575      	cmp	r5, lr
 800da60:	d30e      	bcc.n	800da80 <__mdiff+0xec>
 800da62:	f10e 0103 	add.w	r1, lr, #3
 800da66:	1a09      	subs	r1, r1, r0
 800da68:	f021 0103 	bic.w	r1, r1, #3
 800da6c:	3803      	subs	r0, #3
 800da6e:	4586      	cmp	lr, r0
 800da70:	bf38      	it	cc
 800da72:	2100      	movcc	r1, #0
 800da74:	440b      	add	r3, r1
 800da76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da7a:	b189      	cbz	r1, 800daa0 <__mdiff+0x10c>
 800da7c:	6117      	str	r7, [r2, #16]
 800da7e:	e7a3      	b.n	800d9c8 <__mdiff+0x34>
 800da80:	f855 8b04 	ldr.w	r8, [r5], #4
 800da84:	fa1f f188 	uxth.w	r1, r8
 800da88:	4461      	add	r1, ip
 800da8a:	140c      	asrs	r4, r1, #16
 800da8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da90:	b289      	uxth	r1, r1
 800da92:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800da96:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800da9a:	f846 1b04 	str.w	r1, [r6], #4
 800da9e:	e7de      	b.n	800da5e <__mdiff+0xca>
 800daa0:	3f01      	subs	r7, #1
 800daa2:	e7e8      	b.n	800da76 <__mdiff+0xe2>
 800daa4:	08010f7a 	.word	0x08010f7a
 800daa8:	08010f8b 	.word	0x08010f8b

0800daac <__d2b>:
 800daac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daae:	2101      	movs	r1, #1
 800dab0:	4617      	mov	r7, r2
 800dab2:	461c      	mov	r4, r3
 800dab4:	9e08      	ldr	r6, [sp, #32]
 800dab6:	f7ff fcd7 	bl	800d468 <_Balloc>
 800daba:	4605      	mov	r5, r0
 800dabc:	b930      	cbnz	r0, 800dacc <__d2b+0x20>
 800dabe:	4602      	mov	r2, r0
 800dac0:	f240 310f 	movw	r1, #783	; 0x30f
 800dac4:	4b22      	ldr	r3, [pc, #136]	; (800db50 <__d2b+0xa4>)
 800dac6:	4823      	ldr	r0, [pc, #140]	; (800db54 <__d2b+0xa8>)
 800dac8:	f000 fa72 	bl	800dfb0 <__assert_func>
 800dacc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dad0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800dad4:	bb24      	cbnz	r4, 800db20 <__d2b+0x74>
 800dad6:	2f00      	cmp	r7, #0
 800dad8:	9301      	str	r3, [sp, #4]
 800dada:	d026      	beq.n	800db2a <__d2b+0x7e>
 800dadc:	4668      	mov	r0, sp
 800dade:	9700      	str	r7, [sp, #0]
 800dae0:	f7ff fd8a 	bl	800d5f8 <__lo0bits>
 800dae4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dae8:	b1e8      	cbz	r0, 800db26 <__d2b+0x7a>
 800daea:	f1c0 0320 	rsb	r3, r0, #32
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	430b      	orrs	r3, r1
 800daf4:	40c2      	lsrs	r2, r0
 800daf6:	616b      	str	r3, [r5, #20]
 800daf8:	9201      	str	r2, [sp, #4]
 800dafa:	9b01      	ldr	r3, [sp, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	bf14      	ite	ne
 800db00:	2102      	movne	r1, #2
 800db02:	2101      	moveq	r1, #1
 800db04:	61ab      	str	r3, [r5, #24]
 800db06:	6129      	str	r1, [r5, #16]
 800db08:	b1bc      	cbz	r4, 800db3a <__d2b+0x8e>
 800db0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800db0e:	4404      	add	r4, r0
 800db10:	6034      	str	r4, [r6, #0]
 800db12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db18:	6018      	str	r0, [r3, #0]
 800db1a:	4628      	mov	r0, r5
 800db1c:	b003      	add	sp, #12
 800db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db24:	e7d7      	b.n	800dad6 <__d2b+0x2a>
 800db26:	6169      	str	r1, [r5, #20]
 800db28:	e7e7      	b.n	800dafa <__d2b+0x4e>
 800db2a:	a801      	add	r0, sp, #4
 800db2c:	f7ff fd64 	bl	800d5f8 <__lo0bits>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	2101      	movs	r1, #1
 800db34:	616b      	str	r3, [r5, #20]
 800db36:	3020      	adds	r0, #32
 800db38:	e7e5      	b.n	800db06 <__d2b+0x5a>
 800db3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db3e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800db42:	6030      	str	r0, [r6, #0]
 800db44:	6918      	ldr	r0, [r3, #16]
 800db46:	f7ff fd37 	bl	800d5b8 <__hi0bits>
 800db4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800db4e:	e7e2      	b.n	800db16 <__d2b+0x6a>
 800db50:	08010f7a 	.word	0x08010f7a
 800db54:	08010f8b 	.word	0x08010f8b

0800db58 <__ssputs_r>:
 800db58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db5c:	461f      	mov	r7, r3
 800db5e:	688e      	ldr	r6, [r1, #8]
 800db60:	4682      	mov	sl, r0
 800db62:	42be      	cmp	r6, r7
 800db64:	460c      	mov	r4, r1
 800db66:	4690      	mov	r8, r2
 800db68:	680b      	ldr	r3, [r1, #0]
 800db6a:	d82c      	bhi.n	800dbc6 <__ssputs_r+0x6e>
 800db6c:	898a      	ldrh	r2, [r1, #12]
 800db6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db72:	d026      	beq.n	800dbc2 <__ssputs_r+0x6a>
 800db74:	6965      	ldr	r5, [r4, #20]
 800db76:	6909      	ldr	r1, [r1, #16]
 800db78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db7c:	eba3 0901 	sub.w	r9, r3, r1
 800db80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db84:	1c7b      	adds	r3, r7, #1
 800db86:	444b      	add	r3, r9
 800db88:	106d      	asrs	r5, r5, #1
 800db8a:	429d      	cmp	r5, r3
 800db8c:	bf38      	it	cc
 800db8e:	461d      	movcc	r5, r3
 800db90:	0553      	lsls	r3, r2, #21
 800db92:	d527      	bpl.n	800dbe4 <__ssputs_r+0x8c>
 800db94:	4629      	mov	r1, r5
 800db96:	f7ff fbdb 	bl	800d350 <_malloc_r>
 800db9a:	4606      	mov	r6, r0
 800db9c:	b360      	cbz	r0, 800dbf8 <__ssputs_r+0xa0>
 800db9e:	464a      	mov	r2, r9
 800dba0:	6921      	ldr	r1, [r4, #16]
 800dba2:	f7fe fce8 	bl	800c576 <memcpy>
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	6126      	str	r6, [r4, #16]
 800dbb4:	444e      	add	r6, r9
 800dbb6:	6026      	str	r6, [r4, #0]
 800dbb8:	463e      	mov	r6, r7
 800dbba:	6165      	str	r5, [r4, #20]
 800dbbc:	eba5 0509 	sub.w	r5, r5, r9
 800dbc0:	60a5      	str	r5, [r4, #8]
 800dbc2:	42be      	cmp	r6, r7
 800dbc4:	d900      	bls.n	800dbc8 <__ssputs_r+0x70>
 800dbc6:	463e      	mov	r6, r7
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4641      	mov	r1, r8
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	f000 f9c5 	bl	800df5c <memmove>
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	1b9b      	subs	r3, r3, r6
 800dbd8:	60a3      	str	r3, [r4, #8]
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	4433      	add	r3, r6
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe4:	462a      	mov	r2, r5
 800dbe6:	f000 fa27 	bl	800e038 <_realloc_r>
 800dbea:	4606      	mov	r6, r0
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d1e0      	bne.n	800dbb2 <__ssputs_r+0x5a>
 800dbf0:	4650      	mov	r0, sl
 800dbf2:	6921      	ldr	r1, [r4, #16]
 800dbf4:	f7ff fb3c 	bl	800d270 <_free_r>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	f8ca 3000 	str.w	r3, [sl]
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	e7e9      	b.n	800dbe0 <__ssputs_r+0x88>

0800dc0c <_svfiprintf_r>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	4698      	mov	r8, r3
 800dc12:	898b      	ldrh	r3, [r1, #12]
 800dc14:	4607      	mov	r7, r0
 800dc16:	061b      	lsls	r3, r3, #24
 800dc18:	460d      	mov	r5, r1
 800dc1a:	4614      	mov	r4, r2
 800dc1c:	b09d      	sub	sp, #116	; 0x74
 800dc1e:	d50e      	bpl.n	800dc3e <_svfiprintf_r+0x32>
 800dc20:	690b      	ldr	r3, [r1, #16]
 800dc22:	b963      	cbnz	r3, 800dc3e <_svfiprintf_r+0x32>
 800dc24:	2140      	movs	r1, #64	; 0x40
 800dc26:	f7ff fb93 	bl	800d350 <_malloc_r>
 800dc2a:	6028      	str	r0, [r5, #0]
 800dc2c:	6128      	str	r0, [r5, #16]
 800dc2e:	b920      	cbnz	r0, 800dc3a <_svfiprintf_r+0x2e>
 800dc30:	230c      	movs	r3, #12
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	e0d0      	b.n	800dddc <_svfiprintf_r+0x1d0>
 800dc3a:	2340      	movs	r3, #64	; 0x40
 800dc3c:	616b      	str	r3, [r5, #20]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	9309      	str	r3, [sp, #36]	; 0x24
 800dc42:	2320      	movs	r3, #32
 800dc44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc48:	2330      	movs	r3, #48	; 0x30
 800dc4a:	f04f 0901 	mov.w	r9, #1
 800dc4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc52:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ddf4 <_svfiprintf_r+0x1e8>
 800dc56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc5a:	4623      	mov	r3, r4
 800dc5c:	469a      	mov	sl, r3
 800dc5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc62:	b10a      	cbz	r2, 800dc68 <_svfiprintf_r+0x5c>
 800dc64:	2a25      	cmp	r2, #37	; 0x25
 800dc66:	d1f9      	bne.n	800dc5c <_svfiprintf_r+0x50>
 800dc68:	ebba 0b04 	subs.w	fp, sl, r4
 800dc6c:	d00b      	beq.n	800dc86 <_svfiprintf_r+0x7a>
 800dc6e:	465b      	mov	r3, fp
 800dc70:	4622      	mov	r2, r4
 800dc72:	4629      	mov	r1, r5
 800dc74:	4638      	mov	r0, r7
 800dc76:	f7ff ff6f 	bl	800db58 <__ssputs_r>
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	f000 80a9 	beq.w	800ddd2 <_svfiprintf_r+0x1c6>
 800dc80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc82:	445a      	add	r2, fp
 800dc84:	9209      	str	r2, [sp, #36]	; 0x24
 800dc86:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 80a1 	beq.w	800ddd2 <_svfiprintf_r+0x1c6>
 800dc90:	2300      	movs	r3, #0
 800dc92:	f04f 32ff 	mov.w	r2, #4294967295
 800dc96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc9a:	f10a 0a01 	add.w	sl, sl, #1
 800dc9e:	9304      	str	r3, [sp, #16]
 800dca0:	9307      	str	r3, [sp, #28]
 800dca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dca6:	931a      	str	r3, [sp, #104]	; 0x68
 800dca8:	4654      	mov	r4, sl
 800dcaa:	2205      	movs	r2, #5
 800dcac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb0:	4850      	ldr	r0, [pc, #320]	; (800ddf4 <_svfiprintf_r+0x1e8>)
 800dcb2:	f7fe fc52 	bl	800c55a <memchr>
 800dcb6:	9a04      	ldr	r2, [sp, #16]
 800dcb8:	b9d8      	cbnz	r0, 800dcf2 <_svfiprintf_r+0xe6>
 800dcba:	06d0      	lsls	r0, r2, #27
 800dcbc:	bf44      	itt	mi
 800dcbe:	2320      	movmi	r3, #32
 800dcc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcc4:	0711      	lsls	r1, r2, #28
 800dcc6:	bf44      	itt	mi
 800dcc8:	232b      	movmi	r3, #43	; 0x2b
 800dcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcce:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd2:	2b2a      	cmp	r3, #42	; 0x2a
 800dcd4:	d015      	beq.n	800dd02 <_svfiprintf_r+0xf6>
 800dcd6:	4654      	mov	r4, sl
 800dcd8:	2000      	movs	r0, #0
 800dcda:	f04f 0c0a 	mov.w	ip, #10
 800dcde:	9a07      	ldr	r2, [sp, #28]
 800dce0:	4621      	mov	r1, r4
 800dce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce6:	3b30      	subs	r3, #48	; 0x30
 800dce8:	2b09      	cmp	r3, #9
 800dcea:	d94d      	bls.n	800dd88 <_svfiprintf_r+0x17c>
 800dcec:	b1b0      	cbz	r0, 800dd1c <_svfiprintf_r+0x110>
 800dcee:	9207      	str	r2, [sp, #28]
 800dcf0:	e014      	b.n	800dd1c <_svfiprintf_r+0x110>
 800dcf2:	eba0 0308 	sub.w	r3, r0, r8
 800dcf6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	46a2      	mov	sl, r4
 800dcfe:	9304      	str	r3, [sp, #16]
 800dd00:	e7d2      	b.n	800dca8 <_svfiprintf_r+0x9c>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	1d19      	adds	r1, r3, #4
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	9103      	str	r1, [sp, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfbb      	ittet	lt
 800dd0e:	425b      	neglt	r3, r3
 800dd10:	f042 0202 	orrlt.w	r2, r2, #2
 800dd14:	9307      	strge	r3, [sp, #28]
 800dd16:	9307      	strlt	r3, [sp, #28]
 800dd18:	bfb8      	it	lt
 800dd1a:	9204      	strlt	r2, [sp, #16]
 800dd1c:	7823      	ldrb	r3, [r4, #0]
 800dd1e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd20:	d10c      	bne.n	800dd3c <_svfiprintf_r+0x130>
 800dd22:	7863      	ldrb	r3, [r4, #1]
 800dd24:	2b2a      	cmp	r3, #42	; 0x2a
 800dd26:	d134      	bne.n	800dd92 <_svfiprintf_r+0x186>
 800dd28:	9b03      	ldr	r3, [sp, #12]
 800dd2a:	3402      	adds	r4, #2
 800dd2c:	1d1a      	adds	r2, r3, #4
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	9203      	str	r2, [sp, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	bfb8      	it	lt
 800dd36:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd3a:	9305      	str	r3, [sp, #20]
 800dd3c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ddf8 <_svfiprintf_r+0x1ec>
 800dd40:	2203      	movs	r2, #3
 800dd42:	4650      	mov	r0, sl
 800dd44:	7821      	ldrb	r1, [r4, #0]
 800dd46:	f7fe fc08 	bl	800c55a <memchr>
 800dd4a:	b138      	cbz	r0, 800dd5c <_svfiprintf_r+0x150>
 800dd4c:	2240      	movs	r2, #64	; 0x40
 800dd4e:	9b04      	ldr	r3, [sp, #16]
 800dd50:	eba0 000a 	sub.w	r0, r0, sl
 800dd54:	4082      	lsls	r2, r0
 800dd56:	4313      	orrs	r3, r2
 800dd58:	3401      	adds	r4, #1
 800dd5a:	9304      	str	r3, [sp, #16]
 800dd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd60:	2206      	movs	r2, #6
 800dd62:	4826      	ldr	r0, [pc, #152]	; (800ddfc <_svfiprintf_r+0x1f0>)
 800dd64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd68:	f7fe fbf7 	bl	800c55a <memchr>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d038      	beq.n	800dde2 <_svfiprintf_r+0x1d6>
 800dd70:	4b23      	ldr	r3, [pc, #140]	; (800de00 <_svfiprintf_r+0x1f4>)
 800dd72:	bb1b      	cbnz	r3, 800ddbc <_svfiprintf_r+0x1b0>
 800dd74:	9b03      	ldr	r3, [sp, #12]
 800dd76:	3307      	adds	r3, #7
 800dd78:	f023 0307 	bic.w	r3, r3, #7
 800dd7c:	3308      	adds	r3, #8
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd82:	4433      	add	r3, r6
 800dd84:	9309      	str	r3, [sp, #36]	; 0x24
 800dd86:	e768      	b.n	800dc5a <_svfiprintf_r+0x4e>
 800dd88:	460c      	mov	r4, r1
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd90:	e7a6      	b.n	800dce0 <_svfiprintf_r+0xd4>
 800dd92:	2300      	movs	r3, #0
 800dd94:	f04f 0c0a 	mov.w	ip, #10
 800dd98:	4619      	mov	r1, r3
 800dd9a:	3401      	adds	r4, #1
 800dd9c:	9305      	str	r3, [sp, #20]
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dda4:	3a30      	subs	r2, #48	; 0x30
 800dda6:	2a09      	cmp	r2, #9
 800dda8:	d903      	bls.n	800ddb2 <_svfiprintf_r+0x1a6>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d0c6      	beq.n	800dd3c <_svfiprintf_r+0x130>
 800ddae:	9105      	str	r1, [sp, #20]
 800ddb0:	e7c4      	b.n	800dd3c <_svfiprintf_r+0x130>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddba:	e7f0      	b.n	800dd9e <_svfiprintf_r+0x192>
 800ddbc:	ab03      	add	r3, sp, #12
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	462a      	mov	r2, r5
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	4b0f      	ldr	r3, [pc, #60]	; (800de04 <_svfiprintf_r+0x1f8>)
 800ddc6:	a904      	add	r1, sp, #16
 800ddc8:	f7fd fe60 	bl	800ba8c <_printf_float>
 800ddcc:	1c42      	adds	r2, r0, #1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	d1d6      	bne.n	800dd80 <_svfiprintf_r+0x174>
 800ddd2:	89ab      	ldrh	r3, [r5, #12]
 800ddd4:	065b      	lsls	r3, r3, #25
 800ddd6:	f53f af2d 	bmi.w	800dc34 <_svfiprintf_r+0x28>
 800ddda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dddc:	b01d      	add	sp, #116	; 0x74
 800ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde2:	ab03      	add	r3, sp, #12
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	462a      	mov	r2, r5
 800dde8:	4638      	mov	r0, r7
 800ddea:	4b06      	ldr	r3, [pc, #24]	; (800de04 <_svfiprintf_r+0x1f8>)
 800ddec:	a904      	add	r1, sp, #16
 800ddee:	f7fe f8ed 	bl	800bfcc <_printf_i>
 800ddf2:	e7eb      	b.n	800ddcc <_svfiprintf_r+0x1c0>
 800ddf4:	080110e4 	.word	0x080110e4
 800ddf8:	080110ea 	.word	0x080110ea
 800ddfc:	080110ee 	.word	0x080110ee
 800de00:	0800ba8d 	.word	0x0800ba8d
 800de04:	0800db59 	.word	0x0800db59

0800de08 <__sflush_r>:
 800de08:	898a      	ldrh	r2, [r1, #12]
 800de0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0c:	4605      	mov	r5, r0
 800de0e:	0710      	lsls	r0, r2, #28
 800de10:	460c      	mov	r4, r1
 800de12:	d457      	bmi.n	800dec4 <__sflush_r+0xbc>
 800de14:	684b      	ldr	r3, [r1, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	dc04      	bgt.n	800de24 <__sflush_r+0x1c>
 800de1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	dc01      	bgt.n	800de24 <__sflush_r+0x1c>
 800de20:	2000      	movs	r0, #0
 800de22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de26:	2e00      	cmp	r6, #0
 800de28:	d0fa      	beq.n	800de20 <__sflush_r+0x18>
 800de2a:	2300      	movs	r3, #0
 800de2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de30:	682f      	ldr	r7, [r5, #0]
 800de32:	6a21      	ldr	r1, [r4, #32]
 800de34:	602b      	str	r3, [r5, #0]
 800de36:	d032      	beq.n	800de9e <__sflush_r+0x96>
 800de38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de3a:	89a3      	ldrh	r3, [r4, #12]
 800de3c:	075a      	lsls	r2, r3, #29
 800de3e:	d505      	bpl.n	800de4c <__sflush_r+0x44>
 800de40:	6863      	ldr	r3, [r4, #4]
 800de42:	1ac0      	subs	r0, r0, r3
 800de44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de46:	b10b      	cbz	r3, 800de4c <__sflush_r+0x44>
 800de48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de4a:	1ac0      	subs	r0, r0, r3
 800de4c:	2300      	movs	r3, #0
 800de4e:	4602      	mov	r2, r0
 800de50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de52:	4628      	mov	r0, r5
 800de54:	6a21      	ldr	r1, [r4, #32]
 800de56:	47b0      	blx	r6
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	d106      	bne.n	800de6c <__sflush_r+0x64>
 800de5e:	6829      	ldr	r1, [r5, #0]
 800de60:	291d      	cmp	r1, #29
 800de62:	d82b      	bhi.n	800debc <__sflush_r+0xb4>
 800de64:	4a28      	ldr	r2, [pc, #160]	; (800df08 <__sflush_r+0x100>)
 800de66:	410a      	asrs	r2, r1
 800de68:	07d6      	lsls	r6, r2, #31
 800de6a:	d427      	bmi.n	800debc <__sflush_r+0xb4>
 800de6c:	2200      	movs	r2, #0
 800de6e:	6062      	str	r2, [r4, #4]
 800de70:	6922      	ldr	r2, [r4, #16]
 800de72:	04d9      	lsls	r1, r3, #19
 800de74:	6022      	str	r2, [r4, #0]
 800de76:	d504      	bpl.n	800de82 <__sflush_r+0x7a>
 800de78:	1c42      	adds	r2, r0, #1
 800de7a:	d101      	bne.n	800de80 <__sflush_r+0x78>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b903      	cbnz	r3, 800de82 <__sflush_r+0x7a>
 800de80:	6560      	str	r0, [r4, #84]	; 0x54
 800de82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de84:	602f      	str	r7, [r5, #0]
 800de86:	2900      	cmp	r1, #0
 800de88:	d0ca      	beq.n	800de20 <__sflush_r+0x18>
 800de8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de8e:	4299      	cmp	r1, r3
 800de90:	d002      	beq.n	800de98 <__sflush_r+0x90>
 800de92:	4628      	mov	r0, r5
 800de94:	f7ff f9ec 	bl	800d270 <_free_r>
 800de98:	2000      	movs	r0, #0
 800de9a:	6360      	str	r0, [r4, #52]	; 0x34
 800de9c:	e7c1      	b.n	800de22 <__sflush_r+0x1a>
 800de9e:	2301      	movs	r3, #1
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b0      	blx	r6
 800dea4:	1c41      	adds	r1, r0, #1
 800dea6:	d1c8      	bne.n	800de3a <__sflush_r+0x32>
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d0c5      	beq.n	800de3a <__sflush_r+0x32>
 800deae:	2b1d      	cmp	r3, #29
 800deb0:	d001      	beq.n	800deb6 <__sflush_r+0xae>
 800deb2:	2b16      	cmp	r3, #22
 800deb4:	d101      	bne.n	800deba <__sflush_r+0xb2>
 800deb6:	602f      	str	r7, [r5, #0]
 800deb8:	e7b2      	b.n	800de20 <__sflush_r+0x18>
 800deba:	89a3      	ldrh	r3, [r4, #12]
 800debc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	e7ae      	b.n	800de22 <__sflush_r+0x1a>
 800dec4:	690f      	ldr	r7, [r1, #16]
 800dec6:	2f00      	cmp	r7, #0
 800dec8:	d0aa      	beq.n	800de20 <__sflush_r+0x18>
 800deca:	0793      	lsls	r3, r2, #30
 800decc:	bf18      	it	ne
 800dece:	2300      	movne	r3, #0
 800ded0:	680e      	ldr	r6, [r1, #0]
 800ded2:	bf08      	it	eq
 800ded4:	694b      	ldreq	r3, [r1, #20]
 800ded6:	1bf6      	subs	r6, r6, r7
 800ded8:	600f      	str	r7, [r1, #0]
 800deda:	608b      	str	r3, [r1, #8]
 800dedc:	2e00      	cmp	r6, #0
 800dede:	dd9f      	ble.n	800de20 <__sflush_r+0x18>
 800dee0:	4633      	mov	r3, r6
 800dee2:	463a      	mov	r2, r7
 800dee4:	4628      	mov	r0, r5
 800dee6:	6a21      	ldr	r1, [r4, #32]
 800dee8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800deec:	47e0      	blx	ip
 800deee:	2800      	cmp	r0, #0
 800def0:	dc06      	bgt.n	800df00 <__sflush_r+0xf8>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f04f 30ff 	mov.w	r0, #4294967295
 800def8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800defc:	81a3      	strh	r3, [r4, #12]
 800defe:	e790      	b.n	800de22 <__sflush_r+0x1a>
 800df00:	4407      	add	r7, r0
 800df02:	1a36      	subs	r6, r6, r0
 800df04:	e7ea      	b.n	800dedc <__sflush_r+0xd4>
 800df06:	bf00      	nop
 800df08:	dfbffffe 	.word	0xdfbffffe

0800df0c <_fflush_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	690b      	ldr	r3, [r1, #16]
 800df10:	4605      	mov	r5, r0
 800df12:	460c      	mov	r4, r1
 800df14:	b913      	cbnz	r3, 800df1c <_fflush_r+0x10>
 800df16:	2500      	movs	r5, #0
 800df18:	4628      	mov	r0, r5
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	b118      	cbz	r0, 800df26 <_fflush_r+0x1a>
 800df1e:	6a03      	ldr	r3, [r0, #32]
 800df20:	b90b      	cbnz	r3, 800df26 <_fflush_r+0x1a>
 800df22:	f7fe fa01 	bl	800c328 <__sinit>
 800df26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d0f3      	beq.n	800df16 <_fflush_r+0xa>
 800df2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df30:	07d0      	lsls	r0, r2, #31
 800df32:	d404      	bmi.n	800df3e <_fflush_r+0x32>
 800df34:	0599      	lsls	r1, r3, #22
 800df36:	d402      	bmi.n	800df3e <_fflush_r+0x32>
 800df38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df3a:	f7fe fb0c 	bl	800c556 <__retarget_lock_acquire_recursive>
 800df3e:	4628      	mov	r0, r5
 800df40:	4621      	mov	r1, r4
 800df42:	f7ff ff61 	bl	800de08 <__sflush_r>
 800df46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df48:	4605      	mov	r5, r0
 800df4a:	07da      	lsls	r2, r3, #31
 800df4c:	d4e4      	bmi.n	800df18 <_fflush_r+0xc>
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	059b      	lsls	r3, r3, #22
 800df52:	d4e1      	bmi.n	800df18 <_fflush_r+0xc>
 800df54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df56:	f7fe faff 	bl	800c558 <__retarget_lock_release_recursive>
 800df5a:	e7dd      	b.n	800df18 <_fflush_r+0xc>

0800df5c <memmove>:
 800df5c:	4288      	cmp	r0, r1
 800df5e:	b510      	push	{r4, lr}
 800df60:	eb01 0402 	add.w	r4, r1, r2
 800df64:	d902      	bls.n	800df6c <memmove+0x10>
 800df66:	4284      	cmp	r4, r0
 800df68:	4623      	mov	r3, r4
 800df6a:	d807      	bhi.n	800df7c <memmove+0x20>
 800df6c:	1e43      	subs	r3, r0, #1
 800df6e:	42a1      	cmp	r1, r4
 800df70:	d008      	beq.n	800df84 <memmove+0x28>
 800df72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df7a:	e7f8      	b.n	800df6e <memmove+0x12>
 800df7c:	4601      	mov	r1, r0
 800df7e:	4402      	add	r2, r0
 800df80:	428a      	cmp	r2, r1
 800df82:	d100      	bne.n	800df86 <memmove+0x2a>
 800df84:	bd10      	pop	{r4, pc}
 800df86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df8e:	e7f7      	b.n	800df80 <memmove+0x24>

0800df90 <_sbrk_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	2300      	movs	r3, #0
 800df94:	4d05      	ldr	r5, [pc, #20]	; (800dfac <_sbrk_r+0x1c>)
 800df96:	4604      	mov	r4, r0
 800df98:	4608      	mov	r0, r1
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	f7f9 fc16 	bl	80077cc <_sbrk>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_sbrk_r+0x1a>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_sbrk_r+0x1a>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	20001c64 	.word	0x20001c64

0800dfb0 <__assert_func>:
 800dfb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfb2:	4614      	mov	r4, r2
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	4b09      	ldr	r3, [pc, #36]	; (800dfdc <__assert_func+0x2c>)
 800dfb8:	4605      	mov	r5, r0
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68d8      	ldr	r0, [r3, #12]
 800dfbe:	b14c      	cbz	r4, 800dfd4 <__assert_func+0x24>
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <__assert_func+0x30>)
 800dfc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfc6:	9100      	str	r1, [sp, #0]
 800dfc8:	462b      	mov	r3, r5
 800dfca:	4906      	ldr	r1, [pc, #24]	; (800dfe4 <__assert_func+0x34>)
 800dfcc:	f000 f870 	bl	800e0b0 <fiprintf>
 800dfd0:	f000 f880 	bl	800e0d4 <abort>
 800dfd4:	4b04      	ldr	r3, [pc, #16]	; (800dfe8 <__assert_func+0x38>)
 800dfd6:	461c      	mov	r4, r3
 800dfd8:	e7f3      	b.n	800dfc2 <__assert_func+0x12>
 800dfda:	bf00      	nop
 800dfdc:	20000110 	.word	0x20000110
 800dfe0:	080110ff 	.word	0x080110ff
 800dfe4:	0801110c 	.word	0x0801110c
 800dfe8:	0801113a 	.word	0x0801113a

0800dfec <_calloc_r>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	fba1 5402 	umull	r5, r4, r1, r2
 800dff2:	b934      	cbnz	r4, 800e002 <_calloc_r+0x16>
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7ff f9ab 	bl	800d350 <_malloc_r>
 800dffa:	4606      	mov	r6, r0
 800dffc:	b928      	cbnz	r0, 800e00a <_calloc_r+0x1e>
 800dffe:	4630      	mov	r0, r6
 800e000:	bd70      	pop	{r4, r5, r6, pc}
 800e002:	220c      	movs	r2, #12
 800e004:	2600      	movs	r6, #0
 800e006:	6002      	str	r2, [r0, #0]
 800e008:	e7f9      	b.n	800dffe <_calloc_r+0x12>
 800e00a:	462a      	mov	r2, r5
 800e00c:	4621      	mov	r1, r4
 800e00e:	f7fe fa24 	bl	800c45a <memset>
 800e012:	e7f4      	b.n	800dffe <_calloc_r+0x12>

0800e014 <__ascii_mbtowc>:
 800e014:	b082      	sub	sp, #8
 800e016:	b901      	cbnz	r1, 800e01a <__ascii_mbtowc+0x6>
 800e018:	a901      	add	r1, sp, #4
 800e01a:	b142      	cbz	r2, 800e02e <__ascii_mbtowc+0x1a>
 800e01c:	b14b      	cbz	r3, 800e032 <__ascii_mbtowc+0x1e>
 800e01e:	7813      	ldrb	r3, [r2, #0]
 800e020:	600b      	str	r3, [r1, #0]
 800e022:	7812      	ldrb	r2, [r2, #0]
 800e024:	1e10      	subs	r0, r2, #0
 800e026:	bf18      	it	ne
 800e028:	2001      	movne	r0, #1
 800e02a:	b002      	add	sp, #8
 800e02c:	4770      	bx	lr
 800e02e:	4610      	mov	r0, r2
 800e030:	e7fb      	b.n	800e02a <__ascii_mbtowc+0x16>
 800e032:	f06f 0001 	mvn.w	r0, #1
 800e036:	e7f8      	b.n	800e02a <__ascii_mbtowc+0x16>

0800e038 <_realloc_r>:
 800e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03c:	4680      	mov	r8, r0
 800e03e:	4614      	mov	r4, r2
 800e040:	460e      	mov	r6, r1
 800e042:	b921      	cbnz	r1, 800e04e <_realloc_r+0x16>
 800e044:	4611      	mov	r1, r2
 800e046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e04a:	f7ff b981 	b.w	800d350 <_malloc_r>
 800e04e:	b92a      	cbnz	r2, 800e05c <_realloc_r+0x24>
 800e050:	f7ff f90e 	bl	800d270 <_free_r>
 800e054:	4625      	mov	r5, r4
 800e056:	4628      	mov	r0, r5
 800e058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e05c:	f000 f841 	bl	800e0e2 <_malloc_usable_size_r>
 800e060:	4284      	cmp	r4, r0
 800e062:	4607      	mov	r7, r0
 800e064:	d802      	bhi.n	800e06c <_realloc_r+0x34>
 800e066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e06a:	d812      	bhi.n	800e092 <_realloc_r+0x5a>
 800e06c:	4621      	mov	r1, r4
 800e06e:	4640      	mov	r0, r8
 800e070:	f7ff f96e 	bl	800d350 <_malloc_r>
 800e074:	4605      	mov	r5, r0
 800e076:	2800      	cmp	r0, #0
 800e078:	d0ed      	beq.n	800e056 <_realloc_r+0x1e>
 800e07a:	42bc      	cmp	r4, r7
 800e07c:	4622      	mov	r2, r4
 800e07e:	4631      	mov	r1, r6
 800e080:	bf28      	it	cs
 800e082:	463a      	movcs	r2, r7
 800e084:	f7fe fa77 	bl	800c576 <memcpy>
 800e088:	4631      	mov	r1, r6
 800e08a:	4640      	mov	r0, r8
 800e08c:	f7ff f8f0 	bl	800d270 <_free_r>
 800e090:	e7e1      	b.n	800e056 <_realloc_r+0x1e>
 800e092:	4635      	mov	r5, r6
 800e094:	e7df      	b.n	800e056 <_realloc_r+0x1e>

0800e096 <__ascii_wctomb>:
 800e096:	4603      	mov	r3, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	b141      	cbz	r1, 800e0ae <__ascii_wctomb+0x18>
 800e09c:	2aff      	cmp	r2, #255	; 0xff
 800e09e:	d904      	bls.n	800e0aa <__ascii_wctomb+0x14>
 800e0a0:	228a      	movs	r2, #138	; 0x8a
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	4770      	bx	lr
 800e0aa:	2001      	movs	r0, #1
 800e0ac:	700a      	strb	r2, [r1, #0]
 800e0ae:	4770      	bx	lr

0800e0b0 <fiprintf>:
 800e0b0:	b40e      	push	{r1, r2, r3}
 800e0b2:	b503      	push	{r0, r1, lr}
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	ab03      	add	r3, sp, #12
 800e0b8:	4805      	ldr	r0, [pc, #20]	; (800e0d0 <fiprintf+0x20>)
 800e0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0be:	6800      	ldr	r0, [r0, #0]
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	f000 f83d 	bl	800e140 <_vfiprintf_r>
 800e0c6:	b002      	add	sp, #8
 800e0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0cc:	b003      	add	sp, #12
 800e0ce:	4770      	bx	lr
 800e0d0:	20000110 	.word	0x20000110

0800e0d4 <abort>:
 800e0d4:	2006      	movs	r0, #6
 800e0d6:	b508      	push	{r3, lr}
 800e0d8:	f000 fa0a 	bl	800e4f0 <raise>
 800e0dc:	2001      	movs	r0, #1
 800e0de:	f7f9 fb02 	bl	80076e6 <_exit>

0800e0e2 <_malloc_usable_size_r>:
 800e0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e6:	1f18      	subs	r0, r3, #4
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bfbc      	itt	lt
 800e0ec:	580b      	ldrlt	r3, [r1, r0]
 800e0ee:	18c0      	addlt	r0, r0, r3
 800e0f0:	4770      	bx	lr

0800e0f2 <__sfputc_r>:
 800e0f2:	6893      	ldr	r3, [r2, #8]
 800e0f4:	b410      	push	{r4}
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	6093      	str	r3, [r2, #8]
 800e0fc:	da07      	bge.n	800e10e <__sfputc_r+0x1c>
 800e0fe:	6994      	ldr	r4, [r2, #24]
 800e100:	42a3      	cmp	r3, r4
 800e102:	db01      	blt.n	800e108 <__sfputc_r+0x16>
 800e104:	290a      	cmp	r1, #10
 800e106:	d102      	bne.n	800e10e <__sfputc_r+0x1c>
 800e108:	bc10      	pop	{r4}
 800e10a:	f000 b933 	b.w	800e374 <__swbuf_r>
 800e10e:	6813      	ldr	r3, [r2, #0]
 800e110:	1c58      	adds	r0, r3, #1
 800e112:	6010      	str	r0, [r2, #0]
 800e114:	7019      	strb	r1, [r3, #0]
 800e116:	4608      	mov	r0, r1
 800e118:	bc10      	pop	{r4}
 800e11a:	4770      	bx	lr

0800e11c <__sfputs_r>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	4614      	mov	r4, r2
 800e124:	18d5      	adds	r5, r2, r3
 800e126:	42ac      	cmp	r4, r5
 800e128:	d101      	bne.n	800e12e <__sfputs_r+0x12>
 800e12a:	2000      	movs	r0, #0
 800e12c:	e007      	b.n	800e13e <__sfputs_r+0x22>
 800e12e:	463a      	mov	r2, r7
 800e130:	4630      	mov	r0, r6
 800e132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e136:	f7ff ffdc 	bl	800e0f2 <__sfputc_r>
 800e13a:	1c43      	adds	r3, r0, #1
 800e13c:	d1f3      	bne.n	800e126 <__sfputs_r+0xa>
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e140 <_vfiprintf_r>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	460d      	mov	r5, r1
 800e146:	4614      	mov	r4, r2
 800e148:	4698      	mov	r8, r3
 800e14a:	4606      	mov	r6, r0
 800e14c:	b09d      	sub	sp, #116	; 0x74
 800e14e:	b118      	cbz	r0, 800e158 <_vfiprintf_r+0x18>
 800e150:	6a03      	ldr	r3, [r0, #32]
 800e152:	b90b      	cbnz	r3, 800e158 <_vfiprintf_r+0x18>
 800e154:	f7fe f8e8 	bl	800c328 <__sinit>
 800e158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e15a:	07d9      	lsls	r1, r3, #31
 800e15c:	d405      	bmi.n	800e16a <_vfiprintf_r+0x2a>
 800e15e:	89ab      	ldrh	r3, [r5, #12]
 800e160:	059a      	lsls	r2, r3, #22
 800e162:	d402      	bmi.n	800e16a <_vfiprintf_r+0x2a>
 800e164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e166:	f7fe f9f6 	bl	800c556 <__retarget_lock_acquire_recursive>
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	071b      	lsls	r3, r3, #28
 800e16e:	d501      	bpl.n	800e174 <_vfiprintf_r+0x34>
 800e170:	692b      	ldr	r3, [r5, #16]
 800e172:	b99b      	cbnz	r3, 800e19c <_vfiprintf_r+0x5c>
 800e174:	4629      	mov	r1, r5
 800e176:	4630      	mov	r0, r6
 800e178:	f000 f93a 	bl	800e3f0 <__swsetup_r>
 800e17c:	b170      	cbz	r0, 800e19c <_vfiprintf_r+0x5c>
 800e17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e180:	07dc      	lsls	r4, r3, #31
 800e182:	d504      	bpl.n	800e18e <_vfiprintf_r+0x4e>
 800e184:	f04f 30ff 	mov.w	r0, #4294967295
 800e188:	b01d      	add	sp, #116	; 0x74
 800e18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18e:	89ab      	ldrh	r3, [r5, #12]
 800e190:	0598      	lsls	r0, r3, #22
 800e192:	d4f7      	bmi.n	800e184 <_vfiprintf_r+0x44>
 800e194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e196:	f7fe f9df 	bl	800c558 <__retarget_lock_release_recursive>
 800e19a:	e7f3      	b.n	800e184 <_vfiprintf_r+0x44>
 800e19c:	2300      	movs	r3, #0
 800e19e:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a0:	2320      	movs	r3, #32
 800e1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1a6:	2330      	movs	r3, #48	; 0x30
 800e1a8:	f04f 0901 	mov.w	r9, #1
 800e1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e360 <_vfiprintf_r+0x220>
 800e1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1b8:	4623      	mov	r3, r4
 800e1ba:	469a      	mov	sl, r3
 800e1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1c0:	b10a      	cbz	r2, 800e1c6 <_vfiprintf_r+0x86>
 800e1c2:	2a25      	cmp	r2, #37	; 0x25
 800e1c4:	d1f9      	bne.n	800e1ba <_vfiprintf_r+0x7a>
 800e1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e1ca:	d00b      	beq.n	800e1e4 <_vfiprintf_r+0xa4>
 800e1cc:	465b      	mov	r3, fp
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f7ff ffa2 	bl	800e11c <__sfputs_r>
 800e1d8:	3001      	adds	r0, #1
 800e1da:	f000 80a9 	beq.w	800e330 <_vfiprintf_r+0x1f0>
 800e1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e0:	445a      	add	r2, fp
 800e1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 80a1 	beq.w	800e330 <_vfiprintf_r+0x1f0>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1f8:	f10a 0a01 	add.w	sl, sl, #1
 800e1fc:	9304      	str	r3, [sp, #16]
 800e1fe:	9307      	str	r3, [sp, #28]
 800e200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e204:	931a      	str	r3, [sp, #104]	; 0x68
 800e206:	4654      	mov	r4, sl
 800e208:	2205      	movs	r2, #5
 800e20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20e:	4854      	ldr	r0, [pc, #336]	; (800e360 <_vfiprintf_r+0x220>)
 800e210:	f7fe f9a3 	bl	800c55a <memchr>
 800e214:	9a04      	ldr	r2, [sp, #16]
 800e216:	b9d8      	cbnz	r0, 800e250 <_vfiprintf_r+0x110>
 800e218:	06d1      	lsls	r1, r2, #27
 800e21a:	bf44      	itt	mi
 800e21c:	2320      	movmi	r3, #32
 800e21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e222:	0713      	lsls	r3, r2, #28
 800e224:	bf44      	itt	mi
 800e226:	232b      	movmi	r3, #43	; 0x2b
 800e228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e22c:	f89a 3000 	ldrb.w	r3, [sl]
 800e230:	2b2a      	cmp	r3, #42	; 0x2a
 800e232:	d015      	beq.n	800e260 <_vfiprintf_r+0x120>
 800e234:	4654      	mov	r4, sl
 800e236:	2000      	movs	r0, #0
 800e238:	f04f 0c0a 	mov.w	ip, #10
 800e23c:	9a07      	ldr	r2, [sp, #28]
 800e23e:	4621      	mov	r1, r4
 800e240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e244:	3b30      	subs	r3, #48	; 0x30
 800e246:	2b09      	cmp	r3, #9
 800e248:	d94d      	bls.n	800e2e6 <_vfiprintf_r+0x1a6>
 800e24a:	b1b0      	cbz	r0, 800e27a <_vfiprintf_r+0x13a>
 800e24c:	9207      	str	r2, [sp, #28]
 800e24e:	e014      	b.n	800e27a <_vfiprintf_r+0x13a>
 800e250:	eba0 0308 	sub.w	r3, r0, r8
 800e254:	fa09 f303 	lsl.w	r3, r9, r3
 800e258:	4313      	orrs	r3, r2
 800e25a:	46a2      	mov	sl, r4
 800e25c:	9304      	str	r3, [sp, #16]
 800e25e:	e7d2      	b.n	800e206 <_vfiprintf_r+0xc6>
 800e260:	9b03      	ldr	r3, [sp, #12]
 800e262:	1d19      	adds	r1, r3, #4
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	9103      	str	r1, [sp, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bfbb      	ittet	lt
 800e26c:	425b      	neglt	r3, r3
 800e26e:	f042 0202 	orrlt.w	r2, r2, #2
 800e272:	9307      	strge	r3, [sp, #28]
 800e274:	9307      	strlt	r3, [sp, #28]
 800e276:	bfb8      	it	lt
 800e278:	9204      	strlt	r2, [sp, #16]
 800e27a:	7823      	ldrb	r3, [r4, #0]
 800e27c:	2b2e      	cmp	r3, #46	; 0x2e
 800e27e:	d10c      	bne.n	800e29a <_vfiprintf_r+0x15a>
 800e280:	7863      	ldrb	r3, [r4, #1]
 800e282:	2b2a      	cmp	r3, #42	; 0x2a
 800e284:	d134      	bne.n	800e2f0 <_vfiprintf_r+0x1b0>
 800e286:	9b03      	ldr	r3, [sp, #12]
 800e288:	3402      	adds	r4, #2
 800e28a:	1d1a      	adds	r2, r3, #4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	9203      	str	r2, [sp, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	bfb8      	it	lt
 800e294:	f04f 33ff 	movlt.w	r3, #4294967295
 800e298:	9305      	str	r3, [sp, #20]
 800e29a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e364 <_vfiprintf_r+0x224>
 800e29e:	2203      	movs	r2, #3
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	7821      	ldrb	r1, [r4, #0]
 800e2a4:	f7fe f959 	bl	800c55a <memchr>
 800e2a8:	b138      	cbz	r0, 800e2ba <_vfiprintf_r+0x17a>
 800e2aa:	2240      	movs	r2, #64	; 0x40
 800e2ac:	9b04      	ldr	r3, [sp, #16]
 800e2ae:	eba0 000a 	sub.w	r0, r0, sl
 800e2b2:	4082      	lsls	r2, r0
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	3401      	adds	r4, #1
 800e2b8:	9304      	str	r3, [sp, #16]
 800e2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2be:	2206      	movs	r2, #6
 800e2c0:	4829      	ldr	r0, [pc, #164]	; (800e368 <_vfiprintf_r+0x228>)
 800e2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2c6:	f7fe f948 	bl	800c55a <memchr>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d03f      	beq.n	800e34e <_vfiprintf_r+0x20e>
 800e2ce:	4b27      	ldr	r3, [pc, #156]	; (800e36c <_vfiprintf_r+0x22c>)
 800e2d0:	bb1b      	cbnz	r3, 800e31a <_vfiprintf_r+0x1da>
 800e2d2:	9b03      	ldr	r3, [sp, #12]
 800e2d4:	3307      	adds	r3, #7
 800e2d6:	f023 0307 	bic.w	r3, r3, #7
 800e2da:	3308      	adds	r3, #8
 800e2dc:	9303      	str	r3, [sp, #12]
 800e2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e0:	443b      	add	r3, r7
 800e2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e4:	e768      	b.n	800e1b8 <_vfiprintf_r+0x78>
 800e2e6:	460c      	mov	r4, r1
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2ee:	e7a6      	b.n	800e23e <_vfiprintf_r+0xfe>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f04f 0c0a 	mov.w	ip, #10
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	3401      	adds	r4, #1
 800e2fa:	9305      	str	r3, [sp, #20]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e302:	3a30      	subs	r2, #48	; 0x30
 800e304:	2a09      	cmp	r2, #9
 800e306:	d903      	bls.n	800e310 <_vfiprintf_r+0x1d0>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0c6      	beq.n	800e29a <_vfiprintf_r+0x15a>
 800e30c:	9105      	str	r1, [sp, #20]
 800e30e:	e7c4      	b.n	800e29a <_vfiprintf_r+0x15a>
 800e310:	4604      	mov	r4, r0
 800e312:	2301      	movs	r3, #1
 800e314:	fb0c 2101 	mla	r1, ip, r1, r2
 800e318:	e7f0      	b.n	800e2fc <_vfiprintf_r+0x1bc>
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	462a      	mov	r2, r5
 800e320:	4630      	mov	r0, r6
 800e322:	4b13      	ldr	r3, [pc, #76]	; (800e370 <_vfiprintf_r+0x230>)
 800e324:	a904      	add	r1, sp, #16
 800e326:	f7fd fbb1 	bl	800ba8c <_printf_float>
 800e32a:	4607      	mov	r7, r0
 800e32c:	1c78      	adds	r0, r7, #1
 800e32e:	d1d6      	bne.n	800e2de <_vfiprintf_r+0x19e>
 800e330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e332:	07d9      	lsls	r1, r3, #31
 800e334:	d405      	bmi.n	800e342 <_vfiprintf_r+0x202>
 800e336:	89ab      	ldrh	r3, [r5, #12]
 800e338:	059a      	lsls	r2, r3, #22
 800e33a:	d402      	bmi.n	800e342 <_vfiprintf_r+0x202>
 800e33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e33e:	f7fe f90b 	bl	800c558 <__retarget_lock_release_recursive>
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	065b      	lsls	r3, r3, #25
 800e346:	f53f af1d 	bmi.w	800e184 <_vfiprintf_r+0x44>
 800e34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e34c:	e71c      	b.n	800e188 <_vfiprintf_r+0x48>
 800e34e:	ab03      	add	r3, sp, #12
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	462a      	mov	r2, r5
 800e354:	4630      	mov	r0, r6
 800e356:	4b06      	ldr	r3, [pc, #24]	; (800e370 <_vfiprintf_r+0x230>)
 800e358:	a904      	add	r1, sp, #16
 800e35a:	f7fd fe37 	bl	800bfcc <_printf_i>
 800e35e:	e7e4      	b.n	800e32a <_vfiprintf_r+0x1ea>
 800e360:	080110e4 	.word	0x080110e4
 800e364:	080110ea 	.word	0x080110ea
 800e368:	080110ee 	.word	0x080110ee
 800e36c:	0800ba8d 	.word	0x0800ba8d
 800e370:	0800e11d 	.word	0x0800e11d

0800e374 <__swbuf_r>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	460e      	mov	r6, r1
 800e378:	4614      	mov	r4, r2
 800e37a:	4605      	mov	r5, r0
 800e37c:	b118      	cbz	r0, 800e386 <__swbuf_r+0x12>
 800e37e:	6a03      	ldr	r3, [r0, #32]
 800e380:	b90b      	cbnz	r3, 800e386 <__swbuf_r+0x12>
 800e382:	f7fd ffd1 	bl	800c328 <__sinit>
 800e386:	69a3      	ldr	r3, [r4, #24]
 800e388:	60a3      	str	r3, [r4, #8]
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	071a      	lsls	r2, r3, #28
 800e38e:	d525      	bpl.n	800e3dc <__swbuf_r+0x68>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	b31b      	cbz	r3, 800e3dc <__swbuf_r+0x68>
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	6922      	ldr	r2, [r4, #16]
 800e398:	b2f6      	uxtb	r6, r6
 800e39a:	1a98      	subs	r0, r3, r2
 800e39c:	6963      	ldr	r3, [r4, #20]
 800e39e:	4637      	mov	r7, r6
 800e3a0:	4283      	cmp	r3, r0
 800e3a2:	dc04      	bgt.n	800e3ae <__swbuf_r+0x3a>
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f7ff fdb0 	bl	800df0c <_fflush_r>
 800e3ac:	b9e0      	cbnz	r0, 800e3e8 <__swbuf_r+0x74>
 800e3ae:	68a3      	ldr	r3, [r4, #8]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	60a3      	str	r3, [r4, #8]
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	6022      	str	r2, [r4, #0]
 800e3ba:	701e      	strb	r6, [r3, #0]
 800e3bc:	6962      	ldr	r2, [r4, #20]
 800e3be:	1c43      	adds	r3, r0, #1
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d004      	beq.n	800e3ce <__swbuf_r+0x5a>
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	07db      	lsls	r3, r3, #31
 800e3c8:	d506      	bpl.n	800e3d8 <__swbuf_r+0x64>
 800e3ca:	2e0a      	cmp	r6, #10
 800e3cc:	d104      	bne.n	800e3d8 <__swbuf_r+0x64>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f7ff fd9b 	bl	800df0c <_fflush_r>
 800e3d6:	b938      	cbnz	r0, 800e3e8 <__swbuf_r+0x74>
 800e3d8:	4638      	mov	r0, r7
 800e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3dc:	4621      	mov	r1, r4
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f000 f806 	bl	800e3f0 <__swsetup_r>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d0d5      	beq.n	800e394 <__swbuf_r+0x20>
 800e3e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e3ec:	e7f4      	b.n	800e3d8 <__swbuf_r+0x64>
	...

0800e3f0 <__swsetup_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4b2a      	ldr	r3, [pc, #168]	; (800e49c <__swsetup_r+0xac>)
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	b118      	cbz	r0, 800e404 <__swsetup_r+0x14>
 800e3fc:	6a03      	ldr	r3, [r0, #32]
 800e3fe:	b90b      	cbnz	r3, 800e404 <__swsetup_r+0x14>
 800e400:	f7fd ff92 	bl	800c328 <__sinit>
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e40a:	0718      	lsls	r0, r3, #28
 800e40c:	d422      	bmi.n	800e454 <__swsetup_r+0x64>
 800e40e:	06d9      	lsls	r1, r3, #27
 800e410:	d407      	bmi.n	800e422 <__swsetup_r+0x32>
 800e412:	2309      	movs	r3, #9
 800e414:	602b      	str	r3, [r5, #0]
 800e416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	e034      	b.n	800e48c <__swsetup_r+0x9c>
 800e422:	0758      	lsls	r0, r3, #29
 800e424:	d512      	bpl.n	800e44c <__swsetup_r+0x5c>
 800e426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e428:	b141      	cbz	r1, 800e43c <__swsetup_r+0x4c>
 800e42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e42e:	4299      	cmp	r1, r3
 800e430:	d002      	beq.n	800e438 <__swsetup_r+0x48>
 800e432:	4628      	mov	r0, r5
 800e434:	f7fe ff1c 	bl	800d270 <_free_r>
 800e438:	2300      	movs	r3, #0
 800e43a:	6363      	str	r3, [r4, #52]	; 0x34
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	2300      	movs	r3, #0
 800e446:	6063      	str	r3, [r4, #4]
 800e448:	6923      	ldr	r3, [r4, #16]
 800e44a:	6023      	str	r3, [r4, #0]
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	f043 0308 	orr.w	r3, r3, #8
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	6923      	ldr	r3, [r4, #16]
 800e456:	b94b      	cbnz	r3, 800e46c <__swsetup_r+0x7c>
 800e458:	89a3      	ldrh	r3, [r4, #12]
 800e45a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e462:	d003      	beq.n	800e46c <__swsetup_r+0x7c>
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f883 	bl	800e572 <__smakebuf_r>
 800e46c:	89a0      	ldrh	r0, [r4, #12]
 800e46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e472:	f010 0301 	ands.w	r3, r0, #1
 800e476:	d00a      	beq.n	800e48e <__swsetup_r+0x9e>
 800e478:	2300      	movs	r3, #0
 800e47a:	60a3      	str	r3, [r4, #8]
 800e47c:	6963      	ldr	r3, [r4, #20]
 800e47e:	425b      	negs	r3, r3
 800e480:	61a3      	str	r3, [r4, #24]
 800e482:	6923      	ldr	r3, [r4, #16]
 800e484:	b943      	cbnz	r3, 800e498 <__swsetup_r+0xa8>
 800e486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e48a:	d1c4      	bne.n	800e416 <__swsetup_r+0x26>
 800e48c:	bd38      	pop	{r3, r4, r5, pc}
 800e48e:	0781      	lsls	r1, r0, #30
 800e490:	bf58      	it	pl
 800e492:	6963      	ldrpl	r3, [r4, #20]
 800e494:	60a3      	str	r3, [r4, #8]
 800e496:	e7f4      	b.n	800e482 <__swsetup_r+0x92>
 800e498:	2000      	movs	r0, #0
 800e49a:	e7f7      	b.n	800e48c <__swsetup_r+0x9c>
 800e49c:	20000110 	.word	0x20000110

0800e4a0 <_raise_r>:
 800e4a0:	291f      	cmp	r1, #31
 800e4a2:	b538      	push	{r3, r4, r5, lr}
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	d904      	bls.n	800e4b4 <_raise_r+0x14>
 800e4aa:	2316      	movs	r3, #22
 800e4ac:	6003      	str	r3, [r0, #0]
 800e4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e4b6:	b112      	cbz	r2, 800e4be <_raise_r+0x1e>
 800e4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4bc:	b94b      	cbnz	r3, 800e4d2 <_raise_r+0x32>
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f000 f830 	bl	800e524 <_getpid_r>
 800e4c4:	462a      	mov	r2, r5
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ce:	f000 b817 	b.w	800e500 <_kill_r>
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d00a      	beq.n	800e4ec <_raise_r+0x4c>
 800e4d6:	1c59      	adds	r1, r3, #1
 800e4d8:	d103      	bne.n	800e4e2 <_raise_r+0x42>
 800e4da:	2316      	movs	r3, #22
 800e4dc:	6003      	str	r3, [r0, #0]
 800e4de:	2001      	movs	r0, #1
 800e4e0:	e7e7      	b.n	800e4b2 <_raise_r+0x12>
 800e4e2:	2400      	movs	r4, #0
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4ea:	4798      	blx	r3
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	e7e0      	b.n	800e4b2 <_raise_r+0x12>

0800e4f0 <raise>:
 800e4f0:	4b02      	ldr	r3, [pc, #8]	; (800e4fc <raise+0xc>)
 800e4f2:	4601      	mov	r1, r0
 800e4f4:	6818      	ldr	r0, [r3, #0]
 800e4f6:	f7ff bfd3 	b.w	800e4a0 <_raise_r>
 800e4fa:	bf00      	nop
 800e4fc:	20000110 	.word	0x20000110

0800e500 <_kill_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	2300      	movs	r3, #0
 800e504:	4d06      	ldr	r5, [pc, #24]	; (800e520 <_kill_r+0x20>)
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	4611      	mov	r1, r2
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	f7f9 f8da 	bl	80076c6 <_kill>
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	d102      	bne.n	800e51c <_kill_r+0x1c>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b103      	cbz	r3, 800e51c <_kill_r+0x1c>
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	bf00      	nop
 800e520:	20001c64 	.word	0x20001c64

0800e524 <_getpid_r>:
 800e524:	f7f9 b8c8 	b.w	80076b8 <_getpid>

0800e528 <__swhatbuf_r>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	460c      	mov	r4, r1
 800e52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e530:	4615      	mov	r5, r2
 800e532:	2900      	cmp	r1, #0
 800e534:	461e      	mov	r6, r3
 800e536:	b096      	sub	sp, #88	; 0x58
 800e538:	da0c      	bge.n	800e554 <__swhatbuf_r+0x2c>
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	2100      	movs	r1, #0
 800e53e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e542:	bf0c      	ite	eq
 800e544:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e548:	2340      	movne	r3, #64	; 0x40
 800e54a:	2000      	movs	r0, #0
 800e54c:	6031      	str	r1, [r6, #0]
 800e54e:	602b      	str	r3, [r5, #0]
 800e550:	b016      	add	sp, #88	; 0x58
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	466a      	mov	r2, sp
 800e556:	f000 f849 	bl	800e5ec <_fstat_r>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	dbed      	blt.n	800e53a <__swhatbuf_r+0x12>
 800e55e:	9901      	ldr	r1, [sp, #4]
 800e560:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e564:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e568:	4259      	negs	r1, r3
 800e56a:	4159      	adcs	r1, r3
 800e56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e570:	e7eb      	b.n	800e54a <__swhatbuf_r+0x22>

0800e572 <__smakebuf_r>:
 800e572:	898b      	ldrh	r3, [r1, #12]
 800e574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e576:	079d      	lsls	r5, r3, #30
 800e578:	4606      	mov	r6, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	d507      	bpl.n	800e58e <__smakebuf_r+0x1c>
 800e57e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e582:	6023      	str	r3, [r4, #0]
 800e584:	6123      	str	r3, [r4, #16]
 800e586:	2301      	movs	r3, #1
 800e588:	6163      	str	r3, [r4, #20]
 800e58a:	b002      	add	sp, #8
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
 800e58e:	466a      	mov	r2, sp
 800e590:	ab01      	add	r3, sp, #4
 800e592:	f7ff ffc9 	bl	800e528 <__swhatbuf_r>
 800e596:	9900      	ldr	r1, [sp, #0]
 800e598:	4605      	mov	r5, r0
 800e59a:	4630      	mov	r0, r6
 800e59c:	f7fe fed8 	bl	800d350 <_malloc_r>
 800e5a0:	b948      	cbnz	r0, 800e5b6 <__smakebuf_r+0x44>
 800e5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5a6:	059a      	lsls	r2, r3, #22
 800e5a8:	d4ef      	bmi.n	800e58a <__smakebuf_r+0x18>
 800e5aa:	f023 0303 	bic.w	r3, r3, #3
 800e5ae:	f043 0302 	orr.w	r3, r3, #2
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	e7e3      	b.n	800e57e <__smakebuf_r+0xc>
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	6020      	str	r0, [r4, #0]
 800e5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	9b00      	ldr	r3, [sp, #0]
 800e5c2:	6120      	str	r0, [r4, #16]
 800e5c4:	6163      	str	r3, [r4, #20]
 800e5c6:	9b01      	ldr	r3, [sp, #4]
 800e5c8:	b15b      	cbz	r3, 800e5e2 <__smakebuf_r+0x70>
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5d0:	f000 f81e 	bl	800e610 <_isatty_r>
 800e5d4:	b128      	cbz	r0, 800e5e2 <__smakebuf_r+0x70>
 800e5d6:	89a3      	ldrh	r3, [r4, #12]
 800e5d8:	f023 0303 	bic.w	r3, r3, #3
 800e5dc:	f043 0301 	orr.w	r3, r3, #1
 800e5e0:	81a3      	strh	r3, [r4, #12]
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	431d      	orrs	r5, r3
 800e5e6:	81a5      	strh	r5, [r4, #12]
 800e5e8:	e7cf      	b.n	800e58a <__smakebuf_r+0x18>
	...

0800e5ec <_fstat_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	4d06      	ldr	r5, [pc, #24]	; (800e60c <_fstat_r+0x20>)
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f7f9 f8c2 	bl	8007782 <_fstat>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_fstat_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_fstat_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	20001c64 	.word	0x20001c64

0800e610 <_isatty_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	2300      	movs	r3, #0
 800e614:	4d05      	ldr	r5, [pc, #20]	; (800e62c <_isatty_r+0x1c>)
 800e616:	4604      	mov	r4, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	602b      	str	r3, [r5, #0]
 800e61c:	f7f9 f8c0 	bl	80077a0 <_isatty>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_isatty_r+0x1a>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_isatty_r+0x1a>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	20001c64 	.word	0x20001c64

0800e630 <pow>:
 800e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e634:	4614      	mov	r4, r2
 800e636:	461d      	mov	r5, r3
 800e638:	4680      	mov	r8, r0
 800e63a:	4689      	mov	r9, r1
 800e63c:	f000 f868 	bl	800e710 <__ieee754_pow>
 800e640:	4622      	mov	r2, r4
 800e642:	4606      	mov	r6, r0
 800e644:	460f      	mov	r7, r1
 800e646:	462b      	mov	r3, r5
 800e648:	4620      	mov	r0, r4
 800e64a:	4629      	mov	r1, r5
 800e64c:	f7f2 f9de 	bl	8000a0c <__aeabi_dcmpun>
 800e650:	bbc8      	cbnz	r0, 800e6c6 <pow+0x96>
 800e652:	2200      	movs	r2, #0
 800e654:	2300      	movs	r3, #0
 800e656:	4640      	mov	r0, r8
 800e658:	4649      	mov	r1, r9
 800e65a:	f7f2 f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800e65e:	b1b8      	cbz	r0, 800e690 <pow+0x60>
 800e660:	2200      	movs	r2, #0
 800e662:	2300      	movs	r3, #0
 800e664:	4620      	mov	r0, r4
 800e666:	4629      	mov	r1, r5
 800e668:	f7f2 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d141      	bne.n	800e6f4 <pow+0xc4>
 800e670:	4620      	mov	r0, r4
 800e672:	4629      	mov	r1, r5
 800e674:	f000 f844 	bl	800e700 <finite>
 800e678:	b328      	cbz	r0, 800e6c6 <pow+0x96>
 800e67a:	2200      	movs	r2, #0
 800e67c:	2300      	movs	r3, #0
 800e67e:	4620      	mov	r0, r4
 800e680:	4629      	mov	r1, r5
 800e682:	f7f2 f99b 	bl	80009bc <__aeabi_dcmplt>
 800e686:	b1f0      	cbz	r0, 800e6c6 <pow+0x96>
 800e688:	f7fd ff3a 	bl	800c500 <__errno>
 800e68c:	2322      	movs	r3, #34	; 0x22
 800e68e:	e019      	b.n	800e6c4 <pow+0x94>
 800e690:	4630      	mov	r0, r6
 800e692:	4639      	mov	r1, r7
 800e694:	f000 f834 	bl	800e700 <finite>
 800e698:	b9c8      	cbnz	r0, 800e6ce <pow+0x9e>
 800e69a:	4640      	mov	r0, r8
 800e69c:	4649      	mov	r1, r9
 800e69e:	f000 f82f 	bl	800e700 <finite>
 800e6a2:	b1a0      	cbz	r0, 800e6ce <pow+0x9e>
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f000 f82a 	bl	800e700 <finite>
 800e6ac:	b178      	cbz	r0, 800e6ce <pow+0x9e>
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	f7f2 f9a9 	bl	8000a0c <__aeabi_dcmpun>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0e4      	beq.n	800e688 <pow+0x58>
 800e6be:	f7fd ff1f 	bl	800c500 <__errno>
 800e6c2:	2321      	movs	r3, #33	; 0x21
 800e6c4:	6003      	str	r3, [r0, #0]
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	f7f2 f967 	bl	80009a8 <__aeabi_dcmpeq>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d0f3      	beq.n	800e6c6 <pow+0x96>
 800e6de:	4640      	mov	r0, r8
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	f000 f80d 	bl	800e700 <finite>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d0ed      	beq.n	800e6c6 <pow+0x96>
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	f000 f807 	bl	800e700 <finite>
 800e6f2:	e7c8      	b.n	800e686 <pow+0x56>
 800e6f4:	2600      	movs	r6, #0
 800e6f6:	4f01      	ldr	r7, [pc, #4]	; (800e6fc <pow+0xcc>)
 800e6f8:	e7e5      	b.n	800e6c6 <pow+0x96>
 800e6fa:	bf00      	nop
 800e6fc:	3ff00000 	.word	0x3ff00000

0800e700 <finite>:
 800e700:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e704:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e708:	0fc0      	lsrs	r0, r0, #31
 800e70a:	4770      	bx	lr
 800e70c:	0000      	movs	r0, r0
	...

0800e710 <__ieee754_pow>:
 800e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e714:	b093      	sub	sp, #76	; 0x4c
 800e716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e71a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800e71e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e722:	4689      	mov	r9, r1
 800e724:	ea56 0102 	orrs.w	r1, r6, r2
 800e728:	4680      	mov	r8, r0
 800e72a:	d111      	bne.n	800e750 <__ieee754_pow+0x40>
 800e72c:	1803      	adds	r3, r0, r0
 800e72e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800e732:	4152      	adcs	r2, r2
 800e734:	4299      	cmp	r1, r3
 800e736:	4b82      	ldr	r3, [pc, #520]	; (800e940 <__ieee754_pow+0x230>)
 800e738:	4193      	sbcs	r3, r2
 800e73a:	f080 84ba 	bcs.w	800f0b2 <__ieee754_pow+0x9a2>
 800e73e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e742:	4640      	mov	r0, r8
 800e744:	4649      	mov	r1, r9
 800e746:	f7f1 fd11 	bl	800016c <__adddf3>
 800e74a:	4683      	mov	fp, r0
 800e74c:	468c      	mov	ip, r1
 800e74e:	e06f      	b.n	800e830 <__ieee754_pow+0x120>
 800e750:	4b7c      	ldr	r3, [pc, #496]	; (800e944 <__ieee754_pow+0x234>)
 800e752:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800e756:	429c      	cmp	r4, r3
 800e758:	464d      	mov	r5, r9
 800e75a:	4682      	mov	sl, r0
 800e75c:	dc06      	bgt.n	800e76c <__ieee754_pow+0x5c>
 800e75e:	d101      	bne.n	800e764 <__ieee754_pow+0x54>
 800e760:	2800      	cmp	r0, #0
 800e762:	d1ec      	bne.n	800e73e <__ieee754_pow+0x2e>
 800e764:	429e      	cmp	r6, r3
 800e766:	dc01      	bgt.n	800e76c <__ieee754_pow+0x5c>
 800e768:	d10f      	bne.n	800e78a <__ieee754_pow+0x7a>
 800e76a:	b172      	cbz	r2, 800e78a <__ieee754_pow+0x7a>
 800e76c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e770:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e774:	ea55 050a 	orrs.w	r5, r5, sl
 800e778:	d1e1      	bne.n	800e73e <__ieee754_pow+0x2e>
 800e77a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e77e:	18db      	adds	r3, r3, r3
 800e780:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e784:	4152      	adcs	r2, r2
 800e786:	429d      	cmp	r5, r3
 800e788:	e7d5      	b.n	800e736 <__ieee754_pow+0x26>
 800e78a:	2d00      	cmp	r5, #0
 800e78c:	da39      	bge.n	800e802 <__ieee754_pow+0xf2>
 800e78e:	4b6e      	ldr	r3, [pc, #440]	; (800e948 <__ieee754_pow+0x238>)
 800e790:	429e      	cmp	r6, r3
 800e792:	dc52      	bgt.n	800e83a <__ieee754_pow+0x12a>
 800e794:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e798:	429e      	cmp	r6, r3
 800e79a:	f340 849d 	ble.w	800f0d8 <__ieee754_pow+0x9c8>
 800e79e:	1533      	asrs	r3, r6, #20
 800e7a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7a4:	2b14      	cmp	r3, #20
 800e7a6:	dd0f      	ble.n	800e7c8 <__ieee754_pow+0xb8>
 800e7a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e7ac:	fa22 f103 	lsr.w	r1, r2, r3
 800e7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	f040 848f 	bne.w	800f0d8 <__ieee754_pow+0x9c8>
 800e7ba:	f001 0101 	and.w	r1, r1, #1
 800e7be:	f1c1 0302 	rsb	r3, r1, #2
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	b182      	cbz	r2, 800e7e8 <__ieee754_pow+0xd8>
 800e7c6:	e05d      	b.n	800e884 <__ieee754_pow+0x174>
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	d159      	bne.n	800e880 <__ieee754_pow+0x170>
 800e7cc:	f1c3 0314 	rsb	r3, r3, #20
 800e7d0:	fa46 f103 	asr.w	r1, r6, r3
 800e7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e7d8:	42b3      	cmp	r3, r6
 800e7da:	f040 847a 	bne.w	800f0d2 <__ieee754_pow+0x9c2>
 800e7de:	f001 0101 	and.w	r1, r1, #1
 800e7e2:	f1c1 0302 	rsb	r3, r1, #2
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	4b58      	ldr	r3, [pc, #352]	; (800e94c <__ieee754_pow+0x23c>)
 800e7ea:	429e      	cmp	r6, r3
 800e7ec:	d132      	bne.n	800e854 <__ieee754_pow+0x144>
 800e7ee:	2f00      	cmp	r7, #0
 800e7f0:	f280 846b 	bge.w	800f0ca <__ieee754_pow+0x9ba>
 800e7f4:	4642      	mov	r2, r8
 800e7f6:	464b      	mov	r3, r9
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	4954      	ldr	r1, [pc, #336]	; (800e94c <__ieee754_pow+0x23c>)
 800e7fc:	f7f1 ff96 	bl	800072c <__aeabi_ddiv>
 800e800:	e7a3      	b.n	800e74a <__ieee754_pow+0x3a>
 800e802:	2300      	movs	r3, #0
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	2a00      	cmp	r2, #0
 800e808:	d13c      	bne.n	800e884 <__ieee754_pow+0x174>
 800e80a:	4b4e      	ldr	r3, [pc, #312]	; (800e944 <__ieee754_pow+0x234>)
 800e80c:	429e      	cmp	r6, r3
 800e80e:	d1eb      	bne.n	800e7e8 <__ieee754_pow+0xd8>
 800e810:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e814:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e818:	ea53 030a 	orrs.w	r3, r3, sl
 800e81c:	f000 8449 	beq.w	800f0b2 <__ieee754_pow+0x9a2>
 800e820:	4b4b      	ldr	r3, [pc, #300]	; (800e950 <__ieee754_pow+0x240>)
 800e822:	429c      	cmp	r4, r3
 800e824:	dd0b      	ble.n	800e83e <__ieee754_pow+0x12e>
 800e826:	2f00      	cmp	r7, #0
 800e828:	f2c0 8449 	blt.w	800f0be <__ieee754_pow+0x9ae>
 800e82c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e830:	4658      	mov	r0, fp
 800e832:	4661      	mov	r1, ip
 800e834:	b013      	add	sp, #76	; 0x4c
 800e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83a:	2302      	movs	r3, #2
 800e83c:	e7e2      	b.n	800e804 <__ieee754_pow+0xf4>
 800e83e:	2f00      	cmp	r7, #0
 800e840:	f04f 0b00 	mov.w	fp, #0
 800e844:	f04f 0c00 	mov.w	ip, #0
 800e848:	daf2      	bge.n	800e830 <__ieee754_pow+0x120>
 800e84a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e84e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e852:	e7ed      	b.n	800e830 <__ieee754_pow+0x120>
 800e854:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e858:	d106      	bne.n	800e868 <__ieee754_pow+0x158>
 800e85a:	4642      	mov	r2, r8
 800e85c:	464b      	mov	r3, r9
 800e85e:	4640      	mov	r0, r8
 800e860:	4649      	mov	r1, r9
 800e862:	f7f1 fe39 	bl	80004d8 <__aeabi_dmul>
 800e866:	e770      	b.n	800e74a <__ieee754_pow+0x3a>
 800e868:	4b3a      	ldr	r3, [pc, #232]	; (800e954 <__ieee754_pow+0x244>)
 800e86a:	429f      	cmp	r7, r3
 800e86c:	d10a      	bne.n	800e884 <__ieee754_pow+0x174>
 800e86e:	2d00      	cmp	r5, #0
 800e870:	db08      	blt.n	800e884 <__ieee754_pow+0x174>
 800e872:	4640      	mov	r0, r8
 800e874:	4649      	mov	r1, r9
 800e876:	b013      	add	sp, #76	; 0x4c
 800e878:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	f000 bd0a 	b.w	800f294 <__ieee754_sqrt>
 800e880:	2300      	movs	r3, #0
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	4640      	mov	r0, r8
 800e886:	4649      	mov	r1, r9
 800e888:	f000 fc58 	bl	800f13c <fabs>
 800e88c:	4683      	mov	fp, r0
 800e88e:	468c      	mov	ip, r1
 800e890:	f1ba 0f00 	cmp.w	sl, #0
 800e894:	d128      	bne.n	800e8e8 <__ieee754_pow+0x1d8>
 800e896:	b124      	cbz	r4, 800e8a2 <__ieee754_pow+0x192>
 800e898:	4b2c      	ldr	r3, [pc, #176]	; (800e94c <__ieee754_pow+0x23c>)
 800e89a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d122      	bne.n	800e8e8 <__ieee754_pow+0x1d8>
 800e8a2:	2f00      	cmp	r7, #0
 800e8a4:	da07      	bge.n	800e8b6 <__ieee754_pow+0x1a6>
 800e8a6:	465a      	mov	r2, fp
 800e8a8:	4663      	mov	r3, ip
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	4927      	ldr	r1, [pc, #156]	; (800e94c <__ieee754_pow+0x23c>)
 800e8ae:	f7f1 ff3d 	bl	800072c <__aeabi_ddiv>
 800e8b2:	4683      	mov	fp, r0
 800e8b4:	468c      	mov	ip, r1
 800e8b6:	2d00      	cmp	r5, #0
 800e8b8:	daba      	bge.n	800e830 <__ieee754_pow+0x120>
 800e8ba:	9b00      	ldr	r3, [sp, #0]
 800e8bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e8c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e8c4:	431c      	orrs	r4, r3
 800e8c6:	d108      	bne.n	800e8da <__ieee754_pow+0x1ca>
 800e8c8:	465a      	mov	r2, fp
 800e8ca:	4663      	mov	r3, ip
 800e8cc:	4658      	mov	r0, fp
 800e8ce:	4661      	mov	r1, ip
 800e8d0:	f7f1 fc4a 	bl	8000168 <__aeabi_dsub>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	e790      	b.n	800e7fc <__ieee754_pow+0xec>
 800e8da:	9b00      	ldr	r3, [sp, #0]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d1a7      	bne.n	800e830 <__ieee754_pow+0x120>
 800e8e0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e8e4:	469c      	mov	ip, r3
 800e8e6:	e7a3      	b.n	800e830 <__ieee754_pow+0x120>
 800e8e8:	0feb      	lsrs	r3, r5, #31
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	930c      	str	r3, [sp, #48]	; 0x30
 800e8ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8f0:	9b00      	ldr	r3, [sp, #0]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	d104      	bne.n	800e900 <__ieee754_pow+0x1f0>
 800e8f6:	4642      	mov	r2, r8
 800e8f8:	464b      	mov	r3, r9
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	e7e7      	b.n	800e8d0 <__ieee754_pow+0x1c0>
 800e900:	4b15      	ldr	r3, [pc, #84]	; (800e958 <__ieee754_pow+0x248>)
 800e902:	429e      	cmp	r6, r3
 800e904:	f340 80f6 	ble.w	800eaf4 <__ieee754_pow+0x3e4>
 800e908:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e90c:	429e      	cmp	r6, r3
 800e90e:	4b10      	ldr	r3, [pc, #64]	; (800e950 <__ieee754_pow+0x240>)
 800e910:	dd09      	ble.n	800e926 <__ieee754_pow+0x216>
 800e912:	429c      	cmp	r4, r3
 800e914:	dc0c      	bgt.n	800e930 <__ieee754_pow+0x220>
 800e916:	2f00      	cmp	r7, #0
 800e918:	da0c      	bge.n	800e934 <__ieee754_pow+0x224>
 800e91a:	2000      	movs	r0, #0
 800e91c:	b013      	add	sp, #76	; 0x4c
 800e91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e922:	f000 bcb2 	b.w	800f28a <__math_oflow>
 800e926:	429c      	cmp	r4, r3
 800e928:	dbf5      	blt.n	800e916 <__ieee754_pow+0x206>
 800e92a:	4b08      	ldr	r3, [pc, #32]	; (800e94c <__ieee754_pow+0x23c>)
 800e92c:	429c      	cmp	r4, r3
 800e92e:	dd15      	ble.n	800e95c <__ieee754_pow+0x24c>
 800e930:	2f00      	cmp	r7, #0
 800e932:	dcf2      	bgt.n	800e91a <__ieee754_pow+0x20a>
 800e934:	2000      	movs	r0, #0
 800e936:	b013      	add	sp, #76	; 0x4c
 800e938:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	f000 bca0 	b.w	800f280 <__math_uflow>
 800e940:	fff00000 	.word	0xfff00000
 800e944:	7ff00000 	.word	0x7ff00000
 800e948:	433fffff 	.word	0x433fffff
 800e94c:	3ff00000 	.word	0x3ff00000
 800e950:	3fefffff 	.word	0x3fefffff
 800e954:	3fe00000 	.word	0x3fe00000
 800e958:	41e00000 	.word	0x41e00000
 800e95c:	4661      	mov	r1, ip
 800e95e:	2200      	movs	r2, #0
 800e960:	4658      	mov	r0, fp
 800e962:	4b5f      	ldr	r3, [pc, #380]	; (800eae0 <__ieee754_pow+0x3d0>)
 800e964:	f7f1 fc00 	bl	8000168 <__aeabi_dsub>
 800e968:	a355      	add	r3, pc, #340	; (adr r3, 800eac0 <__ieee754_pow+0x3b0>)
 800e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96e:	4604      	mov	r4, r0
 800e970:	460d      	mov	r5, r1
 800e972:	f7f1 fdb1 	bl	80004d8 <__aeabi_dmul>
 800e976:	a354      	add	r3, pc, #336	; (adr r3, 800eac8 <__ieee754_pow+0x3b8>)
 800e978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	4620      	mov	r0, r4
 800e982:	4629      	mov	r1, r5
 800e984:	f7f1 fda8 	bl	80004d8 <__aeabi_dmul>
 800e988:	2200      	movs	r2, #0
 800e98a:	4682      	mov	sl, r0
 800e98c:	468b      	mov	fp, r1
 800e98e:	4620      	mov	r0, r4
 800e990:	4629      	mov	r1, r5
 800e992:	4b54      	ldr	r3, [pc, #336]	; (800eae4 <__ieee754_pow+0x3d4>)
 800e994:	f7f1 fda0 	bl	80004d8 <__aeabi_dmul>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	a14c      	add	r1, pc, #304	; (adr r1, 800ead0 <__ieee754_pow+0x3c0>)
 800e99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9a2:	f7f1 fbe1 	bl	8000168 <__aeabi_dsub>
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	462b      	mov	r3, r5
 800e9aa:	f7f1 fd95 	bl	80004d8 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	494c      	ldr	r1, [pc, #304]	; (800eae8 <__ieee754_pow+0x3d8>)
 800e9b6:	f7f1 fbd7 	bl	8000168 <__aeabi_dsub>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	462b      	mov	r3, r5
 800e9be:	4680      	mov	r8, r0
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	f7f1 fd87 	bl	80004d8 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	f7f1 fd81 	bl	80004d8 <__aeabi_dmul>
 800e9d6:	a340      	add	r3, pc, #256	; (adr r3, 800ead8 <__ieee754_pow+0x3c8>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	f7f1 fd7c 	bl	80004d8 <__aeabi_dmul>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4650      	mov	r0, sl
 800e9e6:	4659      	mov	r1, fp
 800e9e8:	f7f1 fbbe 	bl	8000168 <__aeabi_dsub>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	460d      	mov	r5, r1
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f1 fbb8 	bl	800016c <__adddf3>
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	4632      	mov	r2, r6
 800ea00:	463b      	mov	r3, r7
 800ea02:	4682      	mov	sl, r0
 800ea04:	468b      	mov	fp, r1
 800ea06:	f7f1 fbaf 	bl	8000168 <__aeabi_dsub>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	f7f1 fba9 	bl	8000168 <__aeabi_dsub>
 800ea16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea1a:	9b00      	ldr	r3, [sp, #0]
 800ea1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	4313      	orrs	r3, r2
 800ea22:	f04f 0600 	mov.w	r6, #0
 800ea26:	f04f 0200 	mov.w	r2, #0
 800ea2a:	bf0c      	ite	eq
 800ea2c:	4b2f      	ldreq	r3, [pc, #188]	; (800eaec <__ieee754_pow+0x3dc>)
 800ea2e:	4b2c      	ldrne	r3, [pc, #176]	; (800eae0 <__ieee754_pow+0x3d0>)
 800ea30:	4604      	mov	r4, r0
 800ea32:	460d      	mov	r5, r1
 800ea34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea38:	e9cd 2300 	strd	r2, r3, [sp]
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fb92 	bl	8000168 <__aeabi_dsub>
 800ea44:	4652      	mov	r2, sl
 800ea46:	465b      	mov	r3, fp
 800ea48:	f7f1 fd46 	bl	80004d8 <__aeabi_dmul>
 800ea4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea50:	4680      	mov	r8, r0
 800ea52:	4689      	mov	r9, r1
 800ea54:	4620      	mov	r0, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f1 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4640      	mov	r0, r8
 800ea62:	4649      	mov	r1, r9
 800ea64:	f7f1 fb82 	bl	800016c <__adddf3>
 800ea68:	4632      	mov	r2, r6
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	4680      	mov	r8, r0
 800ea6e:	4689      	mov	r9, r1
 800ea70:	4650      	mov	r0, sl
 800ea72:	4659      	mov	r1, fp
 800ea74:	f7f1 fd30 	bl	80004d8 <__aeabi_dmul>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4602      	mov	r2, r0
 800ea80:	4649      	mov	r1, r9
 800ea82:	4640      	mov	r0, r8
 800ea84:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ea88:	f7f1 fb70 	bl	800016c <__adddf3>
 800ea8c:	4b18      	ldr	r3, [pc, #96]	; (800eaf0 <__ieee754_pow+0x3e0>)
 800ea8e:	4682      	mov	sl, r0
 800ea90:	4299      	cmp	r1, r3
 800ea92:	460f      	mov	r7, r1
 800ea94:	460e      	mov	r6, r1
 800ea96:	f340 82e7 	ble.w	800f068 <__ieee754_pow+0x958>
 800ea9a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ea9e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eaa2:	4303      	orrs	r3, r0
 800eaa4:	f000 81e2 	beq.w	800ee6c <__ieee754_pow+0x75c>
 800eaa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaac:	2200      	movs	r2, #0
 800eaae:	2300      	movs	r3, #0
 800eab0:	f7f1 ff84 	bl	80009bc <__aeabi_dcmplt>
 800eab4:	3800      	subs	r0, #0
 800eab6:	bf18      	it	ne
 800eab8:	2001      	movne	r0, #1
 800eaba:	e72f      	b.n	800e91c <__ieee754_pow+0x20c>
 800eabc:	f3af 8000 	nop.w
 800eac0:	60000000 	.word	0x60000000
 800eac4:	3ff71547 	.word	0x3ff71547
 800eac8:	f85ddf44 	.word	0xf85ddf44
 800eacc:	3e54ae0b 	.word	0x3e54ae0b
 800ead0:	55555555 	.word	0x55555555
 800ead4:	3fd55555 	.word	0x3fd55555
 800ead8:	652b82fe 	.word	0x652b82fe
 800eadc:	3ff71547 	.word	0x3ff71547
 800eae0:	3ff00000 	.word	0x3ff00000
 800eae4:	3fd00000 	.word	0x3fd00000
 800eae8:	3fe00000 	.word	0x3fe00000
 800eaec:	bff00000 	.word	0xbff00000
 800eaf0:	408fffff 	.word	0x408fffff
 800eaf4:	4bd4      	ldr	r3, [pc, #848]	; (800ee48 <__ieee754_pow+0x738>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	402b      	ands	r3, r5
 800eafa:	b943      	cbnz	r3, 800eb0e <__ieee754_pow+0x3fe>
 800eafc:	4658      	mov	r0, fp
 800eafe:	4661      	mov	r1, ip
 800eb00:	4bd2      	ldr	r3, [pc, #840]	; (800ee4c <__ieee754_pow+0x73c>)
 800eb02:	f7f1 fce9 	bl	80004d8 <__aeabi_dmul>
 800eb06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb0a:	4683      	mov	fp, r0
 800eb0c:	460c      	mov	r4, r1
 800eb0e:	1523      	asrs	r3, r4, #20
 800eb10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb14:	4413      	add	r3, r2
 800eb16:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb18:	4bcd      	ldr	r3, [pc, #820]	; (800ee50 <__ieee754_pow+0x740>)
 800eb1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb22:	429c      	cmp	r4, r3
 800eb24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb28:	dd08      	ble.n	800eb3c <__ieee754_pow+0x42c>
 800eb2a:	4bca      	ldr	r3, [pc, #808]	; (800ee54 <__ieee754_pow+0x744>)
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	f340 8164 	ble.w	800edfa <__ieee754_pow+0x6ea>
 800eb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb34:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb38:	3301      	adds	r3, #1
 800eb3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb3c:	2600      	movs	r6, #0
 800eb3e:	00f3      	lsls	r3, r6, #3
 800eb40:	930d      	str	r3, [sp, #52]	; 0x34
 800eb42:	4bc5      	ldr	r3, [pc, #788]	; (800ee58 <__ieee754_pow+0x748>)
 800eb44:	4658      	mov	r0, fp
 800eb46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb4e:	4629      	mov	r1, r5
 800eb50:	461a      	mov	r2, r3
 800eb52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800eb56:	4623      	mov	r3, r4
 800eb58:	f7f1 fb06 	bl	8000168 <__aeabi_dsub>
 800eb5c:	46da      	mov	sl, fp
 800eb5e:	462b      	mov	r3, r5
 800eb60:	4652      	mov	r2, sl
 800eb62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800eb66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb6a:	f7f1 faff 	bl	800016c <__adddf3>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	2000      	movs	r0, #0
 800eb74:	49b9      	ldr	r1, [pc, #740]	; (800ee5c <__ieee754_pow+0x74c>)
 800eb76:	f7f1 fdd9 	bl	800072c <__aeabi_ddiv>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eb86:	f7f1 fca7 	bl	80004d8 <__aeabi_dmul>
 800eb8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800eb92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eb96:	2300      	movs	r3, #0
 800eb98:	2200      	movs	r2, #0
 800eb9a:	46ab      	mov	fp, r5
 800eb9c:	106d      	asrs	r5, r5, #1
 800eb9e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eba2:	9304      	str	r3, [sp, #16]
 800eba4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eba8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ebac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	4614      	mov	r4, r2
 800ebb6:	461d      	mov	r5, r3
 800ebb8:	f7f1 fc8e 	bl	80004d8 <__aeabi_dmul>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ebc4:	f7f1 fad0 	bl	8000168 <__aeabi_dsub>
 800ebc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebcc:	4606      	mov	r6, r0
 800ebce:	460f      	mov	r7, r1
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	4629      	mov	r1, r5
 800ebd4:	f7f1 fac8 	bl	8000168 <__aeabi_dsub>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4650      	mov	r0, sl
 800ebde:	4659      	mov	r1, fp
 800ebe0:	f7f1 fac2 	bl	8000168 <__aeabi_dsub>
 800ebe4:	4642      	mov	r2, r8
 800ebe6:	464b      	mov	r3, r9
 800ebe8:	f7f1 fc76 	bl	80004d8 <__aeabi_dmul>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 fab8 	bl	8000168 <__aeabi_dsub>
 800ebf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebfc:	f7f1 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ec00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec04:	4682      	mov	sl, r0
 800ec06:	468b      	mov	fp, r1
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f7f1 fc64 	bl	80004d8 <__aeabi_dmul>
 800ec10:	a37b      	add	r3, pc, #492	; (adr r3, 800ee00 <__ieee754_pow+0x6f0>)
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	4604      	mov	r4, r0
 800ec18:	460d      	mov	r5, r1
 800ec1a:	f7f1 fc5d 	bl	80004d8 <__aeabi_dmul>
 800ec1e:	a37a      	add	r3, pc, #488	; (adr r3, 800ee08 <__ieee754_pow+0x6f8>)
 800ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec24:	f7f1 faa2 	bl	800016c <__adddf3>
 800ec28:	4622      	mov	r2, r4
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	f7f1 fc54 	bl	80004d8 <__aeabi_dmul>
 800ec30:	a377      	add	r3, pc, #476	; (adr r3, 800ee10 <__ieee754_pow+0x700>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fa99 	bl	800016c <__adddf3>
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	462b      	mov	r3, r5
 800ec3e:	f7f1 fc4b 	bl	80004d8 <__aeabi_dmul>
 800ec42:	a375      	add	r3, pc, #468	; (adr r3, 800ee18 <__ieee754_pow+0x708>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 fa90 	bl	800016c <__adddf3>
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	462b      	mov	r3, r5
 800ec50:	f7f1 fc42 	bl	80004d8 <__aeabi_dmul>
 800ec54:	a372      	add	r3, pc, #456	; (adr r3, 800ee20 <__ieee754_pow+0x710>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	f7f1 fa87 	bl	800016c <__adddf3>
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f7f1 fc39 	bl	80004d8 <__aeabi_dmul>
 800ec66:	a370      	add	r3, pc, #448	; (adr r3, 800ee28 <__ieee754_pow+0x718>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 fa7e 	bl	800016c <__adddf3>
 800ec70:	4622      	mov	r2, r4
 800ec72:	4606      	mov	r6, r0
 800ec74:	460f      	mov	r7, r1
 800ec76:	462b      	mov	r3, r5
 800ec78:	4620      	mov	r0, r4
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	f7f1 fc2c 	bl	80004d8 <__aeabi_dmul>
 800ec80:	4602      	mov	r2, r0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4630      	mov	r0, r6
 800ec86:	4639      	mov	r1, r7
 800ec88:	f7f1 fc26 	bl	80004d8 <__aeabi_dmul>
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	460d      	mov	r5, r1
 800ec90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec94:	4642      	mov	r2, r8
 800ec96:	464b      	mov	r3, r9
 800ec98:	f7f1 fa68 	bl	800016c <__adddf3>
 800ec9c:	4652      	mov	r2, sl
 800ec9e:	465b      	mov	r3, fp
 800eca0:	f7f1 fc1a 	bl	80004d8 <__aeabi_dmul>
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 fa60 	bl	800016c <__adddf3>
 800ecac:	4642      	mov	r2, r8
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460f      	mov	r7, r1
 800ecb2:	464b      	mov	r3, r9
 800ecb4:	4640      	mov	r0, r8
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	f7f1 fc0e 	bl	80004d8 <__aeabi_dmul>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4b66      	ldr	r3, [pc, #408]	; (800ee60 <__ieee754_pow+0x750>)
 800ecc8:	f7f1 fa50 	bl	800016c <__adddf3>
 800eccc:	4632      	mov	r2, r6
 800ecce:	463b      	mov	r3, r7
 800ecd0:	f7f1 fa4c 	bl	800016c <__adddf3>
 800ecd4:	2400      	movs	r4, #0
 800ecd6:	460d      	mov	r5, r1
 800ecd8:	4622      	mov	r2, r4
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4640      	mov	r0, r8
 800ecde:	4649      	mov	r1, r9
 800ece0:	f7f1 fbfa 	bl	80004d8 <__aeabi_dmul>
 800ece4:	2200      	movs	r2, #0
 800ece6:	4680      	mov	r8, r0
 800ece8:	4689      	mov	r9, r1
 800ecea:	4620      	mov	r0, r4
 800ecec:	4629      	mov	r1, r5
 800ecee:	4b5c      	ldr	r3, [pc, #368]	; (800ee60 <__ieee754_pow+0x750>)
 800ecf0:	f7f1 fa3a 	bl	8000168 <__aeabi_dsub>
 800ecf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ecf8:	f7f1 fa36 	bl	8000168 <__aeabi_dsub>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fa30 	bl	8000168 <__aeabi_dsub>
 800ed08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed0c:	f7f1 fbe4 	bl	80004d8 <__aeabi_dmul>
 800ed10:	4622      	mov	r2, r4
 800ed12:	4606      	mov	r6, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	462b      	mov	r3, r5
 800ed18:	4650      	mov	r0, sl
 800ed1a:	4659      	mov	r1, fp
 800ed1c:	f7f1 fbdc 	bl	80004d8 <__aeabi_dmul>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 fa20 	bl	800016c <__adddf3>
 800ed2c:	2400      	movs	r4, #0
 800ed2e:	4606      	mov	r6, r0
 800ed30:	460f      	mov	r7, r1
 800ed32:	4602      	mov	r2, r0
 800ed34:	460b      	mov	r3, r1
 800ed36:	4640      	mov	r0, r8
 800ed38:	4649      	mov	r1, r9
 800ed3a:	f7f1 fa17 	bl	800016c <__adddf3>
 800ed3e:	a33c      	add	r3, pc, #240	; (adr r3, 800ee30 <__ieee754_pow+0x720>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4620      	mov	r0, r4
 800ed46:	460d      	mov	r5, r1
 800ed48:	f7f1 fbc6 	bl	80004d8 <__aeabi_dmul>
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	464b      	mov	r3, r9
 800ed50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 fa06 	bl	8000168 <__aeabi_dsub>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4630      	mov	r0, r6
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fa00 	bl	8000168 <__aeabi_dsub>
 800ed68:	a333      	add	r3, pc, #204	; (adr r3, 800ee38 <__ieee754_pow+0x728>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fbb3 	bl	80004d8 <__aeabi_dmul>
 800ed72:	a333      	add	r3, pc, #204	; (adr r3, 800ee40 <__ieee754_pow+0x730>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	4606      	mov	r6, r0
 800ed7a:	460f      	mov	r7, r1
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	f7f1 fbaa 	bl	80004d8 <__aeabi_dmul>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4630      	mov	r0, r6
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	f7f1 f9ee 	bl	800016c <__adddf3>
 800ed90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed92:	4b34      	ldr	r3, [pc, #208]	; (800ee64 <__ieee754_pow+0x754>)
 800ed94:	4413      	add	r3, r2
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	f7f1 f9e7 	bl	800016c <__adddf3>
 800ed9e:	4680      	mov	r8, r0
 800eda0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eda2:	4689      	mov	r9, r1
 800eda4:	f7f1 fb2e 	bl	8000404 <__aeabi_i2d>
 800eda8:	4604      	mov	r4, r0
 800edaa:	460d      	mov	r5, r1
 800edac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edb2:	4b2d      	ldr	r3, [pc, #180]	; (800ee68 <__ieee754_pow+0x758>)
 800edb4:	4413      	add	r3, r2
 800edb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800edba:	4642      	mov	r2, r8
 800edbc:	464b      	mov	r3, r9
 800edbe:	f7f1 f9d5 	bl	800016c <__adddf3>
 800edc2:	4632      	mov	r2, r6
 800edc4:	463b      	mov	r3, r7
 800edc6:	f7f1 f9d1 	bl	800016c <__adddf3>
 800edca:	4622      	mov	r2, r4
 800edcc:	462b      	mov	r3, r5
 800edce:	f7f1 f9cd 	bl	800016c <__adddf3>
 800edd2:	2000      	movs	r0, #0
 800edd4:	4622      	mov	r2, r4
 800edd6:	462b      	mov	r3, r5
 800edd8:	4682      	mov	sl, r0
 800edda:	468b      	mov	fp, r1
 800eddc:	f7f1 f9c4 	bl	8000168 <__aeabi_dsub>
 800ede0:	4632      	mov	r2, r6
 800ede2:	463b      	mov	r3, r7
 800ede4:	f7f1 f9c0 	bl	8000168 <__aeabi_dsub>
 800ede8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edec:	f7f1 f9bc 	bl	8000168 <__aeabi_dsub>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4640      	mov	r0, r8
 800edf6:	4649      	mov	r1, r9
 800edf8:	e60b      	b.n	800ea12 <__ieee754_pow+0x302>
 800edfa:	2601      	movs	r6, #1
 800edfc:	e69f      	b.n	800eb3e <__ieee754_pow+0x42e>
 800edfe:	bf00      	nop
 800ee00:	4a454eef 	.word	0x4a454eef
 800ee04:	3fca7e28 	.word	0x3fca7e28
 800ee08:	93c9db65 	.word	0x93c9db65
 800ee0c:	3fcd864a 	.word	0x3fcd864a
 800ee10:	a91d4101 	.word	0xa91d4101
 800ee14:	3fd17460 	.word	0x3fd17460
 800ee18:	518f264d 	.word	0x518f264d
 800ee1c:	3fd55555 	.word	0x3fd55555
 800ee20:	db6fabff 	.word	0xdb6fabff
 800ee24:	3fdb6db6 	.word	0x3fdb6db6
 800ee28:	33333303 	.word	0x33333303
 800ee2c:	3fe33333 	.word	0x3fe33333
 800ee30:	e0000000 	.word	0xe0000000
 800ee34:	3feec709 	.word	0x3feec709
 800ee38:	dc3a03fd 	.word	0xdc3a03fd
 800ee3c:	3feec709 	.word	0x3feec709
 800ee40:	145b01f5 	.word	0x145b01f5
 800ee44:	be3e2fe0 	.word	0xbe3e2fe0
 800ee48:	7ff00000 	.word	0x7ff00000
 800ee4c:	43400000 	.word	0x43400000
 800ee50:	0003988e 	.word	0x0003988e
 800ee54:	000bb679 	.word	0x000bb679
 800ee58:	08011240 	.word	0x08011240
 800ee5c:	3ff00000 	.word	0x3ff00000
 800ee60:	40080000 	.word	0x40080000
 800ee64:	08011260 	.word	0x08011260
 800ee68:	08011250 	.word	0x08011250
 800ee6c:	a39c      	add	r3, pc, #624	; (adr r3, 800f0e0 <__ieee754_pow+0x9d0>)
 800ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee72:	4640      	mov	r0, r8
 800ee74:	4649      	mov	r1, r9
 800ee76:	f7f1 f979 	bl	800016c <__adddf3>
 800ee7a:	4622      	mov	r2, r4
 800ee7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee80:	462b      	mov	r3, r5
 800ee82:	4650      	mov	r0, sl
 800ee84:	4639      	mov	r1, r7
 800ee86:	f7f1 f96f 	bl	8000168 <__aeabi_dsub>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee92:	f7f1 fdb1 	bl	80009f8 <__aeabi_dcmpgt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f47f ae06 	bne.w	800eaa8 <__ieee754_pow+0x398>
 800ee9c:	4aa2      	ldr	r2, [pc, #648]	; (800f128 <__ieee754_pow+0xa18>)
 800ee9e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800eea2:	4293      	cmp	r3, r2
 800eea4:	f340 8100 	ble.w	800f0a8 <__ieee754_pow+0x998>
 800eea8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eeac:	151b      	asrs	r3, r3, #20
 800eeae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eeb2:	fa4a fa03 	asr.w	sl, sl, r3
 800eeb6:	44b2      	add	sl, r6
 800eeb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eebc:	489b      	ldr	r0, [pc, #620]	; (800f12c <__ieee754_pow+0xa1c>)
 800eebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eec2:	4108      	asrs	r0, r1
 800eec4:	ea00 030a 	and.w	r3, r0, sl
 800eec8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eecc:	f1c1 0114 	rsb	r1, r1, #20
 800eed0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eed4:	fa4a fa01 	asr.w	sl, sl, r1
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	f04f 0200 	mov.w	r2, #0
 800eede:	4620      	mov	r0, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	bfb8      	it	lt
 800eee4:	f1ca 0a00 	rsblt	sl, sl, #0
 800eee8:	f7f1 f93e 	bl	8000168 <__aeabi_dsub>
 800eeec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eef4:	2400      	movs	r4, #0
 800eef6:	4642      	mov	r2, r8
 800eef8:	464b      	mov	r3, r9
 800eefa:	f7f1 f937 	bl	800016c <__adddf3>
 800eefe:	a37a      	add	r3, pc, #488	; (adr r3, 800f0e8 <__ieee754_pow+0x9d8>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	4620      	mov	r0, r4
 800ef06:	460d      	mov	r5, r1
 800ef08:	f7f1 fae6 	bl	80004d8 <__aeabi_dmul>
 800ef0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef10:	4606      	mov	r6, r0
 800ef12:	460f      	mov	r7, r1
 800ef14:	4620      	mov	r0, r4
 800ef16:	4629      	mov	r1, r5
 800ef18:	f7f1 f926 	bl	8000168 <__aeabi_dsub>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4640      	mov	r0, r8
 800ef22:	4649      	mov	r1, r9
 800ef24:	f7f1 f920 	bl	8000168 <__aeabi_dsub>
 800ef28:	a371      	add	r3, pc, #452	; (adr r3, 800f0f0 <__ieee754_pow+0x9e0>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 fad3 	bl	80004d8 <__aeabi_dmul>
 800ef32:	a371      	add	r3, pc, #452	; (adr r3, 800f0f8 <__ieee754_pow+0x9e8>)
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	4680      	mov	r8, r0
 800ef3a:	4689      	mov	r9, r1
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f7f1 faca 	bl	80004d8 <__aeabi_dmul>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	4640      	mov	r0, r8
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	f7f1 f90e 	bl	800016c <__adddf3>
 800ef50:	4604      	mov	r4, r0
 800ef52:	460d      	mov	r5, r1
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4630      	mov	r0, r6
 800ef5a:	4639      	mov	r1, r7
 800ef5c:	f7f1 f906 	bl	800016c <__adddf3>
 800ef60:	4632      	mov	r2, r6
 800ef62:	463b      	mov	r3, r7
 800ef64:	4680      	mov	r8, r0
 800ef66:	4689      	mov	r9, r1
 800ef68:	f7f1 f8fe 	bl	8000168 <__aeabi_dsub>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4620      	mov	r0, r4
 800ef72:	4629      	mov	r1, r5
 800ef74:	f7f1 f8f8 	bl	8000168 <__aeabi_dsub>
 800ef78:	4642      	mov	r2, r8
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	464b      	mov	r3, r9
 800ef80:	4640      	mov	r0, r8
 800ef82:	4649      	mov	r1, r9
 800ef84:	f7f1 faa8 	bl	80004d8 <__aeabi_dmul>
 800ef88:	a35d      	add	r3, pc, #372	; (adr r3, 800f100 <__ieee754_pow+0x9f0>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	4604      	mov	r4, r0
 800ef90:	460d      	mov	r5, r1
 800ef92:	f7f1 faa1 	bl	80004d8 <__aeabi_dmul>
 800ef96:	a35c      	add	r3, pc, #368	; (adr r3, 800f108 <__ieee754_pow+0x9f8>)
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	f7f1 f8e4 	bl	8000168 <__aeabi_dsub>
 800efa0:	4622      	mov	r2, r4
 800efa2:	462b      	mov	r3, r5
 800efa4:	f7f1 fa98 	bl	80004d8 <__aeabi_dmul>
 800efa8:	a359      	add	r3, pc, #356	; (adr r3, 800f110 <__ieee754_pow+0xa00>)
 800efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efae:	f7f1 f8dd 	bl	800016c <__adddf3>
 800efb2:	4622      	mov	r2, r4
 800efb4:	462b      	mov	r3, r5
 800efb6:	f7f1 fa8f 	bl	80004d8 <__aeabi_dmul>
 800efba:	a357      	add	r3, pc, #348	; (adr r3, 800f118 <__ieee754_pow+0xa08>)
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	f7f1 f8d2 	bl	8000168 <__aeabi_dsub>
 800efc4:	4622      	mov	r2, r4
 800efc6:	462b      	mov	r3, r5
 800efc8:	f7f1 fa86 	bl	80004d8 <__aeabi_dmul>
 800efcc:	a354      	add	r3, pc, #336	; (adr r3, 800f120 <__ieee754_pow+0xa10>)
 800efce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd2:	f7f1 f8cb 	bl	800016c <__adddf3>
 800efd6:	4622      	mov	r2, r4
 800efd8:	462b      	mov	r3, r5
 800efda:	f7f1 fa7d 	bl	80004d8 <__aeabi_dmul>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4640      	mov	r0, r8
 800efe4:	4649      	mov	r1, r9
 800efe6:	f7f1 f8bf 	bl	8000168 <__aeabi_dsub>
 800efea:	4604      	mov	r4, r0
 800efec:	460d      	mov	r5, r1
 800efee:	4602      	mov	r2, r0
 800eff0:	460b      	mov	r3, r1
 800eff2:	4640      	mov	r0, r8
 800eff4:	4649      	mov	r1, r9
 800eff6:	f7f1 fa6f 	bl	80004d8 <__aeabi_dmul>
 800effa:	2200      	movs	r2, #0
 800effc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f8ae 	bl	8000168 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f014:	f7f1 fb8a 	bl	800072c <__aeabi_ddiv>
 800f018:	4632      	mov	r2, r6
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	463b      	mov	r3, r7
 800f020:	4640      	mov	r0, r8
 800f022:	4649      	mov	r1, r9
 800f024:	f7f1 fa58 	bl	80004d8 <__aeabi_dmul>
 800f028:	4632      	mov	r2, r6
 800f02a:	463b      	mov	r3, r7
 800f02c:	f7f1 f89e 	bl	800016c <__adddf3>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	f7f1 f896 	bl	8000168 <__aeabi_dsub>
 800f03c:	4642      	mov	r2, r8
 800f03e:	464b      	mov	r3, r9
 800f040:	f7f1 f892 	bl	8000168 <__aeabi_dsub>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	2000      	movs	r0, #0
 800f04a:	4939      	ldr	r1, [pc, #228]	; (800f130 <__ieee754_pow+0xa20>)
 800f04c:	f7f1 f88c 	bl	8000168 <__aeabi_dsub>
 800f050:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f054:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f058:	da29      	bge.n	800f0ae <__ieee754_pow+0x99e>
 800f05a:	4652      	mov	r2, sl
 800f05c:	f000 f874 	bl	800f148 <scalbn>
 800f060:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f064:	f7ff bbfd 	b.w	800e862 <__ieee754_pow+0x152>
 800f068:	4b32      	ldr	r3, [pc, #200]	; (800f134 <__ieee754_pow+0xa24>)
 800f06a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f06e:	429f      	cmp	r7, r3
 800f070:	f77f af14 	ble.w	800ee9c <__ieee754_pow+0x78c>
 800f074:	4b30      	ldr	r3, [pc, #192]	; (800f138 <__ieee754_pow+0xa28>)
 800f076:	440b      	add	r3, r1
 800f078:	4303      	orrs	r3, r0
 800f07a:	d009      	beq.n	800f090 <__ieee754_pow+0x980>
 800f07c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f080:	2200      	movs	r2, #0
 800f082:	2300      	movs	r3, #0
 800f084:	f7f1 fc9a 	bl	80009bc <__aeabi_dcmplt>
 800f088:	3800      	subs	r0, #0
 800f08a:	bf18      	it	ne
 800f08c:	2001      	movne	r0, #1
 800f08e:	e452      	b.n	800e936 <__ieee754_pow+0x226>
 800f090:	4622      	mov	r2, r4
 800f092:	462b      	mov	r3, r5
 800f094:	f7f1 f868 	bl	8000168 <__aeabi_dsub>
 800f098:	4642      	mov	r2, r8
 800f09a:	464b      	mov	r3, r9
 800f09c:	f7f1 fca2 	bl	80009e4 <__aeabi_dcmpge>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f43f aefb 	beq.w	800ee9c <__ieee754_pow+0x78c>
 800f0a6:	e7e9      	b.n	800f07c <__ieee754_pow+0x96c>
 800f0a8:	f04f 0a00 	mov.w	sl, #0
 800f0ac:	e720      	b.n	800eef0 <__ieee754_pow+0x7e0>
 800f0ae:	4621      	mov	r1, r4
 800f0b0:	e7d6      	b.n	800f060 <__ieee754_pow+0x950>
 800f0b2:	f04f 0b00 	mov.w	fp, #0
 800f0b6:	f8df c078 	ldr.w	ip, [pc, #120]	; 800f130 <__ieee754_pow+0xa20>
 800f0ba:	f7ff bbb9 	b.w	800e830 <__ieee754_pow+0x120>
 800f0be:	f04f 0b00 	mov.w	fp, #0
 800f0c2:	f04f 0c00 	mov.w	ip, #0
 800f0c6:	f7ff bbb3 	b.w	800e830 <__ieee754_pow+0x120>
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7ff bb3c 	b.w	800e74a <__ieee754_pow+0x3a>
 800f0d2:	9200      	str	r2, [sp, #0]
 800f0d4:	f7ff bb88 	b.w	800e7e8 <__ieee754_pow+0xd8>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f7ff bb72 	b.w	800e7c2 <__ieee754_pow+0xb2>
 800f0de:	bf00      	nop
 800f0e0:	652b82fe 	.word	0x652b82fe
 800f0e4:	3c971547 	.word	0x3c971547
 800f0e8:	00000000 	.word	0x00000000
 800f0ec:	3fe62e43 	.word	0x3fe62e43
 800f0f0:	fefa39ef 	.word	0xfefa39ef
 800f0f4:	3fe62e42 	.word	0x3fe62e42
 800f0f8:	0ca86c39 	.word	0x0ca86c39
 800f0fc:	be205c61 	.word	0xbe205c61
 800f100:	72bea4d0 	.word	0x72bea4d0
 800f104:	3e663769 	.word	0x3e663769
 800f108:	c5d26bf1 	.word	0xc5d26bf1
 800f10c:	3ebbbd41 	.word	0x3ebbbd41
 800f110:	af25de2c 	.word	0xaf25de2c
 800f114:	3f11566a 	.word	0x3f11566a
 800f118:	16bebd93 	.word	0x16bebd93
 800f11c:	3f66c16c 	.word	0x3f66c16c
 800f120:	5555553e 	.word	0x5555553e
 800f124:	3fc55555 	.word	0x3fc55555
 800f128:	3fe00000 	.word	0x3fe00000
 800f12c:	fff00000 	.word	0xfff00000
 800f130:	3ff00000 	.word	0x3ff00000
 800f134:	4090cbff 	.word	0x4090cbff
 800f138:	3f6f3400 	.word	0x3f6f3400

0800f13c <fabs>:
 800f13c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f140:	4619      	mov	r1, r3
 800f142:	4770      	bx	lr
 800f144:	0000      	movs	r0, r0
	...

0800f148 <scalbn>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	4616      	mov	r6, r2
 800f14c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f150:	4604      	mov	r4, r0
 800f152:	460d      	mov	r5, r1
 800f154:	460b      	mov	r3, r1
 800f156:	b992      	cbnz	r2, 800f17e <scalbn+0x36>
 800f158:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f15c:	4303      	orrs	r3, r0
 800f15e:	d03c      	beq.n	800f1da <scalbn+0x92>
 800f160:	4b31      	ldr	r3, [pc, #196]	; (800f228 <scalbn+0xe0>)
 800f162:	2200      	movs	r2, #0
 800f164:	f7f1 f9b8 	bl	80004d8 <__aeabi_dmul>
 800f168:	4b30      	ldr	r3, [pc, #192]	; (800f22c <scalbn+0xe4>)
 800f16a:	4604      	mov	r4, r0
 800f16c:	429e      	cmp	r6, r3
 800f16e:	460d      	mov	r5, r1
 800f170:	da0f      	bge.n	800f192 <scalbn+0x4a>
 800f172:	a329      	add	r3, pc, #164	; (adr r3, 800f218 <scalbn+0xd0>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 f9ae 	bl	80004d8 <__aeabi_dmul>
 800f17c:	e006      	b.n	800f18c <scalbn+0x44>
 800f17e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800f182:	42ba      	cmp	r2, r7
 800f184:	d109      	bne.n	800f19a <scalbn+0x52>
 800f186:	4602      	mov	r2, r0
 800f188:	f7f0 fff0 	bl	800016c <__adddf3>
 800f18c:	4604      	mov	r4, r0
 800f18e:	460d      	mov	r5, r1
 800f190:	e023      	b.n	800f1da <scalbn+0x92>
 800f192:	460b      	mov	r3, r1
 800f194:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f198:	3a36      	subs	r2, #54	; 0x36
 800f19a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f19e:	428e      	cmp	r6, r1
 800f1a0:	dd0e      	ble.n	800f1c0 <scalbn+0x78>
 800f1a2:	a31f      	add	r3, pc, #124	; (adr r3, 800f220 <scalbn+0xd8>)
 800f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f1ac:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f1b0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f1b4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f1b8:	481d      	ldr	r0, [pc, #116]	; (800f230 <scalbn+0xe8>)
 800f1ba:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f1be:	e7db      	b.n	800f178 <scalbn+0x30>
 800f1c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1c4:	4432      	add	r2, r6
 800f1c6:	428a      	cmp	r2, r1
 800f1c8:	dceb      	bgt.n	800f1a2 <scalbn+0x5a>
 800f1ca:	2a00      	cmp	r2, #0
 800f1cc:	dd08      	ble.n	800f1e0 <scalbn+0x98>
 800f1ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1da:	4620      	mov	r0, r4
 800f1dc:	4629      	mov	r1, r5
 800f1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1e4:	da0c      	bge.n	800f200 <scalbn+0xb8>
 800f1e6:	a30c      	add	r3, pc, #48	; (adr r3, 800f218 <scalbn+0xd0>)
 800f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f1f0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f1f4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f1f8:	480e      	ldr	r0, [pc, #56]	; (800f234 <scalbn+0xec>)
 800f1fa:	f041 011f 	orr.w	r1, r1, #31
 800f1fe:	e7bb      	b.n	800f178 <scalbn+0x30>
 800f200:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f204:	3236      	adds	r2, #54	; 0x36
 800f206:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f20a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	2200      	movs	r2, #0
 800f214:	4b08      	ldr	r3, [pc, #32]	; (800f238 <scalbn+0xf0>)
 800f216:	e7af      	b.n	800f178 <scalbn+0x30>
 800f218:	c2f8f359 	.word	0xc2f8f359
 800f21c:	01a56e1f 	.word	0x01a56e1f
 800f220:	8800759c 	.word	0x8800759c
 800f224:	7e37e43c 	.word	0x7e37e43c
 800f228:	43500000 	.word	0x43500000
 800f22c:	ffff3cb0 	.word	0xffff3cb0
 800f230:	8800759c 	.word	0x8800759c
 800f234:	c2f8f359 	.word	0xc2f8f359
 800f238:	3c900000 	.word	0x3c900000

0800f23c <with_errno>:
 800f23c:	b570      	push	{r4, r5, r6, lr}
 800f23e:	4604      	mov	r4, r0
 800f240:	460d      	mov	r5, r1
 800f242:	4616      	mov	r6, r2
 800f244:	f7fd f95c 	bl	800c500 <__errno>
 800f248:	4629      	mov	r1, r5
 800f24a:	6006      	str	r6, [r0, #0]
 800f24c:	4620      	mov	r0, r4
 800f24e:	bd70      	pop	{r4, r5, r6, pc}

0800f250 <xflow>:
 800f250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f252:	4615      	mov	r5, r2
 800f254:	461c      	mov	r4, r3
 800f256:	b180      	cbz	r0, 800f27a <xflow+0x2a>
 800f258:	4610      	mov	r0, r2
 800f25a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f25e:	e9cd 0100 	strd	r0, r1, [sp]
 800f262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f266:	4628      	mov	r0, r5
 800f268:	4621      	mov	r1, r4
 800f26a:	f7f1 f935 	bl	80004d8 <__aeabi_dmul>
 800f26e:	2222      	movs	r2, #34	; 0x22
 800f270:	b003      	add	sp, #12
 800f272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f276:	f7ff bfe1 	b.w	800f23c <with_errno>
 800f27a:	4610      	mov	r0, r2
 800f27c:	4619      	mov	r1, r3
 800f27e:	e7ee      	b.n	800f25e <xflow+0xe>

0800f280 <__math_uflow>:
 800f280:	2200      	movs	r2, #0
 800f282:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f286:	f7ff bfe3 	b.w	800f250 <xflow>

0800f28a <__math_oflow>:
 800f28a:	2200      	movs	r2, #0
 800f28c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f290:	f7ff bfde 	b.w	800f250 <xflow>

0800f294 <__ieee754_sqrt>:
 800f294:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800f438 <__ieee754_sqrt+0x1a4>
 800f298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	ea3c 0c01 	bics.w	ip, ip, r1
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	460a      	mov	r2, r1
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	d10e      	bne.n	800f2ca <__ieee754_sqrt+0x36>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	f7f1 f913 	bl	80004d8 <__aeabi_dmul>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	f7f0 ff57 	bl	800016c <__adddf3>
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460d      	mov	r5, r1
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ca:	2900      	cmp	r1, #0
 800f2cc:	dc0d      	bgt.n	800f2ea <__ieee754_sqrt+0x56>
 800f2ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f2d2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800f2d6:	d0f4      	beq.n	800f2c2 <__ieee754_sqrt+0x2e>
 800f2d8:	b139      	cbz	r1, 800f2ea <__ieee754_sqrt+0x56>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	f7f0 ff44 	bl	8000168 <__aeabi_dsub>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	f7f1 fa22 	bl	800072c <__aeabi_ddiv>
 800f2e8:	e7e9      	b.n	800f2be <__ieee754_sqrt+0x2a>
 800f2ea:	1512      	asrs	r2, r2, #20
 800f2ec:	f000 8089 	beq.w	800f402 <__ieee754_sqrt+0x16e>
 800f2f0:	2500      	movs	r5, #0
 800f2f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2f6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f2fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2fe:	07d2      	lsls	r2, r2, #31
 800f300:	bf5c      	itt	pl
 800f302:	005b      	lslpl	r3, r3, #1
 800f304:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800f308:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f30c:	bf58      	it	pl
 800f30e:	0064      	lslpl	r4, r4, #1
 800f310:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f314:	0062      	lsls	r2, r4, #1
 800f316:	2016      	movs	r0, #22
 800f318:	4629      	mov	r1, r5
 800f31a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800f31e:	1076      	asrs	r6, r6, #1
 800f320:	190f      	adds	r7, r1, r4
 800f322:	429f      	cmp	r7, r3
 800f324:	bfde      	ittt	le
 800f326:	1bdb      	suble	r3, r3, r7
 800f328:	1939      	addle	r1, r7, r4
 800f32a:	192d      	addle	r5, r5, r4
 800f32c:	005b      	lsls	r3, r3, #1
 800f32e:	3801      	subs	r0, #1
 800f330:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f334:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f338:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f33c:	d1f0      	bne.n	800f320 <__ieee754_sqrt+0x8c>
 800f33e:	4604      	mov	r4, r0
 800f340:	2720      	movs	r7, #32
 800f342:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f346:	428b      	cmp	r3, r1
 800f348:	eb0c 0e00 	add.w	lr, ip, r0
 800f34c:	dc02      	bgt.n	800f354 <__ieee754_sqrt+0xc0>
 800f34e:	d113      	bne.n	800f378 <__ieee754_sqrt+0xe4>
 800f350:	4596      	cmp	lr, r2
 800f352:	d811      	bhi.n	800f378 <__ieee754_sqrt+0xe4>
 800f354:	f1be 0f00 	cmp.w	lr, #0
 800f358:	eb0e 000c 	add.w	r0, lr, ip
 800f35c:	da56      	bge.n	800f40c <__ieee754_sqrt+0x178>
 800f35e:	2800      	cmp	r0, #0
 800f360:	db54      	blt.n	800f40c <__ieee754_sqrt+0x178>
 800f362:	f101 0801 	add.w	r8, r1, #1
 800f366:	1a5b      	subs	r3, r3, r1
 800f368:	4641      	mov	r1, r8
 800f36a:	4596      	cmp	lr, r2
 800f36c:	bf88      	it	hi
 800f36e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f372:	eba2 020e 	sub.w	r2, r2, lr
 800f376:	4464      	add	r4, ip
 800f378:	005b      	lsls	r3, r3, #1
 800f37a:	3f01      	subs	r7, #1
 800f37c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f380:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f384:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f388:	d1dd      	bne.n	800f346 <__ieee754_sqrt+0xb2>
 800f38a:	4313      	orrs	r3, r2
 800f38c:	d01b      	beq.n	800f3c6 <__ieee754_sqrt+0x132>
 800f38e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f43c <__ieee754_sqrt+0x1a8>
 800f392:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f440 <__ieee754_sqrt+0x1ac>
 800f396:	e9da 0100 	ldrd	r0, r1, [sl]
 800f39a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f39e:	f7f0 fee3 	bl	8000168 <__aeabi_dsub>
 800f3a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4640      	mov	r0, r8
 800f3ac:	4649      	mov	r1, r9
 800f3ae:	f7f1 fb0f 	bl	80009d0 <__aeabi_dcmple>
 800f3b2:	b140      	cbz	r0, 800f3c6 <__ieee754_sqrt+0x132>
 800f3b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f3c0:	d126      	bne.n	800f410 <__ieee754_sqrt+0x17c>
 800f3c2:	463c      	mov	r4, r7
 800f3c4:	3501      	adds	r5, #1
 800f3c6:	106b      	asrs	r3, r5, #1
 800f3c8:	0864      	lsrs	r4, r4, #1
 800f3ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f3ce:	07ea      	lsls	r2, r5, #31
 800f3d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f3d4:	bf48      	it	mi
 800f3d6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800f3da:	4620      	mov	r0, r4
 800f3dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f3e0:	e76d      	b.n	800f2be <__ieee754_sqrt+0x2a>
 800f3e2:	0ae3      	lsrs	r3, r4, #11
 800f3e4:	3915      	subs	r1, #21
 800f3e6:	0564      	lsls	r4, r4, #21
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d0fa      	beq.n	800f3e2 <__ieee754_sqrt+0x14e>
 800f3ec:	02d8      	lsls	r0, r3, #11
 800f3ee:	d50a      	bpl.n	800f406 <__ieee754_sqrt+0x172>
 800f3f0:	f1c2 0020 	rsb	r0, r2, #32
 800f3f4:	fa24 f000 	lsr.w	r0, r4, r0
 800f3f8:	1e55      	subs	r5, r2, #1
 800f3fa:	4094      	lsls	r4, r2
 800f3fc:	4303      	orrs	r3, r0
 800f3fe:	1b4a      	subs	r2, r1, r5
 800f400:	e776      	b.n	800f2f0 <__ieee754_sqrt+0x5c>
 800f402:	4611      	mov	r1, r2
 800f404:	e7f0      	b.n	800f3e8 <__ieee754_sqrt+0x154>
 800f406:	005b      	lsls	r3, r3, #1
 800f408:	3201      	adds	r2, #1
 800f40a:	e7ef      	b.n	800f3ec <__ieee754_sqrt+0x158>
 800f40c:	4688      	mov	r8, r1
 800f40e:	e7aa      	b.n	800f366 <__ieee754_sqrt+0xd2>
 800f410:	f7f0 feac 	bl	800016c <__adddf3>
 800f414:	e9da 8900 	ldrd	r8, r9, [sl]
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	4640      	mov	r0, r8
 800f41e:	4649      	mov	r1, r9
 800f420:	f7f1 facc 	bl	80009bc <__aeabi_dcmplt>
 800f424:	b120      	cbz	r0, 800f430 <__ieee754_sqrt+0x19c>
 800f426:	1ca1      	adds	r1, r4, #2
 800f428:	bf08      	it	eq
 800f42a:	3501      	addeq	r5, #1
 800f42c:	3402      	adds	r4, #2
 800f42e:	e7ca      	b.n	800f3c6 <__ieee754_sqrt+0x132>
 800f430:	3401      	adds	r4, #1
 800f432:	f024 0401 	bic.w	r4, r4, #1
 800f436:	e7c6      	b.n	800f3c6 <__ieee754_sqrt+0x132>
 800f438:	7ff00000 	.word	0x7ff00000
 800f43c:	20000280 	.word	0x20000280
 800f440:	20000288 	.word	0x20000288

0800f444 <_init>:
 800f444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f446:	bf00      	nop
 800f448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f44a:	bc08      	pop	{r3}
 800f44c:	469e      	mov	lr, r3
 800f44e:	4770      	bx	lr

0800f450 <_fini>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	bf00      	nop
 800f454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f456:	bc08      	pop	{r3}
 800f458:	469e      	mov	lr, r3
 800f45a:	4770      	bx	lr
