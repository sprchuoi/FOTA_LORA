
LoRa_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .config_LoRa  00000004  0801fc04  0801fc04  0002fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000017a4  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08009114  08009114  0002fc08  2**0
                  CONTENTS
  5 .ARM          00000008  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800911c  0800911c  0002fc08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d0  20000000  08009124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001450  200000d0  080091f4  000200d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001520  080091f4  00021520  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002fc31  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013255  00000000  00000000  0002fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039bf  00000000  00000000  00042ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  00046888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e54  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bc52  00000000  00000000  000488e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019128  00000000  00000000  00064536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00091c48  00000000  00000000  0007d65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ebc  00000000  00000000  0010f2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00114164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007958 	.word	0x08007958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	08007958 	.word	0x08007958

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_uldivmod>:
 800064c:	b953      	cbnz	r3, 8000664 <__aeabi_uldivmod+0x18>
 800064e:	b94a      	cbnz	r2, 8000664 <__aeabi_uldivmod+0x18>
 8000650:	2900      	cmp	r1, #0
 8000652:	bf08      	it	eq
 8000654:	2800      	cmpeq	r0, #0
 8000656:	bf1c      	itt	ne
 8000658:	f04f 31ff 	movne.w	r1, #4294967295
 800065c:	f04f 30ff 	movne.w	r0, #4294967295
 8000660:	f000 b972 	b.w	8000948 <__aeabi_idiv0>
 8000664:	f1ad 0c08 	sub.w	ip, sp, #8
 8000668:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800066c:	f000 f806 	bl	800067c <__udivmoddi4>
 8000670:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000678:	b004      	add	sp, #16
 800067a:	4770      	bx	lr

0800067c <__udivmoddi4>:
 800067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000680:	9e08      	ldr	r6, [sp, #32]
 8000682:	460d      	mov	r5, r1
 8000684:	4604      	mov	r4, r0
 8000686:	468e      	mov	lr, r1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d14c      	bne.n	8000726 <__udivmoddi4+0xaa>
 800068c:	428a      	cmp	r2, r1
 800068e:	4694      	mov	ip, r2
 8000690:	d967      	bls.n	8000762 <__udivmoddi4+0xe6>
 8000692:	fab2 f382 	clz	r3, r2
 8000696:	b153      	cbz	r3, 80006ae <__udivmoddi4+0x32>
 8000698:	fa02 fc03 	lsl.w	ip, r2, r3
 800069c:	f1c3 0220 	rsb	r2, r3, #32
 80006a0:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a4:	fa20 f202 	lsr.w	r2, r0, r2
 80006a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80006ac:	409c      	lsls	r4, r3
 80006ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b2:	fbbe f1f7 	udiv	r1, lr, r7
 80006b6:	fa1f f58c 	uxth.w	r5, ip
 80006ba:	fb07 ee11 	mls	lr, r7, r1, lr
 80006be:	fb01 f005 	mul.w	r0, r1, r5
 80006c2:	0c22      	lsrs	r2, r4, #16
 80006c4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80006c8:	4290      	cmp	r0, r2
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x66>
 80006cc:	eb1c 0202 	adds.w	r2, ip, r2
 80006d0:	f101 3eff 	add.w	lr, r1, #4294967295
 80006d4:	f080 8119 	bcs.w	800090a <__udivmoddi4+0x28e>
 80006d8:	4290      	cmp	r0, r2
 80006da:	f240 8116 	bls.w	800090a <__udivmoddi4+0x28e>
 80006de:	3902      	subs	r1, #2
 80006e0:	4462      	add	r2, ip
 80006e2:	1a12      	subs	r2, r2, r0
 80006e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80006e8:	fb07 2210 	mls	r2, r7, r0, r2
 80006ec:	fb00 f505 	mul.w	r5, r0, r5
 80006f0:	b2a4      	uxth	r4, r4
 80006f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f6:	42a5      	cmp	r5, r4
 80006f8:	d90a      	bls.n	8000710 <__udivmoddi4+0x94>
 80006fa:	eb1c 0404 	adds.w	r4, ip, r4
 80006fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000702:	f080 8104 	bcs.w	800090e <__udivmoddi4+0x292>
 8000706:	42a5      	cmp	r5, r4
 8000708:	f240 8101 	bls.w	800090e <__udivmoddi4+0x292>
 800070c:	4464      	add	r4, ip
 800070e:	3802      	subs	r0, #2
 8000710:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000714:	2100      	movs	r1, #0
 8000716:	1b64      	subs	r4, r4, r5
 8000718:	b11e      	cbz	r6, 8000722 <__udivmoddi4+0xa6>
 800071a:	40dc      	lsrs	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	e9c6 4300 	strd	r4, r3, [r6]
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0xc0>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80ea 	beq.w	8000904 <__udivmoddi4+0x288>
 8000730:	2100      	movs	r1, #0
 8000732:	e9c6 0500 	strd	r0, r5, [r6]
 8000736:	4608      	mov	r0, r1
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	fab3 f183 	clz	r1, r3
 8000740:	2900      	cmp	r1, #0
 8000742:	d148      	bne.n	80007d6 <__udivmoddi4+0x15a>
 8000744:	42ab      	cmp	r3, r5
 8000746:	d302      	bcc.n	800074e <__udivmoddi4+0xd2>
 8000748:	4282      	cmp	r2, r0
 800074a:	f200 80f8 	bhi.w	800093e <__udivmoddi4+0x2c2>
 800074e:	1a84      	subs	r4, r0, r2
 8000750:	eb65 0203 	sbc.w	r2, r5, r3
 8000754:	2001      	movs	r0, #1
 8000756:	4696      	mov	lr, r2
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0e2      	beq.n	8000722 <__udivmoddi4+0xa6>
 800075c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000760:	e7df      	b.n	8000722 <__udivmoddi4+0xa6>
 8000762:	b902      	cbnz	r2, 8000766 <__udivmoddi4+0xea>
 8000764:	deff      	udf	#255	; 0xff
 8000766:	fab2 f382 	clz	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 808e 	bne.w	800088c <__udivmoddi4+0x210>
 8000770:	1a88      	subs	r0, r1, r2
 8000772:	2101      	movs	r1, #1
 8000774:	0c17      	lsrs	r7, r2, #16
 8000776:	fa1f fe82 	uxth.w	lr, r2
 800077a:	fbb0 f5f7 	udiv	r5, r0, r7
 800077e:	fb07 0015 	mls	r0, r7, r5, r0
 8000782:	0c22      	lsrs	r2, r4, #16
 8000784:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000788:	fb0e f005 	mul.w	r0, lr, r5
 800078c:	4290      	cmp	r0, r2
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x126>
 8000790:	eb1c 0202 	adds.w	r2, ip, r2
 8000794:	f105 38ff 	add.w	r8, r5, #4294967295
 8000798:	d202      	bcs.n	80007a0 <__udivmoddi4+0x124>
 800079a:	4290      	cmp	r0, r2
 800079c:	f200 80cc 	bhi.w	8000938 <__udivmoddi4+0x2bc>
 80007a0:	4645      	mov	r5, r8
 80007a2:	1a12      	subs	r2, r2, r0
 80007a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80007a8:	fb07 2210 	mls	r2, r7, r0, r2
 80007ac:	fb0e fe00 	mul.w	lr, lr, r0
 80007b0:	b2a4      	uxth	r4, r4
 80007b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x150>
 80007ba:	eb1c 0404 	adds.w	r4, ip, r4
 80007be:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14e>
 80007c4:	45a6      	cmp	lr, r4
 80007c6:	f200 80b4 	bhi.w	8000932 <__udivmoddi4+0x2b6>
 80007ca:	4610      	mov	r0, r2
 80007cc:	eba4 040e 	sub.w	r4, r4, lr
 80007d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007d4:	e7a0      	b.n	8000718 <__udivmoddi4+0x9c>
 80007d6:	f1c1 0720 	rsb	r7, r1, #32
 80007da:	408b      	lsls	r3, r1
 80007dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e4:	fa25 fa07 	lsr.w	sl, r5, r7
 80007e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ec:	fbba f8f9 	udiv	r8, sl, r9
 80007f0:	408d      	lsls	r5, r1
 80007f2:	fa20 f307 	lsr.w	r3, r0, r7
 80007f6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007fa:	fa1f fe8c 	uxth.w	lr, ip
 80007fe:	432b      	orrs	r3, r5
 8000800:	fa00 f501 	lsl.w	r5, r0, r1
 8000804:	fb08 f00e 	mul.w	r0, r8, lr
 8000808:	0c1c      	lsrs	r4, r3, #16
 800080a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800080e:	42a0      	cmp	r0, r4
 8000810:	fa02 f201 	lsl.w	r2, r2, r1
 8000814:	d90b      	bls.n	800082e <__udivmoddi4+0x1b2>
 8000816:	eb1c 0404 	adds.w	r4, ip, r4
 800081a:	f108 3aff 	add.w	sl, r8, #4294967295
 800081e:	f080 8086 	bcs.w	800092e <__udivmoddi4+0x2b2>
 8000822:	42a0      	cmp	r0, r4
 8000824:	f240 8083 	bls.w	800092e <__udivmoddi4+0x2b2>
 8000828:	f1a8 0802 	sub.w	r8, r8, #2
 800082c:	4464      	add	r4, ip
 800082e:	1a24      	subs	r4, r4, r0
 8000830:	b298      	uxth	r0, r3
 8000832:	fbb4 f3f9 	udiv	r3, r4, r9
 8000836:	fb09 4413 	mls	r4, r9, r3, r4
 800083a:	fb03 fe0e 	mul.w	lr, r3, lr
 800083e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x1dc>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f103 30ff 	add.w	r0, r3, #4294967295
 800084e:	d26a      	bcs.n	8000926 <__udivmoddi4+0x2aa>
 8000850:	45a6      	cmp	lr, r4
 8000852:	d968      	bls.n	8000926 <__udivmoddi4+0x2aa>
 8000854:	3b02      	subs	r3, #2
 8000856:	4464      	add	r4, ip
 8000858:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800085c:	fba0 9302 	umull	r9, r3, r0, r2
 8000860:	eba4 040e 	sub.w	r4, r4, lr
 8000864:	429c      	cmp	r4, r3
 8000866:	46c8      	mov	r8, r9
 8000868:	469e      	mov	lr, r3
 800086a:	d354      	bcc.n	8000916 <__udivmoddi4+0x29a>
 800086c:	d051      	beq.n	8000912 <__udivmoddi4+0x296>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d067      	beq.n	8000942 <__udivmoddi4+0x2c6>
 8000872:	ebb5 0308 	subs.w	r3, r5, r8
 8000876:	eb64 040e 	sbc.w	r4, r4, lr
 800087a:	40cb      	lsrs	r3, r1
 800087c:	fa04 f707 	lsl.w	r7, r4, r7
 8000880:	431f      	orrs	r7, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c6 7400 	strd	r7, r4, [r6]
 8000888:	2100      	movs	r1, #0
 800088a:	e74a      	b.n	8000722 <__udivmoddi4+0xa6>
 800088c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000890:	f1c3 0020 	rsb	r0, r3, #32
 8000894:	40c1      	lsrs	r1, r0
 8000896:	409d      	lsls	r5, r3
 8000898:	fa24 f000 	lsr.w	r0, r4, r0
 800089c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a0:	4328      	orrs	r0, r5
 80008a2:	fbb1 f5f7 	udiv	r5, r1, r7
 80008a6:	fb07 1115 	mls	r1, r7, r5, r1
 80008aa:	fa1f fe8c 	uxth.w	lr, ip
 80008ae:	0c02      	lsrs	r2, r0, #16
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	fb05 f10e 	mul.w	r1, r5, lr
 80008b8:	4291      	cmp	r1, r2
 80008ba:	fa04 f403 	lsl.w	r4, r4, r3
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x256>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c8:	d22f      	bcs.n	800092a <__udivmoddi4+0x2ae>
 80008ca:	4291      	cmp	r1, r2
 80008cc:	d92d      	bls.n	800092a <__udivmoddi4+0x2ae>
 80008ce:	3d02      	subs	r5, #2
 80008d0:	4462      	add	r2, ip
 80008d2:	1a52      	subs	r2, r2, r1
 80008d4:	fbb2 f1f7 	udiv	r1, r2, r7
 80008d8:	fb07 2211 	mls	r2, r7, r1, r2
 80008dc:	b280      	uxth	r0, r0
 80008de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80008e2:	fb01 f20e 	mul.w	r2, r1, lr
 80008e6:	4282      	cmp	r2, r0
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x280>
 80008ea:	eb1c 0000 	adds.w	r0, ip, r0
 80008ee:	f101 38ff 	add.w	r8, r1, #4294967295
 80008f2:	d216      	bcs.n	8000922 <__udivmoddi4+0x2a6>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	d914      	bls.n	8000922 <__udivmoddi4+0x2a6>
 80008f8:	3902      	subs	r1, #2
 80008fa:	4460      	add	r0, ip
 80008fc:	1a80      	subs	r0, r0, r2
 80008fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000902:	e73a      	b.n	800077a <__udivmoddi4+0xfe>
 8000904:	4631      	mov	r1, r6
 8000906:	4630      	mov	r0, r6
 8000908:	e70b      	b.n	8000722 <__udivmoddi4+0xa6>
 800090a:	4671      	mov	r1, lr
 800090c:	e6e9      	b.n	80006e2 <__udivmoddi4+0x66>
 800090e:	4610      	mov	r0, r2
 8000910:	e6fe      	b.n	8000710 <__udivmoddi4+0x94>
 8000912:	454d      	cmp	r5, r9
 8000914:	d2ab      	bcs.n	800086e <__udivmoddi4+0x1f2>
 8000916:	ebb9 0802 	subs.w	r8, r9, r2
 800091a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800091e:	3801      	subs	r0, #1
 8000920:	e7a5      	b.n	800086e <__udivmoddi4+0x1f2>
 8000922:	4641      	mov	r1, r8
 8000924:	e7ea      	b.n	80008fc <__udivmoddi4+0x280>
 8000926:	4603      	mov	r3, r0
 8000928:	e796      	b.n	8000858 <__udivmoddi4+0x1dc>
 800092a:	4645      	mov	r5, r8
 800092c:	e7d1      	b.n	80008d2 <__udivmoddi4+0x256>
 800092e:	46d0      	mov	r8, sl
 8000930:	e77d      	b.n	800082e <__udivmoddi4+0x1b2>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e749      	b.n	80007cc <__udivmoddi4+0x150>
 8000938:	3d02      	subs	r5, #2
 800093a:	4462      	add	r2, ip
 800093c:	e731      	b.n	80007a2 <__udivmoddi4+0x126>
 800093e:	4608      	mov	r0, r1
 8000940:	e70a      	b.n	8000758 <__udivmoddi4+0xdc>
 8000942:	4631      	mov	r1, r6
 8000944:	e6ed      	b.n	8000722 <__udivmoddi4+0xa6>
 8000946:	bf00      	nop

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <Encrypt_Address_Read_Init>:
static uint8_t gl_u8FlagActiveAddr;
static uint32_t gl_u32Version;
struct AES_ctx ctx_fw;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void Encrypt_Address_Read_Init(){
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	gl_ReadAddress = STORE_AREA_START_ADDRESS;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <Encrypt_Address_Read_Init+0x14>)
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <Encrypt_Address_Read_Init+0x18>)
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000180 	.word	0x20000180
 8000964:	0800d000 	.word	0x0800d000

08000968 <Encrypt_MainFunc>:

void Encrypt_MainFunc()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 800096e:	4835      	ldr	r0, [pc, #212]	; (8000a44 <Encrypt_MainFunc+0xdc>)
 8000970:	f000 fe22 	bl	80015b8 <Rte_SystemState_ReadData>
 8000974:	4603      	mov	r3, r0
 8000976:	71bb      	strb	r3, [r7, #6]
	retVal = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8000978:	4833      	ldr	r0, [pc, #204]	; (8000a48 <Encrypt_MainFunc+0xe0>)
 800097a:	f000 ff67 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
 800097e:	4603      	mov	r3, r0
 8000980:	71bb      	strb	r3, [r7, #6]
	gl_ReadAddress = STORE_AREA_START_ADDRESS +(gl_u16NoPacket-1)*64;
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <Encrypt_MainFunc+0xe0>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800098a:	f203 333f 	addw	r3, r3, #831	; 0x33f
 800098e:	019b      	lsls	r3, r3, #6
 8000990:	461a      	mov	r2, r3
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <Encrypt_MainFunc+0xe4>)
 8000994:	601a      	str	r2, [r3, #0]
	//Initialize Cyper IV ctx
	AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8000996:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <Encrypt_MainFunc+0xe8>)
 8000998:	492e      	ldr	r1, [pc, #184]	; (8000a54 <Encrypt_MainFunc+0xec>)
 800099a:	482f      	ldr	r0, [pc, #188]	; (8000a58 <Encrypt_MainFunc+0xf0>)
 800099c:	f002 feb4 	bl	8003708 <AES_init_ctx_iv>
	if(RTE_E_OKE == retVal){
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d14a      	bne.n	8000a3c <Encrypt_MainFunc+0xd4>
		if(SYS_ENCRYPT_FW == gl_u8SystemState){
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <Encrypt_MainFunc+0xdc>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d146      	bne.n	8000a3c <Encrypt_MainFunc+0xd4>
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 80009ae:	2300      	movs	r3, #0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e00f      	b.n	80009d4 <Encrypt_MainFunc+0x6c>
				gl_u8FwFragment[local_counter] = (*(volatile uint8_t*)(gl_ReadAddress));
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <Encrypt_MainFunc+0xe4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <Encrypt_MainFunc+0xf4>)
 80009c2:	54d1      	strb	r1, [r2, r3]
				gl_ReadAddress++;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <Encrypt_MainFunc+0xe4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <Encrypt_MainFunc+0xe4>)
 80009cc:	6013      	str	r3, [r2, #0]
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	3301      	adds	r3, #1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b3f      	cmp	r3, #63	; 0x3f
 80009d8:	d9ec      	bls.n	80009b4 <Encrypt_MainFunc+0x4c>
			}
			RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 80009da:	481b      	ldr	r0, [pc, #108]	; (8000a48 <Encrypt_MainFunc+0xe0>)
 80009dc:	f000 ff36 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
			RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u8Addr_Packet);
 80009e0:	481f      	ldr	r0, [pc, #124]	; (8000a60 <Encrypt_MainFunc+0xf8>)
 80009e2:	f000 fea3 	bl	800172c <Rte_NodeAddr_ReadData>
			gl_u8CipherText[0]= ADDR_BROADCAST;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	701a      	strb	r2, [r3, #0]
			gl_u8CipherText[1]= gl_u8Addr_Packet;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <Encrypt_MainFunc+0xf8>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 80009f2:	705a      	strb	r2, [r3, #1]
			gl_u8CipherText[2] =FL_FRAGMENT_FIRMWARE;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 80009f6:	22fe      	movs	r2, #254	; 0xfe
 80009f8:	709a      	strb	r2, [r3, #2]
			gl_u8CipherText[3]= gl_u16NoPacket >> SHIFT_8_BIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <Encrypt_MainFunc+0xe0>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 8000a06:	70da      	strb	r2, [r3, #3]
			gl_u8CipherText[4]= gl_u16NoPacket >> SHIFT_0_BIT;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <Encrypt_MainFunc+0xe0>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 8000a10:	711a      	strb	r2, [r3, #4]
			copy_Array((uint8_t*)gl_u8CipherText ,(uint8_t*) gl_u8FwFragment , 64);
 8000a12:	2240      	movs	r2, #64	; 0x40
 8000a14:	4911      	ldr	r1, [pc, #68]	; (8000a5c <Encrypt_MainFunc+0xf4>)
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 8000a18:	f003 fac1 	bl	8003f9e <copy_Array>

			/*Encrypt buffer to cyberText*/
			AES_CTR_xcrypt_buffer(&ctx_fw, gl_u8CipherText, 80);
 8000a1c:	2250      	movs	r2, #80	; 0x50
 8000a1e:	4911      	ldr	r1, [pc, #68]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <Encrypt_MainFunc+0xf0>)
 8000a22:	f003 f834 	bl	8003a8e <AES_CTR_xcrypt_buffer>
			retVal = RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_WriteData(gl_u8CipherText);
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <Encrypt_MainFunc+0xfc>)
 8000a28:	f000 fdd8 	bl	80015dc <Rte_EncyptedBuffer_WriteData>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <Encrypt_MainFunc+0xd4>
				// Set to Send Update
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_SEND_UPDATE);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fdac 	bl	8001594 <Rte_SystemState_WriteData>
			}
		}

	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000017c 	.word	0x2000017c
 8000a48:	20000184 	.word	0x20000184
 8000a4c:	20000180 	.word	0x20000180
 8000a50:	20000010 	.word	0x20000010
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000188 	.word	0x20000188
 8000a5c:	2000013c 	.word	0x2000013c
 8000a60:	20000186 	.word	0x20000186
 8000a64:	200000ec 	.word	0x200000ec

08000a68 <F_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void F_voidInitVariables (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <F_voidInitVariables+0x14>)
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <F_voidInitVariables+0x18>)
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000248 	.word	0x20000248
 8000a80:	0800d000 	.word	0x0800d000

08000a84 <F_FlashBlockToAddress>:


HAL_StatusTypeDef F_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 8000a94:	2300      	movs	r3, #0
 8000a96:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <F_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e024      	b.n	8000af2 <F_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	81bb      	strh	r3, [r7, #12]
 8000aac:	e01d      	b.n	8000aea <F_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000aae:	89bb      	ldrh	r3, [r7, #12]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	89bb      	ldrh	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	440b      	add	r3, r1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	817b      	strh	r3, [r7, #10]
			F_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <F_FlashBlockToAddress+0x78>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	897a      	ldrh	r2, [r7, #10]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f832 	bl	8000b3e <F_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <F_FlashBlockToAddress+0x78>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3302      	adds	r3, #2
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <F_FlashBlockToAddress+0x78>)
 8000ae2:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000ae4:	89bb      	ldrh	r3, [r7, #12]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	81bb      	strh	r3, [r7, #12]
 8000aea:	89ba      	ldrh	r2, [r7, #12]
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3dd      	bcc.n	8000aae <F_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000248 	.word	0x20000248

08000b00 <F_Erase_Image>:

HAL_StatusTypeDef F_Erase_Image(uint32_t ImageAddress)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	22;
 8000b14:	2316      	movs	r3, #22
 8000b16:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000b18:	f003 fe34 	bl	8004784 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000b1c:	f107 0208 	add.w	r2, r7, #8
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 ff14 	bl	8004954 <HAL_FLASHEx_Erase>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8000b30:	f003 fe4e 	bl	80047d0 <HAL_FLASH_Lock>
	return Local_retVal;
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <F_FlashHalfWordToAddress>:


HAL_StatusTypeDef F_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000b3e:	b5b0      	push	{r4, r5, r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000b4a:	f003 fe1b 	bl	8004784 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	2200      	movs	r2, #0
 8000b52:	461c      	mov	r4, r3
 8000b54:	4615      	mov	r5, r2
 8000b56:	4622      	mov	r2, r4
 8000b58:	462b      	mov	r3, r5
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f003 fda1 	bl	80046a4 <HAL_FLASH_Program>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8000b66:	f003 fe33 	bl	80047d0 <HAL_FLASH_Lock>

	return Local_retVal;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bdb0      	pop	{r4, r5, r7, pc}

08000b74 <F_FlashWordToAddress>:

HAL_StatusTypeDef F_FlashWordToAddress(uint32_t Copy_Address , uint32_t Copy_u32DataAddress)
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000b7e:	f003 fe01 	bl	8004784 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Copy_Address, Copy_u32DataAddress);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2200      	movs	r2, #0
 8000b86:	461c      	mov	r4, r3
 8000b88:	4615      	mov	r5, r2
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	462b      	mov	r3, r5
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2002      	movs	r0, #2
 8000b92:	f003 fd87 	bl	80046a4 <HAL_FLASH_Program>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8000b9a:	f003 fe19 	bl	80047d0 <HAL_FLASH_Lock>

	return Local_retVal;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bdb0      	pop	{r4, r5, r7, pc}

08000ba8 <FL_Syns_Config>:
struct AES_ctx ctx_req;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
//uint32_t FL_uint32localAddress = ACTIVE_IMAGE + 0x80 ;
FL_Return_t FL_Syns_Config(uint8_t address_update, uint8_t* buffer_req, uint8_t* buffer_resp
	, uint8_t SF ,  uint8_t BandWidth , uint8_t CR ){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af06      	add	r7, sp, #24
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	73bb      	strb	r3, [r7, #14]
	/* Add info to packet */
	buffer_req[3] = SF ;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3303      	adds	r3, #3
 8000bc0:	7bba      	ldrb	r2, [r7, #14]
 8000bc2:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = BandWidth ;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	7e3a      	ldrb	r2, [r7, #24]
 8000bca:	701a      	strb	r2, [r3, #0]
	/*	Wait to get Response from Node */
	buffer_req[5] = CR ;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3305      	adds	r3, #5
 8000bd0:	7f3a      	ldrb	r2, [r7, #28]
 8000bd2:	701a      	strb	r2, [r3, #0]
	if(LORA_IF_Stransmit_Request(&SX1278, (uint8_t*) buffer_req,(uint8_t*) buffer_resp ,
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <FL_Syns_Config+0xa8>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	2321      	movs	r3, #33	; 0x21
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2320      	movs	r3, #32
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	481a      	ldr	r0, [pc, #104]	; (8000c54 <FL_Syns_Config+0xac>)
 8000bec:	f002 f842 	bl	8002c74 <LORA_IF_Stransmit_Request>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d122      	bne.n	8000c3c <FL_Syns_Config+0x94>
			ret , address_update ,GW_SYNC_CONFIG , MCU_RECEIVED_CONFIG ) == LORA_OKE)
	{
		if(LORA_IF_GetData_Frame(&SX1278 ,(uint8_t*) buffer_resp , ret , 5000 , SIZE_BUFFER_16BYTES ,MCU_RECEIVED_CONFIG ) == 1)
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <FL_Syns_Config+0xa8>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	2321      	movs	r3, #33	; 0x21
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	2310      	movs	r3, #16
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <FL_Syns_Config+0xac>)
 8000c0a:	f001 ffd7 	bl	8002bbc <LORA_IF_GetData_Frame>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d113      	bne.n	8000c3c <FL_Syns_Config+0x94>
		{
			SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SF,
 8000c14:	2310      	movs	r3, #16
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	7f3b      	ldrb	r3, [r7, #28]
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	7e3b      	ldrb	r3, [r7, #24]
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	a306      	add	r3, pc, #24	; (adr r3, 8000c48 <FL_Syns_Config+0xa0>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <FL_Syns_Config+0xac>)
 8000c34:	f001 feb6 	bl	80029a4 <SX1278_init>
							BandWidth, CR, SX1278_LORA_CRC_EN, 16);
			// Setting LORA For Flashing
			return FL_SUCCESS;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <FL_Syns_Config+0x96>
		}
	}
	return FL_FAIL;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	19cf0e40 	.word	0x19cf0e40
 8000c4c:	00000000 	.word	0x00000000
 8000c50:	20000768 	.word	0x20000768
 8000c54:	20001288 	.word	0x20001288

08000c58 <Sequence_Process>:
//		return FL_SUCCESS ;
//	}
//	return FL_FAIL;
//}
/* Start Send Fragment */
FL_Return_t Sequence_Process(uint8_t* buffer_flashing_data){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(LORA_IF_Stransmit_Fragment_Firmware(&SX1278,(uint8_t*) buffer_flashing_data  ) == LORA_OKE){
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <Sequence_Process+0x24>)
 8000c64:	f002 f848 	bl	8002cf8 <LORA_IF_Stransmit_Fragment_Firmware>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <Sequence_Process+0x1a>
		return FL_SUCCESS;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <Sequence_Process+0x1c>
	}
	return FL_FAIL;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20001288 	.word	0x20001288

08000c80 <Flashing_end>:
/* End Programming process*/
uint8_t Flashing_end(uint8_t unicast_addr ,uint8_t addr_node,  uint8_t* buffer_packet, uint8_t* buffer_resp ,uint8_t ACK_REQ){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	73bb      	strb	r3, [r7, #14]
	uint32_t counter=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
	buffer_packet[0] = unicast_addr ; //unicast addr
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	701a      	strb	r2, [r3, #0]
	buffer_packet[1] = addr_node ; // the  addr
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	701a      	strb	r2, [r3, #0]
	buffer_packet[2] = ACK_REQ;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cac:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CBC_128_Key, AES_CBC_128_IV);
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <Flashing_end+0xac>)
 8000cb0:	491f      	ldr	r1, [pc, #124]	; (8000d30 <Flashing_end+0xb0>)
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <Flashing_end+0xb4>)
 8000cb4:	f002 fd28 	bl	8003708 <AES_init_ctx_iv>
	ret = SX1278_LoRaEntryTx(&SX1278, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000cb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cbc:	2150      	movs	r1, #80	; 0x50
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <Flashing_end+0xb8>)
 8000cc0:	f001 fdd9 	bl	8002876 <SX1278_LoRaEntryTx>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <Flashing_end+0xbc>)
 8000cca:	701a      	strb	r2, [r3, #0]
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8000ccc:	2250      	movs	r2, #80	; 0x50
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <Flashing_end+0xb4>)
 8000cd2:	f002 fedc 	bl	8003a8e <AES_CTR_xcrypt_buffer>
	while(1){
		 ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000cd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cda:	2250      	movs	r2, #80	; 0x50
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	4816      	ldr	r0, [pc, #88]	; (8000d38 <Flashing_end+0xb8>)
 8000ce0:	f001 fe21 	bl	8002926 <SX1278_LoRaTxPacket>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <Flashing_end+0xbc>)
 8000cea:	701a      	strb	r2, [r3, #0]
		 if(ret){
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <Flashing_end+0xbc>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00d      	beq.n	8000d10 <Flashing_end+0x90>
			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <Flashing_end+0xc0>)
 8000cfa:	f004 f886 	bl	8004e0a <HAL_GPIO_TogglePin>
			 return LORA_IF_GetData_End_Frame(&SX1278, (uint8_t*) buffer_resp, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000cfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d02:	2250      	movs	r2, #80	; 0x50
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <Flashing_end+0xb8>)
 8000d08:	f002 f82c 	bl	8002d64 <LORA_IF_GetData_End_Frame>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	e008      	b.n	8000d22 <Flashing_end+0xa2>
		 }
		 else{
			 counter++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
			 if(counter == MAX_TRY_REQ)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d1da      	bne.n	8000cd6 <Flashing_end+0x56>
			 {
				 return -1;
 8000d20:	23ff      	movs	r3, #255	; 0xff
			 }
		}

	}
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000034 	.word	0x20000034
 8000d30:	20000024 	.word	0x20000024
 8000d34:	2000076c 	.word	0x2000076c
 8000d38:	20001288 	.word	0x20001288
 8000d3c:	20000768 	.word	0x20000768
 8000d40:	40011000 	.word	0x40011000

08000d44 <Flashing_Request>:
uint8_t Flashing_Request(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_req ,uint8_t ACK_REQ ,uint8_t ACK_RESP ){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	603a      	str	r2, [r7, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	460b      	mov	r3, r1
 8000d54:	71bb      	strb	r3, [r7, #6]
 8000d56:	4613      	mov	r3, r2
 8000d58:	717b      	strb	r3, [r7, #5]
	uint16_t counter_tx =0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	81fb      	strh	r3, [r7, #14]
	buffer_req[0] =  broadcast_addr; //unicast addr
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = addr_node ; // the  addr
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = ACK_REQ;	// Not use
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	797a      	ldrb	r2, [r7, #5]
 8000d72:	701a      	strb	r2, [r3, #0]
	//Get the current Packet;
	RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8000d74:	f107 030e 	add.w	r3, r7, #14
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fd67 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
	ret = SX1278_LoRaEntryTx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d82:	2110      	movs	r1, #16
 8000d84:	4819      	ldr	r0, [pc, #100]	; (8000dec <Flashing_Request+0xa8>)
 8000d86:	f001 fd76 	bl	8002876 <SX1278_LoRaEntryTx>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <Flashing_Request+0xac>)
 8000d90:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CBC_128_Key, AES_CBC_128_IV);
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <Flashing_Request+0xb0>)
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <Flashing_Request+0xb4>)
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <Flashing_Request+0xb8>)
 8000d98:	f002 fcb6 	bl	8003708 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req, 16);
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	6839      	ldr	r1, [r7, #0]
 8000da0:	4816      	ldr	r0, [pc, #88]	; (8000dfc <Flashing_Request+0xb8>)
 8000da2:	f002 fe74 	bl	8003a8e <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000da6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000daa:	2210      	movs	r2, #16
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <Flashing_Request+0xa8>)
 8000db0:	f001 fdb9 	bl	8002926 <SX1278_LoRaTxPacket>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <Flashing_Request+0xac>)
 8000dba:	701a      	strb	r2, [r3, #0]
	if(ret){
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <Flashing_Request+0xac>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00e      	beq.n	8000de2 <Flashing_Request+0x9e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <Flashing_Request+0xbc>)
 8000dca:	f004 f81e 	bl	8004e0a <HAL_GPIO_TogglePin>
		counter_tx++;
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	81fb      	strh	r3, [r7, #14]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(counter_tx);
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fd01 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
		return 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <Flashing_Request+0xa0>
	}
	return -1;
 8000de2:	23ff      	movs	r3, #255	; 0xff
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20001288 	.word	0x20001288
 8000df0:	20000768 	.word	0x20000768
 8000df4:	20000034 	.word	0x20000034
 8000df8:	20000024 	.word	0x20000024
 8000dfc:	2000076c 	.word	0x2000076c
 8000e00:	40011000 	.word	0x40011000

08000e04 <Wait_Accept_OTA>:
uint8_t Wait_Accept_OTA(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_resp ,uint8_t ACK_RESP ){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	603a      	str	r2, [r7, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	460b      	mov	r3, r1
 8000e14:	71bb      	strb	r3, [r7, #6]
 8000e16:	4613      	mov	r3, r2
 8000e18:	717b      	strb	r3, [r7, #5]
	uint32_t counter_rx = INITIAL_VALUE_ZERO;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
	uint32_t Active_address = INITIAL_VALUE_ZERO;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
	ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000e22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <Wait_Accept_OTA+0xbc>)
 8000e2a:	f001 fc7b 	bl	8002724 <SX1278_LoRaEntryRx>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <Wait_Accept_OTA+0xc0>)
 8000e34:	701a      	strb	r2, [r3, #0]
	while(1){
		ret = SX1278_LoRaRxPacket(&SX1278);
 8000e36:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <Wait_Accept_OTA+0xbc>)
 8000e38:	f001 fcd9 	bl	80027ee <SX1278_LoRaRxPacket>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <Wait_Accept_OTA+0xc0>)
 8000e42:	701a      	strb	r2, [r3, #0]
		AES_init_ctx_iv(&ctx_req, AES_CBC_128_Key, AES_CBC_128_IV);
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <Wait_Accept_OTA+0xc4>)
 8000e46:	4921      	ldr	r1, [pc, #132]	; (8000ecc <Wait_Accept_OTA+0xc8>)
 8000e48:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <Wait_Accept_OTA+0xcc>)
 8000e4a:	f002 fc5d 	bl	8003708 <AES_init_ctx_iv>
		if(ret > 0){
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <Wait_Accept_OTA+0xc0>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d021      	beq.n	8000e9a <Wait_Accept_OTA+0x96>
			ret = SX1278_read(&SX1278, (uint8_t*) buffer_resp, ret);
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <Wait_Accept_OTA+0xc0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <Wait_Accept_OTA+0xbc>)
 8000e60:	f001 fdcd 	bl	80029fe <SX1278_read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <Wait_Accept_OTA+0xc0>)
 8000e6a:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp, 16);
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <Wait_Accept_OTA+0xcc>)
 8000e72:	f002 fe0c 	bl	8003a8e <AES_CTR_xcrypt_buffer>
			if( buffer_resp[1] == addr_node && buffer_resp[2]== ACK_RESP )
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d109      	bne.n	8000e96 <Wait_Accept_OTA+0x92>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3302      	adds	r3, #2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	797a      	ldrb	r2, [r7, #5]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d103      	bne.n	8000e96 <Wait_Accept_OTA+0x92>
				Active_address = buffer_resp[3];
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3303      	adds	r3, #3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	60bb      	str	r3, [r7, #8]

				return 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00d      	b.n	8000eb6 <Wait_Accept_OTA+0xb2>
		}
		else{
			counter_rx++;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
			//delay 1ms
			HAL_Delay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f003 facd 	bl	8004440 <HAL_Delay>
			if(counter_rx == MAX_TRY_REQ)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d1c2      	bne.n	8000e36 <Wait_Accept_OTA+0x32>
			{
				counter_rx = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
				return 0;
 8000eb4:	2300      	movs	r3, #0
			}
		}
	}
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001288 	.word	0x20001288
 8000ec4:	20000768 	.word	0x20000768
 8000ec8:	20000034 	.word	0x20000034
 8000ecc:	20000024 	.word	0x20000024
 8000ed0:	2000076c 	.word	0x2000076c

08000ed4 <FL_u32ReadAddressData>:
		}

		}
}
// Using for testing flashing
uint32_t FL_u32ReadAddressData(uint32_t address){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
	...

08000ef0 <FL_CalculateCRCFWLoRa>:

uint32_t FL_CalculateCRCFWLoRa(uint32_t u32Size_of_Image , uint32_t Active_Addr_Indicate){
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <FL_CalculateCRCFWLoRa+0x6c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <FL_CalculateCRCFWLoRa+0x6c>)
 8000f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f04:	6153      	str	r3, [r2, #20]
	u32Size_of_Image = u32Size_of_Image/4;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <FL_CalculateCRCFWLoRa+0x70>)
 8000f0e:	7a1a      	ldrb	r2, [r3, #8]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	721a      	strb	r2, [r3, #8]
 8000f18:	7a5a      	ldrb	r2, [r3, #9]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	725a      	strb	r2, [r3, #9]
 8000f1e:	7a9a      	ldrb	r2, [r3, #10]
 8000f20:	2200      	movs	r2, #0
 8000f22:	729a      	strb	r2, [r3, #10]
 8000f24:	7ada      	ldrb	r2, [r3, #11]
 8000f26:	2200      	movs	r2, #0
 8000f28:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e00b      	b.n	8000f48 <FL_CalculateCRCFWLoRa+0x58>
		/* Calculate CRC */
		CRC->DR  = FL_u32ReadAddressData(Active_Addr_Indicate);
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <FL_CalculateCRCFWLoRa+0x70>)
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f7ff ffce 	bl	8000ed4 <FL_u32ReadAddressData>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	6023      	str	r3, [r4, #0]
		Active_Addr_Indicate+=4;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	603b      	str	r3, [r7, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3ef      	bcc.n	8000f30 <FL_CalculateCRCFWLoRa+0x40>
	}
	return CRC->DR;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <FL_CalculateCRCFWLoRa+0x70>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40023000 	.word	0x40023000

08000f64 <Send_Start_OTA>:
//}

/*
 * @Request Start OTA
 */
void Send_Start_OTA(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af02      	add	r7, sp, #8
	gl_u8TargetAddr 			= 		INITIAL_VALUE_ZERO;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <Send_Start_OTA+0x38>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u8TargetAddr);
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <Send_Start_OTA+0x38>)
 8000f72:	f000 fbdb 	bl	800172c <Rte_NodeAddr_ReadData>
	if(Flashing_Request(ADDR_BROADCAST, gl_u8TargetAddr, buffer_req, GW_START_OTA , MCU_ACCEPT_RESPONSE) == 1){
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <Send_Start_OTA+0x38>)
 8000f78:	7819      	ldrb	r1, [r3, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <Send_Start_OTA+0x3c>)
 8000f82:	20ff      	movs	r0, #255	; 0xff
 8000f84:	f7ff fede 	bl	8000d44 <Flashing_Request>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <Send_Start_OTA+0x30>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_WAIT_ACCEPT_OTA);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f000 fb00 	bl	8001594 <Rte_SystemState_WriteData>
	}
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000024e 	.word	0x2000024e
 8000fa0:	20000314 	.word	0x20000314

08000fa4 <Wait_Start_OTA>:
/*
 * @Flashing Start
 */
void Wait_Start_OTA(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint16_t counter_tx =0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	80fb      	strh	r3, [r7, #6]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u8TargetAddr);
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <Wait_Start_OTA+0x54>)
 8000fb0:	f000 fbbc 	bl	800172c <Rte_NodeAddr_ReadData>
	if(Wait_Accept_OTA(ADDR_BROADCAST , gl_u8TargetAddr,  (uint8_t*) buffer_resp , MCU_ACCEPT_RESPONSE ) == 1){
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <Wait_Start_OTA+0x54>)
 8000fb6:	7819      	ldrb	r1, [r3, #0]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <Wait_Start_OTA+0x58>)
 8000fbc:	20ff      	movs	r0, #255	; 0xff
 8000fbe:	f7ff ff21 	bl	8000e04 <Wait_Accept_OTA>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d103      	bne.n	8000fd0 <Wait_Start_OTA+0x2c>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_CONFIG_LORA);
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 fae3 	bl	8001594 <Rte_SystemState_WriteData>


	}


}
 8000fce:	e00f      	b.n	8000ff0 <Wait_Start_OTA+0x4c>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 fadf 	bl	8001594 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8000fd6:	1dbb      	adds	r3, r7, #6
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fc37 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
		if(counter_tx == 5){
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d105      	bne.n	8000ff0 <Wait_Start_OTA+0x4c>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fad5 	bl	8001594 <Rte_SystemState_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(GW_OUTOFREQUEST_ERROR);
 8000fea:	201f      	movs	r0, #31
 8000fec:	f000 fbc2 	bl	8001774 <Rte_UI_Error_WriteData>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000024e 	.word	0x2000024e
 8000ffc:	200002b4 	.word	0x200002b4

08001000 <FL_FlashLoRa_INIT>:


void FL_FlashLoRa_INIT(void){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af02      	add	r7, sp, #8
 	gl_u8StatusFlash 			= 		INITIAL_VALUE_ZERO;
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <FL_FlashLoRa_INIT+0x134>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	gl_u16No_Packet_Flash		=		INITZERO_START+1;
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <FL_FlashLoRa_INIT+0x138>)
 800100e:	2201      	movs	r2, #1
 8001010:	801a      	strh	r2, [r3, #0]
	gl_start_array_backup 		= 		INITIAL_VALUE_ZERO;
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <FL_FlashLoRa_INIT+0x13c>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	gl_u32CRCFW 				= 		INITIAL_VALUE_ZERO;
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
	gl_u16AppVer 	   			= 		INITIAL_VALUE_ZERO;
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <FL_FlashLoRa_INIT+0x144>)
 8001020:	2200      	movs	r2, #0
 8001022:	801a      	strh	r2, [r3, #0]
	gl_u32CodeSize 				=		INITIAL_VALUE_ZERO;
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
	gl_u8backup_flag 			=  		INITIAL_VALUE_ZERO;
 800102a:	4b48      	ldr	r3, [pc, #288]	; (800114c <FL_FlashLoRa_INIT+0x14c>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
	buffer_flashing_data        = 		NULL_PTR;
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <FL_FlashLoRa_INIT+0x150>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
	//Calculate Number packet Lora SPI
	//Get Variable Via RTE FW
	//RTE_RUNNABLE_CRC_VALUE_ReadData(&gl_u32CRCFW);
	RTE_RUNNABLE_APP_VER_ReadData(&gl_u16AppVer);
 8001036:	4843      	ldr	r0, [pc, #268]	; (8001144 <FL_FlashLoRa_INIT+0x144>)
 8001038:	f000 fb54 	bl	80016e4 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_CODE_SIZE_ReadData(&gl_u32CodeSize);
 800103c:	4842      	ldr	r0, [pc, #264]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 800103e:	f000 fb63 	bl	8001708 <Rte_CodeSize_ReadData>

	gl_u16NumberPacket_LoRa = (uint16_t)(gl_u32CodeSize/PACKET_64bytes)+1;
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	099b      	lsrs	r3, r3, #6
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <FL_FlashLoRa_INIT+0x154>)
 8001050:	801a      	strh	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u8TargetAddr);
 8001052:	4841      	ldr	r0, [pc, #260]	; (8001158 <FL_FlashLoRa_INIT+0x158>)
 8001054:	f000 fb6a 	bl	800172c <Rte_NodeAddr_ReadData>

	//Calculate CRC
	gl_u32CRCFW = FL_CalculateCRCFWLoRa(gl_u32CodeSize, IMAGE_NEW_FIRMWARE);
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	493f      	ldr	r1, [pc, #252]	; (800115c <FL_FlashLoRa_INIT+0x15c>)
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff46 	bl	8000ef0 <FL_CalculateCRCFWLoRa>
 8001064:	4603      	mov	r3, r0
 8001066:	4a36      	ldr	r2, [pc, #216]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 8001068:	6013      	str	r3, [r2, #0]
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fade 	bl	8001630 <Rte_Crc_WriteData>

	// Get the Infor SW FLASH
	GW_Config_SetUp();
 8001074:	f000 fa5e 	bl	8001534 <GW_Config_SetUp>
	//Start Flashing
	// Pack inform to buffer
	// CRC
	buffer_req[0] = ADDR_BROADCAST;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	701a      	strb	r2, [r3, #0]
	buffer_req[15] = (gl_u32CRCFW>>SHIFT_24_BIT);
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0e1b      	lsrs	r3, r3, #24
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 8001088:	73da      	strb	r2, [r3, #15]
	buffer_req[14] = (gl_u32CRCFW>>SHIFT_16_BIT);
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 8001094:	739a      	strb	r2, [r3, #14]
	buffer_req[13] = (gl_u32CRCFW>>SHIFT_8_BIT);
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010a0:	735a      	strb	r2, [r3, #13]
	buffer_req[12] = (gl_u32CRCFW>>SHIFT_0_BIT);
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <FL_FlashLoRa_INIT+0x140>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010aa:	731a      	strb	r2, [r3, #12]
	// Appl ver
	buffer_req[11] =(gl_u16AppVer>>SHIFT_8_BIT);
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <FL_FlashLoRa_INIT+0x144>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010b8:	72da      	strb	r2, [r3, #11]
	buffer_req[10] =(gl_u16AppVer>>SHIFT_0_BIT);
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <FL_FlashLoRa_INIT+0x144>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010c2:	729a      	strb	r2, [r3, #10]
	// size Code
	buffer_req[9] =(gl_u32CodeSize>>SHIFT_24_BIT);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0e1b      	lsrs	r3, r3, #24
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010ce:	725a      	strb	r2, [r3, #9]
	buffer_req[8] =(gl_u32CodeSize>>SHIFT_16_BIT);
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010da:	721a      	strb	r2, [r3, #8]
	buffer_req[7] =(gl_u32CodeSize>>SHIFT_8_BIT);
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010e6:	71da      	strb	r2, [r3, #7]
	buffer_req[6] =(gl_u32CodeSize>>SHIFT_0_BIT);
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <FL_FlashLoRa_INIT+0x148>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 80010f0:	719a      	strb	r2, [r3, #6]
	// Node Addr
	if(FL_Syns_Config(gl_u8TargetAddr, (uint8_t*) buffer_req, (uint8_t*) buffer_resp, u8SF, u8BW, u8CR ) == FL_SUCCESS){
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <FL_FlashLoRa_INIT+0x158>)
 80010f4:	7818      	ldrb	r0, [r3, #0]
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <FL_FlashLoRa_INIT+0x164>)
 80010f8:	7819      	ldrb	r1, [r3, #0]
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <FL_FlashLoRa_INIT+0x168>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <FL_FlashLoRa_INIT+0x16c>)
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	460b      	mov	r3, r1
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <FL_FlashLoRa_INIT+0x170>)
 800110a:	4915      	ldr	r1, [pc, #84]	; (8001160 <FL_FlashLoRa_INIT+0x160>)
 800110c:	f7ff fd4c 	bl	8000ba8 <FL_Syns_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10b      	bne.n	800112e <FL_FlashLoRa_INIT+0x12e>

		/************Change SYSTEM TO SEND Update********************************/
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8001116:	2006      	movs	r0, #6
 8001118:	f000 fa3c 	bl	8001594 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <FL_FlashLoRa_INIT+0x138>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fb5d 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
		HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f003 f989 	bl	8004440 <HAL_Delay>
	}
	//Flashing_end(ADDR_SLAVE_NODE_1,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, number_packet);
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000024c 	.word	0x2000024c
 8001138:	20000020 	.word	0x20000020
 800113c:	2000024d 	.word	0x2000024d
 8001140:	20000250 	.word	0x20000250
 8001144:	20000254 	.word	0x20000254
 8001148:	20000258 	.word	0x20000258
 800114c:	2000025f 	.word	0x2000025f
 8001150:	20000324 	.word	0x20000324
 8001154:	2000025c 	.word	0x2000025c
 8001158:	2000024e 	.word	0x2000024e
 800115c:	0800d000 	.word	0x0800d000
 8001160:	20000314 	.word	0x20000314
 8001164:	2000082d 	.word	0x2000082d
 8001168:	2000082c 	.word	0x2000082c
 800116c:	2000082e 	.word	0x2000082e
 8001170:	200002b4 	.word	0x200002b4

08001174 <FL_getPacketlost>:
uint16_t FL_getPacketlost(uint8_t* buffer_Rx , uint16_t packetNumber){
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
	uint16_t index =  (packetNumber)/8;
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	81fb      	strh	r3, [r7, #14]
	uint16_t offset = (packetNumber)%8;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	81bb      	strh	r3, [r7, #12]
	return (buffer_Rx[index] >> offset) &0x01;
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	89bb      	ldrh	r3, [r7, #12]
 800119a:	fa42 f303 	asr.w	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	b29b      	uxth	r3, r3
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <FL_PacketLoRaSend_START>:
void FL_PacketLoRaSend_START(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
	uint8_t Local_u8StatusFlash = INITIAL_VALUE_ZERO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	70fb      	strb	r3, [r7, #3]

	// clear buffer
	clearDataBuffer((uint8_t*) buffer_req, 16);
 80011ba:	2110      	movs	r1, #16
 80011bc:	4862      	ldr	r0, [pc, #392]	; (8001348 <FL_PacketLoRaSend_START+0x198>)
 80011be:	f002 ff33 	bl	8004028 <clearDataBuffer>
	//getSizePacket(number_packet, (uint8_t*) buffer_req);
	if(gl_u16NumberPacket_LoRa>=0){
		//Get Data from EnCrypt cybertext
		RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_ReadData(&buffer_flashing_data);
 80011c2:	4862      	ldr	r0, [pc, #392]	; (800134c <FL_PacketLoRaSend_START+0x19c>)
 80011c4:	f000 fa1e 	bl	8001604 <Rte_EncyptedBuffer_ReadData>
		//FL_u128PasteBuffer((uint8_t *)buffer_flashing_data ,gl_u8No_Packet_Flash);
		// Check is missing packet

		if (gl_u16NumberPacket_LoRa >0){
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d017      	beq.n	8001200 <FL_PacketLoRaSend_START+0x50>
			//Send Packet Flashing
			Sequence_Process((uint8_t*)buffer_flashing_data );
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <FL_PacketLoRaSend_START+0x19c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd3f 	bl	8000c58 <Sequence_Process>
			/*Display UI*/
			if(gl_u16NumberPacket_LoRa!=0)
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <FL_PacketLoRaSend_START+0x38>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80011e2:	2006      	movs	r0, #6
 80011e4:	f000 f9d6 	bl	8001594 <Rte_SystemState_WriteData>
			gl_u16NumberPacket_LoRa--;
 80011e8:	4b59      	ldr	r3, [pc, #356]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b57      	ldr	r3, [pc, #348]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 80011f2:	801a      	strh	r2, [r3, #0]
			gl_u16No_Packet_Flash++;
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 80011fe:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u8backup_flag == 1){
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <FL_PacketLoRaSend_START+0x1a8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10d      	bne.n	8001224 <FL_PacketLoRaSend_START+0x74>
			// Get the lost message number
			gl_u16No_Packet_Flash = buffer_number_pack_lost[lost_counter_pos];
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b54      	ldr	r3, [pc, #336]	; (8001360 <FL_PacketLoRaSend_START+0x1b0>)
 8001210:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 8001216:	801a      	strh	r2, [r3, #0]
			lost_counter_pos++;
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b4e      	ldr	r3, [pc, #312]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 8001222:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u16No_Packet_Flash == 0xffff){
 8001224:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	4293      	cmp	r3, r2
 800122e:	d105      	bne.n	800123c <FL_PacketLoRaSend_START+0x8c>
			gl_u8backup_flag = 0;
 8001230:	4b49      	ldr	r3, [pc, #292]	; (8001358 <FL_PacketLoRaSend_START+0x1a8>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
			gl_u16No_Packet_Flash = 0;
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
		}
		gl_u8start_array_backup++;
 800123c:	4b49      	ldr	r3, [pc, #292]	; (8001364 <FL_PacketLoRaSend_START+0x1b4>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b47      	ldr	r3, [pc, #284]	; (8001364 <FL_PacketLoRaSend_START+0x1b4>)
 8001246:	701a      	strb	r2, [r3, #0]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fac7 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
		if(gl_u16NumberPacket_LoRa == 0){
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d172      	bne.n	8001340 <FL_PacketLoRaSend_START+0x190>
			Local_u8StatusFlash = Flashing_end(ADDR_BROADCAST , gl_u8TargetAddr
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <FL_PacketLoRaSend_START+0x1b8>)
 800125c:	7819      	ldrb	r1, [r3, #0]
 800125e:	2339      	movs	r3, #57	; 0x39
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <FL_PacketLoRaSend_START+0x1bc>)
 8001264:	4a42      	ldr	r2, [pc, #264]	; (8001370 <FL_PacketLoRaSend_START+0x1c0>)
 8001266:	20ff      	movs	r0, #255	; 0xff
 8001268:	f7ff fd0a 	bl	8000c80 <Flashing_end>
 800126c:	4603      	mov	r3, r0
 800126e:	70fb      	strb	r3, [r7, #3]
								,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_FINISHING_SENDING_CODE );

			// Write status Flash to LORA RESP
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(Local_u8StatusFlash);
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fac6 	bl	8001804 <Rte_FlagLoRaResp_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(Local_u8StatusFlash);
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fa7a 	bl	8001774 <Rte_UI_Error_WriteData>
			switch (Local_u8StatusFlash) {
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2b77      	cmp	r3, #119	; 0x77
 8001284:	d006      	beq.n	8001294 <FL_PacketLoRaSend_START+0xe4>
 8001286:	2b77      	cmp	r3, #119	; 0x77
 8001288:	dc59      	bgt.n	800133e <FL_PacketLoRaSend_START+0x18e>
 800128a:	2b4f      	cmp	r3, #79	; 0x4f
 800128c:	d053      	beq.n	8001336 <FL_PacketLoRaSend_START+0x186>
 800128e:	2b76      	cmp	r3, #118	; 0x76
 8001290:	d004      	beq.n	800129c <FL_PacketLoRaSend_START+0xec>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
					//HAL_UART_Transmit(&huart2, gl_u8ErrorFlag, 1, HAL_MAX_DELAY);
					break;
				default:
					/*Unknown Error*/
					break;
 8001292:	e054      	b.n	800133e <FL_PacketLoRaSend_START+0x18e>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_DONE_UPDATE);
 8001294:	2008      	movs	r0, #8
 8001296:	f000 f97d 	bl	8001594 <Rte_SystemState_WriteData>
					break;
 800129a:	e051      	b.n	8001340 <FL_PacketLoRaSend_START+0x190>
					lost_counter_pos = 0;
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
					RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa9a 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
					memset(buffer_number_pack_lost , 0xffff , 64);
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012b2:	482b      	ldr	r0, [pc, #172]	; (8001360 <FL_PacketLoRaSend_START+0x1b0>)
 80012b4:	f005 febe 	bl	8007034 <memset>
					uint16_t localcounter = INITIAL_VALUE_ZERO ;
 80012b8:	2300      	movs	r3, #0
 80012ba:	80fb      	strh	r3, [r7, #6]
					copy_Array_BL(u8buffer_Pack_Lost, buffer_packet_Rx,16,64);
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	2210      	movs	r2, #16
 80012c0:	492a      	ldr	r1, [pc, #168]	; (800136c <FL_PacketLoRaSend_START+0x1bc>)
 80012c2:	482c      	ldr	r0, [pc, #176]	; (8001374 <FL_PacketLoRaSend_START+0x1c4>)
 80012c4:	f002 fe8c 	bl	8003fe0 <copy_Array_BL>
					for(uint16_t i=1 ; i < gl_u16No_Packet_Flash-1 ;i++){
 80012c8:	2301      	movs	r3, #1
 80012ca:	80bb      	strh	r3, [r7, #4]
 80012cc:	e014      	b.n	80012f8 <FL_PacketLoRaSend_START+0x148>
						if(!FL_getPacketlost((uint8_t*) u8buffer_Pack_Lost , i )){
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4828      	ldr	r0, [pc, #160]	; (8001374 <FL_PacketLoRaSend_START+0x1c4>)
 80012d4:	f7ff ff4e 	bl	8001174 <FL_getPacketlost>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <FL_PacketLoRaSend_START+0x142>
							buffer_number_pack_lost[localcounter] = i+1;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	88ba      	ldrh	r2, [r7, #4]
 80012e2:	3201      	adds	r2, #1
 80012e4:	b291      	uxth	r1, r2
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <FL_PacketLoRaSend_START+0x1b0>)
 80012e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							localcounter++;
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	3301      	adds	r3, #1
 80012f0:	80fb      	strh	r3, [r7, #6]
					for(uint16_t i=1 ; i < gl_u16No_Packet_Flash-1 ;i++){
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	80bb      	strh	r3, [r7, #4]
 80012f8:	88ba      	ldrh	r2, [r7, #4]
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	3b01      	subs	r3, #1
 8001300:	429a      	cmp	r2, r3
 8001302:	dbe4      	blt.n	80012ce <FL_PacketLoRaSend_START+0x11e>
					gl_u16NumberPacket_LoRa = localcounter;
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <FL_PacketLoRaSend_START+0x1a0>)
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	8013      	strh	r3, [r2, #0]
					gl_u8backup_flag =1;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <FL_PacketLoRaSend_START+0x1a8>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
					lost_counter_pos++;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <FL_PacketLoRaSend_START+0x1ac>)
 800131a:	801a      	strh	r2, [r3, #0]
					gl_u16No_Packet_Flash = buffer_number_pack_lost[INITIAL_VALUE_ZERO];
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <FL_PacketLoRaSend_START+0x1b0>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 8001322:	801a      	strh	r2, [r3, #0]
					RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <FL_PacketLoRaSend_START+0x1a4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa59 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 800132e:	2006      	movs	r0, #6
 8001330:	f000 f930 	bl	8001594 <Rte_SystemState_WriteData>
					break;
 8001334:	e004      	b.n	8001340 <FL_PacketLoRaSend_START+0x190>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f92c 	bl	8001594 <Rte_SystemState_WriteData>
					break;
 800133c:	e000      	b.n	8001340 <FL_PacketLoRaSend_START+0x190>
					break;
 800133e:	bf00      	nop
			}
		}
	}
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000314 	.word	0x20000314
 800134c:	20000324 	.word	0x20000324
 8001350:	2000025c 	.word	0x2000025c
 8001354:	20000020 	.word	0x20000020
 8001358:	2000025f 	.word	0x2000025f
 800135c:	20000260 	.word	0x20000260
 8001360:	20000368 	.word	0x20000368
 8001364:	2000025e 	.word	0x2000025e
 8001368:	2000024e 	.word	0x2000024e
 800136c:	20000264 	.word	0x20000264
 8001370:	200002c4 	.word	0x200002c4
 8001374:	20000328 	.word	0x20000328

08001378 <FL_PacketLoRaDone_OTA>:
void FL_PacketLoRaDone_OTA(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af02      	add	r7, sp, #8
	if(Flashing_end(ADDR_BROADCAST , gl_u8TargetAddr
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <FL_PacketLoRaDone_OTA+0x30>)
 8001380:	7819      	ldrb	r1, [r3, #0]
 8001382:	237c      	movs	r3, #124	; 0x7c
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <FL_PacketLoRaDone_OTA+0x34>)
 8001388:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <FL_PacketLoRaDone_OTA+0x38>)
 800138a:	20ff      	movs	r0, #255	; 0xff
 800138c:	f7ff fc78 	bl	8000c80 <Flashing_end>
 8001390:	4603      	mov	r3, r0
 8001392:	2b77      	cmp	r3, #119	; 0x77
 8001394:	d005      	beq.n	80013a2 <FL_PacketLoRaDone_OTA+0x2a>
									,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_END_OTA ) != MCU_ACKNOWLEDGE_FINISHING){
		RTE_RUNNABLE_PACKET_LORA_REIVECED_WriteData(buffer_packet_Rx);
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <FL_PacketLoRaDone_OTA+0x34>)
 8001398:	f000 fa6a 	bl	8001870 <Rte_PacketLoRaReceived_WriteData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f8f9 	bl	8001594 <Rte_SystemState_WriteData>
	}
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000024e 	.word	0x2000024e
 80013ac:	20000264 	.word	0x20000264
 80013b0:	200002c4 	.word	0x200002c4

080013b4 <GW_Config_GetParameter>:

// Global Parameter
uint8_t u8BW; // Bandwidth
uint8_t u8SF; // Spreading Frequency
uint8_t u8CR; // Coding Rate
uint32_t GW_Config_GetParameter(uint32_t Address){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	return *((volatile uint32_t*)(Address));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
	...

080013cc <GW_voidEraseRestoreConfigPage>:


void GW_voidEraseRestoreConfigPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 80013cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d0:	b0b2      	sub	sp, #200	; 0xc8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <GW_voidEraseRestoreConfigPage+0x124>)
 80013ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013f0:	e031      	b.n	8001456 <GW_voidEraseRestoreConfigPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 80013f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4013      	ands	r3, r2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d017      	beq.n	800144c <GW_voidEraseRestoreConfigPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 800141c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	33c8      	adds	r3, #200	; 0xc8
 8001424:	443b      	add	r3, r7
 8001426:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800142a:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 800142e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001432:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	33c8      	adds	r3, #200	; 0xc8
 800143c:	443b      	add	r3, r7
 800143e:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 8001442:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001446:	3301      	adds	r3, #1
 8001448:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 800144c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001450:	3304      	adds	r3, #4
 8001452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 8001456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800145a:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <GW_voidEraseRestoreConfigPage+0x128>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d9c8      	bls.n	80013f2 <GW_voidEraseRestoreConfigPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_STATUS_GW_CONFIG;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <GW_voidEraseRestoreConfigPage+0x124>)
 800146a:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8001470:	f003 f988 	bl	8004784 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fa68 	bl	8004954 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8001484:	2300      	movs	r3, #0
 8001486:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800148a:	e01a      	b.n	80014c2 <GW_voidEraseRestoreConfigPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 800148c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	33c8      	adds	r3, #200	; 0xc8
 8001494:	443b      	add	r3, r7
 8001496:	f853 1c58 	ldr.w	r1, [r3, #-88]
 800149a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	33c8      	adds	r3, #200	; 0xc8
 80014a2:	443b      	add	r3, r7
 80014a4:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80014a8:	2200      	movs	r2, #0
 80014aa:	4698      	mov	r8, r3
 80014ac:	4691      	mov	r9, r2
 80014ae:	4642      	mov	r2, r8
 80014b0:	464b      	mov	r3, r9
 80014b2:	2002      	movs	r0, #2
 80014b4:	f003 f8f6 	bl	80046a4 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80014b8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80014bc:	3301      	adds	r3, #1
 80014be:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80014c2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80014c6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3de      	bcc.n	800148c <GW_voidEraseRestoreConfigPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	461c      	mov	r4, r3
 80014d4:	4615      	mov	r5, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	462b      	mov	r3, r5
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	2002      	movs	r0, #2
 80014de:	f003 f8e1 	bl	80046a4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80014e2:	f003 f975 	bl	80047d0 <HAL_FLASH_Lock>
}
 80014e6:	bf00      	nop
 80014e8:	37c8      	adds	r7, #200	; 0xc8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014f0:	0801fc00 	.word	0x0801fc00
 80014f4:	0801fc4f 	.word	0x0801fc4f

080014f8 <GW_Config_Init>:


void GW_Config_Init(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 80014fe:	2310      	movs	r3, #16
 8001500:	9305      	str	r3, [sp, #20]
 8001502:	2300      	movs	r3, #0
 8001504:	9304      	str	r3, [sp, #16]
 8001506:	2300      	movs	r3, #0
 8001508:	9303      	str	r3, [sp, #12]
 800150a:	2307      	movs	r3, #7
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	2306      	movs	r3, #6
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2301      	movs	r3, #1
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	a305      	add	r3, pc, #20	; (adr r3, 800152c <GW_Config_Init+0x34>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <GW_Config_Init+0x30>)
 800151e:	f001 fa41 	bl	80029a4 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20001288 	.word	0x20001288
 800152c:	19cf0e40 	.word	0x19cf0e40
 8001530:	00000000 	.word	0x00000000

08001534 <GW_Config_SetUp>:
void GW_Config_SetUp(void){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	uint32_t GW_u32LocalStatus_GW_Config = GW_Config_GetParameter(FLAG_STATUS_GW_CONFIG);
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <GW_Config_SetUp+0x48>)
 800153c:	f7ff ff3a 	bl	80013b4 <GW_Config_GetParameter>
 8001540:	6078      	str	r0, [r7, #4]
	uint32_t GW_u32LocalParameter= GW_Config_GetParameter(FLAG_PARAMETER_GW_CONFIG);
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <GW_Config_SetUp+0x4c>)
 8001544:	f7ff ff36 	bl	80013b4 <GW_Config_GetParameter>
 8001548:	6038      	str	r0, [r7, #0]
	// Get Parameter

	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_RESET ){
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <GW_Config_SetUp+0x24>

		// SET CONFIG Value as Default
		GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG ,GW_CONFIG_PARAMETER_SF_BW_CR_DEFAULT );
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <GW_Config_SetUp+0x50>)
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <GW_Config_SetUp+0x4c>)
 8001554:	f7ff ff3a 	bl	80013cc <GW_voidEraseRestoreConfigPage>
	}
	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_SET ){
		// do nothing
	}
	u8SF = (GW_u32LocalParameter >> SHIFT_16_BIT)& 0xFF ;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <GW_Config_SetUp+0x54>)
 8001560:	701a      	strb	r2, [r3, #0]
	u8BW = (GW_u32LocalParameter >> SHIFT_8_BIT)& 0xFF ;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <GW_Config_SetUp+0x58>)
 800156a:	701a      	strb	r2, [r3, #0]
	u8CR = (GW_u32LocalParameter >> SHIFT_0_BIT)& 0xFF ;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <GW_Config_SetUp+0x5c>)
 8001572:	701a      	strb	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0801fc00 	.word	0x0801fc00
 8001580:	0801fc04 	.word	0x0801fc04
 8001584:	00030803 	.word	0x00030803
 8001588:	2000082d 	.word	0x2000082d
 800158c:	2000082c 	.word	0x2000082c
 8001590:	2000082e 	.word	0x2000082e

08001594 <Rte_SystemState_WriteData>:
static uint8_t *gl_DataBufferLoRaPtr =  NULL_PTR;
/*Port*/
/**************************************************************************/
/*                         Ports Write SystemState                         */
/**************************************************************************/
Std_ReturnType Rte_SystemState_WriteData(uint8_t SystemStateVar){
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
	gl_u8SystemState = SystemStateVar;
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <Rte_SystemState_WriteData+0x20>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	7013      	strb	r3, [r2, #0]
	return retVal;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	2000082f 	.word	0x2000082f

080015b8 <Rte_SystemState_ReadData>:
/**************************************************************************/
/*                         Ports Read SystemState                        */
/**************************************************************************/
Std_ReturnType Rte_SystemState_ReadData(uint8_t *SystemStateVar){
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
	(*SystemStateVar) = gl_u8SystemState;
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <Rte_SystemState_ReadData+0x20>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	701a      	strb	r2, [r3, #0]
	return retVal;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	2000082f 	.word	0x2000082f

080015dc <Rte_EncyptedBuffer_WriteData>:
/**************************************************************************/
/*                         Ports Write Encrypt                            */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_WriteData(uint8_t *EncyptedBufferP2Var){
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <Rte_EncyptedBuffer_WriteData+0x18>
		gl_EncryptDataBufferPtr = EncyptedBufferP2Var;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <Rte_EncyptedBuffer_WriteData+0x24>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6013      	str	r3, [r2, #0]
	return retVal;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000840 	.word	0x20000840

08001604 <Rte_EncyptedBuffer_ReadData>:
	return retVal;
}
/**************************************************************************/
/*                         Ports Read Encrypt                             */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_ReadData(uint8_t **EncyptedBufferP2Var){
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <Rte_EncyptedBuffer_ReadData+0x1a>
		(*EncyptedBufferP2Var) = gl_EncryptDataBufferPtr;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <Rte_EncyptedBuffer_ReadData+0x28>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
	return retVal;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000840 	.word	0x20000840

08001630 <Rte_Crc_WriteData>:


/**************************************************************************/
/*                         Ports Write Update FW                         */
/**************************************************************************/
Std_ReturnType Rte_Crc_WriteData(uint32_t CRCVar){
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
	gl_u32CRCVar = CRCVar;
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <Rte_Crc_WriteData+0x20>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
	return retVal;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000830 	.word	0x20000830

08001654 <Rte_ApplVer_WriteData>:
Std_ReturnType Rte_ApplVer_WriteData(uint16_t ApplVerVar){
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
	gl_u8ApplVerVar = ApplVerVar;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <Rte_ApplVer_WriteData+0x20>)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	8013      	strh	r3, [r2, #0]
	return retVal;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000834 	.word	0x20000834

08001678 <Rte_CodeSize_WriteData>:
Std_ReturnType Rte_CodeSize_WriteData(uint32_t CodeSizeVar){
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
	gl_u32CodeSizeVar = CodeSizeVar;
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <Rte_CodeSize_WriteData+0x20>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
	return retVal;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000838 	.word	0x20000838

0800169c <Rte_NodeAddr_WriteData>:
Std_ReturnType Rte_NodeAddr_WriteData(uint8_t NodeAddrVar){
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
	gl_u8NodeAddrVar = NodeAddrVar;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <Rte_NodeAddr_WriteData+0x20>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	7013      	strb	r3, [r2, #0]
	return retVal;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	2000083c 	.word	0x2000083c

080016c0 <Rte_UpdateProgress_WriteData>:
{
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8HeaderAckFLagVar = HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_WriteData(uint8_t UpdateProgressVar){
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
	gl_u8UpdateProgressVar = UpdateProgressVar;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <Rte_UpdateProgress_WriteData+0x20>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	7013      	strb	r3, [r2, #0]
	return retVal;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	2000083d 	.word	0x2000083d

080016e4 <Rte_ApplVer_ReadData>:
Std_ReturnType Rte_Crc_ReadData(uint32_t *CRCVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*CRCVar) = gl_u32CRCVar;
	return retVal;
}
Std_ReturnType Rte_ApplVer_ReadData(uint16_t *ApplVerVar){
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
	(*ApplVerVar) = gl_u8ApplVerVar;
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <Rte_ApplVer_ReadData+0x20>)
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
	return retVal;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000834 	.word	0x20000834

08001708 <Rte_CodeSize_ReadData>:
Std_ReturnType Rte_CodeSize_ReadData(uint32_t *CodeSizeVar){
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
	(*CodeSizeVar) = gl_u32CodeSizeVar;
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <Rte_CodeSize_ReadData+0x20>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
	return retVal;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000838 	.word	0x20000838

0800172c <Rte_NodeAddr_ReadData>:
Std_ReturnType Rte_NodeAddr_ReadData(uint8_t *NodeAddrVar){
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
	(*NodeAddrVar) = gl_u8NodeAddrVar;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <Rte_NodeAddr_ReadData+0x20>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	2000083c 	.word	0x2000083c

08001750 <Rte_UpdateProgress_ReadData>:
Std_ReturnType Rte_HeaderAckFlag_ReadData(uint8_t *HeaderAckFLagVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*HeaderAckFLagVar) = gl_u8HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_ReadData(uint8_t *UpdateProgressVar){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
	(*UpdateProgressVar) = gl_u8UpdateProgressVar;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <Rte_UpdateProgress_ReadData+0x20>)
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	2000083d 	.word	0x2000083d

08001774 <Rte_UI_Error_WriteData>:
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8UserResponseVar = UserResponseVar;
	return retVal;
}

Std_ReturnType Rte_UI_Error_WriteData(uint8_t UIErrorVar){
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
	gl_u8UIErrorVar = UIErrorVar;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <Rte_UI_Error_WriteData+0x20>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000844 	.word	0x20000844

08001798 <Rte_UI_Error_ReadData>:

/**************************************************************************/
/*                        Ports  Read UI						 		  */
/**************************************************************************/
Std_ReturnType Rte_UI_Error_ReadData(uint8_t *UIErrorVar ){
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
	(*UIErrorVar) = gl_u8UIErrorVar;
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <Rte_UI_Error_ReadData+0x20>)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	701a      	strb	r2, [r3, #0]
	return retVal;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000844 	.word	0x20000844

080017bc <Rte_UserResponse_ReadData>:
Std_ReturnType Rte_UserResponse_ReadData(uint8_t *UserResponseVar){
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
	(*UserResponseVar) = gl_u8UserResponseVar;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <Rte_UserResponse_ReadData+0x20>)
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	701a      	strb	r2, [r3, #0]
	return retVal;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	2000083e 	.word	0x2000083e

080017e0 <Rte_PacketSendLoraNum_WriteData>:
/**************************************************************************/
/*                        Ports  Write num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_WriteData(uint16_t NumPacketLoraFWVar){
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
	gl_u16NumPacketLoraFWVar = NumPacketLoraFWVar;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <Rte_PacketSendLoraNum_WriteData+0x20>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	8013      	strh	r3, [r2, #0]
	return retVal;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000846 	.word	0x20000846

08001804 <Rte_FlagLoRaResp_WriteData>:

Std_ReturnType Rte_FlagLoRaResp_WriteData(uint8_t FlagLoRaRespVar){
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRaRespVar = FlagLoRaRespVar;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <Rte_FlagLoRaResp_WriteData+0x20>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000848 	.word	0x20000848

08001828 <Rte_FlagConfigLoRA_WriteData>:

Std_ReturnType Rte_FlagConfigLoRA_WriteData(uint32_t FlagLoraConfigVar){
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoraConfigVar = FlagLoraConfigVar;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <Rte_FlagConfigLoRA_WriteData+0x20>)
 800183a:	701a      	strb	r2, [r3, #0]
	return retVal;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000849 	.word	0x20000849

0800184c <Rte_PacketSendLoraNum_ReadData>:


/**************************************************************************/
/*                        Ports  Read num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_ReadData(uint16_t *NumPacketLoraFWVar){
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
	(*NumPacketLoraFWVar) = gl_u16NumPacketLoraFWVar;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <Rte_PacketSendLoraNum_ReadData+0x20>)
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	801a      	strh	r2, [r3, #0]
	return retVal;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000846 	.word	0x20000846

08001870 <Rte_PacketLoRaReceived_WriteData>:
}

/**************************************************************************/
/*                         Ports Write Received Packet LoRa            */
/**************************************************************************/
Std_ReturnType Rte_PacketLoRaReceived_WriteData(uint8_t *BufferLoRaReceivedP2Var ){
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
	gl_DataBufferLoRaPtr= BufferLoRaReceivedP2Var;
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <Rte_PacketLoRaReceived_WriteData+0x20>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
	return retVal;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000084c 	.word	0x2000084c

08001894 <ReceiveFWUpdate_Init>:

/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveFWUpdate_Init(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	gl_u8NodeAddr 						= INITIAL_VALUE_ZERO;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <ReceiveFWUpdate_Init+0x70>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	gl_u8TypeFlag 						= INITIAL_VALUE_ZERO;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <ReceiveFWUpdate_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
	gl_u32ImgSize 						= INITIAL_VALUE_ZERO;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <ReceiveFWUpdate_Init+0x78>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
	gl_u8AppVersion 					= INITIAL_VALUE_ZERO;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <ReceiveFWUpdate_Init+0x7c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	gl_u32CRCValue 						= INITIAL_VALUE_ZERO;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <ReceiveFWUpdate_Init+0x80>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	gl_u32ConfigLoRa 					= INITIAL_VALUE_ZERO;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <ReceiveFWUpdate_Init+0x84>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	gl_u8SystemState 					= SYS_IDLE;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <ReceiveFWUpdate_Init+0x88>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
	gl_RXUartInternal_State 			= RX_IDLE;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <ReceiveFWUpdate_Init+0x8c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	gl_u8RxUserResp						= INITIAL_VALUE_ZERO;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <ReceiveFWUpdate_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	gl_u8DonwLoadPercentProogess 		= INITIAL_VALUE_ZERO;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <ReceiveFWUpdate_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	gl_u32Remain_Byte					= INITIAL_VALUE_ZERO;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <ReceiveFWUpdate_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	gl_u8DownLoadUpdateProgress 		= INITIAL_VALUE_ZERO;
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <ReceiveFWUpdate_Init+0x9c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
	gl_u8NumberPacket_Uart 				= INITIAL_VALUE_ZERO;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <ReceiveFWUpdate_Init+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
	gl_u16NumberPacket_LoRa 				= INITIAL_VALUE_ZERO;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <ReceiveFWUpdate_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	801a      	strh	r2, [r3, #0]
	gl_u32ReceiveBytes 					= INITIAL_VALUE_ZERO;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <ReceiveFWUpdate_Init+0xa8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	4912      	ldr	r1, [pc, #72]	; (8001940 <ReceiveFWUpdate_Init+0xac>)
 80018f6:	4813      	ldr	r0, [pc, #76]	; (8001944 <ReceiveFWUpdate_Init+0xb0>)
 80018f8:	f005 fa21 	bl	8006d3e <HAL_UART_Receive_IT>
	F_voidInitVariables();
 80018fc:	f7ff f8b4 	bl	8000a68 <F_voidInitVariables>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000850 	.word	0x20000850
 8001908:	20000851 	.word	0x20000851
 800190c:	20000854 	.word	0x20000854
 8001910:	20000858 	.word	0x20000858
 8001914:	2000085c 	.word	0x2000085c
 8001918:	20000860 	.word	0x20000860
 800191c:	20000c99 	.word	0x20000c99
 8001920:	20000864 	.word	0x20000864
 8001924:	20000c98 	.word	0x20000c98
 8001928:	20000c91 	.word	0x20000c91
 800192c:	20000c8c 	.word	0x20000c8c
 8001930:	20000c90 	.word	0x20000c90
 8001934:	20000c89 	.word	0x20000c89
 8001938:	20000c8a 	.word	0x20000c8a
 800193c:	20000c94 	.word	0x20000c94
 8001940:	20000c68 	.word	0x20000c68
 8001944:	20001224 	.word	0x20001224

08001948 <ReceiveFWUpdate_MainFunc>:
void ReceiveFWUpdate_MainFunc(void){
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
	switch (gl_RXUartInternal_State) {
 800194e:	4bad      	ldr	r3, [pc, #692]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	f200 81fe 	bhi.w	8001d54 <ReceiveFWUpdate_MainFunc+0x40c>
 8001958:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <ReceiveFWUpdate_MainFunc+0x18>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001995 	.word	0x08001995
 8001964:	080019c9 	.word	0x080019c9
 8001968:	08001a2b 	.word	0x08001a2b
 800196c:	08001d55 	.word	0x08001d55
 8001970:	08001b95 	.word	0x08001b95
 8001974:	08001d55 	.word	0x08001d55
 8001978:	08001d55 	.word	0x08001d55
 800197c:	08001d55 	.word	0x08001d55
 8001980:	08001d55 	.word	0x08001d55
 8001984:	08001d55 	.word	0x08001d55
 8001988:	08001d55 	.word	0x08001d55
 800198c:	08001ce3 	.word	0x08001ce3
 8001990:	080019ef 	.word	0x080019ef
		case RX_IDLE:
		{
			uint8_t retVal = RTE_RUNNABLE_USER_RESPONSE_ReadData(&gl_u8RxUserResp);
 8001994:	489c      	ldr	r0, [pc, #624]	; (8001c08 <ReceiveFWUpdate_MainFunc+0x2c0>)
 8001996:	f7ff ff11 	bl	80017bc <Rte_UserResponse_ReadData>
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
			if(RTE_E_OKE == retVal){
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 81d9 	bne.w	8001d58 <ReceiveFWUpdate_MainFunc+0x410>
				if(gl_u8RxUserResp == ACCEPT_UPDATE){
 80019a6:	4b98      	ldr	r3, [pc, #608]	; (8001c08 <ReceiveFWUpdate_MainFunc+0x2c0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <ReceiveFWUpdate_MainFunc+0x6e>
					gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 80019ae:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
				}
				else{
					/* Update State normal in hear*/
				}
			}
			break;
 80019b4:	e1d0      	b.n	8001d58 <ReceiveFWUpdate_MainFunc+0x410>
				else if(gl_u8RxUserResp == REFUSE_UPDATE){
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <ReceiveFWUpdate_MainFunc+0x2c0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	f040 81cc 	bne.w	8001d58 <ReceiveFWUpdate_MainFunc+0x410>
					gl_RXUartInternal_State = RX_DENY_UPDATE;
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	701a      	strb	r2, [r3, #0]
			break;
 80019c6:	e1c7      	b.n	8001d58 <ReceiveFWUpdate_MainFunc+0x410>
		}
		case RX_ACCEPT_UPDATE :
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;
 80019c8:	4b90      	ldr	r3, [pc, #576]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 80019ca:	2205      	movs	r2, #5
 80019cc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80019ce:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2201      	movs	r2, #1
 80019da:	488d      	ldr	r0, [pc, #564]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 80019dc:	f005 f89a 	bl	8006b14 <HAL_UART_Transmit>
			// Erase APPLU address to Update
			F_Erase_Image(IMAGE_NEW_FIRMWARE);
 80019e0:	488c      	ldr	r0, [pc, #560]	; (8001c14 <ReceiveFWUpdate_MainFunc+0x2cc>)
 80019e2:	f7ff f88d 	bl	8000b00 <F_Erase_Image>
			gl_RXUartInternal_State = RX_RECEIVED_PACKET;
 80019e6:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	701a      	strb	r2, [r3, #0]
			break;
 80019ec:	e1b5      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
		}
		case RX_DENY_UPDATE:
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_DENY;
 80019ee:	4b87      	ldr	r3, [pc, #540]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80019f4:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	2201      	movs	r2, #1
 8001a00:	4883      	ldr	r0, [pc, #524]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001a02:	f005 f887 	bl	8006b14 <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_u8RxUserResp = INITIAL_VALUE_ZERO;
 8001a06:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <ReceiveFWUpdate_MainFunc+0x2c0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fdc1 	bl	8001594 <Rte_SystemState_WriteData>
			// Enable Uart Interrupt hear
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001a12:	4b7f      	ldr	r3, [pc, #508]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	4b7d      	ldr	r3, [pc, #500]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State = RX_IDLE;
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
			break;
 8001a28:	e197      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
		}
		case RX_RECEIVED_HEADER:
		{
			/* Get Request ESP send header */
			gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_HEADER_FLAG;
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4874      	ldr	r0, [pc, #464]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001a3e:	f005 f869 	bl	8006b14 <HAL_UART_Transmit>
			/*Receive Header file*/
			HAL_UART_Receive(&huart2, gl_u8RXBuffer_Header, HEADER_CONFIG_SIZE, HAL_MAX_DELAY);
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	2220      	movs	r2, #32
 8001a48:	4973      	ldr	r1, [pc, #460]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a4a:	4871      	ldr	r0, [pc, #452]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001a4c:	f005 f8e5 	bl	8006c1a <HAL_UART_Receive>
			/*Put Information FW to RTE*/
			gl_u32CRCValue =(gl_u8RXBuffer_Header[15] >> SHIFT_24_BIT) | (gl_u8RXBuffer_Header[14]  >>SHIFT_16_BIT)
 8001a50:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a52:	7bdb      	ldrb	r3, [r3, #15]
 8001a54:	161a      	asrs	r2, r3, #24
 8001a56:	4b70      	ldr	r3, [pc, #448]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a58:	7b9b      	ldrb	r3, [r3, #14]
 8001a5a:	141b      	asrs	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
						   |(gl_u8RXBuffer_Header[13]>>  SHIFT_8_BIT) | (gl_u8RXBuffer_Header[12] >> SHIFT_0_BIT);
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a60:	7b5b      	ldrb	r3, [r3, #13]
 8001a62:	121b      	asrs	r3, r3, #8
 8001a64:	4313      	orrs	r3, r2
 8001a66:	4a6c      	ldr	r2, [pc, #432]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a68:	7b12      	ldrb	r2, [r2, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	461a      	mov	r2, r3
			gl_u32CRCValue =(gl_u8RXBuffer_Header[15] >> SHIFT_24_BIT) | (gl_u8RXBuffer_Header[14]  >>SHIFT_16_BIT)
 8001a6e:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <ReceiveFWUpdate_MainFunc+0x2d4>)
 8001a70:	601a      	str	r2, [r3, #0]
			gl_u32ImgSize =(gl_u8RXBuffer_Header[7]>>  SHIFT_24_BIT) | (gl_u8RXBuffer_Header[6] >> SHIFT_16_BIT)
 8001a72:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a74:	79db      	ldrb	r3, [r3, #7]
 8001a76:	161a      	asrs	r2, r3, #24
 8001a78:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a7a:	799b      	ldrb	r3, [r3, #6]
 8001a7c:	141b      	asrs	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
						  |(gl_u8RXBuffer_Header[5]>>  SHIFT_8_BIT) | (gl_u8RXBuffer_Header[4] >> SHIFT_0_BIT) ;
 8001a80:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	121b      	asrs	r3, r3, #8
 8001a86:	4313      	orrs	r3, r2
 8001a88:	4a63      	ldr	r2, [pc, #396]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a8a:	7912      	ldrb	r2, [r2, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	461a      	mov	r2, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[7]>>  SHIFT_24_BIT) | (gl_u8RXBuffer_Header[6] >> SHIFT_16_BIT)
 8001a90:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <ReceiveFWUpdate_MainFunc+0x2d8>)
 8001a92:	601a      	str	r2, [r3, #0]
			gl_u8AppVersion = (gl_u8RXBuffer_Header[9]>>  SHIFT_8_BIT) | (gl_u8RXBuffer_Header[8] >> SHIFT_0_BIT);
 8001a94:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a96:	7a5b      	ldrb	r3, [r3, #9]
 8001a98:	121b      	asrs	r3, r3, #8
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001a9e:	7a1b      	ldrb	r3, [r3, #8]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <ReceiveFWUpdate_MainFunc+0x2dc>)
 8001aaa:	701a      	strb	r2, [r3, #0]
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[19]>>  SHIFT_24_BIT) | (gl_u8RXBuffer_Header[18] >> SHIFT_16_BIT)
 8001aac:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001aae:	7cdb      	ldrb	r3, [r3, #19]
 8001ab0:	161a      	asrs	r2, r3, #24
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001ab4:	7c9b      	ldrb	r3, [r3, #18]
 8001ab6:	141b      	asrs	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
							 |(gl_u8RXBuffer_Header[17]>>  SHIFT_8_BIT)  | (gl_u8RXBuffer_Header[16] >> SHIFT_0_BIT);
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001abc:	7c5b      	ldrb	r3, [r3, #17]
 8001abe:	121b      	asrs	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001ac4:	7c12      	ldrb	r2, [r2, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	461a      	mov	r2, r3
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[19]>>  SHIFT_24_BIT) | (gl_u8RXBuffer_Header[18] >> SHIFT_16_BIT)
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <ReceiveFWUpdate_MainFunc+0x2e0>)
 8001acc:	601a      	str	r2, [r3, #0]
			//Update Parameter
			F_FlashWordToAddress(FLAG_PARAMETER_GW_CONFIG, gl_u32ConfigLoRa);
 8001ace:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <ReceiveFWUpdate_MainFunc+0x2e0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4855      	ldr	r0, [pc, #340]	; (8001c2c <ReceiveFWUpdate_MainFunc+0x2e4>)
 8001ad6:	f7ff f84d 	bl	8000b74 <F_FlashWordToAddress>
			gl_u8NodeAddr =(gl_u8RXBuffer_Header[0]>>  SHIFT_8_BIT) | (gl_u8RXBuffer_Header[1] >> SHIFT_0_BIT);
 8001ada:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <ReceiveFWUpdate_MainFunc+0x2e8>)
 8001af0:	701a      	strb	r2, [r3, #0]
			gl_u8RXBuffer_Flag_Req_Bytes = (gl_u8RXBuffer_Header[3]>>  SHIFT_0_BIT);
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <ReceiveFWUpdate_MainFunc+0x2d0>)
 8001af4:	78da      	ldrb	r2, [r3, #3]
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001af8:	701a      	strb	r2, [r3, #0]
			if(gl_u8RXBuffer_Flag_Req_Bytes == HEADER_FLAG_FW_INFO ){
 8001afa:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d13b      	bne.n	8001b7a <ReceiveFWUpdate_MainFunc+0x232>
				RTE_RUNNABLE_APP_VER_WriteData(gl_u8AppVersion);
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <ReceiveFWUpdate_MainFunc+0x2dc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fda3 	bl	8001654 <Rte_ApplVer_WriteData>
				RTE_RUNNABLE_CODE_SIZE_WriteData(gl_u32ImgSize);
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <ReceiveFWUpdate_MainFunc+0x2d8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fdb0 	bl	8001678 <Rte_CodeSize_WriteData>
				RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCValue);
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <ReceiveFWUpdate_MainFunc+0x2d4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd87 	bl	8001630 <Rte_Crc_WriteData>
				RTE_RUNNABLE_NODE_ADDR_WriteData(gl_u8NodeAddr);
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <ReceiveFWUpdate_MainFunc+0x2e8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fdb8 	bl	800169c <Rte_NodeAddr_WriteData>
				RTE_RUNNABLE_CONFIG_LORA_WriteData(gl_u32ConfigLoRa);
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <ReceiveFWUpdate_MainFunc+0x2e0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe79 	bl	8001828 <Rte_FlagConfigLoRA_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
				//Calculate Number packet Rx Uart
				gl_u8NumberPacket_Uart = (uint8_t)gl_u32ImgSize/PACKET_1024bytes;
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <ReceiveFWUpdate_MainFunc+0x2d8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <ReceiveFWUpdate_MainFunc+0x2ec>)
 8001b48:	701a      	strb	r2, [r3, #0]
				RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16NumberPacket_LoRa);
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <ReceiveFWUpdate_MainFunc+0x2f0>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe46 	bl	80017e0 <Rte_PacketSendLoraNum_WriteData>
				gl_u8RXBuffer_Flag_Req_Bytes = HEADER_FLAG_RECEIVED;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	2201      	movs	r2, #1
 8001b66:	482a      	ldr	r0, [pc, #168]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001b68:	f004 ffd4 	bl	8006b14 <HAL_UART_Transmit>
				/*Change State System*/
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_NEW_UPDATE_REQ);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7ff fd11 	bl	8001594 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_IDLE;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
			else{
				/*Invalid Request*/
				gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
				HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
			}
			break;
 8001b78:	e0ef      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
				gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4820      	ldr	r0, [pc, #128]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001b8e:	f004 ffc1 	bl	8006b14 <HAL_UART_Transmit>
			break;
 8001b92:	e0e2      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
		}
		case RX_RECEIVED_PACKET:
		{
			gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b96:	220b      	movs	r2, #11
 8001b98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	481a      	ldr	r0, [pc, #104]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001ba8:	f004 ffb4 	bl	8006b14 <HAL_UART_Transmit>
			if(gl_u8NumberPacket_Uart > 0)
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <ReceiveFWUpdate_MainFunc+0x2ec>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d049      	beq.n	8001c48 <ReceiveFWUpdate_MainFunc+0x300>
			{
				HAL_UART_Receive(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbc:	491f      	ldr	r1, [pc, #124]	; (8001c3c <ReceiveFWUpdate_MainFunc+0x2f4>)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001bc0:	f005 f82b 	bl	8006c1a <HAL_UART_Receive>
				gl_u8NumberPacket_Uart--;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <ReceiveFWUpdate_MainFunc+0x2ec>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <ReceiveFWUpdate_MainFunc+0x2ec>)
 8001bce:	701a      	strb	r2, [r3, #0]
				//Flash to block
				F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <ReceiveFWUpdate_MainFunc+0x2f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4818      	ldr	r0, [pc, #96]	; (8001c3c <ReceiveFWUpdate_MainFunc+0x2f4>)
 8001bda:	f7fe ff53 	bl	8000a84 <F_FlashBlockToAddress>
				gl_u8RXBuffer_Flag_Req_Bytes = GATEWAY_ACCEPT_PACKET;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001be0:	220a      	movs	r2, #10
 8001be2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <ReceiveFWUpdate_MainFunc+0x2c4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8001bf2:	f004 ff8f 	bl	8006b14 <HAL_UART_Transmit>
				gl_u32ReceiveBytes += PACKET_1024bytes;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <ReceiveFWUpdate_MainFunc+0x2fc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <ReceiveFWUpdate_MainFunc+0x2fc>)
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e042      	b.n	8001c8a <ReceiveFWUpdate_MainFunc+0x342>
 8001c04:	20000864 	.word	0x20000864
 8001c08:	20000c98 	.word	0x20000c98
 8001c0c:	20000c88 	.word	0x20000c88
 8001c10:	20001224 	.word	0x20001224
 8001c14:	0800d000 	.word	0x0800d000
 8001c18:	20000c68 	.word	0x20000c68
 8001c1c:	2000085c 	.word	0x2000085c
 8001c20:	20000854 	.word	0x20000854
 8001c24:	20000858 	.word	0x20000858
 8001c28:	20000860 	.word	0x20000860
 8001c2c:	0801fc04 	.word	0x0801fc04
 8001c30:	20000850 	.word	0x20000850
 8001c34:	20000c89 	.word	0x20000c89
 8001c38:	20000c8a 	.word	0x20000c8a
 8001c3c:	20000868 	.word	0x20000868
 8001c40:	20000c8c 	.word	0x20000c8c
 8001c44:	20000c94 	.word	0x20000c94
			}
			else if((gl_u8NumberPacket_Uart == 0)&&(gl_u32Remain_Byte > 0))
 8001c48:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <ReceiveFWUpdate_MainFunc+0x41c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11c      	bne.n	8001c8a <ReceiveFWUpdate_MainFunc+0x342>
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <ReceiveFWUpdate_MainFunc+0x420>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d018      	beq.n	8001c8a <ReceiveFWUpdate_MainFunc+0x342>
			{
				HAL_UART_Receive(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	4942      	ldr	r1, [pc, #264]	; (8001d6c <ReceiveFWUpdate_MainFunc+0x424>)
 8001c62:	4843      	ldr	r0, [pc, #268]	; (8001d70 <ReceiveFWUpdate_MainFunc+0x428>)
 8001c64:	f004 ffd9 	bl	8006c1a <HAL_UART_Receive>
				F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <ReceiveFWUpdate_MainFunc+0x420>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	483e      	ldr	r0, [pc, #248]	; (8001d6c <ReceiveFWUpdate_MainFunc+0x424>)
 8001c72:	f7fe ff07 	bl	8000a84 <F_FlashBlockToAddress>
				gl_u8RXBuffer_Flag_Req_Bytes = RX_DONE_INSTALL_FW;
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <ReceiveFWUpdate_MainFunc+0x42c>)
 8001c78:	2206      	movs	r2, #6
 8001c7a:	701a      	strb	r2, [r3, #0]
				gl_u32ReceiveBytes += gl_u32Remain_Byte;
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <ReceiveFWUpdate_MainFunc+0x430>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <ReceiveFWUpdate_MainFunc+0x420>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <ReceiveFWUpdate_MainFunc+0x430>)
 8001c88:	6013      	str	r3, [r2, #0]
			}
			else{
				/*ERROR*/
			}
			/*Calculate Progress*/
			gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <ReceiveFWUpdate_MainFunc+0x430>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fb14 	bl	80002bc <__aeabi_ui2f>
 8001c94:	4604      	mov	r4, r0
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <ReceiveFWUpdate_MainFunc+0x434>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fb0e 	bl	80002bc <__aeabi_ui2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7fe fc15 	bl	80004d4 <__aeabi_fdiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fcad 	bl	800060c <__aeabi_f2uiz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <ReceiveFWUpdate_MainFunc+0x438>)
 8001cb8:	701a      	strb	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = gl_u8DonwLoadPercentProogess*100;
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <ReceiveFWUpdate_MainFunc+0x438>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	0091      	lsls	r1, r2, #2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <ReceiveFWUpdate_MainFunc+0x43c>)
 8001cd4:	701a      	strb	r2, [r3, #0]
			/*Write to RTE */
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <ReceiveFWUpdate_MainFunc+0x43c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fcf0 	bl	80016c0 <Rte_UpdateProgress_WriteData>


			break;
 8001ce0:	e03b      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
		}

		case RX_END_STATE:
		{
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8001ce2:	2006      	movs	r0, #6
 8001ce4:	f7ff fc56 	bl	8001594 <Rte_SystemState_WriteData>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <ReceiveFWUpdate_MainFunc+0x428>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <ReceiveFWUpdate_MainFunc+0x428>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]
			gl_u8NodeAddr = INITIAL_VALUE_ZERO;
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <ReceiveFWUpdate_MainFunc+0x440>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
			gl_u8TypeFlag = INITIAL_VALUE_ZERO;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <ReceiveFWUpdate_MainFunc+0x444>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			gl_u32ImgSize =INITIAL_VALUE_ZERO;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <ReceiveFWUpdate_MainFunc+0x434>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
			gl_u8AppVersion = INITIAL_VALUE_ZERO;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <ReceiveFWUpdate_MainFunc+0x448>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			gl_u32CRCValue = INITIAL_VALUE_ZERO ;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
			gl_u8SystemState = SYS_IDLE;
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <ReceiveFWUpdate_MainFunc+0x450>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			gl_RXUartInternal_State = RX_IDLE;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <ReceiveFWUpdate_MainFunc+0x454>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
			gl_u8RxUserResp=INITIAL_VALUE_ZERO;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <ReceiveFWUpdate_MainFunc+0x458>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
			gl_u8DonwLoadPercentProogess =INITIAL_VALUE_ZERO;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <ReceiveFWUpdate_MainFunc+0x438>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
			gl_u32Remain_Byte= INITIAL_VALUE_ZERO;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <ReceiveFWUpdate_MainFunc+0x420>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = INITIAL_VALUE_ZERO;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <ReceiveFWUpdate_MainFunc+0x43c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart = INITIAL_VALUE_ZERO;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <ReceiveFWUpdate_MainFunc+0x41c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
			gl_u16NumberPacket_LoRa = INITIAL_VALUE_ZERO;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <ReceiveFWUpdate_MainFunc+0x45c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
			gl_u32ReceiveBytes = INITIAL_VALUE_ZERO;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <ReceiveFWUpdate_MainFunc+0x430>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(INITIAL_VALUE_ZERO);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff fcb7 	bl	80016c0 <Rte_UpdateProgress_WriteData>
			break;
 8001d52:	e002      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
		}
		default:
			break;
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <ReceiveFWUpdate_MainFunc+0x412>
			break;
 8001d58:	bf00      	nop
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000c89 	.word	0x20000c89
 8001d68:	20000c8c 	.word	0x20000c8c
 8001d6c:	20000868 	.word	0x20000868
 8001d70:	20001224 	.word	0x20001224
 8001d74:	20000c88 	.word	0x20000c88
 8001d78:	20000c94 	.word	0x20000c94
 8001d7c:	20000854 	.word	0x20000854
 8001d80:	20000c91 	.word	0x20000c91
 8001d84:	20000c90 	.word	0x20000c90
 8001d88:	20000850 	.word	0x20000850
 8001d8c:	20000851 	.word	0x20000851
 8001d90:	20000858 	.word	0x20000858
 8001d94:	2000085c 	.word	0x2000085c
 8001d98:	20000c99 	.word	0x20000c99
 8001d9c:	20000864 	.word	0x20000864
 8001da0:	20000c98 	.word	0x20000c98
 8001da4:	20000c8a 	.word	0x20000c8a

08001da8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001dae:	f000 fa27 	bl	8002200 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001db2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001db6:	2201      	movs	r2, #1
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	485b      	ldr	r0, [pc, #364]	; (8001f28 <SSD1306_Init+0x180>)
 8001dbc:	f003 fa98 	bl	80052f0 <HAL_I2C_IsDeviceReady>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e0a9      	b.n	8001f1e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001dca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001dce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dd0:	e002      	b.n	8001dd8 <SSD1306_Init+0x30>
		p--;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f9      	bne.n	8001dd2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001dde:	22ae      	movs	r2, #174	; 0xae
 8001de0:	2100      	movs	r1, #0
 8001de2:	2078      	movs	r0, #120	; 0x78
 8001de4:	f000 fa86 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001de8:	2220      	movs	r2, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	2078      	movs	r0, #120	; 0x78
 8001dee:	f000 fa81 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001df2:	2210      	movs	r2, #16
 8001df4:	2100      	movs	r1, #0
 8001df6:	2078      	movs	r0, #120	; 0x78
 8001df8:	f000 fa7c 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dfc:	22b0      	movs	r2, #176	; 0xb0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2078      	movs	r0, #120	; 0x78
 8001e02:	f000 fa77 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e06:	22c8      	movs	r2, #200	; 0xc8
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2078      	movs	r0, #120	; 0x78
 8001e0c:	f000 fa72 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2078      	movs	r0, #120	; 0x78
 8001e16:	f000 fa6d 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2078      	movs	r0, #120	; 0x78
 8001e20:	f000 fa68 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	2078      	movs	r0, #120	; 0x78
 8001e2a:	f000 fa63 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e2e:	2281      	movs	r2, #129	; 0x81
 8001e30:	2100      	movs	r1, #0
 8001e32:	2078      	movs	r0, #120	; 0x78
 8001e34:	f000 fa5e 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2078      	movs	r0, #120	; 0x78
 8001e3e:	f000 fa59 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e42:	22a1      	movs	r2, #161	; 0xa1
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	; 0x78
 8001e48:	f000 fa54 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e4c:	22a6      	movs	r2, #166	; 0xa6
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	; 0x78
 8001e52:	f000 fa4f 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e56:	22a8      	movs	r2, #168	; 0xa8
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	; 0x78
 8001e5c:	f000 fa4a 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e60:	223f      	movs	r2, #63	; 0x3f
 8001e62:	2100      	movs	r1, #0
 8001e64:	2078      	movs	r0, #120	; 0x78
 8001e66:	f000 fa45 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e6a:	22a4      	movs	r2, #164	; 0xa4
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2078      	movs	r0, #120	; 0x78
 8001e70:	f000 fa40 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e74:	22d3      	movs	r2, #211	; 0xd3
 8001e76:	2100      	movs	r1, #0
 8001e78:	2078      	movs	r0, #120	; 0x78
 8001e7a:	f000 fa3b 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2078      	movs	r0, #120	; 0x78
 8001e84:	f000 fa36 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e88:	22d5      	movs	r2, #213	; 0xd5
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2078      	movs	r0, #120	; 0x78
 8001e8e:	f000 fa31 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e92:	22f0      	movs	r2, #240	; 0xf0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	; 0x78
 8001e98:	f000 fa2c 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e9c:	22d9      	movs	r2, #217	; 0xd9
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	; 0x78
 8001ea2:	f000 fa27 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ea6:	2222      	movs	r2, #34	; 0x22
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	; 0x78
 8001eac:	f000 fa22 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001eb0:	22da      	movs	r2, #218	; 0xda
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2078      	movs	r0, #120	; 0x78
 8001eb6:	f000 fa1d 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001eba:	2212      	movs	r2, #18
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2078      	movs	r0, #120	; 0x78
 8001ec0:	f000 fa18 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ec4:	22db      	movs	r2, #219	; 0xdb
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2078      	movs	r0, #120	; 0x78
 8001eca:	f000 fa13 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ece:	2220      	movs	r2, #32
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2078      	movs	r0, #120	; 0x78
 8001ed4:	f000 fa0e 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ed8:	228d      	movs	r2, #141	; 0x8d
 8001eda:	2100      	movs	r1, #0
 8001edc:	2078      	movs	r0, #120	; 0x78
 8001ede:	f000 fa09 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ee2:	2214      	movs	r2, #20
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2078      	movs	r0, #120	; 0x78
 8001ee8:	f000 fa04 	bl	80022f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001eec:	22af      	movs	r2, #175	; 0xaf
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	; 0x78
 8001ef2:	f000 f9ff 	bl	80022f4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ef6:	222e      	movs	r2, #46	; 0x2e
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	; 0x78
 8001efc:	f000 f9fa 	bl	80022f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f843 	bl	8001f8c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001f06:	f000 f813 	bl	8001f30 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SSD1306_Init+0x184>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SSD1306_Init+0x184>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SSD1306_Init+0x184>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20001178 	.word	0x20001178
 8001f2c:	2000109c 	.word	0x2000109c

08001f30 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e01d      	b.n	8001f78 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3b50      	subs	r3, #80	; 0x50
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	2078      	movs	r0, #120	; 0x78
 8001f48:	f000 f9d4 	bl	80022f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2078      	movs	r0, #120	; 0x78
 8001f52:	f000 f9cf 	bl	80022f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f56:	2210      	movs	r2, #16
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2078      	movs	r0, #120	; 0x78
 8001f5c:	f000 f9ca 	bl	80022f4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <SSD1306_UpdateScreen+0x58>)
 8001f66:	441a      	add	r2, r3
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 f95b 	bl	8002228 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	3301      	adds	r3, #1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2b07      	cmp	r3, #7
 8001f7c:	d9de      	bls.n	8001f3c <SSD1306_UpdateScreen+0xc>
	}
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000c9c 	.word	0x20000c9c

08001f8c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <SSD1306_Fill+0x14>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <SSD1306_Fill+0x16>
 8001fa0:	23ff      	movs	r3, #255	; 0xff
 8001fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <SSD1306_Fill+0x2c>)
 8001faa:	f005 f843 	bl	8007034 <memset>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000c9c 	.word	0x20000c9c

08001fbc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	80bb      	strh	r3, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	70fb      	strb	r3, [r7, #3]
	if (
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd2:	d848      	bhi.n	8002066 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001fd8:	d845      	bhi.n	8002066 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <SSD1306_DrawPixel+0xb4>)
 8001fdc:	791b      	ldrb	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11a      	bne.n	800202c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	01db      	lsls	r3, r3, #7
 8002002:	4413      	add	r3, r2
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <SSD1306_DrawPixel+0xb8>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	b25a      	sxtb	r2, r3
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b259      	sxtb	r1, r3
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	4603      	mov	r3, r0
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	4413      	add	r3, r2
 8002024:	b2c9      	uxtb	r1, r1
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <SSD1306_DrawPixel+0xb8>)
 8002028:	54d1      	strb	r1, [r2, r3]
 800202a:	e01d      	b.n	8002068 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	b298      	uxth	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	01db      	lsls	r3, r3, #7
 8002038:	4413      	add	r3, r2
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <SSD1306_DrawPixel+0xb8>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	b25a      	sxtb	r2, r3
 8002040:	88bb      	ldrh	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	b25b      	sxtb	r3, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	b25b      	sxtb	r3, r3
 8002052:	4013      	ands	r3, r2
 8002054:	b259      	sxtb	r1, r3
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	4603      	mov	r3, r0
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	4413      	add	r3, r2
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <SSD1306_DrawPixel+0xb8>)
 8002062:	54d1      	strb	r1, [r2, r3]
 8002064:	e000      	b.n	8002068 <SSD1306_DrawPixel+0xac>
		return;
 8002066:	bf00      	nop
	}
}
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	2000109c 	.word	0x2000109c
 8002074:	20000c9c 	.word	0x20000c9c

08002078 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	80fb      	strh	r3, [r7, #6]
 8002084:	4613      	mov	r3, r2
 8002086:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <SSD1306_GotoXY+0x28>)
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <SSD1306_GotoXY+0x28>)
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	8053      	strh	r3, [r2, #2]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	2000109c 	.word	0x2000109c

080020a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <SSD1306_Putc+0xfc>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
	if (
 80020c0:	2b7f      	cmp	r3, #127	; 0x7f
 80020c2:	dc07      	bgt.n	80020d4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <SSD1306_Putc+0xfc>)
 80020c6:	885b      	ldrh	r3, [r3, #2]
 80020c8:	461a      	mov	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020d0:	2b3f      	cmp	r3, #63	; 0x3f
 80020d2:	dd01      	ble.n	80020d8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e05e      	b.n	8002196 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e04b      	b.n	8002176 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	3b20      	subs	r3, #32
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	7849      	ldrb	r1, [r1, #1]
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	440b      	add	r3, r1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e030      	b.n	8002164 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b298      	uxth	r0, r3
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002120:	885a      	ldrh	r2, [r3, #2]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b29b      	uxth	r3, r3
 800212a:	79ba      	ldrb	r2, [r7, #6]
 800212c:	4619      	mov	r1, r3
 800212e:	f7ff ff45 	bl	8001fbc <SSD1306_DrawPixel>
 8002132:	e014      	b.n	800215e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002136:	881a      	ldrh	r2, [r3, #0]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4413      	add	r3, r2
 800213e:	b298      	uxth	r0, r3
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002142:	885a      	ldrh	r2, [r3, #2]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b299      	uxth	r1, r3
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff ff2f 	bl	8001fbc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3301      	adds	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4293      	cmp	r3, r2
 800216e:	d3c8      	bcc.n	8002102 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	461a      	mov	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4293      	cmp	r3, r2
 8002180:	d3ad      	bcc.n	80020de <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <SSD1306_Putc+0xfc>)
 8002192:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002194:	79fb      	ldrb	r3, [r7, #7]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000109c 	.word	0x2000109c

080021a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80021b2:	e012      	b.n	80021da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff71 	bl	80020a4 <SSD1306_Putc>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d002      	beq.n	80021d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	e008      	b.n	80021e6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e8      	bne.n	80021b4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	781b      	ldrb	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff feca 	bl	8001f8c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021f8:	f7ff fe9a 	bl	8001f30 <SSD1306_UpdateScreen>
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <ssd1306_I2C_Init+0x24>)
 8002208:	607b      	str	r3, [r7, #4]
	while(p>0)
 800220a:	e002      	b.n	8002212 <ssd1306_I2C_Init+0x12>
		p--;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	0003d090 	.word	0x0003d090

08002228 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b0c7      	sub	sp, #284	; 0x11c
 800222c:	af02      	add	r7, sp, #8
 800222e:	4604      	mov	r4, r0
 8002230:	4608      	mov	r0, r1
 8002232:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002236:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800223a:	600a      	str	r2, [r1, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002242:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002246:	4622      	mov	r2, r4
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800224e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002252:	4602      	mov	r2, r0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800225a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800225e:	460a      	mov	r2, r1
 8002260:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800226a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800226e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800227c:	e015      	b.n	80022aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800227e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002282:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002286:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	441a      	add	r2, r3
 800228e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002292:	3301      	adds	r3, #1
 8002294:	7811      	ldrb	r1, [r2, #0]
 8002296:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800229a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800229e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80022a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022a4:	3301      	adds	r3, #1
 80022a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d8df      	bhi.n	800227e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b299      	uxth	r1, r3
 80022ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f107 020c 	add.w	r2, r7, #12
 80022dc:	200a      	movs	r0, #10
 80022de:	9000      	str	r0, [sp, #0]
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80022e2:	f002 ff07 	bl	80050f4 <HAL_I2C_Master_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	20001178 	.word	0x20001178

080022f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	460b      	mov	r3, r1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	4613      	mov	r3, r2
 8002304:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800230a:	797b      	ldrb	r3, [r7, #5]
 800230c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	b299      	uxth	r1, r3
 8002312:	f107 020c 	add.w	r2, r7, #12
 8002316:	230a      	movs	r3, #10
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2302      	movs	r3, #2
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <ssd1306_I2C_Write+0x38>)
 800231e:	f002 fee9 	bl	80050f4 <HAL_I2C_Master_Transmit>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20001178 	.word	0x20001178

08002330 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fbd0 	bl	8002aea <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fbeb 	bl	8002b2a <SX1278_hw_SPIReadByte>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fb88 	bl	8002a74 <SX1278_hw_SetNSS>
	return tmp;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	4613      	mov	r3, r2
 800237c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fb75 	bl	8002a74 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f000 fba6 	bl	8002aea <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	78ba      	ldrb	r2, [r7, #2]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fb9f 	bl	8002aea <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb5e 	bl	8002a74 <SX1278_hw_SetNSS>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	72fb      	strb	r3, [r7, #11]
 80023d0:	4613      	mov	r3, r2
 80023d2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80023d4:	7abb      	ldrb	r3, [r7, #10]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d927      	bls.n	800242a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fb47 	bl	8002a74 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	7afa      	ldrb	r2, [r7, #11]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fb7b 	bl	8002aea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e00c      	b.n	8002414 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	18d4      	adds	r4, r2, r3
 8002404:	4608      	mov	r0, r1
 8002406:	f000 fb90 	bl	8002b2a <SX1278_hw_SPIReadByte>
 800240a:	4603      	mov	r3, r0
 800240c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	3301      	adds	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	7abb      	ldrb	r3, [r7, #10]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3ee      	bcc.n	80023fa <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb26 	bl	8002a74 <SX1278_hw_SetNSS>
 8002428:	e000      	b.n	800242c <SX1278_SPIBurstRead+0x6c>
		return;
 800242a:	bf00      	nop
	}
}
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}

08002432 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	461a      	mov	r2, r3
 800243e:	460b      	mov	r3, r1
 8002440:	72fb      	strb	r3, [r7, #11]
 8002442:	4613      	mov	r3, r2
 8002444:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002446:	7abb      	ldrb	r3, [r7, #10]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d929      	bls.n	80024a0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fb0e 	bl	8002a74 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fb3f 	bl	8002aea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800246c:	2300      	movs	r3, #0
 800246e:	75fb      	strb	r3, [r7, #23]
 8002470:	e00b      	b.n	800248a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	f000 fb33 	bl	8002aea <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	3301      	adds	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	7dfa      	ldrb	r2, [r7, #23]
 800248c:	7abb      	ldrb	r3, [r7, #10]
 800248e:	429a      	cmp	r2, r3
 8002490:	d3ef      	bcc.n	8002472 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f000 faeb 	bl	8002a74 <SX1278_hw_SetNSS>
 800249e:	e000      	b.n	80024a2 <SX1278_SPIBurstWrite+0x70>
		return;
 80024a0:	bf00      	nop
	}
}
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f90d 	bl	80026d0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 fb5d 	bl	8002b76 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f917 	bl	80026f0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	684a      	ldr	r2, [r1, #4]
 80024c6:	688b      	ldr	r3, [r1, #8]
 80024c8:	f04f 0000 	mov.w	r0, #0
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	04d9      	lsls	r1, r3, #19
 80024d2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80024d6:	04d0      	lsls	r0, r2, #19
 80024d8:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <SX1278_config+0x1f0>)
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f7fe f8b5 	bl	800064c <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80024ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	0c02      	lsrs	r2, r0, #16
 80024f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024fc:	0c0b      	lsrs	r3, r1, #16
 80024fe:	b2d3      	uxtb	r3, r2
 8002500:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8002502:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	0a02      	lsrs	r2, r0, #8
 8002510:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002514:	0a0b      	lsrs	r3, r1, #8
 8002516:	b2d3      	uxtb	r3, r2
 8002518:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800251a:	7c3b      	ldrb	r3, [r7, #16]
 800251c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800251e:	f107 020c 	add.w	r2, r7, #12
 8002522:	2303      	movs	r3, #3
 8002524:	2106      	movs	r1, #6
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff83 	bl	8002432 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800252c:	2234      	movs	r2, #52	; 0x34
 800252e:	2139      	movs	r1, #57	; 0x39
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff1c 	bl	800236e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b1b      	ldrb	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	4b57      	ldr	r3, [pc, #348]	; (800269c <SX1278_config+0x1f4>)
 800253e:	5c9b      	ldrb	r3, [r3, r2]
 8002540:	461a      	mov	r2, r3
 8002542:	2109      	movs	r1, #9
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff12 	bl	800236e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800254a:	220b      	movs	r2, #11
 800254c:	210b      	movs	r1, #11
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff0d 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002554:	2223      	movs	r2, #35	; 0x23
 8002556:	210c      	movs	r1, #12
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff08 	bl	800236e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7b5b      	ldrb	r3, [r3, #13]
 8002562:	461a      	mov	r2, r3
 8002564:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <SX1278_config+0x1f8>)
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	2b06      	cmp	r3, #6
 800256a:	d147      	bne.n	80025fc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b9b      	ldrb	r3, [r3, #14]
 8002570:	461a      	mov	r2, r3
 8002572:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <SX1278_config+0x1fc>)
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7bdb      	ldrb	r3, [r3, #15]
 800257e:	4619      	mov	r1, r3
 8002580:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <SX1278_config+0x200>)
 8002582:	5c5b      	ldrb	r3, [r3, r1]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4413      	add	r3, r2
 800258a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800258c:	3301      	adds	r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	211d      	movs	r1, #29
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff feea 	bl	800236e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <SX1278_config+0x1f8>)
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7c1b      	ldrb	r3, [r3, #16]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <SX1278_config+0x204>)
 80025b0:	5c5b      	ldrb	r3, [r3, r1]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80025ba:	3303      	adds	r3, #3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	211e      	movs	r1, #30
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fed3 	bl	800236e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80025c8:	2131      	movs	r1, #49	; 0x31
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff feb0 	bl	8002330 <SX1278_SPIRead>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	f043 0305 	orr.w	r3, r3, #5
 80025e2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	461a      	mov	r2, r3
 80025e8:	2131      	movs	r1, #49	; 0x31
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff febf 	bl	800236e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80025f0:	220c      	movs	r2, #12
 80025f2:	2137      	movs	r1, #55	; 0x37
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff feba 	bl	800236e <SX1278_SPIWrite>
 80025fa:	e029      	b.n	8002650 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7b9b      	ldrb	r3, [r3, #14]
 8002600:	461a      	mov	r2, r3
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <SX1278_config+0x1fc>)
 8002604:	5c9b      	ldrb	r3, [r3, r2]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7bdb      	ldrb	r3, [r3, #15]
 800260e:	4619      	mov	r1, r3
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <SX1278_config+0x200>)
 8002612:	5c5b      	ldrb	r3, [r3, r1]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002618:	4413      	add	r3, r2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	211d      	movs	r1, #29
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fea4 	bl	800236e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7b5b      	ldrb	r3, [r3, #13]
 800262a:	461a      	mov	r2, r3
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <SX1278_config+0x1f8>)
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7c1b      	ldrb	r3, [r3, #16]
 8002638:	4619      	mov	r1, r3
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <SX1278_config+0x204>)
 800263c:	5c5b      	ldrb	r3, [r3, r1]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002642:	4413      	add	r3, r2
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	211e      	movs	r1, #30
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fe8f 	bl	800236e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002650:	2204      	movs	r2, #4
 8002652:	2126      	movs	r1, #38	; 0x26
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fe8a 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800265a:	2208      	movs	r2, #8
 800265c:	211f      	movs	r1, #31
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fe85 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002664:	2200      	movs	r2, #0
 8002666:	2120      	movs	r1, #32
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fe80 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800266e:	2208      	movs	r2, #8
 8002670:	2121      	movs	r1, #33	; 0x21
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fe7b 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002678:	2201      	movs	r2, #1
 800267a:	2141      	movs	r1, #65	; 0x41
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fe76 	bl	800236e <SX1278_SPIWrite>
	module->readBytes = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f810 	bl	80026b0 <SX1278_standby>
}
 8002690:	bf00      	nop
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	01e84800 	.word	0x01e84800
 800269c:	08007ac0 	.word	0x08007ac0
 80026a0:	08007ac4 	.word	0x08007ac4
 80026a4:	08007acc 	.word	0x08007acc
 80026a8:	08007ad8 	.word	0x08007ad8
 80026ac:	08007adc 	.word	0x08007adc

080026b0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80026b8:	2209      	movs	r2, #9
 80026ba:	2101      	movs	r1, #1
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fe56 	bl	800236e <SX1278_SPIWrite>
	module->status = STANDBY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	749a      	strb	r2, [r3, #18]
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80026d8:	2208      	movs	r2, #8
 80026da:	2101      	movs	r1, #1
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fe46 	bl	800236e <SX1278_SPIWrite>
	module->status = SLEEP;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	749a      	strb	r2, [r3, #18]
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80026f8:	2288      	movs	r2, #136	; 0x88
 80026fa:	2101      	movs	r1, #1
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fe36 	bl	800236e <SX1278_SPIWrite>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002712:	22ff      	movs	r2, #255	; 0xff
 8002714:	2112      	movs	r1, #18
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fe29 	bl	800236e <SX1278_SPIWrite>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	460b      	mov	r3, r1
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	7afa      	ldrb	r2, [r7, #11]
 8002736:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff feb5 	bl	80024a8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800273e:	2284      	movs	r2, #132	; 0x84
 8002740:	214d      	movs	r1, #77	; 0x4d
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff fe13 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002748:	22ff      	movs	r2, #255	; 0xff
 800274a:	2124      	movs	r1, #36	; 0x24
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fe0e 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8002752:	2201      	movs	r2, #1
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe09 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800275c:	223f      	movs	r2, #63	; 0x3f
 800275e:	2111      	movs	r1, #17
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fe04 	bl	800236e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ffcf 	bl	800270a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	461a      	mov	r2, r3
 8002770:	2122      	movs	r1, #34	; 0x22
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fdfb 	bl	800236e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8002778:	210f      	movs	r1, #15
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fdd8 	bl	8002330 <SX1278_SPIRead>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	461a      	mov	r2, r3
 8002788:	210d      	movs	r1, #13
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff fdef 	bl	800236e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 8002790:	2205      	movs	r2, #5
 8002792:	2101      	movs	r1, #1
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fdea 	bl	800236e <SX1278_SPIWrite>
	module->readBytes = 0;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80027a2:	2118      	movs	r1, #24
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff fdc3 	bl	8002330 <SX1278_SPIRead>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d104      	bne.n	80027be <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2203      	movs	r2, #3
 80027b8:	749a      	strb	r2, [r3, #18]
			return 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e013      	b.n	80027e6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f967 	bl	8002aa2 <SX1278_hw_Reset>
			SX1278_config(module);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fe67 	bl	80024a8 <SX1278_config>
			return 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	e003      	b.n	80027e6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f000 f9c9 	bl	8002b76 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80027e4:	e7dd      	b.n	80027a2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f9c6 	bl	8002b8c <SX1278_hw_GetDIO0>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d030      	beq.n	8002868 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3313      	adds	r3, #19
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f004 fc0f 	bl	8007034 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002816:	2110      	movs	r1, #16
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fd89 	bl	8002330 <SX1278_SPIRead>
 800281e:	4603      	mov	r3, r0
 8002820:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	461a      	mov	r2, r3
 8002826:	210d      	movs	r1, #13
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fda0 	bl	800236e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7b5b      	ldrb	r3, [r3, #13]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7c5b      	ldrb	r3, [r3, #17]
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e005      	b.n	800284a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800283e:	2113      	movs	r1, #19
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fd75 	bl	8002330 <SX1278_SPIRead>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 0213 	add.w	r2, r3, #19
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2100      	movs	r1, #0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fdb3 	bl	80023c0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff51 	bl	800270a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	460b      	mov	r3, r1
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	7afa      	ldrb	r2, [r7, #11]
 8002888:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff fe0c 	bl	80024a8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002890:	2287      	movs	r2, #135	; 0x87
 8002892:	214d      	movs	r1, #77	; 0x4d
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fd6a 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800289a:	2200      	movs	r2, #0
 800289c:	2124      	movs	r1, #36	; 0x24
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fd65 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80028a4:	2241      	movs	r2, #65	; 0x41
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fd60 	bl	800236e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ff2b 	bl	800270a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80028b4:	22f7      	movs	r2, #247	; 0xf7
 80028b6:	2111      	movs	r1, #17
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fd58 	bl	800236e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	461a      	mov	r2, r3
 80028c2:	2122      	movs	r1, #34	; 0x22
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fd52 	bl	800236e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80028ca:	210e      	movs	r1, #14
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fd2f 	bl	8002330 <SX1278_SPIRead>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	461a      	mov	r2, r3
 80028da:	210d      	movs	r1, #13
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff fd46 	bl	800236e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80028e2:	2122      	movs	r1, #34	; 0x22
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fd23 	bl	8002330 <SX1278_SPIRead>
 80028ea:	4603      	mov	r3, r0
 80028ec:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80028ee:	7dba      	ldrb	r2, [r7, #22]
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d104      	bne.n	8002900 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	749a      	strb	r2, [r3, #18]
			return 1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e00e      	b.n	800291e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ea      	bne.n	80028e2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f8c6 	bl	8002aa2 <SX1278_hw_Reset>
			SX1278_config(module);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff fdc6 	bl	80024a8 <SX1278_config>
			return 0;
 800291c:	2300      	movs	r3, #0
		}
	}
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	2100      	movs	r1, #0
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff fd78 	bl	8002432 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8002942:	228b      	movs	r2, #139	; 0x8b
 8002944:	2101      	movs	r1, #1
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fd11 	bl	800236e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f91b 	bl	8002b8c <SX1278_hw_GetDIO0>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800295c:	2112      	movs	r1, #18
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff fce6 	bl	8002330 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fed0 	bl	800270a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff fea0 	bl	80026b0 <SX1278_standby>
			return 1;
 8002970:	2301      	movs	r3, #1
 8002972:	e013      	b.n	800299c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f88c 	bl	8002aa2 <SX1278_hw_Reset>
			SX1278_config(module);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fd8c 	bl	80024a8 <SX1278_config>
			return 0;
 8002990:	2300      	movs	r3, #0
 8002992:	e003      	b.n	800299c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8002994:	2001      	movs	r0, #1
 8002996:	f000 f8ee 	bl	8002b76 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800299a:	e7d7      	b.n	800294c <SX1278_LoRaTxPacket+0x26>
	}
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f848 	bl	8002a4a <SX1278_hw_init>
	module->frequency = frequency;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
	module->power = power;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	7e3a      	ldrb	r2, [r7, #24]
 80029c8:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	7f3a      	ldrb	r2, [r7, #28]
 80029ce:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029d6:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029de:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029e6:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80029ee:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fd59 	bl	80024a8 <SX1278_config>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002a12:	79fa      	ldrb	r2, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d003      	beq.n	8002a20 <SX1278_read+0x22>
		length = module->readBytes;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002a1e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3313      	adds	r3, #19
 8002a24:	79fa      	ldrb	r2, [r7, #7]
 8002a26:	4619      	mov	r1, r3
 8002a28:	68b8      	ldr	r0, [r7, #8]
 8002a2a:	f004 fb37 	bl	800709c <memcpy>
	rxBuf[length] = '\0';
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	4413      	add	r3, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8002a52:	2101      	movs	r1, #1
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f80d 	bl	8002a74 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6858      	ldr	r0, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	4619      	mov	r1, r3
 8002a68:	f002 f9b7 	bl	8004dda <HAL_GPIO_WritePin>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6958      	ldr	r0, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	b299      	uxth	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	f002 f9a0 	bl	8004dda <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe1 	bl	8002a74 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6858      	ldr	r0, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f002 f98b 	bl	8004dda <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f000 f856 	bl	8002b76 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6858      	ldr	r0, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f002 f97f 	bl	8004dda <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8002adc:	2064      	movs	r0, #100	; 0x64
 8002ade:	f000 f84a 	bl	8002b76 <SX1278_hw_DelayMs>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8002af6:	2100      	movs	r1, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ffbb 	bl	8002a74 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6998      	ldr	r0, [r3, #24]
 8002b02:	1cf9      	adds	r1, r7, #3
 8002b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f003 fc0d 	bl	8006328 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002b0e:	bf00      	nop
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fefa 	bl	800690e <HAL_SPI_GetState>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d1f7      	bne.n	8002b10 <SX1278_hw_SPICommand+0x26>
		;
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af02      	add	r7, sp, #8
 8002b30:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff99 	bl	8002a74 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6998      	ldr	r0, [r3, #24]
 8002b46:	f107 020e 	add.w	r2, r7, #14
 8002b4a:	f107 010f 	add.w	r1, r7, #15
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	f003 fd2a 	bl	80065ae <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002b5a:	bf00      	nop
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fed4 	bl	800690e <HAL_SPI_GetState>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1f7      	bne.n	8002b5c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f001 fc5e 	bl	8004440 <HAL_Delay>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f002 f903 	bl	8004dac <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <LORA_IF_GetData_Frame>:
				return FL_FRAGMENT_FIRMWARE ;
			}
		}
	    return 0;
}
uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint8_t* buffer_resp , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_resp ){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
	uint32 local_u32timeout = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaEntryRx(module, length, timeout);
 8002bd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fda3 	bl	8002724 <SX1278_LoRaEntryRx>
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fe03 	bl	80027ee <SX1278_LoRaRxPacket>
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
		if ( ret > 0 ) {
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <LORA_IF_GetData_Frame+0x88>
			// Replace Receive Led hear
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf6:	481b      	ldr	r0, [pc, #108]	; (8002c64 <LORA_IF_GetData_Frame+0xa8>)
 8002bf8:	f002 f907 	bl	8004e0a <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fefb 	bl	80029fe <SX1278_read>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
			AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8002c0c:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <LORA_IF_GetData_Frame+0xac>)
 8002c0e:	4917      	ldr	r1, [pc, #92]	; (8002c6c <LORA_IF_GetData_Frame+0xb0>)
 8002c10:	4817      	ldr	r0, [pc, #92]	; (8002c70 <LORA_IF_GetData_Frame+0xb4>)
 8002c12:	f000 fd79 	bl	8003708 <AES_init_ctx_iv>
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 8002c16:	2210      	movs	r2, #16
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4815      	ldr	r0, [pc, #84]	; (8002c70 <LORA_IF_GetData_Frame+0xb4>)
 8002c1c:	f000 ff37 	bl	8003a8e <AES_CTR_xcrypt_buffer>
			if(buffer_resp[1] == ADDR_SLAVE_NODE_1 && buffer_resp[0] == ADDR_UNICAST && buffer_resp[2] == ACK_resp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3301      	adds	r3, #1
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10c      	bne.n	8002c44 <LORA_IF_GetData_Frame+0x88>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d108      	bne.n	8002c44 <LORA_IF_GetData_Frame+0x88>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3302      	adds	r3, #2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d101      	bne.n	8002c44 <LORA_IF_GetData_Frame+0x88>
				return 1;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00a      	b.n	8002c5a <LORA_IF_GetData_Frame+0x9e>
			/*Received but wrong request*/

		}
		HAL_Delay(1);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f001 fbfb 	bl	8004440 <HAL_Delay>
		local_u32timeout++;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
		if(local_u32timeout == timeout)
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1c4      	bne.n	8002be2 <LORA_IF_GetData_Frame+0x26>
			return 0;
 8002c58:	2300      	movs	r3, #0
		/*Lost Packet Hear*/
	}
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	20000054 	.word	0x20000054
 8002c6c:	20000044 	.word	0x20000044
 8002c70:	200010a4 	.word	0x200010a4

08002c74 <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr ,uint8_t ACK_req , uint8_t ACK_resp ){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	70fb      	strb	r3, [r7, #3]
	buffer_req[1] = addr;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	7e3a      	ldrb	r2, [r7, #24]
 8002c88:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = ACK_req;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	7f3a      	ldrb	r2, [r7, #28]
 8002c90:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <LORA_IF_Stransmit_Request+0x74>)
 8002c94:	4915      	ldr	r1, [pc, #84]	; (8002cec <LORA_IF_Stransmit_Request+0x78>)
 8002c96:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <LORA_IF_Stransmit_Request+0x7c>)
 8002c98:	f000 fd36 	bl	8003708 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <LORA_IF_Stransmit_Request+0x7c>)
 8002ca2:	f000 fef4 	bl	8003a8e <AES_CTR_xcrypt_buffer>
	//init to TX mode
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8002ca6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002caa:	2110      	movs	r1, #16
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fde2 	bl	8002876 <SX1278_LoRaEntryTx>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	70fb      	strb	r3, [r7, #3]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8002cb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cba:	2210      	movs	r2, #16
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fe31 	bl	8002926 <SX1278_LoRaTxPacket>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	70fb      	strb	r3, [r7, #3]
	/*Read the first Frame */

	 if(ret >0){
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <LORA_IF_Stransmit_Request+0x68>
		//Replace Blink Send hear
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <LORA_IF_Stransmit_Request+0x80>)
 8002cd4:	f002 f899 	bl	8004e0a <HAL_GPIO_TogglePin>
		return LORA_OKE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <LORA_IF_Stransmit_Request+0x6a>
	 }
	 return LORA_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000054 	.word	0x20000054
 8002cec:	20000044 	.word	0x20000044
 8002cf0:	200010a4 	.word	0x200010a4
 8002cf4:	40011000 	.word	0x40011000

08002cf8 <LORA_IF_Stransmit_Fragment_Firmware>:

LoRa_Return_t LORA_IF_Stransmit_Fragment_Firmware(SX1278_t *module ,uint8_t* buffer_flashing_data ){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8002d06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d0a:	2150      	movs	r1, #80	; 0x50
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fdb2 	bl	8002876 <SX1278_LoRaEntryTx>
 8002d12:	4603      	mov	r3, r0
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8002d18:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_flashing_data, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8002d1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d1e:	2250      	movs	r2, #80	; 0x50
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fdff 	bl	8002926 <SX1278_LoRaTxPacket>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8002d2e:	701a      	strb	r2, [r3, #0]
	 if(ret){
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <LORA_IF_Stransmit_Fragment_Firmware+0x54>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d3c:	4808      	ldr	r0, [pc, #32]	; (8002d60 <LORA_IF_Stransmit_Fragment_Firmware+0x68>)
 8002d3e:	f002 f864 	bl	8004e0a <HAL_GPIO_TogglePin>
		 HAL_Delay(WAIT_PACKET_SEND);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f001 fb7c 	bl	8004440 <HAL_Delay>
		/*Read the first Frame */
//		switch(local_u8Check_Code = LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_16BYTES)){
//			case(MCU_ACKNOWLEDGE_FINISHING):
//				buffer_packet[2] = buffer_resp[2];
		 return LORA_OKE ;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e003      	b.n	8002d54 <LORA_IF_Stransmit_Fragment_Firmware+0x5c>
//			case(MCU_IMAGE_CRC_NOT_CORRECT):
//				return LORA_FLASHING_ERROR;
	 }
//		}
	 else{
		 counter++;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8002d52:	e7d8      	b.n	8002d06 <LORA_IF_Stransmit_Fragment_Firmware+0xe>
			 return LORA_ERROR;
		 }
	 }

	}
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000768 	.word	0x20000768
 8002d60:	40011000 	.word	0x40011000

08002d64 <LORA_IF_GetData_End_Frame>:

uint8_t LORA_IF_GetData_End_Frame(SX1278_t *module, uint8_t *rxBuffer, uint8_t length, uint32_t timeout){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	71fb      	strb	r3, [r7, #7]
	uint32 local_u32timeout = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
	uint8_t local_u8addrNode = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	74fb      	strb	r3, [r7, #19]
	ret = SX1278_LoRaEntryRx(module, length, timeout);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff fcce 	bl	8002724 <SX1278_LoRaEntryRx>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <LORA_IF_GetData_End_Frame+0xb4>)
 8002d8e:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <LORA_IF_GetData_End_Frame+0xb8>)
 8002d92:	4923      	ldr	r1, [pc, #140]	; (8002e20 <LORA_IF_GetData_End_Frame+0xbc>)
 8002d94:	4823      	ldr	r0, [pc, #140]	; (8002e24 <LORA_IF_GetData_End_Frame+0xc0>)
 8002d96:	f000 fcb7 	bl	8003708 <AES_init_ctx_iv>
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff fd27 	bl	80027ee <SX1278_LoRaRxPacket>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <LORA_IF_GetData_End_Frame+0xb4>)
 8002da6:	701a      	strb	r2, [r3, #0]
		RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u8addrNode);
 8002da8:	f107 0313 	add.w	r3, r7, #19
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fcbd 	bl	800172c <Rte_NodeAddr_ReadData>
		if ( ret > 0 ) {
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <LORA_IF_GetData_End_Frame+0xb4>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01e      	beq.n	8002df8 <LORA_IF_GetData_End_Frame+0x94>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbe:	481a      	ldr	r0, [pc, #104]	; (8002e28 <LORA_IF_GetData_End_Frame+0xc4>)
 8002dc0:	f002 f823 	bl	8004e0a <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) rxBuffer, ret);
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <LORA_IF_GetData_End_Frame+0xb4>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fe16 	bl	80029fe <SX1278_read>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <LORA_IF_GetData_End_Frame+0xb4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) rxBuffer, length);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4810      	ldr	r0, [pc, #64]	; (8002e24 <LORA_IF_GetData_End_Frame+0xc0>)
 8002de2:	f000 fe54 	bl	8003a8e <AES_CTR_xcrypt_buffer>
			if(rxBuffer[1] == local_u8addrNode)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3301      	adds	r3, #1
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d102      	bne.n	8002df8 <LORA_IF_GetData_End_Frame+0x94>
				return rxBuffer[2];
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	789b      	ldrb	r3, [r3, #2]
 8002df6:	e00b      	b.n	8002e10 <LORA_IF_GetData_End_Frame+0xac>
		}
		local_u32timeout++;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f001 fb1e 	bl	8004440 <HAL_Delay>
		if(local_u32timeout == MAX_TIME_OUT_RECEIVE )
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d1c5      	bne.n	8002d9a <LORA_IF_GetData_End_Frame+0x36>
			return 0;
 8002e0e:	2300      	movs	r3, #0
	}
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000768 	.word	0x20000768
 8002e1c:	20000054 	.word	0x20000054
 8002e20:	20000044 	.word	0x20000044
 8002e24:	200010a4 	.word	0x200010a4
 8002e28:	40011000 	.word	0x40011000

08002e2c <UI_Init>:
static uint16_t gl_TimeRequest;
static uint32_t gl_u32Version;
/**************************************************/
/*				  Init FUNC					      */
/**************************************************/
void UI_Init(void){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	// Init variables
	gl_UISTATE = UI_START_OTA;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <UI_Init+0x28>)
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]
	gl_u8DownLoadProgress = INIT_VAL_ZERO;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <UI_Init+0x2c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
	gl_u32SizeCodeFw = INIT_VAL_ZERO;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <UI_Init+0x30>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
	gl_counterdot = INIT_VAL_ZERO;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <UI_Init+0x34>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	// Init OLED display
	SSD1306_Init();
 8002e48:	f7fe ffae 	bl	8001da8 <SSD1306_Init>
	/*Run main Appication before go to Flashing Appl*/
	// Init Flashing
	UI_Init_Flashing_Screen();
 8002e4c:	f000 f968 	bl	8003120 <UI_Init_Flashing_Screen>

}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20001164 	.word	0x20001164
 8002e58:	20001166 	.word	0x20001166
 8002e5c:	2000116c 	.word	0x2000116c
 8002e60:	20001170 	.word	0x20001170

08002e64 <UI_Main_FLASHING>:

void UI_Main_FLASHING(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
	switch (gl_UISTATE) {
 8002e6a:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	f200 8135 	bhi.w	80030de <UI_Main_FLASHING+0x27a>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UI_Main_FLASHING+0x18>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ed3 	.word	0x08002ed3
 8002e84:	08002f13 	.word	0x08002f13
 8002e88:	08002f3f 	.word	0x08002f3f
 8002e8c:	08002f9b 	.word	0x08002f9b
 8002e90:	08002ff3 	.word	0x08002ff3
 8002e94:	08003057 	.word	0x08003057
 8002e98:	080030c3 	.word	0x080030c3
 8002e9c:	080030a7 	.word	0x080030a7
		/* UI_IDE STATE */
		case UI_IDLE:
		{
			// Get System state Via RTE
			Std_ReturnType retVal  = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8002ea0:	489a      	ldr	r0, [pc, #616]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002ea2:	f7fe fb89 	bl	80015b8 <Rte_SystemState_ReadData>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8002eaa:	79bb      	ldrb	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10c      	bne.n	8002eca <UI_Main_FLASHING+0x66>
				if(SYS_NEW_UPDATE_REQ == gl_SystemState )
 8002eb0:	4b96      	ldr	r3, [pc, #600]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 8116 	bne.w	80030e6 <UI_Main_FLASHING+0x282>
				{
					// Clean UI screen
					UI_Clean();
 8002eba:	f000 f951 	bl	8003160 <UI_Clean>
					// Display Information for FLashing
					UI_WaitForResp();
 8002ebe:	f000 f957 	bl	8003170 <UI_WaitForResp>

					gl_UISTATE =  UI_DOWNLOADING_FW;
 8002ec2:	4b91      	ldr	r3, [pc, #580]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
			}
			else{
				/*State In IDLE STATE and Change UI to ERROR STATE*/
				gl_UISTATE = UI_DISPLAYERROR;
			}
			break;
 8002ec8:	e10d      	b.n	80030e6 <UI_Main_FLASHING+0x282>
				gl_UISTATE = UI_DISPLAYERROR;
 8002eca:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	701a      	strb	r2, [r3, #0]
			break;
 8002ed0:	e109      	b.n	80030e6 <UI_Main_FLASHING+0x282>
		}
		case UI_DOWNLOADING_FW:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_DOWNLOAD_PROGRESS_ReadData(&gl_u8DownLoadProgress);
 8002ed2:	488f      	ldr	r0, [pc, #572]	; (8003110 <UI_Main_FLASHING+0x2ac>)
 8002ed4:	f7fe fc3c 	bl	8001750 <Rte_UpdateProgress_ReadData>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
			if( RTE_E_OKE == retVal){
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 8103 	bne.w	80030ea <UI_Main_FLASHING+0x286>
				UI_UpdateDownloading_FW(gl_u8DownLoadProgress);
 8002ee4:	4b8a      	ldr	r3, [pc, #552]	; (8003110 <UI_Main_FLASHING+0x2ac>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f9af 	bl	800324c <UI_UpdateDownloading_FW>
				if(100 == gl_u8DownLoadProgress)
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <UI_Main_FLASHING+0x2ac>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	f040 80f9 	bne.w	80030ea <UI_Main_FLASHING+0x286>
				{
					HAL_Delay(2000);
 8002ef8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002efc:	f001 faa0 	bl	8004440 <HAL_Delay>
					UI_Clean();
 8002f00:	f000 f92e 	bl	8003160 <UI_Clean>
					UI_SendSW_LoRa(INITIAL_VALUE_ZERO);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f000 fa2f 	bl	8003368 <UI_SendSW_LoRa>
					gl_UISTATE = UI_SYNCONFIGURATION;
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8002f10:	e0eb      	b.n	80030ea <UI_Main_FLASHING+0x286>
		}
		case UI_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8002f12:	487e      	ldr	r0, [pc, #504]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f14:	f7fe fb50 	bl	80015b8 <Rte_SystemState_ReadData>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	723b      	strb	r3, [r7, #8]
			if (RTE_E_OKE == retVal){
 8002f1c:	7a3b      	ldrb	r3, [r7, #8]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f040 80e5 	bne.w	80030ee <UI_Main_FLASHING+0x28a>
				if(gl_SystemState == SYS_REQUEST_OTA){
 8002f24:	4b79      	ldr	r3, [pc, #484]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d104      	bne.n	8002f36 <UI_Main_FLASHING+0xd2>
					UI_Clean();
 8002f2c:	f000 f918 	bl	8003160 <UI_Clean>
					UI_StartOTA();
 8002f30:	f000 fa52 	bl	80033d8 <UI_StartOTA>
				else {
					gl_UISTATE = UI_WAIT_START_OTA;
					//UI_Clean();
				}
			}
			break;
 8002f34:	e0db      	b.n	80030ee <UI_Main_FLASHING+0x28a>
					gl_UISTATE = UI_WAIT_START_OTA;
 8002f36:	4b74      	ldr	r3, [pc, #464]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002f38:	2203      	movs	r2, #3
 8002f3a:	701a      	strb	r2, [r3, #0]
			break;
 8002f3c:	e0d7      	b.n	80030ee <UI_Main_FLASHING+0x28a>
		}
		case UI_WAIT_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8002f3e:	4873      	ldr	r0, [pc, #460]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f40:	f7fe fb3a 	bl	80015b8 <Rte_SystemState_ReadData>
 8002f44:	4603      	mov	r3, r0
 8002f46:	72bb      	strb	r3, [r7, #10]
			retVal = Rte_PacketSendLoraNum_ReadData(&gl_TimeRequest);
 8002f48:	4872      	ldr	r0, [pc, #456]	; (8003114 <UI_Main_FLASHING+0x2b0>)
 8002f4a:	f7fe fc7f 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	72bb      	strb	r3, [r7, #10]
			if(RTE_E_OKE == retVal){
 8002f52:	7abb      	ldrb	r3, [r7, #10]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d120      	bne.n	8002f9a <UI_Main_FLASHING+0x136>
				if(gl_SystemState == SYS_WAIT_ACCEPT_OTA){
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d105      	bne.n	8002f6c <UI_Main_FLASHING+0x108>
					UI_Wait_ACCEPT_OTA(gl_TimeRequest);
 8002f60:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <UI_Main_FLASHING+0x2b0>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fa4b 	bl	8003400 <UI_Wait_ACCEPT_OTA>
 8002f6a:	e016      	b.n	8002f9a <UI_Main_FLASHING+0x136>

				}
				else if(gl_SystemState == SYS_REQUEST_OTA){
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d103      	bne.n	8002f7c <UI_Main_FLASHING+0x118>
					gl_UISTATE = UI_START_OTA;
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e00e      	b.n	8002f9a <UI_Main_FLASHING+0x136>
				}
				else if (gl_SystemState == SYS_CONFIG_LORA){
 8002f7c:	4b63      	ldr	r3, [pc, #396]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d105      	bne.n	8002f90 <UI_Main_FLASHING+0x12c>
					gl_UISTATE = UI_SYNCONFIGURATION;
 8002f84:	4b60      	ldr	r3, [pc, #384]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 8002f8a:	f000 f8e9 	bl	8003160 <UI_Clean>
 8002f8e:	e004      	b.n	8002f9a <UI_Main_FLASHING+0x136>
				}
				else {
					/*OUT OF REQUEST*/
					gl_UISTATE=UI_DISPLAYERROR;
 8002f90:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002f92:	2207      	movs	r2, #7
 8002f94:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 8002f96:	f000 f8e3 	bl	8003160 <UI_Clean>
			}

		}

		case UI_SYNCONFIGURATION:
		{	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8002f9a:	485c      	ldr	r0, [pc, #368]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002f9c:	f7fe fb0c 	bl	80015b8 <Rte_SystemState_ReadData>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	727b      	strb	r3, [r7, #9]
			retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8002fa4:	485c      	ldr	r0, [pc, #368]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8002fa6:	f7fe fbf7 	bl	8001798 <Rte_UI_Error_ReadData>
 8002faa:	4603      	mov	r3, r0
 8002fac:	727b      	strb	r3, [r7, #9]
			if( RTE_E_OKE == retVal){
 8002fae:	7a7b      	ldrb	r3, [r7, #9]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 809e 	bne.w	80030f2 <UI_Main_FLASHING+0x28e>
				if(gl_SystemState == SYS_CONFIG_LORA){
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d102      	bne.n	8002fc4 <UI_Main_FLASHING+0x160>
					UI_Synconfiguaraton();
 8002fbe:	f000 f9b9 	bl	8003334 <UI_Synconfiguaraton>
 8002fc2:	e006      	b.n	8002fd2 <UI_Main_FLASHING+0x16e>
				}
				else if(gl_SystemState == SYS_SEND_UPDATE)
 8002fc4:	4b51      	ldr	r3, [pc, #324]	; (800310c <UI_Main_FLASHING+0x2a8>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	d102      	bne.n	8002fd2 <UI_Main_FLASHING+0x16e>
					gl_UISTATE = UI_SENDPACKET_LORA_FW;
 8002fcc:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002fce:	2205      	movs	r2, #5
 8002fd0:	701a      	strb	r2, [r3, #0]
				if(gl_u8ErrorFlag == GW_REQUEST_UPDATE_ERROR){
 8002fd2:	4b51      	ldr	r3, [pc, #324]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8002fd8:	f040 808b 	bne.w	80030f2 <UI_Main_FLASHING+0x28e>
					UI_Clean();
 8002fdc:	f000 f8c0 	bl	8003160 <UI_Clean>
					gl_UISTATE =UI_DISPLAYERROR;
 8002fe0:	4b49      	ldr	r3, [pc, #292]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	701a      	strb	r2, [r3, #0]
					UI_DisplayERROR(gl_u8ErrorFlag);
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa34 	bl	8003458 <UI_DisplayERROR>
				}
			}
			break;
 8002ff0:	e07f      	b.n	80030f2 <UI_Main_FLASHING+0x28e>
		}
		case UI_SENDPACKET_LORA_FW:
		{

			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8002ff2:	484a      	ldr	r0, [pc, #296]	; (800311c <UI_Main_FLASHING+0x2b8>)
 8002ff4:	f7fe fc2a 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	733b      	strb	r3, [r7, #12]

			if(RTE_E_OKE == retVal_1){
 8002ffc:	7b3b      	ldrb	r3, [r7, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d179      	bne.n	80030f6 <UI_Main_FLASHING+0x292>
				UI_SendSW_LoRa(gl_u16Packet_LoRa_FW);
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <UI_Main_FLASHING+0x2b8>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f9ae 	bl	8003368 <UI_SendSW_LoRa>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 800300c:	4842      	ldr	r0, [pc, #264]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 800300e:	f7fe fbc3 	bl	8001798 <Rte_UI_Error_ReadData>
 8003012:	4603      	mov	r3, r0
 8003014:	72fb      	strb	r3, [r7, #11]
				if( MCU_ERROR_CRC == gl_u8ErrorFlag  ){
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b4f      	cmp	r3, #79	; 0x4f
 800301c:	d105      	bne.n	800302a <UI_Main_FLASHING+0x1c6>
					UI_Clean();
 800301e:	f000 f89f 	bl	8003160 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8003024:	2207      	movs	r2, #7
 8003026:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
				}

			}
			break;
 8003028:	e065      	b.n	80030f6 <UI_Main_FLASHING+0x292>
				else if( MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b77      	cmp	r3, #119	; 0x77
 8003030:	d107      	bne.n	8003042 <UI_Main_FLASHING+0x1de>
					UI_Clean();
 8003032:	f000 f895 	bl	8003160 <UI_Clean>
					UI_DoneDownload_FW();
 8003036:	f000 f935 	bl	80032a4 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 800303c:	2208      	movs	r2, #8
 800303e:	701a      	strb	r2, [r3, #0]
			break;
 8003040:	e059      	b.n	80030f6 <UI_Main_FLASHING+0x292>
				else if(MCU_REQUEST_PACKET_FW_LOSS ==gl_u8ErrorFlag ){
 8003042:	4b35      	ldr	r3, [pc, #212]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b76      	cmp	r3, #118	; 0x76
 8003048:	d155      	bne.n	80030f6 <UI_Main_FLASHING+0x292>
					UI_Clean();
 800304a:	f000 f889 	bl	8003160 <UI_Clean>
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8003050:	2206      	movs	r2, #6
 8003052:	701a      	strb	r2, [r3, #0]
			break;
 8003054:	e04f      	b.n	80030f6 <UI_Main_FLASHING+0x292>
		}
		case UI_RESENDPACKET_LORA_FW:
		{
			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8003056:	4831      	ldr	r0, [pc, #196]	; (800311c <UI_Main_FLASHING+0x2b8>)
 8003058:	f7fe fbf8 	bl	800184c <Rte_PacketSendLoraNum_ReadData>
 800305c:	4603      	mov	r3, r0
 800305e:	73bb      	strb	r3, [r7, #14]
			if(RTE_E_OKE == retVal_1){
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d149      	bne.n	80030fa <UI_Main_FLASHING+0x296>
				UI_Send_Packet_Lost(gl_u16Packet_LoRa_FW);
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <UI_Main_FLASHING+0x2b8>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa44 	bl	80034f8 <UI_Send_Packet_Lost>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8003070:	4829      	ldr	r0, [pc, #164]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8003072:	f7fe fb91 	bl	8001798 <Rte_UI_Error_ReadData>
 8003076:	4603      	mov	r3, r0
 8003078:	737b      	strb	r3, [r7, #13]
				if(MCU_ERROR_CRC  ==gl_u8ErrorFlag){
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b4f      	cmp	r3, #79	; 0x4f
 8003080:	d105      	bne.n	800308e <UI_Main_FLASHING+0x22a>
					UI_Clean();
 8003082:	f000 f86d 	bl	8003160 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 8003088:	2207      	movs	r2, #7
 800308a:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					UI_DoneDownload_FW();
					gl_UISTATE = UI_DONE_OTA;
				}
			}
			break;
 800308c:	e035      	b.n	80030fa <UI_Main_FLASHING+0x296>
				else if(MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b77      	cmp	r3, #119	; 0x77
 8003094:	d131      	bne.n	80030fa <UI_Main_FLASHING+0x296>
					UI_Clean();
 8003096:	f000 f863 	bl	8003160 <UI_Clean>
					UI_DoneDownload_FW();
 800309a:	f000 f903 	bl	80032a4 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 80030a0:	2208      	movs	r2, #8
 80030a2:	701a      	strb	r2, [r3, #0]
			break;
 80030a4:	e029      	b.n	80030fa <UI_Main_FLASHING+0x296>
		}
		case UI_DONE_OTA:
		{
			gl_UISTATE = UI_IDLE;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
			UI_DoneDownload_FW();
 80030ac:	f000 f8fa 	bl	80032a4 <UI_DoneDownload_FW>
			HAL_Delay(2000);
 80030b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030b4:	f001 f9c4 	bl	8004440 <HAL_Delay>
			UI_Clean();
 80030b8:	f000 f852 	bl	8003160 <UI_Clean>
			UI_Init_Flashing_Screen();
 80030bc:	f000 f830 	bl	8003120 <UI_Init_Flashing_Screen>
			break;
 80030c0:	e01e      	b.n	8003100 <UI_Main_FLASHING+0x29c>
		}
		case UI_DISPLAYERROR:
		{
			/*ERROR Handler */
			Std_ReturnType retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 80030c2:	4815      	ldr	r0, [pc, #84]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 80030c4:	f7fe fb68 	bl	8001798 <Rte_UI_Error_ReadData>
 80030c8:	4603      	mov	r3, r0
 80030ca:	73fb      	strb	r3, [r7, #15]
			if(RTE_E_OKE == retVal){
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d115      	bne.n	80030fe <UI_Main_FLASHING+0x29a>
				UI_DisplayERROR(gl_u8ErrorFlag);
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <UI_Main_FLASHING+0x2b4>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f9be 	bl	8003458 <UI_DisplayERROR>

			}
			break;
 80030dc:	e00f      	b.n	80030fe <UI_Main_FLASHING+0x29a>
		}
		default:
			/*ERROR */
			gl_UISTATE = UI_DISPLAYERROR;
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <UI_Main_FLASHING+0x2a4>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	701a      	strb	r2, [r3, #0]
			break;
 80030e4:	e00c      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <UI_Main_FLASHING+0x29c>
			break;
 80030fe:	bf00      	nop
	}
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20001164 	.word	0x20001164
 800310c:	20001165 	.word	0x20001165
 8003110:	20001166 	.word	0x20001166
 8003114:	20001172 	.word	0x20001172
 8003118:	20001167 	.word	0x20001167
 800311c:	20001168 	.word	0x20001168

08003120 <UI_Init_Flashing_Screen>:
/**********************************************************/
/*					   Private UI FUNC					  */
/**********************************************************/
static void UI_Init_Flashing_Screen(void){
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	/* Set Backgroun color */
	SSD1306_GotoXY (0,10); // goto 10, 10
 8003124:	210a      	movs	r1, #10
 8003126:	2000      	movs	r0, #0
 8003128:	f7fe ffa6 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts("GATEWAY", &Font_11x18, 1); // print start FUOTA
 800312c:	2201      	movs	r2, #1
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <UI_Init_Flashing_Screen+0x30>)
 8003130:	4808      	ldr	r0, [pc, #32]	; (8003154 <UI_Init_Flashing_Screen+0x34>)
 8003132:	f7ff f837 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8003136:	2128      	movs	r1, #40	; 0x28
 8003138:	2005      	movs	r0, #5
 800313a:	f7fe ff9d 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA UPDATE!!", &Font_7x10, 1);
 800313e:	2201      	movs	r2, #1
 8003140:	4905      	ldr	r1, [pc, #20]	; (8003158 <UI_Init_Flashing_Screen+0x38>)
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <UI_Init_Flashing_Screen+0x3c>)
 8003144:	f7ff f82e 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003148:	f7fe fef2 	bl	8001f30 <SSD1306_UpdateScreen>
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000006c 	.word	0x2000006c
 8003154:	08007970 	.word	0x08007970
 8003158:	20000064 	.word	0x20000064
 800315c:	08007978 	.word	0x08007978

08003160 <UI_Clean>:
static void UI_Clean(void){
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8003164:	f7ff f843 	bl	80021ee <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8003168:	f7fe fee2 	bl	8001f30 <SSD1306_UpdateScreen>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <UI_WaitForResp>:

static void UI_WaitForResp(void){
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
	uint8_t local_u8NodeAddr = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	73bb      	strb	r3, [r7, #14]
	uint32_t local_u32Codesize = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
	uint16_t local_u16Appver=0U;
 800317e:	2300      	movs	r3, #0
 8003180:	80fb      	strh	r3, [r7, #6]
	RTE_RUNNABLE_CODE_SIZE_ReadData(&local_u32Codesize);
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fabe 	bl	8001708 <Rte_CodeSize_ReadData>
	RTE_RUNNABLE_APP_VER_ReadData(&local_u16Appver);
 800318c:	1dbb      	adds	r3, r7, #6
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe faa8 	bl	80016e4 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u8NodeAddr);
 8003194:	f107 030e 	add.w	r3, r7, #14
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fac7 	bl	800172c <Rte_NodeAddr_ReadData>
	char Local_DataBuffer[4];
	uint8_t local_estimatime = local_u32Codesize/BandWidth_UART +20;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <UI_WaitForResp+0xc4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3314      	adds	r3, #20
 80031ac:	73fb      	strb	r3, [r7, #15]
	SSD1306_GotoXY (20, 0);
 80031ae:	2100      	movs	r1, #0
 80031b0:	2014      	movs	r0, #20
 80031b2:	f7fe ff61 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("Update Downloading!!", &Font_7x10, 1);
 80031b6:	2201      	movs	r2, #1
 80031b8:	491f      	ldr	r1, [pc, #124]	; (8003238 <UI_WaitForResp+0xc8>)
 80031ba:	4820      	ldr	r0, [pc, #128]	; (800323c <UI_WaitForResp+0xcc>)
 80031bc:	f7fe fff2 	bl	80021a4 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u16Appver );
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	461a      	mov	r2, r3
 80031c4:	463b      	mov	r3, r7
 80031c6:	491e      	ldr	r1, [pc, #120]	; (8003240 <UI_WaitForResp+0xd0>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 ff13 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (20, 10);
 80031ce:	210a      	movs	r1, #10
 80031d0:	2014      	movs	r0, #20
 80031d2:	f7fe ff51 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("Version:", &Font_7x10, 1);
 80031d6:	2201      	movs	r2, #1
 80031d8:	4917      	ldr	r1, [pc, #92]	; (8003238 <UI_WaitForResp+0xc8>)
 80031da:	481a      	ldr	r0, [pc, #104]	; (8003244 <UI_WaitForResp+0xd4>)
 80031dc:	f7fe ffe2 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (30, 10);
 80031e0:	210a      	movs	r1, #10
 80031e2:	201e      	movs	r0, #30
 80031e4:	f7fe ff48 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (Local_DataBuffer, &Font_7x10, 1);
 80031e8:	463b      	mov	r3, r7
 80031ea:	2201      	movs	r2, #1
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <UI_WaitForResp+0xc8>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe ffd8 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (20, 20);
 80031f4:	2114      	movs	r1, #20
 80031f6:	2014      	movs	r0, #20
 80031f8:	f7fe ff3e 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("Address:", &Font_7x10, 1);
 80031fc:	2201      	movs	r2, #1
 80031fe:	490e      	ldr	r1, [pc, #56]	; (8003238 <UI_WaitForResp+0xc8>)
 8003200:	4811      	ldr	r0, [pc, #68]	; (8003248 <UI_WaitForResp+0xd8>)
 8003202:	f7fe ffcf 	bl	80021a4 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u8NodeAddr );
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	461a      	mov	r2, r3
 800320a:	463b      	mov	r3, r7
 800320c:	490c      	ldr	r1, [pc, #48]	; (8003240 <UI_WaitForResp+0xd0>)
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fef0 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (30, 20);
 8003214:	2114      	movs	r1, #20
 8003216:	201e      	movs	r0, #30
 8003218:	f7fe ff2e 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (Local_DataBuffer, &Font_7x10, 1);
 800321c:	463b      	mov	r3, r7
 800321e:	2201      	movs	r2, #1
 8003220:	4905      	ldr	r1, [pc, #20]	; (8003238 <UI_WaitForResp+0xc8>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ffbe 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003228:	f7fe fe82 	bl	8001f30 <SSD1306_UpdateScreen>
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	10624dd3 	.word	0x10624dd3
 8003238:	20000064 	.word	0x20000064
 800323c:	08007988 	.word	0x08007988
 8003240:	080079a0 	.word	0x080079a0
 8003244:	080079a4 	.word	0x080079a4
 8003248:	080079b0 	.word	0x080079b0

0800324c <UI_UpdateDownloading_FW>:
	SSD1306_Puts ("Progress", &Font_7x10, 1);
	SSD1306_GotoXY (50, 40);
	SSD1306_Puts ("  0%", &Font_7x10, 1);
	SSD1306_UpdateScreen(); //display
}
static void UI_UpdateDownloading_FW(uint8_t Var_Progress){
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_Progress);
 8003256:	79fa      	ldrb	r2, [r7, #7]
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <UI_UpdateDownloading_FW+0x4c>)
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fec8 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (50, 40);
 8003264:	2128      	movs	r1, #40	; 0x28
 8003266:	2032      	movs	r0, #50	; 0x32
 8003268:	f7fe ff06 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 800326c:	2201      	movs	r2, #1
 800326e:	490b      	ldr	r1, [pc, #44]	; (800329c <UI_UpdateDownloading_FW+0x50>)
 8003270:	480b      	ldr	r0, [pc, #44]	; (80032a0 <UI_UpdateDownloading_FW+0x54>)
 8003272:	f7fe ff97 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8003276:	2128      	movs	r1, #40	; 0x28
 8003278:	2032      	movs	r0, #50	; 0x32
 800327a:	f7fe fefd 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	2201      	movs	r2, #1
 8003284:	4905      	ldr	r1, [pc, #20]	; (800329c <UI_UpdateDownloading_FW+0x50>)
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe ff8c 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800328c:	f7fe fe50 	bl	8001f30 <SSD1306_UpdateScreen>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	080079a0 	.word	0x080079a0
 800329c:	20000064 	.word	0x20000064
 80032a0:	080079e4 	.word	0x080079e4

080032a4 <UI_DoneDownload_FW>:
static void UI_DoneDownload_FW(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
	/* Writing Text */
	Std_ReturnType retVal = RTE_RUNNABLE_APP_VER_ReadData(&gl_u32Version);
 80032aa:	481b      	ldr	r0, [pc, #108]	; (8003318 <UI_DoneDownload_FW+0x74>)
 80032ac:	f7fe fa1a 	bl	80016e4 <Rte_ApplVer_ReadData>
 80032b0:	4603      	mov	r3, r0
 80032b2:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer , "%d" , gl_u32Version);
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <UI_DoneDownload_FW+0x74>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	463b      	mov	r3, r7
 80032ba:	4918      	ldr	r1, [pc, #96]	; (800331c <UI_DoneDownload_FW+0x78>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fe99 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (40, 10);
 80032c2:	210a      	movs	r1, #10
 80032c4:	2028      	movs	r0, #40	; 0x28
 80032c6:	f7fe fed7 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA", &Font_11x18, 1);
 80032ca:	2201      	movs	r2, #1
 80032cc:	4914      	ldr	r1, [pc, #80]	; (8003320 <UI_DoneDownload_FW+0x7c>)
 80032ce:	4815      	ldr	r0, [pc, #84]	; (8003324 <UI_DoneDownload_FW+0x80>)
 80032d0:	f7fe ff68 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (30, 30);
 80032d4:	211e      	movs	r1, #30
 80032d6:	201e      	movs	r0, #30
 80032d8:	f7fe fece 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("COMPLETED", &Font_7x10, 1);
 80032dc:	2201      	movs	r2, #1
 80032de:	4912      	ldr	r1, [pc, #72]	; (8003328 <UI_DoneDownload_FW+0x84>)
 80032e0:	4812      	ldr	r0, [pc, #72]	; (800332c <UI_DoneDownload_FW+0x88>)
 80032e2:	f7fe ff5f 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (30, 40);
 80032e6:	2128      	movs	r1, #40	; 0x28
 80032e8:	201e      	movs	r0, #30
 80032ea:	f7fe fec5 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("VERSION: ", &Font_7x10, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <UI_DoneDownload_FW+0x84>)
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <UI_DoneDownload_FW+0x8c>)
 80032f4:	f7fe ff56 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 80032f8:	2128      	movs	r1, #40	; 0x28
 80032fa:	2064      	movs	r0, #100	; 0x64
 80032fc:	f7fe febc 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8003300:	463b      	mov	r3, r7
 8003302:	2201      	movs	r2, #1
 8003304:	4908      	ldr	r1, [pc, #32]	; (8003328 <UI_DoneDownload_FW+0x84>)
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ff4c 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800330c:	f7fe fe10 	bl	8001f30 <SSD1306_UpdateScreen>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20001174 	.word	0x20001174
 800331c:	080079a0 	.word	0x080079a0
 8003320:	2000006c 	.word	0x2000006c
 8003324:	080079ec 	.word	0x080079ec
 8003328:	20000064 	.word	0x20000064
 800332c:	080079f4 	.word	0x080079f4
 8003330:	08007a00 	.word	0x08007a00

08003334 <UI_Synconfiguaraton>:

static void UI_Synconfiguaraton(void){
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (5, 20);
 8003338:	2114      	movs	r1, #20
 800333a:	2005      	movs	r0, #5
 800333c:	f7fe fe9c 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("SYNC UP ", &Font_7x10, 1);
 8003340:	2201      	movs	r2, #1
 8003342:	4906      	ldr	r1, [pc, #24]	; (800335c <UI_Synconfiguaraton+0x28>)
 8003344:	4806      	ldr	r0, [pc, #24]	; (8003360 <UI_Synconfiguaraton+0x2c>)
 8003346:	f7fe ff2d 	bl	80021a4 <SSD1306_Puts>
	SSD1306_Puts ("...", &Font_7x10, 1);
 800334a:	2201      	movs	r2, #1
 800334c:	4903      	ldr	r1, [pc, #12]	; (800335c <UI_Synconfiguaraton+0x28>)
 800334e:	4805      	ldr	r0, [pc, #20]	; (8003364 <UI_Synconfiguaraton+0x30>)
 8003350:	f7fe ff28 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003354:	f7fe fdec 	bl	8001f30 <SSD1306_UpdateScreen>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000064 	.word	0x20000064
 8003360:	08007a0c 	.word	0x08007a0c
 8003364:	08007a18 	.word	0x08007a18

08003368 <UI_SendSW_LoRa>:
static void UI_SendSW_LoRa(uint16_t Var_numPacket){
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	f107 030c 	add.w	r3, r7, #12
 8003378:	4913      	ldr	r1, [pc, #76]	; (80033c8 <UI_SendSW_LoRa+0x60>)
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fe3a 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (5, 20);
 8003380:	2114      	movs	r1, #20
 8003382:	2005      	movs	r0, #5
 8003384:	f7fe fe78 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003388:	2201      	movs	r2, #1
 800338a:	4910      	ldr	r1, [pc, #64]	; (80033cc <UI_SendSW_LoRa+0x64>)
 800338c:	4810      	ldr	r0, [pc, #64]	; (80033d0 <UI_SendSW_LoRa+0x68>)
 800338e:	f7fe ff09 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8003392:	2128      	movs	r1, #40	; 0x28
 8003394:	2005      	movs	r0, #5
 8003396:	f7fe fe6f 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET SEND :", &Font_7x10, 1);
 800339a:	2201      	movs	r2, #1
 800339c:	490b      	ldr	r1, [pc, #44]	; (80033cc <UI_SendSW_LoRa+0x64>)
 800339e:	480d      	ldr	r0, [pc, #52]	; (80033d4 <UI_SendSW_LoRa+0x6c>)
 80033a0:	f7fe ff00 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 80033a4:	2128      	movs	r1, #40	; 0x28
 80033a6:	2064      	movs	r0, #100	; 0x64
 80033a8:	f7fe fe66 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	2201      	movs	r2, #1
 80033b2:	4906      	ldr	r1, [pc, #24]	; (80033cc <UI_SendSW_LoRa+0x64>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fef5 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80033ba:	f7fe fdb9 	bl	8001f30 <SSD1306_UpdateScreen>
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	080079a0 	.word	0x080079a0
 80033cc:	20000064 	.word	0x20000064
 80033d0:	08007a1c 	.word	0x08007a1c
 80033d4:	08007a28 	.word	0x08007a28

080033d8 <UI_StartOTA>:

static void UI_StartOTA(void){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,10); // goto 10, 10
 80033dc:	210a      	movs	r1, #10
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fe fe4a 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts("Send Request OTA!!", &Font_7x10, 1); // print start FUOTA
 80033e4:	2201      	movs	r2, #1
 80033e6:	4904      	ldr	r1, [pc, #16]	; (80033f8 <UI_StartOTA+0x20>)
 80033e8:	4804      	ldr	r0, [pc, #16]	; (80033fc <UI_StartOTA+0x24>)
 80033ea:	f7fe fedb 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80033ee:	f7fe fd9f 	bl	8001f30 <SSD1306_UpdateScreen>
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000064 	.word	0x20000064
 80033fc:	08007a38 	.word	0x08007a38

08003400 <UI_Wait_ACCEPT_OTA>:
static void UI_Wait_ACCEPT_OTA(uint16_t Var_Time_request){
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	80fb      	strh	r3, [r7, #6]
	char local_DataBuffer[4];
	sprintf(local_DataBuffer, "%d", Var_Time_request);
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <UI_Wait_ACCEPT_OTA+0x4c>)
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fdee 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (0, 40);
 8003418:	2128      	movs	r1, #40	; 0x28
 800341a:	2000      	movs	r0, #0
 800341c:	f7fe fe2c 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("Time Request OTA:", &Font_7x10, 1);
 8003420:	2201      	movs	r2, #1
 8003422:	490b      	ldr	r1, [pc, #44]	; (8003450 <UI_Wait_ACCEPT_OTA+0x50>)
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <UI_Wait_ACCEPT_OTA+0x54>)
 8003426:	f7fe febd 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (120, 40);
 800342a:	2128      	movs	r1, #40	; 0x28
 800342c:	2078      	movs	r0, #120	; 0x78
 800342e:	f7fe fe23 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (local_DataBuffer, &Font_7x10, 1);
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	2201      	movs	r2, #1
 8003438:	4905      	ldr	r1, [pc, #20]	; (8003450 <UI_Wait_ACCEPT_OTA+0x50>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe feb2 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003440:	f7fe fd76 	bl	8001f30 <SSD1306_UpdateScreen>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	080079a0 	.word	0x080079a0
 8003450:	20000064 	.word	0x20000064
 8003454:	08007a4c 	.word	0x08007a4c

08003458 <UI_DisplayERROR>:

static void UI_DisplayERROR(uint8_t Var_UIError){
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
	char local_ErrorBuffer[4];
	sprintf(local_ErrorBuffer, "%d", Var_UIError);
 8003462:	79fa      	ldrb	r2, [r7, #7]
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	491c      	ldr	r1, [pc, #112]	; (80034dc <UI_DisplayERROR+0x84>)
 800346a:	4618      	mov	r0, r3
 800346c:	f003 fdc2 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (50, 20);
 8003470:	2114      	movs	r1, #20
 8003472:	2032      	movs	r0, #50	; 0x32
 8003474:	f7fe fe00 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("ERROR :", &Font_7x10, 1);
 8003478:	2201      	movs	r2, #1
 800347a:	4919      	ldr	r1, [pc, #100]	; (80034e0 <UI_DisplayERROR+0x88>)
 800347c:	4819      	ldr	r0, [pc, #100]	; (80034e4 <UI_DisplayERROR+0x8c>)
 800347e:	f7fe fe91 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (10, 40);
 8003482:	2128      	movs	r1, #40	; 0x28
 8003484:	200a      	movs	r0, #10
 8003486:	f7fe fdf7 	bl	8002078 <SSD1306_GotoXY>
	switch (Var_UIError) {
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b4f      	cmp	r3, #79	; 0x4f
 800348e:	d006      	beq.n	800349e <UI_DisplayERROR+0x46>
 8003490:	2b4f      	cmp	r3, #79	; 0x4f
 8003492:	dc16      	bgt.n	80034c2 <UI_DisplayERROR+0x6a>
 8003494:	2b1f      	cmp	r3, #31
 8003496:	d00e      	beq.n	80034b6 <UI_DisplayERROR+0x5e>
 8003498:	2b2f      	cmp	r3, #47	; 0x2f
 800349a:	d006      	beq.n	80034aa <UI_DisplayERROR+0x52>
 800349c:	e011      	b.n	80034c2 <UI_DisplayERROR+0x6a>
		case MCU_ERROR_CRC:
			SSD1306_Puts ("INVALID CRC", &Font_7x10, 1);
 800349e:	2201      	movs	r2, #1
 80034a0:	490f      	ldr	r1, [pc, #60]	; (80034e0 <UI_DisplayERROR+0x88>)
 80034a2:	4811      	ldr	r0, [pc, #68]	; (80034e8 <UI_DisplayERROR+0x90>)
 80034a4:	f7fe fe7e 	bl	80021a4 <SSD1306_Puts>
			break;
 80034a8:	e011      	b.n	80034ce <UI_DisplayERROR+0x76>
		case GW_REQUEST_UPDATE_ERROR:
			SSD1306_Puts ("REQUEST UPDATE ERROR", &Font_7x10, 1);
 80034aa:	2201      	movs	r2, #1
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <UI_DisplayERROR+0x88>)
 80034ae:	480f      	ldr	r0, [pc, #60]	; (80034ec <UI_DisplayERROR+0x94>)
 80034b0:	f7fe fe78 	bl	80021a4 <SSD1306_Puts>
			break;
 80034b4:	e00b      	b.n	80034ce <UI_DisplayERROR+0x76>
		case GW_OUTOFREQUEST_ERROR:
			SSD1306_Puts ("REQUEST UPDATE FAIL", &Font_7x10, 1);
 80034b6:	2201      	movs	r2, #1
 80034b8:	4909      	ldr	r1, [pc, #36]	; (80034e0 <UI_DisplayERROR+0x88>)
 80034ba:	480d      	ldr	r0, [pc, #52]	; (80034f0 <UI_DisplayERROR+0x98>)
 80034bc:	f7fe fe72 	bl	80021a4 <SSD1306_Puts>
			break;
 80034c0:	e005      	b.n	80034ce <UI_DisplayERROR+0x76>
		default:
			SSD1306_Puts ("UNKNOWN ERROR!!", &Font_7x10, 1);
 80034c2:	2201      	movs	r2, #1
 80034c4:	4906      	ldr	r1, [pc, #24]	; (80034e0 <UI_DisplayERROR+0x88>)
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <UI_DisplayERROR+0x9c>)
 80034c8:	f7fe fe6c 	bl	80021a4 <SSD1306_Puts>
			break;
 80034cc:	bf00      	nop
	}
	SSD1306_UpdateScreen(); //display
 80034ce:	f7fe fd2f 	bl	8001f30 <SSD1306_UpdateScreen>
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	080079a0 	.word	0x080079a0
 80034e0:	20000064 	.word	0x20000064
 80034e4:	08007a60 	.word	0x08007a60
 80034e8:	08007a68 	.word	0x08007a68
 80034ec:	08007a74 	.word	0x08007a74
 80034f0:	08007a8c 	.word	0x08007a8c
 80034f4:	08007aa0 	.word	0x08007aa0

080034f8 <UI_Send_Packet_Lost>:

static void UI_Send_Packet_Lost(uint16_t Var_numPacket){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	4913      	ldr	r1, [pc, #76]	; (8003558 <UI_Send_Packet_Lost+0x60>)
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fd72 	bl	8006ff4 <siprintf>
	SSD1306_GotoXY (5, 20);
 8003510:	2114      	movs	r1, #20
 8003512:	2005      	movs	r0, #5
 8003514:	f7fe fdb0 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003518:	2201      	movs	r2, #1
 800351a:	4910      	ldr	r1, [pc, #64]	; (800355c <UI_Send_Packet_Lost+0x64>)
 800351c:	4810      	ldr	r0, [pc, #64]	; (8003560 <UI_Send_Packet_Lost+0x68>)
 800351e:	f7fe fe41 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8003522:	2128      	movs	r1, #40	; 0x28
 8003524:	2005      	movs	r0, #5
 8003526:	f7fe fda7 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET RESENT:", &Font_7x10, 1);
 800352a:	2201      	movs	r2, #1
 800352c:	490b      	ldr	r1, [pc, #44]	; (800355c <UI_Send_Packet_Lost+0x64>)
 800352e:	480d      	ldr	r0, [pc, #52]	; (8003564 <UI_Send_Packet_Lost+0x6c>)
 8003530:	f7fe fe38 	bl	80021a4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 8003534:	2128      	movs	r1, #40	; 0x28
 8003536:	2064      	movs	r0, #100	; 0x64
 8003538:	f7fe fd9e 	bl	8002078 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	2201      	movs	r2, #1
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <UI_Send_Packet_Lost+0x64>)
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fe2d 	bl	80021a4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800354a:	f7fe fcf1 	bl	8001f30 <SSD1306_UpdateScreen>
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	080079a0 	.word	0x080079a0
 800355c:	20000064 	.word	0x20000064
 8003560:	08007a1c 	.word	0x08007a1c
 8003564:	08007ab0 	.word	0x08007ab0

08003568 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e030      	b.n	80035da <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	441a      	add	r2, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	440b      	add	r3, r1
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	3301      	adds	r3, #1
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	441a      	add	r2, r3
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	3301      	adds	r3, #1
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	440b      	add	r3, r1
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	441a      	add	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3302      	adds	r3, #2
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	440b      	add	r3, r1
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3303      	adds	r3, #3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	441a      	add	r2, r3
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3303      	adds	r3, #3
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	440b      	add	r3, r1
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d9cb      	bls.n	8003578 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80035e0:	2304      	movs	r3, #4
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e081      	b.n	80036ea <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3301      	adds	r3, #1
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3302      	adds	r3, #2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	3303      	adds	r3, #3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d125      	bne.n	8003672 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8003626:	7b3b      	ldrb	r3, [r7, #12]
 8003628:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800363a:	7b3b      	ldrb	r3, [r7, #12]
 800363c:	461a      	mov	r2, r3
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <KeyExpansion+0x198>)
 8003640:	5c9b      	ldrb	r3, [r3, r2]
 8003642:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8003644:	7b7b      	ldrb	r3, [r7, #13]
 8003646:	461a      	mov	r2, r3
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <KeyExpansion+0x198>)
 800364a:	5c9b      	ldrb	r3, [r3, r2]
 800364c:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	461a      	mov	r2, r3
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <KeyExpansion+0x198>)
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	461a      	mov	r2, r3
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <KeyExpansion+0x198>)
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8003662:	7b3a      	ldrb	r2, [r7, #12]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	4926      	ldr	r1, [pc, #152]	; (8003704 <KeyExpansion+0x19c>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	4053      	eors	r3, r2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3b04      	subs	r3, #4
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	7819      	ldrb	r1, [r3, #0]
 8003688:	7b3a      	ldrb	r2, [r7, #12]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4403      	add	r3, r0
 8003690:	404a      	eors	r2, r1
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3301      	adds	r3, #1
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	7819      	ldrb	r1, [r3, #0]
 80036a0:	7b7a      	ldrb	r2, [r7, #13]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3301      	adds	r3, #1
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4403      	add	r3, r0
 80036aa:	404a      	eors	r2, r1
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	3302      	adds	r3, #2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	7819      	ldrb	r1, [r3, #0]
 80036ba:	7bba      	ldrb	r2, [r7, #14]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3302      	adds	r3, #2
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4403      	add	r3, r0
 80036c4:	404a      	eors	r2, r1
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	3303      	adds	r3, #3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	7819      	ldrb	r1, [r3, #0]
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3303      	adds	r3, #3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4403      	add	r3, r0
 80036de:	404a      	eors	r2, r1
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b2b      	cmp	r3, #43	; 0x2b
 80036ee:	f67f af7a 	bls.w	80035e6 <KeyExpansion+0x7e>
  }
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	3724      	adds	r7, #36	; 0x24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	08007ae0 	.word	0x08007ae0
 8003704:	08007be0 	.word	0x08007be0

08003708 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff25 	bl	8003568 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	33b0      	adds	r3, #176	; 0xb0
 8003722:	2210      	movs	r2, #16
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fcb8 	bl	800709c <memcpy>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
 8003746:	e027      	b.n	8003798 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8003748:	2300      	movs	r3, #0
 800374a:	75bb      	strb	r3, [r7, #22]
 800374c:	e01e      	b.n	800378c <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800374e:	7dfa      	ldrb	r2, [r7, #23]
 8003750:	7dbb      	ldrb	r3, [r7, #22]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	440a      	add	r2, r1
 8003758:	4413      	add	r3, r2
 800375a:	7818      	ldrb	r0, [r3, #0]
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	4413      	add	r3, r2
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	7dbb      	ldrb	r3, [r7, #22]
 8003768:	4413      	add	r3, r2
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	7819      	ldrb	r1, [r3, #0]
 8003772:	7dfa      	ldrb	r2, [r7, #23]
 8003774:	7dbb      	ldrb	r3, [r7, #22]
 8003776:	4041      	eors	r1, r0
 8003778:	b2c8      	uxtb	r0, r1
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	440a      	add	r2, r1
 8003780:	4413      	add	r3, r2
 8003782:	4602      	mov	r2, r0
 8003784:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003786:	7dbb      	ldrb	r3, [r7, #22]
 8003788:	3301      	adds	r3, #1
 800378a:	75bb      	strb	r3, [r7, #22]
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d9dd      	bls.n	800374e <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	3301      	adds	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d9d4      	bls.n	8003748 <AddRoundKey+0x14>
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
	...

080037ac <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e01d      	b.n	80037f6 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80037ba:	2300      	movs	r3, #0
 80037bc:	73bb      	strb	r3, [r7, #14]
 80037be:	e014      	b.n	80037ea <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80037c0:	7bba      	ldrb	r2, [r7, #14]
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	440a      	add	r2, r1
 80037ca:	4413      	add	r3, r2
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	7bba      	ldrb	r2, [r7, #14]
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <SubBytes+0x5c>)
 80037d6:	5c08      	ldrb	r0, [r1, r0]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	440a      	add	r2, r1
 80037de:	4413      	add	r3, r2
 80037e0:	4602      	mov	r2, r0
 80037e2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	3301      	adds	r3, #1
 80037e8:	73bb      	strb	r3, [r7, #14]
 80037ea:	7bbb      	ldrb	r3, [r7, #14]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d9e7      	bls.n	80037c0 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	3301      	adds	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d9de      	bls.n	80037ba <SubBytes+0xe>
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	08007ae0 	.word	0x08007ae0

0800380c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	795a      	ldrb	r2, [r3, #5]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7a5a      	ldrb	r2, [r3, #9]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7b5a      	ldrb	r2, [r3, #13]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	789b      	ldrb	r3, [r3, #2]
 800383c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7a9a      	ldrb	r2, [r3, #10]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	799b      	ldrb	r3, [r3, #6]
 8003850:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7b9a      	ldrb	r2, [r3, #14]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	78db      	ldrb	r3, [r3, #3]
 8003864:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7bda      	ldrb	r2, [r3, #15]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7ada      	ldrb	r2, [r3, #11]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	79da      	ldrb	r2, [r3, #7]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	71da      	strb	r2, [r3, #7]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <xtime>:

static uint8_t xtime(uint8_t x)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	b25a      	sxtb	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	09db      	lsrs	r3, r3, #7
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	0049      	lsls	r1, r1, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	4619      	mov	r1, r3
 80038ac:	00c8      	lsls	r0, r1, #3
 80038ae:	4619      	mov	r1, r3
 80038b0:	4603      	mov	r3, r0
 80038b2:	440b      	add	r3, r1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	4053      	eors	r3, r2
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e0a4      	b.n	8003a20 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80038de:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	4053      	eors	r3, r2
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	789b      	ldrb	r3, [r3, #2]
 8003900:	4053      	eors	r3, r2
 8003902:	b2da      	uxtb	r2, r3
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	78db      	ldrb	r3, [r3, #3]
 800390e:	4053      	eors	r3, r2
 8003910:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	4053      	eors	r3, r2
 8003926:	733b      	strb	r3, [r7, #12]
 8003928:	7b3b      	ldrb	r3, [r7, #12]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffaf 	bl	800388e <xtime>
 8003930:	4603      	mov	r3, r0
 8003932:	733b      	strb	r3, [r7, #12]
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800393c:	7b3a      	ldrb	r2, [r7, #12]
 800393e:	7b7b      	ldrb	r3, [r7, #13]
 8003940:	4053      	eors	r3, r2
 8003942:	b2db      	uxtb	r3, r3
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	404b      	eors	r3, r1
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	785a      	ldrb	r2, [r3, #1]
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	789b      	ldrb	r3, [r3, #2]
 8003964:	4053      	eors	r3, r2
 8003966:	733b      	strb	r3, [r7, #12]
 8003968:	7b3b      	ldrb	r3, [r7, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff8f 	bl	800388e <xtime>
 8003970:	4603      	mov	r3, r0
 8003972:	733b      	strb	r3, [r7, #12]
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	7859      	ldrb	r1, [r3, #1]
 800397e:	7b3a      	ldrb	r2, [r7, #12]
 8003980:	7b7b      	ldrb	r3, [r7, #13]
 8003982:	4053      	eors	r3, r2
 8003984:	b2da      	uxtb	r2, r3
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	404a      	eors	r2, r1
 800398a:	b2d1      	uxtb	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	789a      	ldrb	r2, [r3, #2]
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	4053      	eors	r3, r2
 80039ac:	733b      	strb	r3, [r7, #12]
 80039ae:	7b3b      	ldrb	r3, [r7, #12]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff6c 	bl	800388e <xtime>
 80039b6:	4603      	mov	r3, r0
 80039b8:	733b      	strb	r3, [r7, #12]
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	7899      	ldrb	r1, [r3, #2]
 80039c4:	7b3a      	ldrb	r2, [r7, #12]
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	4053      	eors	r3, r2
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	404a      	eors	r2, r1
 80039d0:	b2d1      	uxtb	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	460a      	mov	r2, r1
 80039da:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	78da      	ldrb	r2, [r3, #3]
 80039e6:	7bbb      	ldrb	r3, [r7, #14]
 80039e8:	4053      	eors	r3, r2
 80039ea:	733b      	strb	r3, [r7, #12]
 80039ec:	7b3b      	ldrb	r3, [r7, #12]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff4d 	bl	800388e <xtime>
 80039f4:	4603      	mov	r3, r0
 80039f6:	733b      	strb	r3, [r7, #12]
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	78d9      	ldrb	r1, [r3, #3]
 8003a02:	7b3a      	ldrb	r2, [r7, #12]
 8003a04:	7b7b      	ldrb	r3, [r7, #13]
 8003a06:	4053      	eors	r3, r2
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	404a      	eors	r2, r1
 8003a0e:	b2d1      	uxtb	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	460a      	mov	r2, r1
 8003a18:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	f67f af57 	bls.w	80038d6 <MixColumns+0xe>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fe75 	bl	8003734 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff feac 	bl	80037ac <SubBytes>
    ShiftRows(state);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fed9 	bl	800380c <ShiftRows>
    if (round == Nr) {
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b0a      	cmp	r3, #10
 8003a5e:	d00c      	beq.n	8003a7a <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff31 	bl	80038c8 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fe61 	bl	8003734 <AddRoundKey>
  for (round = 1; ; ++round)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3301      	adds	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8003a78:	e7e9      	b.n	8003a4e <Cipher+0x1c>
      break;
 8003a7a:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	200a      	movs	r0, #10
 8003a82:	f7ff fe57 	bl	8003734 <AddRoundKey>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b08b      	sub	sp, #44	; 0x2c
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	e04e      	b.n	8003b42 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d136      	bne.n	8003b18 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	33b0      	adds	r3, #176	; 0xb0
 8003aae:	f107 0410 	add.w	r4, r7, #16
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f107 0310 	add.w	r3, r7, #16
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ffb4 	bl	8003a32 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8003aca:	230f      	movs	r3, #15
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	e01e      	b.n	8003b0e <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	33b0      	adds	r3, #176	; 0xb0
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2bff      	cmp	r3, #255	; 0xff
 8003adc:	d106      	bne.n	8003aec <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	33b0      	adds	r3, #176	; 0xb0
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
          continue;
 8003aea:	e00d      	b.n	8003b08 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	4413      	add	r3, r2
 8003af2:	33b0      	adds	r3, #176	; 0xb0
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	b2d9      	uxtb	r1, r3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	4413      	add	r3, r2
 8003b00:	33b0      	adds	r3, #176	; 0xb0
 8003b02:	460a      	mov	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
        break;
 8003b06:	e005      	b.n	8003b14 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dadd      	bge.n	8003ad0 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	4413      	add	r3, r2
 8003b1e:	7819      	ldrb	r1, [r3, #0]
 8003b20:	f107 0210 	add.w	r2, r7, #16
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	4413      	add	r3, r2
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68b8      	ldr	r0, [r7, #8]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	4403      	add	r3, r0
 8003b30:	404a      	eors	r2, r1
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	3301      	adds	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3ac      	bcc.n	8003aa4 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	372c      	adds	r7, #44	; 0x2c
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b58:	f000 fc10 	bl	800437c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b5c:	f000 f87c 	bl	8003c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b60:	f000 f950 	bl	8003e04 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 8003b64:	f000 f8ee 	bl	8003d44 <MX_SPI1_Init>
  //MX_TIM1_Init();
  MX_I2C1_Init();
 8003b68:	f000 f8be 	bl	8003ce8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003b6c:	f000 f920 	bl	8003db0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8003b70:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <main+0xec>)
 8003b72:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <main+0xf0>)
 8003b74:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8003b76:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <main+0xec>)
 8003b78:	2202      	movs	r2, #2
 8003b7a:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8003b7c:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <main+0xec>)
 8003b7e:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <main+0xf4>)
 8003b80:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8003b82:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <main+0xec>)
 8003b84:	2210      	movs	r2, #16
 8003b86:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <main+0xec>)
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <main+0xf0>)
 8003b8c:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <main+0xec>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <main+0xec>)
 8003b96:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <main+0xf8>)
 8003b98:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <main+0xfc>)
 8003b9c:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <main+0xec>)
 8003b9e:	601a      	str	r2, [r3, #0]
  /*GW Config Init first to get the config */
  GW_Config_Init();
 8003ba0:	f7fd fcaa 	bl	80014f8 <GW_Config_Init>
  ReceiveFWUpdate_Init();
 8003ba4:	f7fd fe76 	bl	8001894 <ReceiveFWUpdate_Init>
  Encrypt_Address_Read_Init();
 8003ba8:	f7fc fed0 	bl	800094c <Encrypt_Address_Read_Init>
  UI_Init();
 8003bac:	f7ff f93e 	bl	8002e2c <UI_Init>
  //Test Flash
  RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f7fd fcef 	bl	8001594 <Rte_SystemState_WriteData>
  RTE_RUNNABLE_APP_VER_WriteData(0x012);
 8003bb6:	2012      	movs	r0, #18
 8003bb8:	f7fd fd4c 	bl	8001654 <Rte_ApplVer_WriteData>
  RTE_RUNNABLE_NODE_ADDR_WriteData(0x01);
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f7fd fd6d 	bl	800169c <Rte_NodeAddr_WriteData>
  RTE_RUNNABLE_CODE_SIZE_WriteData(0x6D58);
 8003bc2:	f646 5058 	movw	r0, #27992	; 0x6d58
 8003bc6:	f7fd fd57 	bl	8001678 <Rte_CodeSize_WriteData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State For Flashing
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8003bca:	4822      	ldr	r0, [pc, #136]	; (8003c54 <main+0x100>)
 8003bcc:	f7fd fcf4 	bl	80015b8 <Rte_SystemState_ReadData>
	  switch (SysTem_State)
 8003bd0:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <main+0x100>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3b02      	subs	r3, #2
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d82d      	bhi.n	8003c36 <main+0xe2>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <main+0x8c>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003c03 	.word	0x08003c03
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	08003c31 	.word	0x08003c31
	  {


		case SYS_RECEIVE_UPDATE:
			ReceiveFWUpdate_MainFunc();
 8003bfc:	f7fd fea4 	bl	8001948 <ReceiveFWUpdate_MainFunc>
			break;
 8003c00:	e01a      	b.n	8003c38 <main+0xe4>
		case SYS_REQUEST_OTA:
			UI_Main_FLASHING();
 8003c02:	f7ff f92f 	bl	8002e64 <UI_Main_FLASHING>
			Send_Start_OTA();
 8003c06:	f7fd f9ad 	bl	8000f64 <Send_Start_OTA>
			break;
 8003c0a:	e015      	b.n	8003c38 <main+0xe4>
		case SYS_WAIT_ACCEPT_OTA:
			UI_Main_FLASHING();
 8003c0c:	f7ff f92a 	bl	8002e64 <UI_Main_FLASHING>
			Wait_Start_OTA();
 8003c10:	f7fd f9c8 	bl	8000fa4 <Wait_Start_OTA>
			break;
 8003c14:	e010      	b.n	8003c38 <main+0xe4>
		case SYS_CONFIG_LORA:
			UI_Main_FLASHING();
 8003c16:	f7ff f925 	bl	8002e64 <UI_Main_FLASHING>
			FL_FlashLoRa_INIT();
 8003c1a:	f7fd f9f1 	bl	8001000 <FL_FlashLoRa_INIT>
			break;
 8003c1e:	e00b      	b.n	8003c38 <main+0xe4>
		case SYS_ENCRYPT_FW:
			Encrypt_MainFunc();
 8003c20:	f7fc fea2 	bl	8000968 <Encrypt_MainFunc>
			break;
 8003c24:	e008      	b.n	8003c38 <main+0xe4>
		case SYS_SEND_UPDATE:
			UI_Main_FLASHING();
 8003c26:	f7ff f91d 	bl	8002e64 <UI_Main_FLASHING>
			FL_PacketLoRaSend_START();
 8003c2a:	f7fd fac1 	bl	80011b0 <FL_PacketLoRaSend_START>
			break;
 8003c2e:	e003      	b.n	8003c38 <main+0xe4>
		case SYS_DONE_UPDATE:
			FL_PacketLoRaDone_OTA();
 8003c30:	f7fd fba2 	bl	8001378 <FL_PacketLoRaDone_OTA>
			break;
 8003c34:	e000      	b.n	8003c38 <main+0xe4>
		default:
			break;
 8003c36:	bf00      	nop
	  }
	  UI_Main_FLASHING();
 8003c38:	f7ff f914 	bl	8002e64 <UI_Main_FLASHING>
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8003c3c:	e7c5      	b.n	8003bca <main+0x76>
 8003c3e:	bf00      	nop
 8003c40:	2000126c 	.word	0x2000126c
 8003c44:	40010c00 	.word	0x40010c00
 8003c48:	40010800 	.word	0x40010800
 8003c4c:	200011cc 	.word	0x200011cc
 8003c50:	20001288 	.word	0x20001288
 8003c54:	200013a8 	.word	0x200013a8

08003c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c5e:	f107 0318 	add.w	r3, r7, #24
 8003c62:	2228      	movs	r2, #40	; 0x28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 f9e4 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003c7a:	2309      	movs	r3, #9
 8003c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c90:	2302      	movs	r3, #2
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ca0:	f107 0318 	add.w	r3, r7, #24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 feab 	bl	8005a00 <HAL_RCC_OscConfig>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003cb0:	f000 f970 	bl	8003f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cb4:	230f      	movs	r3, #15
 8003cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 f918 	bl	8005f04 <HAL_RCC_ClockConfig>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003cda:	f000 f95b 	bl	8003f94 <Error_Handler>
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3740      	adds	r7, #64	; 0x40
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <MX_I2C1_Init+0x54>)
 8003cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <MX_I2C1_Init+0x58>)
 8003cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d24:	4804      	ldr	r0, [pc, #16]	; (8003d38 <MX_I2C1_Init+0x50>)
 8003d26:	f001 f8a1 	bl	8004e6c <HAL_I2C_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d30:	f000 f930 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20001178 	.word	0x20001178
 8003d3c:	40005400 	.word	0x40005400
 8003d40:	00061a80 	.word	0x00061a80

08003d44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d4a:	4a18      	ldr	r2, [pc, #96]	; (8003dac <MX_SPI1_Init+0x68>)
 8003d4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d78:	2210      	movs	r2, #16
 8003d7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d90:	220a      	movs	r2, #10
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d94:	4804      	ldr	r0, [pc, #16]	; (8003da8 <MX_SPI1_Init+0x64>)
 8003d96:	f002 fa43 	bl	8006220 <HAL_SPI_Init>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003da0:	f000 f8f8 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200011cc 	.word	0x200011cc
 8003dac:	40013000 	.word	0x40013000

08003db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <MX_USART2_UART_Init+0x50>)
 8003db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003de6:	4805      	ldr	r0, [pc, #20]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003de8:	f002 fe44 	bl	8006a74 <HAL_UART_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003df2:	f000 f8cf 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20001224 	.word	0x20001224
 8003e00:	40004400 	.word	0x40004400

08003e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e18:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6193      	str	r3, [r2, #24]
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	6193      	str	r3, [r2, #24]
 8003e3c:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e48:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	6193      	str	r3, [r2, #24]
 8003e54:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6193      	str	r3, [r2, #24]
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <MX_GPIO_Init+0x11c>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e7e:	4829      	ldr	r0, [pc, #164]	; (8003f24 <MX_GPIO_Init+0x120>)
 8003e80:	f000 ffab 	bl	8004dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8003e84:	2200      	movs	r2, #0
 8003e86:	2110      	movs	r1, #16
 8003e88:	4827      	ldr	r0, [pc, #156]	; (8003f28 <MX_GPIO_Init+0x124>)
 8003e8a:	f000 ffa6 	bl	8004dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|DIO0_Pin|MODE_Pin, GPIO_PIN_RESET);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2107      	movs	r1, #7
 8003e92:	4826      	ldr	r0, [pc, #152]	; (8003f2c <MX_GPIO_Init+0x128>)
 8003e94:	f000 ffa1 	bl	8004dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eaa:	f107 0310 	add.w	r3, r7, #16
 8003eae:	4619      	mov	r1, r3
 8003eb0:	481c      	ldr	r0, [pc, #112]	; (8003f24 <MX_GPIO_Init+0x120>)
 8003eb2:	f000 fdf7 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	f107 0310 	add.w	r3, r7, #16
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4816      	ldr	r0, [pc, #88]	; (8003f28 <MX_GPIO_Init+0x124>)
 8003ece:	f000 fde9 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin DIO0_Pin MODE_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|DIO0_Pin|MODE_Pin;
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	f107 0310 	add.w	r3, r7, #16
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4810      	ldr	r0, [pc, #64]	; (8003f2c <MX_GPIO_Init+0x128>)
 8003eea:	f000 fddb 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_GPIO_Init+0x12c>)
 8003ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	4619      	mov	r1, r3
 8003f02:	4809      	ldr	r0, [pc, #36]	; (8003f28 <MX_GPIO_Init+0x124>)
 8003f04:	f000 fdce 	bl	8004aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	2017      	movs	r0, #23
 8003f0e:	f000 fb92 	bl	8004636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f12:	2017      	movs	r0, #23
 8003f14:	f000 fbab 	bl	800466e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f18:	bf00      	nop
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40011000 	.word	0x40011000
 8003f28:	40010800 	.word	0x40010800
 8003f2c:	40010c00 	.word	0x40010c00
 8003f30:	10110000 	.word	0x10110000

08003f34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
	CounterOutsite++;
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x50>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x50>)
 8003f46:	6013      	str	r3, [r2, #0]
	currentMillis = HAL_GetTick();
 8003f48:	f000 fa70 	bl	800442c <HAL_GetTick>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x54>)
 8003f50:	6013      	str	r3, [r2, #0]
	if(GPIO_Pin == BTN_EXT_Pin_8 && (currentMillis - previousMillis > 10)){
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d10f      	bne.n	8003f7a <HAL_GPIO_EXTI_Callback+0x46>
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x54>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_GPIO_EXTI_Callback+0x58>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b0a      	cmp	r3, #10
 8003f66:	d908      	bls.n	8003f7a <HAL_GPIO_EXTI_Callback+0x46>
		HAL_GPIO_TogglePin(GPIOB, BTN_EXT_Pin_8);
 8003f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f6c:	4808      	ldr	r0, [pc, #32]	; (8003f90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003f6e:	f000 ff4c 	bl	8004e0a <HAL_GPIO_TogglePin>
		previousMillis = currentMillis;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_GPIO_EXTI_Callback+0x58>)
 8003f78:	6013      	str	r3, [r2, #0]

	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200013a4 	.word	0x200013a4
 8003f88:	200013a0 	.word	0x200013a0
 8003f8c:	2000139c 	.word	0x2000139c
 8003f90:	40010c00 	.word	0x40010c00

08003f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f98:	b672      	cpsid	i
}
 8003f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <Error_Handler+0x8>

08003f9e <copy_Array>:
 *      Author: quang
 */

#include "operation.h"

void copy_Array(uint8* a , uint8* b , uint32 size){
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
	// Start Position is the 4th of a
	uint8* prtA = a + 16 ;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3310      	adds	r3, #16
 8003fae:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
 8003fb4:	e00a      	b.n	8003fcc <copy_Array+0x2e>
		*(prtA++) = *(b++);
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	1c53      	adds	r3, r2, #1
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	6179      	str	r1, [r7, #20]
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	74fb      	strb	r3, [r7, #19]
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d8f0      	bhi.n	8003fb6 <copy_Array+0x18>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <copy_Array_BL>:
void copy_Array_BL(uint8* a , uint8* b , uint8 init_val, uint32 size){
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
	uint8* prtB = b + init_val ;
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	74fb      	strb	r3, [r7, #19]
 8003ffc:	e00a      	b.n	8004014 <copy_Array_BL+0x34>
		*(a++) = *(prtB++);
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	1c53      	adds	r3, r2, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	60f9      	str	r1, [r7, #12]
 800400a:	7812      	ldrb	r2, [r2, #0]
 800400c:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	3301      	adds	r3, #1
 8004012:	74fb      	strb	r3, [r7, #19]
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d8f0      	bhi.n	8003ffe <copy_Array_BL+0x1e>
	}
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <clearDataBuffer>:


Return_Operation_t clearDataBuffer(uint8 *buffer , uint32 buffer_size){
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	// Clear buffer size
	memset(buffer, 0x00, buffer_size);
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f002 fffc 	bl	8007034 <memset>
	return DONE;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_MspInit+0x5c>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_MspInit+0x5c>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6193      	str	r3, [r2, #24]
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_MspInit+0x5c>)
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_MspInit+0x5c>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <HAL_MspInit+0x5c>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004070:	61d3      	str	r3, [r2, #28]
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_MspInit+0x5c>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_MspInit+0x60>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_MspInit+0x60>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40010000 	.word	0x40010000

080040ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0310 	add.w	r3, r7, #16
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a15      	ldr	r2, [pc, #84]	; (800411c <HAL_I2C_MspInit+0x70>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d123      	bne.n	8004114 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_I2C_MspInit+0x74>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a13      	ldr	r2, [pc, #76]	; (8004120 <HAL_I2C_MspInit+0x74>)
 80040d2:	f043 0308 	orr.w	r3, r3, #8
 80040d6:	6193      	str	r3, [r2, #24]
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_I2C_MspInit+0x74>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e4:	2312      	movs	r3, #18
 80040e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040e8:	23c0      	movs	r3, #192	; 0xc0
 80040ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	4619      	mov	r1, r3
 80040f6:	480b      	ldr	r0, [pc, #44]	; (8004124 <HAL_I2C_MspInit+0x78>)
 80040f8:	f000 fcd4 	bl	8004aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_I2C_MspInit+0x74>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4a07      	ldr	r2, [pc, #28]	; (8004120 <HAL_I2C_MspInit+0x74>)
 8004102:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004106:	61d3      	str	r3, [r2, #28]
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_I2C_MspInit+0x74>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004114:	bf00      	nop
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40005400 	.word	0x40005400
 8004120:	40021000 	.word	0x40021000
 8004124:	40010c00 	.word	0x40010c00

08004128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_SPI_MspInit+0x88>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d12f      	bne.n	80041a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 800414e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004152:	6193      	str	r3, [r2, #24]
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6193      	str	r3, [r2, #24]
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_SPI_MspInit+0x8c>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004178:	23a0      	movs	r3, #160	; 0xa0
 800417a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004180:	2303      	movs	r3, #3
 8004182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004184:	f107 0310 	add.w	r3, r7, #16
 8004188:	4619      	mov	r1, r3
 800418a:	480b      	ldr	r0, [pc, #44]	; (80041b8 <HAL_SPI_MspInit+0x90>)
 800418c:	f000 fc8a 	bl	8004aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	4619      	mov	r1, r3
 80041a2:	4805      	ldr	r0, [pc, #20]	; (80041b8 <HAL_SPI_MspInit+0x90>)
 80041a4:	f000 fc7e 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041a8:	bf00      	nop
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40013000 	.word	0x40013000
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40010800 	.word	0x40010800

080041bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0310 	add.w	r3, r7, #16
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_UART_MspInit+0x88>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d12f      	bne.n	800423c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_UART_MspInit+0x8c>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_UART_MspInit+0x8c>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e6:	61d3      	str	r3, [r2, #28]
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_UART_MspInit+0x8c>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_UART_MspInit+0x8c>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_UART_MspInit+0x8c>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6193      	str	r3, [r2, #24]
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_UART_MspInit+0x8c>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800420c:	2304      	movs	r3, #4
 800420e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	4619      	mov	r1, r3
 800421e:	480b      	ldr	r0, [pc, #44]	; (800424c <HAL_UART_MspInit+0x90>)
 8004220:	f000 fc40 	bl	8004aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004224:	2308      	movs	r3, #8
 8004226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004230:	f107 0310 	add.w	r3, r7, #16
 8004234:	4619      	mov	r1, r3
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <HAL_UART_MspInit+0x90>)
 8004238:	f000 fc34 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800423c:	bf00      	nop
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40004400 	.word	0x40004400
 8004248:	40021000 	.word	0x40021000
 800424c:	40010800 	.word	0x40010800

08004250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004254:	e7fe      	b.n	8004254 <NMI_Handler+0x4>

08004256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800425a:	e7fe      	b.n	800425a <HardFault_Handler+0x4>

0800425c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004260:	e7fe      	b.n	8004260 <MemManage_Handler+0x4>

08004262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004266:	e7fe      	b.n	8004266 <BusFault_Handler+0x4>

08004268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800426c:	e7fe      	b.n	800426c <UsageFault_Handler+0x4>

0800426e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004296:	f000 f8b7 	bl	8004408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}

0800429e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80042a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042a6:	f000 fdc9 	bl	8004e3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80042aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80042ae:	f000 fdc5 	bl	8004e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c0:	4a14      	ldr	r2, [pc, #80]	; (8004314 <_sbrk+0x5c>)
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <_sbrk+0x60>)
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <_sbrk+0x64>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <_sbrk+0x64>)
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <_sbrk+0x68>)
 80042d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d207      	bcs.n	80042f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e8:	f002 feac 	bl	8007044 <__errno>
 80042ec:	4603      	mov	r3, r0
 80042ee:	220c      	movs	r2, #12
 80042f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	e009      	b.n	800430c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <_sbrk+0x64>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <_sbrk+0x64>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4413      	add	r3, r2
 8004306:	4a05      	ldr	r2, [pc, #20]	; (800431c <_sbrk+0x64>)
 8004308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20005000 	.word	0x20005000
 8004318:	00000400 	.word	0x00000400
 800431c:	200013ac 	.word	0x200013ac
 8004320:	20001520 	.word	0x20001520

08004324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004330:	f7ff fff8 	bl	8004324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004334:	480b      	ldr	r0, [pc, #44]	; (8004364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004336:	490c      	ldr	r1, [pc, #48]	; (8004368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004338:	4a0c      	ldr	r2, [pc, #48]	; (800436c <LoopFillZerobss+0x16>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800434c:	4c09      	ldr	r4, [pc, #36]	; (8004374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800435a:	f002 fe79 	bl	8007050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800435e:	f7ff fbf9 	bl	8003b54 <main>
  bx lr
 8004362:	4770      	bx	lr
  ldr r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004368:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800436c:	08009124 	.word	0x08009124
  ldr r2, =_sbss
 8004370:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004374:	20001520 	.word	0x20001520

08004378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004378:	e7fe      	b.n	8004378 <ADC1_2_IRQHandler>
	...

0800437c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_Init+0x28>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <HAL_Init+0x28>)
 8004386:	f043 0310 	orr.w	r3, r3, #16
 800438a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800438c:	2003      	movs	r0, #3
 800438e:	f000 f947 	bl	8004620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004392:	200f      	movs	r0, #15
 8004394:	f000 f808 	bl	80043a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004398:	f7ff fe56 	bl	8004048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40022000 	.word	0x40022000

080043a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_InitTick+0x54>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_InitTick+0x58>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043be:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f95f 	bl	800468a <HAL_SYSTICK_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00e      	b.n	80043f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d80a      	bhi.n	80043f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043dc:	2200      	movs	r2, #0
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f000 f927 	bl	8004636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e8:	4a06      	ldr	r2, [pc, #24]	; (8004404 <HAL_InitTick+0x5c>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000074 	.word	0x20000074
 8004400:	2000007c 	.word	0x2000007c
 8004404:	20000078 	.word	0x20000078

08004408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_IncTick+0x1c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_IncTick+0x20>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4413      	add	r3, r2
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_IncTick+0x20>)
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	2000007c 	.word	0x2000007c
 8004428:	200013b0 	.word	0x200013b0

0800442c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <HAL_GetTick+0x10>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	200013b0 	.word	0x200013b0

08004440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff fff0 	bl	800442c <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d005      	beq.n	8004466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_Delay+0x44>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004466:	bf00      	nop
 8004468:	f7ff ffe0 	bl	800442c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d8f7      	bhi.n	8004468 <HAL_Delay+0x28>
  {
  }
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000007c 	.word	0x2000007c

08004488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4906      	ldr	r1, [pc, #24]	; (8004520 <__NVIC_EnableIRQ+0x34>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ec:	d301      	bcc.n	80045f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ee:	2301      	movs	r3, #1
 80045f0:	e00f      	b.n	8004612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <SysTick_Config+0x40>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fa:	210f      	movs	r1, #15
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	f7ff ff90 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <SysTick_Config+0x40>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <SysTick_Config+0x40>)
 800460c:	2207      	movs	r2, #7
 800460e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	e000e010 	.word	0xe000e010

08004620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff2d 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004648:	f7ff ff42 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 800464c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff90 	bl	8004578 <NVIC_EncodePriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff5f 	bl	8004524 <__NVIC_SetPriority>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff35 	bl	80044ec <__NVIC_EnableIRQ>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ffa2 	bl	80045dc <SysTick_Config>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_FLASH_Program+0xd8>)
 80046c0:	7e1b      	ldrb	r3, [r3, #24]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_FLASH_Program+0x26>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e054      	b.n	8004774 <HAL_FLASH_Program+0xd0>
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_FLASH_Program+0xd8>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046d4:	f000 f8a8 	bl	8004828 <FLASH_WaitForLastOperation>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d144      	bne.n	800476c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d102      	bne.n	80046ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80046e8:	2301      	movs	r3, #1
 80046ea:	757b      	strb	r3, [r7, #21]
 80046ec:	e007      	b.n	80046fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d102      	bne.n	80046fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80046f4:	2302      	movs	r3, #2
 80046f6:	757b      	strb	r3, [r7, #21]
 80046f8:	e001      	b.n	80046fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80046fa:	2304      	movs	r3, #4
 80046fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80046fe:	2300      	movs	r3, #0
 8004700:	75bb      	strb	r3, [r7, #22]
 8004702:	e02d      	b.n	8004760 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004704:	7dbb      	ldrb	r3, [r7, #22]
 8004706:	005a      	lsls	r2, r3, #1
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	eb02 0c03 	add.w	ip, r2, r3
 800470e:	7dbb      	ldrb	r3, [r7, #22]
 8004710:	0119      	lsls	r1, r3, #4
 8004712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004716:	f1c1 0620 	rsb	r6, r1, #32
 800471a:	f1a1 0020 	sub.w	r0, r1, #32
 800471e:	fa22 f401 	lsr.w	r4, r2, r1
 8004722:	fa03 f606 	lsl.w	r6, r3, r6
 8004726:	4334      	orrs	r4, r6
 8004728:	fa23 f000 	lsr.w	r0, r3, r0
 800472c:	4304      	orrs	r4, r0
 800472e:	fa23 f501 	lsr.w	r5, r3, r1
 8004732:	b2a3      	uxth	r3, r4
 8004734:	4619      	mov	r1, r3
 8004736:	4660      	mov	r0, ip
 8004738:	f000 f85a 	bl	80047f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800473c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004740:	f000 f872 	bl	8004828 <FLASH_WaitForLastOperation>
 8004744:	4603      	mov	r3, r0
 8004746:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_FLASH_Program+0xdc>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <HAL_FLASH_Program+0xdc>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800475a:	7dbb      	ldrb	r3, [r7, #22]
 800475c:	3301      	adds	r3, #1
 800475e:	75bb      	strb	r3, [r7, #22]
 8004760:	7dba      	ldrb	r2, [r7, #22]
 8004762:	7d7b      	ldrb	r3, [r7, #21]
 8004764:	429a      	cmp	r2, r3
 8004766:	d3cd      	bcc.n	8004704 <HAL_FLASH_Program+0x60>
 8004768:	e000      	b.n	800476c <HAL_FLASH_Program+0xc8>
      {
        break;
 800476a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_FLASH_Program+0xd8>)
 800476e:	2200      	movs	r2, #0
 8004770:	761a      	strb	r2, [r3, #24]

  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477c:	200013b8 	.word	0x200013b8
 8004780:	40022000 	.word	0x40022000

08004784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_FLASH_Unlock+0x40>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_FLASH_Unlock+0x40>)
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_FLASH_Unlock+0x44>)
 800479e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_FLASH_Unlock+0x40>)
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_FLASH_Unlock+0x48>)
 80047a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_FLASH_Unlock+0x40>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80047b6:	79fb      	ldrb	r3, [r7, #7]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40022000 	.word	0x40022000
 80047c8:	45670123 	.word	0x45670123
 80047cc:	cdef89ab 	.word	0xcdef89ab

080047d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_FLASH_Lock+0x1c>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	4a04      	ldr	r2, [pc, #16]	; (80047ec <HAL_FLASH_Lock+0x1c>)
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40022000 	.word	0x40022000

080047f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <FLASH_Program_HalfWord+0x30>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <FLASH_Program_HalfWord+0x34>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	4a07      	ldr	r2, [pc, #28]	; (8004824 <FLASH_Program_HalfWord+0x34>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	887a      	ldrh	r2, [r7, #2]
 8004812:	801a      	strh	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	200013b8 	.word	0x200013b8
 8004824:	40022000 	.word	0x40022000

08004828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff fdfc 	bl	800442c <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004836:	e010      	b.n	800485a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d00c      	beq.n	800485a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <FLASH_WaitForLastOperation+0x2e>
 8004846:	f7ff fdf1 	bl	800442c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d201      	bcs.n	800485a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e025      	b.n	80048a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e8      	bne.n	8004838 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 8004874:	2220      	movs	r2, #32
 8004876:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <FLASH_WaitForLastOperation+0x88>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800489c:	f000 f80a 	bl	80048b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40022000 	.word	0x40022000

080048b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80048be:	4b23      	ldr	r3, [pc, #140]	; (800494c <FLASH_SetErrorCode+0x98>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f043 0302 	orr.w	r3, r3, #2
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 80048d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f043 0310 	orr.w	r3, r3, #16
 80048dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <FLASH_SetErrorCode+0x98>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	4a17      	ldr	r2, [pc, #92]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 80048f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <FLASH_SetErrorCode+0x98>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <FLASH_SetErrorCode+0x9c>)
 8004914:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <FLASH_SetErrorCode+0x98>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4a0c      	ldr	r2, [pc, #48]	; (800494c <FLASH_SetErrorCode+0x98>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f240 1201 	movw	r2, #257	; 0x101
 8004928:	4293      	cmp	r3, r2
 800492a:	d106      	bne.n	800493a <FLASH_SetErrorCode+0x86>
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <FLASH_SetErrorCode+0x98>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4a06      	ldr	r2, [pc, #24]	; (800494c <FLASH_SetErrorCode+0x98>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	61d3      	str	r3, [r2, #28]
}  
 8004938:	e002      	b.n	8004940 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800493a:	4a04      	ldr	r2, [pc, #16]	; (800494c <FLASH_SetErrorCode+0x98>)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60d3      	str	r3, [r2, #12]
}  
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40022000 	.word	0x40022000
 8004950:	200013b8 	.word	0x200013b8

08004954 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <HAL_FLASHEx_Erase+0xd0>)
 8004968:	7e1b      	ldrb	r3, [r3, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_FLASHEx_Erase+0x1e>
 800496e:	2302      	movs	r3, #2
 8004970:	e053      	b.n	8004a1a <HAL_FLASHEx_Erase+0xc6>
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <HAL_FLASHEx_Erase+0xd0>)
 8004974:	2201      	movs	r2, #1
 8004976:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d116      	bne.n	80049ae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004984:	f7ff ff50 	bl	8004828 <FLASH_WaitForLastOperation>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d141      	bne.n	8004a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800498e:	2001      	movs	r0, #1
 8004990:	f000 f84c 	bl	8004a2c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004998:	f7ff ff46 	bl	8004828 <FLASH_WaitForLastOperation>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_FLASHEx_Erase+0xd4>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	4a20      	ldr	r2, [pc, #128]	; (8004a28 <HAL_FLASHEx_Erase+0xd4>)
 80049a6:	f023 0304 	bic.w	r3, r3, #4
 80049aa:	6113      	str	r3, [r2, #16]
 80049ac:	e031      	b.n	8004a12 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80049ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049b2:	f7ff ff39 	bl	8004828 <FLASH_WaitForLastOperation>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d12a      	bne.n	8004a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f04f 32ff 	mov.w	r2, #4294967295
 80049c2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	e019      	b.n	8004a00 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f000 f849 	bl	8004a64 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049d6:	f7ff ff27 	bl	8004828 <FLASH_WaitForLastOperation>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_FLASHEx_Erase+0xd4>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_FLASHEx_Erase+0xd4>)
 80049e4:	f023 0302 	bic.w	r3, r3, #2
 80049e8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	601a      	str	r2, [r3, #0]
            break;
 80049f6:	e00c      	b.n	8004a12 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	029a      	lsls	r2, r3, #10
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3dc      	bcc.n	80049cc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a12:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_FLASHEx_Erase+0xd0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	761a      	strb	r2, [r3, #24]

  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200013b8 	.word	0x200013b8
 8004a28:	40022000 	.word	0x40022000

08004a2c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <FLASH_MassErase+0x30>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <FLASH_MassErase+0x34>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <FLASH_MassErase+0x34>)
 8004a40:	f043 0304 	orr.w	r3, r3, #4
 8004a44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <FLASH_MassErase+0x34>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <FLASH_MassErase+0x34>)
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	200013b8 	.word	0x200013b8
 8004a60:	40022000 	.word	0x40022000

08004a64 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <FLASH_PageErase+0x38>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <FLASH_PageErase+0x3c>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <FLASH_PageErase+0x3c>)
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <FLASH_PageErase+0x3c>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <FLASH_PageErase+0x3c>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <FLASH_PageErase+0x3c>)
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	200013b8 	.word	0x200013b8
 8004aa0:	40022000 	.word	0x40022000

08004aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab6:	e169      	b.n	8004d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ab8:	2201      	movs	r2, #1
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	f040 8158 	bne.w	8004d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a9a      	ldr	r2, [pc, #616]	; (8004d44 <HAL_GPIO_Init+0x2a0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d05e      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004ae0:	4a98      	ldr	r2, [pc, #608]	; (8004d44 <HAL_GPIO_Init+0x2a0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d875      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004ae6:	4a98      	ldr	r2, [pc, #608]	; (8004d48 <HAL_GPIO_Init+0x2a4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d058      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004aec:	4a96      	ldr	r2, [pc, #600]	; (8004d48 <HAL_GPIO_Init+0x2a4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d86f      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004af2:	4a96      	ldr	r2, [pc, #600]	; (8004d4c <HAL_GPIO_Init+0x2a8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d052      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004af8:	4a94      	ldr	r2, [pc, #592]	; (8004d4c <HAL_GPIO_Init+0x2a8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d869      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004afe:	4a94      	ldr	r2, [pc, #592]	; (8004d50 <HAL_GPIO_Init+0x2ac>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04c      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004b04:	4a92      	ldr	r2, [pc, #584]	; (8004d50 <HAL_GPIO_Init+0x2ac>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d863      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b0a:	4a92      	ldr	r2, [pc, #584]	; (8004d54 <HAL_GPIO_Init+0x2b0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d046      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
 8004b10:	4a90      	ldr	r2, [pc, #576]	; (8004d54 <HAL_GPIO_Init+0x2b0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d85d      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b16:	2b12      	cmp	r3, #18
 8004b18:	d82a      	bhi.n	8004b70 <HAL_GPIO_Init+0xcc>
 8004b1a:	2b12      	cmp	r3, #18
 8004b1c:	d859      	bhi.n	8004bd2 <HAL_GPIO_Init+0x12e>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_GPIO_Init+0x80>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b9f 	.word	0x08004b9f
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004b8b 	.word	0x08004b8b
 8004b30:	08004bcd 	.word	0x08004bcd
 8004b34:	08004bd3 	.word	0x08004bd3
 8004b38:	08004bd3 	.word	0x08004bd3
 8004b3c:	08004bd3 	.word	0x08004bd3
 8004b40:	08004bd3 	.word	0x08004bd3
 8004b44:	08004bd3 	.word	0x08004bd3
 8004b48:	08004bd3 	.word	0x08004bd3
 8004b4c:	08004bd3 	.word	0x08004bd3
 8004b50:	08004bd3 	.word	0x08004bd3
 8004b54:	08004bd3 	.word	0x08004bd3
 8004b58:	08004bd3 	.word	0x08004bd3
 8004b5c:	08004bd3 	.word	0x08004bd3
 8004b60:	08004bd3 	.word	0x08004bd3
 8004b64:	08004bd3 	.word	0x08004bd3
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	4a79      	ldr	r2, [pc, #484]	; (8004d58 <HAL_GPIO_Init+0x2b4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b76:	e02c      	b.n	8004bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	623b      	str	r3, [r7, #32]
          break;
 8004b7e:	e029      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	623b      	str	r3, [r7, #32]
          break;
 8004b88:	e024      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	623b      	str	r3, [r7, #32]
          break;
 8004b92:	e01f      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	623b      	str	r3, [r7, #32]
          break;
 8004b9c:	e01a      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	623b      	str	r3, [r7, #32]
          break;
 8004baa:	e013      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	611a      	str	r2, [r3, #16]
          break;
 8004bbe:	e009      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	615a      	str	r2, [r3, #20]
          break;
 8004bca:	e003      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
          break;
 8004bd0:	e000      	b.n	8004bd4 <HAL_GPIO_Init+0x130>
          break;
 8004bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2bff      	cmp	r3, #255	; 0xff
 8004bd8:	d801      	bhi.n	8004bde <HAL_GPIO_Init+0x13a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	e001      	b.n	8004be2 <HAL_GPIO_Init+0x13e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2bff      	cmp	r3, #255	; 0xff
 8004be8:	d802      	bhi.n	8004bf0 <HAL_GPIO_Init+0x14c>
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	e002      	b.n	8004bf6 <HAL_GPIO_Init+0x152>
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	3b08      	subs	r3, #8
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	210f      	movs	r1, #15
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	401a      	ands	r2, r3
 8004c08:	6a39      	ldr	r1, [r7, #32]
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80b1 	beq.w	8004d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_GPIO_Init+0x2b8>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <HAL_GPIO_Init+0x2b8>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6193      	str	r3, [r2, #24]
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_GPIO_Init+0x2b8>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c3c:	4a48      	ldr	r2, [pc, #288]	; (8004d60 <HAL_GPIO_Init+0x2bc>)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <HAL_GPIO_Init+0x2c0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_GPIO_Init+0x1ec>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <HAL_GPIO_Init+0x2c4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00d      	beq.n	8004c8c <HAL_GPIO_Init+0x1e8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3e      	ldr	r2, [pc, #248]	; (8004d6c <HAL_GPIO_Init+0x2c8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <HAL_GPIO_Init+0x1e4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <HAL_GPIO_Init+0x2cc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_GPIO_Init+0x1e0>
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <HAL_GPIO_Init+0x1ee>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e004      	b.n	8004c92 <HAL_GPIO_Init+0x1ee>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e002      	b.n	8004c92 <HAL_GPIO_Init+0x1ee>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <HAL_GPIO_Init+0x1ee>
 8004c90:	2300      	movs	r3, #0
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	f002 0203 	and.w	r2, r2, #3
 8004c98:	0092      	lsls	r2, r2, #2
 8004c9a:	4093      	lsls	r3, r2
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ca2:	492f      	ldr	r1, [pc, #188]	; (8004d60 <HAL_GPIO_Init+0x2bc>)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	3302      	adds	r3, #2
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	492c      	ldr	r1, [pc, #176]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	608b      	str	r3, [r1, #8]
 8004cc8:	e006      	b.n	8004cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	4928      	ldr	r1, [pc, #160]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	4922      	ldr	r1, [pc, #136]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60cb      	str	r3, [r1, #12]
 8004cf0:	e006      	b.n	8004d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	491e      	ldr	r1, [pc, #120]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d006      	beq.n	8004d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4918      	ldr	r1, [pc, #96]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
 8004d18:	e006      	b.n	8004d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d1a:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	4914      	ldr	r1, [pc, #80]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d021      	beq.n	8004d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	490e      	ldr	r1, [pc, #56]	; (8004d74 <HAL_GPIO_Init+0x2d0>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	e021      	b.n	8004d86 <HAL_GPIO_Init+0x2e2>
 8004d42:	bf00      	nop
 8004d44:	10320000 	.word	0x10320000
 8004d48:	10310000 	.word	0x10310000
 8004d4c:	10220000 	.word	0x10220000
 8004d50:	10210000 	.word	0x10210000
 8004d54:	10120000 	.word	0x10120000
 8004d58:	10110000 	.word	0x10110000
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40010800 	.word	0x40010800
 8004d68:	40010c00 	.word	0x40010c00
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40011400 	.word	0x40011400
 8004d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_GPIO_Init+0x304>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	4909      	ldr	r1, [pc, #36]	; (8004da8 <HAL_GPIO_Init+0x304>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	3301      	adds	r3, #1
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f47f ae8e 	bne.w	8004ab8 <HAL_GPIO_Init+0x14>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	372c      	adds	r7, #44	; 0x2c
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e001      	b.n	8004dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	807b      	strh	r3, [r7, #2]
 8004de6:	4613      	mov	r3, r2
 8004de8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dea:	787b      	ldrb	r3, [r7, #1]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df0:	887a      	ldrh	r2, [r7, #2]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004df6:	e003      	b.n	8004e00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	041a      	lsls	r2, r3, #16
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	611a      	str	r2, [r3, #16]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4013      	ands	r3, r2
 8004e22:	041a      	lsls	r2, r3, #16
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43d9      	mvns	r1, r3
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	611a      	str	r2, [r3, #16]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e52:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f86a 	bl	8003f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40010400 	.word	0x40010400

08004e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e12b      	b.n	80050d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff f90a 	bl	80040ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f001 f960 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 8004ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a81      	ldr	r2, [pc, #516]	; (80050e0 <HAL_I2C_Init+0x274>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d807      	bhi.n	8004ef0 <HAL_I2C_Init+0x84>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_I2C_Init+0x278>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bf94      	ite	ls
 8004ee8:	2301      	movls	r3, #1
 8004eea:	2300      	movhi	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e006      	b.n	8004efe <HAL_I2C_Init+0x92>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a7d      	ldr	r2, [pc, #500]	; (80050e8 <HAL_I2C_Init+0x27c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bf94      	ite	ls
 8004ef8:	2301      	movls	r3, #1
 8004efa:	2300      	movhi	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0e7      	b.n	80050d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a78      	ldr	r2, [pc, #480]	; (80050ec <HAL_I2C_Init+0x280>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0c9b      	lsrs	r3, r3, #18
 8004f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <HAL_I2C_Init+0x274>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d802      	bhi.n	8004f40 <HAL_I2C_Init+0xd4>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	e009      	b.n	8004f54 <HAL_I2C_Init+0xe8>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <HAL_I2C_Init+0x284>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	3301      	adds	r3, #1
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	495c      	ldr	r1, [pc, #368]	; (80050e0 <HAL_I2C_Init+0x274>)
 8004f70:	428b      	cmp	r3, r1
 8004f72:	d819      	bhi.n	8004fa8 <HAL_I2C_Init+0x13c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1e59      	subs	r1, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f82:	1c59      	adds	r1, r3, #1
 8004f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f88:	400b      	ands	r3, r1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_I2C_Init+0x138>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1e59      	subs	r1, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa2:	e051      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	e04f      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d111      	bne.n	8004fd4 <HAL_I2C_Init+0x168>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	440b      	add	r3, r1
 8004fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	e012      	b.n	8004ffa <HAL_I2C_Init+0x18e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1e58      	subs	r0, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	0099      	lsls	r1, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Init+0x196>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e022      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10e      	bne.n	8005028 <HAL_I2C_Init+0x1bc>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1e58      	subs	r0, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	440b      	add	r3, r1
 8005018:	fbb0 f3f3 	udiv	r3, r0, r3
 800501c:	3301      	adds	r3, #1
 800501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	e00f      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1e58      	subs	r0, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	0099      	lsls	r1, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	fbb0 f3f3 	udiv	r3, r0, r3
 800503e:	3301      	adds	r3, #1
 8005040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	6809      	ldr	r1, [r1, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6911      	ldr	r1, [r2, #16]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	4311      	orrs	r1, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	000186a0 	.word	0x000186a0
 80050e4:	001e847f 	.word	0x001e847f
 80050e8:	003d08ff 	.word	0x003d08ff
 80050ec:	431bde83 	.word	0x431bde83
 80050f0:	10624dd3 	.word	0x10624dd3

080050f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	461a      	mov	r2, r3
 8005100:	460b      	mov	r3, r1
 8005102:	817b      	strh	r3, [r7, #10]
 8005104:	4613      	mov	r3, r2
 8005106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7ff f990 	bl	800442c <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b20      	cmp	r3, #32
 8005118:	f040 80e0 	bne.w	80052dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2319      	movs	r3, #25
 8005122:	2201      	movs	r2, #1
 8005124:	4970      	ldr	r1, [pc, #448]	; (80052e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fa92 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	e0d3      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2C_Master_Transmit+0x50>
 8005140:	2302      	movs	r3, #2
 8005142:	e0cc      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d007      	beq.n	800516a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2221      	movs	r2, #33	; 0x21
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2210      	movs	r2, #16
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	893a      	ldrh	r2, [r7, #8]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a50      	ldr	r2, [pc, #320]	; (80052ec <HAL_I2C_Master_Transmit+0x1f8>)
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051ac:	8979      	ldrh	r1, [r7, #10]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f9ca 	bl	800554c <I2C_MasterRequestWrite>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e08d      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051d8:	e066      	b.n	80052a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb50 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d107      	bne.n	8005202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e06b      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d11b      	bne.n	800527c <HAL_I2C_Master_Transmit+0x188>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d017      	beq.n	800527c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	6a39      	ldr	r1, [r7, #32]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fb47 	bl	8005914 <I2C_WaitOnBTFFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2b04      	cmp	r3, #4
 8005292:	d107      	bne.n	80052a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e01a      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d194      	bne.n	80051da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	00100002 	.word	0x00100002
 80052ec:	ffff0000 	.word	0xffff0000

080052f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005300:	f7ff f894 	bl	800442c <HAL_GetTick>
 8005304:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	f040 8111 	bne.w	800553a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2319      	movs	r3, #25
 800531e:	2201      	movs	r2, #1
 8005320:	4988      	ldr	r1, [pc, #544]	; (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f994 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
 8005330:	e104      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_I2C_IsDeviceReady+0x50>
 800533c:	2302      	movs	r3, #2
 800533e:	e0fd      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d007      	beq.n	8005366 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2224      	movs	r2, #36	; 0x24
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a70      	ldr	r2, [pc, #448]	; (8005548 <HAL_I2C_IsDeviceReady+0x258>)
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005398:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f952 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c0:	d103      	bne.n	80053ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0b6      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053de:	f7ff f825 	bl	800442c <HAL_GetTick>
 80053e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005412:	e025      	b.n	8005460 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7ff f80a 	bl	800442c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <HAL_I2C_IsDeviceReady+0x13a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22a0      	movs	r2, #160	; 0xa0
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2ba0      	cmp	r3, #160	; 0xa0
 800546a:	d005      	beq.n	8005478 <HAL_I2C_IsDeviceReady+0x188>
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_I2C_IsDeviceReady+0x188>
 8005472:	7dbb      	ldrb	r3, [r7, #22]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0cd      	beq.n	8005414 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d129      	bne.n	80054e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2319      	movs	r3, #25
 80054ba:	2201      	movs	r2, #1
 80054bc:	4921      	ldr	r1, [pc, #132]	; (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f8c6 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e036      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e02c      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	2319      	movs	r3, #25
 8005502:	2201      	movs	r2, #1
 8005504:	490f      	ldr	r1, [pc, #60]	; (8005544 <HAL_I2C_IsDeviceReady+0x254>)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f8a2 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e012      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3301      	adds	r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	f4ff af32 	bcc.w	800538a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00100002 	.word	0x00100002
 8005548:	ffff0000 	.word	0xffff0000

0800554c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	460b      	mov	r3, r1
 800555a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d006      	beq.n	8005576 <I2C_MasterRequestWrite+0x2a>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d003      	beq.n	8005576 <I2C_MasterRequestWrite+0x2a>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005574:	d108      	bne.n	8005588 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e00b      	b.n	80055a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	2b12      	cmp	r3, #18
 800558e:	d107      	bne.n	80055a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f84f 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c6:	d103      	bne.n	80055d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e035      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055dc:	d108      	bne.n	80055f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	e01b      	b.n	8005628 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	11db      	asrs	r3, r3, #7
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0306 	and.w	r3, r3, #6
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f063 030f 	orn	r3, r3, #15
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	490e      	ldr	r1, [pc, #56]	; (8005648 <I2C_MasterRequestWrite+0xfc>)
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f898 	bl	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e010      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800561e:	897b      	ldrh	r3, [r7, #10]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4907      	ldr	r1, [pc, #28]	; (800564c <I2C_MasterRequestWrite+0x100>)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f888 	bl	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	00010008 	.word	0x00010008
 800564c:	00010002 	.word	0x00010002

08005650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005660:	e048      	b.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d044      	beq.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fe fedf 	bl	800442c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d139      	bne.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10d      	bne.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	43da      	mvns	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4013      	ands	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	e00c      	b.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	43da      	mvns	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4013      	ands	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d116      	bne.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e023      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10d      	bne.n	800571a <I2C_WaitOnFlagUntilTimeout+0xca>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	43da      	mvns	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	e00c      	b.n	8005734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	43da      	mvns	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	429a      	cmp	r2, r3
 8005738:	d093      	beq.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005752:	e071      	b.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005762:	d123      	bne.n	80057ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f043 0204 	orr.w	r2, r3, #4
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e067      	b.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d041      	beq.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b4:	f7fe fe3a 	bl	800442c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d302      	bcc.n	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d136      	bne.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10c      	bne.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	43da      	mvns	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e00b      	b.n	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e021      	b.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d10c      	bne.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	43da      	mvns	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e00b      	b.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	43da      	mvns	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf14      	ite	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2300      	moveq	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f af6d 	bne.w	8005754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005890:	e034      	b.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f886 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e034      	b.n	800590c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d028      	beq.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fe fdbf 	bl	800442c <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11d      	bne.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d016      	beq.n	80058fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e007      	b.n	800590c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b80      	cmp	r3, #128	; 0x80
 8005908:	d1c3      	bne.n	8005892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005920:	e034      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f83e 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e034      	b.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d028      	beq.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7fe fd77 	bl	800442c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11d      	bne.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d016      	beq.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e007      	b.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d1c3      	bne.n	8005922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ba:	d11b      	bne.n	80059f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f043 0204 	orr.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e272      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8087 	beq.w	8005b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a20:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d00c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a2c:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 030c 	and.w	r3, r3, #12
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d112      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5e>
 8005a38:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d10b      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d06c      	beq.n	8005b2c <HAL_RCC_OscConfig+0x12c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d168      	bne.n	8005b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e24c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_OscConfig+0x76>
 8005a68:	4b80      	ldr	r3, [pc, #512]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a7f      	ldr	r2, [pc, #508]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e02e      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x98>
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a7a      	ldr	r2, [pc, #488]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a77      	ldr	r2, [pc, #476]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e01d      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0xbc>
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a71      	ldr	r2, [pc, #452]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e00b      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005abc:	4b6b      	ldr	r3, [pc, #428]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6a      	ldr	r2, [pc, #424]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a67      	ldr	r2, [pc, #412]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fe fca6 	bl	800442c <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fe fca2 	bl	800442c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e200      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	4b5d      	ldr	r3, [pc, #372]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe4>
 8005b02:	e014      	b.n	8005b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fe fc92 	bl	800442c <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fe fc8e 	bl	800442c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e1ec      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1e:	4b53      	ldr	r3, [pc, #332]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x10c>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d063      	beq.n	8005c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b46:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d11c      	bne.n	8005b8c <HAL_RCC_OscConfig+0x18c>
 8005b52:	4b46      	ldr	r3, [pc, #280]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5e:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_RCC_OscConfig+0x176>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e1c0      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b76:	4b3d      	ldr	r3, [pc, #244]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4939      	ldr	r1, [pc, #228]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8a:	e03a      	b.n	8005c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d020      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b94:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fe fc47 	bl	800442c <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba2:	f7fe fc43 	bl	800442c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e1a1      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4927      	ldr	r1, [pc, #156]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]
 8005bd4:	e015      	b.n	8005c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fe fc26 	bl	800442c <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be4:	f7fe fc22 	bl	800442c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e180      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03a      	beq.n	8005c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <HAL_RCC_OscConfig+0x274>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1c:	f7fe fc06 	bl	800442c <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c24:	f7fe fc02 	bl	800442c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e160      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c42:	2001      	movs	r0, #1
 8005c44:	f000 face 	bl	80061e4 <RCC_Delay>
 8005c48:	e01c      	b.n	8005c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_OscConfig+0x274>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c50:	f7fe fbec 	bl	800442c <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c56:	e00f      	b.n	8005c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fe fbe8 	bl	800442c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d908      	bls.n	8005c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e146      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	42420000 	.word	0x42420000
 8005c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e9      	bne.n	8005c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a6 	beq.w	8005dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c96:	4b8b      	ldr	r3, [pc, #556]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4a87      	ldr	r2, [pc, #540]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	61d3      	str	r3, [r2, #28]
 8005cae:	4b85      	ldr	r3, [pc, #532]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d118      	bne.n	8005cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cca:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7e      	ldr	r2, [pc, #504]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd6:	f7fe fba9 	bl	800442c <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fe fba5 	bl	800442c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b64      	cmp	r3, #100	; 0x64
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e103      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	4b75      	ldr	r3, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <HAL_RCC_OscConfig+0x312>
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6213      	str	r3, [r2, #32]
 8005d10:	e02d      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x334>
 8005d1a:	4b6a      	ldr	r3, [pc, #424]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	4a69      	ldr	r2, [pc, #420]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	6213      	str	r3, [r2, #32]
 8005d26:	4b67      	ldr	r3, [pc, #412]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	4a66      	ldr	r2, [pc, #408]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	6213      	str	r3, [r2, #32]
 8005d32:	e01c      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d10c      	bne.n	8005d56 <HAL_RCC_OscConfig+0x356>
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	6213      	str	r3, [r2, #32]
 8005d48:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	6213      	str	r3, [r2, #32]
 8005d54:	e00b      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d56:	4b5b      	ldr	r3, [pc, #364]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4a5a      	ldr	r2, [pc, #360]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6213      	str	r3, [r2, #32]
 8005d62:	4b58      	ldr	r3, [pc, #352]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a57      	ldr	r2, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d015      	beq.n	8005da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d76:	f7fe fb59 	bl	800442c <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fe fb55 	bl	800442c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0b1      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ee      	beq.n	8005d7e <HAL_RCC_OscConfig+0x37e>
 8005da0:	e014      	b.n	8005dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da2:	f7fe fb43 	bl	800442c <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fe fb3f 	bl	800442c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e09b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc0:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ee      	bne.n	8005daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	4b3c      	ldr	r3, [pc, #240]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4a3b      	ldr	r2, [pc, #236]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8087 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d061      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d146      	bne.n	8005e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfc:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e02:	f7fe fb13 	bl	800442c <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e0a:	f7fe fb0f 	bl	800442c <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e06d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e1c:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e30:	d108      	bne.n	8005e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e44:	4b1f      	ldr	r3, [pc, #124]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a19      	ldr	r1, [r3, #32]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	430b      	orrs	r3, r1
 8005e56:	491b      	ldr	r1, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fe fae3 	bl	800442c <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fe fadf 	bl	800442c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x46a>
 8005e88:	e035      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fe facc 	bl	800442c <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fe fac8 	bl	800442c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e026      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x498>
 8005eb6:	e01e      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e019      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x500>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000

08005f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0d0      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f18:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d910      	bls.n	8005f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b67      	ldr	r3, [pc, #412]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 0207 	bic.w	r2, r3, #7
 8005f2e:	4965      	ldr	r1, [pc, #404]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b63      	ldr	r3, [pc, #396]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0b8      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d020      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f60:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f78:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a52      	ldr	r2, [pc, #328]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f84:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	494d      	ldr	r1, [pc, #308]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d040      	beq.n	8006024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	4b47      	ldr	r3, [pc, #284]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e07f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc2:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e073      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e06b      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f023 0203 	bic.w	r2, r3, #3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4936      	ldr	r1, [pc, #216]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff4:	f7fe fa1a 	bl	800442c <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ffc:	f7fe fa16 	bl	800442c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	; 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e053      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 020c 	and.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	429a      	cmp	r2, r3
 8006022:	d1eb      	bne.n	8005ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d210      	bcs.n	8006054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 0207 	bic.w	r2, r3, #7
 800603a:	4922      	ldr	r1, [pc, #136]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e032      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4916      	ldr	r1, [pc, #88]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	490e      	ldr	r1, [pc, #56]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800608e:	4313      	orrs	r3, r2
 8006090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006092:	f000 f821 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006096:	4602      	mov	r2, r0
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	490a      	ldr	r1, [pc, #40]	; (80060cc <HAL_RCC_ClockConfig+0x1c8>)
 80060a4:	5ccb      	ldrb	r3, [r1, r3]
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1cc>)
 80060ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_RCC_ClockConfig+0x1d0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe f978 	bl	80043a8 <HAL_InitTick>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40022000 	.word	0x40022000
 80060c8:	40021000 	.word	0x40021000
 80060cc:	080090b4 	.word	0x080090b4
 80060d0:	20000074 	.word	0x20000074
 80060d4:	20000078 	.word	0x20000078

080060d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	2300      	movs	r3, #0
 80060ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060f2:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_RCC_GetSysClockFreq+0x94>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d002      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0x30>
 8006102:	2b08      	cmp	r3, #8
 8006104:	d003      	beq.n	800610e <HAL_RCC_GetSysClockFreq+0x36>
 8006106:	e027      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006108:	4b19      	ldr	r3, [pc, #100]	; (8006170 <HAL_RCC_GetSysClockFreq+0x98>)
 800610a:	613b      	str	r3, [r7, #16]
      break;
 800610c:	e027      	b.n	800615e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	0c9b      	lsrs	r3, r3, #18
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	4a17      	ldr	r2, [pc, #92]	; (8006174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006118:	5cd3      	ldrb	r3, [r2, r3]
 800611a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d010      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006126:	4b11      	ldr	r3, [pc, #68]	; (800616c <HAL_RCC_GetSysClockFreq+0x94>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	0c5b      	lsrs	r3, r3, #17
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	4a11      	ldr	r2, [pc, #68]	; (8006178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <HAL_RCC_GetSysClockFreq+0x98>)
 800613a:	fb03 f202 	mul.w	r2, r3, r2
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e004      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0c      	ldr	r2, [pc, #48]	; (800617c <HAL_RCC_GetSysClockFreq+0xa4>)
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	613b      	str	r3, [r7, #16]
      break;
 8006156:	e002      	b.n	800615e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_RCC_GetSysClockFreq+0x98>)
 800615a:	613b      	str	r3, [r7, #16]
      break;
 800615c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800615e:	693b      	ldr	r3, [r7, #16]
}
 8006160:	4618      	mov	r0, r3
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	007a1200 	.word	0x007a1200
 8006174:	080090cc 	.word	0x080090cc
 8006178:	080090dc 	.word	0x080090dc
 800617c:	003d0900 	.word	0x003d0900

08006180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <HAL_RCC_GetHCLKFreq+0x10>)
 8006186:	681b      	ldr	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	20000074 	.word	0x20000074

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006198:	f7ff fff2 	bl	8006180 <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4903      	ldr	r1, [pc, #12]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40021000 	.word	0x40021000
 80061b8:	080090c4 	.word	0x080090c4

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c0:	f7ff ffde 	bl	8006180 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	0adb      	lsrs	r3, r3, #11
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40021000 	.word	0x40021000
 80061e0:	080090c4 	.word	0x080090c4

080061e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <RCC_Delay+0x34>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <RCC_Delay+0x38>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006200:	bf00      	nop
  }
  while (Delay --);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	60fa      	str	r2, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f9      	bne.n	8006200 <RCC_Delay+0x1c>
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr
 8006218:	20000074 	.word	0x20000074
 800621c:	10624dd3 	.word	0x10624dd3

08006220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e076      	b.n	8006320 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006242:	d009      	beq.n	8006258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
 800624a:	e005      	b.n	8006258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fd ff58 	bl	8004128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	ea42 0103 	orr.w	r1, r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	0c1a      	lsrs	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f002 0204 	and.w	r2, r2, #4
 80062fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_SPI_Transmit+0x22>
 8006346:	2302      	movs	r3, #2
 8006348:	e12d      	b.n	80065a6 <HAL_SPI_Transmit+0x27e>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006352:	f7fe f86b 	bl	800442c <HAL_GetTick>
 8006356:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d002      	beq.n	800636e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006368:	2302      	movs	r3, #2
 800636a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800636c:	e116      	b.n	800659c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_SPI_Transmit+0x52>
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800637e:	e10d      	b.n	800659c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2203      	movs	r2, #3
 8006384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	88fa      	ldrh	r2, [r7, #6]
 800639e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c6:	d10f      	bne.n	80063e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d007      	beq.n	8006406 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640e:	d14f      	bne.n	80064b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_SPI_Transmit+0xf6>
 8006418:	8afb      	ldrh	r3, [r7, #22]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d142      	bne.n	80064a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	881a      	ldrh	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006442:	e02f      	b.n	80064a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b02      	cmp	r3, #2
 8006450:	d112      	bne.n	8006478 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	881a      	ldrh	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	86da      	strh	r2, [r3, #54]	; 0x36
 8006476:	e015      	b.n	80064a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006478:	f7fd ffd8 	bl	800442c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d803      	bhi.n	8006490 <HAL_SPI_Transmit+0x168>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d102      	bne.n	8006496 <HAL_SPI_Transmit+0x16e>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80064a2:	e07b      	b.n	800659c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1ca      	bne.n	8006444 <HAL_SPI_Transmit+0x11c>
 80064ae:	e050      	b.n	8006552 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit+0x196>
 80064b8:	8afb      	ldrh	r3, [r7, #22]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d144      	bne.n	8006548 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064e4:	e030      	b.n	8006548 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d113      	bne.n	800651c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	86da      	strh	r2, [r3, #54]	; 0x36
 800651a:	e015      	b.n	8006548 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800651c:	f7fd ff86 	bl	800442c <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d803      	bhi.n	8006534 <HAL_SPI_Transmit+0x20c>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d102      	bne.n	800653a <HAL_SPI_Transmit+0x212>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006546:	e029      	b.n	800659c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1c9      	bne.n	80064e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa6e 	bl	8006a38 <SPI_EndRxTxTransaction>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e003      	b.n	800659c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08c      	sub	sp, #48	; 0x30
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065bc:	2301      	movs	r3, #1
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x26>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e198      	b.n	8006906 <HAL_SPI_TransmitReceive+0x358>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065dc:	f7fd ff26 	bl	800442c <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d00f      	beq.n	800661e <HAL_SPI_TransmitReceive+0x70>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006604:	d107      	bne.n	8006616 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <HAL_SPI_TransmitReceive+0x68>
 800660e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006612:	2b04      	cmp	r3, #4
 8006614:	d003      	beq.n	800661e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006616:	2302      	movs	r3, #2
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800661c:	e16d      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x82>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x82>
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006636:	e160      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b04      	cmp	r3, #4
 8006642:	d003      	beq.n	800664c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2205      	movs	r2, #5
 8006648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	887a      	ldrh	r2, [r7, #2]
 8006662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d007      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a8:	d17c      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x10a>
 80066b2:	8b7b      	ldrh	r3, [r7, #26]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d16a      	bne.n	800678e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	881a      	ldrh	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	1c9a      	adds	r2, r3, #2
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066dc:	e057      	b.n	800678e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d11b      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x176>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_SPI_TransmitReceive+0x176>
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d113      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	1c9a      	adds	r2, r3, #2
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d119      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x1b8>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d014      	beq.n	8006766 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	b292      	uxth	r2, r2
 8006748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	1c9a      	adds	r2, r3, #2
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006762:	2301      	movs	r3, #1
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006766:	f7fd fe61 	bl	800442c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006772:	429a      	cmp	r2, r3
 8006774:	d80b      	bhi.n	800678e <HAL_SPI_TransmitReceive+0x1e0>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d007      	beq.n	800678e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800678c:	e0b5      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1a2      	bne.n	80066de <HAL_SPI_TransmitReceive+0x130>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d19d      	bne.n	80066de <HAL_SPI_TransmitReceive+0x130>
 80067a2:	e080      	b.n	80068a6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x204>
 80067ac:	8b7b      	ldrh	r3, [r7, #26]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d16f      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d8:	e05b      	b.n	8006892 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d11c      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x274>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d017      	beq.n	8006822 <HAL_SPI_TransmitReceive+0x274>
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d114      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d119      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x2b6>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006864:	f7fd fde2 	bl	800442c <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006870:	429a      	cmp	r2, r3
 8006872:	d803      	bhi.n	800687c <HAL_SPI_TransmitReceive+0x2ce>
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d102      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x2d4>
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006890:	e033      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d19e      	bne.n	80067da <HAL_SPI_TransmitReceive+0x22c>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d199      	bne.n	80067da <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f8c4 	bl	8006a38 <SPI_EndRxTxTransaction>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068c2:	e01a      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f0:	e003      	b.n	80068fa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006906:	4618      	mov	r0, r3
 8006908:	3730      	adds	r7, #48	; 0x30
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800691c:	b2db      	uxtb	r3, r3
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006938:	f7fd fd78 	bl	800442c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4413      	add	r3, r2
 8006946:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006948:	f7fd fd70 	bl	800442c <HAL_GetTick>
 800694c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800694e:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	015b      	lsls	r3, r3, #5
 8006954:	0d1b      	lsrs	r3, r3, #20
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	fb02 f303 	mul.w	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695e:	e054      	b.n	8006a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d050      	beq.n	8006a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006968:	f7fd fd60 	bl	800442c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	429a      	cmp	r2, r3
 8006976:	d902      	bls.n	800697e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d13d      	bne.n	80069fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800698c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006996:	d111      	bne.n	80069bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a0:	d004      	beq.n	80069ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069aa:	d107      	bne.n	80069bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d10f      	bne.n	80069e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e017      	b.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4013      	ands	r3, r2
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d19b      	bne.n	8006960 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000074 	.word	0x20000074

08006a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff ff6a 	bl	8006928 <SPI_WaitFlagStateUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e000      	b.n	8006a6c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e042      	b.n	8006b0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fd fb8e 	bl	80041bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2224      	movs	r2, #36	; 0x24
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fa0d 	bl	8006ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d16d      	bne.n	8006c10 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_UART_Transmit+0x2c>
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e066      	b.n	8006c12 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2221      	movs	r2, #33	; 0x21
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b52:	f7fd fc6b 	bl	800442c <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6c:	d108      	bne.n	8006b80 <HAL_UART_Transmit+0x6c>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e003      	b.n	8006b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b88:	e02a      	b.n	8006be0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2180      	movs	r1, #128	; 0x80
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f8f7 	bl	8006d88 <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e036      	b.n	8006c12 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e007      	b.n	8006bd2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1cf      	bne.n	8006b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2140      	movs	r1, #64	; 0x40
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f8c7 	bl	8006d88 <UART_WaitOnFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e006      	b.n	8006c12 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b08a      	sub	sp, #40	; 0x28
 8006c1e:	af02      	add	r7, sp, #8
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d17c      	bne.n	8006d34 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_UART_Receive+0x2c>
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e075      	b.n	8006d36 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2222      	movs	r2, #34	; 0x22
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5e:	f7fd fbe5 	bl	800442c <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c78:	d108      	bne.n	8006c8c <HAL_UART_Receive+0x72>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e003      	b.n	8006c94 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c94:	e043      	b.n	8006d1e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f871 	bl	8006d88 <UART_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e042      	b.n	8006d36 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	3302      	adds	r3, #2
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	e01f      	b.n	8006d10 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd8:	d007      	beq.n	8006cea <HAL_UART_Receive+0xd0>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_UART_Receive+0xde>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e008      	b.n	8006d0a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1b6      	bne.n	8006c96 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d112      	bne.n	8006d7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Receive_IT+0x26>
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e00b      	b.n	8006d80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f875 	bl	8006e64 <UART_Start_Receive_IT>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	e000      	b.n	8006d80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d7e:	2302      	movs	r3, #2
  }
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b090      	sub	sp, #64	; 0x40
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d98:	e050      	b.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d04c      	beq.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da8:	f7fd fb40 	bl	800442c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d241      	bcs.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e5      	bne.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0c:	623a      	str	r2, [r7, #32]
 8006e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e00f      	b.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4013      	ands	r3, r2
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d09f      	beq.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3740      	adds	r7, #64	; 0x40
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2222      	movs	r2, #34	; 0x22
 8006e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0220 	orr.w	r2, r2, #32
 8006ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
	...

08006ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f12:	f023 030c 	bic.w	r3, r3, #12
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a2c      	ldr	r2, [pc, #176]	; (8006fec <UART_SetConfig+0x114>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d103      	bne.n	8006f48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f40:	f7ff f93c 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	e002      	b.n	8006f4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7ff f924 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009a      	lsls	r2, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <UART_SetConfig+0x118>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	0119      	lsls	r1, r3, #4
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009a      	lsls	r2, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <UART_SetConfig+0x118>)
 8006f86:	fba3 0302 	umull	r0, r3, r3, r2
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2064      	movs	r0, #100	; 0x64
 8006f8e:	fb00 f303 	mul.w	r3, r0, r3
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	3332      	adds	r3, #50	; 0x32
 8006f98:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <UART_SetConfig+0x118>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fa4:	4419      	add	r1, r3
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009a      	lsls	r2, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <UART_SetConfig+0x118>)
 8006fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2064      	movs	r0, #100	; 0x64
 8006fc6:	fb00 f303 	mul.w	r3, r0, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	; 0x32
 8006fd0:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <UART_SetConfig+0x118>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40013800 	.word	0x40013800
 8006ff0:	51eb851f 	.word	0x51eb851f

08006ff4 <siprintf>:
 8006ff4:	b40e      	push	{r1, r2, r3}
 8006ff6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ffa:	b500      	push	{lr}
 8006ffc:	b09c      	sub	sp, #112	; 0x70
 8006ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8007000:	9002      	str	r0, [sp, #8]
 8007002:	9006      	str	r0, [sp, #24]
 8007004:	9107      	str	r1, [sp, #28]
 8007006:	9104      	str	r1, [sp, #16]
 8007008:	4808      	ldr	r0, [pc, #32]	; (800702c <siprintf+0x38>)
 800700a:	4909      	ldr	r1, [pc, #36]	; (8007030 <siprintf+0x3c>)
 800700c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007010:	9105      	str	r1, [sp, #20]
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	a902      	add	r1, sp, #8
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	f000 f99c 	bl	8007354 <_svfiprintf_r>
 800701c:	2200      	movs	r2, #0
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	b01c      	add	sp, #112	; 0x70
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b003      	add	sp, #12
 800702a:	4770      	bx	lr
 800702c:	200000cc 	.word	0x200000cc
 8007030:	ffff0208 	.word	0xffff0208

08007034 <memset>:
 8007034:	4603      	mov	r3, r0
 8007036:	4402      	add	r2, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <__errno>:
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <__errno+0x8>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200000cc 	.word	0x200000cc

08007050 <__libc_init_array>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	2600      	movs	r6, #0
 8007054:	4d0c      	ldr	r5, [pc, #48]	; (8007088 <__libc_init_array+0x38>)
 8007056:	4c0d      	ldr	r4, [pc, #52]	; (800708c <__libc_init_array+0x3c>)
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	42a6      	cmp	r6, r4
 800705e:	d109      	bne.n	8007074 <__libc_init_array+0x24>
 8007060:	f000 fc7a 	bl	8007958 <_init>
 8007064:	2600      	movs	r6, #0
 8007066:	4d0a      	ldr	r5, [pc, #40]	; (8007090 <__libc_init_array+0x40>)
 8007068:	4c0a      	ldr	r4, [pc, #40]	; (8007094 <__libc_init_array+0x44>)
 800706a:	1b64      	subs	r4, r4, r5
 800706c:	10a4      	asrs	r4, r4, #2
 800706e:	42a6      	cmp	r6, r4
 8007070:	d105      	bne.n	800707e <__libc_init_array+0x2e>
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	f855 3b04 	ldr.w	r3, [r5], #4
 8007078:	4798      	blx	r3
 800707a:	3601      	adds	r6, #1
 800707c:	e7ee      	b.n	800705c <__libc_init_array+0xc>
 800707e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007082:	4798      	blx	r3
 8007084:	3601      	adds	r6, #1
 8007086:	e7f2      	b.n	800706e <__libc_init_array+0x1e>
 8007088:	0800911c 	.word	0x0800911c
 800708c:	0800911c 	.word	0x0800911c
 8007090:	0800911c 	.word	0x0800911c
 8007094:	08009120 	.word	0x08009120

08007098 <__retarget_lock_acquire_recursive>:
 8007098:	4770      	bx	lr

0800709a <__retarget_lock_release_recursive>:
 800709a:	4770      	bx	lr

0800709c <memcpy>:
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a4:	d100      	bne.n	80070a8 <memcpy+0xc>
 80070a6:	4770      	bx	lr
 80070a8:	b510      	push	{r4, lr}
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	4291      	cmp	r1, r2
 80070b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b4:	d1f9      	bne.n	80070aa <memcpy+0xe>
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <_free_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4605      	mov	r5, r0
 80070bc:	2900      	cmp	r1, #0
 80070be:	d040      	beq.n	8007142 <_free_r+0x8a>
 80070c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c4:	1f0c      	subs	r4, r1, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfb8      	it	lt
 80070ca:	18e4      	addlt	r4, r4, r3
 80070cc:	f000 f8dc 	bl	8007288 <__malloc_lock>
 80070d0:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <_free_r+0x8c>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	b933      	cbnz	r3, 80070e4 <_free_r+0x2c>
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	6014      	str	r4, [r2, #0]
 80070da:	4628      	mov	r0, r5
 80070dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e0:	f000 b8d8 	b.w	8007294 <__malloc_unlock>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x42>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf01      	itttt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	1809      	addeq	r1, r1, r0
 80070f6:	6021      	streq	r1, [r4, #0]
 80070f8:	e7ed      	b.n	80070d6 <_free_r+0x1e>
 80070fa:	461a      	mov	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b10b      	cbz	r3, 8007104 <_free_r+0x4c>
 8007100:	42a3      	cmp	r3, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x42>
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	1850      	adds	r0, r2, r1
 8007108:	42a0      	cmp	r0, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x6c>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4401      	add	r1, r0
 8007110:	1850      	adds	r0, r2, r1
 8007112:	4283      	cmp	r3, r0
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	d1e0      	bne.n	80070da <_free_r+0x22>
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4408      	add	r0, r1
 800711e:	6010      	str	r0, [r2, #0]
 8007120:	6053      	str	r3, [r2, #4]
 8007122:	e7da      	b.n	80070da <_free_r+0x22>
 8007124:	d902      	bls.n	800712c <_free_r+0x74>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d6      	b.n	80070da <_free_r+0x22>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	1821      	adds	r1, r4, r0
 8007130:	428b      	cmp	r3, r1
 8007132:	bf01      	itttt	eq
 8007134:	6819      	ldreq	r1, [r3, #0]
 8007136:	685b      	ldreq	r3, [r3, #4]
 8007138:	1809      	addeq	r1, r1, r0
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	6054      	str	r4, [r2, #4]
 8007140:	e7cb      	b.n	80070da <_free_r+0x22>
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20001518 	.word	0x20001518

08007148 <sbrk_aligned>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0e      	ldr	r6, [pc, #56]	; (8007184 <sbrk_aligned+0x3c>)
 800714c:	460c      	mov	r4, r1
 800714e:	6831      	ldr	r1, [r6, #0]
 8007150:	4605      	mov	r5, r0
 8007152:	b911      	cbnz	r1, 800715a <sbrk_aligned+0x12>
 8007154:	f000 fbaa 	bl	80078ac <_sbrk_r>
 8007158:	6030      	str	r0, [r6, #0]
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f000 fba5 	bl	80078ac <_sbrk_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d00a      	beq.n	800717c <sbrk_aligned+0x34>
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d007      	beq.n	8007180 <sbrk_aligned+0x38>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fb9a 	bl	80078ac <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d101      	bne.n	8007180 <sbrk_aligned+0x38>
 800717c:	f04f 34ff 	mov.w	r4, #4294967295
 8007180:	4620      	mov	r0, r4
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	2000151c 	.word	0x2000151c

08007188 <_malloc_r>:
 8007188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718c:	1ccd      	adds	r5, r1, #3
 800718e:	f025 0503 	bic.w	r5, r5, #3
 8007192:	3508      	adds	r5, #8
 8007194:	2d0c      	cmp	r5, #12
 8007196:	bf38      	it	cc
 8007198:	250c      	movcc	r5, #12
 800719a:	2d00      	cmp	r5, #0
 800719c:	4607      	mov	r7, r0
 800719e:	db01      	blt.n	80071a4 <_malloc_r+0x1c>
 80071a0:	42a9      	cmp	r1, r5
 80071a2:	d905      	bls.n	80071b0 <_malloc_r+0x28>
 80071a4:	230c      	movs	r3, #12
 80071a6:	2600      	movs	r6, #0
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4630      	mov	r0, r6
 80071ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007284 <_malloc_r+0xfc>
 80071b4:	f000 f868 	bl	8007288 <__malloc_lock>
 80071b8:	f8d8 3000 	ldr.w	r3, [r8]
 80071bc:	461c      	mov	r4, r3
 80071be:	bb5c      	cbnz	r4, 8007218 <_malloc_r+0x90>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7ff ffc0 	bl	8007148 <sbrk_aligned>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	4604      	mov	r4, r0
 80071cc:	d155      	bne.n	800727a <_malloc_r+0xf2>
 80071ce:	f8d8 4000 	ldr.w	r4, [r8]
 80071d2:	4626      	mov	r6, r4
 80071d4:	2e00      	cmp	r6, #0
 80071d6:	d145      	bne.n	8007264 <_malloc_r+0xdc>
 80071d8:	2c00      	cmp	r4, #0
 80071da:	d048      	beq.n	800726e <_malloc_r+0xe6>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	4631      	mov	r1, r6
 80071e0:	4638      	mov	r0, r7
 80071e2:	eb04 0903 	add.w	r9, r4, r3
 80071e6:	f000 fb61 	bl	80078ac <_sbrk_r>
 80071ea:	4581      	cmp	r9, r0
 80071ec:	d13f      	bne.n	800726e <_malloc_r+0xe6>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	4638      	mov	r0, r7
 80071f2:	1a6d      	subs	r5, r5, r1
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7ff ffa7 	bl	8007148 <sbrk_aligned>
 80071fa:	3001      	adds	r0, #1
 80071fc:	d037      	beq.n	800726e <_malloc_r+0xe6>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	442b      	add	r3, r5
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	f8d8 3000 	ldr.w	r3, [r8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d038      	beq.n	800727e <_malloc_r+0xf6>
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	42a2      	cmp	r2, r4
 8007210:	d12b      	bne.n	800726a <_malloc_r+0xe2>
 8007212:	2200      	movs	r2, #0
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	e00f      	b.n	8007238 <_malloc_r+0xb0>
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	1b52      	subs	r2, r2, r5
 800721c:	d41f      	bmi.n	800725e <_malloc_r+0xd6>
 800721e:	2a0b      	cmp	r2, #11
 8007220:	d917      	bls.n	8007252 <_malloc_r+0xca>
 8007222:	1961      	adds	r1, r4, r5
 8007224:	42a3      	cmp	r3, r4
 8007226:	6025      	str	r5, [r4, #0]
 8007228:	bf18      	it	ne
 800722a:	6059      	strne	r1, [r3, #4]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	bf08      	it	eq
 8007230:	f8c8 1000 	streq.w	r1, [r8]
 8007234:	5162      	str	r2, [r4, r5]
 8007236:	604b      	str	r3, [r1, #4]
 8007238:	4638      	mov	r0, r7
 800723a:	f104 060b 	add.w	r6, r4, #11
 800723e:	f000 f829 	bl	8007294 <__malloc_unlock>
 8007242:	f026 0607 	bic.w	r6, r6, #7
 8007246:	1d23      	adds	r3, r4, #4
 8007248:	1af2      	subs	r2, r6, r3
 800724a:	d0ae      	beq.n	80071aa <_malloc_r+0x22>
 800724c:	1b9b      	subs	r3, r3, r6
 800724e:	50a3      	str	r3, [r4, r2]
 8007250:	e7ab      	b.n	80071aa <_malloc_r+0x22>
 8007252:	42a3      	cmp	r3, r4
 8007254:	6862      	ldr	r2, [r4, #4]
 8007256:	d1dd      	bne.n	8007214 <_malloc_r+0x8c>
 8007258:	f8c8 2000 	str.w	r2, [r8]
 800725c:	e7ec      	b.n	8007238 <_malloc_r+0xb0>
 800725e:	4623      	mov	r3, r4
 8007260:	6864      	ldr	r4, [r4, #4]
 8007262:	e7ac      	b.n	80071be <_malloc_r+0x36>
 8007264:	4634      	mov	r4, r6
 8007266:	6876      	ldr	r6, [r6, #4]
 8007268:	e7b4      	b.n	80071d4 <_malloc_r+0x4c>
 800726a:	4613      	mov	r3, r2
 800726c:	e7cc      	b.n	8007208 <_malloc_r+0x80>
 800726e:	230c      	movs	r3, #12
 8007270:	4638      	mov	r0, r7
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	f000 f80e 	bl	8007294 <__malloc_unlock>
 8007278:	e797      	b.n	80071aa <_malloc_r+0x22>
 800727a:	6025      	str	r5, [r4, #0]
 800727c:	e7dc      	b.n	8007238 <_malloc_r+0xb0>
 800727e:	605b      	str	r3, [r3, #4]
 8007280:	deff      	udf	#255	; 0xff
 8007282:	bf00      	nop
 8007284:	20001518 	.word	0x20001518

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_lock+0x8>)
 800728a:	f7ff bf05 	b.w	8007098 <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20001514 	.word	0x20001514

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__malloc_unlock+0x8>)
 8007296:	f7ff bf00 	b.w	800709a <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20001514 	.word	0x20001514

080072a0 <__ssputs_r>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	461f      	mov	r7, r3
 80072a6:	688e      	ldr	r6, [r1, #8]
 80072a8:	4682      	mov	sl, r0
 80072aa:	42be      	cmp	r6, r7
 80072ac:	460c      	mov	r4, r1
 80072ae:	4690      	mov	r8, r2
 80072b0:	680b      	ldr	r3, [r1, #0]
 80072b2:	d82c      	bhi.n	800730e <__ssputs_r+0x6e>
 80072b4:	898a      	ldrh	r2, [r1, #12]
 80072b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072ba:	d026      	beq.n	800730a <__ssputs_r+0x6a>
 80072bc:	6965      	ldr	r5, [r4, #20]
 80072be:	6909      	ldr	r1, [r1, #16]
 80072c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c4:	eba3 0901 	sub.w	r9, r3, r1
 80072c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072cc:	1c7b      	adds	r3, r7, #1
 80072ce:	444b      	add	r3, r9
 80072d0:	106d      	asrs	r5, r5, #1
 80072d2:	429d      	cmp	r5, r3
 80072d4:	bf38      	it	cc
 80072d6:	461d      	movcc	r5, r3
 80072d8:	0553      	lsls	r3, r2, #21
 80072da:	d527      	bpl.n	800732c <__ssputs_r+0x8c>
 80072dc:	4629      	mov	r1, r5
 80072de:	f7ff ff53 	bl	8007188 <_malloc_r>
 80072e2:	4606      	mov	r6, r0
 80072e4:	b360      	cbz	r0, 8007340 <__ssputs_r+0xa0>
 80072e6:	464a      	mov	r2, r9
 80072e8:	6921      	ldr	r1, [r4, #16]
 80072ea:	f7ff fed7 	bl	800709c <memcpy>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	6126      	str	r6, [r4, #16]
 80072fc:	444e      	add	r6, r9
 80072fe:	6026      	str	r6, [r4, #0]
 8007300:	463e      	mov	r6, r7
 8007302:	6165      	str	r5, [r4, #20]
 8007304:	eba5 0509 	sub.w	r5, r5, r9
 8007308:	60a5      	str	r5, [r4, #8]
 800730a:	42be      	cmp	r6, r7
 800730c:	d900      	bls.n	8007310 <__ssputs_r+0x70>
 800730e:	463e      	mov	r6, r7
 8007310:	4632      	mov	r2, r6
 8007312:	4641      	mov	r1, r8
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	f000 faaf 	bl	8007878 <memmove>
 800731a:	2000      	movs	r0, #0
 800731c:	68a3      	ldr	r3, [r4, #8]
 800731e:	1b9b      	subs	r3, r3, r6
 8007320:	60a3      	str	r3, [r4, #8]
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	4433      	add	r3, r6
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732c:	462a      	mov	r2, r5
 800732e:	f000 fadb 	bl	80078e8 <_realloc_r>
 8007332:	4606      	mov	r6, r0
 8007334:	2800      	cmp	r0, #0
 8007336:	d1e0      	bne.n	80072fa <__ssputs_r+0x5a>
 8007338:	4650      	mov	r0, sl
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	f7ff febc 	bl	80070b8 <_free_r>
 8007340:	230c      	movs	r3, #12
 8007342:	f8ca 3000 	str.w	r3, [sl]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	e7e9      	b.n	8007328 <__ssputs_r+0x88>

08007354 <_svfiprintf_r>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	4698      	mov	r8, r3
 800735a:	898b      	ldrh	r3, [r1, #12]
 800735c:	4607      	mov	r7, r0
 800735e:	061b      	lsls	r3, r3, #24
 8007360:	460d      	mov	r5, r1
 8007362:	4614      	mov	r4, r2
 8007364:	b09d      	sub	sp, #116	; 0x74
 8007366:	d50e      	bpl.n	8007386 <_svfiprintf_r+0x32>
 8007368:	690b      	ldr	r3, [r1, #16]
 800736a:	b963      	cbnz	r3, 8007386 <_svfiprintf_r+0x32>
 800736c:	2140      	movs	r1, #64	; 0x40
 800736e:	f7ff ff0b 	bl	8007188 <_malloc_r>
 8007372:	6028      	str	r0, [r5, #0]
 8007374:	6128      	str	r0, [r5, #16]
 8007376:	b920      	cbnz	r0, 8007382 <_svfiprintf_r+0x2e>
 8007378:	230c      	movs	r3, #12
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e0d0      	b.n	8007524 <_svfiprintf_r+0x1d0>
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	616b      	str	r3, [r5, #20]
 8007386:	2300      	movs	r3, #0
 8007388:	9309      	str	r3, [sp, #36]	; 0x24
 800738a:	2320      	movs	r3, #32
 800738c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007390:	2330      	movs	r3, #48	; 0x30
 8007392:	f04f 0901 	mov.w	r9, #1
 8007396:	f8cd 800c 	str.w	r8, [sp, #12]
 800739a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800753c <_svfiprintf_r+0x1e8>
 800739e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a2:	4623      	mov	r3, r4
 80073a4:	469a      	mov	sl, r3
 80073a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073aa:	b10a      	cbz	r2, 80073b0 <_svfiprintf_r+0x5c>
 80073ac:	2a25      	cmp	r2, #37	; 0x25
 80073ae:	d1f9      	bne.n	80073a4 <_svfiprintf_r+0x50>
 80073b0:	ebba 0b04 	subs.w	fp, sl, r4
 80073b4:	d00b      	beq.n	80073ce <_svfiprintf_r+0x7a>
 80073b6:	465b      	mov	r3, fp
 80073b8:	4622      	mov	r2, r4
 80073ba:	4629      	mov	r1, r5
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff ff6f 	bl	80072a0 <__ssputs_r>
 80073c2:	3001      	adds	r0, #1
 80073c4:	f000 80a9 	beq.w	800751a <_svfiprintf_r+0x1c6>
 80073c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ca:	445a      	add	r2, fp
 80073cc:	9209      	str	r2, [sp, #36]	; 0x24
 80073ce:	f89a 3000 	ldrb.w	r3, [sl]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80a1 	beq.w	800751a <_svfiprintf_r+0x1c6>
 80073d8:	2300      	movs	r3, #0
 80073da:	f04f 32ff 	mov.w	r2, #4294967295
 80073de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e2:	f10a 0a01 	add.w	sl, sl, #1
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ee:	931a      	str	r3, [sp, #104]	; 0x68
 80073f0:	4654      	mov	r4, sl
 80073f2:	2205      	movs	r2, #5
 80073f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f8:	4850      	ldr	r0, [pc, #320]	; (800753c <_svfiprintf_r+0x1e8>)
 80073fa:	f000 fa67 	bl	80078cc <memchr>
 80073fe:	9a04      	ldr	r2, [sp, #16]
 8007400:	b9d8      	cbnz	r0, 800743a <_svfiprintf_r+0xe6>
 8007402:	06d0      	lsls	r0, r2, #27
 8007404:	bf44      	itt	mi
 8007406:	2320      	movmi	r3, #32
 8007408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800740c:	0711      	lsls	r1, r2, #28
 800740e:	bf44      	itt	mi
 8007410:	232b      	movmi	r3, #43	; 0x2b
 8007412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007416:	f89a 3000 	ldrb.w	r3, [sl]
 800741a:	2b2a      	cmp	r3, #42	; 0x2a
 800741c:	d015      	beq.n	800744a <_svfiprintf_r+0xf6>
 800741e:	4654      	mov	r4, sl
 8007420:	2000      	movs	r0, #0
 8007422:	f04f 0c0a 	mov.w	ip, #10
 8007426:	9a07      	ldr	r2, [sp, #28]
 8007428:	4621      	mov	r1, r4
 800742a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742e:	3b30      	subs	r3, #48	; 0x30
 8007430:	2b09      	cmp	r3, #9
 8007432:	d94d      	bls.n	80074d0 <_svfiprintf_r+0x17c>
 8007434:	b1b0      	cbz	r0, 8007464 <_svfiprintf_r+0x110>
 8007436:	9207      	str	r2, [sp, #28]
 8007438:	e014      	b.n	8007464 <_svfiprintf_r+0x110>
 800743a:	eba0 0308 	sub.w	r3, r0, r8
 800743e:	fa09 f303 	lsl.w	r3, r9, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	46a2      	mov	sl, r4
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	e7d2      	b.n	80073f0 <_svfiprintf_r+0x9c>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	9103      	str	r1, [sp, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfbb      	ittet	lt
 8007456:	425b      	neglt	r3, r3
 8007458:	f042 0202 	orrlt.w	r2, r2, #2
 800745c:	9307      	strge	r3, [sp, #28]
 800745e:	9307      	strlt	r3, [sp, #28]
 8007460:	bfb8      	it	lt
 8007462:	9204      	strlt	r2, [sp, #16]
 8007464:	7823      	ldrb	r3, [r4, #0]
 8007466:	2b2e      	cmp	r3, #46	; 0x2e
 8007468:	d10c      	bne.n	8007484 <_svfiprintf_r+0x130>
 800746a:	7863      	ldrb	r3, [r4, #1]
 800746c:	2b2a      	cmp	r3, #42	; 0x2a
 800746e:	d134      	bne.n	80074da <_svfiprintf_r+0x186>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	3402      	adds	r4, #2
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	9203      	str	r2, [sp, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	bfb8      	it	lt
 800747e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007540 <_svfiprintf_r+0x1ec>
 8007488:	2203      	movs	r2, #3
 800748a:	4650      	mov	r0, sl
 800748c:	7821      	ldrb	r1, [r4, #0]
 800748e:	f000 fa1d 	bl	80078cc <memchr>
 8007492:	b138      	cbz	r0, 80074a4 <_svfiprintf_r+0x150>
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	9b04      	ldr	r3, [sp, #16]
 8007498:	eba0 000a 	sub.w	r0, r0, sl
 800749c:	4082      	lsls	r2, r0
 800749e:	4313      	orrs	r3, r2
 80074a0:	3401      	adds	r4, #1
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a8:	2206      	movs	r2, #6
 80074aa:	4826      	ldr	r0, [pc, #152]	; (8007544 <_svfiprintf_r+0x1f0>)
 80074ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b0:	f000 fa0c 	bl	80078cc <memchr>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d038      	beq.n	800752a <_svfiprintf_r+0x1d6>
 80074b8:	4b23      	ldr	r3, [pc, #140]	; (8007548 <_svfiprintf_r+0x1f4>)
 80074ba:	bb1b      	cbnz	r3, 8007504 <_svfiprintf_r+0x1b0>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	3307      	adds	r3, #7
 80074c0:	f023 0307 	bic.w	r3, r3, #7
 80074c4:	3308      	adds	r3, #8
 80074c6:	9303      	str	r3, [sp, #12]
 80074c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ca:	4433      	add	r3, r6
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	e768      	b.n	80073a2 <_svfiprintf_r+0x4e>
 80074d0:	460c      	mov	r4, r1
 80074d2:	2001      	movs	r0, #1
 80074d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d8:	e7a6      	b.n	8007428 <_svfiprintf_r+0xd4>
 80074da:	2300      	movs	r3, #0
 80074dc:	f04f 0c0a 	mov.w	ip, #10
 80074e0:	4619      	mov	r1, r3
 80074e2:	3401      	adds	r4, #1
 80074e4:	9305      	str	r3, [sp, #20]
 80074e6:	4620      	mov	r0, r4
 80074e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ec:	3a30      	subs	r2, #48	; 0x30
 80074ee:	2a09      	cmp	r2, #9
 80074f0:	d903      	bls.n	80074fa <_svfiprintf_r+0x1a6>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0c6      	beq.n	8007484 <_svfiprintf_r+0x130>
 80074f6:	9105      	str	r1, [sp, #20]
 80074f8:	e7c4      	b.n	8007484 <_svfiprintf_r+0x130>
 80074fa:	4604      	mov	r4, r0
 80074fc:	2301      	movs	r3, #1
 80074fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007502:	e7f0      	b.n	80074e6 <_svfiprintf_r+0x192>
 8007504:	ab03      	add	r3, sp, #12
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	462a      	mov	r2, r5
 800750a:	4638      	mov	r0, r7
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <_svfiprintf_r+0x1f8>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	f3af 8000 	nop.w
 8007514:	1c42      	adds	r2, r0, #1
 8007516:	4606      	mov	r6, r0
 8007518:	d1d6      	bne.n	80074c8 <_svfiprintf_r+0x174>
 800751a:	89ab      	ldrh	r3, [r5, #12]
 800751c:	065b      	lsls	r3, r3, #25
 800751e:	f53f af2d 	bmi.w	800737c <_svfiprintf_r+0x28>
 8007522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007524:	b01d      	add	sp, #116	; 0x74
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752a:	ab03      	add	r3, sp, #12
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	462a      	mov	r2, r5
 8007530:	4638      	mov	r0, r7
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <_svfiprintf_r+0x1f8>)
 8007534:	a904      	add	r1, sp, #16
 8007536:	f000 f87d 	bl	8007634 <_printf_i>
 800753a:	e7eb      	b.n	8007514 <_svfiprintf_r+0x1c0>
 800753c:	080090de 	.word	0x080090de
 8007540:	080090e4 	.word	0x080090e4
 8007544:	080090e8 	.word	0x080090e8
 8007548:	00000000 	.word	0x00000000
 800754c:	080072a1 	.word	0x080072a1

08007550 <_printf_common>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	4616      	mov	r6, r2
 8007556:	4699      	mov	r9, r3
 8007558:	688a      	ldr	r2, [r1, #8]
 800755a:	690b      	ldr	r3, [r1, #16]
 800755c:	4607      	mov	r7, r0
 800755e:	4293      	cmp	r3, r2
 8007560:	bfb8      	it	lt
 8007562:	4613      	movlt	r3, r2
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800756a:	460c      	mov	r4, r1
 800756c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007570:	b10a      	cbz	r2, 8007576 <_printf_common+0x26>
 8007572:	3301      	adds	r3, #1
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	0699      	lsls	r1, r3, #26
 800757a:	bf42      	ittt	mi
 800757c:	6833      	ldrmi	r3, [r6, #0]
 800757e:	3302      	addmi	r3, #2
 8007580:	6033      	strmi	r3, [r6, #0]
 8007582:	6825      	ldr	r5, [r4, #0]
 8007584:	f015 0506 	ands.w	r5, r5, #6
 8007588:	d106      	bne.n	8007598 <_printf_common+0x48>
 800758a:	f104 0a19 	add.w	sl, r4, #25
 800758e:	68e3      	ldr	r3, [r4, #12]
 8007590:	6832      	ldr	r2, [r6, #0]
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	42ab      	cmp	r3, r5
 8007596:	dc2b      	bgt.n	80075f0 <_printf_common+0xa0>
 8007598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800759c:	1e13      	subs	r3, r2, #0
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	bf18      	it	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	0692      	lsls	r2, r2, #26
 80075a6:	d430      	bmi.n	800760a <_printf_common+0xba>
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d023      	beq.n	80075fe <_printf_common+0xae>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	f003 0306 	and.w	r3, r3, #6
 80075be:	2b04      	cmp	r3, #4
 80075c0:	bf14      	ite	ne
 80075c2:	2500      	movne	r5, #0
 80075c4:	6833      	ldreq	r3, [r6, #0]
 80075c6:	f04f 0600 	mov.w	r6, #0
 80075ca:	bf08      	it	eq
 80075cc:	68e5      	ldreq	r5, [r4, #12]
 80075ce:	f104 041a 	add.w	r4, r4, #26
 80075d2:	bf08      	it	eq
 80075d4:	1aed      	subeq	r5, r5, r3
 80075d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075da:	bf08      	it	eq
 80075dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bfc4      	itt	gt
 80075e4:	1a9b      	subgt	r3, r3, r2
 80075e6:	18ed      	addgt	r5, r5, r3
 80075e8:	42b5      	cmp	r5, r6
 80075ea:	d11a      	bne.n	8007622 <_printf_common+0xd2>
 80075ec:	2000      	movs	r0, #0
 80075ee:	e008      	b.n	8007602 <_printf_common+0xb2>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4652      	mov	r2, sl
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d103      	bne.n	8007606 <_printf_common+0xb6>
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007606:	3501      	adds	r5, #1
 8007608:	e7c1      	b.n	800758e <_printf_common+0x3e>
 800760a:	2030      	movs	r0, #48	; 0x30
 800760c:	18e1      	adds	r1, r4, r3
 800760e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007618:	4422      	add	r2, r4
 800761a:	3302      	adds	r3, #2
 800761c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007620:	e7c2      	b.n	80075a8 <_printf_common+0x58>
 8007622:	2301      	movs	r3, #1
 8007624:	4622      	mov	r2, r4
 8007626:	4649      	mov	r1, r9
 8007628:	4638      	mov	r0, r7
 800762a:	47c0      	blx	r8
 800762c:	3001      	adds	r0, #1
 800762e:	d0e6      	beq.n	80075fe <_printf_common+0xae>
 8007630:	3601      	adds	r6, #1
 8007632:	e7d9      	b.n	80075e8 <_printf_common+0x98>

08007634 <_printf_i>:
 8007634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	7e0f      	ldrb	r7, [r1, #24]
 800763a:	4691      	mov	r9, r2
 800763c:	2f78      	cmp	r7, #120	; 0x78
 800763e:	4680      	mov	r8, r0
 8007640:	460c      	mov	r4, r1
 8007642:	469a      	mov	sl, r3
 8007644:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800764a:	d807      	bhi.n	800765c <_printf_i+0x28>
 800764c:	2f62      	cmp	r7, #98	; 0x62
 800764e:	d80a      	bhi.n	8007666 <_printf_i+0x32>
 8007650:	2f00      	cmp	r7, #0
 8007652:	f000 80d5 	beq.w	8007800 <_printf_i+0x1cc>
 8007656:	2f58      	cmp	r7, #88	; 0x58
 8007658:	f000 80c1 	beq.w	80077de <_printf_i+0x1aa>
 800765c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007664:	e03a      	b.n	80076dc <_printf_i+0xa8>
 8007666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800766a:	2b15      	cmp	r3, #21
 800766c:	d8f6      	bhi.n	800765c <_printf_i+0x28>
 800766e:	a101      	add	r1, pc, #4	; (adr r1, 8007674 <_printf_i+0x40>)
 8007670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007674:	080076cd 	.word	0x080076cd
 8007678:	080076e1 	.word	0x080076e1
 800767c:	0800765d 	.word	0x0800765d
 8007680:	0800765d 	.word	0x0800765d
 8007684:	0800765d 	.word	0x0800765d
 8007688:	0800765d 	.word	0x0800765d
 800768c:	080076e1 	.word	0x080076e1
 8007690:	0800765d 	.word	0x0800765d
 8007694:	0800765d 	.word	0x0800765d
 8007698:	0800765d 	.word	0x0800765d
 800769c:	0800765d 	.word	0x0800765d
 80076a0:	080077e7 	.word	0x080077e7
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	080077a1 	.word	0x080077a1
 80076ac:	0800765d 	.word	0x0800765d
 80076b0:	0800765d 	.word	0x0800765d
 80076b4:	08007809 	.word	0x08007809
 80076b8:	0800765d 	.word	0x0800765d
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	0800765d 	.word	0x0800765d
 80076c4:	0800765d 	.word	0x0800765d
 80076c8:	080077a9 	.word	0x080077a9
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	1d1a      	adds	r2, r3, #4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	602a      	str	r2, [r5, #0]
 80076d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076dc:	2301      	movs	r3, #1
 80076de:	e0a0      	b.n	8007822 <_printf_i+0x1ee>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	0607      	lsls	r7, r0, #24
 80076e6:	f103 0104 	add.w	r1, r3, #4
 80076ea:	6029      	str	r1, [r5, #0]
 80076ec:	d501      	bpl.n	80076f2 <_printf_i+0xbe>
 80076ee:	681e      	ldr	r6, [r3, #0]
 80076f0:	e003      	b.n	80076fa <_printf_i+0xc6>
 80076f2:	0646      	lsls	r6, r0, #25
 80076f4:	d5fb      	bpl.n	80076ee <_printf_i+0xba>
 80076f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	da03      	bge.n	8007706 <_printf_i+0xd2>
 80076fe:	232d      	movs	r3, #45	; 0x2d
 8007700:	4276      	negs	r6, r6
 8007702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007706:	230a      	movs	r3, #10
 8007708:	4859      	ldr	r0, [pc, #356]	; (8007870 <_printf_i+0x23c>)
 800770a:	e012      	b.n	8007732 <_printf_i+0xfe>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	6820      	ldr	r0, [r4, #0]
 8007710:	1d19      	adds	r1, r3, #4
 8007712:	6029      	str	r1, [r5, #0]
 8007714:	0605      	lsls	r5, r0, #24
 8007716:	d501      	bpl.n	800771c <_printf_i+0xe8>
 8007718:	681e      	ldr	r6, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0xee>
 800771c:	0641      	lsls	r1, r0, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0xe4>
 8007720:	881e      	ldrh	r6, [r3, #0]
 8007722:	2f6f      	cmp	r7, #111	; 0x6f
 8007724:	bf0c      	ite	eq
 8007726:	2308      	moveq	r3, #8
 8007728:	230a      	movne	r3, #10
 800772a:	4851      	ldr	r0, [pc, #324]	; (8007870 <_printf_i+0x23c>)
 800772c:	2100      	movs	r1, #0
 800772e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007732:	6865      	ldr	r5, [r4, #4]
 8007734:	2d00      	cmp	r5, #0
 8007736:	bfa8      	it	ge
 8007738:	6821      	ldrge	r1, [r4, #0]
 800773a:	60a5      	str	r5, [r4, #8]
 800773c:	bfa4      	itt	ge
 800773e:	f021 0104 	bicge.w	r1, r1, #4
 8007742:	6021      	strge	r1, [r4, #0]
 8007744:	b90e      	cbnz	r6, 800774a <_printf_i+0x116>
 8007746:	2d00      	cmp	r5, #0
 8007748:	d04b      	beq.n	80077e2 <_printf_i+0x1ae>
 800774a:	4615      	mov	r5, r2
 800774c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007750:	fb03 6711 	mls	r7, r3, r1, r6
 8007754:	5dc7      	ldrb	r7, [r0, r7]
 8007756:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800775a:	4637      	mov	r7, r6
 800775c:	42bb      	cmp	r3, r7
 800775e:	460e      	mov	r6, r1
 8007760:	d9f4      	bls.n	800774c <_printf_i+0x118>
 8007762:	2b08      	cmp	r3, #8
 8007764:	d10b      	bne.n	800777e <_printf_i+0x14a>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	07de      	lsls	r6, r3, #31
 800776a:	d508      	bpl.n	800777e <_printf_i+0x14a>
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	6861      	ldr	r1, [r4, #4]
 8007770:	4299      	cmp	r1, r3
 8007772:	bfde      	ittt	le
 8007774:	2330      	movle	r3, #48	; 0x30
 8007776:	f805 3c01 	strble.w	r3, [r5, #-1]
 800777a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800777e:	1b52      	subs	r2, r2, r5
 8007780:	6122      	str	r2, [r4, #16]
 8007782:	464b      	mov	r3, r9
 8007784:	4621      	mov	r1, r4
 8007786:	4640      	mov	r0, r8
 8007788:	f8cd a000 	str.w	sl, [sp]
 800778c:	aa03      	add	r2, sp, #12
 800778e:	f7ff fedf 	bl	8007550 <_printf_common>
 8007792:	3001      	adds	r0, #1
 8007794:	d14a      	bne.n	800782c <_printf_i+0x1f8>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	b004      	add	sp, #16
 800779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	f043 0320 	orr.w	r3, r3, #32
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	2778      	movs	r7, #120	; 0x78
 80077aa:	4832      	ldr	r0, [pc, #200]	; (8007874 <_printf_i+0x240>)
 80077ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	6829      	ldr	r1, [r5, #0]
 80077b4:	061f      	lsls	r7, r3, #24
 80077b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80077ba:	d402      	bmi.n	80077c2 <_printf_i+0x18e>
 80077bc:	065f      	lsls	r7, r3, #25
 80077be:	bf48      	it	mi
 80077c0:	b2b6      	uxthmi	r6, r6
 80077c2:	07df      	lsls	r7, r3, #31
 80077c4:	bf48      	it	mi
 80077c6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ca:	6029      	str	r1, [r5, #0]
 80077cc:	bf48      	it	mi
 80077ce:	6023      	strmi	r3, [r4, #0]
 80077d0:	b91e      	cbnz	r6, 80077da <_printf_i+0x1a6>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	f023 0320 	bic.w	r3, r3, #32
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	2310      	movs	r3, #16
 80077dc:	e7a6      	b.n	800772c <_printf_i+0xf8>
 80077de:	4824      	ldr	r0, [pc, #144]	; (8007870 <_printf_i+0x23c>)
 80077e0:	e7e4      	b.n	80077ac <_printf_i+0x178>
 80077e2:	4615      	mov	r5, r2
 80077e4:	e7bd      	b.n	8007762 <_printf_i+0x12e>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	6826      	ldr	r6, [r4, #0]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	6961      	ldr	r1, [r4, #20]
 80077ee:	6028      	str	r0, [r5, #0]
 80077f0:	0635      	lsls	r5, r6, #24
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	d501      	bpl.n	80077fa <_printf_i+0x1c6>
 80077f6:	6019      	str	r1, [r3, #0]
 80077f8:	e002      	b.n	8007800 <_printf_i+0x1cc>
 80077fa:	0670      	lsls	r0, r6, #25
 80077fc:	d5fb      	bpl.n	80077f6 <_printf_i+0x1c2>
 80077fe:	8019      	strh	r1, [r3, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	4615      	mov	r5, r2
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	e7bc      	b.n	8007782 <_printf_i+0x14e>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	2100      	movs	r1, #0
 800780c:	1d1a      	adds	r2, r3, #4
 800780e:	602a      	str	r2, [r5, #0]
 8007810:	681d      	ldr	r5, [r3, #0]
 8007812:	6862      	ldr	r2, [r4, #4]
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f859 	bl	80078cc <memchr>
 800781a:	b108      	cbz	r0, 8007820 <_printf_i+0x1ec>
 800781c:	1b40      	subs	r0, r0, r5
 800781e:	6060      	str	r0, [r4, #4]
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	6123      	str	r3, [r4, #16]
 8007824:	2300      	movs	r3, #0
 8007826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782a:	e7aa      	b.n	8007782 <_printf_i+0x14e>
 800782c:	462a      	mov	r2, r5
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	47d0      	blx	sl
 8007836:	3001      	adds	r0, #1
 8007838:	d0ad      	beq.n	8007796 <_printf_i+0x162>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	079b      	lsls	r3, r3, #30
 800783e:	d413      	bmi.n	8007868 <_printf_i+0x234>
 8007840:	68e0      	ldr	r0, [r4, #12]
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	4298      	cmp	r0, r3
 8007846:	bfb8      	it	lt
 8007848:	4618      	movlt	r0, r3
 800784a:	e7a6      	b.n	800779a <_printf_i+0x166>
 800784c:	2301      	movs	r3, #1
 800784e:	4632      	mov	r2, r6
 8007850:	4649      	mov	r1, r9
 8007852:	4640      	mov	r0, r8
 8007854:	47d0      	blx	sl
 8007856:	3001      	adds	r0, #1
 8007858:	d09d      	beq.n	8007796 <_printf_i+0x162>
 800785a:	3501      	adds	r5, #1
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	9903      	ldr	r1, [sp, #12]
 8007860:	1a5b      	subs	r3, r3, r1
 8007862:	42ab      	cmp	r3, r5
 8007864:	dcf2      	bgt.n	800784c <_printf_i+0x218>
 8007866:	e7eb      	b.n	8007840 <_printf_i+0x20c>
 8007868:	2500      	movs	r5, #0
 800786a:	f104 0619 	add.w	r6, r4, #25
 800786e:	e7f5      	b.n	800785c <_printf_i+0x228>
 8007870:	080090ef 	.word	0x080090ef
 8007874:	08009100 	.word	0x08009100

08007878 <memmove>:
 8007878:	4288      	cmp	r0, r1
 800787a:	b510      	push	{r4, lr}
 800787c:	eb01 0402 	add.w	r4, r1, r2
 8007880:	d902      	bls.n	8007888 <memmove+0x10>
 8007882:	4284      	cmp	r4, r0
 8007884:	4623      	mov	r3, r4
 8007886:	d807      	bhi.n	8007898 <memmove+0x20>
 8007888:	1e43      	subs	r3, r0, #1
 800788a:	42a1      	cmp	r1, r4
 800788c:	d008      	beq.n	80078a0 <memmove+0x28>
 800788e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007896:	e7f8      	b.n	800788a <memmove+0x12>
 8007898:	4601      	mov	r1, r0
 800789a:	4402      	add	r2, r0
 800789c:	428a      	cmp	r2, r1
 800789e:	d100      	bne.n	80078a2 <memmove+0x2a>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078aa:	e7f7      	b.n	800789c <memmove+0x24>

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	2300      	movs	r3, #0
 80078b0:	4d05      	ldr	r5, [pc, #20]	; (80078c8 <_sbrk_r+0x1c>)
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fc fcfe 	bl	80042b8 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20001510 	.word	0x20001510

080078cc <memchr>:
 80078cc:	4603      	mov	r3, r0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	b2c9      	uxtb	r1, r1
 80078d2:	4402      	add	r2, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	d101      	bne.n	80078de <memchr+0x12>
 80078da:	2000      	movs	r0, #0
 80078dc:	e003      	b.n	80078e6 <memchr+0x1a>
 80078de:	7804      	ldrb	r4, [r0, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	428c      	cmp	r4, r1
 80078e4:	d1f6      	bne.n	80078d4 <memchr+0x8>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <_realloc_r>:
 80078e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	4680      	mov	r8, r0
 80078ee:	4614      	mov	r4, r2
 80078f0:	460e      	mov	r6, r1
 80078f2:	b921      	cbnz	r1, 80078fe <_realloc_r+0x16>
 80078f4:	4611      	mov	r1, r2
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f7ff bc45 	b.w	8007188 <_malloc_r>
 80078fe:	b92a      	cbnz	r2, 800790c <_realloc_r+0x24>
 8007900:	f7ff fbda 	bl	80070b8 <_free_r>
 8007904:	4625      	mov	r5, r4
 8007906:	4628      	mov	r0, r5
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	f000 f81b 	bl	8007946 <_malloc_usable_size_r>
 8007910:	4284      	cmp	r4, r0
 8007912:	4607      	mov	r7, r0
 8007914:	d802      	bhi.n	800791c <_realloc_r+0x34>
 8007916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800791a:	d812      	bhi.n	8007942 <_realloc_r+0x5a>
 800791c:	4621      	mov	r1, r4
 800791e:	4640      	mov	r0, r8
 8007920:	f7ff fc32 	bl	8007188 <_malloc_r>
 8007924:	4605      	mov	r5, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	d0ed      	beq.n	8007906 <_realloc_r+0x1e>
 800792a:	42bc      	cmp	r4, r7
 800792c:	4622      	mov	r2, r4
 800792e:	4631      	mov	r1, r6
 8007930:	bf28      	it	cs
 8007932:	463a      	movcs	r2, r7
 8007934:	f7ff fbb2 	bl	800709c <memcpy>
 8007938:	4631      	mov	r1, r6
 800793a:	4640      	mov	r0, r8
 800793c:	f7ff fbbc 	bl	80070b8 <_free_r>
 8007940:	e7e1      	b.n	8007906 <_realloc_r+0x1e>
 8007942:	4635      	mov	r5, r6
 8007944:	e7df      	b.n	8007906 <_realloc_r+0x1e>

08007946 <_malloc_usable_size_r>:
 8007946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800794a:	1f18      	subs	r0, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	bfbc      	itt	lt
 8007950:	580b      	ldrlt	r3, [r1, r0]
 8007952:	18c0      	addlt	r0, r0, r3
 8007954:	4770      	bx	lr
	...

08007958 <_init>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr

08007964 <_fini>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	bf00      	nop
 8007968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796a:	bc08      	pop	{r3}
 800796c:	469e      	mov	lr, r3
 800796e:	4770      	bx	lr
