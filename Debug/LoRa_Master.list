
LoRa_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .config_LoRa  00000004  0801fc04  0801fc04  0002fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009ad8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000018ac  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800b494  0800b494  0002fc08  2**0
                  CONTENTS
  5 .ARM          00000008  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800b49c  0800b49c  0002fc08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d0  20000000  0800b4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000018d8  200000d0  0800b574  000200d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200019a8  0800b574  000219a8  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002fc31  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018f78  00000000  00000000  0002fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004200  00000000  00000000  00048bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001858  00000000  00000000  0004cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001362  00000000  00000000  0004e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c243  00000000  00000000  0004f9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f687  00000000  00000000  0006bbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009367a  00000000  00000000  0008b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b7c  00000000  00000000  0011e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012546c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009bd0 	.word	0x08009bd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	08009bd0 	.word	0x08009bd0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_uldivmod>:
 800064c:	b953      	cbnz	r3, 8000664 <__aeabi_uldivmod+0x18>
 800064e:	b94a      	cbnz	r2, 8000664 <__aeabi_uldivmod+0x18>
 8000650:	2900      	cmp	r1, #0
 8000652:	bf08      	it	eq
 8000654:	2800      	cmpeq	r0, #0
 8000656:	bf1c      	itt	ne
 8000658:	f04f 31ff 	movne.w	r1, #4294967295
 800065c:	f04f 30ff 	movne.w	r0, #4294967295
 8000660:	f000 b972 	b.w	8000948 <__aeabi_idiv0>
 8000664:	f1ad 0c08 	sub.w	ip, sp, #8
 8000668:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800066c:	f000 f806 	bl	800067c <__udivmoddi4>
 8000670:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000678:	b004      	add	sp, #16
 800067a:	4770      	bx	lr

0800067c <__udivmoddi4>:
 800067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000680:	9e08      	ldr	r6, [sp, #32]
 8000682:	460d      	mov	r5, r1
 8000684:	4604      	mov	r4, r0
 8000686:	468e      	mov	lr, r1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d14c      	bne.n	8000726 <__udivmoddi4+0xaa>
 800068c:	428a      	cmp	r2, r1
 800068e:	4694      	mov	ip, r2
 8000690:	d967      	bls.n	8000762 <__udivmoddi4+0xe6>
 8000692:	fab2 f382 	clz	r3, r2
 8000696:	b153      	cbz	r3, 80006ae <__udivmoddi4+0x32>
 8000698:	fa02 fc03 	lsl.w	ip, r2, r3
 800069c:	f1c3 0220 	rsb	r2, r3, #32
 80006a0:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a4:	fa20 f202 	lsr.w	r2, r0, r2
 80006a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80006ac:	409c      	lsls	r4, r3
 80006ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b2:	fbbe f1f7 	udiv	r1, lr, r7
 80006b6:	fa1f f58c 	uxth.w	r5, ip
 80006ba:	fb07 ee11 	mls	lr, r7, r1, lr
 80006be:	fb01 f005 	mul.w	r0, r1, r5
 80006c2:	0c22      	lsrs	r2, r4, #16
 80006c4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80006c8:	4290      	cmp	r0, r2
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x66>
 80006cc:	eb1c 0202 	adds.w	r2, ip, r2
 80006d0:	f101 3eff 	add.w	lr, r1, #4294967295
 80006d4:	f080 8119 	bcs.w	800090a <__udivmoddi4+0x28e>
 80006d8:	4290      	cmp	r0, r2
 80006da:	f240 8116 	bls.w	800090a <__udivmoddi4+0x28e>
 80006de:	3902      	subs	r1, #2
 80006e0:	4462      	add	r2, ip
 80006e2:	1a12      	subs	r2, r2, r0
 80006e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80006e8:	fb07 2210 	mls	r2, r7, r0, r2
 80006ec:	fb00 f505 	mul.w	r5, r0, r5
 80006f0:	b2a4      	uxth	r4, r4
 80006f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f6:	42a5      	cmp	r5, r4
 80006f8:	d90a      	bls.n	8000710 <__udivmoddi4+0x94>
 80006fa:	eb1c 0404 	adds.w	r4, ip, r4
 80006fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000702:	f080 8104 	bcs.w	800090e <__udivmoddi4+0x292>
 8000706:	42a5      	cmp	r5, r4
 8000708:	f240 8101 	bls.w	800090e <__udivmoddi4+0x292>
 800070c:	4464      	add	r4, ip
 800070e:	3802      	subs	r0, #2
 8000710:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000714:	2100      	movs	r1, #0
 8000716:	1b64      	subs	r4, r4, r5
 8000718:	b11e      	cbz	r6, 8000722 <__udivmoddi4+0xa6>
 800071a:	40dc      	lsrs	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	e9c6 4300 	strd	r4, r3, [r6]
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0xc0>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80ea 	beq.w	8000904 <__udivmoddi4+0x288>
 8000730:	2100      	movs	r1, #0
 8000732:	e9c6 0500 	strd	r0, r5, [r6]
 8000736:	4608      	mov	r0, r1
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	fab3 f183 	clz	r1, r3
 8000740:	2900      	cmp	r1, #0
 8000742:	d148      	bne.n	80007d6 <__udivmoddi4+0x15a>
 8000744:	42ab      	cmp	r3, r5
 8000746:	d302      	bcc.n	800074e <__udivmoddi4+0xd2>
 8000748:	4282      	cmp	r2, r0
 800074a:	f200 80f8 	bhi.w	800093e <__udivmoddi4+0x2c2>
 800074e:	1a84      	subs	r4, r0, r2
 8000750:	eb65 0203 	sbc.w	r2, r5, r3
 8000754:	2001      	movs	r0, #1
 8000756:	4696      	mov	lr, r2
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0e2      	beq.n	8000722 <__udivmoddi4+0xa6>
 800075c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000760:	e7df      	b.n	8000722 <__udivmoddi4+0xa6>
 8000762:	b902      	cbnz	r2, 8000766 <__udivmoddi4+0xea>
 8000764:	deff      	udf	#255	; 0xff
 8000766:	fab2 f382 	clz	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 808e 	bne.w	800088c <__udivmoddi4+0x210>
 8000770:	1a88      	subs	r0, r1, r2
 8000772:	2101      	movs	r1, #1
 8000774:	0c17      	lsrs	r7, r2, #16
 8000776:	fa1f fe82 	uxth.w	lr, r2
 800077a:	fbb0 f5f7 	udiv	r5, r0, r7
 800077e:	fb07 0015 	mls	r0, r7, r5, r0
 8000782:	0c22      	lsrs	r2, r4, #16
 8000784:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000788:	fb0e f005 	mul.w	r0, lr, r5
 800078c:	4290      	cmp	r0, r2
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x126>
 8000790:	eb1c 0202 	adds.w	r2, ip, r2
 8000794:	f105 38ff 	add.w	r8, r5, #4294967295
 8000798:	d202      	bcs.n	80007a0 <__udivmoddi4+0x124>
 800079a:	4290      	cmp	r0, r2
 800079c:	f200 80cc 	bhi.w	8000938 <__udivmoddi4+0x2bc>
 80007a0:	4645      	mov	r5, r8
 80007a2:	1a12      	subs	r2, r2, r0
 80007a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80007a8:	fb07 2210 	mls	r2, r7, r0, r2
 80007ac:	fb0e fe00 	mul.w	lr, lr, r0
 80007b0:	b2a4      	uxth	r4, r4
 80007b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x150>
 80007ba:	eb1c 0404 	adds.w	r4, ip, r4
 80007be:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14e>
 80007c4:	45a6      	cmp	lr, r4
 80007c6:	f200 80b4 	bhi.w	8000932 <__udivmoddi4+0x2b6>
 80007ca:	4610      	mov	r0, r2
 80007cc:	eba4 040e 	sub.w	r4, r4, lr
 80007d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007d4:	e7a0      	b.n	8000718 <__udivmoddi4+0x9c>
 80007d6:	f1c1 0720 	rsb	r7, r1, #32
 80007da:	408b      	lsls	r3, r1
 80007dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e4:	fa25 fa07 	lsr.w	sl, r5, r7
 80007e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ec:	fbba f8f9 	udiv	r8, sl, r9
 80007f0:	408d      	lsls	r5, r1
 80007f2:	fa20 f307 	lsr.w	r3, r0, r7
 80007f6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007fa:	fa1f fe8c 	uxth.w	lr, ip
 80007fe:	432b      	orrs	r3, r5
 8000800:	fa00 f501 	lsl.w	r5, r0, r1
 8000804:	fb08 f00e 	mul.w	r0, r8, lr
 8000808:	0c1c      	lsrs	r4, r3, #16
 800080a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800080e:	42a0      	cmp	r0, r4
 8000810:	fa02 f201 	lsl.w	r2, r2, r1
 8000814:	d90b      	bls.n	800082e <__udivmoddi4+0x1b2>
 8000816:	eb1c 0404 	adds.w	r4, ip, r4
 800081a:	f108 3aff 	add.w	sl, r8, #4294967295
 800081e:	f080 8086 	bcs.w	800092e <__udivmoddi4+0x2b2>
 8000822:	42a0      	cmp	r0, r4
 8000824:	f240 8083 	bls.w	800092e <__udivmoddi4+0x2b2>
 8000828:	f1a8 0802 	sub.w	r8, r8, #2
 800082c:	4464      	add	r4, ip
 800082e:	1a24      	subs	r4, r4, r0
 8000830:	b298      	uxth	r0, r3
 8000832:	fbb4 f3f9 	udiv	r3, r4, r9
 8000836:	fb09 4413 	mls	r4, r9, r3, r4
 800083a:	fb03 fe0e 	mul.w	lr, r3, lr
 800083e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x1dc>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f103 30ff 	add.w	r0, r3, #4294967295
 800084e:	d26a      	bcs.n	8000926 <__udivmoddi4+0x2aa>
 8000850:	45a6      	cmp	lr, r4
 8000852:	d968      	bls.n	8000926 <__udivmoddi4+0x2aa>
 8000854:	3b02      	subs	r3, #2
 8000856:	4464      	add	r4, ip
 8000858:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800085c:	fba0 9302 	umull	r9, r3, r0, r2
 8000860:	eba4 040e 	sub.w	r4, r4, lr
 8000864:	429c      	cmp	r4, r3
 8000866:	46c8      	mov	r8, r9
 8000868:	469e      	mov	lr, r3
 800086a:	d354      	bcc.n	8000916 <__udivmoddi4+0x29a>
 800086c:	d051      	beq.n	8000912 <__udivmoddi4+0x296>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d067      	beq.n	8000942 <__udivmoddi4+0x2c6>
 8000872:	ebb5 0308 	subs.w	r3, r5, r8
 8000876:	eb64 040e 	sbc.w	r4, r4, lr
 800087a:	40cb      	lsrs	r3, r1
 800087c:	fa04 f707 	lsl.w	r7, r4, r7
 8000880:	431f      	orrs	r7, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c6 7400 	strd	r7, r4, [r6]
 8000888:	2100      	movs	r1, #0
 800088a:	e74a      	b.n	8000722 <__udivmoddi4+0xa6>
 800088c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000890:	f1c3 0020 	rsb	r0, r3, #32
 8000894:	40c1      	lsrs	r1, r0
 8000896:	409d      	lsls	r5, r3
 8000898:	fa24 f000 	lsr.w	r0, r4, r0
 800089c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a0:	4328      	orrs	r0, r5
 80008a2:	fbb1 f5f7 	udiv	r5, r1, r7
 80008a6:	fb07 1115 	mls	r1, r7, r5, r1
 80008aa:	fa1f fe8c 	uxth.w	lr, ip
 80008ae:	0c02      	lsrs	r2, r0, #16
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	fb05 f10e 	mul.w	r1, r5, lr
 80008b8:	4291      	cmp	r1, r2
 80008ba:	fa04 f403 	lsl.w	r4, r4, r3
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x256>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c8:	d22f      	bcs.n	800092a <__udivmoddi4+0x2ae>
 80008ca:	4291      	cmp	r1, r2
 80008cc:	d92d      	bls.n	800092a <__udivmoddi4+0x2ae>
 80008ce:	3d02      	subs	r5, #2
 80008d0:	4462      	add	r2, ip
 80008d2:	1a52      	subs	r2, r2, r1
 80008d4:	fbb2 f1f7 	udiv	r1, r2, r7
 80008d8:	fb07 2211 	mls	r2, r7, r1, r2
 80008dc:	b280      	uxth	r0, r0
 80008de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80008e2:	fb01 f20e 	mul.w	r2, r1, lr
 80008e6:	4282      	cmp	r2, r0
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x280>
 80008ea:	eb1c 0000 	adds.w	r0, ip, r0
 80008ee:	f101 38ff 	add.w	r8, r1, #4294967295
 80008f2:	d216      	bcs.n	8000922 <__udivmoddi4+0x2a6>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	d914      	bls.n	8000922 <__udivmoddi4+0x2a6>
 80008f8:	3902      	subs	r1, #2
 80008fa:	4460      	add	r0, ip
 80008fc:	1a80      	subs	r0, r0, r2
 80008fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000902:	e73a      	b.n	800077a <__udivmoddi4+0xfe>
 8000904:	4631      	mov	r1, r6
 8000906:	4630      	mov	r0, r6
 8000908:	e70b      	b.n	8000722 <__udivmoddi4+0xa6>
 800090a:	4671      	mov	r1, lr
 800090c:	e6e9      	b.n	80006e2 <__udivmoddi4+0x66>
 800090e:	4610      	mov	r0, r2
 8000910:	e6fe      	b.n	8000710 <__udivmoddi4+0x94>
 8000912:	454d      	cmp	r5, r9
 8000914:	d2ab      	bcs.n	800086e <__udivmoddi4+0x1f2>
 8000916:	ebb9 0802 	subs.w	r8, r9, r2
 800091a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800091e:	3801      	subs	r0, #1
 8000920:	e7a5      	b.n	800086e <__udivmoddi4+0x1f2>
 8000922:	4641      	mov	r1, r8
 8000924:	e7ea      	b.n	80008fc <__udivmoddi4+0x280>
 8000926:	4603      	mov	r3, r0
 8000928:	e796      	b.n	8000858 <__udivmoddi4+0x1dc>
 800092a:	4645      	mov	r5, r8
 800092c:	e7d1      	b.n	80008d2 <__udivmoddi4+0x256>
 800092e:	46d0      	mov	r8, sl
 8000930:	e77d      	b.n	800082e <__udivmoddi4+0x1b2>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e749      	b.n	80007cc <__udivmoddi4+0x150>
 8000938:	3d02      	subs	r5, #2
 800093a:	4462      	add	r2, ip
 800093c:	e731      	b.n	80007a2 <__udivmoddi4+0x126>
 800093e:	4608      	mov	r0, r1
 8000940:	e70a      	b.n	8000758 <__udivmoddi4+0xdc>
 8000942:	4631      	mov	r1, r6
 8000944:	e6ed      	b.n	8000722 <__udivmoddi4+0xa6>
 8000946:	bf00      	nop

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <Encrypt_Address_Read_Init>:
static uint32_t gl_u32CRC_FragmentFW;
struct AES_ctx ctx_fw;
struct AES_ctx ctx_fw_des;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void Encrypt_Address_Read_Init(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	gl_ReadAddress = STORE_AREA_START_ADDRESS;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <Encrypt_Address_Read_Init+0x18>)
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <Encrypt_Address_Read_Init+0x1c>)
 8000954:	601a      	str	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_fw_des, AES_CBC_128_Key, AES_CBC_128_IV);
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <Encrypt_Address_Read_Init+0x20>)
 8000958:	4905      	ldr	r1, [pc, #20]	; (8000970 <Encrypt_Address_Read_Init+0x24>)
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <Encrypt_Address_Read_Init+0x28>)
 800095c:	f003 f9b8 	bl	8003cd0 <AES_init_ctx_iv>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000180 	.word	0x20000180
 8000968:	08010000 	.word	0x08010000
 800096c:	20000010 	.word	0x20000010
 8000970:	20000000 	.word	0x20000000
 8000974:	2000024c 	.word	0x2000024c

08000978 <Calculate_CRC_firmware>:
uint32_t Calculate_CRC_firmware(uint8_t *buffer_firmware){
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32CRC_Code = INITIAL_VALUE_ZERO;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
	RCC->AHBENR |=0x40;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <Calculate_CRC_firmware+0x88>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <Calculate_CRC_firmware+0x88>)
 800098a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098e:	6153      	str	r3, [r2, #20]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 8000992:	2201      	movs	r2, #1
 8000994:	609a      	str	r2, [r3, #8]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e024      	b.n	80009e6 <Calculate_CRC_firmware+0x6e>
		/* Calculate CRC */
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3303      	adds	r3, #3
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	061a      	lsls	r2, r3, #24
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	440b      	add	r3, r1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	431a      	orrs	r2, r3
									   |(buffer_firmware[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer_firmware[Local_u8Count*4] <<SHIFT_0_BIT);
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	3301      	adds	r3, #1
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	440b      	add	r3, r1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4313      	orrs	r3, r2
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4611      	mov	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	440a      	add	r2, r1
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	4313      	orrs	r3, r2
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80009d8:	60bb      	str	r3, [r7, #8]
		CRC->DR  = Local_u32CRC_Code;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	6013      	str	r3, [r2, #0]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d9d7      	bls.n	800099c <Calculate_CRC_firmware+0x24>
	}
	Local_u32CRC_Code = CRC->DR;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60bb      	str	r3, [r7, #8]
	return Local_u32CRC_Code;
 80009f2:	68bb      	ldr	r3, [r7, #8]

}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40023000 	.word	0x40023000

08000a08 <Encrypt_MainFunc>:
void Encrypt_MainFunc()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	gl_u32CRC_FragmentFW = INITIAL_VALUE_ZERO;
 8000a0e:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 8000a14:	4842      	ldr	r0, [pc, #264]	; (8000b20 <Encrypt_MainFunc+0x118>)
 8000a16:	f000 ff59 	bl	80018cc <Rte_SystemState_ReadData>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71bb      	strb	r3, [r7, #6]
	retVal = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8000a1e:	4841      	ldr	r0, [pc, #260]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a20:	f001 f88c 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
 8000a24:	4603      	mov	r3, r0
 8000a26:	71bb      	strb	r3, [r7, #6]
	gl_ReadAddress = STORE_AREA_START_ADDRESS +(gl_u16NoPacket-1)*64;
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000a30:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a3a:	601a      	str	r2, [r3, #0]
	//Initialize Cyper IV ctx
	AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <Encrypt_MainFunc+0x124>)
 8000a3e:	493c      	ldr	r1, [pc, #240]	; (8000b30 <Encrypt_MainFunc+0x128>)
 8000a40:	483c      	ldr	r0, [pc, #240]	; (8000b34 <Encrypt_MainFunc+0x12c>)
 8000a42:	f003 f945 	bl	8003cd0 <AES_init_ctx_iv>

	if(RTE_E_OKE == retVal){
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d163      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
		if(SYS_ENCRYPT_FW == gl_u8SystemState){
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <Encrypt_MainFunc+0x118>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	d15f      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e00f      	b.n	8000a7a <Encrypt_MainFunc+0x72>
				gl_u8FwFragment[local_counter] = (*(volatile uint8_t*)(gl_ReadAddress));
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	b2d1      	uxtb	r1, r2
 8000a66:	4a34      	ldr	r2, [pc, #208]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000a68:	54d1      	strb	r1, [r2, r3]
				gl_ReadAddress++;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a72:	6013      	str	r3, [r2, #0]
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	3301      	adds	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7e:	d9ec      	bls.n	8000a5a <Encrypt_MainFunc+0x52>
			}
			//decrypt fw
			//Decrypt
			gl_u32CRC_FragmentFW = Calculate_CRC_firmware((uint8_t*) gl_u8FwFragment);
 8000a80:	482d      	ldr	r0, [pc, #180]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000a82:	f7ff ff79 	bl	8000978 <Calculate_CRC_firmware>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000a8a:	6013      	str	r3, [r2, #0]
			RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8000a8c:	4825      	ldr	r0, [pc, #148]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a8e:	f001 f855 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
			gl_u8CipherText[0]= ADDR_BROADCAST;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	701a      	strb	r2, [r3, #0]
			gl_u8CipherText[1]= ADDR_BROADCAST;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	705a      	strb	r2, [r3, #1]
			gl_u8CipherText[2] =FL_FRAGMENT_FIRMWARE;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000aa0:	22fe      	movs	r2, #254	; 0xfe
 8000aa2:	709a      	strb	r2, [r3, #2]
			gl_u8CipherText[3]= gl_u16NoPacket >> SHIFT_8_BIT;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ab0:	70da      	strb	r2, [r3, #3]
			gl_u8CipherText[4]= gl_u16NoPacket >> SHIFT_0_BIT;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000aba:	711a      	strb	r2, [r3, #4]
			gl_u8CipherText[8] = gl_u32CRC_FragmentFW >>SHIFT_24_BIT;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0e1b      	lsrs	r3, r3, #24
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ac6:	721a      	strb	r2, [r3, #8]
			gl_u8CipherText[7] = gl_u32CRC_FragmentFW >>SHIFT_16_BIT;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0c1b      	lsrs	r3, r3, #16
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ad2:	71da      	strb	r2, [r3, #7]
			gl_u8CipherText[6] = gl_u32CRC_FragmentFW >>SHIFT_8_BIT;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ade:	719a      	strb	r2, [r3, #6]
			gl_u8CipherText[5] = gl_u32CRC_FragmentFW >>SHIFT_0_BIT;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ae8:	715a      	strb	r2, [r3, #5]
			copy_Array((uint8_t*)gl_u8CipherText ,(uint8_t*) gl_u8FwFragment , 64);
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	4912      	ldr	r1, [pc, #72]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000af0:	f004 fa3d 	bl	8004f6e <copy_Array>

			/*Encrypt buffer to cyberText*/
			AES_CTR_xcrypt_buffer(&ctx_fw, gl_u8CipherText, 80);
 8000af4:	2250      	movs	r2, #80	; 0x50
 8000af6:	4911      	ldr	r1, [pc, #68]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <Encrypt_MainFunc+0x12c>)
 8000afa:	f003 feea 	bl	80048d2 <AES_CTR_xcrypt_buffer>
			retVal = RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_WriteData(gl_u8CipherText);
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000b00:	f000 fef6 	bl	80018f0 <Rte_EncyptedBuffer_WriteData>
 8000b04:	4603      	mov	r3, r0
 8000b06:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
				// Set to Send Update
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_SEND_UPDATE);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 feca 	bl	80018a8 <Rte_SystemState_WriteData>
			}
		}

	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000188 	.word	0x20000188
 8000b20:	2000017c 	.word	0x2000017c
 8000b24:	20000184 	.word	0x20000184
 8000b28:	20000180 	.word	0x20000180
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2000018c 	.word	0x2000018c
 8000b38:	2000013c 	.word	0x2000013c
 8000b3c:	200000ec 	.word	0x200000ec

08000b40 <Decrypt_MainFunc>:
void Decrypt_MainFunc(uint8_t * gl_u8FwFragment){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	AES_CBC_decrypt_buffer(&ctx_fw_des, gl_u8FwFragment, 1024);
 8000b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <Decrypt_MainFunc+0x1c>)
 8000b50:	f003 fe8a 	bl	8004868 <AES_CBC_decrypt_buffer>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000024c 	.word	0x2000024c

08000b60 <F_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void F_voidInitVariables (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <F_voidInitVariables+0x14>)
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <F_voidInitVariables+0x18>)
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000030c 	.word	0x2000030c
 8000b78:	08010000 	.word	0x08010000

08000b7c <F_FlashBlockToAddress>:


HAL_StatusTypeDef F_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000b90:	2300      	movs	r3, #0
 8000b92:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <F_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e024      	b.n	8000bea <F_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	e01d      	b.n	8000be2 <F_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	817b      	strh	r3, [r7, #10]
			F_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	897a      	ldrh	r2, [r7, #10]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f832 	bl	8000c36 <F_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bda:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	3302      	adds	r3, #2
 8000be0:	81bb      	strh	r3, [r7, #12]
 8000be2:	89ba      	ldrh	r2, [r7, #12]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3dd      	bcc.n	8000ba6 <F_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000030c 	.word	0x2000030c

08000bf8 <F_Erase_Image>:

HAL_StatusTypeDef F_Erase_Image(uint32_t ImageAddress)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	44;
 8000c0c:	232c      	movs	r3, #44	; 0x2c
 8000c0e:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000c10:	f004 fed6 	bl	80059c0 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000c14:	f107 0208 	add.w	r2, r7, #8
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 ffb6 	bl	8005b90 <HAL_FLASHEx_Erase>
 8000c24:	4603      	mov	r3, r0
 8000c26:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8000c28:	f004 fef0 	bl	8005a0c <HAL_FLASH_Lock>
	return Local_retVal;
 8000c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <F_FlashHalfWordToAddress>:


HAL_StatusTypeDef F_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000c36:	b5b0      	push	{r4, r5, r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000c42:	f004 febd 	bl	80059c0 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	461c      	mov	r4, r3
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	4622      	mov	r2, r4
 8000c50:	462b      	mov	r3, r5
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 fe43 	bl	80058e0 <HAL_FLASH_Program>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8000c5e:	f004 fed5 	bl	8005a0c <HAL_FLASH_Lock>

	return Local_retVal;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bdb0      	pop	{r4, r5, r7, pc}

08000c6c <F_FlashWordToAddress>:

HAL_StatusTypeDef F_FlashWordToAddress(uint32_t Copy_Address , uint32_t Copy_u32DataAddress)
{
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000c76:	f004 fea3 	bl	80059c0 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Copy_Address, Copy_u32DataAddress);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	4622      	mov	r2, r4
 8000c84:	462b      	mov	r3, r5
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f004 fe29 	bl	80058e0 <HAL_FLASH_Program>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8000c92:	f004 febb 	bl	8005a0c <HAL_FLASH_Lock>

	return Local_retVal;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bdb0      	pop	{r4, r5, r7, pc}

08000ca0 <FL_Syns_Config>:
struct AES_ctx ctx_req;
static uint8_t AES_CTR_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CTR_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
//uint32_t FL_uint32localAddress = ACTIVE_IMAGE + 0x80 ;
FL_Return_t FL_Syns_Config(uint32_t unicast_address, uint8_t* buffer_req, uint8_t* buffer_resp
	, uint8_t SF ,  uint8_t BandWidth , uint8_t CR ){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af06      	add	r7, sp, #24
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	70fb      	strb	r3, [r7, #3]
	/* Add info to packet */
	buffer_req[3] = SF ;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3303      	adds	r3, #3
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = BandWidth ;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	7e3a      	ldrb	r2, [r7, #24]
 8000cbc:	701a      	strb	r2, [r3, #0]
	/*	Wait to get Response from Node */
	buffer_req[5] = CR ;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3305      	adds	r3, #5
 8000cc2:	7f3a      	ldrb	r2, [r7, #28]
 8000cc4:	701a      	strb	r2, [r3, #0]
	if(LORA_IF_Stransmit_Request(&SX1278_2, (uint8_t*) buffer_req,(uint8_t*) buffer_resp ,
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <FL_Syns_Config+0xa0>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2221      	movs	r2, #33	; 0x21
 8000ccc:	9201      	str	r2, [sp, #4]
 8000cce:	2220      	movs	r2, #32
 8000cd0:	9200      	str	r2, [sp, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	481b      	ldr	r0, [pc, #108]	; (8000d44 <FL_Syns_Config+0xa4>)
 8000cd8:	f002 fa10 	bl	80030fc <LORA_IF_Stransmit_Request>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d124      	bne.n	8000d2c <FL_Syns_Config+0x8c>
			ret,GW_SYNC_CONFIG , MCU_RECEIVED_CONFIG ) == LORA_OKE)
	{
		if(LORA_IF_GetData_Frame(&SX1278_2 ,unicast_address ,(uint8_t*) buffer_resp , ret , 5000 , SIZE_BUFFER_16BYTES ,MCU_RECEIVED_CONFIG ) == 1)
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <FL_Syns_Config+0xa0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2221      	movs	r2, #33	; 0x21
 8000ce8:	9202      	str	r2, [sp, #8]
 8000cea:	2210      	movs	r2, #16
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf2:	9200      	str	r2, [sp, #0]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <FL_Syns_Config+0xa4>)
 8000cfa:	f002 f995 	bl	8003028 <LORA_IF_GetData_Frame>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d113      	bne.n	8000d2c <FL_Syns_Config+0x8c>
		{
			SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SF,
 8000d04:	2310      	movs	r3, #16
 8000d06:	9305      	str	r3, [sp, #20]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	7f3b      	ldrb	r3, [r7, #28]
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	7e3b      	ldrb	r3, [r7, #24]
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	a306      	add	r3, pc, #24	; (adr r3, 8000d38 <FL_Syns_Config+0x98>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <FL_Syns_Config+0xa8>)
 8000d24:	f002 f874 	bl	8002e10 <SX1278_init>
							BandWidth, CR, SX1278_LORA_CRC_EN, 16);
			// Setting LORA For Flashing
			return FL_SUCCESS;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <FL_Syns_Config+0x8e>
		}
	}
	return FL_FAIL;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	19de5080 	.word	0x19de5080
 8000d3c:	00000000 	.word	0x00000000
 8000d40:	200009e8 	.word	0x200009e8
 8000d44:	2000171c 	.word	0x2000171c
 8000d48:	200015ec 	.word	0x200015ec

08000d4c <Sequence_Process>:
//		return FL_SUCCESS ;
//	}
//	return FL_FAIL;
//}
/* Start Send Fragment */
FL_Return_t Sequence_Process(uint8_t* buffer_flashing_data){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if(LORA_IF_Stransmit_Fragment_Firmware(&SX1278_1,(uint8_t*) buffer_flashing_data  ) == LORA_OKE){
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <Sequence_Process+0x24>)
 8000d58:	f002 fa0e 	bl	8003178 <LORA_IF_Stransmit_Fragment_Firmware>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <Sequence_Process+0x1a>
		return FL_SUCCESS;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <Sequence_Process+0x1c>
	}
	return FL_FAIL;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200015ec 	.word	0x200015ec

08000d74 <Flashing_end>:
/* End Programming process*/
uint8_t Flashing_end(uint8_t broadcast_addr,uint32_t unicast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp ,uint8_t ACK_REQ){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
	uint32_t counter=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
	buffer_packet[0] = broadcast_addr ; // broadcast
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	701a      	strb	r2, [r3, #0]
	buffer_packet[1] = broadcast_addr ; // broadcast
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	701a      	strb	r2, [r3, #0]
	buffer_packet[2] = ACK_REQ;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d9e:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <Flashing_end+0xac>)
 8000da2:	4920      	ldr	r1, [pc, #128]	; (8000e24 <Flashing_end+0xb0>)
 8000da4:	4820      	ldr	r0, [pc, #128]	; (8000e28 <Flashing_end+0xb4>)
 8000da6:	f002 ff93 	bl	8003cd0 <AES_init_ctx_iv>
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000daa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dae:	2150      	movs	r1, #80	; 0x50
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <Flashing_end+0xb8>)
 8000db2:	f001 ff96 	bl	8002ce2 <SX1278_LoRaEntryTx>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <Flashing_end+0xbc>)
 8000dbc:	701a      	strb	r2, [r3, #0]
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8000dbe:	2250      	movs	r2, #80	; 0x50
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4819      	ldr	r0, [pc, #100]	; (8000e28 <Flashing_end+0xb4>)
 8000dc4:	f003 fd85 	bl	80048d2 <AES_CTR_xcrypt_buffer>
	while(1){
		 ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000dc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dcc:	2250      	movs	r2, #80	; 0x50
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4816      	ldr	r0, [pc, #88]	; (8000e2c <Flashing_end+0xb8>)
 8000dd2:	f001 ffde 	bl	8002d92 <SX1278_LoRaTxPacket>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <Flashing_end+0xbc>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		 if(ret){
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <Flashing_end+0xbc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00f      	beq.n	8000e06 <Flashing_end+0x92>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <Flashing_end+0xc0>)
 8000dec:	f005 f92b 	bl	8006046 <HAL_GPIO_TogglePin>
			 return LORA_IF_GetData_End_Frame(&SX1278_1, (uint8_t*) buffer_resp, unicast_addr,SIZE_BUFFER_112BYTES, MAX_TIME_OUT);
 8000df0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2370      	movs	r3, #112	; 0x70
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <Flashing_end+0xb8>)
 8000dfe:	f002 f9f1 	bl	80031e4 <LORA_IF_GetData_End_Frame>
 8000e02:	4603      	mov	r3, r0
 8000e04:	e008      	b.n	8000e18 <Flashing_end+0xa4>
		 }
		 else{
			 counter++;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
			 if(counter == MAX_TRY_REQ)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d1d8      	bne.n	8000dc8 <Flashing_end+0x54>
			 {
				 return -1;
 8000e16:	23ff      	movs	r3, #255	; 0xff
			 }
		}

	}
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000034 	.word	0x20000034
 8000e24:	20000024 	.word	0x20000024
 8000e28:	200009ec 	.word	0x200009ec
 8000e2c:	200015ec 	.word	0x200015ec
 8000e30:	200009e8 	.word	0x200009e8
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <Flashing_Request>:
	}
	//Get data from SPI_2


}
uint8_t Flashing_Request(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_req ,uint8_t ACK_REQ ,uint8_t ACK_RESP ){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	603a      	str	r2, [r7, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	460b      	mov	r3, r1
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	717b      	strb	r3, [r7, #5]
	uint16_t counter_tx =0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]
	uint32_t Address_update = INIT_VAL_ZERO;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&Address_update);
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fdf0 	bl	8001a40 <Rte_NodeAddr_ReadData>
	buffer_req[0] =  (Address_update>> SHIFT_24_BIT)& 0xFF; // unicast addr
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = (Address_update>> SHIFT_16_BIT)& 0xFF ; // unicast addr
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	0c1a      	lsrs	r2, r3, #16
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = (Address_update>> SHIFT_8_BIT)& 0xFF ;  // unicast addr
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	0a1a      	lsrs	r2, r3, #8
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = (Address_update>> SHIFT_0_BIT)& 0xFF ;  // unicast addr
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3303      	adds	r3, #3
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = ACK_REQ;	// Not use
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	797a      	ldrb	r2, [r7, #5]
 8000e92:	701a      	strb	r2, [r3, #0]
	//Get the current Packet;
	RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8000e94:	f107 030e 	add.w	r3, r7, #14
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fe4f 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
	ret = SX1278_LoRaEntryTx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000e9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4819      	ldr	r0, [pc, #100]	; (8000f0c <Flashing_Request+0xd4>)
 8000ea6:	f001 ff1c 	bl	8002ce2 <SX1278_LoRaEntryTx>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <Flashing_Request+0xd8>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <Flashing_Request+0xdc>)
 8000eb4:	4918      	ldr	r1, [pc, #96]	; (8000f18 <Flashing_Request+0xe0>)
 8000eb6:	4819      	ldr	r0, [pc, #100]	; (8000f1c <Flashing_Request+0xe4>)
 8000eb8:	f002 ff0a 	bl	8003cd0 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req, 16);
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	4816      	ldr	r0, [pc, #88]	; (8000f1c <Flashing_Request+0xe4>)
 8000ec2:	f003 fd06 	bl	80048d2 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_2, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000ec6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eca:	2210      	movs	r2, #16
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <Flashing_Request+0xd4>)
 8000ed0:	f001 ff5f 	bl	8002d92 <SX1278_LoRaTxPacket>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <Flashing_Request+0xd8>)
 8000eda:	701a      	strb	r2, [r3, #0]
	if(ret){
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <Flashing_Request+0xd8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00e      	beq.n	8000f02 <Flashing_Request+0xca>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <Flashing_Request+0xe8>)
 8000eea:	f005 f8ac 	bl	8006046 <HAL_GPIO_TogglePin>
		counter_tx++;
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	81fb      	strh	r3, [r7, #14]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(counter_tx);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fde9 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
		return 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <Flashing_Request+0xcc>
	}
	return -1;
 8000f02:	23ff      	movs	r3, #255	; 0xff
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000171c 	.word	0x2000171c
 8000f10:	200009e8 	.word	0x200009e8
 8000f14:	20000034 	.word	0x20000034
 8000f18:	20000024 	.word	0x20000024
 8000f1c:	200009ec 	.word	0x200009ec
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <Wait_Accept_OTA>:
uint8_t Wait_Accept_OTA(uint32_t addr_node,  uint8_t* buffer_resp ,uint8_t ACK_RESP ){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
	uint32_t counter_rx = INITIAL_VALUE_ZERO;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
	uint32_t Node_Address_update = addr_node;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
	uint32_t Node_Address_receive = INITIAL_VALUE_ZERO;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000f3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f42:	2110      	movs	r1, #16
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <Wait_Accept_OTA+0xd0>)
 8000f46:	f001 fe23 	bl	8002b90 <SX1278_LoRaEntryRx>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <Wait_Accept_OTA+0xd4>)
 8000f50:	701a      	strb	r2, [r3, #0]
	while(1){
		ret = SX1278_LoRaRxPacket(&SX1278_2);
 8000f52:	4828      	ldr	r0, [pc, #160]	; (8000ff4 <Wait_Accept_OTA+0xd0>)
 8000f54:	f001 fe81 	bl	8002c5a <SX1278_LoRaRxPacket>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <Wait_Accept_OTA+0xd4>)
 8000f5e:	701a      	strb	r2, [r3, #0]
		AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000f60:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <Wait_Accept_OTA+0xd8>)
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <Wait_Accept_OTA+0xdc>)
 8000f64:	4827      	ldr	r0, [pc, #156]	; (8001004 <Wait_Accept_OTA+0xe0>)
 8000f66:	f002 feb3 	bl	8003cd0 <AES_init_ctx_iv>
		if(ret > 0){
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <Wait_Accept_OTA+0xd4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d02d      	beq.n	8000fce <Wait_Accept_OTA+0xaa>
			ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_resp, ret);
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <Wait_Accept_OTA+0xd4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <Wait_Accept_OTA+0xd0>)
 8000f7c:	f001 ff75 	bl	8002e6a <SX1278_read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <Wait_Accept_OTA+0xd4>)
 8000f86:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp, 16);
 8000f88:	2210      	movs	r2, #16
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <Wait_Accept_OTA+0xe0>)
 8000f8e:	f003 fca0 	bl	80048d2 <AES_CTR_xcrypt_buffer>
			Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	431a      	orrs	r2, r3
								|(buffer_resp[2] << SHIFT_8_BIT)|(buffer_resp[3] << SHIFT_0_BIT);
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	3203      	adds	r2, #3
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	4313      	orrs	r3, r2
			Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8000fb4:	617b      	str	r3, [r7, #20]
			if(Node_Address_receive == Node_Address_update && buffer_resp[4]== ACK_RESP ){
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d1c9      	bne.n	8000f52 <Wait_Accept_OTA+0x2e>
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d1c3      	bne.n	8000f52 <Wait_Accept_OTA+0x2e>
				return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00d      	b.n	8000fea <Wait_Accept_OTA+0xc6>
			}

		}
		else{
			counter_rx++;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
			//delay 1ms
			HAL_Delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f004 fa9f 	bl	8005518 <HAL_Delay>
			if(counter_rx == MAX_TRY_REQ)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d1b6      	bne.n	8000f52 <Wait_Accept_OTA+0x2e>
			{
				counter_rx = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
				return 0;
 8000fe8:	2300      	movs	r3, #0
			}
		}
	}
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000171c 	.word	0x2000171c
 8000ff8:	200009e8 	.word	0x200009e8
 8000ffc:	20000034 	.word	0x20000034
 8001000:	20000024 	.word	0x20000024
 8001004:	200009ec 	.word	0x200009ec

08001008 <FL_u32ReadAddressData>:
		}

		}
}
// Using for testing flashing
uint32_t FL_u32ReadAddressData(uint32_t address){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
	...

08001024 <FL_CalculateCRCFWLoRa>:

uint32_t FL_CalculateCRCFWLoRa(uint32_t u32Size_of_Image , uint32_t Active_Addr_Indicate){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint32_t local_u32CRC = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <FL_CalculateCRCFWLoRa+0x74>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <FL_CalculateCRCFWLoRa+0x74>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103c:	6153      	str	r3, [r2, #20]
	u32Size_of_Image = u32Size_of_Image/4;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <FL_CalculateCRCFWLoRa+0x78>)
 8001046:	7a1a      	ldrb	r2, [r3, #8]
 8001048:	2200      	movs	r2, #0
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	721a      	strb	r2, [r3, #8]
 8001050:	7a5a      	ldrb	r2, [r3, #9]
 8001052:	2200      	movs	r2, #0
 8001054:	725a      	strb	r2, [r3, #9]
 8001056:	7a9a      	ldrb	r2, [r3, #10]
 8001058:	2200      	movs	r2, #0
 800105a:	729a      	strb	r2, [r3, #10]
 800105c:	7ada      	ldrb	r2, [r3, #11]
 800105e:	2200      	movs	r2, #0
 8001060:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e00b      	b.n	8001080 <FL_CalculateCRCFWLoRa+0x5c>
		/* Calculate CRC */
		CRC->DR  = FL_u32ReadAddressData(Active_Addr_Indicate);
 8001068:	4c0c      	ldr	r4, [pc, #48]	; (800109c <FL_CalculateCRCFWLoRa+0x78>)
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f7ff ffcc 	bl	8001008 <FL_u32ReadAddressData>
 8001070:	4603      	mov	r3, r0
 8001072:	6023      	str	r3, [r4, #0]
		Active_Addr_Indicate+=4;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	603b      	str	r3, [r7, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3ef      	bcc.n	8001068 <FL_CalculateCRCFWLoRa+0x44>
	}
	local_u32CRC = CRC->DR;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <FL_CalculateCRCFWLoRa+0x78>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60bb      	str	r3, [r7, #8]
	return local_u32CRC;
 800108e:	68bb      	ldr	r3, [r7, #8]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40023000 	.word	0x40023000

080010a0 <FL_CalculateCRCBItmaskLoRa>:
uint32_t FL_CalculateCRCBItmaskLoRa(uint32_t u32Size_of_bitmask , uint8_t *buffer){
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck;
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6153      	str	r3, [r2, #20]
	u32Size_of_bitmask = u32Size_of_bitmask/4;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
	uint32_t local_u32CRC ;
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 80010be:	7a1a      	ldrb	r2, [r3, #8]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	721a      	strb	r2, [r3, #8]
 80010c8:	7a5a      	ldrb	r2, [r3, #9]
 80010ca:	2200      	movs	r2, #0
 80010cc:	725a      	strb	r2, [r3, #9]
 80010ce:	7a9a      	ldrb	r2, [r3, #10]
 80010d0:	2200      	movs	r2, #0
 80010d2:	729a      	strb	r2, [r3, #10]
 80010d4:	7ada      	ldrb	r2, [r3, #11]
 80010d6:	2200      	movs	r2, #0
 80010d8:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e023      	b.n	8001128 <FL_CalculateCRCBItmaskLoRa+0x88>
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	3303      	adds	r3, #3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	061a      	lsls	r2, r3, #24
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	440b      	add	r3, r1
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	431a      	orrs	r2, r3
										|(buffer[Local_u32Count*4+1] <<SHIFT_8_BIT)|(buffer[Local_u32Count*4] <<SHIFT_0_BIT);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	3301      	adds	r3, #1
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	440b      	add	r3, r1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	4313      	orrs	r3, r2
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	440a      	add	r2, r1
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	4313      	orrs	r3, r2
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 800111a:	60fb      	str	r3, [r7, #12]
		/* Calculate CRC */
		CRC->DR  = Local_u32PlayloadCheck;
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6013      	str	r3, [r2, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3d7      	bcc.n	80010e0 <FL_CalculateCRCBItmaskLoRa+0x40>
	}
	local_u32CRC = CRC->DR;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
	return local_u32CRC;
 8001136:	693b      	ldr	r3, [r7, #16]
}
 8001138:	4618      	mov	r0, r3
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40023000 	.word	0x40023000

0800114c <Send_Start_OTA>:
//}

/*
 * @Request Start OTA
 */
void Send_Start_OTA(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af02      	add	r7, sp, #8
	gl_u32TargetAddr = INITIAL_VALUE_ZERO;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <Send_Start_OTA+0x38>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <Send_Start_OTA+0x38>)
 800115a:	f000 fc71 	bl	8001a40 <Rte_NodeAddr_ReadData>
	if(Flashing_Request(ADDR_BROADCAST, gl_u32TargetAddr, buffer_req, GW_START_OTA , MCU_ACCEPT_RESPONSE) == 1){
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <Send_Start_OTA+0x38>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b2d9      	uxtb	r1, r3
 8001164:	2302      	movs	r3, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <Send_Start_OTA+0x3c>)
 800116c:	20ff      	movs	r0, #255	; 0xff
 800116e:	f7ff fe63 	bl	8000e38 <Flashing_Request>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <Send_Start_OTA+0x32>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_WAIT_ACCEPT_OTA);
 8001178:	2004      	movs	r0, #4
 800117a:	f000 fb95 	bl	80018a8 <Rte_SystemState_WriteData>
	}
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000314 	.word	0x20000314
 8001188:	200003fc 	.word	0x200003fc

0800118c <Wait_Start_OTA>:

/*
 * @Flashing Start
 */
void Wait_Start_OTA(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint16_t counter_tx =0;
 8001192:	2300      	movs	r3, #0
 8001194:	80fb      	strh	r3, [r7, #6]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <Wait_Start_OTA+0x54>)
 8001198:	f000 fc52 	bl	8001a40 <Rte_NodeAddr_ReadData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_CONFIG_LORA);
 800119c:	2005      	movs	r0, #5
 800119e:	f000 fb83 	bl	80018a8 <Rte_SystemState_WriteData>
	if(Wait_Accept_OTA(gl_u32TargetAddr,  (uint8_t*) buffer_resp , MCU_ACCEPT_RESPONSE ) == 1){
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <Wait_Start_OTA+0x54>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2202      	movs	r2, #2
 80011a8:	490e      	ldr	r1, [pc, #56]	; (80011e4 <Wait_Start_OTA+0x58>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff feba 	bl	8000f24 <Wait_Accept_OTA>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d00f      	beq.n	80011d6 <Wait_Start_OTA+0x4a>

	}
	else {
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 fb76 	bl	80018a8 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fcbc 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
		if(counter_tx == 10){
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d105      	bne.n	80011d6 <Wait_Start_OTA+0x4a>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fb6c 	bl	80018a8 <Rte_SystemState_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(GW_OUTOFREQUEST_ERROR);
 80011d0:	201f      	movs	r0, #31
 80011d2:	f000 fc59 	bl	8001a88 <Rte_UI_Error_WriteData>


	}


}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000314 	.word	0x20000314
 80011e4:	2000032c 	.word	0x2000032c

080011e8 <FL_FlashLoRa_INIT>:


void FL_FlashLoRa_INIT(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af02      	add	r7, sp, #8
 	gl_u8StatusFlash 			= 		INITIAL_VALUE_ZERO;
 80011ee:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <FL_FlashLoRa_INIT+0x13c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	gl_u16No_Packet_Flash		=		INITZERO_START+1;
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <FL_FlashLoRa_INIT+0x140>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	801a      	strh	r2, [r3, #0]
	gl_start_array_backup 		= 		INITIAL_VALUE_ZERO;
 80011fa:	4b4c      	ldr	r3, [pc, #304]	; (800132c <FL_FlashLoRa_INIT+0x144>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
	gl_u32CRCFW 				= 		INITIAL_VALUE_ZERO;
 8001200:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	gl_u16AppVer 	   			= 		INITIAL_VALUE_ZERO;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <FL_FlashLoRa_INIT+0x14c>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
	gl_u32CodeSize 				=		INITIAL_VALUE_ZERO;
 800120c:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
	gl_u8backup_flag 			=  		INITIAL_VALUE_ZERO;
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <FL_FlashLoRa_INIT+0x154>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	buffer_flashing_data        = 		NULL_PTR;
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <FL_FlashLoRa_INIT+0x158>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
	//Calculate Number packet Lora SPI
	//Get Variable Via RTE FW
	//RTE_RUNNABLE_CRC_VALUE_ReadData(&gl_u32CRCFW);
	RTE_RUNNABLE_APP_VER_ReadData(&gl_u16AppVer);
 800121e:	4845      	ldr	r0, [pc, #276]	; (8001334 <FL_FlashLoRa_INIT+0x14c>)
 8001220:	f000 fbea 	bl	80019f8 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_CODE_SIZE_ReadData(&gl_u32CodeSize);
 8001224:	4844      	ldr	r0, [pc, #272]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 8001226:	f000 fbf9 	bl	8001a1c <Rte_CodeSize_ReadData>

	gl_u16NumberPacket_LoRa = (uint16_t)(gl_u32CodeSize/PACKET_64bytes)+1;
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	b29b      	uxth	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <FL_FlashLoRa_INIT+0x15c>)
 8001238:	801a      	strh	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 800123a:	4843      	ldr	r0, [pc, #268]	; (8001348 <FL_FlashLoRa_INIT+0x160>)
 800123c:	f000 fc00 	bl	8001a40 <Rte_NodeAddr_ReadData>

	//Calculate CRC
	gl_u32CRCFW = FL_CalculateCRCFWLoRa(gl_u32CodeSize, IMAGE_NEW_FIRMWARE);
 8001240:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4941      	ldr	r1, [pc, #260]	; (800134c <FL_FlashLoRa_INIT+0x164>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff feec 	bl	8001024 <FL_CalculateCRCFWLoRa>
 800124c:	4603      	mov	r3, r0
 800124e:	4a38      	ldr	r2, [pc, #224]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 8001250:	6013      	str	r3, [r2, #0]
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fb74 	bl	8001944 <Rte_Crc_WriteData>

	// Get the Infor SW FLASH
	GW_Config_SetUp();
 800125c:	f000 faee 	bl	800183c <GW_Config_SetUp>
	//Start Flashing
	// Pack inform to buffer
	// CRC
	buffer_req[0] = ADDR_BROADCAST;
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = ADDR_BROADCAST;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 8001268:	22ff      	movs	r2, #255	; 0xff
 800126a:	705a      	strb	r2, [r3, #1]
	buffer_req[15] = (gl_u32CRCFW>>SHIFT_24_BIT);
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0e1b      	lsrs	r3, r3, #24
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 8001276:	73da      	strb	r2, [r3, #15]
	buffer_req[14] = (gl_u32CRCFW>>SHIFT_16_BIT);
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0c1b      	lsrs	r3, r3, #16
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 8001282:	739a      	strb	r2, [r3, #14]
	buffer_req[13] = (gl_u32CRCFW>>SHIFT_8_BIT);
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 800128e:	735a      	strb	r2, [r3, #13]
	buffer_req[12] = (gl_u32CRCFW>>SHIFT_0_BIT);
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <FL_FlashLoRa_INIT+0x148>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 8001298:	731a      	strb	r2, [r3, #12]
	// Appl ver
	buffer_req[11] =(gl_u16AppVer>>SHIFT_8_BIT);
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <FL_FlashLoRa_INIT+0x14c>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012a6:	72da      	strb	r2, [r3, #11]
	buffer_req[10] =(gl_u16AppVer>>SHIFT_0_BIT);
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <FL_FlashLoRa_INIT+0x14c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012b0:	729a      	strb	r2, [r3, #10]
	// size Code
	buffer_req[9] =(gl_u32CodeSize>>SHIFT_24_BIT);
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e1b      	lsrs	r3, r3, #24
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012bc:	725a      	strb	r2, [r3, #9]
	buffer_req[8] =(gl_u32CodeSize>>SHIFT_16_BIT);
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0c1b      	lsrs	r3, r3, #16
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012c8:	721a      	strb	r2, [r3, #8]
	buffer_req[7] =(gl_u32CodeSize>>SHIFT_8_BIT);
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012d4:	71da      	strb	r2, [r3, #7]
	buffer_req[6] =(gl_u32CodeSize>>SHIFT_0_BIT);
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <FL_FlashLoRa_INIT+0x150>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012de:	719a      	strb	r2, [r3, #6]
	// Node Addr
	if(FL_Syns_Config(gl_u32TargetAddr, (uint8_t*) buffer_req, (uint8_t*) buffer_resp, u8SF, u8BW, u8CR ) == FL_SUCCESS){
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <FL_FlashLoRa_INIT+0x160>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <FL_FlashLoRa_INIT+0x16c>)
 80012e6:	7819      	ldrb	r1, [r3, #0]
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <FL_FlashLoRa_INIT+0x170>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <FL_FlashLoRa_INIT+0x174>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	9201      	str	r2, [sp, #4]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	460b      	mov	r3, r1
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <FL_FlashLoRa_INIT+0x178>)
 80012f8:	4915      	ldr	r1, [pc, #84]	; (8001350 <FL_FlashLoRa_INIT+0x168>)
 80012fa:	f7ff fcd1 	bl	8000ca0 <FL_Syns_Config>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10b      	bne.n	800131c <FL_FlashLoRa_INIT+0x134>

		/************Change SYSTEM TO SEND Update********************************/
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8001304:	2006      	movs	r0, #6
 8001306:	f000 facf 	bl	80018a8 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <FL_FlashLoRa_INIT+0x140>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fbde 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
		HAL_Delay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f004 f8fe 	bl	8005518 <HAL_Delay>
		//GW_State_Save_State(SYS_ENCRYPT_FW);
	}
	//Flashing_end(ADDR_SLAVE_NODE_1,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, number_packet);
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000310 	.word	0x20000310
 8001328:	20000020 	.word	0x20000020
 800132c:	20000311 	.word	0x20000311
 8001330:	20000318 	.word	0x20000318
 8001334:	2000031c 	.word	0x2000031c
 8001338:	20000320 	.word	0x20000320
 800133c:	20000327 	.word	0x20000327
 8001340:	2000040c 	.word	0x2000040c
 8001344:	20000324 	.word	0x20000324
 8001348:	20000314 	.word	0x20000314
 800134c:	08010000 	.word	0x08010000
 8001350:	200003fc 	.word	0x200003fc
 8001354:	20000aad 	.word	0x20000aad
 8001358:	20000aac 	.word	0x20000aac
 800135c:	20000aae 	.word	0x20000aae
 8001360:	2000032c 	.word	0x2000032c

08001364 <FL_getPacketlost>:
uint16_t FL_getPacketlost(uint8_t* buffer_Rx , uint16_t packetNumber){
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
	uint16_t index =  (packetNumber)/8;
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	81fb      	strh	r3, [r7, #14]
	uint16_t offset = (packetNumber)%8;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	81bb      	strh	r3, [r7, #12]
	return (buffer_Rx[index] >> offset) &0x01;
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	89bb      	ldrh	r3, [r7, #12]
 800138a:	fa42 f303 	asr.w	r3, r2, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b29b      	uxth	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <FL_PacketLoRaSend_START>:
void FL_PacketLoRaSend_START(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
	uint8_t Local_u8StatusFlash = INITIAL_VALUE_ZERO;
 80013a6:	2300      	movs	r3, #0
 80013a8:	72fb      	strb	r3, [r7, #11]

	// clear buffer
	clearDataBuffer((uint8_t*) buffer_req, 16);
 80013aa:	2110      	movs	r1, #16
 80013ac:	4872      	ldr	r0, [pc, #456]	; (8001578 <FL_PacketLoRaSend_START+0x1d8>)
 80013ae:	f003 fe23 	bl	8004ff8 <clearDataBuffer>
	//getSizePacket(number_packet, (uint8_t*) buffer_req);
	if(gl_u16NumberPacket_LoRa>=0){
		//Get Data from EnCrypt cybertext
		RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_ReadData(&buffer_flashing_data);
 80013b2:	4872      	ldr	r0, [pc, #456]	; (800157c <FL_PacketLoRaSend_START+0x1dc>)
 80013b4:	f000 fab0 	bl	8001918 <Rte_EncyptedBuffer_ReadData>
		//FL_u128PasteBuffer((uint8_t *)buffer_flashing_data ,gl_u8No_Packet_Flash);
		// Check is missing packet

		if (gl_u16NumberPacket_LoRa >0){
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d017      	beq.n	80013f0 <FL_PacketLoRaSend_START+0x50>
			//Send Packet Flashing
			Sequence_Process((uint8_t*)buffer_flashing_data );
 80013c0:	4b6e      	ldr	r3, [pc, #440]	; (800157c <FL_PacketLoRaSend_START+0x1dc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcc1 	bl	8000d4c <Sequence_Process>
			/*Display UI*/
			if(gl_u16NumberPacket_LoRa!=0)
 80013ca:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <FL_PacketLoRaSend_START+0x38>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80013d2:	2006      	movs	r0, #6
 80013d4:	f000 fa68 	bl	80018a8 <Rte_SystemState_WriteData>
			gl_u16NumberPacket_LoRa--;
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 80013e2:	801a      	strh	r2, [r3, #0]
			gl_u16No_Packet_Flash++;
 80013e4:	4b67      	ldr	r3, [pc, #412]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b65      	ldr	r3, [pc, #404]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 80013ee:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u8backup_flag == 1){
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <FL_PacketLoRaSend_START+0x1e8>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10d      	bne.n	8001414 <FL_PacketLoRaSend_START+0x74>
			// Get the lost message number
			gl_u16No_Packet_Flash = buffer_number_pack_lost[lost_counter_pos];
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <FL_PacketLoRaSend_START+0x1f0>)
 8001400:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001404:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001406:	801a      	strh	r2, [r3, #0]
			lost_counter_pos++;
 8001408:	4b60      	ldr	r3, [pc, #384]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 8001412:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u16No_Packet_Flash == 0xffff){
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141c:	4293      	cmp	r3, r2
 800141e:	d105      	bne.n	800142c <FL_PacketLoRaSend_START+0x8c>
			gl_u8backup_flag = 0;
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <FL_PacketLoRaSend_START+0x1e8>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
			gl_u16No_Packet_Flash = 0;
 8001426:	4b57      	ldr	r3, [pc, #348]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
		}
		gl_u8start_array_backup++;
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <FL_PacketLoRaSend_START+0x1f4>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b57      	ldr	r3, [pc, #348]	; (8001594 <FL_PacketLoRaSend_START+0x1f4>)
 8001436:	701a      	strb	r2, [r3, #0]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001438:	4b52      	ldr	r3, [pc, #328]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fb47 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
		if(gl_u16NumberPacket_LoRa == 0){
 8001442:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8092 	bne.w	8001570 <FL_PacketLoRaSend_START+0x1d0>
			Local_u8StatusFlash = Flashing_end(ADDR_BROADCAST , gl_u32TargetAddr
 800144c:	4b52      	ldr	r3, [pc, #328]	; (8001598 <FL_PacketLoRaSend_START+0x1f8>)
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	2339      	movs	r3, #57	; 0x39
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 8001456:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <FL_PacketLoRaSend_START+0x200>)
 8001458:	20ff      	movs	r0, #255	; 0xff
 800145a:	f7ff fc8b 	bl	8000d74 <Flashing_end>
 800145e:	4603      	mov	r3, r0
 8001460:	72fb      	strb	r3, [r7, #11]
								,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_FINISHING_SENDING_CODE );

			// Write status Flash to LORA RESP
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(Local_u8StatusFlash);
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fb45 	bl	8001af4 <Rte_FlagLoRaResp_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(Local_u8StatusFlash);
 800146a:	7afb      	ldrb	r3, [r7, #11]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb0b 	bl	8001a88 <Rte_UI_Error_WriteData>
			switch (Local_u8StatusFlash) {
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	2b77      	cmp	r3, #119	; 0x77
 8001476:	d006      	beq.n	8001486 <FL_PacketLoRaSend_START+0xe6>
 8001478:	2b77      	cmp	r3, #119	; 0x77
 800147a:	dc76      	bgt.n	800156a <FL_PacketLoRaSend_START+0x1ca>
 800147c:	2b4f      	cmp	r3, #79	; 0x4f
 800147e:	d070      	beq.n	8001562 <FL_PacketLoRaSend_START+0x1c2>
 8001480:	2b76      	cmp	r3, #118	; 0x76
 8001482:	d004      	beq.n	800148e <FL_PacketLoRaSend_START+0xee>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
					//HAL_UART_Transmit(&huart2, gl_u8ErrorFlag, 1, HAL_MAX_DELAY);
					break;
				default:
					/*Unknown Error*/
					break;
 8001484:	e071      	b.n	800156a <FL_PacketLoRaSend_START+0x1ca>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_DONE_UPDATE);
 8001486:	2008      	movs	r0, #8
 8001488:	f000 fa0e 	bl	80018a8 <Rte_SystemState_WriteData>
					break;
 800148c:	e070      	b.n	8001570 <FL_PacketLoRaSend_START+0x1d0>
					memset(buffer_number_pack_lost , 0xffff , 64);
 800148e:	2240      	movs	r2, #64	; 0x40
 8001490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001494:	483e      	ldr	r0, [pc, #248]	; (8001590 <FL_PacketLoRaSend_START+0x1f0>)
 8001496:	f007 ff09 	bl	80092ac <memset>
					uint16_t localcounter = INITIAL_VALUE_ZERO ;
 800149a:	2300      	movs	r3, #0
 800149c:	81fb      	strh	r3, [r7, #14]
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 80014a0:	7a9b      	ldrb	r3, [r3, #10]
 80014a2:	061a      	lsls	r2, r3, #24
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 80014a6:	7a5b      	ldrb	r3, [r3, #9]
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
												|(buffer_packet_Rx[8] << SHIFT_8_BIT)|(buffer_packet_Rx[7] << SHIFT_0_BIT);
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 80014ae:	7a1b      	ldrb	r3, [r3, #8]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4a39      	ldr	r2, [pc, #228]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 80014b6:	79d2      	ldrb	r2, [r2, #7]
 80014b8:	4313      	orrs	r3, r2
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 80014ba:	607b      	str	r3, [r7, #4]
					copy_Array_BL(u8buffer_Pack_Lost, buffer_packet_Rx,11,88);
 80014bc:	2358      	movs	r3, #88	; 0x58
 80014be:	220b      	movs	r2, #11
 80014c0:	4936      	ldr	r1, [pc, #216]	; (800159c <FL_PacketLoRaSend_START+0x1fc>)
 80014c2:	4838      	ldr	r0, [pc, #224]	; (80015a4 <FL_PacketLoRaSend_START+0x204>)
 80014c4:	f003 fd74 	bl	8004fb0 <copy_Array_BL>
					if (FL_CalculateCRCBItmaskLoRa(88,u8buffer_Pack_Lost ) == CRC_bitmask_req){
 80014c8:	4936      	ldr	r1, [pc, #216]	; (80015a4 <FL_PacketLoRaSend_START+0x204>)
 80014ca:	2058      	movs	r0, #88	; 0x58
 80014cc:	f7ff fde8 	bl	80010a0 <FL_CalculateCRCBItmaskLoRa>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d14a      	bne.n	800156e <FL_PacketLoRaSend_START+0x1ce>
						lost_counter_pos = 0;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	801a      	strh	r2, [r3, #0]
						RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 faf4 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 80014e8:	2300      	movs	r3, #0
 80014ea:	81bb      	strh	r3, [r7, #12]
 80014ec:	e014      	b.n	8001518 <FL_PacketLoRaSend_START+0x178>
							if(!FL_getPacketlost((uint8_t*) u8buffer_Pack_Lost , i )){
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	4619      	mov	r1, r3
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <FL_PacketLoRaSend_START+0x204>)
 80014f4:	f7ff ff36 	bl	8001364 <FL_getPacketlost>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <FL_PacketLoRaSend_START+0x172>
								buffer_number_pack_lost[localcounter] = i+1;
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	89ba      	ldrh	r2, [r7, #12]
 8001502:	3201      	adds	r2, #1
 8001504:	b291      	uxth	r1, r2
 8001506:	4a22      	ldr	r2, [pc, #136]	; (8001590 <FL_PacketLoRaSend_START+0x1f0>)
 8001508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								localcounter++;
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	81fb      	strh	r3, [r7, #14]
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 8001512:	89bb      	ldrh	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	81bb      	strh	r3, [r7, #12]
 8001518:	89ba      	ldrh	r2, [r7, #12]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	429a      	cmp	r2, r3
 8001522:	dbe4      	blt.n	80014ee <FL_PacketLoRaSend_START+0x14e>
						gl_u16NumberPacket_LoRa = localcounter;
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <FL_PacketLoRaSend_START+0x1e0>)
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	8013      	strh	r3, [r2, #0]
						gl_u8backup_flag =1;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <FL_PacketLoRaSend_START+0x1e8>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
						lost_counter_pos++;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <FL_PacketLoRaSend_START+0x1ec>)
 800153a:	801a      	strh	r2, [r3, #0]
						gl_u16No_Packet_Flash = buffer_number_pack_lost[INITIAL_VALUE_ZERO];
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <FL_PacketLoRaSend_START+0x1f0>)
 800153e:	881a      	ldrh	r2, [r3, #0]
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001542:	801a      	strh	r2, [r3, #0]
						if(gl_u16No_Packet_Flash != 0xffff){
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	4293      	cmp	r3, r2
 800154e:	d00e      	beq.n	800156e <FL_PacketLoRaSend_START+0x1ce>
							RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <FL_PacketLoRaSend_START+0x1e4>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fabb 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
							RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 800155a:	2006      	movs	r0, #6
 800155c:	f000 f9a4 	bl	80018a8 <Rte_SystemState_WriteData>
					break;
 8001560:	e005      	b.n	800156e <FL_PacketLoRaSend_START+0x1ce>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f9a0 	bl	80018a8 <Rte_SystemState_WriteData>
					break;
 8001568:	e002      	b.n	8001570 <FL_PacketLoRaSend_START+0x1d0>
					break;
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <FL_PacketLoRaSend_START+0x1d0>
					break;
 800156e:	bf00      	nop
			}
		}
	}
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200003fc 	.word	0x200003fc
 800157c:	2000040c 	.word	0x2000040c
 8001580:	20000324 	.word	0x20000324
 8001584:	20000020 	.word	0x20000020
 8001588:	20000327 	.word	0x20000327
 800158c:	20000328 	.word	0x20000328
 8001590:	20000468 	.word	0x20000468
 8001594:	20000326 	.word	0x20000326
 8001598:	20000314 	.word	0x20000314
 800159c:	2000033c 	.word	0x2000033c
 80015a0:	200003ac 	.word	0x200003ac
 80015a4:	20000410 	.word	0x20000410

080015a8 <FL_PacketLoRaDone_OTA>:
void FL_PacketLoRaDone_OTA(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af02      	add	r7, sp, #8
	GW_State_Save_State((uint32_t)SYS_IDLE);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f918 	bl	80017e4 <GW_State_Save_State>
	if(Flashing_end(ADDR_BROADCAST , gl_u32TargetAddr
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <FL_PacketLoRaDone_OTA+0x38>)
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	237c      	movs	r3, #124	; 0x7c
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <FL_PacketLoRaDone_OTA+0x3c>)
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <FL_PacketLoRaDone_OTA+0x40>)
 80015c0:	20ff      	movs	r0, #255	; 0xff
 80015c2:	f7ff fbd7 	bl	8000d74 <Flashing_end>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b77      	cmp	r3, #119	; 0x77
 80015ca:	d005      	beq.n	80015d8 <FL_PacketLoRaDone_OTA+0x30>
									,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_END_OTA ) != MCU_ACKNOWLEDGE_FINISHING){
		RTE_RUNNABLE_PACKET_LORA_REIVECED_WriteData(buffer_packet_Rx);
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <FL_PacketLoRaDone_OTA+0x3c>)
 80015ce:	f000 fad9 	bl	8001b84 <Rte_PacketLoRaReceived_WriteData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f968 	bl	80018a8 <Rte_SystemState_WriteData>
	}
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000314 	.word	0x20000314
 80015e4:	2000033c 	.word	0x2000033c
 80015e8:	200003ac 	.word	0x200003ac

080015ec <HAL_TIM_PeriodElapsedCallback>:
//		}
//	}
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
//	  else if(gl_FlagLoraSendDevice == 0x02)
//		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x03);
//	  else if(gl_FlagLoraSendDevice == 0x03)
//		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
  //}
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <GW_Config_GetParameter>:

// Global Parameter
uint8_t u8BW; // Bandwidth
uint8_t u8SF; // Spreading Frequency
uint8_t u8CR; // Coding Rate
uint32_t GW_Config_GetParameter(uint32_t Address){
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return *((volatile uint32_t*)(Address));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <GW_voidEraseRestoreConfigPage>:


void GW_voidEraseRestoreConfigPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8001614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001618:	b0b2      	sub	sp, #200	; 0xc8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <GW_voidEraseRestoreConfigPage+0x124>)
 8001634:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001638:	e031      	b.n	800169e <GW_voidEraseRestoreConfigPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 800163a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4013      	ands	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d017      	beq.n	8001694 <GW_voidEraseRestoreConfigPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 8001664:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	33c8      	adds	r3, #200	; 0xc8
 800166c:	443b      	add	r3, r7
 800166e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001672:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 8001676:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800167a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	33c8      	adds	r3, #200	; 0xc8
 8001684:	443b      	add	r3, r7
 8001686:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 800168a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800168e:	3301      	adds	r3, #1
 8001690:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 8001694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001698:	3304      	adds	r3, #4
 800169a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 800169e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <GW_voidEraseRestoreConfigPage+0x128>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d9c8      	bls.n	800163a <GW_voidEraseRestoreConfigPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_STATUS_GW_CONFIG;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <GW_voidEraseRestoreConfigPage+0x124>)
 80016b2:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80016b8:	f004 f982 	bl	80059c0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80016bc:	f107 020c 	add.w	r2, r7, #12
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 fa62 	bl	8005b90 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80016d2:	e01a      	b.n	800170a <GW_voidEraseRestoreConfigPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 80016d4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	33c8      	adds	r3, #200	; 0xc8
 80016dc:	443b      	add	r3, r7
 80016de:	f853 1c58 	ldr.w	r1, [r3, #-88]
 80016e2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	33c8      	adds	r3, #200	; 0xc8
 80016ea:	443b      	add	r3, r7
 80016ec:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4698      	mov	r8, r3
 80016f4:	4691      	mov	r9, r2
 80016f6:	4642      	mov	r2, r8
 80016f8:	464b      	mov	r3, r9
 80016fa:	2002      	movs	r0, #2
 80016fc:	f004 f8f0 	bl	80058e0 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8001700:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001704:	3301      	adds	r3, #1
 8001706:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800170a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800170e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001712:	429a      	cmp	r2, r3
 8001714:	d3de      	bcc.n	80016d4 <GW_voidEraseRestoreConfigPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	461c      	mov	r4, r3
 800171c:	4615      	mov	r5, r2
 800171e:	4622      	mov	r2, r4
 8001720:	462b      	mov	r3, r5
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	2002      	movs	r0, #2
 8001726:	f004 f8db 	bl	80058e0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800172a:	f004 f96f 	bl	8005a0c <HAL_FLASH_Lock>
}
 800172e:	bf00      	nop
 8001730:	37c8      	adds	r7, #200	; 0xc8
 8001732:	46bd      	mov	sp, r7
 8001734:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001738:	0801fc00 	.word	0x0801fc00
 800173c:	0801fc4f 	.word	0x0801fc4f

08001740 <GW_Config_Init>:


void GW_Config_Init(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 8001746:	2310      	movs	r3, #16
 8001748:	9305      	str	r3, [sp, #20]
 800174a:	2300      	movs	r3, #0
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	2300      	movs	r3, #0
 8001750:	9303      	str	r3, [sp, #12]
 8001752:	2307      	movs	r3, #7
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2306      	movs	r3, #6
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	2301      	movs	r3, #1
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	a31f      	add	r3, pc, #124	; (adr r3, 80017dc <GW_Config_Init+0x9c>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <GW_Config_Init+0x88>)
 8001766:	f001 fb53 	bl	8002e10 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 800176a:	2310      	movs	r3, #16
 800176c:	9305      	str	r3, [sp, #20]
 800176e:	2300      	movs	r3, #0
 8001770:	9304      	str	r3, [sp, #16]
 8001772:	2300      	movs	r3, #0
 8001774:	9303      	str	r3, [sp, #12]
 8001776:	2307      	movs	r3, #7
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2306      	movs	r3, #6
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2301      	movs	r3, #1
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	a30f      	add	r3, pc, #60	; (adr r3, 80017c0 <GW_Config_Init+0x80>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <GW_Config_Init+0x8c>)
 800178a:	f001 fb41 	bl	8002e10 <SX1278_init>
					SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);

	//init Lora RA-02 spi 2 RX mode
	//SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	RTE_RUNNABLE_APP_VER_WriteData(GW_Config_GetParameter(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS));
 800178e:	4810      	ldr	r0, [pc, #64]	; (80017d0 <GW_Config_Init+0x90>)
 8001790:	f7ff ff35 	bl	80015fe <GW_Config_GetParameter>
 8001794:	4603      	mov	r3, r0
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f8e5 	bl	8001968 <Rte_ApplVer_WriteData>
	RTE_RUNNABLE_NODE_ADDR_WriteData(GW_Config_GetParameter(FLAG_STATUS_ADDRESS_TARGET_ADDRESS));
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <GW_Config_Init+0x94>)
 80017a0:	f7ff ff2d 	bl	80015fe <GW_Config_GetParameter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f902 	bl	80019b0 <Rte_NodeAddr_WriteData>
	RTE_RUNNABLE_CODE_SIZE_WriteData(GW_Config_GetParameter(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS));
 80017ac:	480a      	ldr	r0, [pc, #40]	; (80017d8 <GW_Config_Init+0x98>)
 80017ae:	f7ff ff26 	bl	80015fe <GW_Config_GetParameter>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f8e9 	bl	800198c <Rte_CodeSize_WriteData>
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	19cf0e40 	.word	0x19cf0e40
 80017c4:	00000000 	.word	0x00000000
 80017c8:	200015ec 	.word	0x200015ec
 80017cc:	2000171c 	.word	0x2000171c
 80017d0:	0801fc30 	.word	0x0801fc30
 80017d4:	0801fc34 	.word	0x0801fc34
 80017d8:	0801fc38 	.word	0x0801fc38
 80017dc:	19de5080 	.word	0x19de5080
 80017e0:	00000000 	.word	0x00000000

080017e4 <GW_State_Save_State>:

void GW_State_Save_State(uint8_t State){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	GW_voidEraseRestoreConfigPage(FLAG_STATE_GW_CONFIG,State );
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <GW_State_Save_State+0x1c>)
 80017f4:	f7ff ff0e 	bl	8001614 <GW_voidEraseRestoreConfigPage>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0801fc08 	.word	0x0801fc08

08001804 <GW_State_Init>:
void GW_State_Init(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	uint8_t local_state = 0 ;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
	local_state = GW_Config_GetParameter(FLAG_STATE_GW_CONFIG);
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <GW_State_Init+0x34>)
 8001810:	f7ff fef5 	bl	80015fe <GW_Config_GetParameter>
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
	if (local_state  == 0xFF){
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d103      	bne.n	8001826 <GW_State_Init+0x22>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f842 	bl	80018a8 <Rte_SystemState_WriteData>
	}
	else{
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
	}
}
 8001824:	e003      	b.n	800182e <GW_State_Init+0x2a>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f83d 	bl	80018a8 <Rte_SystemState_WriteData>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0801fc08 	.word	0x0801fc08

0800183c <GW_Config_SetUp>:
void GW_Config_SetUp(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	uint32_t GW_u32LocalStatus_GW_Config = GW_Config_GetParameter(FLAG_STATUS_GW_CONFIG);
 8001842:	4813      	ldr	r0, [pc, #76]	; (8001890 <GW_Config_SetUp+0x54>)
 8001844:	f7ff fedb 	bl	80015fe <GW_Config_GetParameter>
 8001848:	6078      	str	r0, [r7, #4]
	uint32_t GW_u32LocalParameter= GW_Config_GetParameter(FLAG_PARAMETER_GW_CONFIG);
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <GW_Config_SetUp+0x58>)
 800184c:	f7ff fed7 	bl	80015fe <GW_Config_GetParameter>
 8001850:	4603      	mov	r3, r0
 8001852:	603b      	str	r3, [r7, #0]
	// Get Parameter

	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_RESET ){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <GW_Config_SetUp+0x26>

		// SET CONFIG Value as Default
		GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG ,GW_CONFIG_PARAMETER_SF_BW_CR_DEFAULT );
 800185a:	490f      	ldr	r1, [pc, #60]	; (8001898 <GW_Config_SetUp+0x5c>)
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <GW_Config_SetUp+0x58>)
 800185e:	f7ff fed9 	bl	8001614 <GW_voidEraseRestoreConfigPage>
	}
	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_SET ){
		// do nothing
	}
	RTE_RUNNABLE_CONFIG_LORA_ReadData(&GW_u32LocalParameter);
 8001862:	463b      	mov	r3, r7
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f97b 	bl	8001b60 <Rte_FlagConfigLoRA_ReadData>
	u8SF = (GW_u32LocalParameter >> SHIFT_16_BIT)& 0xFF ;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <GW_Config_SetUp+0x60>)
 8001872:	701a      	strb	r2, [r3, #0]
	u8BW = (GW_u32LocalParameter >> SHIFT_8_BIT)& 0xFF ;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <GW_Config_SetUp+0x64>)
 800187c:	701a      	strb	r2, [r3, #0]
	u8CR = (GW_u32LocalParameter >> SHIFT_0_BIT)& 0xFF ;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <GW_Config_SetUp+0x68>)
 8001884:	701a      	strb	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	0801fc00 	.word	0x0801fc00
 8001894:	0801fc04 	.word	0x0801fc04
 8001898:	00010801 	.word	0x00010801
 800189c:	20000aad 	.word	0x20000aad
 80018a0:	20000aac 	.word	0x20000aac
 80018a4:	20000aae 	.word	0x20000aae

080018a8 <Rte_SystemState_WriteData>:
static uint8_t *gl_DataBufferLoRaPtr =  NULL_PTR;
/*Port*/
/**************************************************************************/
/*                         Ports Write SystemState                         */
/**************************************************************************/
Std_ReturnType Rte_SystemState_WriteData(uint8_t SystemStateVar){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
	gl_u8SystemState = SystemStateVar;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <Rte_SystemState_WriteData+0x20>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	7013      	strb	r3, [r2, #0]
	return retVal;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000aaf 	.word	0x20000aaf

080018cc <Rte_SystemState_ReadData>:
/**************************************************************************/
/*                         Ports Read SystemState                        */
/**************************************************************************/
Std_ReturnType Rte_SystemState_ReadData(uint8_t *SystemStateVar){
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
	(*SystemStateVar) = gl_u8SystemState;
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <Rte_SystemState_ReadData+0x20>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	701a      	strb	r2, [r3, #0]
	return retVal;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000aaf 	.word	0x20000aaf

080018f0 <Rte_EncyptedBuffer_WriteData>:
/**************************************************************************/
/*                         Ports Write Encrypt                            */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_WriteData(uint8_t *EncyptedBufferP2Var){
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <Rte_EncyptedBuffer_WriteData+0x18>
		gl_EncryptDataBufferPtr = EncyptedBufferP2Var;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <Rte_EncyptedBuffer_WriteData+0x24>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6013      	str	r3, [r2, #0]
	return retVal;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000ac4 	.word	0x20000ac4

08001918 <Rte_EncyptedBuffer_ReadData>:
	return retVal;
}
/**************************************************************************/
/*                         Ports Read Encrypt                             */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_ReadData(uint8_t **EncyptedBufferP2Var){
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <Rte_EncyptedBuffer_ReadData+0x1a>
		(*EncyptedBufferP2Var) = gl_EncryptDataBufferPtr;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <Rte_EncyptedBuffer_ReadData+0x28>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
	return retVal;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000ac4 	.word	0x20000ac4

08001944 <Rte_Crc_WriteData>:


/**************************************************************************/
/*                         Ports Write Update FW                         */
/**************************************************************************/
Std_ReturnType Rte_Crc_WriteData(uint32_t CRCVar){
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
	gl_u32CRCVar = CRCVar;
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <Rte_Crc_WriteData+0x20>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
	return retVal;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000ab0 	.word	0x20000ab0

08001968 <Rte_ApplVer_WriteData>:
Std_ReturnType Rte_ApplVer_WriteData(uint16_t ApplVerVar){
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
	gl_u8ApplVerVar = ApplVerVar;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <Rte_ApplVer_WriteData+0x20>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	8013      	strh	r3, [r2, #0]
	return retVal;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000ab4 	.word	0x20000ab4

0800198c <Rte_CodeSize_WriteData>:
Std_ReturnType Rte_CodeSize_WriteData(uint32_t CodeSizeVar){
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
	gl_u32CodeSizeVar = CodeSizeVar;
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <Rte_CodeSize_WriteData+0x20>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
	return retVal;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000ab8 	.word	0x20000ab8

080019b0 <Rte_NodeAddr_WriteData>:
Std_ReturnType Rte_NodeAddr_WriteData(uint32_t NodeAddrVar){
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
	gl_u32NodeAddrVar = NodeAddrVar;
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <Rte_NodeAddr_WriteData+0x20>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
	return retVal;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000abc 	.word	0x20000abc

080019d4 <Rte_UpdateProgress_WriteData>:
{
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8HeaderAckFLagVar = HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_WriteData(uint8_t UpdateProgressVar){
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
	gl_u8UpdateProgressVar = UpdateProgressVar;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <Rte_UpdateProgress_WriteData+0x20>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	7013      	strb	r3, [r2, #0]
	return retVal;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000ac0 	.word	0x20000ac0

080019f8 <Rte_ApplVer_ReadData>:
Std_ReturnType Rte_Crc_ReadData(uint32_t *CRCVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*CRCVar) = gl_u32CRCVar;
	return retVal;
}
Std_ReturnType Rte_ApplVer_ReadData(uint16_t *ApplVerVar){
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
	(*ApplVerVar) = gl_u8ApplVerVar;
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <Rte_ApplVer_ReadData+0x20>)
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	801a      	strh	r2, [r3, #0]
	return retVal;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000ab4 	.word	0x20000ab4

08001a1c <Rte_CodeSize_ReadData>:
Std_ReturnType Rte_CodeSize_ReadData(uint32_t *CodeSizeVar){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
	(*CodeSizeVar) = gl_u32CodeSizeVar;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <Rte_CodeSize_ReadData+0x20>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	601a      	str	r2, [r3, #0]
	return retVal;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000ab8 	.word	0x20000ab8

08001a40 <Rte_NodeAddr_ReadData>:
Std_ReturnType Rte_NodeAddr_ReadData(uint32_t *NodeAddrVar){
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
	(*NodeAddrVar) = gl_u32NodeAddrVar;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <Rte_NodeAddr_ReadData+0x20>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	601a      	str	r2, [r3, #0]
	return retVal;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000abc 	.word	0x20000abc

08001a64 <Rte_UpdateProgress_ReadData>:
Std_ReturnType Rte_HeaderAckFlag_ReadData(uint8_t *HeaderAckFLagVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*HeaderAckFLagVar) = gl_u8HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_ReadData(uint8_t *UpdateProgressVar){
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
	(*UpdateProgressVar) = gl_u8UpdateProgressVar;
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <Rte_UpdateProgress_ReadData+0x20>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000ac0 	.word	0x20000ac0

08001a88 <Rte_UI_Error_WriteData>:
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8UserResponseVar = UserResponseVar;
	return retVal;
}

Std_ReturnType Rte_UI_Error_WriteData(uint8_t UIErrorVar){
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
	gl_u8UIErrorVar = UIErrorVar;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <Rte_UI_Error_WriteData+0x20>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000ac8 	.word	0x20000ac8

08001aac <Rte_UI_Error_ReadData>:

/**************************************************************************/
/*                        Ports  Read UI						 		  */
/**************************************************************************/
Std_ReturnType Rte_UI_Error_ReadData(uint8_t *UIErrorVar ){
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
	(*UIErrorVar) = gl_u8UIErrorVar;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <Rte_UI_Error_ReadData+0x20>)
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000ac8 	.word	0x20000ac8

08001ad0 <Rte_PacketSendLoraNum_WriteData>:
	return retVal;
}
/**************************************************************************/
/*                        Ports  Write num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_WriteData(uint16_t NumPacketLoraFWVar){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
	gl_u16NumPacketLoraFWVar = NumPacketLoraFWVar;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <Rte_PacketSendLoraNum_WriteData+0x20>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	8013      	strh	r3, [r2, #0]
	return retVal;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000aca 	.word	0x20000aca

08001af4 <Rte_FlagLoRaResp_WriteData>:

Std_ReturnType Rte_FlagLoRaResp_WriteData(uint8_t FlagLoRaRespVar){
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRaRespVar = FlagLoRaRespVar;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <Rte_FlagLoRaResp_WriteData+0x20>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000acc 	.word	0x20000acc

08001b18 <Rte_FlagConfigLoRA_WriteData>:

Std_ReturnType Rte_FlagConfigLoRA_WriteData(uint32_t FlagLoraConfigVar){
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
	gl_u32FlagLoraConfigVar = FlagLoraConfigVar;
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <Rte_FlagConfigLoRA_WriteData+0x20>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
	return retVal;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000ad0 	.word	0x20000ad0

08001b3c <Rte_PacketSendLoraNum_ReadData>:


/**************************************************************************/
/*                        Ports  Read num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_ReadData(uint16_t *NumPacketLoraFWVar){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
	(*NumPacketLoraFWVar) = gl_u16NumPacketLoraFWVar;
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <Rte_PacketSendLoraNum_ReadData+0x20>)
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	801a      	strh	r2, [r3, #0]
	return retVal;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000aca 	.word	0x20000aca

08001b60 <Rte_FlagConfigLoRA_ReadData>:
	Std_ReturnType retVal = RTE_E_OKE;
	(*FlagLoRaRespVar) = gl_u8FlagLoRaRespVar;
	return retVal;
}

Std_ReturnType Rte_FlagConfigLoRA_ReadData(uint32_t *FlagLoraConfigVar){
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
	(*FlagLoraConfigVar) =gl_u32FlagLoraConfigVar ;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <Rte_FlagConfigLoRA_ReadData+0x20>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
	return retVal;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000ad0 	.word	0x20000ad0

08001b84 <Rte_PacketLoRaReceived_WriteData>:

/**************************************************************************/
/*                         Ports Write Received Packet LoRa            */
/**************************************************************************/
Std_ReturnType Rte_PacketLoRaReceived_WriteData(uint8_t *BufferLoRaReceivedP2Var ){
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
	gl_DataBufferLoRaPtr= BufferLoRaReceivedP2Var;
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <Rte_PacketLoRaReceived_WriteData+0x20>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
	return retVal;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000ad4 	.word	0x20000ad4

08001ba8 <ReceiveFWUpdate_Init>:

/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveFWUpdate_Init(void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	gl_u32NodeAddr 						= INITIAL_VALUE_ZERO;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <ReceiveFWUpdate_Init+0x80>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
	gl_u8TypeFlag 						= INITIAL_VALUE_ZERO;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <ReceiveFWUpdate_Init+0x84>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
	gl_u32ImgSize 						= INITIAL_VALUE_ZERO;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <ReceiveFWUpdate_Init+0x88>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
	gl_u16AppVersion 					= INITIAL_VALUE_ZERO;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <ReceiveFWUpdate_Init+0x8c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
	gl_u32CRCValue 						= INITIAL_VALUE_ZERO;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <ReceiveFWUpdate_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	gl_u32ConfigLoRa 					= INITIAL_VALUE_ZERO;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <ReceiveFWUpdate_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
	gl_u8SystemState 					= SYS_IDLE;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <ReceiveFWUpdate_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
	gl_RXUartInternal_State 			= RX_IDLE;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <ReceiveFWUpdate_Init+0x9c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
	gl_u8RxUserResp						= INITIAL_VALUE_ZERO;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <ReceiveFWUpdate_Init+0xa0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
	gl_u8DonwLoadPercentProogess 		= INITIAL_VALUE_ZERO;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <ReceiveFWUpdate_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
	gl_u32Remain_Byte					= INITIAL_VALUE_ZERO;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <ReceiveFWUpdate_Init+0xa8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
	gl_u8DownLoadUpdateProgress 		= INITIAL_VALUE_ZERO;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <ReceiveFWUpdate_Init+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
	gl_u8NumberPacket_Uart 				= INITIAL_VALUE_ZERO;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <ReceiveFWUpdate_Init+0xb0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
	gl_u16NumberPacket_LoRa 				= INITIAL_VALUE_ZERO;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <ReceiveFWUpdate_Init+0xb4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]
	gl_u32ReceiveBytes 					= INITIAL_VALUE_ZERO;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <ReceiveFWUpdate_Init+0xb8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <ReceiveFWUpdate_Init+0xbc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <ReceiveFWUpdate_Init+0xbc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 	1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	4913      	ldr	r1, [pc, #76]	; (8001c68 <ReceiveFWUpdate_Init+0xc0>)
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <ReceiveFWUpdate_Init+0xbc>)
 8001c1c:	f006 fd81 	bl	8008722 <HAL_UART_Receive_IT>

	F_voidInitVariables();
 8001c20:	f7fe ff9e 	bl	8000b60 <F_voidInitVariables>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000ad8 	.word	0x20000ad8
 8001c2c:	20000adc 	.word	0x20000adc
 8001c30:	20000ae0 	.word	0x20000ae0
 8001c34:	20000ae4 	.word	0x20000ae4
 8001c38:	20000ae8 	.word	0x20000ae8
 8001c3c:	20000aec 	.word	0x20000aec
 8001c40:	20000f15 	.word	0x20000f15
 8001c44:	20000af0 	.word	0x20000af0
 8001c48:	20000f14 	.word	0x20000f14
 8001c4c:	20000f0d 	.word	0x20000f0d
 8001c50:	20000f08 	.word	0x20000f08
 8001c54:	20000f0c 	.word	0x20000f0c
 8001c58:	20000f05 	.word	0x20000f05
 8001c5c:	20000f06 	.word	0x20000f06
 8001c60:	20000f10 	.word	0x20000f10
 8001c64:	20001588 	.word	0x20001588
 8001c68:	20000ef4 	.word	0x20000ef4

08001c6c <ReceiveFWUpdate_MainFunc>:
void ReceiveFWUpdate_MainFunc(void){
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
	switch (gl_RXUartInternal_State) {
 8001c72:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	f200 8215 	bhi.w	80020a6 <ReceiveFWUpdate_MainFunc+0x43a>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <ReceiveFWUpdate_MainFunc+0x18>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001cc9 	.word	0x08001cc9
 8001c8c:	08001d23 	.word	0x08001d23
 8001c90:	080020a7 	.word	0x080020a7
 8001c94:	08001ea5 	.word	0x08001ea5
 8001c98:	080020a7 	.word	0x080020a7
 8001c9c:	08002025 	.word	0x08002025
 8001ca0:	080020a7 	.word	0x080020a7
 8001ca4:	080020a7 	.word	0x080020a7
 8001ca8:	080020a7 	.word	0x080020a7
 8001cac:	080020a7 	.word	0x080020a7
 8001cb0:	0800203b 	.word	0x0800203b
 8001cb4:	08001ceb 	.word	0x08001ceb
		case RX_IDLE:
		{
			if(gl_u8RXBuffer_Header == NEW_UPDATE_REQUEST)
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 81f5 	bne.w	80020aa <ReceiveFWUpdate_MainFunc+0x43e>
				gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
			break;
 8001cc6:	e1f0      	b.n	80020aa <ReceiveFWUpdate_MainFunc+0x43e>
		}
		case RX_ACCEPT_UPDATE :
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;
 8001cc8:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001cca:	2205      	movs	r2, #5
 8001ccc:	701a      	strb	r2, [r3, #0]
			F_Erase_Image(IMAGE_NEW_FIRMWARE);
 8001cce:	4887      	ldr	r0, [pc, #540]	; (8001eec <ReceiveFWUpdate_MainFunc+0x280>)
 8001cd0:	f7fe ff92 	bl	8000bf8 <F_Erase_Image>
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4983      	ldr	r1, [pc, #524]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001cdc:	4884      	ldr	r0, [pc, #528]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001cde:	f006 fc9d 	bl	800861c <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	701a      	strb	r2, [r3, #0]
			break;
 8001ce8:	e1e0      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
		}
		case RX_DENY_UPDATE:
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_DENY;
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001cec:	2206      	movs	r2, #6
 8001cee:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	497c      	ldr	r1, [pc, #496]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001cf8:	487d      	ldr	r0, [pc, #500]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001cfa:	f006 fc8f 	bl	800861c <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_u8RxUserResp = INITIAL_VALUE_ZERO;
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <ReceiveFWUpdate_MainFunc+0x288>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff fdcf 	bl	80018a8 <Rte_SystemState_WriteData>
			// Enable Uart Interrupt hear
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001d0a:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State = RX_IDLE;
 8001d1a:	4b71      	ldr	r3, [pc, #452]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
			break;
 8001d20:	e1c4      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
			/*Receive Header file*/
			//HAL_UART_Receive(&huart2, gl_u8RXBuffer_Header, HEADER_CONFIG_SIZE, HAL_MAX_DELAY);
			/*Put Information FW to RTE*/
			//byte 7 to byte 4 is size

			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d24:	7a1b      	ldrb	r3, [r3, #8]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <ReceiveFWUpdate_MainFunc+0x28c>)
 8001d2a:	fb03 f202 	mul.w	r2, r3, r2
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d30:	79db      	ldrb	r3, [r3, #7]
 8001d32:	4619      	mov	r1, r3
 8001d34:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	441a      	add	r2, r3
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8001d3e:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d40:	799b      	ldrb	r3, [r3, #6]
 8001d42:	4619      	mov	r1, r3
 8001d44:	2364      	movs	r3, #100	; 0x64
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001d4a:	4413      	add	r3, r2
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8001d4c:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d4e:	7952      	ldrb	r2, [r2, #5]
 8001d50:	4413      	add	r3, r2
 8001d52:	461a      	mov	r2, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <ReceiveFWUpdate_MainFunc+0x290>)
 8001d56:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = (gl_u8RXBuffer_Header[9] << SHIFT_8_BIT) | (gl_u8RXBuffer_Header[10] << SHIFT_0_BIT);
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d5a:	7a5b      	ldrb	r3, [r3, #9]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	4b60      	ldr	r3, [pc, #384]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d62:	7a9b      	ldrb	r3, [r3, #10]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <ReceiveFWUpdate_MainFunc+0x294>)
 8001d6e:	801a      	strh	r2, [r3, #0]
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8001d70:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d72:	7b9b      	ldrb	r3, [r3, #14]
 8001d74:	061a      	lsls	r2, r3, #24
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
							 |(gl_u8RXBuffer_Header[11] <<  SHIFT_8_BIT)  | (gl_u8RXBuffer_Header[13] << SHIFT_0_BIT);
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d80:	7adb      	ldrb	r3, [r3, #11]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	4313      	orrs	r3, r2
 8001d86:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001d88:	7b52      	ldrb	r2, [r2, #13]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	461a      	mov	r2, r3
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <ReceiveFWUpdate_MainFunc+0x298>)
 8001d90:	601a      	str	r2, [r3, #0]
			//Update Parameter
			F_FlashWordToAddress(FLAG_PARAMETER_GW_CONFIG, gl_u32ConfigLoRa);
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <ReceiveFWUpdate_MainFunc+0x298>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	485b      	ldr	r0, [pc, #364]	; (8001f08 <ReceiveFWUpdate_MainFunc+0x29c>)
 8001d9a:	f7fe ff67 	bl	8000c6c <F_FlashWordToAddress>



			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	061a      	lsls	r2, r3, #24
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
					|(gl_u8RXBuffer_Header[2]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[3]<<  SHIFT_0_BIT);
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001db6:	78d2      	ldrb	r2, [r2, #3]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	461a      	mov	r2, r3
			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001dbe:	601a      	str	r2, [r3, #0]


			gl_u8RXBuffer_Flag_Req_Bytes = gl_u8RXBuffer_Header[4];
 8001dc0:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001dc2:	791a      	ldrb	r2, [r3, #4]
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001dc6:	701a      	strb	r2, [r3, #0]
			if(gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_HEADER_FLAG ){
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d159      	bne.n	8001e84 <ReceiveFWUpdate_MainFunc+0x218>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,(uint32_t)gl_u16AppVersion);
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <ReceiveFWUpdate_MainFunc+0x294>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	484e      	ldr	r0, [pc, #312]	; (8001f10 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8001dd8:	f7ff fc1c 	bl	8001614 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,gl_u32ImgSize);
 8001ddc:	4b47      	ldr	r3, [pc, #284]	; (8001efc <ReceiveFWUpdate_MainFunc+0x290>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	484c      	ldr	r0, [pc, #304]	; (8001f14 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8001de4:	f7ff fc16 	bl	8001614 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_ADDRESS_TARGET_ADDRESS,gl_u32NodeAddr);
 8001de8:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	484a      	ldr	r0, [pc, #296]	; (8001f18 <ReceiveFWUpdate_MainFunc+0x2ac>)
 8001df0:	f7ff fc10 	bl	8001614 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG,GW_CONFIG_PARAMETER_SET);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	4843      	ldr	r0, [pc, #268]	; (8001f08 <ReceiveFWUpdate_MainFunc+0x29c>)
 8001dfa:	f7ff fc0b 	bl	8001614 <GW_voidEraseRestoreConfigPage>
				RTE_RUNNABLE_APP_VER_WriteData(gl_u16AppVersion);
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <ReceiveFWUpdate_MainFunc+0x294>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fdb0 	bl	8001968 <Rte_ApplVer_WriteData>
				RTE_RUNNABLE_CODE_SIZE_WriteData(gl_u32ImgSize);
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <ReceiveFWUpdate_MainFunc+0x290>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fdbd 	bl	800198c <Rte_CodeSize_WriteData>
				//RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCValue);
				RTE_RUNNABLE_NODE_ADDR_WriteData(gl_u32NodeAddr);
 8001e12:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fdca 	bl	80019b0 <Rte_NodeAddr_WriteData>
				RTE_RUNNABLE_CONFIG_LORA_WriteData(gl_u32ConfigLoRa);
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <ReceiveFWUpdate_MainFunc+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe79 	bl	8001b18 <Rte_FlagConfigLoRA_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	701a      	strb	r2, [r3, #0]
				//Calculate Number packet Rx Uart
				gl_u8NumberPacket_Uart = (uint8_t)(gl_u32ImgSize/PACKET_1024bytes)+1;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <ReceiveFWUpdate_MainFunc+0x290>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0a9b      	lsrs	r3, r3, #10
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <ReceiveFWUpdate_MainFunc+0x2b0>)
 8001e3a:	701a      	strb	r2, [r3, #0]
				/* Get info from header */

				gl_u32Remain_Byte = (gl_u32ImgSize % PACKET_1024bytes);
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <ReceiveFWUpdate_MainFunc+0x290>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e44:	4a36      	ldr	r2, [pc, #216]	; (8001f20 <ReceiveFWUpdate_MainFunc+0x2b4>)
 8001e46:	6013      	str	r3, [r2, #0]

				RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16NumberPacket_LoRa);
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <ReceiveFWUpdate_MainFunc+0x2b8>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe3f 	bl	8001ad0 <Rte_PacketSendLoraNum_WriteData>
				gl_u8RXBuffer_Flag_Req_Bytes = HEADER_FLAG_RECEIVED;
 8001e52:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e54:	2208      	movs	r2, #8
 8001e56:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_IDLE);
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e60:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001e62:	f006 fbdb 	bl	800861c <HAL_UART_Transmit>
				/*Change state */
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_RECEIVE_UPDATE);
 8001e66:	2002      	movs	r0, #2
 8001e68:	f7ff fd1e 	bl	80018a8 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_PACKET;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <ReceiveFWUpdate_MainFunc+0x274>)
 8001e6e:	2204      	movs	r2, #4
 8001e70:	701a      	strb	r2, [r3, #0]

				__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0220 	bic.w	r2, r2, #32
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e009      	b.n	8001e98 <ReceiveFWUpdate_MainFunc+0x22c>
			}
			else{
				/*Invalid Request*/
				gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e86:	2204      	movs	r2, #4
 8001e88:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4915      	ldr	r1, [pc, #84]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e92:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001e94:	f006 fbc2 	bl	800861c <HAL_UART_Transmit>
			}
			memset(gl_u8RXBuffer_Header , 0x00 , 16);
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <ReceiveFWUpdate_MainFunc+0x278>)
 8001e9e:	f007 fa05 	bl	80092ac <memset>
			break;
 8001ea2:	e103      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
		}
		case RX_RECEIVED_PACKET:
		{

			if(gl_u32ReceiveBytes == 0)
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13f      	bne.n	8001f2c <ReceiveFWUpdate_MainFunc+0x2c0>
			{
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001eae:	220a      	movs	r2, #10
 8001eb0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	490b      	ldr	r1, [pc, #44]	; (8001ee8 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001ebc:	f006 fbae 	bl	800861c <HAL_UART_Transmit>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <ReceiveFWUpdate_MainFunc+0x284>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	60da      	str	r2, [r3, #12]

				gl_u32ReceiveBytes += PACKET_1024bytes;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e04c      	b.n	8001f78 <ReceiveFWUpdate_MainFunc+0x30c>
 8001ede:	bf00      	nop
 8001ee0:	20000af0 	.word	0x20000af0
 8001ee4:	20000ef4 	.word	0x20000ef4
 8001ee8:	20000f04 	.word	0x20000f04
 8001eec:	08010000 	.word	0x08010000
 8001ef0:	20001588 	.word	0x20001588
 8001ef4:	20000f14 	.word	0x20000f14
 8001ef8:	000f4240 	.word	0x000f4240
 8001efc:	20000ae0 	.word	0x20000ae0
 8001f00:	20000ae4 	.word	0x20000ae4
 8001f04:	20000aec 	.word	0x20000aec
 8001f08:	0801fc04 	.word	0x0801fc04
 8001f0c:	20000ad8 	.word	0x20000ad8
 8001f10:	0801fc30 	.word	0x0801fc30
 8001f14:	0801fc38 	.word	0x0801fc38
 8001f18:	0801fc34 	.word	0x0801fc34
 8001f1c:	20000f05 	.word	0x20000f05
 8001f20:	20000f08 	.word	0x20000f08
 8001f24:	20000f06 	.word	0x20000f06
 8001f28:	20000f10 	.word	0x20000f10
			}
			else if(gl_u8NumberPacket_Uart >= 1 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET)
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <ReceiveFWUpdate_MainFunc+0x448>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <ReceiveFWUpdate_MainFunc+0x30c>
 8001f34:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b0b      	cmp	r3, #11
 8001f3a:	d11d      	bne.n	8001f78 <ReceiveFWUpdate_MainFunc+0x30c>
			{
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
				gl_u8NumberPacket_Uart--;
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <ReceiveFWUpdate_MainFunc+0x448>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <ReceiveFWUpdate_MainFunc+0x448>)
 8001f46:	701a      	strb	r2, [r3, #0]
				//Flash to block
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	495a      	ldr	r1, [pc, #360]	; (80020b8 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001f50:	485a      	ldr	r0, [pc, #360]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001f52:	f006 fb63 	bl	800861c <HAL_UART_Transmit>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0220 	orr.w	r2, r2, #32
 8001f64:	60da      	str	r2, [r3, #12]
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001f68:	220a      	movs	r2, #10
 8001f6a:	701a      	strb	r2, [r3, #0]
				gl_u32ReceiveBytes += PACKET_1024bytes;
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 8001f76:	6013      	str	r3, [r2, #0]

			}
			if((gl_u8NumberPacket_Uart == 0)&&(gl_u32Remain_Byte > 0))
 8001f78:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <ReceiveFWUpdate_MainFunc+0x448>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d125      	bne.n	8001fcc <ReceiveFWUpdate_MainFunc+0x360>
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x458>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <ReceiveFWUpdate_MainFunc+0x360>
			{
				gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	2201      	movs	r2, #1
 8001f94:	4948      	ldr	r1, [pc, #288]	; (80020b8 <ReceiveFWUpdate_MainFunc+0x44c>)
 8001f96:	4849      	ldr	r0, [pc, #292]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001f98:	f006 fb40 	bl	800861c <HAL_UART_Transmit>
				//F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
				gl_u32ReceiveBytes += gl_u32Remain_Byte;
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x458>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 8001fa8:	6013      	str	r3, [r2, #0]
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8001faa:	2003      	movs	r0, #3
 8001fac:	f7ff fc7c 	bl	80018a8 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_DONE_INSTALL_FW;
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x45c>)
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	701a      	strb	r2, [r3, #0]
				GW_State_Save_State((uint32_t)SYS_REQUEST_OTA);
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	f7ff fc14 	bl	80017e4 <GW_State_Save_State>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	60da      	str	r2, [r3, #12]

			else{
				/*ERROR*/
			}
			/*Calculate Progress*/
			gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe f973 	bl	80002bc <__aeabi_ui2f>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <ReceiveFWUpdate_MainFunc+0x460>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f96d 	bl	80002bc <__aeabi_ui2f>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7fe fa74 	bl	80004d4 <__aeabi_fdiv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fb0c 	bl	800060c <__aeabi_f2uiz>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <ReceiveFWUpdate_MainFunc+0x464>)
 8001ffa:	701a      	strb	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = gl_u8DonwLoadPercentProogess*100;
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <ReceiveFWUpdate_MainFunc+0x464>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	4413      	add	r3, r2
 8002006:	461a      	mov	r2, r3
 8002008:	0091      	lsls	r1, r2, #2
 800200a:	461a      	mov	r2, r3
 800200c:	460b      	mov	r3, r1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <ReceiveFWUpdate_MainFunc+0x468>)
 8002016:	701a      	strb	r2, [r3, #0]
			/*Write to RTE */
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <ReceiveFWUpdate_MainFunc+0x468>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fcd9 	bl	80019d4 <Rte_UpdateProgress_WriteData>
			break;
 8002022:	e043      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
		}
		case RX_DONE_INSTALL_FW :
		{
			uint8_t retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 8002024:	482c      	ldr	r0, [pc, #176]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x46c>)
 8002026:	f7ff fc51 	bl	80018cc <Rte_SystemState_ReadData>
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
			if(retVal == RTE_E_OKE){
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d102      	bne.n	800203a <ReceiveFWUpdate_MainFunc+0x3ce>
				if(gl_u8SystemState == SYS_DONE_UPDATE){
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x46c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b08      	cmp	r3, #8
				}
			}
		}
		case RX_END_STATE:
		{
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <ReceiveFWUpdate_MainFunc+0x450>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	60da      	str	r2, [r3, #12]
			gl_u32NodeAddr = INITIAL_VALUE_ZERO;
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <ReceiveFWUpdate_MainFunc+0x470>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
			gl_u8TypeFlag = INITIAL_VALUE_ZERO;
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <ReceiveFWUpdate_MainFunc+0x474>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
			gl_u32ImgSize =INITIAL_VALUE_ZERO;
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <ReceiveFWUpdate_MainFunc+0x460>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = INITIAL_VALUE_ZERO;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x478>)
 800205e:	2200      	movs	r2, #0
 8002060:	801a      	strh	r2, [r3, #0]
			gl_u32CRCValue = INITIAL_VALUE_ZERO ;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <ReceiveFWUpdate_MainFunc+0x47c>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
			gl_u8SystemState = SYS_IDLE;
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x46c>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			gl_RXUartInternal_State = RX_IDLE;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x45c>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			gl_u8RxUserResp=INITIAL_VALUE_ZERO;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <ReceiveFWUpdate_MainFunc+0x480>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
			gl_u8DonwLoadPercentProogess =INITIAL_VALUE_ZERO;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <ReceiveFWUpdate_MainFunc+0x464>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			gl_u32Remain_Byte= INITIAL_VALUE_ZERO;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x458>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = INITIAL_VALUE_ZERO;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <ReceiveFWUpdate_MainFunc+0x468>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart = INITIAL_VALUE_ZERO;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <ReceiveFWUpdate_MainFunc+0x448>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
			gl_u16NumberPacket_LoRa = INITIAL_VALUE_ZERO;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <ReceiveFWUpdate_MainFunc+0x484>)
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
			gl_u32ReceiveBytes = INITIAL_VALUE_ZERO;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <ReceiveFWUpdate_MainFunc+0x454>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(INITIAL_VALUE_ZERO);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fc98 	bl	80019d4 <Rte_UpdateProgress_WriteData>
			break;
 80020a4:	e002      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
		}
		default:
			break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <ReceiveFWUpdate_MainFunc+0x440>
			break;
 80020aa:	bf00      	nop
	}
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	20000f05 	.word	0x20000f05
 80020b8:	20000f04 	.word	0x20000f04
 80020bc:	20001588 	.word	0x20001588
 80020c0:	20000f10 	.word	0x20000f10
 80020c4:	20000f08 	.word	0x20000f08
 80020c8:	20000af0 	.word	0x20000af0
 80020cc:	20000ae0 	.word	0x20000ae0
 80020d0:	20000f0d 	.word	0x20000f0d
 80020d4:	20000f0c 	.word	0x20000f0c
 80020d8:	20000f15 	.word	0x20000f15
 80020dc:	20000ad8 	.word	0x20000ad8
 80020e0:	20000adc 	.word	0x20000adc
 80020e4:	20000ae4 	.word	0x20000ae4
 80020e8:	20000ae8 	.word	0x20000ae8
 80020ec:	20000f14 	.word	0x20000f14
 80020f0:	20000f06 	.word	0x20000f06

080020f4 <HAL_UART_RxCpltCallback>:
/********************HAL_UART_CALLBACK***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal;
	if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST){
 80020fc:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_UART_RxCpltCallback+0x100>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d11f      	bne.n	8002144 <HAL_UART_RxCpltCallback+0x50>
		retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 8002104:	483c      	ldr	r0, [pc, #240]	; (80021f8 <HAL_UART_RxCpltCallback+0x104>)
 8002106:	f7ff fbe1 	bl	80018cc <Rte_SystemState_ReadData>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]
		if(RTE_E_OKE == retVal){
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d113      	bne.n	800213c <HAL_UART_RxCpltCallback+0x48>
			//
			// Change state to system update
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_NEW_UPDATE_REQ);
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff fbc7 	bl	80018a8 <Rte_SystemState_WriteData>
			gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_UART_RxCpltCallback+0x108>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
			// Disable interrupt UART
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002120:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 16);
 8002130:	2210      	movs	r2, #16
 8002132:	4930      	ldr	r1, [pc, #192]	; (80021f4 <HAL_UART_RxCpltCallback+0x100>)
 8002134:	4832      	ldr	r0, [pc, #200]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 8002136:	f006 faf4 	bl	8008722 <HAL_UART_Receive_IT>
	}

	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);


}
 800213a:	e057      	b.n	80021ec <HAL_UART_RxCpltCallback+0xf8>
			gl_u8RXBuffer_Flag_Req_Bytes = GATEWAY_BUSY;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_UART_RxCpltCallback+0x110>)
 800213e:	2203      	movs	r2, #3
 8002140:	701a      	strb	r2, [r3, #0]
}
 8002142:	e053      	b.n	80021ec <HAL_UART_RxCpltCallback+0xf8>
	else if (gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_NEXT_PACKET || gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET ){
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_UART_RxCpltCallback+0x110>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b0a      	cmp	r3, #10
 800214a:	d003      	beq.n	8002154 <HAL_UART_RxCpltCallback+0x60>
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_UART_RxCpltCallback+0x110>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b0b      	cmp	r3, #11
 8002152:	d130      	bne.n	80021b6 <HAL_UART_RxCpltCallback+0xc2>
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 8002164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002168:	4927      	ldr	r1, [pc, #156]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 800216a:	4825      	ldr	r0, [pc, #148]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 800216c:	f006 fad9 	bl	8008722 <HAL_UART_Receive_IT>
		Decrypt_MainFunc((uint8_t*)gl_u8RXBuffer);
 8002170:	4825      	ldr	r0, [pc, #148]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 8002172:	f7fe fce5 	bl	8000b40 <Decrypt_MainFunc>
		if(gl_u8NumberPacket_Uart == 1){
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_UART_RxCpltCallback+0x118>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <HAL_UART_RxCpltCallback+0xa4>
			F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_UART_RxCpltCallback+0x11c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	4820      	ldr	r0, [pc, #128]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 8002188:	f7fe fcf8 	bl	8000b7c <F_FlashBlockToAddress>
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 800218c:	2201      	movs	r2, #1
 800218e:	4919      	ldr	r1, [pc, #100]	; (80021f4 <HAL_UART_RxCpltCallback+0x100>)
 8002190:	481b      	ldr	r0, [pc, #108]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 8002192:	f006 fac6 	bl	8008722 <HAL_UART_Receive_IT>
 8002196:	e004      	b.n	80021a2 <HAL_UART_RxCpltCallback+0xae>
			F_FlashBlockToAddress(gl_u8RXBuffer, PACKET_1024bytes);
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	481a      	ldr	r0, [pc, #104]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 800219e:	f7fe fced 	bl	8000b7c <F_FlashBlockToAddress>
		memset(gl_u8RXBuffer , 0xff , 1024);
 80021a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a6:	21ff      	movs	r1, #255	; 0xff
 80021a8:	4817      	ldr	r0, [pc, #92]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 80021aa:	f007 f87f 	bl	80092ac <memset>
		gl_u8RXBuffer_Flag_Req_Bytes = MASTER_ACCEPT_PACKET;
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_RxCpltCallback+0x110>)
 80021b0:	220b      	movs	r2, #11
 80021b2:	701a      	strb	r2, [r3, #0]
}
 80021b4:	e01a      	b.n	80021ec <HAL_UART_RxCpltCallback+0xf8>
	else if(gl_RXUartInternal_State == RX_RECEIVED_HEADER)
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_RxCpltCallback+0x108>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d106      	bne.n	80021cc <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	4911      	ldr	r1, [pc, #68]	; (8002208 <HAL_UART_RxCpltCallback+0x114>)
 80021c4:	480e      	ldr	r0, [pc, #56]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 80021c6:	f006 faac 	bl	8008722 <HAL_UART_Receive_IT>
}
 80021ca:	e00f      	b.n	80021ec <HAL_UART_RxCpltCallback+0xf8>
		gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_UART_RxCpltCallback+0x110>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_UART_RxCpltCallback+0x100>)
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <HAL_UART_RxCpltCallback+0x10c>)
 80021e8:	f006 fa9b 	bl	8008722 <HAL_UART_Receive_IT>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000ef4 	.word	0x20000ef4
 80021f8:	20000f15 	.word	0x20000f15
 80021fc:	20000af0 	.word	0x20000af0
 8002200:	20001588 	.word	0x20001588
 8002204:	20000f04 	.word	0x20000f04
 8002208:	20000af4 	.word	0x20000af4
 800220c:	20000f05 	.word	0x20000f05
 8002210:	20000f08 	.word	0x20000f08

08002214 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800221a:	f000 fa27 	bl	800266c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800221e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002222:	2201      	movs	r2, #1
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	485b      	ldr	r0, [pc, #364]	; (8002394 <SSD1306_Init+0x180>)
 8002228:	f004 f968 	bl	80064fc <HAL_I2C_IsDeviceReady>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002232:	2300      	movs	r3, #0
 8002234:	e0a9      	b.n	800238a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002236:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800223a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800223c:	e002      	b.n	8002244 <SSD1306_Init+0x30>
		p--;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3b01      	subs	r3, #1
 8002242:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f9      	bne.n	800223e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800224a:	22ae      	movs	r2, #174	; 0xae
 800224c:	2100      	movs	r1, #0
 800224e:	2078      	movs	r0, #120	; 0x78
 8002250:	f000 fa86 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002254:	2220      	movs	r2, #32
 8002256:	2100      	movs	r1, #0
 8002258:	2078      	movs	r0, #120	; 0x78
 800225a:	f000 fa81 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800225e:	2210      	movs	r2, #16
 8002260:	2100      	movs	r1, #0
 8002262:	2078      	movs	r0, #120	; 0x78
 8002264:	f000 fa7c 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002268:	22b0      	movs	r2, #176	; 0xb0
 800226a:	2100      	movs	r1, #0
 800226c:	2078      	movs	r0, #120	; 0x78
 800226e:	f000 fa77 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002272:	22c8      	movs	r2, #200	; 0xc8
 8002274:	2100      	movs	r1, #0
 8002276:	2078      	movs	r0, #120	; 0x78
 8002278:	f000 fa72 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2078      	movs	r0, #120	; 0x78
 8002282:	f000 fa6d 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002286:	2210      	movs	r2, #16
 8002288:	2100      	movs	r1, #0
 800228a:	2078      	movs	r0, #120	; 0x78
 800228c:	f000 fa68 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	2100      	movs	r1, #0
 8002294:	2078      	movs	r0, #120	; 0x78
 8002296:	f000 fa63 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800229a:	2281      	movs	r2, #129	; 0x81
 800229c:	2100      	movs	r1, #0
 800229e:	2078      	movs	r0, #120	; 0x78
 80022a0:	f000 fa5e 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	2100      	movs	r1, #0
 80022a8:	2078      	movs	r0, #120	; 0x78
 80022aa:	f000 fa59 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022ae:	22a1      	movs	r2, #161	; 0xa1
 80022b0:	2100      	movs	r1, #0
 80022b2:	2078      	movs	r0, #120	; 0x78
 80022b4:	f000 fa54 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022b8:	22a6      	movs	r2, #166	; 0xa6
 80022ba:	2100      	movs	r1, #0
 80022bc:	2078      	movs	r0, #120	; 0x78
 80022be:	f000 fa4f 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022c2:	22a8      	movs	r2, #168	; 0xa8
 80022c4:	2100      	movs	r1, #0
 80022c6:	2078      	movs	r0, #120	; 0x78
 80022c8:	f000 fa4a 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022cc:	223f      	movs	r2, #63	; 0x3f
 80022ce:	2100      	movs	r1, #0
 80022d0:	2078      	movs	r0, #120	; 0x78
 80022d2:	f000 fa45 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022d6:	22a4      	movs	r2, #164	; 0xa4
 80022d8:	2100      	movs	r1, #0
 80022da:	2078      	movs	r0, #120	; 0x78
 80022dc:	f000 fa40 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022e0:	22d3      	movs	r2, #211	; 0xd3
 80022e2:	2100      	movs	r1, #0
 80022e4:	2078      	movs	r0, #120	; 0x78
 80022e6:	f000 fa3b 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2078      	movs	r0, #120	; 0x78
 80022f0:	f000 fa36 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022f4:	22d5      	movs	r2, #213	; 0xd5
 80022f6:	2100      	movs	r1, #0
 80022f8:	2078      	movs	r0, #120	; 0x78
 80022fa:	f000 fa31 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022fe:	22f0      	movs	r2, #240	; 0xf0
 8002300:	2100      	movs	r1, #0
 8002302:	2078      	movs	r0, #120	; 0x78
 8002304:	f000 fa2c 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002308:	22d9      	movs	r2, #217	; 0xd9
 800230a:	2100      	movs	r1, #0
 800230c:	2078      	movs	r0, #120	; 0x78
 800230e:	f000 fa27 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002312:	2222      	movs	r2, #34	; 0x22
 8002314:	2100      	movs	r1, #0
 8002316:	2078      	movs	r0, #120	; 0x78
 8002318:	f000 fa22 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800231c:	22da      	movs	r2, #218	; 0xda
 800231e:	2100      	movs	r1, #0
 8002320:	2078      	movs	r0, #120	; 0x78
 8002322:	f000 fa1d 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002326:	2212      	movs	r2, #18
 8002328:	2100      	movs	r1, #0
 800232a:	2078      	movs	r0, #120	; 0x78
 800232c:	f000 fa18 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002330:	22db      	movs	r2, #219	; 0xdb
 8002332:	2100      	movs	r1, #0
 8002334:	2078      	movs	r0, #120	; 0x78
 8002336:	f000 fa13 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800233a:	2220      	movs	r2, #32
 800233c:	2100      	movs	r1, #0
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 fa0e 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002344:	228d      	movs	r2, #141	; 0x8d
 8002346:	2100      	movs	r1, #0
 8002348:	2078      	movs	r0, #120	; 0x78
 800234a:	f000 fa09 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800234e:	2214      	movs	r2, #20
 8002350:	2100      	movs	r1, #0
 8002352:	2078      	movs	r0, #120	; 0x78
 8002354:	f000 fa04 	bl	8002760 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002358:	22af      	movs	r2, #175	; 0xaf
 800235a:	2100      	movs	r1, #0
 800235c:	2078      	movs	r0, #120	; 0x78
 800235e:	f000 f9ff 	bl	8002760 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002362:	222e      	movs	r2, #46	; 0x2e
 8002364:	2100      	movs	r1, #0
 8002366:	2078      	movs	r0, #120	; 0x78
 8002368:	f000 f9fa 	bl	8002760 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800236c:	2000      	movs	r0, #0
 800236e:	f000 f843 	bl	80023f8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002372:	f000 f813 	bl	800239c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SSD1306_Init+0x184>)
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <SSD1306_Init+0x184>)
 800237e:	2200      	movs	r2, #0
 8002380:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SSD1306_Init+0x184>)
 8002384:	2201      	movs	r2, #1
 8002386:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200013f4 	.word	0x200013f4
 8002398:	20001318 	.word	0x20001318

0800239c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
 80023a6:	e01d      	b.n	80023e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	3b50      	subs	r3, #80	; 0x50
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	2100      	movs	r1, #0
 80023b2:	2078      	movs	r0, #120	; 0x78
 80023b4:	f000 f9d4 	bl	8002760 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	2078      	movs	r0, #120	; 0x78
 80023be:	f000 f9cf 	bl	8002760 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023c2:	2210      	movs	r2, #16
 80023c4:	2100      	movs	r1, #0
 80023c6:	2078      	movs	r0, #120	; 0x78
 80023c8:	f000 f9ca 	bl	8002760 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <SSD1306_UpdateScreen+0x58>)
 80023d2:	441a      	add	r2, r3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	2078      	movs	r0, #120	; 0x78
 80023da:	f000 f95b 	bl	8002694 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	3301      	adds	r3, #1
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	d9de      	bls.n	80023a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000f18 	.word	0x20000f18

080023f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <SSD1306_Fill+0x14>
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <SSD1306_Fill+0x16>
 800240c:	23ff      	movs	r3, #255	; 0xff
 800240e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002412:	4619      	mov	r1, r3
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <SSD1306_Fill+0x2c>)
 8002416:	f006 ff49 	bl	80092ac <memset>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000f18 	.word	0x20000f18

08002428 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	70fb      	strb	r3, [r7, #3]
	if (
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2b7f      	cmp	r3, #127	; 0x7f
 800243e:	d848      	bhi.n	80024d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	2b3f      	cmp	r3, #63	; 0x3f
 8002444:	d845      	bhi.n	80024d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <SSD1306_DrawPixel+0xb4>)
 8002448:	791b      	ldrb	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d11a      	bne.n	8002498 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	88bb      	ldrh	r3, [r7, #4]
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	b298      	uxth	r0, r3
 800246a:	4603      	mov	r3, r0
 800246c:	01db      	lsls	r3, r3, #7
 800246e:	4413      	add	r3, r2
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <SSD1306_DrawPixel+0xb8>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	b25a      	sxtb	r2, r3
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	b25b      	sxtb	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b259      	sxtb	r1, r3
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	4603      	mov	r3, r0
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	4413      	add	r3, r2
 8002490:	b2c9      	uxtb	r1, r1
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <SSD1306_DrawPixel+0xb8>)
 8002494:	54d1      	strb	r1, [r2, r3]
 8002496:	e01d      	b.n	80024d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002498:	88fa      	ldrh	r2, [r7, #6]
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	b298      	uxth	r0, r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	4413      	add	r3, r2
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <SSD1306_DrawPixel+0xb8>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	b25a      	sxtb	r2, r3
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	4013      	ands	r3, r2
 80024c0:	b259      	sxtb	r1, r3
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	4603      	mov	r3, r0
 80024c6:	01db      	lsls	r3, r3, #7
 80024c8:	4413      	add	r3, r2
 80024ca:	b2c9      	uxtb	r1, r1
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <SSD1306_DrawPixel+0xb8>)
 80024ce:	54d1      	strb	r1, [r2, r3]
 80024d0:	e000      	b.n	80024d4 <SSD1306_DrawPixel+0xac>
		return;
 80024d2:	bf00      	nop
	}
}
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20001318 	.word	0x20001318
 80024e0:	20000f18 	.word	0x20000f18

080024e4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	460a      	mov	r2, r1
 80024ee:	80fb      	strh	r3, [r7, #6]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <SSD1306_GotoXY+0x28>)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <SSD1306_GotoXY+0x28>)
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	8053      	strh	r3, [r2, #2]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20001318 	.word	0x20001318

08002510 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <SSD1306_Putc+0xfc>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
	if (
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	dc07      	bgt.n	8002540 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <SSD1306_Putc+0xfc>)
 8002532:	885b      	ldrh	r3, [r3, #2]
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800253c:	2b3f      	cmp	r3, #63	; 0x3f
 800253e:	dd01      	ble.n	8002544 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002540:	2300      	movs	r3, #0
 8002542:	e05e      	b.n	8002602 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e04b      	b.n	80025e2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	3b20      	subs	r3, #32
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	7849      	ldrb	r1, [r1, #1]
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4619      	mov	r1, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	440b      	add	r3, r1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e030      	b.n	80025d0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <SSD1306_Putc+0xfc>)
 8002580:	881a      	ldrh	r2, [r3, #0]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4413      	add	r3, r2
 8002588:	b298      	uxth	r0, r3
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <SSD1306_Putc+0xfc>)
 800258c:	885a      	ldrh	r2, [r3, #2]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4413      	add	r3, r2
 8002594:	b29b      	uxth	r3, r3
 8002596:	79ba      	ldrb	r2, [r7, #6]
 8002598:	4619      	mov	r1, r3
 800259a:	f7ff ff45 	bl	8002428 <SSD1306_DrawPixel>
 800259e:	e014      	b.n	80025ca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <SSD1306_Putc+0xfc>)
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b298      	uxth	r0, r3
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <SSD1306_Putc+0xfc>)
 80025ae:	885a      	ldrh	r2, [r3, #2]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	b299      	uxth	r1, r3
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff ff2f 	bl	8002428 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	3301      	adds	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4293      	cmp	r3, r2
 80025da:	d3c8      	bcc.n	800256e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	461a      	mov	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d3ad      	bcc.n	800254a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <SSD1306_Putc+0xfc>)
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <SSD1306_Putc+0xfc>)
 80025fe:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002600:	79fb      	ldrb	r3, [r7, #7]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20001318 	.word	0x20001318

08002610 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800261e:	e012      	b.n	8002646 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	79fa      	ldrb	r2, [r7, #7]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff71 	bl	8002510 <SSD1306_Putc>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d002      	beq.n	8002640 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	e008      	b.n	8002652 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e8      	bne.n	8002620 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	781b      	ldrb	r3, [r3, #0]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff feca 	bl	80023f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002664:	f7ff fe9a 	bl	800239c <SSD1306_UpdateScreen>
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <ssd1306_I2C_Init+0x24>)
 8002674:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002676:	e002      	b.n	800267e <ssd1306_I2C_Init+0x12>
		p--;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	0003d090 	.word	0x0003d090

08002694 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b0c7      	sub	sp, #284	; 0x11c
 8002698:	af02      	add	r7, sp, #8
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80026a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80026a6:	600a      	str	r2, [r1, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80026b2:	4622      	mov	r2, r4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80026be:	4602      	mov	r2, r0
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ca:	460a      	mov	r2, r1
 80026cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80026ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026e8:	e015      	b.n	8002716 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80026ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	441a      	add	r2, r3
 80026fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026fe:	3301      	adds	r3, #1
 8002700:	7811      	ldrb	r1, [r2, #0]
 8002702:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002706:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800270a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800270c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002710:	3301      	adds	r3, #1
 8002712:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002716:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800271a:	b29b      	uxth	r3, r3
 800271c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002720:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d8df      	bhi.n	80026ea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800272a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800272e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b299      	uxth	r1, r3
 8002736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800273a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	f107 020c 	add.w	r2, r7, #12
 8002748:	200a      	movs	r0, #10
 800274a:	9000      	str	r0, [sp, #0]
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <ssd1306_I2C_WriteMulti+0xc8>)
 800274e:	f003 fdd7 	bl	8006300 <HAL_I2C_Master_Transmit>
}
 8002752:	bf00      	nop
 8002754:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	200013f4 	.word	0x200013f4

08002760 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	460b      	mov	r3, r1
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	4613      	mov	r3, r2
 8002770:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	b299      	uxth	r1, r3
 800277e:	f107 020c 	add.w	r2, r7, #12
 8002782:	230a      	movs	r3, #10
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2302      	movs	r3, #2
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <ssd1306_I2C_Write+0x38>)
 800278a:	f003 fdb9 	bl	8006300 <HAL_I2C_Master_Transmit>
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200013f4 	.word	0x200013f4

0800279c <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fbd0 	bl	8002f56 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fbeb 	bl	8002f96 <SX1278_hw_SPIReadByte>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb88 	bl	8002ee0 <SX1278_hw_SetNSS>
	return tmp;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
 80027e6:	4613      	mov	r3, r2
 80027e8:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fb75 	bl	8002ee0 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 fba6 	bl	8002f56 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	78ba      	ldrb	r2, [r7, #2]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fb9f 	bl	8002f56 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb5e 	bl	8002ee0 <SX1278_hw_SetNSS>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	461a      	mov	r2, r3
 8002838:	460b      	mov	r3, r1
 800283a:	72fb      	strb	r3, [r7, #11]
 800283c:	4613      	mov	r3, r2
 800283e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8002840:	7abb      	ldrb	r3, [r7, #10]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d927      	bls.n	8002896 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fb47 	bl	8002ee0 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	7afa      	ldrb	r2, [r7, #11]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fb7b 	bl	8002f56 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
 8002864:	e00c      	b.n	8002880 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	18d4      	adds	r4, r2, r3
 8002870:	4608      	mov	r0, r1
 8002872:	f000 fb90 	bl	8002f96 <SX1278_hw_SPIReadByte>
 8002876:	4603      	mov	r3, r0
 8002878:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	3301      	adds	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
 8002880:	7dfa      	ldrb	r2, [r7, #23]
 8002882:	7abb      	ldrb	r3, [r7, #10]
 8002884:	429a      	cmp	r2, r3
 8002886:	d3ee      	bcc.n	8002866 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fb26 	bl	8002ee0 <SX1278_hw_SetNSS>
 8002894:	e000      	b.n	8002898 <SX1278_SPIBurstRead+0x6c>
		return;
 8002896:	bf00      	nop
	}
}
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}

0800289e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	461a      	mov	r2, r3
 80028aa:	460b      	mov	r3, r1
 80028ac:	72fb      	strb	r3, [r7, #11]
 80028ae:	4613      	mov	r3, r2
 80028b0:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80028b2:	7abb      	ldrb	r3, [r7, #10]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d929      	bls.n	800290c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fb0e 	bl	8002ee0 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 fb3f 	bl	8002f56 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
 80028dc:	e00b      	b.n	80028f6 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	f000 fb33 	bl	8002f56 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	3301      	adds	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	7dfa      	ldrb	r2, [r7, #23]
 80028f8:	7abb      	ldrb	r3, [r7, #10]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3ef      	bcc.n	80028de <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f000 faeb 	bl	8002ee0 <SX1278_hw_SetNSS>
 800290a:	e000      	b.n	800290e <SX1278_SPIBurstWrite+0x70>
		return;
 800290c:	bf00      	nop
	}
}
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f90d 	bl	8002b3c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002922:	200f      	movs	r0, #15
 8002924:	f000 fb5d 	bl	8002fe2 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f917 	bl	8002b5c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	684a      	ldr	r2, [r1, #4]
 8002932:	688b      	ldr	r3, [r1, #8]
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	04d9      	lsls	r1, r3, #19
 800293e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002942:	04d0      	lsls	r0, r2, #19
 8002944:	4a6f      	ldr	r2, [pc, #444]	; (8002b04 <SX1278_config+0x1f0>)
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f7fd fe7f 	bl	800064c <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8002956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	0c02      	lsrs	r2, r0, #16
 8002964:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002968:	0c0b      	lsrs	r3, r1, #16
 800296a:	b2d3      	uxtb	r3, r2
 800296c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800296e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	0a02      	lsrs	r2, r0, #8
 800297c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002980:	0a0b      	lsrs	r3, r1, #8
 8002982:	b2d3      	uxtb	r3, r2
 8002984:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8002986:	7c3b      	ldrb	r3, [r7, #16]
 8002988:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	2303      	movs	r3, #3
 8002990:	2106      	movs	r1, #6
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff83 	bl	800289e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8002998:	2234      	movs	r2, #52	; 0x34
 800299a:	2139      	movs	r1, #57	; 0x39
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff1c 	bl	80027da <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7b1b      	ldrb	r3, [r3, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <SX1278_config+0x1f4>)
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2109      	movs	r1, #9
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff12 	bl	80027da <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80029b6:	220b      	movs	r2, #11
 80029b8:	210b      	movs	r1, #11
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff0d 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80029c0:	2223      	movs	r2, #35	; 0x23
 80029c2:	210c      	movs	r1, #12
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff08 	bl	80027da <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7b5b      	ldrb	r3, [r3, #13]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <SX1278_config+0x1f8>)
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d147      	bne.n	8002a68 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7b9b      	ldrb	r3, [r3, #14]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b4c      	ldr	r3, [pc, #304]	; (8002b10 <SX1278_config+0x1fc>)
 80029e0:	5c9b      	ldrb	r3, [r3, r2]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7bdb      	ldrb	r3, [r3, #15]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <SX1278_config+0x200>)
 80029ee:	5c5b      	ldrb	r3, [r3, r1]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	211d      	movs	r1, #29
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff feea 	bl	80027da <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7b5b      	ldrb	r3, [r3, #13]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <SX1278_config+0x1f8>)
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7c1b      	ldrb	r3, [r3, #16]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <SX1278_config+0x204>)
 8002a1c:	5c5b      	ldrb	r3, [r3, r1]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002a26:	3303      	adds	r3, #3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	211e      	movs	r1, #30
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fed3 	bl	80027da <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8002a34:	2131      	movs	r1, #49	; 0x31
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff feb0 	bl	800279c <SX1278_SPIRead>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	f043 0305 	orr.w	r3, r3, #5
 8002a4e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	461a      	mov	r2, r3
 8002a54:	2131      	movs	r1, #49	; 0x31
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff febf 	bl	80027da <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	2137      	movs	r1, #55	; 0x37
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff feba 	bl	80027da <SX1278_SPIWrite>
 8002a66:	e029      	b.n	8002abc <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7b9b      	ldrb	r3, [r3, #14]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <SX1278_config+0x1fc>)
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7bdb      	ldrb	r3, [r3, #15]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <SX1278_config+0x200>)
 8002a7e:	5c5b      	ldrb	r3, [r3, r1]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002a84:	4413      	add	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	211d      	movs	r1, #29
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fea4 	bl	80027da <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b5b      	ldrb	r3, [r3, #13]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <SX1278_config+0x1f8>)
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7c1b      	ldrb	r3, [r3, #16]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <SX1278_config+0x204>)
 8002aa8:	5c5b      	ldrb	r3, [r3, r1]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	211e      	movs	r1, #30
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fe8f 	bl	80027da <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002abc:	2204      	movs	r2, #4
 8002abe:	2126      	movs	r1, #38	; 0x26
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fe8a 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	211f      	movs	r1, #31
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fe85 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe80 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8002ada:	2208      	movs	r2, #8
 8002adc:	2121      	movs	r1, #33	; 0x21
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fe7b 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2141      	movs	r1, #65	; 0x41
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fe76 	bl	80027da <SX1278_SPIWrite>
	module->readBytes = 0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f810 	bl	8002b1c <SX1278_standby>
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	01e84800 	.word	0x01e84800
 8002b08:	08009d40 	.word	0x08009d40
 8002b0c:	08009d44 	.word	0x08009d44
 8002b10:	08009d4c 	.word	0x08009d4c
 8002b14:	08009d58 	.word	0x08009d58
 8002b18:	08009d5c 	.word	0x08009d5c

08002b1c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002b24:	2209      	movs	r2, #9
 8002b26:	2101      	movs	r1, #1
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fe56 	bl	80027da <SX1278_SPIWrite>
	module->status = STANDBY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	749a      	strb	r2, [r3, #18]
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002b44:	2208      	movs	r2, #8
 8002b46:	2101      	movs	r1, #1
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fe46 	bl	80027da <SX1278_SPIWrite>
	module->status = SLEEP;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	749a      	strb	r2, [r3, #18]
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002b64:	2288      	movs	r2, #136	; 0x88
 8002b66:	2101      	movs	r1, #1
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff fe36 	bl	80027da <SX1278_SPIWrite>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002b7e:	22ff      	movs	r2, #255	; 0xff
 8002b80:	2112      	movs	r1, #18
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fe29 	bl	80027da <SX1278_SPIWrite>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	7afa      	ldrb	r2, [r7, #11]
 8002ba2:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff feb5 	bl	8002914 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8002baa:	2284      	movs	r2, #132	; 0x84
 8002bac:	214d      	movs	r1, #77	; 0x4d
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff fe13 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	2124      	movs	r1, #36	; 0x24
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fe0e 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2140      	movs	r1, #64	; 0x40
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff fe09 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	2111      	movs	r1, #17
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f7ff fe04 	bl	80027da <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ffcf 	bl	8002b76 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2122      	movs	r1, #34	; 0x22
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fdfb 	bl	80027da <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8002be4:	210f      	movs	r1, #15
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff fdd8 	bl	800279c <SX1278_SPIRead>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	210d      	movs	r1, #13
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fdef 	bl	80027da <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	2101      	movs	r1, #1
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff fdea 	bl	80027da <SX1278_SPIWrite>
	module->readBytes = 0;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c0e:	2118      	movs	r1, #24
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fdc3 	bl	800279c <SX1278_SPIRead>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d104      	bne.n	8002c2a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2203      	movs	r2, #3
 8002c24:	749a      	strb	r2, [r3, #18]
			return 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e013      	b.n	8002c52 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f967 	bl	8002f0e <SX1278_hw_Reset>
			SX1278_config(module);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fe67 	bl	8002914 <SX1278_config>
			return 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e003      	b.n	8002c52 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 f9c9 	bl	8002fe2 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c50:	e7dd      	b.n	8002c0e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f9c6 	bl	8002ff8 <SX1278_hw_GetDIO0>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d030      	beq.n	8002cd4 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3313      	adds	r3, #19
 8002c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 fb15 	bl	80092ac <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002c82:	2110      	movs	r1, #16
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fd89 	bl	800279c <SX1278_SPIRead>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	461a      	mov	r2, r3
 8002c92:	210d      	movs	r1, #13
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fda0 	bl	80027da <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7b5b      	ldrb	r3, [r3, #13]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7c5b      	ldrb	r3, [r3, #17]
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e005      	b.n	8002cb6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8002caa:	2113      	movs	r1, #19
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fd75 	bl	800279c <SX1278_SPIRead>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f103 0213 	add.w	r2, r3, #19
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fdb3 	bl	800282c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ff51 	bl	8002b76 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	460b      	mov	r3, r1
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	7afa      	ldrb	r2, [r7, #11]
 8002cf4:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fe0c 	bl	8002914 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002cfc:	2287      	movs	r2, #135	; 0x87
 8002cfe:	214d      	movs	r1, #77	; 0x4d
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fd6a 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002d06:	2200      	movs	r2, #0
 8002d08:	2124      	movs	r1, #36	; 0x24
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fd65 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002d10:	2241      	movs	r2, #65	; 0x41
 8002d12:	2140      	movs	r1, #64	; 0x40
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fd60 	bl	80027da <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ff2b 	bl	8002b76 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002d20:	22f7      	movs	r2, #247	; 0xf7
 8002d22:	2111      	movs	r1, #17
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fd58 	bl	80027da <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2122      	movs	r1, #34	; 0x22
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fd52 	bl	80027da <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002d36:	210e      	movs	r1, #14
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fd2f 	bl	800279c <SX1278_SPIRead>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	461a      	mov	r2, r3
 8002d46:	210d      	movs	r1, #13
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fd46 	bl	80027da <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002d4e:	2122      	movs	r1, #34	; 0x22
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff fd23 	bl	800279c <SX1278_SPIRead>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8002d5a:	7dba      	ldrb	r2, [r7, #22]
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d104      	bne.n	8002d6c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	749a      	strb	r2, [r3, #18]
			return 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e00e      	b.n	8002d8a <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ea      	bne.n	8002d4e <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f8c6 	bl	8002f0e <SX1278_hw_Reset>
			SX1278_config(module);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff fdc6 	bl	8002914 <SX1278_config>
			return 0;
 8002d88:	2300      	movs	r3, #0
		}
	}
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	2100      	movs	r1, #0
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fd78 	bl	800289e <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8002dae:	228b      	movs	r2, #139	; 0x8b
 8002db0:	2101      	movs	r1, #1
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fd11 	bl	80027da <SX1278_SPIWrite>
	while (1) {
		//Set Flag to Ignore EXT

		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f91b 	bl	8002ff8 <SX1278_hw_GetDIO0>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8002dc8:	2112      	movs	r1, #18
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff fce6 	bl	800279c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fed0 	bl	8002b76 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fea0 	bl	8002b1c <SX1278_standby>
			return 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e013      	b.n	8002e08 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f88c 	bl	8002f0e <SX1278_hw_Reset>
			SX1278_config(module);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fd8c 	bl	8002914 <SX1278_config>
			return 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e003      	b.n	8002e08 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 f8ee 	bl	8002fe2 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002e06:	e7d7      	b.n	8002db8 <SX1278_LoRaTxPacket+0x26>
	}
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f848 	bl	8002eb6 <SX1278_hw_init>
	module->frequency = frequency;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
	module->power = power;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	7e3a      	ldrb	r2, [r7, #24]
 8002e34:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	7f3a      	ldrb	r2, [r7, #28]
 8002e3a:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e42:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e4a:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e52:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002e5a:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fd59 	bl	8002914 <SX1278_config>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d003      	beq.n	8002e8c <SX1278_read+0x22>
		length = module->readBytes;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002e8a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3313      	adds	r3, #19
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	4619      	mov	r1, r3
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f006 fa3d 	bl	8009314 <memcpy>
	rxBuf[length] = '\0';
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8002eac:	79fb      	ldrb	r3, [r7, #7]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f80d 	bl	8002ee0 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6858      	ldr	r0, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f003 f89f 	bl	8006016 <HAL_GPIO_WritePin>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6958      	ldr	r0, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	f003 f888 	bl	8006016 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8002f16:	2101      	movs	r1, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ffe1 	bl	8002ee0 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6858      	ldr	r0, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f003 f873 	bl	8006016 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f000 f856 	bl	8002fe2 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6858      	ldr	r0, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2201      	movs	r2, #1
 8002f42:	4619      	mov	r1, r3
 8002f44:	f003 f867 	bl	8006016 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8002f48:	2064      	movs	r0, #100	; 0x64
 8002f4a:	f000 f84a 	bl	8002fe2 <SX1278_hw_DelayMs>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8002f62:	2100      	movs	r1, #0
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ffbb 	bl	8002ee0 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6998      	ldr	r0, [r3, #24]
 8002f6e:	1cf9      	adds	r1, r7, #3
 8002f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f74:	2201      	movs	r2, #1
 8002f76:	f004 fadd 	bl	8007534 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002f7a:	bf00      	nop
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fdca 	bl	8007b1a <HAL_SPI_GetState>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d1f7      	bne.n	8002f7c <SX1278_hw_SPICommand+0x26>
		;
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af02      	add	r7, sp, #8
 8002f9c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff99 	bl	8002ee0 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6998      	ldr	r0, [r3, #24]
 8002fb2:	f107 020e 	add.w	r2, r7, #14
 8002fb6:	f107 010f 	add.w	r1, r7, #15
 8002fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f004 fbfa 	bl	80077ba <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002fc6:	bf00      	nop
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fda4 	bl	8007b1a <HAL_SPI_GetState>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d1f7      	bne.n	8002fc8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f002 fa94 	bl	8005518 <HAL_Delay>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f002 ffeb 	bl	8005fe8 <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <LORA_IF_GetData_Frame>:
				return FL_FRAGMENT_FIRMWARE ;
			}
		}
	    return 0;
}
uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint32_t unicast_address,uint8_t* buffer_resp , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_resp ){
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
	uint32 address_node_req = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
	ret = SX1278_LoRaEntryRx(module, length, timeout);
 800303e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	4619      	mov	r1, r3
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fda2 	bl	8002b90 <SX1278_LoRaEntryRx>
 800304c:	4603      	mov	r3, r0
 800304e:	70fb      	strb	r3, [r7, #3]
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fe02 	bl	8002c5a <SX1278_LoRaRxPacket>
 8003056:	4603      	mov	r3, r0
 8003058:	70fb      	strb	r3, [r7, #3]
		if ( ret > 0 ) {
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d035      	beq.n	80030cc <LORA_IF_GetData_Frame+0xa4>
			// Replace Receive Led hear
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003064:	4821      	ldr	r0, [pc, #132]	; (80030ec <LORA_IF_GetData_Frame+0xc4>)
 8003066:	f002 ffee 	bl	8006046 <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	461a      	mov	r2, r3
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fefa 	bl	8002e6a <SX1278_read>
 8003076:	4603      	mov	r3, r0
 8003078:	70fb      	strb	r3, [r7, #3]
			AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <LORA_IF_GetData_Frame+0xc8>)
 800307c:	491d      	ldr	r1, [pc, #116]	; (80030f4 <LORA_IF_GetData_Frame+0xcc>)
 800307e:	481e      	ldr	r0, [pc, #120]	; (80030f8 <LORA_IF_GetData_Frame+0xd0>)
 8003080:	f000 fe26 	bl	8003cd0 <AES_init_ctx_iv>
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 8003084:	2210      	movs	r2, #16
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	481b      	ldr	r0, [pc, #108]	; (80030f8 <LORA_IF_GetData_Frame+0xd0>)
 800308a:	f001 fc22 	bl	80048d2 <AES_CTR_xcrypt_buffer>
			address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	061a      	lsls	r2, r3, #24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	431a      	orrs	r2, r3
							   |(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3302      	adds	r3, #2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	4313      	orrs	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	3203      	adds	r2, #3
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	4313      	orrs	r3, r2
			address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 80030b0:	613b      	str	r3, [r7, #16]
			if(address_node_req == unicast_address && buffer_resp[4] == ACK_resp)
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d108      	bne.n	80030cc <LORA_IF_GetData_Frame+0xa4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d101      	bne.n	80030cc <LORA_IF_GetData_Frame+0xa4>
				return 1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00a      	b.n	80030e2 <LORA_IF_GetData_Frame+0xba>
			/*Received but wrong request*/

		}
		HAL_Delay(1);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f002 fa23 	bl	8005518 <HAL_Delay>
		local_u32timeout++;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
		if(local_u32timeout == timeout)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1b7      	bne.n	8003050 <LORA_IF_GetData_Frame+0x28>
			return 0;
 80030e0:	2300      	movs	r3, #0
		/*Lost Packet Hear*/
	}
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40011000 	.word	0x40011000
 80030f0:	20000054 	.word	0x20000054
 80030f4:	20000044 	.word	0x20000044
 80030f8:	20001320 	.word	0x20001320

080030fc <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret ,uint8_t ACK_req , uint8_t ACK_resp ){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	70fb      	strb	r3, [r7, #3]
	buffer_req[2] = ACK_req;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3302      	adds	r3, #2
 800310e:	7e3a      	ldrb	r2, [r7, #24]
 8003110:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <LORA_IF_Stransmit_Request+0x6c>)
 8003114:	4915      	ldr	r1, [pc, #84]	; (800316c <LORA_IF_Stransmit_Request+0x70>)
 8003116:	4816      	ldr	r0, [pc, #88]	; (8003170 <LORA_IF_Stransmit_Request+0x74>)
 8003118:	f000 fdda 	bl	8003cd0 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 800311c:	2210      	movs	r2, #16
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4813      	ldr	r0, [pc, #76]	; (8003170 <LORA_IF_Stransmit_Request+0x74>)
 8003122:	f001 fbd6 	bl	80048d2 <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8003126:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800312a:	2110      	movs	r1, #16
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fdd8 	bl	8002ce2 <SX1278_LoRaEntryTx>
 8003132:	4603      	mov	r3, r0
 8003134:	70fb      	strb	r3, [r7, #3]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8003136:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800313a:	2210      	movs	r2, #16
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff fe27 	bl	8002d92 <SX1278_LoRaTxPacket>
 8003144:	4603      	mov	r3, r0
 8003146:	70fb      	strb	r3, [r7, #3]
	/*Read the first Frame */
	 if(ret >0){
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <LORA_IF_Stransmit_Request+0x60>
		//Replace Blink Send hear
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800314e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003152:	4808      	ldr	r0, [pc, #32]	; (8003174 <LORA_IF_Stransmit_Request+0x78>)
 8003154:	f002 ff77 	bl	8006046 <HAL_GPIO_TogglePin>
		return LORA_OKE;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <LORA_IF_Stransmit_Request+0x62>
	 }
	 return LORA_TIMEOUT;
 800315c:	2303      	movs	r3, #3
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000054 	.word	0x20000054
 800316c:	20000044 	.word	0x20000044
 8003170:	20001320 	.word	0x20001320
 8003174:	40010c00 	.word	0x40010c00

08003178 <LORA_IF_Stransmit_Fragment_Firmware>:

LoRa_Return_t LORA_IF_Stransmit_Fragment_Firmware(SX1278_t *module ,uint8_t* buffer_flashing_data ){
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8003186:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800318a:	2150      	movs	r1, #80	; 0x50
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fda8 	bl	8002ce2 <SX1278_LoRaEntryTx>
 8003192:	4603      	mov	r3, r0
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8003198:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_flashing_data, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 800319a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800319e:	2250      	movs	r2, #80	; 0x50
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fdf5 	bl	8002d92 <SX1278_LoRaTxPacket>
 80031a8:	4603      	mov	r3, r0
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 80031ae:	701a      	strb	r2, [r3, #0]
	 if(ret){
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <LORA_IF_Stransmit_Fragment_Firmware+0x54>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80031b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031bc:	4808      	ldr	r0, [pc, #32]	; (80031e0 <LORA_IF_Stransmit_Fragment_Firmware+0x68>)
 80031be:	f002 ff42 	bl	8006046 <HAL_GPIO_TogglePin>
		 HAL_Delay(WAIT_PACKET_SEND);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f002 f9a8 	bl	8005518 <HAL_Delay>
		/*Read the first Frame */
//		switch(local_u8Check_Code = LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_16BYTES)){
//			case(MCU_ACKNOWLEDGE_FINISHING):
//				buffer_packet[2] = buffer_resp[2];
		 return LORA_OKE ;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e003      	b.n	80031d4 <LORA_IF_Stransmit_Fragment_Firmware+0x5c>
//			case(MCU_IMAGE_CRC_NOT_CORRECT):
//				return LORA_FLASHING_ERROR;
	 }
//		}
	 else{
		 counter++;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	3301      	adds	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 80031d2:	e7d8      	b.n	8003186 <LORA_IF_Stransmit_Fragment_Firmware+0xe>
			 return LORA_ERROR;
		 }
	 }

	}
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200009e8 	.word	0x200009e8
 80031e0:	40010c00 	.word	0x40010c00

080031e4 <LORA_IF_GetData_End_Frame>:

uint8_t LORA_IF_GetData_End_Frame(SX1278_t *module, uint8_t *rxBuffer, uint32_t unicast_addr , uint8_t length, uint32_t timeout){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
	uint32_t local_u32addrNode_req;
	ret = SX1278_LoRaEntryRx(module, 112, 3000);
 80031f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031fa:	2170      	movs	r1, #112	; 0x70
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fcc7 	bl	8002b90 <SX1278_LoRaEntryRx>
 8003202:	4603      	mov	r3, r0
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <LORA_IF_GetData_End_Frame+0xd4>)
 8003208:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <LORA_IF_GetData_End_Frame+0xd8>)
 800320c:	492c      	ldr	r1, [pc, #176]	; (80032c0 <LORA_IF_GetData_End_Frame+0xdc>)
 800320e:	482d      	ldr	r0, [pc, #180]	; (80032c4 <LORA_IF_GetData_End_Frame+0xe0>)
 8003210:	f000 fd5e 	bl	8003cd0 <AES_init_ctx_iv>
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fd20 	bl	8002c5a <SX1278_LoRaRxPacket>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <LORA_IF_GetData_End_Frame+0xd4>)
 8003220:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <LORA_IF_GetData_End_Frame+0xd4>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <LORA_IF_GetData_End_Frame+0xb4>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800322a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800322e:	4826      	ldr	r0, [pc, #152]	; (80032c8 <LORA_IF_GetData_End_Frame+0xe4>)
 8003230:	f002 ff09 	bl	8006046 <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) rxBuffer, ret);
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <LORA_IF_GetData_End_Frame+0xd4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff fe14 	bl	8002e6a <SX1278_read>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <LORA_IF_GetData_End_Frame+0xd4>)
 8003248:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) rxBuffer, length);
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	461a      	mov	r2, r3
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	481c      	ldr	r0, [pc, #112]	; (80032c4 <LORA_IF_GetData_End_Frame+0xe0>)
 8003252:	f001 fb3e 	bl	80048d2 <AES_CTR_xcrypt_buffer>
			//convert buffer to address_node_req
			local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	061a      	lsls	r2, r3, #24
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	3301      	adds	r3, #1
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	431a      	orrs	r2, r3
									|(rxBuffer[2] << SHIFT_8_BIT) | (rxBuffer[3] << SHIFT_0_BIT);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3302      	adds	r3, #2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	4313      	orrs	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	3203      	adds	r2, #3
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	4313      	orrs	r3, r2
			local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8003278:	613b      	str	r3, [r7, #16]
			if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 || local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <LORA_IF_GetData_End_Frame+0xe8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <LORA_IF_GetData_End_Frame+0xae>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <LORA_IF_GetData_End_Frame+0xec>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <LORA_IF_GetData_End_Frame+0xae>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <LORA_IF_GetData_End_Frame+0xf0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d102      	bne.n	8003298 <LORA_IF_GetData_End_Frame+0xb4>
				//return flag
				return rxBuffer[4];
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	e00b      	b.n	80032b0 <LORA_IF_GetData_End_Frame+0xcc>
		}
		local_u32timeout++;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3301      	adds	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f002 f93a 	bl	8005518 <HAL_Delay>
		if(local_u32timeout == MAX_TIME_OUT_RECEIVE )
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d1b2      	bne.n	8003214 <LORA_IF_GetData_End_Frame+0x30>
			return 0;
 80032ae:	2300      	movs	r3, #0
	}
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200009e8 	.word	0x200009e8
 80032bc:	20000054 	.word	0x20000054
 80032c0:	20000044 	.word	0x20000044
 80032c4:	20001320 	.word	0x20001320
 80032c8:	40010c00 	.word	0x40010c00
 80032cc:	26011bcd 	.word	0x26011bcd
 80032d0:	26011def 	.word	0x26011def
 80032d4:	260120f0 	.word	0x260120f0

080032d8 <UI_Init>:
static uint16_t gl_TimeRequest;
static uint32_t gl_u32Version;
/**************************************************/
/*				  Init FUNC					      */
/**************************************************/
void UI_Init(void){
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	// Init variables
	gl_UISTATE = UI_IDLE;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <UI_Init+0x40>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
	gl_u8DownLoadProgress = INIT_VAL_ZERO;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <UI_Init+0x44>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
	gl_u32SizeCodeFw = INIT_VAL_ZERO;
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <UI_Init+0x48>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
	gl_counterdot = INIT_VAL_ZERO;
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UI_Init+0x4c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	// Init OLED display
	SSD1306_Init();
 80032f4:	f7fe ff8e 	bl	8002214 <SSD1306_Init>
	/*Run main Appication before go to Flashing Appl*/
	// Init Flashing
	UI_Init_Flashing_Screen();
 80032f8:	f000 f97e 	bl	80035f8 <UI_Init_Flashing_Screen>
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 80032fc:	480a      	ldr	r0, [pc, #40]	; (8003328 <UI_Init+0x50>)
 80032fe:	f7fe fae5 	bl	80018cc <Rte_SystemState_ReadData>
	if(gl_SystemState == SYS_REQUEST_OTA){
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <UI_Init+0x50>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d104      	bne.n	8003314 <UI_Init+0x3c>
		UI_Clean();
 800330a:	f000 f995 	bl	8003638 <UI_Clean>
		gl_UISTATE = UI_START_OTA;
 800330e:	4b02      	ldr	r3, [pc, #8]	; (8003318 <UI_Init+0x40>)
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
	}

}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200013e0 	.word	0x200013e0
 800331c:	200013e2 	.word	0x200013e2
 8003320:	200013e8 	.word	0x200013e8
 8003324:	200013ec 	.word	0x200013ec
 8003328:	200013e1 	.word	0x200013e1

0800332c <UI_Main_FLASHING>:

void UI_Main_FLASHING(void){
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
	switch (gl_UISTATE) {
 8003332:	4bab      	ldr	r3, [pc, #684]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b08      	cmp	r3, #8
 8003338:	f200 813c 	bhi.w	80035b4 <UI_Main_FLASHING+0x288>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UI_Main_FLASHING+0x18>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	080033af 	.word	0x080033af
 800334c:	080033e9 	.word	0x080033e9
 8003350:	08003415 	.word	0x08003415
 8003354:	08003471 	.word	0x08003471
 8003358:	080034c9 	.word	0x080034c9
 800335c:	0800352d 	.word	0x0800352d
 8003360:	08003599 	.word	0x08003599
 8003364:	0800357d 	.word	0x0800357d
		/* UI_IDE STATE */
		case UI_IDLE:
		{
			UI_Init_Flashing_Screen();
 8003368:	f000 f946 	bl	80035f8 <UI_Init_Flashing_Screen>
			// Get System state Via RTE
			Std_ReturnType retVal  = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 800336c:	489d      	ldr	r0, [pc, #628]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 800336e:	f7fe faad 	bl	80018cc <Rte_SystemState_ReadData>
 8003372:	4603      	mov	r3, r0
 8003374:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d114      	bne.n	80033a6 <UI_Main_FLASHING+0x7a>
				if(SYS_RECEIVE_UPDATE == gl_SystemState )
 800337c:	4b99      	ldr	r3, [pc, #612]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	f040 811b 	bne.w	80035bc <UI_Main_FLASHING+0x290>
				{
					// Clean UI screen
					UI_Clean();
 8003386:	f000 f957 	bl	8003638 <UI_Clean>
					UI_WaitForResp();
 800338a:	f000 f95d 	bl	8003648 <UI_WaitForResp>
					HAL_Delay(1000);
 800338e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003392:	f002 f8c1 	bl	8005518 <HAL_Delay>
					UI_Clean();
 8003396:	f000 f94f 	bl	8003638 <UI_Clean>
					// Display Information for FLashing
					UI_Downloading_FW();
 800339a:	f000 f9db 	bl	8003754 <UI_Downloading_FW>
					gl_UISTATE =  UI_DOWNLOADING_FW;
 800339e:	4b90      	ldr	r3, [pc, #576]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]

			else{
				/*State In IDLE STATE and Change UI to ERROR STATE*/
				gl_UISTATE = UI_DISPLAYERROR;
			}
			break;
 80033a4:	e10a      	b.n	80035bc <UI_Main_FLASHING+0x290>
				gl_UISTATE = UI_DISPLAYERROR;
 80033a6:	4b8e      	ldr	r3, [pc, #568]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	701a      	strb	r2, [r3, #0]
			break;
 80033ac:	e106      	b.n	80035bc <UI_Main_FLASHING+0x290>
		}
		case UI_DOWNLOADING_FW:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_DOWNLOAD_PROGRESS_ReadData(&gl_u8DownLoadProgress);
 80033ae:	488e      	ldr	r0, [pc, #568]	; (80035e8 <UI_Main_FLASHING+0x2bc>)
 80033b0:	f7fe fb58 	bl	8001a64 <Rte_UpdateProgress_ReadData>
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
			if( RTE_E_OKE == retVal){
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 8100 	bne.w	80035c0 <UI_Main_FLASHING+0x294>
				UI_UpdateDownloading_FW(gl_u8DownLoadProgress);
 80033c0:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <UI_Main_FLASHING+0x2bc>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f9f1 	bl	80037ac <UI_UpdateDownloading_FW>
				if(100 == gl_u8DownLoadProgress)
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <UI_Main_FLASHING+0x2bc>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	f040 80f6 	bne.w	80035c0 <UI_Main_FLASHING+0x294>
				{
					HAL_Delay(2000);
 80033d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033d8:	f002 f89e 	bl	8005518 <HAL_Delay>
					UI_Clean();
 80033dc:	f000 f92c 	bl	8003638 <UI_Clean>
					gl_UISTATE = UI_START_OTA;
 80033e0:	4b7f      	ldr	r3, [pc, #508]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80033e2:	2202      	movs	r2, #2
 80033e4:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80033e6:	e0eb      	b.n	80035c0 <UI_Main_FLASHING+0x294>
		}
		case UI_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 80033e8:	487e      	ldr	r0, [pc, #504]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 80033ea:	f7fe fa6f 	bl	80018cc <Rte_SystemState_ReadData>
 80033ee:	4603      	mov	r3, r0
 80033f0:	723b      	strb	r3, [r7, #8]
			if (RTE_E_OKE == retVal){
 80033f2:	7a3b      	ldrb	r3, [r7, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 80e5 	bne.w	80035c4 <UI_Main_FLASHING+0x298>
				if(gl_SystemState == SYS_REQUEST_OTA){
 80033fa:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d104      	bne.n	800340c <UI_Main_FLASHING+0xe0>
					UI_Clean();
 8003402:	f000 f919 	bl	8003638 <UI_Clean>
					UI_StartOTA();
 8003406:	f000 facb 	bl	80039a0 <UI_StartOTA>
				else {
					gl_UISTATE = UI_WAIT_START_OTA;
					//UI_Clean();
				}
			}
			break;
 800340a:	e0db      	b.n	80035c4 <UI_Main_FLASHING+0x298>
					gl_UISTATE = UI_WAIT_START_OTA;
 800340c:	4b74      	ldr	r3, [pc, #464]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 800340e:	2203      	movs	r2, #3
 8003410:	701a      	strb	r2, [r3, #0]
			break;
 8003412:	e0d7      	b.n	80035c4 <UI_Main_FLASHING+0x298>
		}
		case UI_WAIT_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8003414:	4873      	ldr	r0, [pc, #460]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 8003416:	f7fe fa59 	bl	80018cc <Rte_SystemState_ReadData>
 800341a:	4603      	mov	r3, r0
 800341c:	72bb      	strb	r3, [r7, #10]
			retVal = Rte_PacketSendLoraNum_ReadData(&gl_TimeRequest);
 800341e:	4873      	ldr	r0, [pc, #460]	; (80035ec <UI_Main_FLASHING+0x2c0>)
 8003420:	f7fe fb8c 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
 8003424:	4603      	mov	r3, r0
 8003426:	72bb      	strb	r3, [r7, #10]
			if(RTE_E_OKE == retVal){
 8003428:	7abb      	ldrb	r3, [r7, #10]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d120      	bne.n	8003470 <UI_Main_FLASHING+0x144>
				if(gl_SystemState == SYS_WAIT_ACCEPT_OTA){
 800342e:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d105      	bne.n	8003442 <UI_Main_FLASHING+0x116>
					UI_Wait_ACCEPT_OTA(gl_TimeRequest);
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <UI_Main_FLASHING+0x2c0>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fac4 	bl	80039c8 <UI_Wait_ACCEPT_OTA>
 8003440:	e016      	b.n	8003470 <UI_Main_FLASHING+0x144>

				}
				else if(gl_SystemState == SYS_REQUEST_OTA){
 8003442:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d103      	bne.n	8003452 <UI_Main_FLASHING+0x126>
					gl_UISTATE = UI_START_OTA;
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e00e      	b.n	8003470 <UI_Main_FLASHING+0x144>
				}
				else if (gl_SystemState == SYS_CONFIG_LORA){
 8003452:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d105      	bne.n	8003466 <UI_Main_FLASHING+0x13a>
					gl_UISTATE = UI_SYNCONFIGURATION;
 800345a:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 8003460:	f000 f8ea 	bl	8003638 <UI_Clean>
 8003464:	e004      	b.n	8003470 <UI_Main_FLASHING+0x144>
				}
				else {
					/*OUT OF REQUEST*/
					gl_UISTATE=UI_DISPLAYERROR;
 8003466:	4b5e      	ldr	r3, [pc, #376]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 8003468:	2207      	movs	r2, #7
 800346a:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 800346c:	f000 f8e4 	bl	8003638 <UI_Clean>
			}

		}

		case UI_SYNCONFIGURATION:
		{	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8003470:	485c      	ldr	r0, [pc, #368]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 8003472:	f7fe fa2b 	bl	80018cc <Rte_SystemState_ReadData>
 8003476:	4603      	mov	r3, r0
 8003478:	727b      	strb	r3, [r7, #9]
			retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 800347a:	485d      	ldr	r0, [pc, #372]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 800347c:	f7fe fb16 	bl	8001aac <Rte_UI_Error_ReadData>
 8003480:	4603      	mov	r3, r0
 8003482:	727b      	strb	r3, [r7, #9]
			if( RTE_E_OKE == retVal){
 8003484:	7a7b      	ldrb	r3, [r7, #9]
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 809e 	bne.w	80035c8 <UI_Main_FLASHING+0x29c>
				if(gl_SystemState == SYS_CONFIG_LORA){
 800348c:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b05      	cmp	r3, #5
 8003492:	d102      	bne.n	800349a <UI_Main_FLASHING+0x16e>
					UI_Synconfiguaraton();
 8003494:	f000 fa32 	bl	80038fc <UI_Synconfiguaraton>
 8003498:	e006      	b.n	80034a8 <UI_Main_FLASHING+0x17c>
				}
				else if(gl_SystemState == SYS_SEND_UPDATE)
 800349a:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <UI_Main_FLASHING+0x2b8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d102      	bne.n	80034a8 <UI_Main_FLASHING+0x17c>
					gl_UISTATE = UI_SENDPACKET_LORA_FW;
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80034a4:	2205      	movs	r2, #5
 80034a6:	701a      	strb	r2, [r3, #0]
				if(gl_u8ErrorFlag == GW_REQUEST_UPDATE_ERROR){
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b2f      	cmp	r3, #47	; 0x2f
 80034ae:	f040 808b 	bne.w	80035c8 <UI_Main_FLASHING+0x29c>
					UI_Clean();
 80034b2:	f000 f8c1 	bl	8003638 <UI_Clean>
					gl_UISTATE =UI_DISPLAYERROR;
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	701a      	strb	r2, [r3, #0]
					UI_DisplayERROR(gl_u8ErrorFlag);
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 faad 	bl	8003a20 <UI_DisplayERROR>
				}
			}
			break;
 80034c6:	e07f      	b.n	80035c8 <UI_Main_FLASHING+0x29c>
		}
		case UI_SENDPACKET_LORA_FW:
		{

			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 80034c8:	484a      	ldr	r0, [pc, #296]	; (80035f4 <UI_Main_FLASHING+0x2c8>)
 80034ca:	f7fe fb37 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
 80034ce:	4603      	mov	r3, r0
 80034d0:	733b      	strb	r3, [r7, #12]

			if(RTE_E_OKE == retVal_1){
 80034d2:	7b3b      	ldrb	r3, [r7, #12]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d179      	bne.n	80035cc <UI_Main_FLASHING+0x2a0>
				UI_SendSW_LoRa(gl_u16Packet_LoRa_FW);
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <UI_Main_FLASHING+0x2c8>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fa27 	bl	8003930 <UI_SendSW_LoRa>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 80034e2:	4843      	ldr	r0, [pc, #268]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 80034e4:	f7fe fae2 	bl	8001aac <Rte_UI_Error_ReadData>
 80034e8:	4603      	mov	r3, r0
 80034ea:	72fb      	strb	r3, [r7, #11]
				if( MCU_ERROR_CRC == gl_u8ErrorFlag  ){
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b4f      	cmp	r3, #79	; 0x4f
 80034f2:	d105      	bne.n	8003500 <UI_Main_FLASHING+0x1d4>
					UI_Clean();
 80034f4:	f000 f8a0 	bl	8003638 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80034fa:	2207      	movs	r2, #7
 80034fc:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
				}

			}
			break;
 80034fe:	e065      	b.n	80035cc <UI_Main_FLASHING+0x2a0>
				else if( MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b77      	cmp	r3, #119	; 0x77
 8003506:	d107      	bne.n	8003518 <UI_Main_FLASHING+0x1ec>
					UI_Clean();
 8003508:	f000 f896 	bl	8003638 <UI_Clean>
					UI_DoneDownload_FW();
 800350c:	f000 f97a 	bl	8003804 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 8003512:	2208      	movs	r2, #8
 8003514:	701a      	strb	r2, [r3, #0]
			break;
 8003516:	e059      	b.n	80035cc <UI_Main_FLASHING+0x2a0>
				else if(MCU_REQUEST_PACKET_FW_LOSS ==gl_u8ErrorFlag ){
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b76      	cmp	r3, #118	; 0x76
 800351e:	d155      	bne.n	80035cc <UI_Main_FLASHING+0x2a0>
					UI_Clean();
 8003520:	f000 f88a 	bl	8003638 <UI_Clean>
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 8003526:	2206      	movs	r2, #6
 8003528:	701a      	strb	r2, [r3, #0]
			break;
 800352a:	e04f      	b.n	80035cc <UI_Main_FLASHING+0x2a0>
		}
		case UI_RESENDPACKET_LORA_FW:
		{
			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 800352c:	4831      	ldr	r0, [pc, #196]	; (80035f4 <UI_Main_FLASHING+0x2c8>)
 800352e:	f7fe fb05 	bl	8001b3c <Rte_PacketSendLoraNum_ReadData>
 8003532:	4603      	mov	r3, r0
 8003534:	73bb      	strb	r3, [r7, #14]
			if(RTE_E_OKE == retVal_1){
 8003536:	7bbb      	ldrb	r3, [r7, #14]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d149      	bne.n	80035d0 <UI_Main_FLASHING+0x2a4>
				UI_Send_Packet_Lost(gl_u16Packet_LoRa_FW);
 800353c:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <UI_Main_FLASHING+0x2c8>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fabd 	bl	8003ac0 <UI_Send_Packet_Lost>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8003546:	482a      	ldr	r0, [pc, #168]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 8003548:	f7fe fab0 	bl	8001aac <Rte_UI_Error_ReadData>
 800354c:	4603      	mov	r3, r0
 800354e:	737b      	strb	r3, [r7, #13]
				if(MCU_ERROR_CRC  ==gl_u8ErrorFlag){
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b4f      	cmp	r3, #79	; 0x4f
 8003556:	d105      	bne.n	8003564 <UI_Main_FLASHING+0x238>
					UI_Clean();
 8003558:	f000 f86e 	bl	8003638 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 800355e:	2207      	movs	r2, #7
 8003560:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					UI_DoneDownload_FW();
					gl_UISTATE = UI_DONE_OTA;
				}
			}
			break;
 8003562:	e035      	b.n	80035d0 <UI_Main_FLASHING+0x2a4>
				else if(MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b77      	cmp	r3, #119	; 0x77
 800356a:	d131      	bne.n	80035d0 <UI_Main_FLASHING+0x2a4>
					UI_Clean();
 800356c:	f000 f864 	bl	8003638 <UI_Clean>
					UI_DoneDownload_FW();
 8003570:	f000 f948 	bl	8003804 <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 8003576:	2208      	movs	r2, #8
 8003578:	701a      	strb	r2, [r3, #0]
			break;
 800357a:	e029      	b.n	80035d0 <UI_Main_FLASHING+0x2a4>
		}
		case UI_DONE_OTA:
		{
			gl_UISTATE = UI_IDLE;
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
			UI_DoneDownload_FW();
 8003582:	f000 f93f 	bl	8003804 <UI_DoneDownload_FW>
			HAL_Delay(2000);
 8003586:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800358a:	f001 ffc5 	bl	8005518 <HAL_Delay>
			UI_Clean();
 800358e:	f000 f853 	bl	8003638 <UI_Clean>
			UI_Init_Flashing_Screen();
 8003592:	f000 f831 	bl	80035f8 <UI_Init_Flashing_Screen>
			break;
 8003596:	e01e      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
		}
		case UI_DISPLAYERROR:
		{
			/*ERROR Handler */
			Std_ReturnType retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8003598:	4815      	ldr	r0, [pc, #84]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 800359a:	f7fe fa87 	bl	8001aac <Rte_UI_Error_ReadData>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]
			if(RTE_E_OKE == retVal){
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d115      	bne.n	80035d4 <UI_Main_FLASHING+0x2a8>
				UI_DisplayERROR(gl_u8ErrorFlag);
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <UI_Main_FLASHING+0x2c4>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fa37 	bl	8003a20 <UI_DisplayERROR>

			}
			break;
 80035b2:	e00f      	b.n	80035d4 <UI_Main_FLASHING+0x2a8>
		}
		default:
			/*ERROR */
			gl_UISTATE = UI_DISPLAYERROR;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <UI_Main_FLASHING+0x2b4>)
 80035b6:	2207      	movs	r2, #7
 80035b8:	701a      	strb	r2, [r3, #0]
			break;
 80035ba:	e00c      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035bc:	bf00      	nop
 80035be:	e00a      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035c0:	bf00      	nop
 80035c2:	e008      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035c4:	bf00      	nop
 80035c6:	e006      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035c8:	bf00      	nop
 80035ca:	e004      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <UI_Main_FLASHING+0x2aa>
			break;
 80035d4:	bf00      	nop
	}
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200013e0 	.word	0x200013e0
 80035e4:	200013e1 	.word	0x200013e1
 80035e8:	200013e2 	.word	0x200013e2
 80035ec:	200013ee 	.word	0x200013ee
 80035f0:	200013e3 	.word	0x200013e3
 80035f4:	200013e4 	.word	0x200013e4

080035f8 <UI_Init_Flashing_Screen>:
/**********************************************************/
/*					   Private UI FUNC					  */
/**********************************************************/
static void UI_Init_Flashing_Screen(void){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	/* Set Backgroun color */
	SSD1306_GotoXY (5,10); // goto 10, 10
 80035fc:	210a      	movs	r1, #10
 80035fe:	2005      	movs	r0, #5
 8003600:	f7fe ff70 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts("GATEWAY", &Font_11x18, 1); // print start FUOTA
 8003604:	2201      	movs	r2, #1
 8003606:	4908      	ldr	r1, [pc, #32]	; (8003628 <UI_Init_Flashing_Screen+0x30>)
 8003608:	4808      	ldr	r0, [pc, #32]	; (800362c <UI_Init_Flashing_Screen+0x34>)
 800360a:	f7ff f801 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (10, 40);
 800360e:	2128      	movs	r1, #40	; 0x28
 8003610:	200a      	movs	r0, #10
 8003612:	f7fe ff67 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA UPDATE!!", &Font_7x10, 1);
 8003616:	2201      	movs	r2, #1
 8003618:	4905      	ldr	r1, [pc, #20]	; (8003630 <UI_Init_Flashing_Screen+0x38>)
 800361a:	4806      	ldr	r0, [pc, #24]	; (8003634 <UI_Init_Flashing_Screen+0x3c>)
 800361c:	f7fe fff8 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003620:	f7fe febc 	bl	800239c <SSD1306_UpdateScreen>
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000006c 	.word	0x2000006c
 800362c:	08009be8 	.word	0x08009be8
 8003630:	20000064 	.word	0x20000064
 8003634:	08009bf0 	.word	0x08009bf0

08003638 <UI_Clean>:
static void UI_Clean(void){
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800363c:	f7ff f80d 	bl	800265a <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8003640:	f7fe feac 	bl	800239c <SSD1306_UpdateScreen>
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <UI_WaitForResp>:

static void UI_WaitForResp(void){
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
	uint32_t local_u32NodeAddr = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
	uint32_t local_u32Codesize = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
	uint16_t local_u16Appver=0U;
 8003656:	2300      	movs	r3, #0
 8003658:	837b      	strh	r3, [r7, #26]
	RTE_RUNNABLE_CODE_SIZE_ReadData(&local_u32Codesize);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe f9dc 	bl	8001a1c <Rte_CodeSize_ReadData>
	RTE_RUNNABLE_APP_VER_ReadData(&local_u16Appver);
 8003664:	f107 031a 	add.w	r3, r7, #26
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe f9c5 	bl	80019f8 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 800366e:	f107 0320 	add.w	r3, r7, #32
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f9e4 	bl	8001a40 <Rte_NodeAddr_ReadData>
	char buffer_version[10];
	char buffer_data_id[10];

	uint8_t major_version = (local_u16Appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8003678:	8b7b      	ldrh	r3, [r7, #26]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	b29b      	uxth	r3, r3
 800367e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t minor_version = local_u16Appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 8003682:	8b7b      	ldrh	r3, [r7, #26]
 8003684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	sprintf(buffer_data_id, "0x%X", local_u32NodeAddr);
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	4929      	ldr	r1, [pc, #164]	; (8003734 <UI_WaitForResp+0xec>)
 800368e:	4618      	mov	r0, r3
 8003690:	f005 fdec 	bl	800926c <siprintf>
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8003694:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800369c:	f107 0010 	add.w	r0, r7, #16
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <UI_WaitForResp+0xf0>)
 80036a2:	f005 fde3 	bl	800926c <siprintf>
	char Local_DataBuffer[4];
	uint8_t local_estimatime = local_u32Codesize/BandWidth_UART +20;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4a24      	ldr	r2, [pc, #144]	; (800373c <UI_WaitForResp+0xf4>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3314      	adds	r3, #20
 80036b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SSD1306_GotoXY (20, 0);
 80036b8:	2100      	movs	r1, #0
 80036ba:	2014      	movs	r0, #20
 80036bc:	f7fe ff12 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Update Downloading!!", &Font_7x10, 1);
 80036c0:	2201      	movs	r2, #1
 80036c2:	491f      	ldr	r1, [pc, #124]	; (8003740 <UI_WaitForResp+0xf8>)
 80036c4:	481f      	ldr	r0, [pc, #124]	; (8003744 <UI_WaitForResp+0xfc>)
 80036c6:	f7fe ffa3 	bl	8002610 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u16Appver );
 80036ca:	8b7b      	ldrh	r3, [r7, #26]
 80036cc:	461a      	mov	r2, r3
 80036ce:	463b      	mov	r3, r7
 80036d0:	491d      	ldr	r1, [pc, #116]	; (8003748 <UI_WaitForResp+0x100>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	f005 fdca 	bl	800926c <siprintf>
	SSD1306_GotoXY (20, 10);
 80036d8:	210a      	movs	r1, #10
 80036da:	2014      	movs	r0, #20
 80036dc:	f7fe ff02 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Version:", &Font_7x10, 1);
 80036e0:	2201      	movs	r2, #1
 80036e2:	4917      	ldr	r1, [pc, #92]	; (8003740 <UI_WaitForResp+0xf8>)
 80036e4:	4819      	ldr	r0, [pc, #100]	; (800374c <UI_WaitForResp+0x104>)
 80036e6:	f7fe ff93 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (60, 10);
 80036ea:	210a      	movs	r1, #10
 80036ec:	203c      	movs	r0, #60	; 0x3c
 80036ee:	f7fe fef9 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 80036f2:	f107 0310 	add.w	r3, r7, #16
 80036f6:	2201      	movs	r2, #1
 80036f8:	4911      	ldr	r1, [pc, #68]	; (8003740 <UI_WaitForResp+0xf8>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe ff88 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (20, 20);
 8003700:	2114      	movs	r1, #20
 8003702:	2014      	movs	r0, #20
 8003704:	f7fe feee 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Address:", &Font_7x10, 1);
 8003708:	2201      	movs	r2, #1
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <UI_WaitForResp+0xf8>)
 800370c:	4810      	ldr	r0, [pc, #64]	; (8003750 <UI_WaitForResp+0x108>)
 800370e:	f7fe ff7f 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (60, 20);
 8003712:	2114      	movs	r1, #20
 8003714:	203c      	movs	r0, #60	; 0x3c
 8003716:	f7fe fee5 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 800371a:	1d3b      	adds	r3, r7, #4
 800371c:	2201      	movs	r2, #1
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <UI_WaitForResp+0xf8>)
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe ff75 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003726:	f7fe fe39 	bl	800239c <SSD1306_UpdateScreen>
}
 800372a:	bf00      	nop
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	08009c00 	.word	0x08009c00
 8003738:	08009c08 	.word	0x08009c08
 800373c:	10624dd3 	.word	0x10624dd3
 8003740:	20000064 	.word	0x20000064
 8003744:	08009c10 	.word	0x08009c10
 8003748:	08009c28 	.word	0x08009c28
 800374c:	08009c2c 	.word	0x08009c2c
 8003750:	08009c38 	.word	0x08009c38

08003754 <UI_Downloading_FW>:
static void UI_Downloading_FW(void){
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8003758:	210a      	movs	r1, #10
 800375a:	2028      	movs	r0, #40	; 0x28
 800375c:	f7fe fec2 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Downloading", &Font_7x10, 1);
 8003760:	2201      	movs	r2, #1
 8003762:	490e      	ldr	r1, [pc, #56]	; (800379c <UI_Downloading_FW+0x48>)
 8003764:	480e      	ldr	r0, [pc, #56]	; (80037a0 <UI_Downloading_FW+0x4c>)
 8003766:	f7fe ff53 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 800376a:	2114      	movs	r1, #20
 800376c:	2028      	movs	r0, #40	; 0x28
 800376e:	f7fe feb9 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("  in", &Font_7x10, 1);
 8003772:	2201      	movs	r2, #1
 8003774:	4909      	ldr	r1, [pc, #36]	; (800379c <UI_Downloading_FW+0x48>)
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <UI_Downloading_FW+0x50>)
 8003778:	f7fe ff4a 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 800377c:	211e      	movs	r1, #30
 800377e:	2028      	movs	r0, #40	; 0x28
 8003780:	f7fe feb0 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Progress", &Font_7x10, 1);
 8003784:	2201      	movs	r2, #1
 8003786:	4905      	ldr	r1, [pc, #20]	; (800379c <UI_Downloading_FW+0x48>)
 8003788:	4807      	ldr	r0, [pc, #28]	; (80037a8 <UI_Downloading_FW+0x54>)
 800378a:	f7fe ff41 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 800378e:	2128      	movs	r1, #40	; 0x28
 8003790:	2032      	movs	r0, #50	; 0x32
 8003792:	f7fe fea7 	bl	80024e4 <SSD1306_GotoXY>
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000064 	.word	0x20000064
 80037a0:	08009c44 	.word	0x08009c44
 80037a4:	08009c50 	.word	0x08009c50
 80037a8:	08009c58 	.word	0x08009c58

080037ac <UI_UpdateDownloading_FW>:
static void UI_UpdateDownloading_FW(uint8_t Var_Progress){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_Progress);
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <UI_UpdateDownloading_FW+0x4c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f005 fd54 	bl	800926c <siprintf>
	SSD1306_GotoXY (50, 40);
 80037c4:	2128      	movs	r1, #40	; 0x28
 80037c6:	2032      	movs	r0, #50	; 0x32
 80037c8:	f7fe fe8c 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 80037cc:	2201      	movs	r2, #1
 80037ce:	490b      	ldr	r1, [pc, #44]	; (80037fc <UI_UpdateDownloading_FW+0x50>)
 80037d0:	480b      	ldr	r0, [pc, #44]	; (8003800 <UI_UpdateDownloading_FW+0x54>)
 80037d2:	f7fe ff1d 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 80037d6:	2128      	movs	r1, #40	; 0x28
 80037d8:	2032      	movs	r0, #50	; 0x32
 80037da:	f7fe fe83 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	2201      	movs	r2, #1
 80037e4:	4905      	ldr	r1, [pc, #20]	; (80037fc <UI_UpdateDownloading_FW+0x50>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ff12 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80037ec:	f7fe fdd6 	bl	800239c <SSD1306_UpdateScreen>
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	08009c28 	.word	0x08009c28
 80037fc:	20000064 	.word	0x20000064
 8003800:	08009c64 	.word	0x08009c64

08003804 <UI_DoneDownload_FW>:
static void UI_DoneDownload_FW(void){
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
	/* Writing Text */
	Std_ReturnType retVal = RTE_RUNNABLE_APP_VER_ReadData(&gl_u32Version);
 800380a:	4833      	ldr	r0, [pc, #204]	; (80038d8 <UI_DoneDownload_FW+0xd4>)
 800380c:	f7fe f8f4 	bl	80019f8 <Rte_ApplVer_ReadData>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char buffer_version[10];
	char buffer_data_id[10];
	uint32_t local_u32NodeAddr = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe f90e 	bl	8001a40 <Rte_NodeAddr_ReadData>
	uint8_t major_version = (gl_u32Version >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <UI_DoneDownload_FW+0xd4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t minor_version = gl_u32Version & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <UI_DoneDownload_FW+0xd4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8003836:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800383a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800383e:	f107 0018 	add.w	r0, r7, #24
 8003842:	4926      	ldr	r1, [pc, #152]	; (80038dc <UI_DoneDownload_FW+0xd8>)
 8003844:	f005 fd12 	bl	800926c <siprintf>
	sprintf(buffer_data_id, "0x%X", local_u32NodeAddr);
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	4924      	ldr	r1, [pc, #144]	; (80038e0 <UI_DoneDownload_FW+0xdc>)
 8003850:	4618      	mov	r0, r3
 8003852:	f005 fd0b 	bl	800926c <siprintf>
	char local_UpdateBuffer[4];
	SSD1306_GotoXY (40, 10);
 8003856:	210a      	movs	r1, #10
 8003858:	2028      	movs	r0, #40	; 0x28
 800385a:	f7fe fe43 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA", &Font_11x18, 1);
 800385e:	2201      	movs	r2, #1
 8003860:	4920      	ldr	r1, [pc, #128]	; (80038e4 <UI_DoneDownload_FW+0xe0>)
 8003862:	4821      	ldr	r0, [pc, #132]	; (80038e8 <UI_DoneDownload_FW+0xe4>)
 8003864:	f7fe fed4 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (30, 30);
 8003868:	211e      	movs	r1, #30
 800386a:	201e      	movs	r0, #30
 800386c:	f7fe fe3a 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("COMPLETED", &Font_7x10, 1);
 8003870:	2201      	movs	r2, #1
 8003872:	491e      	ldr	r1, [pc, #120]	; (80038ec <UI_DoneDownload_FW+0xe8>)
 8003874:	481e      	ldr	r0, [pc, #120]	; (80038f0 <UI_DoneDownload_FW+0xec>)
 8003876:	f7fe fecb 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (30, 40);
 800387a:	2128      	movs	r1, #40	; 0x28
 800387c:	201e      	movs	r0, #30
 800387e:	f7fe fe31 	bl	80024e4 <SSD1306_GotoXY>

	SSD1306_Puts ("VERSION: ", &Font_7x10, 1);
 8003882:	2201      	movs	r2, #1
 8003884:	4919      	ldr	r1, [pc, #100]	; (80038ec <UI_DoneDownload_FW+0xe8>)
 8003886:	481b      	ldr	r0, [pc, #108]	; (80038f4 <UI_DoneDownload_FW+0xf0>)
 8003888:	f7fe fec2 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 800388c:	2128      	movs	r1, #40	; 0x28
 800388e:	2064      	movs	r0, #100	; 0x64
 8003890:	f7fe fe28 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 8003894:	f107 0318 	add.w	r3, r7, #24
 8003898:	2201      	movs	r2, #1
 800389a:	4914      	ldr	r1, [pc, #80]	; (80038ec <UI_DoneDownload_FW+0xe8>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe feb7 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (20, 50);
 80038a2:	2132      	movs	r1, #50	; 0x32
 80038a4:	2014      	movs	r0, #20
 80038a6:	f7fe fe1d 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Address:", &Font_7x10, 1);
 80038aa:	2201      	movs	r2, #1
 80038ac:	490f      	ldr	r1, [pc, #60]	; (80038ec <UI_DoneDownload_FW+0xe8>)
 80038ae:	4812      	ldr	r0, [pc, #72]	; (80038f8 <UI_DoneDownload_FW+0xf4>)
 80038b0:	f7fe feae 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 80038b4:	2132      	movs	r1, #50	; 0x32
 80038b6:	203c      	movs	r0, #60	; 0x3c
 80038b8:	f7fe fe14 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	2201      	movs	r2, #1
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <UI_DoneDownload_FW+0xe8>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fea3 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80038ca:	f7fe fd67 	bl	800239c <SSD1306_UpdateScreen>
}
 80038ce:	bf00      	nop
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200013f0 	.word	0x200013f0
 80038dc:	08009c08 	.word	0x08009c08
 80038e0:	08009c00 	.word	0x08009c00
 80038e4:	2000006c 	.word	0x2000006c
 80038e8:	08009c6c 	.word	0x08009c6c
 80038ec:	20000064 	.word	0x20000064
 80038f0:	08009c74 	.word	0x08009c74
 80038f4:	08009c80 	.word	0x08009c80
 80038f8:	08009c38 	.word	0x08009c38

080038fc <UI_Synconfiguaraton>:

static void UI_Synconfiguaraton(void){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (5, 20);
 8003900:	2114      	movs	r1, #20
 8003902:	2005      	movs	r0, #5
 8003904:	f7fe fdee 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("SYNC UP ", &Font_7x10, 1);
 8003908:	2201      	movs	r2, #1
 800390a:	4906      	ldr	r1, [pc, #24]	; (8003924 <UI_Synconfiguaraton+0x28>)
 800390c:	4806      	ldr	r0, [pc, #24]	; (8003928 <UI_Synconfiguaraton+0x2c>)
 800390e:	f7fe fe7f 	bl	8002610 <SSD1306_Puts>
	SSD1306_Puts ("...", &Font_7x10, 1);
 8003912:	2201      	movs	r2, #1
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <UI_Synconfiguaraton+0x28>)
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <UI_Synconfiguaraton+0x30>)
 8003918:	f7fe fe7a 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800391c:	f7fe fd3e 	bl	800239c <SSD1306_UpdateScreen>
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000064 	.word	0x20000064
 8003928:	08009c8c 	.word	0x08009c8c
 800392c:	08009c98 	.word	0x08009c98

08003930 <UI_SendSW_LoRa>:
static void UI_SendSW_LoRa(uint16_t Var_numPacket){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4913      	ldr	r1, [pc, #76]	; (8003990 <UI_SendSW_LoRa+0x60>)
 8003942:	4618      	mov	r0, r3
 8003944:	f005 fc92 	bl	800926c <siprintf>
	SSD1306_GotoXY (5, 20);
 8003948:	2114      	movs	r1, #20
 800394a:	2005      	movs	r0, #5
 800394c:	f7fe fdca 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003950:	2201      	movs	r2, #1
 8003952:	4910      	ldr	r1, [pc, #64]	; (8003994 <UI_SendSW_LoRa+0x64>)
 8003954:	4810      	ldr	r0, [pc, #64]	; (8003998 <UI_SendSW_LoRa+0x68>)
 8003956:	f7fe fe5b 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 800395a:	2128      	movs	r1, #40	; 0x28
 800395c:	2005      	movs	r0, #5
 800395e:	f7fe fdc1 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET SEND :", &Font_7x10, 1);
 8003962:	2201      	movs	r2, #1
 8003964:	490b      	ldr	r1, [pc, #44]	; (8003994 <UI_SendSW_LoRa+0x64>)
 8003966:	480d      	ldr	r0, [pc, #52]	; (800399c <UI_SendSW_LoRa+0x6c>)
 8003968:	f7fe fe52 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 800396c:	2128      	movs	r1, #40	; 0x28
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	f7fe fdb8 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	2201      	movs	r2, #1
 800397a:	4906      	ldr	r1, [pc, #24]	; (8003994 <UI_SendSW_LoRa+0x64>)
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fe47 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003982:	f7fe fd0b 	bl	800239c <SSD1306_UpdateScreen>
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	08009c28 	.word	0x08009c28
 8003994:	20000064 	.word	0x20000064
 8003998:	08009c9c 	.word	0x08009c9c
 800399c:	08009ca8 	.word	0x08009ca8

080039a0 <UI_StartOTA>:

static void UI_StartOTA(void){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,10); // goto 10, 10
 80039a4:	210a      	movs	r1, #10
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7fe fd9c 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts("Send Request OTA!!", &Font_7x10, 1); // print start FUOTA
 80039ac:	2201      	movs	r2, #1
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <UI_StartOTA+0x20>)
 80039b0:	4804      	ldr	r0, [pc, #16]	; (80039c4 <UI_StartOTA+0x24>)
 80039b2:	f7fe fe2d 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80039b6:	f7fe fcf1 	bl	800239c <SSD1306_UpdateScreen>
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000064 	.word	0x20000064
 80039c4:	08009cb8 	.word	0x08009cb8

080039c8 <UI_Wait_ACCEPT_OTA>:
static void UI_Wait_ACCEPT_OTA(uint16_t Var_Time_request){
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
	char local_DataBuffer[4];
	sprintf(local_DataBuffer, "%d", Var_Time_request);
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <UI_Wait_ACCEPT_OTA+0x4c>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f005 fc46 	bl	800926c <siprintf>
	SSD1306_GotoXY (0, 40);
 80039e0:	2128      	movs	r1, #40	; 0x28
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fe fd7e 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("Time Request OTA:", &Font_7x10, 1);
 80039e8:	2201      	movs	r2, #1
 80039ea:	490b      	ldr	r1, [pc, #44]	; (8003a18 <UI_Wait_ACCEPT_OTA+0x50>)
 80039ec:	480b      	ldr	r0, [pc, #44]	; (8003a1c <UI_Wait_ACCEPT_OTA+0x54>)
 80039ee:	f7fe fe0f 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (120, 40);
 80039f2:	2128      	movs	r1, #40	; 0x28
 80039f4:	2078      	movs	r0, #120	; 0x78
 80039f6:	f7fe fd75 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (local_DataBuffer, &Font_7x10, 1);
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	2201      	movs	r2, #1
 8003a00:	4905      	ldr	r1, [pc, #20]	; (8003a18 <UI_Wait_ACCEPT_OTA+0x50>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fe04 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003a08:	f7fe fcc8 	bl	800239c <SSD1306_UpdateScreen>
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	08009c28 	.word	0x08009c28
 8003a18:	20000064 	.word	0x20000064
 8003a1c:	08009ccc 	.word	0x08009ccc

08003a20 <UI_DisplayERROR>:

static void UI_DisplayERROR(uint8_t Var_UIError){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
	char local_ErrorBuffer[4];
	sprintf(local_ErrorBuffer, "%d", Var_UIError);
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	491c      	ldr	r1, [pc, #112]	; (8003aa4 <UI_DisplayERROR+0x84>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f005 fc1a 	bl	800926c <siprintf>
	SSD1306_GotoXY (50, 20);
 8003a38:	2114      	movs	r1, #20
 8003a3a:	2032      	movs	r0, #50	; 0x32
 8003a3c:	f7fe fd52 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("ERROR :", &Font_7x10, 1);
 8003a40:	2201      	movs	r2, #1
 8003a42:	4919      	ldr	r1, [pc, #100]	; (8003aa8 <UI_DisplayERROR+0x88>)
 8003a44:	4819      	ldr	r0, [pc, #100]	; (8003aac <UI_DisplayERROR+0x8c>)
 8003a46:	f7fe fde3 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (10, 40);
 8003a4a:	2128      	movs	r1, #40	; 0x28
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f7fe fd49 	bl	80024e4 <SSD1306_GotoXY>
	switch (Var_UIError) {
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b4f      	cmp	r3, #79	; 0x4f
 8003a56:	d006      	beq.n	8003a66 <UI_DisplayERROR+0x46>
 8003a58:	2b4f      	cmp	r3, #79	; 0x4f
 8003a5a:	dc16      	bgt.n	8003a8a <UI_DisplayERROR+0x6a>
 8003a5c:	2b1f      	cmp	r3, #31
 8003a5e:	d00e      	beq.n	8003a7e <UI_DisplayERROR+0x5e>
 8003a60:	2b2f      	cmp	r3, #47	; 0x2f
 8003a62:	d006      	beq.n	8003a72 <UI_DisplayERROR+0x52>
 8003a64:	e011      	b.n	8003a8a <UI_DisplayERROR+0x6a>
		case MCU_ERROR_CRC:
			SSD1306_Puts ("INVALID CRC", &Font_7x10, 1);
 8003a66:	2201      	movs	r2, #1
 8003a68:	490f      	ldr	r1, [pc, #60]	; (8003aa8 <UI_DisplayERROR+0x88>)
 8003a6a:	4811      	ldr	r0, [pc, #68]	; (8003ab0 <UI_DisplayERROR+0x90>)
 8003a6c:	f7fe fdd0 	bl	8002610 <SSD1306_Puts>
			break;
 8003a70:	e011      	b.n	8003a96 <UI_DisplayERROR+0x76>
		case GW_REQUEST_UPDATE_ERROR:
			SSD1306_Puts ("REQUEST UPDATE ERROR", &Font_7x10, 1);
 8003a72:	2201      	movs	r2, #1
 8003a74:	490c      	ldr	r1, [pc, #48]	; (8003aa8 <UI_DisplayERROR+0x88>)
 8003a76:	480f      	ldr	r0, [pc, #60]	; (8003ab4 <UI_DisplayERROR+0x94>)
 8003a78:	f7fe fdca 	bl	8002610 <SSD1306_Puts>
			break;
 8003a7c:	e00b      	b.n	8003a96 <UI_DisplayERROR+0x76>
		case GW_OUTOFREQUEST_ERROR:
			SSD1306_Puts ("REQUEST UPDATE FAIL", &Font_7x10, 1);
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4909      	ldr	r1, [pc, #36]	; (8003aa8 <UI_DisplayERROR+0x88>)
 8003a82:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <UI_DisplayERROR+0x98>)
 8003a84:	f7fe fdc4 	bl	8002610 <SSD1306_Puts>
			break;
 8003a88:	e005      	b.n	8003a96 <UI_DisplayERROR+0x76>
		default:
			SSD1306_Puts ("UNKNOWN ERROR!!", &Font_7x10, 1);
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4906      	ldr	r1, [pc, #24]	; (8003aa8 <UI_DisplayERROR+0x88>)
 8003a8e:	480b      	ldr	r0, [pc, #44]	; (8003abc <UI_DisplayERROR+0x9c>)
 8003a90:	f7fe fdbe 	bl	8002610 <SSD1306_Puts>
			break;
 8003a94:	bf00      	nop
	}
	SSD1306_UpdateScreen(); //display
 8003a96:	f7fe fc81 	bl	800239c <SSD1306_UpdateScreen>
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08009c28 	.word	0x08009c28
 8003aa8:	20000064 	.word	0x20000064
 8003aac:	08009ce0 	.word	0x08009ce0
 8003ab0:	08009ce8 	.word	0x08009ce8
 8003ab4:	08009cf4 	.word	0x08009cf4
 8003ab8:	08009d0c 	.word	0x08009d0c
 8003abc:	08009d20 	.word	0x08009d20

08003ac0 <UI_Send_Packet_Lost>:

static void UI_Send_Packet_Lost(uint16_t Var_numPacket){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	4913      	ldr	r1, [pc, #76]	; (8003b20 <UI_Send_Packet_Lost+0x60>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f005 fbca 	bl	800926c <siprintf>
	SSD1306_GotoXY (5, 10);
 8003ad8:	210a      	movs	r1, #10
 8003ada:	2005      	movs	r0, #5
 8003adc:	f7fe fd02 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4910      	ldr	r1, [pc, #64]	; (8003b24 <UI_Send_Packet_Lost+0x64>)
 8003ae4:	4810      	ldr	r0, [pc, #64]	; (8003b28 <UI_Send_Packet_Lost+0x68>)
 8003ae6:	f7fe fd93 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 8003aea:	2114      	movs	r1, #20
 8003aec:	2005      	movs	r0, #5
 8003aee:	f7fe fcf9 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET RESENT:", &Font_7x10, 1);
 8003af2:	2201      	movs	r2, #1
 8003af4:	490b      	ldr	r1, [pc, #44]	; (8003b24 <UI_Send_Packet_Lost+0x64>)
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <UI_Send_Packet_Lost+0x6c>)
 8003af8:	f7fe fd8a 	bl	8002610 <SSD1306_Puts>
	SSD1306_GotoXY (100, 30);
 8003afc:	211e      	movs	r1, #30
 8003afe:	2064      	movs	r0, #100	; 0x64
 8003b00:	f7fe fcf0 	bl	80024e4 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4906      	ldr	r1, [pc, #24]	; (8003b24 <UI_Send_Packet_Lost+0x64>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fd7f 	bl	8002610 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003b12:	f7fe fc43 	bl	800239c <SSD1306_UpdateScreen>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08009c28 	.word	0x08009c28
 8003b24:	20000064 	.word	0x20000064
 8003b28:	08009c9c 	.word	0x08009c9c
 8003b2c:	08009d30 	.word	0x08009d30

08003b30 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e030      	b.n	8003ba2 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	441a      	add	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	440b      	add	r3, r1
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	3301      	adds	r3, #1
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	3301      	adds	r3, #1
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	440b      	add	r3, r1
 8003b68:	7812      	ldrb	r2, [r2, #0]
 8003b6a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	441a      	add	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	440b      	add	r3, r1
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	3303      	adds	r3, #3
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	441a      	add	r2, r3
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	3303      	adds	r3, #3
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	440b      	add	r3, r1
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d9cb      	bls.n	8003b40 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8003ba8:	2304      	movs	r3, #4
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e081      	b.n	8003cb2 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	4413      	add	r3, r2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	3303      	adds	r3, #3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d125      	bne.n	8003c3a <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8003bee:	7b3b      	ldrb	r3, [r7, #12]
 8003bf0:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8003bf2:	7b7b      	ldrb	r3, [r7, #13]
 8003bf4:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8003bf6:	7bbb      	ldrb	r3, [r7, #14]
 8003bf8:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8003c02:	7b3b      	ldrb	r3, [r7, #12]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <KeyExpansion+0x198>)
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8003c0c:	7b7b      	ldrb	r3, [r7, #13]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <KeyExpansion+0x198>)
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <KeyExpansion+0x198>)
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <KeyExpansion+0x198>)
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8003c2a:	7b3a      	ldrb	r2, [r7, #12]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	4926      	ldr	r1, [pc, #152]	; (8003ccc <KeyExpansion+0x19c>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	4053      	eors	r3, r2
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3b04      	subs	r3, #4
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	7819      	ldrb	r1, [r3, #0]
 8003c50:	7b3a      	ldrb	r2, [r7, #12]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4403      	add	r3, r0
 8003c58:	404a      	eors	r2, r1
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	3301      	adds	r3, #1
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	7819      	ldrb	r1, [r3, #0]
 8003c68:	7b7a      	ldrb	r2, [r7, #13]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4403      	add	r3, r0
 8003c72:	404a      	eors	r2, r1
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	7819      	ldrb	r1, [r3, #0]
 8003c82:	7bba      	ldrb	r2, [r7, #14]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3302      	adds	r3, #2
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4403      	add	r3, r0
 8003c8c:	404a      	eors	r2, r1
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3303      	adds	r3, #3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	7819      	ldrb	r1, [r3, #0]
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4403      	add	r3, r0
 8003ca6:	404a      	eors	r2, r1
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b2b      	cmp	r3, #43	; 0x2b
 8003cb6:	f67f af7a 	bls.w	8003bae <KeyExpansion+0x7e>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3724      	adds	r7, #36	; 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	08009d60 	.word	0x08009d60
 8003ccc:	08009f60 	.word	0x08009f60

08003cd0 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff25 	bl	8003b30 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	33b0      	adds	r3, #176	; 0xb0
 8003cea:	2210      	movs	r2, #16
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 fb10 	bl	8009314 <memcpy>
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
 8003d0e:	e027      	b.n	8003d60 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8003d10:	2300      	movs	r3, #0
 8003d12:	75bb      	strb	r3, [r7, #22]
 8003d14:	e01e      	b.n	8003d54 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8003d16:	7dfa      	ldrb	r2, [r7, #23]
 8003d18:	7dbb      	ldrb	r3, [r7, #22]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	0092      	lsls	r2, r2, #2
 8003d1e:	440a      	add	r2, r1
 8003d20:	4413      	add	r3, r2
 8003d22:	7818      	ldrb	r0, [r3, #0]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	7dbb      	ldrb	r3, [r7, #22]
 8003d30:	4413      	add	r3, r2
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	7819      	ldrb	r1, [r3, #0]
 8003d3a:	7dfa      	ldrb	r2, [r7, #23]
 8003d3c:	7dbb      	ldrb	r3, [r7, #22]
 8003d3e:	4041      	eors	r1, r0
 8003d40:	b2c8      	uxtb	r0, r1
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	0092      	lsls	r2, r2, #2
 8003d46:	440a      	add	r2, r1
 8003d48:	4413      	add	r3, r2
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003d4e:	7dbb      	ldrb	r3, [r7, #22]
 8003d50:	3301      	adds	r3, #1
 8003d52:	75bb      	strb	r3, [r7, #22]
 8003d54:	7dbb      	ldrb	r3, [r7, #22]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d9dd      	bls.n	8003d16 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d9d4      	bls.n	8003d10 <AddRoundKey+0x14>
    }
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
	...

08003d74 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e01d      	b.n	8003dbe <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8003d82:	2300      	movs	r3, #0
 8003d84:	73bb      	strb	r3, [r7, #14]
 8003d86:	e014      	b.n	8003db2 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8003d88:	7bba      	ldrb	r2, [r7, #14]
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	440a      	add	r2, r1
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	7bba      	ldrb	r2, [r7, #14]
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <SubBytes+0x5c>)
 8003d9e:	5c08      	ldrb	r0, [r1, r0]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	440a      	add	r2, r1
 8003da6:	4413      	add	r3, r2
 8003da8:	4602      	mov	r2, r0
 8003daa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003dac:	7bbb      	ldrb	r3, [r7, #14]
 8003dae:	3301      	adds	r3, #1
 8003db0:	73bb      	strb	r3, [r7, #14]
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d9e7      	bls.n	8003d88 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d9de      	bls.n	8003d82 <SubBytes+0xe>
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	08009d60 	.word	0x08009d60

08003dd4 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	795a      	ldrb	r2, [r3, #5]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7a5a      	ldrb	r2, [r3, #9]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7b5a      	ldrb	r2, [r3, #13]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	789b      	ldrb	r3, [r3, #2]
 8003e04:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7a9a      	ldrb	r2, [r3, #10]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	799b      	ldrb	r3, [r3, #6]
 8003e18:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7b9a      	ldrb	r2, [r3, #14]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	78db      	ldrb	r3, [r3, #3]
 8003e2c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7bda      	ldrb	r2, [r3, #15]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7ada      	ldrb	r2, [r3, #11]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	79da      	ldrb	r2, [r3, #7]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	71da      	strb	r2, [r3, #7]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	b25a      	sxtb	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	09db      	lsrs	r3, r3, #7
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	0049      	lsls	r1, r1, #1
 8003e70:	440b      	add	r3, r1
 8003e72:	4619      	mov	r1, r3
 8003e74:	00c8      	lsls	r0, r1, #3
 8003e76:	4619      	mov	r1, r3
 8003e78:	4603      	mov	r3, r0
 8003e7a:	440b      	add	r3, r1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	4053      	eors	r3, r2
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e0a4      	b.n	8003fe8 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003ea6:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	4053      	eors	r3, r2
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	789b      	ldrb	r3, [r3, #2]
 8003ec8:	4053      	eors	r3, r2
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	4053      	eors	r3, r2
 8003ed8:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	4053      	eors	r3, r2
 8003eee:	733b      	strb	r3, [r7, #12]
 8003ef0:	7b3b      	ldrb	r3, [r7, #12]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ffaf 	bl	8003e56 <xtime>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	733b      	strb	r3, [r7, #12]
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8003f04:	7b3a      	ldrb	r2, [r7, #12]
 8003f06:	7b7b      	ldrb	r3, [r7, #13]
 8003f08:	4053      	eors	r3, r2
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	404b      	eors	r3, r1
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	785a      	ldrb	r2, [r3, #1]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	789b      	ldrb	r3, [r3, #2]
 8003f2c:	4053      	eors	r3, r2
 8003f2e:	733b      	strb	r3, [r7, #12]
 8003f30:	7b3b      	ldrb	r3, [r7, #12]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff8f 	bl	8003e56 <xtime>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	733b      	strb	r3, [r7, #12]
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	7859      	ldrb	r1, [r3, #1]
 8003f46:	7b3a      	ldrb	r2, [r7, #12]
 8003f48:	7b7b      	ldrb	r3, [r7, #13]
 8003f4a:	4053      	eors	r3, r2
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	404a      	eors	r2, r1
 8003f52:	b2d1      	uxtb	r1, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	460a      	mov	r2, r1
 8003f5c:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	789a      	ldrb	r2, [r3, #2]
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	4053      	eors	r3, r2
 8003f74:	733b      	strb	r3, [r7, #12]
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff6c 	bl	8003e56 <xtime>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	733b      	strb	r3, [r7, #12]
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	7899      	ldrb	r1, [r3, #2]
 8003f8c:	7b3a      	ldrb	r2, [r7, #12]
 8003f8e:	7b7b      	ldrb	r3, [r7, #13]
 8003f90:	4053      	eors	r3, r2
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	404a      	eors	r2, r1
 8003f98:	b2d1      	uxtb	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	78da      	ldrb	r2, [r3, #3]
 8003fae:	7bbb      	ldrb	r3, [r7, #14]
 8003fb0:	4053      	eors	r3, r2
 8003fb2:	733b      	strb	r3, [r7, #12]
 8003fb4:	7b3b      	ldrb	r3, [r7, #12]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff4d 	bl	8003e56 <xtime>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	733b      	strb	r3, [r7, #12]
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	78d9      	ldrb	r1, [r3, #3]
 8003fca:	7b3a      	ldrb	r2, [r7, #12]
 8003fcc:	7b7b      	ldrb	r3, [r7, #13]
 8003fce:	4053      	eors	r3, r2
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	404a      	eors	r2, r1
 8003fd6:	b2d1      	uxtb	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	460a      	mov	r2, r1
 8003fe0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	f67f af57 	bls.w	8003e9e <MixColumns+0xe>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8003ffa:	b5b0      	push	{r4, r5, r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e33b      	b.n	8004680 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8004010:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	78db      	ldrb	r3, [r3, #3]
 8004034:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff0c 	bl	8003e56 <xtime>
 800403e:	4603      	mov	r3, r0
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff08 	bl	8003e56 <xtime>
 8004046:	4603      	mov	r3, r0
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff04 	bl	8003e56 <xtime>
 800404e:	4603      	mov	r3, r0
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff00 	bl	8003e56 <xtime>
 8004056:	7abb      	ldrb	r3, [r7, #10]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fefc 	bl	8003e56 <xtime>
 800405e:	4603      	mov	r3, r0
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fef8 	bl	8003e56 <xtime>
 8004066:	7abb      	ldrb	r3, [r7, #10]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fef4 	bl	8003e56 <xtime>
 800406e:	4603      	mov	r3, r0
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fef0 	bl	8003e56 <xtime>
 8004076:	4603      	mov	r3, r0
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff feec 	bl	8003e56 <xtime>
 800407e:	4603      	mov	r3, r0
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fee8 	bl	8003e56 <xtime>
 8004086:	7a7b      	ldrb	r3, [r7, #9]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fee4 	bl	8003e56 <xtime>
 800408e:	7a7b      	ldrb	r3, [r7, #9]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fee0 	bl	8003e56 <xtime>
 8004096:	4603      	mov	r3, r0
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fedc 	bl	8003e56 <xtime>
 800409e:	4603      	mov	r3, r0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fed8 	bl	8003e56 <xtime>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fed4 	bl	8003e56 <xtime>
 80040ae:	7a3b      	ldrb	r3, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fed0 	bl	8003e56 <xtime>
 80040b6:	7a3b      	ldrb	r3, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fecc 	bl	8003e56 <xtime>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fec8 	bl	8003e56 <xtime>
 80040c6:	7a3b      	ldrb	r3, [r7, #8]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fec4 	bl	8003e56 <xtime>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fec0 	bl	8003e56 <xtime>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff febc 	bl	8003e56 <xtime>
 80040de:	4603      	mov	r3, r0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff feb8 	bl	8003e56 <xtime>
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff feb4 	bl	8003e56 <xtime>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461c      	mov	r4, r3
 80040f2:	7afb      	ldrb	r3, [r7, #11]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff feae 	bl	8003e56 <xtime>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff feaa 	bl	8003e56 <xtime>
 8004102:	4603      	mov	r3, r0
 8004104:	4063      	eors	r3, r4
 8004106:	b2dc      	uxtb	r4, r3
 8004108:	7afb      	ldrb	r3, [r7, #11]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fea3 	bl	8003e56 <xtime>
 8004110:	4603      	mov	r3, r0
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fe9f 	bl	8003e56 <xtime>
 8004118:	4603      	mov	r3, r0
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fe9b 	bl	8003e56 <xtime>
 8004120:	4603      	mov	r3, r0
 8004122:	4063      	eors	r3, r4
 8004124:	b2dc      	uxtb	r4, r3
 8004126:	7abb      	ldrb	r3, [r7, #10]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fe94 	bl	8003e56 <xtime>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	7abb      	ldrb	r3, [r7, #10]
 8004134:	4053      	eors	r3, r2
 8004136:	b2dd      	uxtb	r5, r3
 8004138:	7abb      	ldrb	r3, [r7, #10]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fe8b 	bl	8003e56 <xtime>
 8004140:	4603      	mov	r3, r0
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fe87 	bl	8003e56 <xtime>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fe83 	bl	8003e56 <xtime>
 8004150:	4603      	mov	r3, r0
 8004152:	406b      	eors	r3, r5
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4063      	eors	r3, r4
 8004158:	b2dc      	uxtb	r4, r3
 800415a:	7a7b      	ldrb	r3, [r7, #9]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fe7a 	bl	8003e56 <xtime>
 8004162:	4603      	mov	r3, r0
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe76 	bl	8003e56 <xtime>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	7a7b      	ldrb	r3, [r7, #9]
 8004170:	4053      	eors	r3, r2
 8004172:	b2dd      	uxtb	r5, r3
 8004174:	7a7b      	ldrb	r3, [r7, #9]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fe6d 	bl	8003e56 <xtime>
 800417c:	4603      	mov	r3, r0
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fe69 	bl	8003e56 <xtime>
 8004184:	4603      	mov	r3, r0
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fe65 	bl	8003e56 <xtime>
 800418c:	4603      	mov	r3, r0
 800418e:	406b      	eors	r3, r5
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4063      	eors	r3, r4
 8004194:	b2dc      	uxtb	r4, r3
 8004196:	7a3b      	ldrb	r3, [r7, #8]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fe5c 	bl	8003e56 <xtime>
 800419e:	4603      	mov	r3, r0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fe58 	bl	8003e56 <xtime>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe54 	bl	8003e56 <xtime>
 80041ae:	4603      	mov	r3, r0
 80041b0:	461a      	mov	r2, r3
 80041b2:	7a3b      	ldrb	r3, [r7, #8]
 80041b4:	4053      	eors	r3, r2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4063      	eors	r3, r4
 80041ba:	b2d9      	uxtb	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80041c4:	7afb      	ldrb	r3, [r7, #11]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fe45 	bl	8003e56 <xtime>
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fe41 	bl	8003e56 <xtime>
 80041d4:	4603      	mov	r3, r0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe3d 	bl	8003e56 <xtime>
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe39 	bl	8003e56 <xtime>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fe35 	bl	8003e56 <xtime>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fe31 	bl	8003e56 <xtime>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fe2d 	bl	8003e56 <xtime>
 80041fc:	7abb      	ldrb	r3, [r7, #10]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fe29 	bl	8003e56 <xtime>
 8004204:	4603      	mov	r3, r0
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fe25 	bl	8003e56 <xtime>
 800420c:	4603      	mov	r3, r0
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fe21 	bl	8003e56 <xtime>
 8004214:	4603      	mov	r3, r0
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe1d 	bl	8003e56 <xtime>
 800421c:	7a7b      	ldrb	r3, [r7, #9]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fe19 	bl	8003e56 <xtime>
 8004224:	4603      	mov	r3, r0
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe15 	bl	8003e56 <xtime>
 800422c:	7a7b      	ldrb	r3, [r7, #9]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fe11 	bl	8003e56 <xtime>
 8004234:	4603      	mov	r3, r0
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fe0d 	bl	8003e56 <xtime>
 800423c:	4603      	mov	r3, r0
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fe09 	bl	8003e56 <xtime>
 8004244:	4603      	mov	r3, r0
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fe05 	bl	8003e56 <xtime>
 800424c:	7a3b      	ldrb	r3, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fe01 	bl	8003e56 <xtime>
 8004254:	7a3b      	ldrb	r3, [r7, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fdfd 	bl	8003e56 <xtime>
 800425c:	4603      	mov	r3, r0
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fdf9 	bl	8003e56 <xtime>
 8004264:	4603      	mov	r3, r0
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fdf5 	bl	8003e56 <xtime>
 800426c:	4603      	mov	r3, r0
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fdf1 	bl	8003e56 <xtime>
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fded 	bl	8003e56 <xtime>
 800427c:	4603      	mov	r3, r0
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fde9 	bl	8003e56 <xtime>
 8004284:	4603      	mov	r3, r0
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fde5 	bl	8003e56 <xtime>
 800428c:	4603      	mov	r3, r0
 800428e:	461a      	mov	r2, r3
 8004290:	7afb      	ldrb	r3, [r7, #11]
 8004292:	4053      	eors	r3, r2
 8004294:	b2dc      	uxtb	r4, r3
 8004296:	7abb      	ldrb	r3, [r7, #10]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fddc 	bl	8003e56 <xtime>
 800429e:	4603      	mov	r3, r0
 80042a0:	461d      	mov	r5, r3
 80042a2:	7abb      	ldrb	r3, [r7, #10]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fdd6 	bl	8003e56 <xtime>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fdd2 	bl	8003e56 <xtime>
 80042b2:	4603      	mov	r3, r0
 80042b4:	406b      	eors	r3, r5
 80042b6:	b2dd      	uxtb	r5, r3
 80042b8:	7abb      	ldrb	r3, [r7, #10]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fdcb 	bl	8003e56 <xtime>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fdc7 	bl	8003e56 <xtime>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fdc3 	bl	8003e56 <xtime>
 80042d0:	4603      	mov	r3, r0
 80042d2:	406b      	eors	r3, r5
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4063      	eors	r3, r4
 80042d8:	b2dc      	uxtb	r4, r3
 80042da:	7a7b      	ldrb	r3, [r7, #9]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fdba 	bl	8003e56 <xtime>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	7a7b      	ldrb	r3, [r7, #9]
 80042e8:	4053      	eors	r3, r2
 80042ea:	b2dd      	uxtb	r5, r3
 80042ec:	7a7b      	ldrb	r3, [r7, #9]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fdb1 	bl	8003e56 <xtime>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fdad 	bl	8003e56 <xtime>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fda9 	bl	8003e56 <xtime>
 8004304:	4603      	mov	r3, r0
 8004306:	406b      	eors	r3, r5
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4063      	eors	r3, r4
 800430c:	b2dc      	uxtb	r4, r3
 800430e:	7a3b      	ldrb	r3, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fda0 	bl	8003e56 <xtime>
 8004316:	4603      	mov	r3, r0
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fd9c 	bl	8003e56 <xtime>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	7a3b      	ldrb	r3, [r7, #8]
 8004324:	4053      	eors	r3, r2
 8004326:	b2dd      	uxtb	r5, r3
 8004328:	7a3b      	ldrb	r3, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fd93 	bl	8003e56 <xtime>
 8004330:	4603      	mov	r3, r0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fd8f 	bl	8003e56 <xtime>
 8004338:	4603      	mov	r3, r0
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fd8b 	bl	8003e56 <xtime>
 8004340:	4603      	mov	r3, r0
 8004342:	406b      	eors	r3, r5
 8004344:	b2db      	uxtb	r3, r3
 8004346:	4063      	eors	r3, r4
 8004348:	b2d9      	uxtb	r1, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	460a      	mov	r2, r1
 8004354:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8004356:	7afb      	ldrb	r3, [r7, #11]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fd7c 	bl	8003e56 <xtime>
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fd78 	bl	8003e56 <xtime>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fd74 	bl	8003e56 <xtime>
 800436e:	4603      	mov	r3, r0
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fd70 	bl	8003e56 <xtime>
 8004376:	4603      	mov	r3, r0
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fd6c 	bl	8003e56 <xtime>
 800437e:	7abb      	ldrb	r3, [r7, #10]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fd68 	bl	8003e56 <xtime>
 8004386:	7abb      	ldrb	r3, [r7, #10]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fd64 	bl	8003e56 <xtime>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fd60 	bl	8003e56 <xtime>
 8004396:	7abb      	ldrb	r3, [r7, #10]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fd5c 	bl	8003e56 <xtime>
 800439e:	4603      	mov	r3, r0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fd58 	bl	8003e56 <xtime>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fd54 	bl	8003e56 <xtime>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd50 	bl	8003e56 <xtime>
 80043b6:	7a7b      	ldrb	r3, [r7, #9]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fd4c 	bl	8003e56 <xtime>
 80043be:	4603      	mov	r3, r0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fd48 	bl	8003e56 <xtime>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fd44 	bl	8003e56 <xtime>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fd40 	bl	8003e56 <xtime>
 80043d6:	7a3b      	ldrb	r3, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fd3c 	bl	8003e56 <xtime>
 80043de:	4603      	mov	r3, r0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fd38 	bl	8003e56 <xtime>
 80043e6:	7a3b      	ldrb	r3, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fd34 	bl	8003e56 <xtime>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fd30 	bl	8003e56 <xtime>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fd2c 	bl	8003e56 <xtime>
 80043fe:	4603      	mov	r3, r0
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fd28 	bl	8003e56 <xtime>
 8004406:	7afb      	ldrb	r3, [r7, #11]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fd24 	bl	8003e56 <xtime>
 800440e:	4603      	mov	r3, r0
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fd20 	bl	8003e56 <xtime>
 8004416:	4603      	mov	r3, r0
 8004418:	461a      	mov	r2, r3
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	4053      	eors	r3, r2
 800441e:	b2dc      	uxtb	r4, r3
 8004420:	7afb      	ldrb	r3, [r7, #11]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fd17 	bl	8003e56 <xtime>
 8004428:	4603      	mov	r3, r0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd13 	bl	8003e56 <xtime>
 8004430:	4603      	mov	r3, r0
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fd0f 	bl	8003e56 <xtime>
 8004438:	4603      	mov	r3, r0
 800443a:	4063      	eors	r3, r4
 800443c:	b2dc      	uxtb	r4, r3
 800443e:	7abb      	ldrb	r3, [r7, #10]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fd08 	bl	8003e56 <xtime>
 8004446:	4603      	mov	r3, r0
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fd04 	bl	8003e56 <xtime>
 800444e:	4603      	mov	r3, r0
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fd00 	bl	8003e56 <xtime>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	7abb      	ldrb	r3, [r7, #10]
 800445c:	4053      	eors	r3, r2
 800445e:	b2db      	uxtb	r3, r3
 8004460:	4063      	eors	r3, r4
 8004462:	b2dc      	uxtb	r4, r3
 8004464:	7a7b      	ldrb	r3, [r7, #9]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fcf5 	bl	8003e56 <xtime>
 800446c:	4603      	mov	r3, r0
 800446e:	461d      	mov	r5, r3
 8004470:	7a7b      	ldrb	r3, [r7, #9]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fcef 	bl	8003e56 <xtime>
 8004478:	4603      	mov	r3, r0
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fceb 	bl	8003e56 <xtime>
 8004480:	4603      	mov	r3, r0
 8004482:	406b      	eors	r3, r5
 8004484:	b2dd      	uxtb	r5, r3
 8004486:	7a7b      	ldrb	r3, [r7, #9]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fce4 	bl	8003e56 <xtime>
 800448e:	4603      	mov	r3, r0
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fce0 	bl	8003e56 <xtime>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fcdc 	bl	8003e56 <xtime>
 800449e:	4603      	mov	r3, r0
 80044a0:	406b      	eors	r3, r5
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4063      	eors	r3, r4
 80044a6:	b2dc      	uxtb	r4, r3
 80044a8:	7a3b      	ldrb	r3, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fcd3 	bl	8003e56 <xtime>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	7a3b      	ldrb	r3, [r7, #8]
 80044b6:	4053      	eors	r3, r2
 80044b8:	b2dd      	uxtb	r5, r3
 80044ba:	7a3b      	ldrb	r3, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fcca 	bl	8003e56 <xtime>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fcc6 	bl	8003e56 <xtime>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fcc2 	bl	8003e56 <xtime>
 80044d2:	4603      	mov	r3, r0
 80044d4:	406b      	eors	r3, r5
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4063      	eors	r3, r4
 80044da:	b2d9      	uxtb	r1, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	460a      	mov	r2, r1
 80044e6:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fcb3 	bl	8003e56 <xtime>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fcaf 	bl	8003e56 <xtime>
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fcab 	bl	8003e56 <xtime>
 8004500:	4603      	mov	r3, r0
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fca7 	bl	8003e56 <xtime>
 8004508:	4603      	mov	r3, r0
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fca3 	bl	8003e56 <xtime>
 8004510:	4603      	mov	r3, r0
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fc9f 	bl	8003e56 <xtime>
 8004518:	7abb      	ldrb	r3, [r7, #10]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fc9b 	bl	8003e56 <xtime>
 8004520:	7abb      	ldrb	r3, [r7, #10]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fc97 	bl	8003e56 <xtime>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fc93 	bl	8003e56 <xtime>
 8004530:	4603      	mov	r3, r0
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fc8f 	bl	8003e56 <xtime>
 8004538:	4603      	mov	r3, r0
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fc8b 	bl	8003e56 <xtime>
 8004540:	7a7b      	ldrb	r3, [r7, #9]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fc87 	bl	8003e56 <xtime>
 8004548:	7a7b      	ldrb	r3, [r7, #9]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fc83 	bl	8003e56 <xtime>
 8004550:	4603      	mov	r3, r0
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fc7f 	bl	8003e56 <xtime>
 8004558:	7a7b      	ldrb	r3, [r7, #9]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fc7b 	bl	8003e56 <xtime>
 8004560:	4603      	mov	r3, r0
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fc77 	bl	8003e56 <xtime>
 8004568:	4603      	mov	r3, r0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fc73 	bl	8003e56 <xtime>
 8004570:	4603      	mov	r3, r0
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fc6f 	bl	8003e56 <xtime>
 8004578:	7a3b      	ldrb	r3, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fc6b 	bl	8003e56 <xtime>
 8004580:	4603      	mov	r3, r0
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fc67 	bl	8003e56 <xtime>
 8004588:	4603      	mov	r3, r0
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fc63 	bl	8003e56 <xtime>
 8004590:	4603      	mov	r3, r0
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fc5f 	bl	8003e56 <xtime>
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fc5b 	bl	8003e56 <xtime>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	4053      	eors	r3, r2
 80045a8:	b2dc      	uxtb	r4, r3
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fc52 	bl	8003e56 <xtime>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fc4e 	bl	8003e56 <xtime>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fc4a 	bl	8003e56 <xtime>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4063      	eors	r3, r4
 80045c6:	b2dc      	uxtb	r4, r3
 80045c8:	7abb      	ldrb	r3, [r7, #10]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fc43 	bl	8003e56 <xtime>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fc3f 	bl	8003e56 <xtime>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	7abb      	ldrb	r3, [r7, #10]
 80045de:	4053      	eors	r3, r2
 80045e0:	b2dd      	uxtb	r5, r3
 80045e2:	7abb      	ldrb	r3, [r7, #10]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fc36 	bl	8003e56 <xtime>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fc32 	bl	8003e56 <xtime>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fc2e 	bl	8003e56 <xtime>
 80045fa:	4603      	mov	r3, r0
 80045fc:	406b      	eors	r3, r5
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4063      	eors	r3, r4
 8004602:	b2dc      	uxtb	r4, r3
 8004604:	7a7b      	ldrb	r3, [r7, #9]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fc25 	bl	8003e56 <xtime>
 800460c:	4603      	mov	r3, r0
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fc21 	bl	8003e56 <xtime>
 8004614:	4603      	mov	r3, r0
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fc1d 	bl	8003e56 <xtime>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	7a7b      	ldrb	r3, [r7, #9]
 8004622:	4053      	eors	r3, r2
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4063      	eors	r3, r4
 8004628:	b2dc      	uxtb	r4, r3
 800462a:	7a3b      	ldrb	r3, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fc12 	bl	8003e56 <xtime>
 8004632:	4603      	mov	r3, r0
 8004634:	461d      	mov	r5, r3
 8004636:	7a3b      	ldrb	r3, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fc0c 	bl	8003e56 <xtime>
 800463e:	4603      	mov	r3, r0
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fc08 	bl	8003e56 <xtime>
 8004646:	4603      	mov	r3, r0
 8004648:	406b      	eors	r3, r5
 800464a:	b2dd      	uxtb	r5, r3
 800464c:	7a3b      	ldrb	r3, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fc01 	bl	8003e56 <xtime>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fbfd 	bl	8003e56 <xtime>
 800465c:	4603      	mov	r3, r0
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fbf9 	bl	8003e56 <xtime>
 8004664:	4603      	mov	r3, r0
 8004666:	406b      	eors	r3, r5
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4063      	eors	r3, r4
 800466c:	b2d9      	uxtb	r1, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	460a      	mov	r2, r1
 8004678:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b03      	cmp	r3, #3
 8004684:	f77f acc0 	ble.w	8004008 <InvMixColumns+0xe>
  }
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004694 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e01d      	b.n	80046de <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80046a2:	2300      	movs	r3, #0
 80046a4:	73bb      	strb	r3, [r7, #14]
 80046a6:	e014      	b.n	80046d2 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80046a8:	7bba      	ldrb	r2, [r7, #14]
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	440a      	add	r2, r1
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	7bba      	ldrb	r2, [r7, #14]
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	490c      	ldr	r1, [pc, #48]	; (80046f0 <InvSubBytes+0x5c>)
 80046be:	5c08      	ldrb	r0, [r1, r0]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	0092      	lsls	r2, r2, #2
 80046c4:	440a      	add	r2, r1
 80046c6:	4413      	add	r3, r2
 80046c8:	4602      	mov	r2, r0
 80046ca:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80046cc:	7bbb      	ldrb	r3, [r7, #14]
 80046ce:	3301      	adds	r3, #1
 80046d0:	73bb      	strb	r3, [r7, #14]
 80046d2:	7bbb      	ldrb	r3, [r7, #14]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d9e7      	bls.n	80046a8 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	3301      	adds	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d9de      	bls.n	80046a2 <InvSubBytes+0xe>
    }
  }
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	08009e60 	.word	0x08009e60

080046f4 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7b5b      	ldrb	r3, [r3, #13]
 8004700:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7a5a      	ldrb	r2, [r3, #9]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	795a      	ldrb	r2, [r3, #5]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	785a      	ldrb	r2, [r3, #1]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	789b      	ldrb	r3, [r3, #2]
 8004724:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7a9a      	ldrb	r2, [r3, #10]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	799b      	ldrb	r3, [r3, #6]
 8004738:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7b9a      	ldrb	r2, [r3, #14]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	78db      	ldrb	r3, [r3, #3]
 800474c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	79da      	ldrb	r2, [r3, #7]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7ada      	ldrb	r2, [r3, #11]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7bda      	ldrb	r2, [r3, #15]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	73da      	strb	r2, [r3, #15]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	2000      	movs	r0, #0
 800478a:	f7ff fab7 	bl	8003cfc <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff faee 	bl	8003d74 <SubBytes>
    ShiftRows(state);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fb1b 	bl	8003dd4 <ShiftRows>
    if (round == Nr) {
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b0a      	cmp	r3, #10
 80047a2:	d00c      	beq.n	80047be <Cipher+0x48>
      break;
    }
    MixColumns(state);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fb73 	bl	8003e90 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff faa3 	bl	8003cfc <AddRoundKey>
  for (round = 1; ; ++round)
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	3301      	adds	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 80047bc:	e7e9      	b.n	8004792 <Cipher+0x1c>
      break;
 80047be:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	200a      	movs	r0, #10
 80047c6:	f7ff fa99 	bl	8003cfc <AddRoundKey>
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	200a      	movs	r0, #10
 80047e6:	f7ff fa89 	bl	8003cfc <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 80047ea:	2309      	movs	r3, #9
 80047ec:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff80 	bl	80046f4 <InvShiftRows>
    InvSubBytes(state);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff4d 	bl	8004694 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fa7b 	bl	8003cfc <AddRoundKey>
    if (round == 0) {
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fbf4 	bl	8003ffa <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	3b01      	subs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8004818:	e7e9      	b.n	80047ee <InvCipher+0x1c>
      break;
 800481a:	bf00      	nop
  }

}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e010      	b.n	8004856 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	7819      	ldrb	r1, [r3, #0]
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4403      	add	r3, r0
 800484a:	404a      	eors	r2, r1
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	3301      	adds	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b0f      	cmp	r3, #15
 800485a:	d9eb      	bls.n	8004834 <XorWithIv+0x10>
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8004874:	2300      	movs	r3, #0
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	e022      	b.n	80048c0 <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f107 0414 	add.w	r4, r7, #20
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4619      	mov	r1, r3
 800488e:	68b8      	ldr	r0, [r7, #8]
 8004890:	f7ff ff9f 	bl	80047d2 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	33b0      	adds	r3, #176	; 0xb0
 8004898:	4619      	mov	r1, r3
 800489a:	68b8      	ldr	r0, [r7, #8]
 800489c:	f7ff ffc2 	bl	8004824 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	33b0      	adds	r3, #176	; 0xb0
 80048a4:	461d      	mov	r5, r3
 80048a6:	f107 0414 	add.w	r4, r7, #20
 80048aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ac:	6028      	str	r0, [r5, #0]
 80048ae:	6069      	str	r1, [r5, #4]
 80048b0:	60aa      	str	r2, [r5, #8]
 80048b2:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3310      	adds	r3, #16
 80048b8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3310      	adds	r3, #16
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3d8      	bcc.n	800487a <AES_CBC_decrypt_buffer+0x12>
  }

}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bdb0      	pop	{r4, r5, r7, pc}

080048d2 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80048d2:	b590      	push	{r4, r7, lr}
 80048d4:	b08b      	sub	sp, #44	; 0x2c
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	2310      	movs	r3, #16
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	e04e      	b.n	8004986 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d136      	bne.n	800495c <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	33b0      	adds	r3, #176	; 0xb0
 80048f2:	f107 0410 	add.w	r4, r7, #16
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f107 0310 	add.w	r3, r7, #16
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff34 	bl	8004776 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800490e:	230f      	movs	r3, #15
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	e01e      	b.n	8004952 <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	4413      	add	r3, r2
 800491a:	33b0      	adds	r3, #176	; 0xb0
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2bff      	cmp	r3, #255	; 0xff
 8004920:	d106      	bne.n	8004930 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	4413      	add	r3, r2
 8004928:	33b0      	adds	r3, #176	; 0xb0
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
          continue;
 800492e:	e00d      	b.n	800494c <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	4413      	add	r3, r2
 8004936:	33b0      	adds	r3, #176	; 0xb0
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	4413      	add	r3, r2
 8004944:	33b0      	adds	r3, #176	; 0xb0
 8004946:	460a      	mov	r2, r1
 8004948:	701a      	strb	r2, [r3, #0]
        break;
 800494a:	e005      	b.n	8004958 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	3b01      	subs	r3, #1
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	2b00      	cmp	r3, #0
 8004956:	dadd      	bge.n	8004914 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	4413      	add	r3, r2
 8004962:	7819      	ldrb	r1, [r3, #0]
 8004964:	f107 0210 	add.w	r2, r7, #16
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	4413      	add	r3, r2
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68b8      	ldr	r0, [r7, #8]
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	4403      	add	r3, r0
 8004974:	404a      	eors	r2, r1
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	3301      	adds	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	3301      	adds	r3, #1
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3ac      	bcc.n	80048e8 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	372c      	adds	r7, #44	; 0x2c
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}

08004998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800499c:	f000 fd5a 	bl	8005454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049a0:	f000 f8a2 	bl	8004ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049a4:	f000 fa4c 	bl	8004e40 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 80049a8:	f000 f914 	bl	8004bd4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80049ac:	f000 f97e 	bl	8004cac <MX_TIM1_Init>
  MX_I2C1_Init();
 80049b0:	f000 f8e2 	bl	8004b78 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80049b4:	f000 fa1a 	bl	8004dec <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80049b8:	f000 f942 	bl	8004c40 <MX_SPI2_Init>
  MX_TIM2_Init();
 80049bc:	f000 f9c8 	bl	8004d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module 1
  SX1278_hw_1.dio0.port = DIO_GPIO_Port;
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <main+0x128>)
 80049c2:	4a40      	ldr	r2, [pc, #256]	; (8004ac4 <main+0x12c>)
 80049c4:	60da      	str	r2, [r3, #12]
  SX1278_hw_1.dio0.pin = DIO_Pin;
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <main+0x128>)
 80049c8:	2202      	movs	r2, #2
 80049ca:	609a      	str	r2, [r3, #8]
  SX1278_hw_1.nss.port = NSS_GPIO_Port;
 80049cc:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <main+0x128>)
 80049ce:	4a3e      	ldr	r2, [pc, #248]	; (8004ac8 <main+0x130>)
 80049d0:	615a      	str	r2, [r3, #20]
  SX1278_hw_1.nss.pin = NSS_Pin;
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <main+0x128>)
 80049d4:	2210      	movs	r2, #16
 80049d6:	611a      	str	r2, [r3, #16]
  SX1278_hw_1.reset.port = RESET_GPIO_Port;
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <main+0x128>)
 80049da:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <main+0x12c>)
 80049dc:	605a      	str	r2, [r3, #4]
  SX1278_hw_1.reset.pin = RESET_Pin;
 80049de:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <main+0x128>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
  SX1278_hw_1.spi = &hspi1;
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <main+0x128>)
 80049e6:	4a39      	ldr	r2, [pc, #228]	; (8004acc <main+0x134>)
 80049e8:	619a      	str	r2, [r3, #24]
  SX1278_1.hw = &SX1278_hw_1;
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <main+0x138>)
 80049ec:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <main+0x128>)
 80049ee:	601a      	str	r2, [r3, #0]

  //initialize LoRa module 2
  SX1278_hw_2.dio0.port = DIO_2_GPIO_Port;
 80049f0:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <main+0x13c>)
 80049f2:	4a34      	ldr	r2, [pc, #208]	; (8004ac4 <main+0x12c>)
 80049f4:	60da      	str	r2, [r3, #12]
  SX1278_hw_2.dio0.pin = DIO_2_Pin;
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <main+0x13c>)
 80049f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fc:	609a      	str	r2, [r3, #8]
  SX1278_hw_2.nss.port = SPI2_NSS_GPIO_Port;
 80049fe:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <main+0x13c>)
 8004a00:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <main+0x12c>)
 8004a02:	615a      	str	r2, [r3, #20]
  SX1278_hw_2.nss.pin = SPI2_NSS_Pin;
 8004a04:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <main+0x13c>)
 8004a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a0a:	611a      	str	r2, [r3, #16]
  SX1278_hw_2.reset.port = RESET2_GPIO_Port;
 8004a0c:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <main+0x13c>)
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <main+0x12c>)
 8004a10:	605a      	str	r2, [r3, #4]
  SX1278_hw_2.reset.pin = RESET2_Pin;
 8004a12:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <main+0x13c>)
 8004a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a18:	601a      	str	r2, [r3, #0]
  SX1278_hw_2.spi = &hspi2;
 8004a1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ad4 <main+0x13c>)
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ad8 <main+0x140>)
 8004a1e:	619a      	str	r2, [r3, #24]
  SX1278_2.hw = &SX1278_hw_2;
 8004a20:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <main+0x144>)
 8004a22:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <main+0x13c>)
 8004a24:	601a      	str	r2, [r3, #0]

  /*GW Config Init first to get the config */
  GW_State_Init();
 8004a26:	f7fc feed 	bl	8001804 <GW_State_Init>
  GW_Config_Init();
 8004a2a:	f7fc fe89 	bl	8001740 <GW_Config_Init>
  Encrypt_Address_Read_Init();
 8004a2e:	f7fb ff8d 	bl	800094c <Encrypt_Address_Read_Init>
  UI_Init();
 8004a32:	f7fe fc51 	bl	80032d8 <UI_Init>
  ReceiveFWUpdate_Init();
 8004a36:	f7fd f8b7 	bl	8001ba8 <ReceiveFWUpdate_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State For Flashing
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8004a3a:	4829      	ldr	r0, [pc, #164]	; (8004ae0 <main+0x148>)
 8004a3c:	f7fc ff46 	bl	80018cc <Rte_SystemState_ReadData>
	  switch (SysTem_State)
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <main+0x148>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	2b07      	cmp	r3, #7
 8004a48:	d832      	bhi.n	8004ab0 <main+0x118>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <main+0xb8>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a77 	.word	0x08004a77
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a87 	.word	0x08004a87
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004aa1 	.word	0x08004aa1
 8004a6c:	08004aab 	.word	0x08004aab
	  {
//	  	case SYS_IDLE:
//
//	  		break;
		case SYS_NEW_UPDATE_REQ:
			ReceiveFWUpdate_MainFunc();
 8004a70:	f7fd f8fc 	bl	8001c6c <ReceiveFWUpdate_MainFunc>
			break;
 8004a74:	e01d      	b.n	8004ab2 <main+0x11a>
		case SYS_RECEIVE_UPDATE:
			//UI_Main_FLASHING();
			ReceiveFWUpdate_MainFunc();
 8004a76:	f7fd f8f9 	bl	8001c6c <ReceiveFWUpdate_MainFunc>
			break;
 8004a7a:	e01a      	b.n	8004ab2 <main+0x11a>
		case SYS_REQUEST_OTA:
			UI_Main_FLASHING();
 8004a7c:	f7fe fc56 	bl	800332c <UI_Main_FLASHING>
			Send_Start_OTA();
 8004a80:	f7fc fb64 	bl	800114c <Send_Start_OTA>
			break;
 8004a84:	e015      	b.n	8004ab2 <main+0x11a>
		case SYS_WAIT_ACCEPT_OTA:
			UI_Main_FLASHING();
 8004a86:	f7fe fc51 	bl	800332c <UI_Main_FLASHING>
			Wait_Start_OTA();
 8004a8a:	f7fc fb7f 	bl	800118c <Wait_Start_OTA>
			break;
 8004a8e:	e010      	b.n	8004ab2 <main+0x11a>
		case SYS_CONFIG_LORA:
			UI_Main_FLASHING();
 8004a90:	f7fe fc4c 	bl	800332c <UI_Main_FLASHING>
			FL_FlashLoRa_INIT();
 8004a94:	f7fc fba8 	bl	80011e8 <FL_FlashLoRa_INIT>
			break;
 8004a98:	e00b      	b.n	8004ab2 <main+0x11a>
		case SYS_ENCRYPT_FW:
			Encrypt_MainFunc();
 8004a9a:	f7fb ffb5 	bl	8000a08 <Encrypt_MainFunc>
			break;
 8004a9e:	e008      	b.n	8004ab2 <main+0x11a>
		case SYS_SEND_UPDATE:
			UI_Main_FLASHING();
 8004aa0:	f7fe fc44 	bl	800332c <UI_Main_FLASHING>
			FL_PacketLoRaSend_START();
 8004aa4:	f7fc fc7c 	bl	80013a0 <FL_PacketLoRaSend_START>
			break;
 8004aa8:	e003      	b.n	8004ab2 <main+0x11a>
		case SYS_DONE_UPDATE:
			FL_PacketLoRaDone_OTA();
 8004aaa:	f7fc fd7d 	bl	80015a8 <FL_PacketLoRaDone_OTA>
			break;
 8004aae:	e000      	b.n	8004ab2 <main+0x11a>
		default:
			break;
 8004ab0:	bf00      	nop
//		  Send_request(&SX1278_1, ADDRESS__MAC_NODE_3, buffer_req_2, GW_REQ_PARAMETER);
//		  RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x00);
//		  //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
//
//	  }
	  gl_flagRequest = 0x00;
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <main+0x14c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
		 //HAL_UART_Transmit(&huart2, &buffer_resp_2, 16, HAL_MAX_DELAY);
	  UI_Main_FLASHING();
 8004ab8:	f7fe fc38 	bl	800332c <UI_Main_FLASHING>
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8004abc:	e7bd      	b.n	8004a3a <main+0xa2>
 8004abe:	bf00      	nop
 8004ac0:	200015d0 	.word	0x200015d0
 8004ac4:	40010c00 	.word	0x40010c00
 8004ac8:	40010800 	.word	0x40010800
 8004acc:	20001448 	.word	0x20001448
 8004ad0:	200015ec 	.word	0x200015ec
 8004ad4:	20001700 	.word	0x20001700
 8004ad8:	200014a0 	.word	0x200014a0
 8004adc:	2000171c 	.word	0x2000171c
 8004ae0:	20001830 	.word	0x20001830
 8004ae4:	20001834 	.word	0x20001834

08004ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b090      	sub	sp, #64	; 0x40
 8004aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aee:	f107 0318 	add.w	r3, r7, #24
 8004af2:	2228      	movs	r2, #40	; 0x28
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 fbd8 	bl	80092ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	60da      	str	r2, [r3, #12]
 8004b08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b14:	2300      	movs	r3, #0
 8004b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b20:	2302      	movs	r3, #2
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004b2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b30:	f107 0318 	add.w	r3, r7, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f002 f869 	bl	8006c0c <HAL_RCC_OscConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8004b40:	f000 fa10 	bl	8004f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b44:	230f      	movs	r3, #15
 8004b46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f002 fad6 	bl	8007110 <HAL_RCC_ClockConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004b6a:	f000 f9fb 	bl	8004f64 <Error_Handler>
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3740      	adds	r7, #64	; 0x40
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b7e:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <MX_I2C1_Init+0x54>)
 8004b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b84:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <MX_I2C1_Init+0x58>)
 8004b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ba8:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bb4:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <MX_I2C1_Init+0x50>)
 8004bb6:	f001 fa5f 	bl	8006078 <HAL_I2C_Init>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004bc0:	f000 f9d0 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200013f4 	.word	0x200013f4
 8004bcc:	40005400 	.word	0x40005400
 8004bd0:	00061a80 	.word	0x00061a80

08004bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <MX_SPI1_Init+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c08:	2210      	movs	r2, #16
 8004c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c20:	220a      	movs	r2, #10
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c24:	4804      	ldr	r0, [pc, #16]	; (8004c38 <MX_SPI1_Init+0x64>)
 8004c26:	f002 fc01 	bl	800742c <HAL_SPI_Init>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004c30:	f000 f998 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20001448 	.word	0x20001448
 8004c3c:	40013000 	.word	0x40013000

08004c40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c74:	2210      	movs	r2, #16
 8004c76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c90:	4804      	ldr	r0, [pc, #16]	; (8004ca4 <MX_SPI2_Init+0x64>)
 8004c92:	f002 fbcb 	bl	800742c <HAL_SPI_Init>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004c9c:	f000 f962 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004ca0:	bf00      	nop
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200014a0 	.word	0x200014a0
 8004ca8:	40003800 	.word	0x40003800

08004cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <MX_TIM1_Init+0xa0>)
 8004cce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ce4:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cf0:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cf6:	4814      	ldr	r0, [pc, #80]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004cf8:	f002 ffc2 	bl	8007c80 <HAL_TIM_Base_Init>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004d02:	f000 f92f 	bl	8004f64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004d06:	2307      	movs	r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004d0e:	f107 030c 	add.w	r3, r7, #12
 8004d12:	4619      	mov	r1, r3
 8004d14:	480c      	ldr	r0, [pc, #48]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004d16:	f003 f9d1 	bl	80080bc <HAL_TIM_SlaveConfigSynchro>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004d20:	f000 f920 	bl	8004f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d24:	2300      	movs	r3, #0
 8004d26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4805      	ldr	r0, [pc, #20]	; (8004d48 <MX_TIM1_Init+0x9c>)
 8004d32:	f003 fbb3 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004d3c:	f000 f912 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d40:	bf00      	nop
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200014f8 	.word	0x200014f8
 8004d4c:	40012c00 	.word	0x40012c00

08004d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d64:	463b      	mov	r3, r7
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d6c:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8004d74:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d84:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d96:	4814      	ldr	r0, [pc, #80]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d98:	f002 ff72 	bl	8007c80 <HAL_TIM_Base_Init>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004da2:	f000 f8df 	bl	8004f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4619      	mov	r1, r3
 8004db2:	480d      	ldr	r0, [pc, #52]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004db4:	f003 f8bb 	bl	8007f2e <HAL_TIM_ConfigClockSource>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004dbe:	f000 f8d1 	bl	8004f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004dca:	463b      	mov	r3, r7
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4806      	ldr	r0, [pc, #24]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004dd0:	f003 fb64 	bl	800849c <HAL_TIMEx_MasterConfigSynchronization>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004dda:	f000 f8c3 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20001540 	.word	0x20001540

08004dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <MX_USART2_UART_Init+0x50>)
 8004df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e12:	220c      	movs	r2, #12
 8004e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e22:	4805      	ldr	r0, [pc, #20]	; (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e24:	f003 fbaa 	bl	800857c <HAL_UART_Init>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e2e:	f000 f899 	bl	8004f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20001588 	.word	0x20001588
 8004e3c:	40004400 	.word	0x40004400

08004e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e46:	f107 0310 	add.w	r3, r7, #16
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e5a:	f043 0310 	orr.w	r3, r3, #16
 8004e5e:	6193      	str	r3, [r2, #24]
 8004e60:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e6c:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4a37      	ldr	r2, [pc, #220]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	6193      	str	r3, [r2, #24]
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e84:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e8a:	f043 0304 	orr.w	r3, r3, #4
 8004e8e:	6193      	str	r3, [r2, #24]
 8004e90:	4b2f      	ldr	r3, [pc, #188]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004ea2:	f043 0308 	orr.w	r3, r3, #8
 8004ea6:	6193      	str	r3, [r2, #24]
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <MX_GPIO_Init+0x110>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eba:	4826      	ldr	r0, [pc, #152]	; (8004f54 <MX_GPIO_Init+0x114>)
 8004ebc:	f001 f8ab 	bl	8006016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2110      	movs	r1, #16
 8004ec4:	4824      	ldr	r0, [pc, #144]	; (8004f58 <MX_GPIO_Init+0x118>)
 8004ec6:	f001 f8a6 	bl	8006016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f641 3105 	movw	r1, #6917	; 0x1b05
 8004ed0:	4822      	ldr	r0, [pc, #136]	; (8004f5c <MX_GPIO_Init+0x11c>)
 8004ed2:	f001 f8a0 	bl	8006016 <HAL_GPIO_WritePin>
                          |RECEIIVE_Pin|SEND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	4819      	ldr	r0, [pc, #100]	; (8004f54 <MX_GPIO_Init+0x114>)
 8004ef0:	f000 fef6 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f00:	2302      	movs	r3, #2
 8004f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4813      	ldr	r0, [pc, #76]	; (8004f58 <MX_GPIO_Init+0x118>)
 8004f0c:	f000 fee8 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin MODE_Pin RESET2_Pin SPI2_NSS_Pin
                           RECEIIVE_Pin SEND_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 8004f10:	f641 3305 	movw	r3, #6917	; 0x1b05
 8004f14:	613b      	str	r3, [r7, #16]
                          |RECEIIVE_Pin|SEND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f16:	2301      	movs	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f22:	f107 0310 	add.w	r3, r7, #16
 8004f26:	4619      	mov	r1, r3
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <MX_GPIO_Init+0x11c>)
 8004f2a:	f000 fed9 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO_Pin DIO_2_Pin */
  GPIO_InitStruct.Pin = DIO_Pin|DIO_2_Pin;
 8004f2e:	f240 4302 	movw	r3, #1026	; 0x402
 8004f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <MX_GPIO_Init+0x120>)
 8004f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4619      	mov	r1, r3
 8004f42:	4806      	ldr	r0, [pc, #24]	; (8004f5c <MX_GPIO_Init+0x11c>)
 8004f44:	f000 fecc 	bl	8005ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004f48:	bf00      	nop
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40010800 	.word	0x40010800
 8004f5c:	40010c00 	.word	0x40010c00
 8004f60:	10110000 	.word	0x10110000

08004f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f68:	b672      	cpsid	i
}
 8004f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f6c:	e7fe      	b.n	8004f6c <Error_Handler+0x8>

08004f6e <copy_Array>:
 *      Author: quang
 */

#include "operation.h"

void copy_Array(uint8* a , uint8* b , uint32 size){
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
	// Start Position is the 4th of a
	uint8* prtA = a + 16 ;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8004f80:	2300      	movs	r3, #0
 8004f82:	74fb      	strb	r3, [r7, #19]
 8004f84:	e00a      	b.n	8004f9c <copy_Array+0x2e>
		*(prtA++) = *(b++);
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	1c53      	adds	r3, r2, #1
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	6179      	str	r1, [r7, #20]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	74fb      	strb	r3, [r7, #19]
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d8f0      	bhi.n	8004f86 <copy_Array+0x18>
	}
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <copy_Array_BL>:
void copy_Array_BL(uint8* a , uint8* b , uint8 init_val, uint32 size){
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	71fb      	strb	r3, [r7, #7]
	uint8* prtB = b + init_val ;
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74fb      	strb	r3, [r7, #19]
 8004fcc:	e00a      	b.n	8004fe4 <copy_Array_BL+0x34>
		*(a++) = *(prtB++);
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	1c53      	adds	r3, r2, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1c59      	adds	r1, r3, #1
 8004fd8:	60f9      	str	r1, [r7, #12]
 8004fda:	7812      	ldrb	r2, [r2, #0]
 8004fdc:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	74fb      	strb	r3, [r7, #19]
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d8f0      	bhi.n	8004fce <copy_Array_BL+0x1e>
	}
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <clearDataBuffer>:


Return_Operation_t clearDataBuffer(uint8 *buffer , uint32 buffer_size){
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	// Clear buffer size
	memset(buffer, 0x00, buffer_size);
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	2100      	movs	r1, #0
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f004 f950 	bl	80092ac <memset>
	return DONE;
 800500c:	2301      	movs	r3, #1
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <HAL_MspInit+0x5c>)
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	4a14      	ldr	r2, [pc, #80]	; (8005074 <HAL_MspInit+0x5c>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6193      	str	r3, [r2, #24]
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <HAL_MspInit+0x5c>)
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <HAL_MspInit+0x5c>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <HAL_MspInit+0x5c>)
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	61d3      	str	r3, [r2, #28]
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_MspInit+0x5c>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_MspInit+0x60>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_MspInit+0x60>)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	40021000 	.word	0x40021000
 8005078:	40010000 	.word	0x40010000

0800507c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005084:	f107 0310 	add.w	r3, r7, #16
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <HAL_I2C_MspInit+0x70>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d123      	bne.n	80050e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 80050a2:	f043 0308 	orr.w	r3, r3, #8
 80050a6:	6193      	str	r3, [r2, #24]
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050b4:	23c0      	movs	r3, #192	; 0xc0
 80050b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050b8:	2312      	movs	r3, #18
 80050ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050bc:	2303      	movs	r3, #3
 80050be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	4619      	mov	r1, r3
 80050c6:	480b      	ldr	r0, [pc, #44]	; (80050f4 <HAL_I2C_MspInit+0x78>)
 80050c8:	f000 fe0a 	bl	8005ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 80050d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d6:	61d3      	str	r3, [r2, #28]
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_I2C_MspInit+0x74>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050e4:	bf00      	nop
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40005400 	.word	0x40005400
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40010c00 	.word	0x40010c00

080050f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 0318 	add.w	r3, r7, #24
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <HAL_SPI_MspInit+0xf8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d130      	bne.n	800517a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005118:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 800511e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005122:	6193      	str	r3, [r2, #24]
 8005124:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005130:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	4a2f      	ldr	r2, [pc, #188]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6193      	str	r3, [r2, #24]
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005148:	23a0      	movs	r3, #160	; 0xa0
 800514a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514c:	2302      	movs	r3, #2
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005150:	2303      	movs	r3, #3
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005154:	f107 0318 	add.w	r3, r7, #24
 8005158:	4619      	mov	r1, r3
 800515a:	4827      	ldr	r0, [pc, #156]	; (80051f8 <HAL_SPI_MspInit+0x100>)
 800515c:	f000 fdc0 	bl	8005ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516c:	f107 0318 	add.w	r3, r7, #24
 8005170:	4619      	mov	r1, r3
 8005172:	4821      	ldr	r0, [pc, #132]	; (80051f8 <HAL_SPI_MspInit+0x100>)
 8005174:	f000 fdb4 	bl	8005ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005178:	e036      	b.n	80051e8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <HAL_SPI_MspInit+0x104>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d131      	bne.n	80051e8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 800518a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800518e:	61d3      	str	r3, [r2, #28]
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800519c:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 80051a2:	f043 0308 	orr.w	r3, r3, #8
 80051a6:	6193      	str	r3, [r2, #24]
 80051a8:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_SPI_MspInit+0xfc>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80051b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80051b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ba:	2302      	movs	r3, #2
 80051bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051be:	2303      	movs	r3, #3
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c2:	f107 0318 	add.w	r3, r7, #24
 80051c6:	4619      	mov	r1, r3
 80051c8:	480d      	ldr	r0, [pc, #52]	; (8005200 <HAL_SPI_MspInit+0x108>)
 80051ca:	f000 fd89 	bl	8005ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80051ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051dc:	f107 0318 	add.w	r3, r7, #24
 80051e0:	4619      	mov	r1, r3
 80051e2:	4807      	ldr	r0, [pc, #28]	; (8005200 <HAL_SPI_MspInit+0x108>)
 80051e4:	f000 fd7c 	bl	8005ce0 <HAL_GPIO_Init>
}
 80051e8:	bf00      	nop
 80051ea:	3728      	adds	r7, #40	; 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40013000 	.word	0x40013000
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40010800 	.word	0x40010800
 80051fc:	40003800 	.word	0x40003800
 8005200:	40010c00 	.word	0x40010c00

08005204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_TIM_Base_MspInit+0x68>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10c      	bne.n	8005230 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005216:	4b16      	ldr	r3, [pc, #88]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 800521c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005220:	6193      	str	r3, [r2, #24]
 8005222:	4b13      	ldr	r3, [pc, #76]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800522e:	e018      	b.n	8005262 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d113      	bne.n	8005262 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	61d3      	str	r3, [r2, #28]
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_TIM_Base_MspInit+0x6c>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8005252:	2200      	movs	r2, #0
 8005254:	2102      	movs	r1, #2
 8005256:	201c      	movs	r0, #28
 8005258:	f000 fa59 	bl	800570e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800525c:	201c      	movs	r0, #28
 800525e:	f000 fa72 	bl	8005746 <HAL_NVIC_EnableIRQ>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40021000 	.word	0x40021000

08005274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	f107 0310 	add.w	r3, r7, #16
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_UART_MspInit+0x98>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d137      	bne.n	8005304 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_UART_MspInit+0x9c>)
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_UART_MspInit+0x9c>)
 800529a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800529e:	61d3      	str	r3, [r2, #28]
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_UART_MspInit+0x9c>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_UART_MspInit+0x9c>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_UART_MspInit+0x9c>)
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	6193      	str	r3, [r2, #24]
 80052b8:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_UART_MspInit+0x9c>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052c4:	2304      	movs	r3, #4
 80052c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052cc:	2303      	movs	r3, #3
 80052ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d0:	f107 0310 	add.w	r3, r7, #16
 80052d4:	4619      	mov	r1, r3
 80052d6:	480f      	ldr	r0, [pc, #60]	; (8005314 <HAL_UART_MspInit+0xa0>)
 80052d8:	f000 fd02 	bl	8005ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052dc:	2308      	movs	r3, #8
 80052de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	4619      	mov	r1, r3
 80052ee:	4809      	ldr	r0, [pc, #36]	; (8005314 <HAL_UART_MspInit+0xa0>)
 80052f0:	f000 fcf6 	bl	8005ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	2026      	movs	r0, #38	; 0x26
 80052fa:	f000 fa08 	bl	800570e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052fe:	2026      	movs	r0, #38	; 0x26
 8005300:	f000 fa21 	bl	8005746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005304:	bf00      	nop
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40004400 	.word	0x40004400
 8005310:	40021000 	.word	0x40021000
 8005314:	40010800 	.word	0x40010800

08005318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800531c:	e7fe      	b.n	800531c <NMI_Handler+0x4>

0800531e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005322:	e7fe      	b.n	8005322 <HardFault_Handler+0x4>

08005324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <MemManage_Handler+0x4>

0800532a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532e:	e7fe      	b.n	800532e <BusFault_Handler+0x4>

08005330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <UsageFault_Handler+0x4>

08005336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800535e:	f000 f8bf 	bl	80054e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <TIM2_IRQHandler+0x10>)
 800536e:	f002 fcd6 	bl	8007d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20001540 	.word	0x20001540

0800537c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <USART2_IRQHandler+0x10>)
 8005382:	f003 f9f3 	bl	800876c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20001588 	.word	0x20001588

08005390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <_sbrk+0x5c>)
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <_sbrk+0x60>)
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <_sbrk+0x64>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053ac:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <_sbrk+0x64>)
 80053ae:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <_sbrk+0x68>)
 80053b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <_sbrk+0x64>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d207      	bcs.n	80053d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053c0:	f003 ff7c 	bl	80092bc <__errno>
 80053c4:	4603      	mov	r3, r0
 80053c6:	220c      	movs	r2, #12
 80053c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	e009      	b.n	80053e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053d0:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <_sbrk+0x64>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <_sbrk+0x64>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <_sbrk+0x64>)
 80053e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20005000 	.word	0x20005000
 80053f0:	00000400 	.word	0x00000400
 80053f4:	20001838 	.word	0x20001838
 80053f8:	200019a8 	.word	0x200019a8

080053fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005408:	f7ff fff8 	bl	80053fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800540c:	480b      	ldr	r0, [pc, #44]	; (800543c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800540e:	490c      	ldr	r1, [pc, #48]	; (8005440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005414:	e002      	b.n	800541c <LoopCopyDataInit>

08005416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800541a:	3304      	adds	r3, #4

0800541c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800541c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800541e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005420:	d3f9      	bcc.n	8005416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005424:	4c09      	ldr	r4, [pc, #36]	; (800544c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005428:	e001      	b.n	800542e <LoopFillZerobss>

0800542a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800542a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800542c:	3204      	adds	r2, #4

0800542e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800542e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005430:	d3fb      	bcc.n	800542a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005432:	f003 ff49 	bl	80092c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005436:	f7ff faaf 	bl	8004998 <main>
  bx lr
 800543a:	4770      	bx	lr
  ldr r0, =_sdata
 800543c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005440:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005444:	0800b4a4 	.word	0x0800b4a4
  ldr r2, =_sbss
 8005448:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800544c:	200019a8 	.word	0x200019a8

08005450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005450:	e7fe      	b.n	8005450 <ADC1_2_IRQHandler>
	...

08005454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_Init+0x28>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a07      	ldr	r2, [pc, #28]	; (800547c <HAL_Init+0x28>)
 800545e:	f043 0310 	orr.w	r3, r3, #16
 8005462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005464:	2003      	movs	r0, #3
 8005466:	f000 f947 	bl	80056f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800546a:	200f      	movs	r0, #15
 800546c:	f000 f808 	bl	8005480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005470:	f7ff fdd2 	bl	8005018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000

08005480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_InitTick+0x54>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_InitTick+0x58>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005496:	fbb3 f3f1 	udiv	r3, r3, r1
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f95f 	bl	8005762 <HAL_SYSTICK_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00e      	b.n	80054cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d80a      	bhi.n	80054ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054b4:	2200      	movs	r2, #0
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	f000 f927 	bl	800570e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c0:	4a06      	ldr	r2, [pc, #24]	; (80054dc <HAL_InitTick+0x5c>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000074 	.word	0x20000074
 80054d8:	2000007c 	.word	0x2000007c
 80054dc:	20000078 	.word	0x20000078

080054e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_IncTick+0x1c>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_IncTick+0x20>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	4a03      	ldr	r2, [pc, #12]	; (8005500 <HAL_IncTick+0x20>)
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	2000007c 	.word	0x2000007c
 8005500:	2000183c 	.word	0x2000183c

08005504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return uwTick;
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <HAL_GetTick+0x10>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	2000183c 	.word	0x2000183c

08005518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005520:	f7ff fff0 	bl	8005504 <HAL_GetTick>
 8005524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d005      	beq.n	800553e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_Delay+0x44>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800553e:	bf00      	nop
 8005540:	f7ff ffe0 	bl	8005504 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d8f7      	bhi.n	8005540 <HAL_Delay+0x28>
  {
  }
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	2000007c 	.word	0x2000007c

08005560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800557c:	4013      	ands	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	60d3      	str	r3, [r2, #12]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0a1b      	lsrs	r3, r3, #8
 80055b2:	f003 0307 	and.w	r3, r3, #7
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db0b      	blt.n	80055ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	4906      	ldr	r1, [pc, #24]	; (80055f8 <__NVIC_EnableIRQ+0x34>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2001      	movs	r0, #1
 80055e6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	e000e100 	.word	0xe000e100

080055fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db0a      	blt.n	8005626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	490c      	ldr	r1, [pc, #48]	; (8005648 <__NVIC_SetPriority+0x4c>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005624:	e00a      	b.n	800563c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4908      	ldr	r1, [pc, #32]	; (800564c <__NVIC_SetPriority+0x50>)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	3b04      	subs	r3, #4
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	440b      	add	r3, r1
 800563a:	761a      	strb	r2, [r3, #24]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f1c3 0307 	rsb	r3, r3, #7
 800566a:	2b04      	cmp	r3, #4
 800566c:	bf28      	it	cs
 800566e:	2304      	movcs	r3, #4
 8005670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3304      	adds	r3, #4
 8005676:	2b06      	cmp	r3, #6
 8005678:	d902      	bls.n	8005680 <NVIC_EncodePriority+0x30>
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3b03      	subs	r3, #3
 800567e:	e000      	b.n	8005682 <NVIC_EncodePriority+0x32>
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005684:	f04f 32ff 	mov.w	r2, #4294967295
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43da      	mvns	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	401a      	ands	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005698:	f04f 31ff 	mov.w	r1, #4294967295
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	43d9      	mvns	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	4313      	orrs	r3, r2
         );
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c4:	d301      	bcc.n	80056ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056c6:	2301      	movs	r3, #1
 80056c8:	e00f      	b.n	80056ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <SysTick_Config+0x40>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056d2:	210f      	movs	r1, #15
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	f7ff ff90 	bl	80055fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <SysTick_Config+0x40>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <SysTick_Config+0x40>)
 80056e4:	2207      	movs	r2, #7
 80056e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	e000e010 	.word	0xe000e010

080056f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff2d 	bl	8005560 <__NVIC_SetPriorityGrouping>
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005720:	f7ff ff42 	bl	80055a8 <__NVIC_GetPriorityGrouping>
 8005724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f7ff ff90 	bl	8005650 <NVIC_EncodePriority>
 8005730:	4602      	mov	r2, r0
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff5f 	bl	80055fc <__NVIC_SetPriority>
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ff35 	bl	80055c4 <__NVIC_EnableIRQ>
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff ffa2 	bl	80056b4 <SysTick_Config>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d008      	beq.n	80057a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2204      	movs	r2, #4
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e020      	b.n	80057e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 020e 	bic.w	r2, r2, #14
 80057b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d005      	beq.n	8005814 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2204      	movs	r2, #4
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e051      	b.n	80058b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 020e 	bic.w	r2, r2, #14
 8005822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a22      	ldr	r2, [pc, #136]	; (80058c4 <HAL_DMA_Abort_IT+0xd4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d029      	beq.n	8005892 <HAL_DMA_Abort_IT+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <HAL_DMA_Abort_IT+0xd8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_Abort_IT+0x9e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <HAL_DMA_Abort_IT+0xdc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01a      	beq.n	8005888 <HAL_DMA_Abort_IT+0x98>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <HAL_DMA_Abort_IT+0xe0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d012      	beq.n	8005882 <HAL_DMA_Abort_IT+0x92>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_DMA_Abort_IT+0xe4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00a      	beq.n	800587c <HAL_DMA_Abort_IT+0x8c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <HAL_DMA_Abort_IT+0xe8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d102      	bne.n	8005876 <HAL_DMA_Abort_IT+0x86>
 8005870:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005874:	e00e      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 8005876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800587a:	e00b      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 800587c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005880:	e008      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 8005882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005886:	e005      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 8005888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588c:	e002      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 800588e:	2310      	movs	r3, #16
 8005890:	e000      	b.n	8005894 <HAL_DMA_Abort_IT+0xa4>
 8005892:	2301      	movs	r3, #1
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_DMA_Abort_IT+0xec>)
 8005896:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
    } 
  }
  return status;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40020008 	.word	0x40020008
 80058c8:	4002001c 	.word	0x4002001c
 80058cc:	40020030 	.word	0x40020030
 80058d0:	40020044 	.word	0x40020044
 80058d4:	40020058 	.word	0x40020058
 80058d8:	4002006c 	.word	0x4002006c
 80058dc:	40020000 	.word	0x40020000

080058e0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_FLASH_Program+0xd8>)
 80058fc:	7e1b      	ldrb	r3, [r3, #24]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_FLASH_Program+0x26>
 8005902:	2302      	movs	r3, #2
 8005904:	e054      	b.n	80059b0 <HAL_FLASH_Program+0xd0>
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_FLASH_Program+0xd8>)
 8005908:	2201      	movs	r2, #1
 800590a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800590c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005910:	f000 f8a8 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d144      	bne.n	80059a8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d102      	bne.n	800592a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005924:	2301      	movs	r3, #1
 8005926:	757b      	strb	r3, [r7, #21]
 8005928:	e007      	b.n	800593a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d102      	bne.n	8005936 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005930:	2302      	movs	r3, #2
 8005932:	757b      	strb	r3, [r7, #21]
 8005934:	e001      	b.n	800593a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005936:	2304      	movs	r3, #4
 8005938:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800593a:	2300      	movs	r3, #0
 800593c:	75bb      	strb	r3, [r7, #22]
 800593e:	e02d      	b.n	800599c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	005a      	lsls	r2, r3, #1
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	eb02 0c03 	add.w	ip, r2, r3
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	0119      	lsls	r1, r3, #4
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	f1c1 0620 	rsb	r6, r1, #32
 8005956:	f1a1 0020 	sub.w	r0, r1, #32
 800595a:	fa22 f401 	lsr.w	r4, r2, r1
 800595e:	fa03 f606 	lsl.w	r6, r3, r6
 8005962:	4334      	orrs	r4, r6
 8005964:	fa23 f000 	lsr.w	r0, r3, r0
 8005968:	4304      	orrs	r4, r0
 800596a:	fa23 f501 	lsr.w	r5, r3, r1
 800596e:	b2a3      	uxth	r3, r4
 8005970:	4619      	mov	r1, r3
 8005972:	4660      	mov	r0, ip
 8005974:	f000 f85a 	bl	8005a2c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005978:	f24c 3050 	movw	r0, #50000	; 0xc350
 800597c:	f000 f872 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_FLASH_Program+0xdc>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_FLASH_Program+0xdc>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005996:	7dbb      	ldrb	r3, [r7, #22]
 8005998:	3301      	adds	r3, #1
 800599a:	75bb      	strb	r3, [r7, #22]
 800599c:	7dba      	ldrb	r2, [r7, #22]
 800599e:	7d7b      	ldrb	r3, [r7, #21]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3cd      	bcc.n	8005940 <HAL_FLASH_Program+0x60>
 80059a4:	e000      	b.n	80059a8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80059a6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_FLASH_Program+0xd8>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	761a      	strb	r2, [r3, #24]

  return status;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	20001840 	.word	0x20001840
 80059bc:	40022000 	.word	0x40022000

080059c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059d8:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <HAL_FLASH_Unlock+0x44>)
 80059da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059de:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <HAL_FLASH_Unlock+0x48>)
 80059e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80059f2:	79fb      	ldrb	r3, [r7, #7]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40022000 	.word	0x40022000
 8005a04:	45670123 	.word	0x45670123
 8005a08:	cdef89ab 	.word	0xcdef89ab

08005a0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_FLASH_Lock+0x1c>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <HAL_FLASH_Lock+0x1c>)
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40022000 	.word	0x40022000

08005a2c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <FLASH_Program_HalfWord+0x30>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <FLASH_Program_HalfWord+0x34>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <FLASH_Program_HalfWord+0x34>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	887a      	ldrh	r2, [r7, #2]
 8005a4e:	801a      	strh	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20001840 	.word	0x20001840
 8005a60:	40022000 	.word	0x40022000

08005a64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005a6c:	f7ff fd4a 	bl	8005504 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005a72:	e010      	b.n	8005a96 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d00c      	beq.n	8005a96 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <FLASH_WaitForLastOperation+0x2e>
 8005a82:	f7ff fd3f 	bl	8005504 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d201      	bcs.n	8005a96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e025      	b.n	8005ae2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e8      	bne.n	8005a74 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005acc:	4b07      	ldr	r3, [pc, #28]	; (8005aec <FLASH_WaitForLastOperation+0x88>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005ad8:	f000 f80a 	bl	8005af0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40022000 	.word	0x40022000

08005af0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005afa:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005b06:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f043 0310 	orr.w	r3, r3, #16
 8005b18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b30:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <FLASH_SetErrorCode+0x9c>)
 8005b50:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f240 1201 	movw	r2, #257	; 0x101
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d106      	bne.n	8005b76 <FLASH_SetErrorCode+0x86>
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	4a06      	ldr	r2, [pc, #24]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	61d3      	str	r3, [r2, #28]
}  
 8005b74:	e002      	b.n	8005b7c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005b76:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <FLASH_SetErrorCode+0x98>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60d3      	str	r3, [r2, #12]
}  
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40022000 	.word	0x40022000
 8005b8c:	20001840 	.word	0x20001840

08005b90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_FLASHEx_Erase+0xd0>)
 8005ba4:	7e1b      	ldrb	r3, [r3, #24]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_FLASHEx_Erase+0x1e>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e053      	b.n	8005c56 <HAL_FLASHEx_Erase+0xc6>
 8005bae:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <HAL_FLASHEx_Erase+0xd0>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d116      	bne.n	8005bea <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005bbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bc0:	f7ff ff50 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d141      	bne.n	8005c4e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f000 f84c 	bl	8005c68 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bd4:	f7ff ff46 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005bdc:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <HAL_FLASHEx_Erase+0xd4>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <HAL_FLASHEx_Erase+0xd4>)
 8005be2:	f023 0304 	bic.w	r3, r3, #4
 8005be6:	6113      	str	r3, [r2, #16]
 8005be8:	e031      	b.n	8005c4e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005bea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bee:	f7ff ff39 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d12a      	bne.n	8005c4e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	e019      	b.n	8005c3c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005c08:	68b8      	ldr	r0, [r7, #8]
 8005c0a:	f000 f849 	bl	8005ca0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c12:	f7ff ff27 	bl	8005a64 <FLASH_WaitForLastOperation>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_FLASHEx_Erase+0xd4>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <HAL_FLASHEx_Erase+0xd4>)
 8005c20:	f023 0302 	bic.w	r3, r3, #2
 8005c24:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	601a      	str	r2, [r3, #0]
            break;
 8005c32:	e00c      	b.n	8005c4e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	029a      	lsls	r2, r3, #10
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4413      	add	r3, r2
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3dc      	bcc.n	8005c08 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <HAL_FLASHEx_Erase+0xd0>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	761a      	strb	r2, [r3, #24]

  return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20001840 	.word	0x20001840
 8005c64:	40022000 	.word	0x40022000

08005c68 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <FLASH_MassErase+0x30>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <FLASH_MassErase+0x34>)
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <FLASH_MassErase+0x34>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <FLASH_MassErase+0x34>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <FLASH_MassErase+0x34>)
 8005c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	20001840 	.word	0x20001840
 8005c9c:	40022000 	.word	0x40022000

08005ca0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <FLASH_PageErase+0x38>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <FLASH_PageErase+0x3c>)
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <FLASH_PageErase+0x3c>)
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005cba:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <FLASH_PageErase+0x3c>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <FLASH_PageErase+0x3c>)
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <FLASH_PageErase+0x3c>)
 8005cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20001840 	.word	0x20001840
 8005cdc:	40022000 	.word	0x40022000

08005ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b08b      	sub	sp, #44	; 0x2c
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf2:	e169      	b.n	8005fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	f040 8158 	bne.w	8005fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4a9a      	ldr	r2, [pc, #616]	; (8005f80 <HAL_GPIO_Init+0x2a0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d05e      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
 8005d1c:	4a98      	ldr	r2, [pc, #608]	; (8005f80 <HAL_GPIO_Init+0x2a0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d875      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d22:	4a98      	ldr	r2, [pc, #608]	; (8005f84 <HAL_GPIO_Init+0x2a4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d058      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
 8005d28:	4a96      	ldr	r2, [pc, #600]	; (8005f84 <HAL_GPIO_Init+0x2a4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d86f      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d2e:	4a96      	ldr	r2, [pc, #600]	; (8005f88 <HAL_GPIO_Init+0x2a8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d052      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
 8005d34:	4a94      	ldr	r2, [pc, #592]	; (8005f88 <HAL_GPIO_Init+0x2a8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d869      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d3a:	4a94      	ldr	r2, [pc, #592]	; (8005f8c <HAL_GPIO_Init+0x2ac>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04c      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
 8005d40:	4a92      	ldr	r2, [pc, #584]	; (8005f8c <HAL_GPIO_Init+0x2ac>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d863      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d46:	4a92      	ldr	r2, [pc, #584]	; (8005f90 <HAL_GPIO_Init+0x2b0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d046      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
 8005d4c:	4a90      	ldr	r2, [pc, #576]	; (8005f90 <HAL_GPIO_Init+0x2b0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d85d      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d52:	2b12      	cmp	r3, #18
 8005d54:	d82a      	bhi.n	8005dac <HAL_GPIO_Init+0xcc>
 8005d56:	2b12      	cmp	r3, #18
 8005d58:	d859      	bhi.n	8005e0e <HAL_GPIO_Init+0x12e>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <HAL_GPIO_Init+0x80>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005ddb 	.word	0x08005ddb
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	08005dc7 	.word	0x08005dc7
 8005d6c:	08005e09 	.word	0x08005e09
 8005d70:	08005e0f 	.word	0x08005e0f
 8005d74:	08005e0f 	.word	0x08005e0f
 8005d78:	08005e0f 	.word	0x08005e0f
 8005d7c:	08005e0f 	.word	0x08005e0f
 8005d80:	08005e0f 	.word	0x08005e0f
 8005d84:	08005e0f 	.word	0x08005e0f
 8005d88:	08005e0f 	.word	0x08005e0f
 8005d8c:	08005e0f 	.word	0x08005e0f
 8005d90:	08005e0f 	.word	0x08005e0f
 8005d94:	08005e0f 	.word	0x08005e0f
 8005d98:	08005e0f 	.word	0x08005e0f
 8005d9c:	08005e0f 	.word	0x08005e0f
 8005da0:	08005e0f 	.word	0x08005e0f
 8005da4:	08005dbd 	.word	0x08005dbd
 8005da8:	08005dd1 	.word	0x08005dd1
 8005dac:	4a79      	ldr	r2, [pc, #484]	; (8005f94 <HAL_GPIO_Init+0x2b4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005db2:	e02c      	b.n	8005e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	623b      	str	r3, [r7, #32]
          break;
 8005dba:	e029      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	623b      	str	r3, [r7, #32]
          break;
 8005dc4:	e024      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	623b      	str	r3, [r7, #32]
          break;
 8005dce:	e01f      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	623b      	str	r3, [r7, #32]
          break;
 8005dd8:	e01a      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005de2:	2304      	movs	r3, #4
 8005de4:	623b      	str	r3, [r7, #32]
          break;
 8005de6:	e013      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d105      	bne.n	8005dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005df0:	2308      	movs	r3, #8
 8005df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	611a      	str	r2, [r3, #16]
          break;
 8005dfa:	e009      	b.n	8005e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	615a      	str	r2, [r3, #20]
          break;
 8005e06:	e003      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	623b      	str	r3, [r7, #32]
          break;
 8005e0c:	e000      	b.n	8005e10 <HAL_GPIO_Init+0x130>
          break;
 8005e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2bff      	cmp	r3, #255	; 0xff
 8005e14:	d801      	bhi.n	8005e1a <HAL_GPIO_Init+0x13a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	e001      	b.n	8005e1e <HAL_GPIO_Init+0x13e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d802      	bhi.n	8005e2c <HAL_GPIO_Init+0x14c>
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	e002      	b.n	8005e32 <HAL_GPIO_Init+0x152>
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	3b08      	subs	r3, #8
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	210f      	movs	r1, #15
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	6a39      	ldr	r1, [r7, #32]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80b1 	beq.w	8005fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e60:	4b4d      	ldr	r3, [pc, #308]	; (8005f98 <HAL_GPIO_Init+0x2b8>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	4a4c      	ldr	r2, [pc, #304]	; (8005f98 <HAL_GPIO_Init+0x2b8>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	6193      	str	r3, [r2, #24]
 8005e6c:	4b4a      	ldr	r3, [pc, #296]	; (8005f98 <HAL_GPIO_Init+0x2b8>)
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005e78:	4a48      	ldr	r2, [pc, #288]	; (8005f9c <HAL_GPIO_Init+0x2bc>)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	3302      	adds	r3, #2
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	220f      	movs	r2, #15
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a40      	ldr	r2, [pc, #256]	; (8005fa0 <HAL_GPIO_Init+0x2c0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_GPIO_Init+0x1ec>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a3f      	ldr	r2, [pc, #252]	; (8005fa4 <HAL_GPIO_Init+0x2c4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_GPIO_Init+0x1e8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <HAL_GPIO_Init+0x2c8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <HAL_GPIO_Init+0x1e4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a3d      	ldr	r2, [pc, #244]	; (8005fac <HAL_GPIO_Init+0x2cc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <HAL_GPIO_Init+0x1e0>
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e006      	b.n	8005ece <HAL_GPIO_Init+0x1ee>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	e004      	b.n	8005ece <HAL_GPIO_Init+0x1ee>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e002      	b.n	8005ece <HAL_GPIO_Init+0x1ee>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_GPIO_Init+0x1ee>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed0:	f002 0203 	and.w	r2, r2, #3
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	4093      	lsls	r3, r2
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ede:	492f      	ldr	r1, [pc, #188]	; (8005f9c <HAL_GPIO_Init+0x2bc>)
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d006      	beq.n	8005f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	492c      	ldr	r1, [pc, #176]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]
 8005f04:	e006      	b.n	8005f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	4928      	ldr	r1, [pc, #160]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4922      	ldr	r1, [pc, #136]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60cb      	str	r3, [r1, #12]
 8005f2c:	e006      	b.n	8005f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005f2e:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	491e      	ldr	r1, [pc, #120]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4918      	ldr	r1, [pc, #96]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	604b      	str	r3, [r1, #4]
 8005f54:	e006      	b.n	8005f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f56:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	4914      	ldr	r1, [pc, #80]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d021      	beq.n	8005fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	490e      	ldr	r1, [pc, #56]	; (8005fb0 <HAL_GPIO_Init+0x2d0>)
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	600b      	str	r3, [r1, #0]
 8005f7c:	e021      	b.n	8005fc2 <HAL_GPIO_Init+0x2e2>
 8005f7e:	bf00      	nop
 8005f80:	10320000 	.word	0x10320000
 8005f84:	10310000 	.word	0x10310000
 8005f88:	10220000 	.word	0x10220000
 8005f8c:	10210000 	.word	0x10210000
 8005f90:	10120000 	.word	0x10120000
 8005f94:	10110000 	.word	0x10110000
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40010800 	.word	0x40010800
 8005fa4:	40010c00 	.word	0x40010c00
 8005fa8:	40011000 	.word	0x40011000
 8005fac:	40011400 	.word	0x40011400
 8005fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_GPIO_Init+0x304>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <HAL_GPIO_Init+0x304>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f ae8e 	bne.w	8005cf4 <HAL_GPIO_Init+0x14>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	372c      	adds	r7, #44	; 0x2c
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e001      	b.n	800600a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	807b      	strh	r3, [r7, #2]
 8006022:	4613      	mov	r3, r2
 8006024:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006026:	787b      	ldrb	r3, [r7, #1]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006032:	e003      	b.n	800603c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006034:	887b      	ldrh	r3, [r7, #2]
 8006036:	041a      	lsls	r2, r3, #16
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	611a      	str	r2, [r3, #16]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006058:	887a      	ldrh	r2, [r7, #2]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4013      	ands	r3, r2
 800605e:	041a      	lsls	r2, r3, #16
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	43d9      	mvns	r1, r3
 8006064:	887b      	ldrh	r3, [r7, #2]
 8006066:	400b      	ands	r3, r1
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e12b      	b.n	80062e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fe ffec 	bl	800507c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	; 0x24
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060dc:	f001 f960 	bl	80073a0 <HAL_RCC_GetPCLK1Freq>
 80060e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4a81      	ldr	r2, [pc, #516]	; (80062ec <HAL_I2C_Init+0x274>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d807      	bhi.n	80060fc <HAL_I2C_Init+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4a80      	ldr	r2, [pc, #512]	; (80062f0 <HAL_I2C_Init+0x278>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bf94      	ite	ls
 80060f4:	2301      	movls	r3, #1
 80060f6:	2300      	movhi	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e006      	b.n	800610a <HAL_I2C_Init+0x92>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a7d      	ldr	r2, [pc, #500]	; (80062f4 <HAL_I2C_Init+0x27c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	bf94      	ite	ls
 8006104:	2301      	movls	r3, #1
 8006106:	2300      	movhi	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0e7      	b.n	80062e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a78      	ldr	r2, [pc, #480]	; (80062f8 <HAL_I2C_Init+0x280>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	0c9b      	lsrs	r3, r3, #18
 800611c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a6a      	ldr	r2, [pc, #424]	; (80062ec <HAL_I2C_Init+0x274>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d802      	bhi.n	800614c <HAL_I2C_Init+0xd4>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	3301      	adds	r3, #1
 800614a:	e009      	b.n	8006160 <HAL_I2C_Init+0xe8>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	4a69      	ldr	r2, [pc, #420]	; (80062fc <HAL_I2C_Init+0x284>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	099b      	lsrs	r3, r3, #6
 800615e:	3301      	adds	r3, #1
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	430b      	orrs	r3, r1
 8006166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	495c      	ldr	r1, [pc, #368]	; (80062ec <HAL_I2C_Init+0x274>)
 800617c:	428b      	cmp	r3, r1
 800617e:	d819      	bhi.n	80061b4 <HAL_I2C_Init+0x13c>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1e59      	subs	r1, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	fbb1 f3f3 	udiv	r3, r1, r3
 800618e:	1c59      	adds	r1, r3, #1
 8006190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006194:	400b      	ands	r3, r1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_I2C_Init+0x138>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1e59      	subs	r1, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a8:	3301      	adds	r3, #1
 80061aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ae:	e051      	b.n	8006254 <HAL_I2C_Init+0x1dc>
 80061b0:	2304      	movs	r3, #4
 80061b2:	e04f      	b.n	8006254 <HAL_I2C_Init+0x1dc>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d111      	bne.n	80061e0 <HAL_I2C_Init+0x168>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1e58      	subs	r0, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	440b      	add	r3, r1
 80061ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ce:	3301      	adds	r3, #1
 80061d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e012      	b.n	8006206 <HAL_I2C_Init+0x18e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1e58      	subs	r0, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6859      	ldr	r1, [r3, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	0099      	lsls	r1, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_I2C_Init+0x196>
 800620a:	2301      	movs	r3, #1
 800620c:	e022      	b.n	8006254 <HAL_I2C_Init+0x1dc>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10e      	bne.n	8006234 <HAL_I2C_Init+0x1bc>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1e58      	subs	r0, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6859      	ldr	r1, [r3, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	440b      	add	r3, r1
 8006224:	fbb0 f3f3 	udiv	r3, r0, r3
 8006228:	3301      	adds	r3, #1
 800622a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	e00f      	b.n	8006254 <HAL_I2C_Init+0x1dc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	1e58      	subs	r0, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	0099      	lsls	r1, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	fbb0 f3f3 	udiv	r3, r0, r3
 800624a:	3301      	adds	r3, #1
 800624c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	6809      	ldr	r1, [r1, #0]
 8006258:	4313      	orrs	r3, r2
 800625a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6911      	ldr	r1, [r2, #16]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68d2      	ldr	r2, [r2, #12]
 800628e:	4311      	orrs	r1, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	430b      	orrs	r3, r1
 8006296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	000186a0 	.word	0x000186a0
 80062f0:	001e847f 	.word	0x001e847f
 80062f4:	003d08ff 	.word	0x003d08ff
 80062f8:	431bde83 	.word	0x431bde83
 80062fc:	10624dd3 	.word	0x10624dd3

08006300 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	461a      	mov	r2, r3
 800630c:	460b      	mov	r3, r1
 800630e:	817b      	strh	r3, [r7, #10]
 8006310:	4613      	mov	r3, r2
 8006312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006314:	f7ff f8f6 	bl	8005504 <HAL_GetTick>
 8006318:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b20      	cmp	r3, #32
 8006324:	f040 80e0 	bne.w	80064e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2319      	movs	r3, #25
 800632e:	2201      	movs	r2, #1
 8006330:	4970      	ldr	r1, [pc, #448]	; (80064f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa92 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800633e:	2302      	movs	r3, #2
 8006340:	e0d3      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_I2C_Master_Transmit+0x50>
 800634c:	2302      	movs	r3, #2
 800634e:	e0cc      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d007      	beq.n	8006376 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2221      	movs	r2, #33	; 0x21
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2210      	movs	r2, #16
 8006392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	893a      	ldrh	r2, [r7, #8]
 80063a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a50      	ldr	r2, [pc, #320]	; (80064f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063b8:	8979      	ldrh	r1, [r7, #10]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a3a      	ldr	r2, [r7, #32]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f9ca 	bl	8006758 <I2C_MasterRequestWrite>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e08d      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80063e4:	e066      	b.n	80064b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	6a39      	ldr	r1, [r7, #32]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fb50 	bl	8006a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00d      	beq.n	8006412 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d107      	bne.n	800640e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e06b      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d11b      	bne.n	8006488 <HAL_I2C_Master_Transmit+0x188>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006454:	2b00      	cmp	r3, #0
 8006456:	d017      	beq.n	8006488 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	6a39      	ldr	r1, [r7, #32]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fb47 	bl	8006b20 <I2C_WaitOnBTFFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b04      	cmp	r3, #4
 800649e:	d107      	bne.n	80064b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01a      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d194      	bne.n	80063e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	00100002 	.word	0x00100002
 80064f8:	ffff0000 	.word	0xffff0000

080064fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	460b      	mov	r3, r1
 800650a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800650c:	f7fe fffa 	bl	8005504 <HAL_GetTick>
 8006510:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b20      	cmp	r3, #32
 8006520:	f040 8111 	bne.w	8006746 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2319      	movs	r3, #25
 800652a:	2201      	movs	r2, #1
 800652c:	4988      	ldr	r1, [pc, #544]	; (8006750 <HAL_I2C_IsDeviceReady+0x254>)
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f994 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
 800653c:	e104      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_I2C_IsDeviceReady+0x50>
 8006548:	2302      	movs	r3, #2
 800654a:	e0fd      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b01      	cmp	r3, #1
 8006560:	d007      	beq.n	8006572 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a70      	ldr	r2, [pc, #448]	; (8006754 <HAL_I2C_IsDeviceReady+0x258>)
 8006594:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f952 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065cc:	d103      	bne.n	80065d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0b6      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80065ea:	f7fe ff8b 	bl	8005504 <HAL_GetTick>
 80065ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006614:	bf0c      	ite	eq
 8006616:	2301      	moveq	r3, #1
 8006618:	2300      	movne	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800661e:	e025      	b.n	800666c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006620:	f7fe ff70 	bl	8005504 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <HAL_I2C_IsDeviceReady+0x13a>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22a0      	movs	r2, #160	; 0xa0
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2ba0      	cmp	r3, #160	; 0xa0
 8006676:	d005      	beq.n	8006684 <HAL_I2C_IsDeviceReady+0x188>
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <HAL_I2C_IsDeviceReady+0x188>
 800667e:	7dbb      	ldrb	r3, [r7, #22]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0cd      	beq.n	8006620 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d129      	bne.n	80066ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2319      	movs	r3, #25
 80066c6:	2201      	movs	r2, #1
 80066c8:	4921      	ldr	r1, [pc, #132]	; (8006750 <HAL_I2C_IsDeviceReady+0x254>)
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f8c6 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e036      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e02c      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006706:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2319      	movs	r3, #25
 800670e:	2201      	movs	r2, #1
 8006710:	490f      	ldr	r1, [pc, #60]	; (8006750 <HAL_I2C_IsDeviceReady+0x254>)
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f8a2 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e012      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	3301      	adds	r3, #1
 8006726:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	f4ff af32 	bcc.w	8006596 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	4618      	mov	r0, r3
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	00100002 	.word	0x00100002
 8006754:	ffff0000 	.word	0xffff0000

08006758 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	460b      	mov	r3, r1
 8006766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d006      	beq.n	8006782 <I2C_MasterRequestWrite+0x2a>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d003      	beq.n	8006782 <I2C_MasterRequestWrite+0x2a>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006780:	d108      	bne.n	8006794 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e00b      	b.n	80067ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	2b12      	cmp	r3, #18
 800679a:	d107      	bne.n	80067ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f84f 	bl	800685c <I2C_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d2:	d103      	bne.n	80067dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e035      	b.n	800684c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e8:	d108      	bne.n	80067fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ea:	897b      	ldrh	r3, [r7, #10]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067f8:	611a      	str	r2, [r3, #16]
 80067fa:	e01b      	b.n	8006834 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	11db      	asrs	r3, r3, #7
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 0306 	and.w	r3, r3, #6
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f063 030f 	orn	r3, r3, #15
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	490e      	ldr	r1, [pc, #56]	; (8006854 <I2C_MasterRequestWrite+0xfc>)
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f898 	bl	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e010      	b.n	800684c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800682a:	897b      	ldrh	r3, [r7, #10]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4907      	ldr	r1, [pc, #28]	; (8006858 <I2C_MasterRequestWrite+0x100>)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f888 	bl	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	00010008 	.word	0x00010008
 8006858:	00010002 	.word	0x00010002

0800685c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800686c:	e048      	b.n	8006900 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d044      	beq.n	8006900 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fe fe45 	bl	8005504 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d139      	bne.n	8006900 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10d      	bne.n	80068b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	43da      	mvns	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	e00c      	b.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	43da      	mvns	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d116      	bne.n	8006900 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e023      	b.n	8006948 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10d      	bne.n	8006926 <I2C_WaitOnFlagUntilTimeout+0xca>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	43da      	mvns	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	e00c      	b.n	8006940 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	43da      	mvns	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4013      	ands	r3, r2
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	429a      	cmp	r2, r3
 8006944:	d093      	beq.n	800686e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800695e:	e071      	b.n	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696e:	d123      	bne.n	80069b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f043 0204 	orr.w	r2, r3, #4
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e067      	b.n	8006a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d041      	beq.n	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c0:	f7fe fda0 	bl	8005504 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d136      	bne.n	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10c      	bne.n	80069fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	43da      	mvns	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	e00b      	b.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	43da      	mvns	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bf14      	ite	ne
 8006a0c:	2301      	movne	r3, #1
 8006a0e:	2300      	moveq	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e021      	b.n	8006a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10c      	bne.n	8006a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	43da      	mvns	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf14      	ite	ne
 8006a60:	2301      	movne	r3, #1
 8006a62:	2300      	moveq	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e00b      	b.n	8006a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	43da      	mvns	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4013      	ands	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bf14      	ite	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	2300      	moveq	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f47f af6d 	bne.w	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a9c:	e034      	b.n	8006b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f886 	bl	8006bb0 <I2C_IsAcknowledgeFailed>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e034      	b.n	8006b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d028      	beq.n	8006b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7fe fd25 	bl	8005504 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11d      	bne.n	8006b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b80      	cmp	r3, #128	; 0x80
 8006ad8:	d016      	beq.n	8006b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e007      	b.n	8006b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d1c3      	bne.n	8006a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b2c:	e034      	b.n	8006b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f83e 	bl	8006bb0 <I2C_IsAcknowledgeFailed>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e034      	b.n	8006ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d028      	beq.n	8006b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fe fcdd 	bl	8005504 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11d      	bne.n	8006b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d016      	beq.n	8006b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	f043 0220 	orr.w	r2, r3, #32
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e007      	b.n	8006ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d1c3      	bne.n	8006b2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc6:	d11b      	bne.n	8006c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	f043 0204 	orr.w	r2, r3, #4
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e272      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8087 	beq.w	8006d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c2c:	4b92      	ldr	r3, [pc, #584]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d00c      	beq.n	8006c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c38:	4b8f      	ldr	r3, [pc, #572]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 030c 	and.w	r3, r3, #12
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d112      	bne.n	8006c6a <HAL_RCC_OscConfig+0x5e>
 8006c44:	4b8c      	ldr	r3, [pc, #560]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c50:	d10b      	bne.n	8006c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c52:	4b89      	ldr	r3, [pc, #548]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d06c      	beq.n	8006d38 <HAL_RCC_OscConfig+0x12c>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d168      	bne.n	8006d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e24c      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x76>
 8006c74:	4b80      	ldr	r3, [pc, #512]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a7f      	ldr	r2, [pc, #508]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e02e      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd4>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x98>
 8006c8a:	4b7b      	ldr	r3, [pc, #492]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7a      	ldr	r2, [pc, #488]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	4b78      	ldr	r3, [pc, #480]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a77      	ldr	r2, [pc, #476]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e01d      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd4>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0xbc>
 8006cae:	4b72      	ldr	r3, [pc, #456]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a71      	ldr	r2, [pc, #452]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4b6f      	ldr	r3, [pc, #444]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a6e      	ldr	r2, [pc, #440]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd4>
 8006cc8:	4b6b      	ldr	r3, [pc, #428]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6a      	ldr	r2, [pc, #424]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4b68      	ldr	r3, [pc, #416]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a67      	ldr	r2, [pc, #412]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce8:	f7fe fc0c 	bl	8005504 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf0:	f7fe fc08 	bl	8005504 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e200      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	4b5d      	ldr	r3, [pc, #372]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xe4>
 8006d0e:	e014      	b.n	8006d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d10:	f7fe fbf8 	bl	8005504 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d18:	f7fe fbf4 	bl	8005504 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b64      	cmp	r3, #100	; 0x64
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e1ec      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	4b53      	ldr	r3, [pc, #332]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x10c>
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d063      	beq.n	8006e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d46:	4b4c      	ldr	r3, [pc, #304]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d52:	4b49      	ldr	r3, [pc, #292]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d11c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x18c>
 8006d5e:	4b46      	ldr	r3, [pc, #280]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6a:	4b43      	ldr	r3, [pc, #268]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x176>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d001      	beq.n	8006d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e1c0      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d82:	4b3d      	ldr	r3, [pc, #244]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4939      	ldr	r1, [pc, #228]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	e03a      	b.n	8006e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d020      	beq.n	8006de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da0:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <HAL_RCC_OscConfig+0x270>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da6:	f7fe fbad 	bl	8005504 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dae:	f7fe fba9 	bl	8005504 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1a1      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4927      	ldr	r1, [pc, #156]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]
 8006de0:	e015      	b.n	8006e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de2:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <HAL_RCC_OscConfig+0x270>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fe fb8c 	bl	8005504 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df0:	f7fe fb88 	bl	8005504 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e180      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03a      	beq.n	8006e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d019      	beq.n	8006e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e22:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <HAL_RCC_OscConfig+0x274>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e28:	f7fe fb6c 	bl	8005504 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e30:	f7fe fb68 	bl	8005504 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e160      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e42:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f000 face 	bl	80073f0 <RCC_Delay>
 8006e54:	e01c      	b.n	8006e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <HAL_RCC_OscConfig+0x274>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5c:	f7fe fb52 	bl	8005504 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e62:	e00f      	b.n	8006e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e64:	f7fe fb4e 	bl	8005504 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d908      	bls.n	8006e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e146      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
 8006e76:	bf00      	nop
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	42420000 	.word	0x42420000
 8006e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e84:	4b92      	ldr	r3, [pc, #584]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e9      	bne.n	8006e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80a6 	beq.w	8006fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea2:	4b8b      	ldr	r3, [pc, #556]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eae:	4b88      	ldr	r3, [pc, #544]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4a87      	ldr	r2, [pc, #540]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	61d3      	str	r3, [r2, #28]
 8006eba:	4b85      	ldr	r3, [pc, #532]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eca:	4b82      	ldr	r3, [pc, #520]	; (80070d4 <HAL_RCC_OscConfig+0x4c8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d118      	bne.n	8006f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed6:	4b7f      	ldr	r3, [pc, #508]	; (80070d4 <HAL_RCC_OscConfig+0x4c8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a7e      	ldr	r2, [pc, #504]	; (80070d4 <HAL_RCC_OscConfig+0x4c8>)
 8006edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee2:	f7fe fb0f 	bl	8005504 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eea:	f7fe fb0b 	bl	8005504 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b64      	cmp	r3, #100	; 0x64
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e103      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efc:	4b75      	ldr	r3, [pc, #468]	; (80070d4 <HAL_RCC_OscConfig+0x4c8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCC_OscConfig+0x312>
 8006f10:	4b6f      	ldr	r3, [pc, #444]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	4a6e      	ldr	r2, [pc, #440]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6213      	str	r3, [r2, #32]
 8006f1c:	e02d      	b.n	8006f7a <HAL_RCC_OscConfig+0x36e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x334>
 8006f26:	4b6a      	ldr	r3, [pc, #424]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4a69      	ldr	r2, [pc, #420]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6213      	str	r3, [r2, #32]
 8006f32:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	4a66      	ldr	r2, [pc, #408]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	6213      	str	r3, [r2, #32]
 8006f3e:	e01c      	b.n	8006f7a <HAL_RCC_OscConfig+0x36e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d10c      	bne.n	8006f62 <HAL_RCC_OscConfig+0x356>
 8006f48:	4b61      	ldr	r3, [pc, #388]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4a60      	ldr	r2, [pc, #384]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f4e:	f043 0304 	orr.w	r3, r3, #4
 8006f52:	6213      	str	r3, [r2, #32]
 8006f54:	4b5e      	ldr	r3, [pc, #376]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	4a5d      	ldr	r2, [pc, #372]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	6213      	str	r3, [r2, #32]
 8006f60:	e00b      	b.n	8006f7a <HAL_RCC_OscConfig+0x36e>
 8006f62:	4b5b      	ldr	r3, [pc, #364]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	4a5a      	ldr	r2, [pc, #360]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	6213      	str	r3, [r2, #32]
 8006f6e:	4b58      	ldr	r3, [pc, #352]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	4a57      	ldr	r2, [pc, #348]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006f74:	f023 0304 	bic.w	r3, r3, #4
 8006f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d015      	beq.n	8006fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f82:	f7fe fabf 	bl	8005504 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f88:	e00a      	b.n	8006fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f8a:	f7fe fabb 	bl	8005504 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e0b1      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa0:	4b4b      	ldr	r3, [pc, #300]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ee      	beq.n	8006f8a <HAL_RCC_OscConfig+0x37e>
 8006fac:	e014      	b.n	8006fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fae:	f7fe faa9 	bl	8005504 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7fe faa5 	bl	8005504 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e09b      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fcc:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1ee      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fde:	4b3c      	ldr	r3, [pc, #240]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	4a3b      	ldr	r2, [pc, #236]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8087 	beq.w	8007102 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ff4:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d061      	beq.n	80070c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d146      	bne.n	8007096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007008:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <HAL_RCC_OscConfig+0x4cc>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700e:	f7fe fa79 	bl	8005504 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007016:	f7fe fa75 	bl	8005504 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e06d      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007028:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f0      	bne.n	8007016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703c:	d108      	bne.n	8007050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800703e:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4921      	ldr	r1, [pc, #132]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 800704c:	4313      	orrs	r3, r2
 800704e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007050:	4b1f      	ldr	r3, [pc, #124]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a19      	ldr	r1, [r3, #32]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	430b      	orrs	r3, r1
 8007062:	491b      	ldr	r1, [pc, #108]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <HAL_RCC_OscConfig+0x4cc>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706e:	f7fe fa49 	bl	8005504 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007074:	e008      	b.n	8007088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007076:	f7fe fa45 	bl	8005504 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e03d      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0f0      	beq.n	8007076 <HAL_RCC_OscConfig+0x46a>
 8007094:	e035      	b.n	8007102 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <HAL_RCC_OscConfig+0x4cc>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709c:	f7fe fa32 	bl	8005504 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a4:	f7fe fa2e 	bl	8005504 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e026      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x498>
 80070c2:	e01e      	b.n	8007102 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e019      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40007000 	.word	0x40007000
 80070d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_OscConfig+0x500>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d106      	bne.n	80070fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d001      	beq.n	8007102 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40021000 	.word	0x40021000

08007110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0d0      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007124:	4b6a      	ldr	r3, [pc, #424]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d910      	bls.n	8007154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007132:	4b67      	ldr	r3, [pc, #412]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f023 0207 	bic.w	r2, r3, #7
 800713a:	4965      	ldr	r1, [pc, #404]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	4313      	orrs	r3, r2
 8007140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007142:	4b63      	ldr	r3, [pc, #396]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e0b8      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d020      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800716c:	4b59      	ldr	r3, [pc, #356]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4a58      	ldr	r2, [pc, #352]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007184:	4b53      	ldr	r3, [pc, #332]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4a52      	ldr	r2, [pc, #328]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800718a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800718e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007190:	4b50      	ldr	r3, [pc, #320]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	494d      	ldr	r1, [pc, #308]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d040      	beq.n	8007230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d107      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b6:	4b47      	ldr	r3, [pc, #284]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d115      	bne.n	80071ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e07f      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d107      	bne.n	80071de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ce:	4b41      	ldr	r3, [pc, #260]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e073      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071de:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e06b      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ee:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f023 0203 	bic.w	r2, r3, #3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	4936      	ldr	r1, [pc, #216]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007200:	f7fe f980 	bl	8005504 <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007206:	e00a      	b.n	800721e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007208:	f7fe f97c 	bl	8005504 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f241 3288 	movw	r2, #5000	; 0x1388
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e053      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	4b2d      	ldr	r3, [pc, #180]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f003 020c 	and.w	r2, r3, #12
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	429a      	cmp	r2, r3
 800722e:	d1eb      	bne.n	8007208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d210      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f023 0207 	bic.w	r2, r3, #7
 8007246:	4922      	ldr	r1, [pc, #136]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	4313      	orrs	r3, r2
 800724c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724e:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e032      	b.n	80072c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800726c:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4916      	ldr	r1, [pc, #88]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800727a:	4313      	orrs	r3, r2
 800727c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	490e      	ldr	r1, [pc, #56]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800729e:	f000 f821 	bl	80072e4 <HAL_RCC_GetSysClockFreq>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <HAL_RCC_ClockConfig+0x1c4>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	490a      	ldr	r1, [pc, #40]	; (80072d8 <HAL_RCC_ClockConfig+0x1c8>)
 80072b0:	5ccb      	ldrb	r3, [r1, r3]
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <HAL_RCC_ClockConfig+0x1cc>)
 80072b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <HAL_RCC_ClockConfig+0x1d0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe f8de 	bl	8005480 <HAL_InitTick>

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40022000 	.word	0x40022000
 80072d4:	40021000 	.word	0x40021000
 80072d8:	0800b434 	.word	0x0800b434
 80072dc:	20000074 	.word	0x20000074
 80072e0:	20000078 	.word	0x20000078

080072e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072fe:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <HAL_RCC_GetSysClockFreq+0x94>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b04      	cmp	r3, #4
 800730c:	d002      	beq.n	8007314 <HAL_RCC_GetSysClockFreq+0x30>
 800730e:	2b08      	cmp	r3, #8
 8007310:	d003      	beq.n	800731a <HAL_RCC_GetSysClockFreq+0x36>
 8007312:	e027      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <HAL_RCC_GetSysClockFreq+0x98>)
 8007316:	613b      	str	r3, [r7, #16]
      break;
 8007318:	e027      	b.n	800736a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	0c9b      	lsrs	r3, r3, #18
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	4a17      	ldr	r2, [pc, #92]	; (8007380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007324:	5cd3      	ldrb	r3, [r2, r3]
 8007326:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <HAL_RCC_GetSysClockFreq+0x94>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	0c5b      	lsrs	r3, r3, #17
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	4a11      	ldr	r2, [pc, #68]	; (8007384 <HAL_RCC_GetSysClockFreq+0xa0>)
 800733e:	5cd3      	ldrb	r3, [r2, r3]
 8007340:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <HAL_RCC_GetSysClockFreq+0x98>)
 8007346:	fb03 f202 	mul.w	r2, r3, r2
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e004      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	613b      	str	r3, [r7, #16]
      break;
 8007362:	e002      	b.n	800736a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <HAL_RCC_GetSysClockFreq+0x98>)
 8007366:	613b      	str	r3, [r7, #16]
      break;
 8007368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800736a:	693b      	ldr	r3, [r7, #16]
}
 800736c:	4618      	mov	r0, r3
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40021000 	.word	0x40021000
 800737c:	007a1200 	.word	0x007a1200
 8007380:	0800b44c 	.word	0x0800b44c
 8007384:	0800b45c 	.word	0x0800b45c
 8007388:	003d0900 	.word	0x003d0900

0800738c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <HAL_RCC_GetHCLKFreq+0x10>)
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr
 800739c:	20000074 	.word	0x20000074

080073a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073a4:	f7ff fff2 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073a8:	4602      	mov	r2, r0
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	4903      	ldr	r1, [pc, #12]	; (80073c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40021000 	.word	0x40021000
 80073c4:	0800b444 	.word	0x0800b444

080073c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073cc:	f7ff ffde 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	0adb      	lsrs	r3, r3, #11
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4903      	ldr	r1, [pc, #12]	; (80073ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40021000 	.word	0x40021000
 80073ec:	0800b444 	.word	0x0800b444

080073f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <RCC_Delay+0x34>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <RCC_Delay+0x38>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	0a5b      	lsrs	r3, r3, #9
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800740c:	bf00      	nop
  }
  while (Delay --);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	60fa      	str	r2, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f9      	bne.n	800740c <RCC_Delay+0x1c>
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr
 8007424:	20000074 	.word	0x20000074
 8007428:	10624dd3 	.word	0x10624dd3

0800742c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e076      	b.n	800752c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d108      	bne.n	8007458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d009      	beq.n	8007464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	61da      	str	r2, [r3, #28]
 8007456:	e005      	b.n	8007464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fd fe3a 	bl	80050f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	ea42 0103 	orr.w	r1, r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	0c1a      	lsrs	r2, r3, #16
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f002 0204 	and.w	r2, r2, #4
 800750a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69da      	ldr	r2, [r3, #28]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800751a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	4613      	mov	r3, r2
 8007542:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_SPI_Transmit+0x22>
 8007552:	2302      	movs	r3, #2
 8007554:	e12d      	b.n	80077b2 <HAL_SPI_Transmit+0x27e>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755e:	f7fd ffd1 	bl	8005504 <HAL_GetTick>
 8007562:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d002      	beq.n	800757a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007574:	2302      	movs	r3, #2
 8007576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007578:	e116      	b.n	80077a8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_SPI_Transmit+0x52>
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800758a:	e10d      	b.n	80077a8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2203      	movs	r2, #3
 8007590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	88fa      	ldrh	r2, [r7, #6]
 80075a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	88fa      	ldrh	r2, [r7, #6]
 80075aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d2:	d10f      	bne.n	80075f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d007      	beq.n	8007612 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007610:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761a:	d14f      	bne.n	80076bc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <HAL_SPI_Transmit+0xf6>
 8007624:	8afb      	ldrh	r3, [r7, #22]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d142      	bne.n	80076b0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	881a      	ldrh	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	1c9a      	adds	r2, r3, #2
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800764e:	e02f      	b.n	80076b0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b02      	cmp	r3, #2
 800765c:	d112      	bne.n	8007684 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	1c9a      	adds	r2, r3, #2
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	86da      	strh	r2, [r3, #54]	; 0x36
 8007682:	e015      	b.n	80076b0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007684:	f7fd ff3e 	bl	8005504 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d803      	bhi.n	800769c <HAL_SPI_Transmit+0x168>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d102      	bne.n	80076a2 <HAL_SPI_Transmit+0x16e>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80076ae:	e07b      	b.n	80077a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ca      	bne.n	8007650 <HAL_SPI_Transmit+0x11c>
 80076ba:	e050      	b.n	800775e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_SPI_Transmit+0x196>
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d144      	bne.n	8007754 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	7812      	ldrb	r2, [r2, #0]
 80076d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076f0:	e030      	b.n	8007754 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d113      	bne.n	8007728 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	86da      	strh	r2, [r3, #54]	; 0x36
 8007726:	e015      	b.n	8007754 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007728:	f7fd feec 	bl	8005504 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d803      	bhi.n	8007740 <HAL_SPI_Transmit+0x20c>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d102      	bne.n	8007746 <HAL_SPI_Transmit+0x212>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007752:	e029      	b.n	80077a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1c9      	bne.n	80076f2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fa6e 	bl	8007c44 <SPI_EndRxTxTransaction>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e003      	b.n	80077a8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b08c      	sub	sp, #48	; 0x30
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077c8:	2301      	movs	r3, #1
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x26>
 80077dc:	2302      	movs	r3, #2
 80077de:	e198      	b.n	8007b12 <HAL_SPI_TransmitReceive+0x358>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e8:	f7fd fe8c 	bl	8005504 <HAL_GetTick>
 80077ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077fe:	887b      	ldrh	r3, [r7, #2]
 8007800:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007806:	2b01      	cmp	r3, #1
 8007808:	d00f      	beq.n	800782a <HAL_SPI_TransmitReceive+0x70>
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007810:	d107      	bne.n	8007822 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <HAL_SPI_TransmitReceive+0x68>
 800781a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800781e:	2b04      	cmp	r3, #4
 8007820:	d003      	beq.n	800782a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007828:	e16d      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_SPI_TransmitReceive+0x82>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_SPI_TransmitReceive+0x82>
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007842:	e160      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b04      	cmp	r3, #4
 800784e:	d003      	beq.n	8007858 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2205      	movs	r2, #5
 8007854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	887a      	ldrh	r2, [r7, #2]
 8007868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	887a      	ldrh	r2, [r7, #2]
 800786e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	887a      	ldrh	r2, [r7, #2]
 800787a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d007      	beq.n	80078ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b4:	d17c      	bne.n	80079b0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x10a>
 80078be:	8b7b      	ldrh	r3, [r7, #26]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d16a      	bne.n	800799a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	881a      	ldrh	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e8:	e057      	b.n	800799a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d11b      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x176>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <HAL_SPI_TransmitReceive+0x176>
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d113      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	881a      	ldrh	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	1c9a      	adds	r2, r3, #2
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d119      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x1b8>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d014      	beq.n	8007972 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	b292      	uxth	r2, r2
 8007954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800796e:	2301      	movs	r3, #1
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007972:	f7fd fdc7 	bl	8005504 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797e:	429a      	cmp	r2, r3
 8007980:	d80b      	bhi.n	800799a <HAL_SPI_TransmitReceive+0x1e0>
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d007      	beq.n	800799a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007998:	e0b5      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1a2      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x130>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d19d      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x130>
 80079ae:	e080      	b.n	8007ab2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_SPI_TransmitReceive+0x204>
 80079b8:	8b7b      	ldrh	r3, [r7, #26]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d16f      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e4:	e05b      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d11c      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x274>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x274>
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d114      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d119      	bne.n	8007a70 <HAL_SPI_TransmitReceive+0x2b6>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a70:	f7fd fd48 	bl	8005504 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d803      	bhi.n	8007a88 <HAL_SPI_TransmitReceive+0x2ce>
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a86:	d102      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x2d4>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007a9c:	e033      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d19e      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x22c>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d199      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f8c4 	bl	8007c44 <SPI_EndRxTxTransaction>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ace:	e01a      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afc:	e003      	b.n	8007b06 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3730      	adds	r7, #48	; 0x30
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b28:	b2db      	uxtb	r3, r3
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b44:	f7fd fcde 	bl	8005504 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4413      	add	r3, r2
 8007b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b54:	f7fd fcd6 	bl	8005504 <HAL_GetTick>
 8007b58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b5a:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	015b      	lsls	r3, r3, #5
 8007b60:	0d1b      	lsrs	r3, r3, #20
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6a:	e054      	b.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d050      	beq.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b74:	f7fd fcc6 	bl	8005504 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d902      	bls.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d13d      	bne.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba2:	d111      	bne.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	d004      	beq.n	8007bb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb6:	d107      	bne.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd0:	d10f      	bne.n	8007bf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e017      	b.n	8007c36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d19b      	bne.n	8007b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000074 	.word	0x20000074

08007c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff6a 	bl	8007b34 <SPI_WaitFlagStateUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e000      	b.n	8007c78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e041      	b.n	8007d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fd faac 	bl	8005204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f000 fa62 	bl	8008188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d122      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d11b      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f06f 0202 	mvn.w	r2, #2
 8007d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9f6 	bl	8008152 <HAL_TIM_IC_CaptureCallback>
 8007d66:	e005      	b.n	8007d74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9e9 	bl	8008140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9f8 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d122      	bne.n	8007dce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d11b      	bne.n	8007dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0204 	mvn.w	r2, #4
 8007d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9cc 	bl	8008152 <HAL_TIM_IC_CaptureCallback>
 8007dba:	e005      	b.n	8007dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f9bf 	bl	8008140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9ce 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d122      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d11b      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f06f 0208 	mvn.w	r2, #8
 8007df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2204      	movs	r2, #4
 8007df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0303 	and.w	r3, r3, #3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9a2 	bl	8008152 <HAL_TIM_IC_CaptureCallback>
 8007e0e:	e005      	b.n	8007e1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f995 	bl	8008140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9a4 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d122      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d11b      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f06f 0210 	mvn.w	r2, #16
 8007e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f978 	bl	8008152 <HAL_TIM_IC_CaptureCallback>
 8007e62:	e005      	b.n	8007e70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f96b 	bl	8008140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f97a 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d10e      	bne.n	8007ea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d107      	bne.n	8007ea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f06f 0201 	mvn.w	r2, #1
 8007e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7f9 fba5 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d10e      	bne.n	8007ece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b80      	cmp	r3, #128	; 0x80
 8007ebc:	d107      	bne.n	8007ece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb4e 	bl	800856a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b40      	cmp	r3, #64	; 0x40
 8007eda:	d10e      	bne.n	8007efa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d107      	bne.n	8007efa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f93e 	bl	8008176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d10e      	bne.n	8007f26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d107      	bne.n	8007f26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f06f 0220 	mvn.w	r2, #32
 8007f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fb19 	bl	8008558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_TIM_ConfigClockSource+0x1c>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e0b4      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x186>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f82:	d03e      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0xd4>
 8007f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f88:	f200 8087 	bhi.w	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f90:	f000 8086 	beq.w	80080a0 <HAL_TIM_ConfigClockSource+0x172>
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f98:	d87f      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007f9a:	2b70      	cmp	r3, #112	; 0x70
 8007f9c:	d01a      	beq.n	8007fd4 <HAL_TIM_ConfigClockSource+0xa6>
 8007f9e:	2b70      	cmp	r3, #112	; 0x70
 8007fa0:	d87b      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007fa2:	2b60      	cmp	r3, #96	; 0x60
 8007fa4:	d050      	beq.n	8008048 <HAL_TIM_ConfigClockSource+0x11a>
 8007fa6:	2b60      	cmp	r3, #96	; 0x60
 8007fa8:	d877      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007faa:	2b50      	cmp	r3, #80	; 0x50
 8007fac:	d03c      	beq.n	8008028 <HAL_TIM_ConfigClockSource+0xfa>
 8007fae:	2b50      	cmp	r3, #80	; 0x50
 8007fb0:	d873      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d058      	beq.n	8008068 <HAL_TIM_ConfigClockSource+0x13a>
 8007fb6:	2b40      	cmp	r3, #64	; 0x40
 8007fb8:	d86f      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d064      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0x15a>
 8007fbe:	2b30      	cmp	r3, #48	; 0x30
 8007fc0:	d86b      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d060      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0x15a>
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d867      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d05c      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0x15a>
 8007fce:	2b10      	cmp	r3, #16
 8007fd0:	d05a      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0x15a>
 8007fd2:	e062      	b.n	800809a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	f000 fa3a 	bl	800845c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
      break;
 8008000:	e04f      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008012:	f000 fa23 	bl	800845c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008024:	609a      	str	r2, [r3, #8]
      break;
 8008026:	e03c      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008034:	461a      	mov	r2, r3
 8008036:	f000 f99a 	bl	800836e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2150      	movs	r1, #80	; 0x50
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f9f1 	bl	8008428 <TIM_ITRx_SetConfig>
      break;
 8008046:	e02c      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008054:	461a      	mov	r2, r3
 8008056:	f000 f9b8 	bl	80083ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2160      	movs	r1, #96	; 0x60
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f9e1 	bl	8008428 <TIM_ITRx_SetConfig>
      break;
 8008066:	e01c      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008074:	461a      	mov	r2, r3
 8008076:	f000 f97a 	bl	800836e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2140      	movs	r1, #64	; 0x40
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9d1 	bl	8008428 <TIM_ITRx_SetConfig>
      break;
 8008086:	e00c      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f000 f9c8 	bl	8008428 <TIM_ITRx_SetConfig>
      break;
 8008098:	e003      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	73fb      	strb	r3, [r7, #15]
      break;
 800809e:	e000      	b.n	80080a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e031      	b.n	8008138 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f8b0 	bl	800824c <TIM_SlaveTimer_SetConfig>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e018      	b.n	8008138 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008114:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008124:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a29      	ldr	r2, [pc, #164]	; (8008240 <TIM_Base_SetConfig+0xb8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0x30>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0x30>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a26      	ldr	r2, [pc, #152]	; (8008244 <TIM_Base_SetConfig+0xbc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0x30>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a25      	ldr	r2, [pc, #148]	; (8008248 <TIM_Base_SetConfig+0xc0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d108      	bne.n	80081ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a1c      	ldr	r2, [pc, #112]	; (8008240 <TIM_Base_SetConfig+0xb8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00b      	beq.n	80081ea <TIM_Base_SetConfig+0x62>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d007      	beq.n	80081ea <TIM_Base_SetConfig+0x62>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a19      	ldr	r2, [pc, #100]	; (8008244 <TIM_Base_SetConfig+0xbc>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_Base_SetConfig+0x62>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a18      	ldr	r2, [pc, #96]	; (8008248 <TIM_Base_SetConfig+0xc0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d108      	bne.n	80081fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a07      	ldr	r2, [pc, #28]	; (8008240 <TIM_Base_SetConfig+0xb8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d103      	bne.n	8008230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	615a      	str	r2, [r3, #20]
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr
 8008240:	40012c00 	.word	0x40012c00
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800

0800824c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008268:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f023 0307 	bic.w	r3, r3, #7
 800827a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b70      	cmp	r3, #112	; 0x70
 8008294:	d01a      	beq.n	80082cc <TIM_SlaveTimer_SetConfig+0x80>
 8008296:	2b70      	cmp	r3, #112	; 0x70
 8008298:	d860      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 800829a:	2b60      	cmp	r3, #96	; 0x60
 800829c:	d054      	beq.n	8008348 <TIM_SlaveTimer_SetConfig+0xfc>
 800829e:	2b60      	cmp	r3, #96	; 0x60
 80082a0:	d85c      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 80082a2:	2b50      	cmp	r3, #80	; 0x50
 80082a4:	d046      	beq.n	8008334 <TIM_SlaveTimer_SetConfig+0xe8>
 80082a6:	2b50      	cmp	r3, #80	; 0x50
 80082a8:	d858      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 80082aa:	2b40      	cmp	r3, #64	; 0x40
 80082ac:	d019      	beq.n	80082e2 <TIM_SlaveTimer_SetConfig+0x96>
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d854      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 80082b2:	2b30      	cmp	r3, #48	; 0x30
 80082b4:	d055      	beq.n	8008362 <TIM_SlaveTimer_SetConfig+0x116>
 80082b6:	2b30      	cmp	r3, #48	; 0x30
 80082b8:	d850      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d051      	beq.n	8008362 <TIM_SlaveTimer_SetConfig+0x116>
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d84c      	bhi.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d04d      	beq.n	8008362 <TIM_SlaveTimer_SetConfig+0x116>
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d04b      	beq.n	8008362 <TIM_SlaveTimer_SetConfig+0x116>
 80082ca:	e047      	b.n	800835c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80082dc:	f000 f8be 	bl	800845c <TIM_ETR_SetConfig>
      break;
 80082e0:	e040      	b.n	8008364 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d101      	bne.n	80082ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e03b      	b.n	8008366 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a1a      	ldr	r2, [r3, #32]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008314:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	4313      	orrs	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	621a      	str	r2, [r3, #32]
      break;
 8008332:	e017      	b.n	8008364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008340:	461a      	mov	r2, r3
 8008342:	f000 f814 	bl	800836e <TIM_TI1_ConfigInputStage>
      break;
 8008346:	e00d      	b.n	8008364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008354:	461a      	mov	r2, r3
 8008356:	f000 f838 	bl	80083ca <TIM_TI2_ConfigInputStage>
      break;
 800835a:	e003      	b.n	8008364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
      break;
 8008360:	e000      	b.n	8008364 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008362:	bf00      	nop
  }

  return status;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800836e:	b480      	push	{r7}
 8008370:	b087      	sub	sp, #28
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f023 0201 	bic.w	r2, r3, #1
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 030a 	bic.w	r3, r3, #10
 80083aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	621a      	str	r2, [r3, #32]
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b087      	sub	sp, #28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f023 0210 	bic.w	r2, r3, #16
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	031b      	lsls	r3, r3, #12
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	f043 0307 	orr.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	609a      	str	r2, [r3, #8]
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	bc80      	pop	{r7}
 800845a:	4770      	bx	lr

0800845c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	021a      	lsls	r2, r3, #8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	431a      	orrs	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4313      	orrs	r3, r2
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	609a      	str	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr
	...

0800849c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e046      	b.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a16      	ldr	r2, [pc, #88]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00e      	beq.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008500:	d009      	beq.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a12      	ldr	r2, [pc, #72]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d004      	beq.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a10      	ldr	r2, [pc, #64]	; (8008554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d10c      	bne.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800851c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	4313      	orrs	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800

08008558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr

0800856a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e042      	b.n	8008614 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fc fe66 	bl	8005274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fdc5 	bl	8009150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b20      	cmp	r3, #32
 800863a:	d16d      	bne.n	8008718 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_UART_Transmit+0x2c>
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e066      	b.n	800871a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800865a:	f7fc ff53 	bl	8005504 <HAL_GetTick>
 800865e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008674:	d108      	bne.n	8008688 <HAL_UART_Transmit+0x6c>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800867e:	2300      	movs	r3, #0
 8008680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	e003      	b.n	8008690 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800868c:	2300      	movs	r3, #0
 800868e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008690:	e02a      	b.n	80086e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2200      	movs	r2, #0
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fb14 	bl	8008cca <UART_WaitOnFlagUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e036      	b.n	800871a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	3302      	adds	r3, #2
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	e007      	b.n	80086da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	781a      	ldrb	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3301      	adds	r3, #1
 80086d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1cf      	bne.n	8008692 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	2140      	movs	r1, #64	; 0x40
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fae4 	bl	8008cca <UART_WaitOnFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e006      	b.n	800871a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	e000      	b.n	800871a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008718:	2302      	movs	r3, #2
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b20      	cmp	r3, #32
 800873a:	d112      	bne.n	8008762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Receive_IT+0x26>
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e00b      	b.n	8008764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	461a      	mov	r2, r3
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fb24 	bl	8008da6 <UART_Start_Receive_IT>
 800875e:	4603      	mov	r3, r0
 8008760:	e000      	b.n	8008764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b0ba      	sub	sp, #232	; 0xe8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008792:	2300      	movs	r3, #0
 8008794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008798:	2300      	movs	r3, #0
 800879a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800879e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10f      	bne.n	80087d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <HAL_UART_IRQHandler+0x66>
 80087be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fc01 	bl	8008fd2 <UART_Receive_IT>
      return;
 80087d0:	e25b      	b.n	8008c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80de 	beq.w	8008998 <HAL_UART_IRQHandler+0x22c>
 80087dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80d1 	beq.w	8008998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_UART_IRQHandler+0xae>
 8008802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008812:	f043 0201 	orr.w	r2, r3, #1
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00b      	beq.n	800883e <HAL_UART_IRQHandler+0xd2>
 8008826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	f043 0202 	orr.w	r2, r3, #2
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <HAL_UART_IRQHandler+0xf6>
 800884a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885a:	f043 0204 	orr.w	r2, r3, #4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d011      	beq.n	8008892 <HAL_UART_IRQHandler+0x126>
 800886e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800887a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	f043 0208 	orr.w	r2, r3, #8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 81f2 	beq.w	8008c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_UART_IRQHandler+0x14e>
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fb8c 	bl	8008fd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <HAL_UART_IRQHandler+0x17a>
 80088de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d04f      	beq.n	8008986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fa96 	bl	8008e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d041      	beq.n	800897e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3314      	adds	r3, #20
 8008900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3314      	adds	r3, #20
 8008922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800892a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800893e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1d9      	bne.n	80088fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d013      	beq.n	8008976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	4a7e      	ldr	r2, [pc, #504]	; (8008b4c <HAL_UART_IRQHandler+0x3e0>)
 8008954:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895a:	4618      	mov	r0, r3
 800895c:	f7fc ff48 	bl	80057f0 <HAL_DMA_Abort_IT>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d016      	beq.n	8008994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	e00e      	b.n	8008994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f993 	bl	8008ca2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	e00a      	b.n	8008994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f98f 	bl	8008ca2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	e006      	b.n	8008994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f98b 	bl	8008ca2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008992:	e175      	b.n	8008c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008994:	bf00      	nop
    return;
 8008996:	e173      	b.n	8008c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	f040 814f 	bne.w	8008c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8148 	beq.w	8008c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8141 	beq.w	8008c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089be:	2300      	movs	r3, #0
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60bb      	str	r3, [r7, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	60bb      	str	r3, [r7, #8]
 80089d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80b6 	beq.w	8008b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8145 	beq.w	8008c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a02:	429a      	cmp	r2, r3
 8008a04:	f080 813e 	bcs.w	8008c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	f000 8088 	beq.w	8008b2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	330c      	adds	r3, #12
 8008a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1d9      	bne.n	8008a1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3314      	adds	r3, #20
 8008a88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e1      	bne.n	8008a68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3314      	adds	r3, #20
 8008ac4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ac8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ace:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e3      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	330c      	adds	r3, #12
 8008af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afc:	f023 0310 	bic.w	r3, r3, #16
 8008b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	330c      	adds	r3, #12
 8008b0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fc fe27 	bl	800577a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8b6 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b48:	e09c      	b.n	8008c84 <HAL_UART_IRQHandler+0x518>
 8008b4a:	bf00      	nop
 8008b4c:	08008edd 	.word	0x08008edd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 808e 	beq.w	8008c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8089 	beq.w	8008c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e3      	bne.n	8008b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3314      	adds	r3, #20
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0310 	bic.w	r3, r3, #16
 8008c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c18:	61fa      	str	r2, [r7, #28]
 8008c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	69b9      	ldr	r1, [r7, #24]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	617b      	str	r3, [r7, #20]
   return(result);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e3      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f83b 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c3e:	e023      	b.n	8008c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <HAL_UART_IRQHandler+0x4f4>
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f953 	bl	8008f04 <UART_Transmit_IT>
    return;
 8008c5e:	e014      	b.n	8008c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00e      	beq.n	8008c8a <HAL_UART_IRQHandler+0x51e>
 8008c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d008      	beq.n	8008c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f992 	bl	8008fa2 <UART_EndTransmit_IT>
    return;
 8008c7e:	e004      	b.n	8008c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8008c80:	bf00      	nop
 8008c82:	e002      	b.n	8008c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8008c84:	bf00      	nop
 8008c86:	e000      	b.n	8008c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8008c88:	bf00      	nop
  }
}
 8008c8a:	37e8      	adds	r7, #232	; 0xe8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b090      	sub	sp, #64	; 0x40
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	603b      	str	r3, [r7, #0]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cda:	e050      	b.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d04c      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8008cea:	f7fc fc0b 	bl	8005504 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d241      	bcs.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	330c      	adds	r3, #12
 8008d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d1a:	637a      	str	r2, [r7, #52]	; 0x34
 8008d1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e5      	bne.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3314      	adds	r3, #20
 8008d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4e:	623a      	str	r2, [r7, #32]
 8008d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	69f9      	ldr	r1, [r7, #28]
 8008d54:	6a3a      	ldr	r2, [r7, #32]
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e00f      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d09f      	beq.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3740      	adds	r7, #64	; 0x40
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	88fa      	ldrh	r2, [r7, #6]
 8008dbe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2222      	movs	r2, #34	; 0x22
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d007      	beq.n	8008dec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0220 	orr.w	r2, r2, #32
 8008e0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr

08008e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b095      	sub	sp, #84	; 0x54
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e40:	643a      	str	r2, [r7, #64]	; 0x40
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e5      	bne.n	8008e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3314      	adds	r3, #20
 8008e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3314      	adds	r3, #20
 8008e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d119      	bne.n	8008ec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0310 	bic.w	r3, r3, #16
 8008ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eb0:	61ba      	str	r2, [r7, #24]
 8008eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6979      	ldr	r1, [r7, #20]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e5      	bne.n	8008e90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ed2:	bf00      	nop
 8008ed4:	3754      	adds	r7, #84	; 0x54
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7ff fed3 	bl	8008ca2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b21      	cmp	r3, #33	; 0x21
 8008f16:	d13e      	bne.n	8008f96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f20:	d114      	bne.n	8008f4c <UART_Transmit_IT+0x48>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d110      	bne.n	8008f4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	1c9a      	adds	r2, r3, #2
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]
 8008f4a:	e008      	b.n	8008f5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6211      	str	r1, [r2, #32]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10f      	bne.n	8008f92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e000      	b.n	8008f98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr

08008fa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fe64 	bl	8008c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08c      	sub	sp, #48	; 0x30
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b22      	cmp	r3, #34	; 0x22
 8008fe4:	f040 80ae 	bne.w	8009144 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff0:	d117      	bne.n	8009022 <UART_Receive_IT+0x50>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d113      	bne.n	8009022 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	b29a      	uxth	r2, r3
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28
 8009020:	e026      	b.n	8009070 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009034:	d007      	beq.n	8009046 <UART_Receive_IT+0x74>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <UART_Receive_IT+0x82>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	701a      	strb	r2, [r3, #0]
 8009052:	e008      	b.n	8009066 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009060:	b2da      	uxtb	r2, r3
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29b      	uxth	r3, r3
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4619      	mov	r1, r3
 800907e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009080:	2b00      	cmp	r3, #0
 8009082:	d15d      	bne.n	8009140 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0220 	bic.w	r2, r2, #32
 8009092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0201 	bic.w	r2, r2, #1
 80090b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d135      	bne.n	8009136 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	330c      	adds	r3, #12
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f023 0310 	bic.w	r3, r3, #16
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	330c      	adds	r3, #12
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	623a      	str	r2, [r7, #32]
 80090f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	69f9      	ldr	r1, [r7, #28]
 80090f6:	6a3a      	ldr	r2, [r7, #32]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b10      	cmp	r3, #16
 8009110:	d10a      	bne.n	8009128 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fdc0 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
 8009134:	e002      	b.n	800913c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7f8 ffdc 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	e002      	b.n	8009146 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3730      	adds	r7, #48	; 0x30
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800918a:	f023 030c 	bic.w	r3, r3, #12
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	430b      	orrs	r3, r1
 8009196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a2c      	ldr	r2, [pc, #176]	; (8009264 <UART_SetConfig+0x114>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d103      	bne.n	80091c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80091b8:	f7fe f906 	bl	80073c8 <HAL_RCC_GetPCLK2Freq>
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	e002      	b.n	80091c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80091c0:	f7fe f8ee 	bl	80073a0 <HAL_RCC_GetPCLK1Freq>
 80091c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	009a      	lsls	r2, r3, #2
 80091d0:	441a      	add	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091dc:	4a22      	ldr	r2, [pc, #136]	; (8009268 <UART_SetConfig+0x118>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	0119      	lsls	r1, r3, #4
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009a      	lsls	r2, r3, #2
 80091f0:	441a      	add	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80091fc:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <UART_SetConfig+0x118>)
 80091fe:	fba3 0302 	umull	r0, r3, r3, r2
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	2064      	movs	r0, #100	; 0x64
 8009206:	fb00 f303 	mul.w	r3, r0, r3
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	3332      	adds	r3, #50	; 0x32
 8009210:	4a15      	ldr	r2, [pc, #84]	; (8009268 <UART_SetConfig+0x118>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800921c:	4419      	add	r1, r3
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	009a      	lsls	r2, r3, #2
 8009228:	441a      	add	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	fbb2 f2f3 	udiv	r2, r2, r3
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <UART_SetConfig+0x118>)
 8009236:	fba3 0302 	umull	r0, r3, r3, r2
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	2064      	movs	r0, #100	; 0x64
 800923e:	fb00 f303 	mul.w	r3, r0, r3
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	3332      	adds	r3, #50	; 0x32
 8009248:	4a07      	ldr	r2, [pc, #28]	; (8009268 <UART_SetConfig+0x118>)
 800924a:	fba2 2303 	umull	r2, r3, r2, r3
 800924e:	095b      	lsrs	r3, r3, #5
 8009250:	f003 020f 	and.w	r2, r3, #15
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	440a      	add	r2, r1
 800925a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	40013800 	.word	0x40013800
 8009268:	51eb851f 	.word	0x51eb851f

0800926c <siprintf>:
 800926c:	b40e      	push	{r1, r2, r3}
 800926e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009272:	b500      	push	{lr}
 8009274:	b09c      	sub	sp, #112	; 0x70
 8009276:	ab1d      	add	r3, sp, #116	; 0x74
 8009278:	9002      	str	r0, [sp, #8]
 800927a:	9006      	str	r0, [sp, #24]
 800927c:	9107      	str	r1, [sp, #28]
 800927e:	9104      	str	r1, [sp, #16]
 8009280:	4808      	ldr	r0, [pc, #32]	; (80092a4 <siprintf+0x38>)
 8009282:	4909      	ldr	r1, [pc, #36]	; (80092a8 <siprintf+0x3c>)
 8009284:	f853 2b04 	ldr.w	r2, [r3], #4
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	a902      	add	r1, sp, #8
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	f000 f99c 	bl	80095cc <_svfiprintf_r>
 8009294:	2200      	movs	r2, #0
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	b01c      	add	sp, #112	; 0x70
 800929c:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a0:	b003      	add	sp, #12
 80092a2:	4770      	bx	lr
 80092a4:	200000cc 	.word	0x200000cc
 80092a8:	ffff0208 	.word	0xffff0208

080092ac <memset>:
 80092ac:	4603      	mov	r3, r0
 80092ae:	4402      	add	r2, r0
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d100      	bne.n	80092b6 <memset+0xa>
 80092b4:	4770      	bx	lr
 80092b6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ba:	e7f9      	b.n	80092b0 <memset+0x4>

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	200000cc 	.word	0x200000cc

080092c8 <__libc_init_array>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	2600      	movs	r6, #0
 80092cc:	4d0c      	ldr	r5, [pc, #48]	; (8009300 <__libc_init_array+0x38>)
 80092ce:	4c0d      	ldr	r4, [pc, #52]	; (8009304 <__libc_init_array+0x3c>)
 80092d0:	1b64      	subs	r4, r4, r5
 80092d2:	10a4      	asrs	r4, r4, #2
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	d109      	bne.n	80092ec <__libc_init_array+0x24>
 80092d8:	f000 fc7a 	bl	8009bd0 <_init>
 80092dc:	2600      	movs	r6, #0
 80092de:	4d0a      	ldr	r5, [pc, #40]	; (8009308 <__libc_init_array+0x40>)
 80092e0:	4c0a      	ldr	r4, [pc, #40]	; (800930c <__libc_init_array+0x44>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	d105      	bne.n	80092f6 <__libc_init_array+0x2e>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f0:	4798      	blx	r3
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7ee      	b.n	80092d4 <__libc_init_array+0xc>
 80092f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fa:	4798      	blx	r3
 80092fc:	3601      	adds	r6, #1
 80092fe:	e7f2      	b.n	80092e6 <__libc_init_array+0x1e>
 8009300:	0800b49c 	.word	0x0800b49c
 8009304:	0800b49c 	.word	0x0800b49c
 8009308:	0800b49c 	.word	0x0800b49c
 800930c:	0800b4a0 	.word	0x0800b4a0

08009310 <__retarget_lock_acquire_recursive>:
 8009310:	4770      	bx	lr

08009312 <__retarget_lock_release_recursive>:
 8009312:	4770      	bx	lr

08009314 <memcpy>:
 8009314:	440a      	add	r2, r1
 8009316:	4291      	cmp	r1, r2
 8009318:	f100 33ff 	add.w	r3, r0, #4294967295
 800931c:	d100      	bne.n	8009320 <memcpy+0xc>
 800931e:	4770      	bx	lr
 8009320:	b510      	push	{r4, lr}
 8009322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009326:	4291      	cmp	r1, r2
 8009328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932c:	d1f9      	bne.n	8009322 <memcpy+0xe>
 800932e:	bd10      	pop	{r4, pc}

08009330 <_free_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4605      	mov	r5, r0
 8009334:	2900      	cmp	r1, #0
 8009336:	d040      	beq.n	80093ba <_free_r+0x8a>
 8009338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933c:	1f0c      	subs	r4, r1, #4
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfb8      	it	lt
 8009342:	18e4      	addlt	r4, r4, r3
 8009344:	f000 f8dc 	bl	8009500 <__malloc_lock>
 8009348:	4a1c      	ldr	r2, [pc, #112]	; (80093bc <_free_r+0x8c>)
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	b933      	cbnz	r3, 800935c <_free_r+0x2c>
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	6014      	str	r4, [r2, #0]
 8009352:	4628      	mov	r0, r5
 8009354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009358:	f000 b8d8 	b.w	800950c <__malloc_unlock>
 800935c:	42a3      	cmp	r3, r4
 800935e:	d908      	bls.n	8009372 <_free_r+0x42>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	1821      	adds	r1, r4, r0
 8009364:	428b      	cmp	r3, r1
 8009366:	bf01      	itttt	eq
 8009368:	6819      	ldreq	r1, [r3, #0]
 800936a:	685b      	ldreq	r3, [r3, #4]
 800936c:	1809      	addeq	r1, r1, r0
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	e7ed      	b.n	800934e <_free_r+0x1e>
 8009372:	461a      	mov	r2, r3
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b10b      	cbz	r3, 800937c <_free_r+0x4c>
 8009378:	42a3      	cmp	r3, r4
 800937a:	d9fa      	bls.n	8009372 <_free_r+0x42>
 800937c:	6811      	ldr	r1, [r2, #0]
 800937e:	1850      	adds	r0, r2, r1
 8009380:	42a0      	cmp	r0, r4
 8009382:	d10b      	bne.n	800939c <_free_r+0x6c>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	4401      	add	r1, r0
 8009388:	1850      	adds	r0, r2, r1
 800938a:	4283      	cmp	r3, r0
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	d1e0      	bne.n	8009352 <_free_r+0x22>
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4408      	add	r0, r1
 8009396:	6010      	str	r0, [r2, #0]
 8009398:	6053      	str	r3, [r2, #4]
 800939a:	e7da      	b.n	8009352 <_free_r+0x22>
 800939c:	d902      	bls.n	80093a4 <_free_r+0x74>
 800939e:	230c      	movs	r3, #12
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	e7d6      	b.n	8009352 <_free_r+0x22>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	1821      	adds	r1, r4, r0
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf01      	itttt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	1809      	addeq	r1, r1, r0
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	6063      	str	r3, [r4, #4]
 80093b6:	6054      	str	r4, [r2, #4]
 80093b8:	e7cb      	b.n	8009352 <_free_r+0x22>
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	200019a0 	.word	0x200019a0

080093c0 <sbrk_aligned>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4e0e      	ldr	r6, [pc, #56]	; (80093fc <sbrk_aligned+0x3c>)
 80093c4:	460c      	mov	r4, r1
 80093c6:	6831      	ldr	r1, [r6, #0]
 80093c8:	4605      	mov	r5, r0
 80093ca:	b911      	cbnz	r1, 80093d2 <sbrk_aligned+0x12>
 80093cc:	f000 fbaa 	bl	8009b24 <_sbrk_r>
 80093d0:	6030      	str	r0, [r6, #0]
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 fba5 	bl	8009b24 <_sbrk_r>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d00a      	beq.n	80093f4 <sbrk_aligned+0x34>
 80093de:	1cc4      	adds	r4, r0, #3
 80093e0:	f024 0403 	bic.w	r4, r4, #3
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d007      	beq.n	80093f8 <sbrk_aligned+0x38>
 80093e8:	1a21      	subs	r1, r4, r0
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 fb9a 	bl	8009b24 <_sbrk_r>
 80093f0:	3001      	adds	r0, #1
 80093f2:	d101      	bne.n	80093f8 <sbrk_aligned+0x38>
 80093f4:	f04f 34ff 	mov.w	r4, #4294967295
 80093f8:	4620      	mov	r0, r4
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	200019a4 	.word	0x200019a4

08009400 <_malloc_r>:
 8009400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009404:	1ccd      	adds	r5, r1, #3
 8009406:	f025 0503 	bic.w	r5, r5, #3
 800940a:	3508      	adds	r5, #8
 800940c:	2d0c      	cmp	r5, #12
 800940e:	bf38      	it	cc
 8009410:	250c      	movcc	r5, #12
 8009412:	2d00      	cmp	r5, #0
 8009414:	4607      	mov	r7, r0
 8009416:	db01      	blt.n	800941c <_malloc_r+0x1c>
 8009418:	42a9      	cmp	r1, r5
 800941a:	d905      	bls.n	8009428 <_malloc_r+0x28>
 800941c:	230c      	movs	r3, #12
 800941e:	2600      	movs	r6, #0
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4630      	mov	r0, r6
 8009424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009428:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094fc <_malloc_r+0xfc>
 800942c:	f000 f868 	bl	8009500 <__malloc_lock>
 8009430:	f8d8 3000 	ldr.w	r3, [r8]
 8009434:	461c      	mov	r4, r3
 8009436:	bb5c      	cbnz	r4, 8009490 <_malloc_r+0x90>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	f7ff ffc0 	bl	80093c0 <sbrk_aligned>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	4604      	mov	r4, r0
 8009444:	d155      	bne.n	80094f2 <_malloc_r+0xf2>
 8009446:	f8d8 4000 	ldr.w	r4, [r8]
 800944a:	4626      	mov	r6, r4
 800944c:	2e00      	cmp	r6, #0
 800944e:	d145      	bne.n	80094dc <_malloc_r+0xdc>
 8009450:	2c00      	cmp	r4, #0
 8009452:	d048      	beq.n	80094e6 <_malloc_r+0xe6>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	4631      	mov	r1, r6
 8009458:	4638      	mov	r0, r7
 800945a:	eb04 0903 	add.w	r9, r4, r3
 800945e:	f000 fb61 	bl	8009b24 <_sbrk_r>
 8009462:	4581      	cmp	r9, r0
 8009464:	d13f      	bne.n	80094e6 <_malloc_r+0xe6>
 8009466:	6821      	ldr	r1, [r4, #0]
 8009468:	4638      	mov	r0, r7
 800946a:	1a6d      	subs	r5, r5, r1
 800946c:	4629      	mov	r1, r5
 800946e:	f7ff ffa7 	bl	80093c0 <sbrk_aligned>
 8009472:	3001      	adds	r0, #1
 8009474:	d037      	beq.n	80094e6 <_malloc_r+0xe6>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	442b      	add	r3, r5
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	f8d8 3000 	ldr.w	r3, [r8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d038      	beq.n	80094f6 <_malloc_r+0xf6>
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	42a2      	cmp	r2, r4
 8009488:	d12b      	bne.n	80094e2 <_malloc_r+0xe2>
 800948a:	2200      	movs	r2, #0
 800948c:	605a      	str	r2, [r3, #4]
 800948e:	e00f      	b.n	80094b0 <_malloc_r+0xb0>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	1b52      	subs	r2, r2, r5
 8009494:	d41f      	bmi.n	80094d6 <_malloc_r+0xd6>
 8009496:	2a0b      	cmp	r2, #11
 8009498:	d917      	bls.n	80094ca <_malloc_r+0xca>
 800949a:	1961      	adds	r1, r4, r5
 800949c:	42a3      	cmp	r3, r4
 800949e:	6025      	str	r5, [r4, #0]
 80094a0:	bf18      	it	ne
 80094a2:	6059      	strne	r1, [r3, #4]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	bf08      	it	eq
 80094a8:	f8c8 1000 	streq.w	r1, [r8]
 80094ac:	5162      	str	r2, [r4, r5]
 80094ae:	604b      	str	r3, [r1, #4]
 80094b0:	4638      	mov	r0, r7
 80094b2:	f104 060b 	add.w	r6, r4, #11
 80094b6:	f000 f829 	bl	800950c <__malloc_unlock>
 80094ba:	f026 0607 	bic.w	r6, r6, #7
 80094be:	1d23      	adds	r3, r4, #4
 80094c0:	1af2      	subs	r2, r6, r3
 80094c2:	d0ae      	beq.n	8009422 <_malloc_r+0x22>
 80094c4:	1b9b      	subs	r3, r3, r6
 80094c6:	50a3      	str	r3, [r4, r2]
 80094c8:	e7ab      	b.n	8009422 <_malloc_r+0x22>
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	d1dd      	bne.n	800948c <_malloc_r+0x8c>
 80094d0:	f8c8 2000 	str.w	r2, [r8]
 80094d4:	e7ec      	b.n	80094b0 <_malloc_r+0xb0>
 80094d6:	4623      	mov	r3, r4
 80094d8:	6864      	ldr	r4, [r4, #4]
 80094da:	e7ac      	b.n	8009436 <_malloc_r+0x36>
 80094dc:	4634      	mov	r4, r6
 80094de:	6876      	ldr	r6, [r6, #4]
 80094e0:	e7b4      	b.n	800944c <_malloc_r+0x4c>
 80094e2:	4613      	mov	r3, r2
 80094e4:	e7cc      	b.n	8009480 <_malloc_r+0x80>
 80094e6:	230c      	movs	r3, #12
 80094e8:	4638      	mov	r0, r7
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	f000 f80e 	bl	800950c <__malloc_unlock>
 80094f0:	e797      	b.n	8009422 <_malloc_r+0x22>
 80094f2:	6025      	str	r5, [r4, #0]
 80094f4:	e7dc      	b.n	80094b0 <_malloc_r+0xb0>
 80094f6:	605b      	str	r3, [r3, #4]
 80094f8:	deff      	udf	#255	; 0xff
 80094fa:	bf00      	nop
 80094fc:	200019a0 	.word	0x200019a0

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f7ff bf05 	b.w	8009310 <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	2000199c 	.word	0x2000199c

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f7ff bf00 	b.w	8009312 <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	2000199c 	.word	0x2000199c

08009518 <__ssputs_r>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	461f      	mov	r7, r3
 800951e:	688e      	ldr	r6, [r1, #8]
 8009520:	4682      	mov	sl, r0
 8009522:	42be      	cmp	r6, r7
 8009524:	460c      	mov	r4, r1
 8009526:	4690      	mov	r8, r2
 8009528:	680b      	ldr	r3, [r1, #0]
 800952a:	d82c      	bhi.n	8009586 <__ssputs_r+0x6e>
 800952c:	898a      	ldrh	r2, [r1, #12]
 800952e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009532:	d026      	beq.n	8009582 <__ssputs_r+0x6a>
 8009534:	6965      	ldr	r5, [r4, #20]
 8009536:	6909      	ldr	r1, [r1, #16]
 8009538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800953c:	eba3 0901 	sub.w	r9, r3, r1
 8009540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009544:	1c7b      	adds	r3, r7, #1
 8009546:	444b      	add	r3, r9
 8009548:	106d      	asrs	r5, r5, #1
 800954a:	429d      	cmp	r5, r3
 800954c:	bf38      	it	cc
 800954e:	461d      	movcc	r5, r3
 8009550:	0553      	lsls	r3, r2, #21
 8009552:	d527      	bpl.n	80095a4 <__ssputs_r+0x8c>
 8009554:	4629      	mov	r1, r5
 8009556:	f7ff ff53 	bl	8009400 <_malloc_r>
 800955a:	4606      	mov	r6, r0
 800955c:	b360      	cbz	r0, 80095b8 <__ssputs_r+0xa0>
 800955e:	464a      	mov	r2, r9
 8009560:	6921      	ldr	r1, [r4, #16]
 8009562:	f7ff fed7 	bl	8009314 <memcpy>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800956c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	6126      	str	r6, [r4, #16]
 8009574:	444e      	add	r6, r9
 8009576:	6026      	str	r6, [r4, #0]
 8009578:	463e      	mov	r6, r7
 800957a:	6165      	str	r5, [r4, #20]
 800957c:	eba5 0509 	sub.w	r5, r5, r9
 8009580:	60a5      	str	r5, [r4, #8]
 8009582:	42be      	cmp	r6, r7
 8009584:	d900      	bls.n	8009588 <__ssputs_r+0x70>
 8009586:	463e      	mov	r6, r7
 8009588:	4632      	mov	r2, r6
 800958a:	4641      	mov	r1, r8
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	f000 faaf 	bl	8009af0 <memmove>
 8009592:	2000      	movs	r0, #0
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	1b9b      	subs	r3, r3, r6
 8009598:	60a3      	str	r3, [r4, #8]
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	4433      	add	r3, r6
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	462a      	mov	r2, r5
 80095a6:	f000 fadb 	bl	8009b60 <_realloc_r>
 80095aa:	4606      	mov	r6, r0
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1e0      	bne.n	8009572 <__ssputs_r+0x5a>
 80095b0:	4650      	mov	r0, sl
 80095b2:	6921      	ldr	r1, [r4, #16]
 80095b4:	f7ff febc 	bl	8009330 <_free_r>
 80095b8:	230c      	movs	r3, #12
 80095ba:	f8ca 3000 	str.w	r3, [sl]
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	e7e9      	b.n	80095a0 <__ssputs_r+0x88>

080095cc <_svfiprintf_r>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4698      	mov	r8, r3
 80095d2:	898b      	ldrh	r3, [r1, #12]
 80095d4:	4607      	mov	r7, r0
 80095d6:	061b      	lsls	r3, r3, #24
 80095d8:	460d      	mov	r5, r1
 80095da:	4614      	mov	r4, r2
 80095dc:	b09d      	sub	sp, #116	; 0x74
 80095de:	d50e      	bpl.n	80095fe <_svfiprintf_r+0x32>
 80095e0:	690b      	ldr	r3, [r1, #16]
 80095e2:	b963      	cbnz	r3, 80095fe <_svfiprintf_r+0x32>
 80095e4:	2140      	movs	r1, #64	; 0x40
 80095e6:	f7ff ff0b 	bl	8009400 <_malloc_r>
 80095ea:	6028      	str	r0, [r5, #0]
 80095ec:	6128      	str	r0, [r5, #16]
 80095ee:	b920      	cbnz	r0, 80095fa <_svfiprintf_r+0x2e>
 80095f0:	230c      	movs	r3, #12
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e0d0      	b.n	800979c <_svfiprintf_r+0x1d0>
 80095fa:	2340      	movs	r3, #64	; 0x40
 80095fc:	616b      	str	r3, [r5, #20]
 80095fe:	2300      	movs	r3, #0
 8009600:	9309      	str	r3, [sp, #36]	; 0x24
 8009602:	2320      	movs	r3, #32
 8009604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009608:	2330      	movs	r3, #48	; 0x30
 800960a:	f04f 0901 	mov.w	r9, #1
 800960e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009612:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80097b4 <_svfiprintf_r+0x1e8>
 8009616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961a:	4623      	mov	r3, r4
 800961c:	469a      	mov	sl, r3
 800961e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009622:	b10a      	cbz	r2, 8009628 <_svfiprintf_r+0x5c>
 8009624:	2a25      	cmp	r2, #37	; 0x25
 8009626:	d1f9      	bne.n	800961c <_svfiprintf_r+0x50>
 8009628:	ebba 0b04 	subs.w	fp, sl, r4
 800962c:	d00b      	beq.n	8009646 <_svfiprintf_r+0x7a>
 800962e:	465b      	mov	r3, fp
 8009630:	4622      	mov	r2, r4
 8009632:	4629      	mov	r1, r5
 8009634:	4638      	mov	r0, r7
 8009636:	f7ff ff6f 	bl	8009518 <__ssputs_r>
 800963a:	3001      	adds	r0, #1
 800963c:	f000 80a9 	beq.w	8009792 <_svfiprintf_r+0x1c6>
 8009640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009642:	445a      	add	r2, fp
 8009644:	9209      	str	r2, [sp, #36]	; 0x24
 8009646:	f89a 3000 	ldrb.w	r3, [sl]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80a1 	beq.w	8009792 <_svfiprintf_r+0x1c6>
 8009650:	2300      	movs	r3, #0
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965a:	f10a 0a01 	add.w	sl, sl, #1
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	9307      	str	r3, [sp, #28]
 8009662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009666:	931a      	str	r3, [sp, #104]	; 0x68
 8009668:	4654      	mov	r4, sl
 800966a:	2205      	movs	r2, #5
 800966c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009670:	4850      	ldr	r0, [pc, #320]	; (80097b4 <_svfiprintf_r+0x1e8>)
 8009672:	f000 fa67 	bl	8009b44 <memchr>
 8009676:	9a04      	ldr	r2, [sp, #16]
 8009678:	b9d8      	cbnz	r0, 80096b2 <_svfiprintf_r+0xe6>
 800967a:	06d0      	lsls	r0, r2, #27
 800967c:	bf44      	itt	mi
 800967e:	2320      	movmi	r3, #32
 8009680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009684:	0711      	lsls	r1, r2, #28
 8009686:	bf44      	itt	mi
 8009688:	232b      	movmi	r3, #43	; 0x2b
 800968a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968e:	f89a 3000 	ldrb.w	r3, [sl]
 8009692:	2b2a      	cmp	r3, #42	; 0x2a
 8009694:	d015      	beq.n	80096c2 <_svfiprintf_r+0xf6>
 8009696:	4654      	mov	r4, sl
 8009698:	2000      	movs	r0, #0
 800969a:	f04f 0c0a 	mov.w	ip, #10
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	4621      	mov	r1, r4
 80096a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a6:	3b30      	subs	r3, #48	; 0x30
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d94d      	bls.n	8009748 <_svfiprintf_r+0x17c>
 80096ac:	b1b0      	cbz	r0, 80096dc <_svfiprintf_r+0x110>
 80096ae:	9207      	str	r2, [sp, #28]
 80096b0:	e014      	b.n	80096dc <_svfiprintf_r+0x110>
 80096b2:	eba0 0308 	sub.w	r3, r0, r8
 80096b6:	fa09 f303 	lsl.w	r3, r9, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	46a2      	mov	sl, r4
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	e7d2      	b.n	8009668 <_svfiprintf_r+0x9c>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	1d19      	adds	r1, r3, #4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	9103      	str	r1, [sp, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfbb      	ittet	lt
 80096ce:	425b      	neglt	r3, r3
 80096d0:	f042 0202 	orrlt.w	r2, r2, #2
 80096d4:	9307      	strge	r3, [sp, #28]
 80096d6:	9307      	strlt	r3, [sp, #28]
 80096d8:	bfb8      	it	lt
 80096da:	9204      	strlt	r2, [sp, #16]
 80096dc:	7823      	ldrb	r3, [r4, #0]
 80096de:	2b2e      	cmp	r3, #46	; 0x2e
 80096e0:	d10c      	bne.n	80096fc <_svfiprintf_r+0x130>
 80096e2:	7863      	ldrb	r3, [r4, #1]
 80096e4:	2b2a      	cmp	r3, #42	; 0x2a
 80096e6:	d134      	bne.n	8009752 <_svfiprintf_r+0x186>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	3402      	adds	r4, #2
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	9203      	str	r2, [sp, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bfb8      	it	lt
 80096f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80097b8 <_svfiprintf_r+0x1ec>
 8009700:	2203      	movs	r2, #3
 8009702:	4650      	mov	r0, sl
 8009704:	7821      	ldrb	r1, [r4, #0]
 8009706:	f000 fa1d 	bl	8009b44 <memchr>
 800970a:	b138      	cbz	r0, 800971c <_svfiprintf_r+0x150>
 800970c:	2240      	movs	r2, #64	; 0x40
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	eba0 000a 	sub.w	r0, r0, sl
 8009714:	4082      	lsls	r2, r0
 8009716:	4313      	orrs	r3, r2
 8009718:	3401      	adds	r4, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009720:	2206      	movs	r2, #6
 8009722:	4826      	ldr	r0, [pc, #152]	; (80097bc <_svfiprintf_r+0x1f0>)
 8009724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009728:	f000 fa0c 	bl	8009b44 <memchr>
 800972c:	2800      	cmp	r0, #0
 800972e:	d038      	beq.n	80097a2 <_svfiprintf_r+0x1d6>
 8009730:	4b23      	ldr	r3, [pc, #140]	; (80097c0 <_svfiprintf_r+0x1f4>)
 8009732:	bb1b      	cbnz	r3, 800977c <_svfiprintf_r+0x1b0>
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	3307      	adds	r3, #7
 8009738:	f023 0307 	bic.w	r3, r3, #7
 800973c:	3308      	adds	r3, #8
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	4433      	add	r3, r6
 8009744:	9309      	str	r3, [sp, #36]	; 0x24
 8009746:	e768      	b.n	800961a <_svfiprintf_r+0x4e>
 8009748:	460c      	mov	r4, r1
 800974a:	2001      	movs	r0, #1
 800974c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009750:	e7a6      	b.n	80096a0 <_svfiprintf_r+0xd4>
 8009752:	2300      	movs	r3, #0
 8009754:	f04f 0c0a 	mov.w	ip, #10
 8009758:	4619      	mov	r1, r3
 800975a:	3401      	adds	r4, #1
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	4620      	mov	r0, r4
 8009760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009764:	3a30      	subs	r2, #48	; 0x30
 8009766:	2a09      	cmp	r2, #9
 8009768:	d903      	bls.n	8009772 <_svfiprintf_r+0x1a6>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0c6      	beq.n	80096fc <_svfiprintf_r+0x130>
 800976e:	9105      	str	r1, [sp, #20]
 8009770:	e7c4      	b.n	80096fc <_svfiprintf_r+0x130>
 8009772:	4604      	mov	r4, r0
 8009774:	2301      	movs	r3, #1
 8009776:	fb0c 2101 	mla	r1, ip, r1, r2
 800977a:	e7f0      	b.n	800975e <_svfiprintf_r+0x192>
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4638      	mov	r0, r7
 8009784:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <_svfiprintf_r+0x1f8>)
 8009786:	a904      	add	r1, sp, #16
 8009788:	f3af 8000 	nop.w
 800978c:	1c42      	adds	r2, r0, #1
 800978e:	4606      	mov	r6, r0
 8009790:	d1d6      	bne.n	8009740 <_svfiprintf_r+0x174>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	065b      	lsls	r3, r3, #25
 8009796:	f53f af2d 	bmi.w	80095f4 <_svfiprintf_r+0x28>
 800979a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979c:	b01d      	add	sp, #116	; 0x74
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	462a      	mov	r2, r5
 80097a8:	4638      	mov	r0, r7
 80097aa:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <_svfiprintf_r+0x1f8>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	f000 f87d 	bl	80098ac <_printf_i>
 80097b2:	e7eb      	b.n	800978c <_svfiprintf_r+0x1c0>
 80097b4:	0800b45e 	.word	0x0800b45e
 80097b8:	0800b464 	.word	0x0800b464
 80097bc:	0800b468 	.word	0x0800b468
 80097c0:	00000000 	.word	0x00000000
 80097c4:	08009519 	.word	0x08009519

080097c8 <_printf_common>:
 80097c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	4616      	mov	r6, r2
 80097ce:	4699      	mov	r9, r3
 80097d0:	688a      	ldr	r2, [r1, #8]
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	4607      	mov	r7, r0
 80097d6:	4293      	cmp	r3, r2
 80097d8:	bfb8      	it	lt
 80097da:	4613      	movlt	r3, r2
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097e2:	460c      	mov	r4, r1
 80097e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e8:	b10a      	cbz	r2, 80097ee <_printf_common+0x26>
 80097ea:	3301      	adds	r3, #1
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0699      	lsls	r1, r3, #26
 80097f2:	bf42      	ittt	mi
 80097f4:	6833      	ldrmi	r3, [r6, #0]
 80097f6:	3302      	addmi	r3, #2
 80097f8:	6033      	strmi	r3, [r6, #0]
 80097fa:	6825      	ldr	r5, [r4, #0]
 80097fc:	f015 0506 	ands.w	r5, r5, #6
 8009800:	d106      	bne.n	8009810 <_printf_common+0x48>
 8009802:	f104 0a19 	add.w	sl, r4, #25
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	42ab      	cmp	r3, r5
 800980e:	dc2b      	bgt.n	8009868 <_printf_common+0xa0>
 8009810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009814:	1e13      	subs	r3, r2, #0
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	bf18      	it	ne
 800981a:	2301      	movne	r3, #1
 800981c:	0692      	lsls	r2, r2, #26
 800981e:	d430      	bmi.n	8009882 <_printf_common+0xba>
 8009820:	4649      	mov	r1, r9
 8009822:	4638      	mov	r0, r7
 8009824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009828:	47c0      	blx	r8
 800982a:	3001      	adds	r0, #1
 800982c:	d023      	beq.n	8009876 <_printf_common+0xae>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	f003 0306 	and.w	r3, r3, #6
 8009836:	2b04      	cmp	r3, #4
 8009838:	bf14      	ite	ne
 800983a:	2500      	movne	r5, #0
 800983c:	6833      	ldreq	r3, [r6, #0]
 800983e:	f04f 0600 	mov.w	r6, #0
 8009842:	bf08      	it	eq
 8009844:	68e5      	ldreq	r5, [r4, #12]
 8009846:	f104 041a 	add.w	r4, r4, #26
 800984a:	bf08      	it	eq
 800984c:	1aed      	subeq	r5, r5, r3
 800984e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009852:	bf08      	it	eq
 8009854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009858:	4293      	cmp	r3, r2
 800985a:	bfc4      	itt	gt
 800985c:	1a9b      	subgt	r3, r3, r2
 800985e:	18ed      	addgt	r5, r5, r3
 8009860:	42b5      	cmp	r5, r6
 8009862:	d11a      	bne.n	800989a <_printf_common+0xd2>
 8009864:	2000      	movs	r0, #0
 8009866:	e008      	b.n	800987a <_printf_common+0xb2>
 8009868:	2301      	movs	r3, #1
 800986a:	4652      	mov	r2, sl
 800986c:	4649      	mov	r1, r9
 800986e:	4638      	mov	r0, r7
 8009870:	47c0      	blx	r8
 8009872:	3001      	adds	r0, #1
 8009874:	d103      	bne.n	800987e <_printf_common+0xb6>
 8009876:	f04f 30ff 	mov.w	r0, #4294967295
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	3501      	adds	r5, #1
 8009880:	e7c1      	b.n	8009806 <_printf_common+0x3e>
 8009882:	2030      	movs	r0, #48	; 0x30
 8009884:	18e1      	adds	r1, r4, r3
 8009886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009890:	4422      	add	r2, r4
 8009892:	3302      	adds	r3, #2
 8009894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009898:	e7c2      	b.n	8009820 <_printf_common+0x58>
 800989a:	2301      	movs	r3, #1
 800989c:	4622      	mov	r2, r4
 800989e:	4649      	mov	r1, r9
 80098a0:	4638      	mov	r0, r7
 80098a2:	47c0      	blx	r8
 80098a4:	3001      	adds	r0, #1
 80098a6:	d0e6      	beq.n	8009876 <_printf_common+0xae>
 80098a8:	3601      	adds	r6, #1
 80098aa:	e7d9      	b.n	8009860 <_printf_common+0x98>

080098ac <_printf_i>:
 80098ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	7e0f      	ldrb	r7, [r1, #24]
 80098b2:	4691      	mov	r9, r2
 80098b4:	2f78      	cmp	r7, #120	; 0x78
 80098b6:	4680      	mov	r8, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	469a      	mov	sl, r3
 80098bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098c2:	d807      	bhi.n	80098d4 <_printf_i+0x28>
 80098c4:	2f62      	cmp	r7, #98	; 0x62
 80098c6:	d80a      	bhi.n	80098de <_printf_i+0x32>
 80098c8:	2f00      	cmp	r7, #0
 80098ca:	f000 80d5 	beq.w	8009a78 <_printf_i+0x1cc>
 80098ce:	2f58      	cmp	r7, #88	; 0x58
 80098d0:	f000 80c1 	beq.w	8009a56 <_printf_i+0x1aa>
 80098d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098dc:	e03a      	b.n	8009954 <_printf_i+0xa8>
 80098de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e2:	2b15      	cmp	r3, #21
 80098e4:	d8f6      	bhi.n	80098d4 <_printf_i+0x28>
 80098e6:	a101      	add	r1, pc, #4	; (adr r1, 80098ec <_printf_i+0x40>)
 80098e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ec:	08009945 	.word	0x08009945
 80098f0:	08009959 	.word	0x08009959
 80098f4:	080098d5 	.word	0x080098d5
 80098f8:	080098d5 	.word	0x080098d5
 80098fc:	080098d5 	.word	0x080098d5
 8009900:	080098d5 	.word	0x080098d5
 8009904:	08009959 	.word	0x08009959
 8009908:	080098d5 	.word	0x080098d5
 800990c:	080098d5 	.word	0x080098d5
 8009910:	080098d5 	.word	0x080098d5
 8009914:	080098d5 	.word	0x080098d5
 8009918:	08009a5f 	.word	0x08009a5f
 800991c:	08009985 	.word	0x08009985
 8009920:	08009a19 	.word	0x08009a19
 8009924:	080098d5 	.word	0x080098d5
 8009928:	080098d5 	.word	0x080098d5
 800992c:	08009a81 	.word	0x08009a81
 8009930:	080098d5 	.word	0x080098d5
 8009934:	08009985 	.word	0x08009985
 8009938:	080098d5 	.word	0x080098d5
 800993c:	080098d5 	.word	0x080098d5
 8009940:	08009a21 	.word	0x08009a21
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009954:	2301      	movs	r3, #1
 8009956:	e0a0      	b.n	8009a9a <_printf_i+0x1ee>
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	0607      	lsls	r7, r0, #24
 800995e:	f103 0104 	add.w	r1, r3, #4
 8009962:	6029      	str	r1, [r5, #0]
 8009964:	d501      	bpl.n	800996a <_printf_i+0xbe>
 8009966:	681e      	ldr	r6, [r3, #0]
 8009968:	e003      	b.n	8009972 <_printf_i+0xc6>
 800996a:	0646      	lsls	r6, r0, #25
 800996c:	d5fb      	bpl.n	8009966 <_printf_i+0xba>
 800996e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009972:	2e00      	cmp	r6, #0
 8009974:	da03      	bge.n	800997e <_printf_i+0xd2>
 8009976:	232d      	movs	r3, #45	; 0x2d
 8009978:	4276      	negs	r6, r6
 800997a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800997e:	230a      	movs	r3, #10
 8009980:	4859      	ldr	r0, [pc, #356]	; (8009ae8 <_printf_i+0x23c>)
 8009982:	e012      	b.n	80099aa <_printf_i+0xfe>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	6820      	ldr	r0, [r4, #0]
 8009988:	1d19      	adds	r1, r3, #4
 800998a:	6029      	str	r1, [r5, #0]
 800998c:	0605      	lsls	r5, r0, #24
 800998e:	d501      	bpl.n	8009994 <_printf_i+0xe8>
 8009990:	681e      	ldr	r6, [r3, #0]
 8009992:	e002      	b.n	800999a <_printf_i+0xee>
 8009994:	0641      	lsls	r1, r0, #25
 8009996:	d5fb      	bpl.n	8009990 <_printf_i+0xe4>
 8009998:	881e      	ldrh	r6, [r3, #0]
 800999a:	2f6f      	cmp	r7, #111	; 0x6f
 800999c:	bf0c      	ite	eq
 800999e:	2308      	moveq	r3, #8
 80099a0:	230a      	movne	r3, #10
 80099a2:	4851      	ldr	r0, [pc, #324]	; (8009ae8 <_printf_i+0x23c>)
 80099a4:	2100      	movs	r1, #0
 80099a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099aa:	6865      	ldr	r5, [r4, #4]
 80099ac:	2d00      	cmp	r5, #0
 80099ae:	bfa8      	it	ge
 80099b0:	6821      	ldrge	r1, [r4, #0]
 80099b2:	60a5      	str	r5, [r4, #8]
 80099b4:	bfa4      	itt	ge
 80099b6:	f021 0104 	bicge.w	r1, r1, #4
 80099ba:	6021      	strge	r1, [r4, #0]
 80099bc:	b90e      	cbnz	r6, 80099c2 <_printf_i+0x116>
 80099be:	2d00      	cmp	r5, #0
 80099c0:	d04b      	beq.n	8009a5a <_printf_i+0x1ae>
 80099c2:	4615      	mov	r5, r2
 80099c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80099c8:	fb03 6711 	mls	r7, r3, r1, r6
 80099cc:	5dc7      	ldrb	r7, [r0, r7]
 80099ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099d2:	4637      	mov	r7, r6
 80099d4:	42bb      	cmp	r3, r7
 80099d6:	460e      	mov	r6, r1
 80099d8:	d9f4      	bls.n	80099c4 <_printf_i+0x118>
 80099da:	2b08      	cmp	r3, #8
 80099dc:	d10b      	bne.n	80099f6 <_printf_i+0x14a>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	07de      	lsls	r6, r3, #31
 80099e2:	d508      	bpl.n	80099f6 <_printf_i+0x14a>
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	6861      	ldr	r1, [r4, #4]
 80099e8:	4299      	cmp	r1, r3
 80099ea:	bfde      	ittt	le
 80099ec:	2330      	movle	r3, #48	; 0x30
 80099ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099f6:	1b52      	subs	r2, r2, r5
 80099f8:	6122      	str	r2, [r4, #16]
 80099fa:	464b      	mov	r3, r9
 80099fc:	4621      	mov	r1, r4
 80099fe:	4640      	mov	r0, r8
 8009a00:	f8cd a000 	str.w	sl, [sp]
 8009a04:	aa03      	add	r2, sp, #12
 8009a06:	f7ff fedf 	bl	80097c8 <_printf_common>
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d14a      	bne.n	8009aa4 <_printf_i+0x1f8>
 8009a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a12:	b004      	add	sp, #16
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	f043 0320 	orr.w	r3, r3, #32
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	2778      	movs	r7, #120	; 0x78
 8009a22:	4832      	ldr	r0, [pc, #200]	; (8009aec <_printf_i+0x240>)
 8009a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	6829      	ldr	r1, [r5, #0]
 8009a2c:	061f      	lsls	r7, r3, #24
 8009a2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a32:	d402      	bmi.n	8009a3a <_printf_i+0x18e>
 8009a34:	065f      	lsls	r7, r3, #25
 8009a36:	bf48      	it	mi
 8009a38:	b2b6      	uxthmi	r6, r6
 8009a3a:	07df      	lsls	r7, r3, #31
 8009a3c:	bf48      	it	mi
 8009a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a42:	6029      	str	r1, [r5, #0]
 8009a44:	bf48      	it	mi
 8009a46:	6023      	strmi	r3, [r4, #0]
 8009a48:	b91e      	cbnz	r6, 8009a52 <_printf_i+0x1a6>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f023 0320 	bic.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	2310      	movs	r3, #16
 8009a54:	e7a6      	b.n	80099a4 <_printf_i+0xf8>
 8009a56:	4824      	ldr	r0, [pc, #144]	; (8009ae8 <_printf_i+0x23c>)
 8009a58:	e7e4      	b.n	8009a24 <_printf_i+0x178>
 8009a5a:	4615      	mov	r5, r2
 8009a5c:	e7bd      	b.n	80099da <_printf_i+0x12e>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	6826      	ldr	r6, [r4, #0]
 8009a62:	1d18      	adds	r0, r3, #4
 8009a64:	6961      	ldr	r1, [r4, #20]
 8009a66:	6028      	str	r0, [r5, #0]
 8009a68:	0635      	lsls	r5, r6, #24
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	d501      	bpl.n	8009a72 <_printf_i+0x1c6>
 8009a6e:	6019      	str	r1, [r3, #0]
 8009a70:	e002      	b.n	8009a78 <_printf_i+0x1cc>
 8009a72:	0670      	lsls	r0, r6, #25
 8009a74:	d5fb      	bpl.n	8009a6e <_printf_i+0x1c2>
 8009a76:	8019      	strh	r1, [r3, #0]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4615      	mov	r5, r2
 8009a7c:	6123      	str	r3, [r4, #16]
 8009a7e:	e7bc      	b.n	80099fa <_printf_i+0x14e>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	2100      	movs	r1, #0
 8009a84:	1d1a      	adds	r2, r3, #4
 8009a86:	602a      	str	r2, [r5, #0]
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	6862      	ldr	r2, [r4, #4]
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 f859 	bl	8009b44 <memchr>
 8009a92:	b108      	cbz	r0, 8009a98 <_printf_i+0x1ec>
 8009a94:	1b40      	subs	r0, r0, r5
 8009a96:	6060      	str	r0, [r4, #4]
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	6123      	str	r3, [r4, #16]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa2:	e7aa      	b.n	80099fa <_printf_i+0x14e>
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	47d0      	blx	sl
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d0ad      	beq.n	8009a0e <_printf_i+0x162>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	079b      	lsls	r3, r3, #30
 8009ab6:	d413      	bmi.n	8009ae0 <_printf_i+0x234>
 8009ab8:	68e0      	ldr	r0, [r4, #12]
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	4298      	cmp	r0, r3
 8009abe:	bfb8      	it	lt
 8009ac0:	4618      	movlt	r0, r3
 8009ac2:	e7a6      	b.n	8009a12 <_printf_i+0x166>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4640      	mov	r0, r8
 8009acc:	47d0      	blx	sl
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d09d      	beq.n	8009a0e <_printf_i+0x162>
 8009ad2:	3501      	adds	r5, #1
 8009ad4:	68e3      	ldr	r3, [r4, #12]
 8009ad6:	9903      	ldr	r1, [sp, #12]
 8009ad8:	1a5b      	subs	r3, r3, r1
 8009ada:	42ab      	cmp	r3, r5
 8009adc:	dcf2      	bgt.n	8009ac4 <_printf_i+0x218>
 8009ade:	e7eb      	b.n	8009ab8 <_printf_i+0x20c>
 8009ae0:	2500      	movs	r5, #0
 8009ae2:	f104 0619 	add.w	r6, r4, #25
 8009ae6:	e7f5      	b.n	8009ad4 <_printf_i+0x228>
 8009ae8:	0800b46f 	.word	0x0800b46f
 8009aec:	0800b480 	.word	0x0800b480

08009af0 <memmove>:
 8009af0:	4288      	cmp	r0, r1
 8009af2:	b510      	push	{r4, lr}
 8009af4:	eb01 0402 	add.w	r4, r1, r2
 8009af8:	d902      	bls.n	8009b00 <memmove+0x10>
 8009afa:	4284      	cmp	r4, r0
 8009afc:	4623      	mov	r3, r4
 8009afe:	d807      	bhi.n	8009b10 <memmove+0x20>
 8009b00:	1e43      	subs	r3, r0, #1
 8009b02:	42a1      	cmp	r1, r4
 8009b04:	d008      	beq.n	8009b18 <memmove+0x28>
 8009b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b0e:	e7f8      	b.n	8009b02 <memmove+0x12>
 8009b10:	4601      	mov	r1, r0
 8009b12:	4402      	add	r2, r0
 8009b14:	428a      	cmp	r2, r1
 8009b16:	d100      	bne.n	8009b1a <memmove+0x2a>
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b22:	e7f7      	b.n	8009b14 <memmove+0x24>

08009b24 <_sbrk_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	2300      	movs	r3, #0
 8009b28:	4d05      	ldr	r5, [pc, #20]	; (8009b40 <_sbrk_r+0x1c>)
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f7fb fc2e 	bl	8005390 <_sbrk>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_sbrk_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_sbrk_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20001998 	.word	0x20001998

08009b44 <memchr>:
 8009b44:	4603      	mov	r3, r0
 8009b46:	b510      	push	{r4, lr}
 8009b48:	b2c9      	uxtb	r1, r1
 8009b4a:	4402      	add	r2, r0
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	d101      	bne.n	8009b56 <memchr+0x12>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e003      	b.n	8009b5e <memchr+0x1a>
 8009b56:	7804      	ldrb	r4, [r0, #0]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	428c      	cmp	r4, r1
 8009b5c:	d1f6      	bne.n	8009b4c <memchr+0x8>
 8009b5e:	bd10      	pop	{r4, pc}

08009b60 <_realloc_r>:
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	4680      	mov	r8, r0
 8009b66:	4614      	mov	r4, r2
 8009b68:	460e      	mov	r6, r1
 8009b6a:	b921      	cbnz	r1, 8009b76 <_realloc_r+0x16>
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b72:	f7ff bc45 	b.w	8009400 <_malloc_r>
 8009b76:	b92a      	cbnz	r2, 8009b84 <_realloc_r+0x24>
 8009b78:	f7ff fbda 	bl	8009330 <_free_r>
 8009b7c:	4625      	mov	r5, r4
 8009b7e:	4628      	mov	r0, r5
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	f000 f81b 	bl	8009bbe <_malloc_usable_size_r>
 8009b88:	4284      	cmp	r4, r0
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	d802      	bhi.n	8009b94 <_realloc_r+0x34>
 8009b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b92:	d812      	bhi.n	8009bba <_realloc_r+0x5a>
 8009b94:	4621      	mov	r1, r4
 8009b96:	4640      	mov	r0, r8
 8009b98:	f7ff fc32 	bl	8009400 <_malloc_r>
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d0ed      	beq.n	8009b7e <_realloc_r+0x1e>
 8009ba2:	42bc      	cmp	r4, r7
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	bf28      	it	cs
 8009baa:	463a      	movcs	r2, r7
 8009bac:	f7ff fbb2 	bl	8009314 <memcpy>
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	f7ff fbbc 	bl	8009330 <_free_r>
 8009bb8:	e7e1      	b.n	8009b7e <_realloc_r+0x1e>
 8009bba:	4635      	mov	r5, r6
 8009bbc:	e7df      	b.n	8009b7e <_realloc_r+0x1e>

08009bbe <_malloc_usable_size_r>:
 8009bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc2:	1f18      	subs	r0, r3, #4
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	bfbc      	itt	lt
 8009bc8:	580b      	ldrlt	r3, [r1, r0]
 8009bca:	18c0      	addlt	r0, r0, r3
 8009bcc:	4770      	bx	lr
	...

08009bd0 <_init>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr

08009bdc <_fini>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr
