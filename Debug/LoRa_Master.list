
LoRa_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .config_LoRa  00000004  0801fc04  0801fc04  0003fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f314  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e10  0800f428  0800f428  0001f428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011238  08011238  0003fc08  2**0
                  CONTENTS
  5 .ARM          00000008  08011238  08011238  00021238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011240  08011240  0003fc08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011240  08011240  00021240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011244  08011244  00021244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000290  20000000  08011248  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000019e4  20000290  080114d8  00030290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001c74  080114d8  00031c74  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0003fc08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003fc31  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b9c7  00000000  00000000  0003fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045e8  00000000  00000000  0005b63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  0005fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000148f  00000000  00000000  000615e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cf94  00000000  00000000  00062a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020613  00000000  00000000  0007fa03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00096165  00000000  00000000  000a0016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008044  00000000  00000000  0013617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000290 	.word	0x20000290
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f40c 	.word	0x0800f40c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000294 	.word	0x20000294
 800014c:	0800f40c 	.word	0x0800f40c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__aeabi_uldivmod>:
 8001070:	b953      	cbnz	r3, 8001088 <__aeabi_uldivmod+0x18>
 8001072:	b94a      	cbnz	r2, 8001088 <__aeabi_uldivmod+0x18>
 8001074:	2900      	cmp	r1, #0
 8001076:	bf08      	it	eq
 8001078:	2800      	cmpeq	r0, #0
 800107a:	bf1c      	itt	ne
 800107c:	f04f 31ff 	movne.w	r1, #4294967295
 8001080:	f04f 30ff 	movne.w	r0, #4294967295
 8001084:	f000 b972 	b.w	800136c <__aeabi_idiv0>
 8001088:	f1ad 0c08 	sub.w	ip, sp, #8
 800108c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001090:	f000 f806 	bl	80010a0 <__udivmoddi4>
 8001094:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109c:	b004      	add	sp, #16
 800109e:	4770      	bx	lr

080010a0 <__udivmoddi4>:
 80010a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a4:	9e08      	ldr	r6, [sp, #32]
 80010a6:	460d      	mov	r5, r1
 80010a8:	4604      	mov	r4, r0
 80010aa:	468e      	mov	lr, r1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d14c      	bne.n	800114a <__udivmoddi4+0xaa>
 80010b0:	428a      	cmp	r2, r1
 80010b2:	4694      	mov	ip, r2
 80010b4:	d967      	bls.n	8001186 <__udivmoddi4+0xe6>
 80010b6:	fab2 f382 	clz	r3, r2
 80010ba:	b153      	cbz	r3, 80010d2 <__udivmoddi4+0x32>
 80010bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80010c0:	f1c3 0220 	rsb	r2, r3, #32
 80010c4:	fa01 fe03 	lsl.w	lr, r1, r3
 80010c8:	fa20 f202 	lsr.w	r2, r0, r2
 80010cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80010d0:	409c      	lsls	r4, r3
 80010d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d6:	fbbe f1f7 	udiv	r1, lr, r7
 80010da:	fa1f f58c 	uxth.w	r5, ip
 80010de:	fb07 ee11 	mls	lr, r7, r1, lr
 80010e2:	fb01 f005 	mul.w	r0, r1, r5
 80010e6:	0c22      	lsrs	r2, r4, #16
 80010e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80010ec:	4290      	cmp	r0, r2
 80010ee:	d90a      	bls.n	8001106 <__udivmoddi4+0x66>
 80010f0:	eb1c 0202 	adds.w	r2, ip, r2
 80010f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80010f8:	f080 8119 	bcs.w	800132e <__udivmoddi4+0x28e>
 80010fc:	4290      	cmp	r0, r2
 80010fe:	f240 8116 	bls.w	800132e <__udivmoddi4+0x28e>
 8001102:	3902      	subs	r1, #2
 8001104:	4462      	add	r2, ip
 8001106:	1a12      	subs	r2, r2, r0
 8001108:	fbb2 f0f7 	udiv	r0, r2, r7
 800110c:	fb07 2210 	mls	r2, r7, r0, r2
 8001110:	fb00 f505 	mul.w	r5, r0, r5
 8001114:	b2a4      	uxth	r4, r4
 8001116:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800111a:	42a5      	cmp	r5, r4
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x94>
 800111e:	eb1c 0404 	adds.w	r4, ip, r4
 8001122:	f100 32ff 	add.w	r2, r0, #4294967295
 8001126:	f080 8104 	bcs.w	8001332 <__udivmoddi4+0x292>
 800112a:	42a5      	cmp	r5, r4
 800112c:	f240 8101 	bls.w	8001332 <__udivmoddi4+0x292>
 8001130:	4464      	add	r4, ip
 8001132:	3802      	subs	r0, #2
 8001134:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001138:	2100      	movs	r1, #0
 800113a:	1b64      	subs	r4, r4, r5
 800113c:	b11e      	cbz	r6, 8001146 <__udivmoddi4+0xa6>
 800113e:	40dc      	lsrs	r4, r3
 8001140:	2300      	movs	r3, #0
 8001142:	e9c6 4300 	strd	r4, r3, [r6]
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114a:	428b      	cmp	r3, r1
 800114c:	d908      	bls.n	8001160 <__udivmoddi4+0xc0>
 800114e:	2e00      	cmp	r6, #0
 8001150:	f000 80ea 	beq.w	8001328 <__udivmoddi4+0x288>
 8001154:	2100      	movs	r1, #0
 8001156:	e9c6 0500 	strd	r0, r5, [r6]
 800115a:	4608      	mov	r0, r1
 800115c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001160:	fab3 f183 	clz	r1, r3
 8001164:	2900      	cmp	r1, #0
 8001166:	d148      	bne.n	80011fa <__udivmoddi4+0x15a>
 8001168:	42ab      	cmp	r3, r5
 800116a:	d302      	bcc.n	8001172 <__udivmoddi4+0xd2>
 800116c:	4282      	cmp	r2, r0
 800116e:	f200 80f8 	bhi.w	8001362 <__udivmoddi4+0x2c2>
 8001172:	1a84      	subs	r4, r0, r2
 8001174:	eb65 0203 	sbc.w	r2, r5, r3
 8001178:	2001      	movs	r0, #1
 800117a:	4696      	mov	lr, r2
 800117c:	2e00      	cmp	r6, #0
 800117e:	d0e2      	beq.n	8001146 <__udivmoddi4+0xa6>
 8001180:	e9c6 4e00 	strd	r4, lr, [r6]
 8001184:	e7df      	b.n	8001146 <__udivmoddi4+0xa6>
 8001186:	b902      	cbnz	r2, 800118a <__udivmoddi4+0xea>
 8001188:	deff      	udf	#255	; 0xff
 800118a:	fab2 f382 	clz	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 808e 	bne.w	80012b0 <__udivmoddi4+0x210>
 8001194:	1a88      	subs	r0, r1, r2
 8001196:	2101      	movs	r1, #1
 8001198:	0c17      	lsrs	r7, r2, #16
 800119a:	fa1f fe82 	uxth.w	lr, r2
 800119e:	fbb0 f5f7 	udiv	r5, r0, r7
 80011a2:	fb07 0015 	mls	r0, r7, r5, r0
 80011a6:	0c22      	lsrs	r2, r4, #16
 80011a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011ac:	fb0e f005 	mul.w	r0, lr, r5
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d908      	bls.n	80011c6 <__udivmoddi4+0x126>
 80011b4:	eb1c 0202 	adds.w	r2, ip, r2
 80011b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011bc:	d202      	bcs.n	80011c4 <__udivmoddi4+0x124>
 80011be:	4290      	cmp	r0, r2
 80011c0:	f200 80cc 	bhi.w	800135c <__udivmoddi4+0x2bc>
 80011c4:	4645      	mov	r5, r8
 80011c6:	1a12      	subs	r2, r2, r0
 80011c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80011cc:	fb07 2210 	mls	r2, r7, r0, r2
 80011d0:	fb0e fe00 	mul.w	lr, lr, r0
 80011d4:	b2a4      	uxth	r4, r4
 80011d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011da:	45a6      	cmp	lr, r4
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x150>
 80011de:	eb1c 0404 	adds.w	r4, ip, r4
 80011e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80011e6:	d202      	bcs.n	80011ee <__udivmoddi4+0x14e>
 80011e8:	45a6      	cmp	lr, r4
 80011ea:	f200 80b4 	bhi.w	8001356 <__udivmoddi4+0x2b6>
 80011ee:	4610      	mov	r0, r2
 80011f0:	eba4 040e 	sub.w	r4, r4, lr
 80011f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f8:	e7a0      	b.n	800113c <__udivmoddi4+0x9c>
 80011fa:	f1c1 0720 	rsb	r7, r1, #32
 80011fe:	408b      	lsls	r3, r1
 8001200:	fa22 fc07 	lsr.w	ip, r2, r7
 8001204:	ea4c 0c03 	orr.w	ip, ip, r3
 8001208:	fa25 fa07 	lsr.w	sl, r5, r7
 800120c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001210:	fbba f8f9 	udiv	r8, sl, r9
 8001214:	408d      	lsls	r5, r1
 8001216:	fa20 f307 	lsr.w	r3, r0, r7
 800121a:	fb09 aa18 	mls	sl, r9, r8, sl
 800121e:	fa1f fe8c 	uxth.w	lr, ip
 8001222:	432b      	orrs	r3, r5
 8001224:	fa00 f501 	lsl.w	r5, r0, r1
 8001228:	fb08 f00e 	mul.w	r0, r8, lr
 800122c:	0c1c      	lsrs	r4, r3, #16
 800122e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001232:	42a0      	cmp	r0, r4
 8001234:	fa02 f201 	lsl.w	r2, r2, r1
 8001238:	d90b      	bls.n	8001252 <__udivmoddi4+0x1b2>
 800123a:	eb1c 0404 	adds.w	r4, ip, r4
 800123e:	f108 3aff 	add.w	sl, r8, #4294967295
 8001242:	f080 8086 	bcs.w	8001352 <__udivmoddi4+0x2b2>
 8001246:	42a0      	cmp	r0, r4
 8001248:	f240 8083 	bls.w	8001352 <__udivmoddi4+0x2b2>
 800124c:	f1a8 0802 	sub.w	r8, r8, #2
 8001250:	4464      	add	r4, ip
 8001252:	1a24      	subs	r4, r4, r0
 8001254:	b298      	uxth	r0, r3
 8001256:	fbb4 f3f9 	udiv	r3, r4, r9
 800125a:	fb09 4413 	mls	r4, r9, r3, r4
 800125e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001262:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001266:	45a6      	cmp	lr, r4
 8001268:	d908      	bls.n	800127c <__udivmoddi4+0x1dc>
 800126a:	eb1c 0404 	adds.w	r4, ip, r4
 800126e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001272:	d26a      	bcs.n	800134a <__udivmoddi4+0x2aa>
 8001274:	45a6      	cmp	lr, r4
 8001276:	d968      	bls.n	800134a <__udivmoddi4+0x2aa>
 8001278:	3b02      	subs	r3, #2
 800127a:	4464      	add	r4, ip
 800127c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001280:	fba0 9302 	umull	r9, r3, r0, r2
 8001284:	eba4 040e 	sub.w	r4, r4, lr
 8001288:	429c      	cmp	r4, r3
 800128a:	46c8      	mov	r8, r9
 800128c:	469e      	mov	lr, r3
 800128e:	d354      	bcc.n	800133a <__udivmoddi4+0x29a>
 8001290:	d051      	beq.n	8001336 <__udivmoddi4+0x296>
 8001292:	2e00      	cmp	r6, #0
 8001294:	d067      	beq.n	8001366 <__udivmoddi4+0x2c6>
 8001296:	ebb5 0308 	subs.w	r3, r5, r8
 800129a:	eb64 040e 	sbc.w	r4, r4, lr
 800129e:	40cb      	lsrs	r3, r1
 80012a0:	fa04 f707 	lsl.w	r7, r4, r7
 80012a4:	431f      	orrs	r7, r3
 80012a6:	40cc      	lsrs	r4, r1
 80012a8:	e9c6 7400 	strd	r7, r4, [r6]
 80012ac:	2100      	movs	r1, #0
 80012ae:	e74a      	b.n	8001146 <__udivmoddi4+0xa6>
 80012b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b4:	f1c3 0020 	rsb	r0, r3, #32
 80012b8:	40c1      	lsrs	r1, r0
 80012ba:	409d      	lsls	r5, r3
 80012bc:	fa24 f000 	lsr.w	r0, r4, r0
 80012c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c4:	4328      	orrs	r0, r5
 80012c6:	fbb1 f5f7 	udiv	r5, r1, r7
 80012ca:	fb07 1115 	mls	r1, r7, r5, r1
 80012ce:	fa1f fe8c 	uxth.w	lr, ip
 80012d2:	0c02      	lsrs	r2, r0, #16
 80012d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d8:	fb05 f10e 	mul.w	r1, r5, lr
 80012dc:	4291      	cmp	r1, r2
 80012de:	fa04 f403 	lsl.w	r4, r4, r3
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0x256>
 80012e4:	eb1c 0202 	adds.w	r2, ip, r2
 80012e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80012ec:	d22f      	bcs.n	800134e <__udivmoddi4+0x2ae>
 80012ee:	4291      	cmp	r1, r2
 80012f0:	d92d      	bls.n	800134e <__udivmoddi4+0x2ae>
 80012f2:	3d02      	subs	r5, #2
 80012f4:	4462      	add	r2, ip
 80012f6:	1a52      	subs	r2, r2, r1
 80012f8:	fbb2 f1f7 	udiv	r1, r2, r7
 80012fc:	fb07 2211 	mls	r2, r7, r1, r2
 8001300:	b280      	uxth	r0, r0
 8001302:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001306:	fb01 f20e 	mul.w	r2, r1, lr
 800130a:	4282      	cmp	r2, r0
 800130c:	d908      	bls.n	8001320 <__udivmoddi4+0x280>
 800130e:	eb1c 0000 	adds.w	r0, ip, r0
 8001312:	f101 38ff 	add.w	r8, r1, #4294967295
 8001316:	d216      	bcs.n	8001346 <__udivmoddi4+0x2a6>
 8001318:	4282      	cmp	r2, r0
 800131a:	d914      	bls.n	8001346 <__udivmoddi4+0x2a6>
 800131c:	3902      	subs	r1, #2
 800131e:	4460      	add	r0, ip
 8001320:	1a80      	subs	r0, r0, r2
 8001322:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001326:	e73a      	b.n	800119e <__udivmoddi4+0xfe>
 8001328:	4631      	mov	r1, r6
 800132a:	4630      	mov	r0, r6
 800132c:	e70b      	b.n	8001146 <__udivmoddi4+0xa6>
 800132e:	4671      	mov	r1, lr
 8001330:	e6e9      	b.n	8001106 <__udivmoddi4+0x66>
 8001332:	4610      	mov	r0, r2
 8001334:	e6fe      	b.n	8001134 <__udivmoddi4+0x94>
 8001336:	454d      	cmp	r5, r9
 8001338:	d2ab      	bcs.n	8001292 <__udivmoddi4+0x1f2>
 800133a:	ebb9 0802 	subs.w	r8, r9, r2
 800133e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001342:	3801      	subs	r0, #1
 8001344:	e7a5      	b.n	8001292 <__udivmoddi4+0x1f2>
 8001346:	4641      	mov	r1, r8
 8001348:	e7ea      	b.n	8001320 <__udivmoddi4+0x280>
 800134a:	4603      	mov	r3, r0
 800134c:	e796      	b.n	800127c <__udivmoddi4+0x1dc>
 800134e:	4645      	mov	r5, r8
 8001350:	e7d1      	b.n	80012f6 <__udivmoddi4+0x256>
 8001352:	46d0      	mov	r8, sl
 8001354:	e77d      	b.n	8001252 <__udivmoddi4+0x1b2>
 8001356:	4464      	add	r4, ip
 8001358:	3802      	subs	r0, #2
 800135a:	e749      	b.n	80011f0 <__udivmoddi4+0x150>
 800135c:	3d02      	subs	r5, #2
 800135e:	4462      	add	r2, ip
 8001360:	e731      	b.n	80011c6 <__udivmoddi4+0x126>
 8001362:	4608      	mov	r0, r1
 8001364:	e70a      	b.n	800117c <__udivmoddi4+0xdc>
 8001366:	4631      	mov	r1, r6
 8001368:	e6ed      	b.n	8001146 <__udivmoddi4+0xa6>
 800136a:	bf00      	nop

0800136c <__aeabi_idiv0>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <Encrypt_Address_Read_Init>:
static uint32_t gl_u32CRC_FragmentFW;
struct AES_ctx ctx_fw;
struct AES_ctx ctx_fw_des;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void Encrypt_Address_Read_Init(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	gl_ReadAddress = STORE_AREA_START_ADDRESS;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <Encrypt_Address_Read_Init+0x18>)
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <Encrypt_Address_Read_Init+0x1c>)
 8001378:	601a      	str	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_fw_des, AES_CBC_128_Key, AES_CBC_128_IV);
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <Encrypt_Address_Read_Init+0x20>)
 800137c:	4905      	ldr	r1, [pc, #20]	; (8001394 <Encrypt_Address_Read_Init+0x24>)
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <Encrypt_Address_Read_Init+0x28>)
 8001380:	f004 fc98 	bl	8005cb4 <AES_init_ctx_iv>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000340 	.word	0x20000340
 800138c:	08012800 	.word	0x08012800
 8001390:	20000010 	.word	0x20000010
 8001394:	20000000 	.word	0x20000000
 8001398:	2000040c 	.word	0x2000040c

0800139c <Calculate_CRC_firmware>:
uint32_t Calculate_CRC_firmware(uint8_t *buffer_firmware){
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32CRC_Code = INITIAL_VALUE_ZERO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
	RCC->AHBENR |=0x40;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <Calculate_CRC_firmware+0x88>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <Calculate_CRC_firmware+0x88>)
 80013ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b2:	6153      	str	r3, [r2, #20]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	609a      	str	r2, [r3, #8]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e024      	b.n	800140a <Calculate_CRC_firmware+0x6e>
		/* Calculate CRC */
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3303      	adds	r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	061a      	lsls	r2, r3, #24
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
									   |(buffer_firmware[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer_firmware[Local_u8Count*4] <<SHIFT_0_BIT);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	440b      	add	r3, r1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4313      	orrs	r3, r2
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4611      	mov	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	440a      	add	r2, r1
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	4313      	orrs	r3, r2
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80013fc:	60bb      	str	r3, [r7, #8]
		CRC->DR  = Local_u32CRC_Code;
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	6013      	str	r3, [r2, #0]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d9d7      	bls.n	80013c0 <Calculate_CRC_firmware+0x24>
	}
	Local_u32CRC_Code = CRC->DR;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Calculate_CRC_firmware+0x8c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]
	return Local_u32CRC_Code;
 8001416:	68bb      	ldr	r3, [r7, #8]

}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40023000 	.word	0x40023000

0800142c <Encrypt_MainFunc>:
void Encrypt_MainFunc()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	gl_u32CRC_FragmentFW = INITIAL_VALUE_ZERO;
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <Encrypt_MainFunc+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	uint8_t local_flag_request=INITIAL_VALUE_ZERO;
 8001438:	2300      	movs	r3, #0
 800143a:	717b      	strb	r3, [r7, #5]
	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 800143c:	4843      	ldr	r0, [pc, #268]	; (800154c <Encrypt_MainFunc+0x120>)
 800143e:	f001 fb2b 	bl	8002a98 <Rte_SystemState_ReadData>
 8001442:	4603      	mov	r3, r0
 8001444:	71bb      	strb	r3, [r7, #6]
	retVal = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8001446:	4842      	ldr	r0, [pc, #264]	; (8001550 <Encrypt_MainFunc+0x124>)
 8001448:	f001 fc5e 	bl	8002d08 <Rte_PacketSendLoraNum_ReadData>
 800144c:	4603      	mov	r3, r0
 800144e:	71bb      	strb	r3, [r7, #6]
	gl_ReadAddress = STORE_AREA_START_ADDRESS +(gl_u16NoPacket-1)*64;
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <Encrypt_MainFunc+0x124>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001458:	f203 439f 	addw	r3, r3, #1183	; 0x49f
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	461a      	mov	r2, r3
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001462:	601a      	str	r2, [r3, #0]
	//Initialize Cyper IV ctx
	AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8001464:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <Encrypt_MainFunc+0x12c>)
 8001466:	493d      	ldr	r1, [pc, #244]	; (800155c <Encrypt_MainFunc+0x130>)
 8001468:	483d      	ldr	r0, [pc, #244]	; (8001560 <Encrypt_MainFunc+0x134>)
 800146a:	f004 fc23 	bl	8005cb4 <AES_init_ctx_iv>

	if(RTE_E_OKE == retVal){
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d164      	bne.n	800153e <Encrypt_MainFunc+0x112>
		if(SYS_ENCRYPT_FW == gl_u8SystemState){
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <Encrypt_MainFunc+0x120>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b06      	cmp	r3, #6
 800147a:	d160      	bne.n	800153e <Encrypt_MainFunc+0x112>
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 800147c:	2300      	movs	r3, #0
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e00f      	b.n	80014a2 <Encrypt_MainFunc+0x76>
				gl_u8FwFragment[local_counter] = (*(volatile uint8_t*)(gl_ReadAddress));
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <Encrypt_MainFunc+0x138>)
 8001490:	54d1      	strb	r1, [r2, r3]
				gl_ReadAddress++;
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <Encrypt_MainFunc+0x128>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a2e      	ldr	r2, [pc, #184]	; (8001554 <Encrypt_MainFunc+0x128>)
 800149a:	6013      	str	r3, [r2, #0]
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3301      	adds	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b3f      	cmp	r3, #63	; 0x3f
 80014a6:	d9ec      	bls.n	8001482 <Encrypt_MainFunc+0x56>
			}
			//decrypt fw
			//Decrypt
			gl_u32CRC_FragmentFW = Calculate_CRC_firmware((uint8_t*) gl_u8FwFragment);
 80014a8:	482e      	ldr	r0, [pc, #184]	; (8001564 <Encrypt_MainFunc+0x138>)
 80014aa:	f7ff ff77 	bl	800139c <Calculate_CRC_firmware>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a25      	ldr	r2, [pc, #148]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014b2:	6013      	str	r3, [r2, #0]
			//RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
			RTE_RUNNABLE_FLAG_LORA_RESP_ReadData(&local_flag_request);
 80014b4:	1d7b      	adds	r3, r7, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fc38 	bl	8002d2c <Rte_FlagLoRaResp_ReadData>
			gl_u8CipherText[0]= ADDR_BROADCAST;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	701a      	strb	r2, [r3, #0]
			gl_u8CipherText[1]= ADDR_BROADCAST;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	705a      	strb	r2, [r3, #1]
			gl_u8CipherText[2] =local_flag_request;
 80014c8:	797a      	ldrb	r2, [r7, #5]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014cc:	709a      	strb	r2, [r3, #2]
			gl_u8CipherText[3]= gl_u16NoPacket >> SHIFT_8_BIT;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <Encrypt_MainFunc+0x124>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014da:	70da      	strb	r2, [r3, #3]
			gl_u8CipherText[4]= gl_u16NoPacket >> SHIFT_0_BIT;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <Encrypt_MainFunc+0x124>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014e4:	711a      	strb	r2, [r3, #4]
			gl_u8CipherText[8] = gl_u32CRC_FragmentFW >>SHIFT_24_BIT;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0e1b      	lsrs	r3, r3, #24
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014f0:	721a      	strb	r2, [r3, #8]
			gl_u8CipherText[7] = gl_u32CRC_FragmentFW >>SHIFT_16_BIT;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <Encrypt_MainFunc+0x11c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <Encrypt_MainFunc+0x13c>)
 80014fc:	71da      	strb	r2, [r3, #7]
			gl_u8CipherText[6] = gl_u32CRC_FragmentFW >>SHIFT_8_BIT;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <Encrypt_MainFunc+0x11c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001508:	719a      	strb	r2, [r3, #6]
			gl_u8CipherText[5] = gl_u32CRC_FragmentFW >>SHIFT_0_BIT;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Encrypt_MainFunc+0x11c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001512:	715a      	strb	r2, [r3, #5]
			copy_Array((uint8_t*)gl_u8CipherText ,(uint8_t*) gl_u8FwFragment , 64);
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <Encrypt_MainFunc+0x138>)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <Encrypt_MainFunc+0x13c>)
 800151a:	f005 fdfe 	bl	800711a <copy_Array>

			/*Encrypt buffer to cyberText*/
			AES_CTR_xcrypt_buffer(&ctx_fw, gl_u8CipherText, 80);
 800151e:	2250      	movs	r2, #80	; 0x50
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <Encrypt_MainFunc+0x13c>)
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <Encrypt_MainFunc+0x134>)
 8001524:	f005 f9c7 	bl	80068b6 <AES_CTR_xcrypt_buffer>
			retVal = RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_WriteData(gl_u8CipherText);
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <Encrypt_MainFunc+0x13c>)
 800152a:	f001 fac7 	bl	8002abc <Rte_EncyptedBuffer_WriteData>
 800152e:	4603      	mov	r3, r0
 8001530:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <Encrypt_MainFunc+0x112>
				// Set to Send Update
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_SEND_UPDATE);
 8001538:	2007      	movs	r0, #7
 800153a:	f001 fa9b 	bl	8002a74 <Rte_SystemState_WriteData>
			}
		}

	}
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000348 	.word	0x20000348
 800154c:	2000033c 	.word	0x2000033c
 8001550:	20000344 	.word	0x20000344
 8001554:	20000340 	.word	0x20000340
 8001558:	20000010 	.word	0x20000010
 800155c:	20000000 	.word	0x20000000
 8001560:	2000034c 	.word	0x2000034c
 8001564:	200002fc 	.word	0x200002fc
 8001568:	200002ac 	.word	0x200002ac
 800156c:	00000000 	.word	0x00000000

08001570 <Decrypt_MainFunc>:
void Decrypt_MainFunc(uint8_t * gl_u8FwFragment){
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a0      	sub	sp, #128	; 0x80
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint32_t start,end, duration;
	float duration_ms, duration_s;

//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	start = __HAL_TIM_GET_COUNTER(&htim1);
 8001578:	4b63      	ldr	r3, [pc, #396]	; (8001708 <Decrypt_MainFunc+0x198>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
	AES_CBC_decrypt_buffer(&ctx_fw_des, gl_u8FwFragment, 1024);
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4861      	ldr	r0, [pc, #388]	; (800170c <Decrypt_MainFunc+0x19c>)
 8001588:	f005 f960 	bl	800684c <AES_CBC_decrypt_buffer>
	end = __HAL_TIM_GET_COUNTER(&htim1);
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <Decrypt_MainFunc+0x198>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	677b      	str	r3, [r7, #116]	; 0x74
	//reset counter
	TIM1->CNT = 0;
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <Decrypt_MainFunc+0x1a0>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	if (end >= start) {
 800159a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800159c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159e:	429a      	cmp	r2, r3
 80015a0:	d304      	bcc.n	80015ac <Decrypt_MainFunc+0x3c>
		duration = end - start;
 80015a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015aa:	e006      	b.n	80015ba <Decrypt_MainFunc+0x4a>
	} else {
		duration = (0xFFFF - start) + end;
 80015ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015b6:	33ff      	adds	r3, #255	; 0xff
 80015b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	}
	 // Chuyển đổi và xuất kết quả qua UART
	char buffer[100];

	sprintf(buffer, "Status:Successful! \n");
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4955      	ldr	r1, [pc, #340]	; (8001714 <Decrypt_MainFunc+0x1a4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00a fecb 	bl	800c35c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fdc0 	bl	8000150 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f107 0108 	add.w	r1, r7, #8
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	484e      	ldr	r0, [pc, #312]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80015de:	f009 fb75 	bl	800accc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fdb2 	bl	8000150 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f107 0108 	add.w	r1, r7, #8
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	4847      	ldr	r0, [pc, #284]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80015fa:	f009 fb67 	bl	800accc <HAL_UART_Transmit>
	if (duration < 1000) {
 80015fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001604:	d207      	bcs.n	8001616 <Decrypt_MainFunc+0xa6>
	    sprintf(buffer, "Execution time: %lu us\r\n", duration);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <Decrypt_MainFunc+0x1ac>)
 800160e:	4618      	mov	r0, r3
 8001610:	f00a fea4 	bl	800c35c <siprintf>
 8001614:	e038      	b.n	8001688 <Decrypt_MainFunc+0x118>
	} else if (duration < 1000000) {
 8001616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001618:	4a41      	ldr	r2, [pc, #260]	; (8001720 <Decrypt_MainFunc+0x1b0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d81a      	bhi.n	8001654 <Decrypt_MainFunc+0xe4>
	    duration_ms = duration / 1000.0;
 800161e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001620:	f7fe fee0 	bl	80003e4 <__aeabi_ui2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <Decrypt_MainFunc+0x1b4>)
 800162a:	f7ff f87f 	bl	800072c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fa27 	bl	8000a88 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	66fb      	str	r3, [r7, #108]	; 0x6c
	    sprintf(buffer, "Execution time: %.2f ms\r\n", duration_ms);
 800163e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001640:	f7fe fef2 	bl	8000428 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	f107 0008 	add.w	r0, r7, #8
 800164c:	4936      	ldr	r1, [pc, #216]	; (8001728 <Decrypt_MainFunc+0x1b8>)
 800164e:	f00a fe85 	bl	800c35c <siprintf>
 8001652:	e019      	b.n	8001688 <Decrypt_MainFunc+0x118>
	} else {
	    duration_s = duration / 1000000.0;
 8001654:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001656:	f7fe fec5 	bl	80003e4 <__aeabi_ui2d>
 800165a:	a329      	add	r3, pc, #164	; (adr r3, 8001700 <Decrypt_MainFunc+0x190>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f864 	bl	800072c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa0c 	bl	8000a88 <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	673b      	str	r3, [r7, #112]	; 0x70
	    sprintf(buffer, "Execution time: %.2f s\r\n", duration_s);
 8001674:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001676:	f7fe fed7 	bl	8000428 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	f107 0008 	add.w	r0, r7, #8
 8001682:	492a      	ldr	r1, [pc, #168]	; (800172c <Decrypt_MainFunc+0x1bc>)
 8001684:	f00a fe6a 	bl	800c35c <siprintf>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fd5f 	bl	8000150 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016a0:	f009 fb14 	bl	800accc <HAL_UART_Transmit>
	sprintf(buffer, "Key: 2B7E151628AED2A6ABF7158809CF4F3C \r\n");
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4921      	ldr	r1, [pc, #132]	; (8001730 <Decrypt_MainFunc+0x1c0>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00a fe56 	bl	800c35c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd4b 	bl	8000150 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f107 0108 	add.w	r1, r7, #8
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	4814      	ldr	r0, [pc, #80]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016c8:	f009 fb00 	bl	800accc <HAL_UART_Transmit>
	sprintf(buffer, "IV: 000102030405060708090a0b0c0d0e0f \r\n");
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4918      	ldr	r1, [pc, #96]	; (8001734 <Decrypt_MainFunc+0x1c4>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00a fe42 	bl	800c35c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd37 	bl	8000150 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f107 0108 	add.w	r1, r7, #8
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <Decrypt_MainFunc+0x1a8>)
 80016f0:	f009 faec 	bl	800accc <HAL_UART_Transmit>
}
 80016f4:	bf00      	nop
 80016f6:	3780      	adds	r7, #128	; 0x80
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	f3af 8000 	nop.w
 8001700:	00000000 	.word	0x00000000
 8001704:	412e8480 	.word	0x412e8480
 8001708:	2000171c 	.word	0x2000171c
 800170c:	2000040c 	.word	0x2000040c
 8001710:	40012c00 	.word	0x40012c00
 8001714:	0800f428 	.word	0x0800f428
 8001718:	200017f4 	.word	0x200017f4
 800171c:	0800f440 	.word	0x0800f440
 8001720:	000f423f 	.word	0x000f423f
 8001724:	408f4000 	.word	0x408f4000
 8001728:	0800f45c 	.word	0x0800f45c
 800172c:	0800f478 	.word	0x0800f478
 8001730:	0800f494 	.word	0x0800f494
 8001734:	0800f4c0 	.word	0x0800f4c0

08001738 <F_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void F_voidInitVariables (void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <F_voidInitVariables+0x14>)
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <F_voidInitVariables+0x18>)
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200004cc 	.word	0x200004cc
 8001750:	08012800 	.word	0x08012800

08001754 <F_FlashBlockToAddress>:


HAL_StatusTypeDef F_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 8001764:	2300      	movs	r3, #0
 8001766:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8001768:	2300      	movs	r3, #0
 800176a:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <F_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e024      	b.n	80017c2 <F_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8001778:	2300      	movs	r3, #0
 800177a:	81bb      	strh	r3, [r7, #12]
 800177c:	e01d      	b.n	80017ba <F_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 800177e:	89bb      	ldrh	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21a      	sxth	r2, r3
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	440b      	add	r3, r1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21b      	sxth	r3, r3
 800179a:	817b      	strh	r3, [r7, #10]
			F_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <F_FlashBlockToAddress+0x78>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	897a      	ldrh	r2, [r7, #10]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f832 	bl	800180e <F_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <F_FlashBlockToAddress+0x78>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3302      	adds	r3, #2
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <F_FlashBlockToAddress+0x78>)
 80017b2:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	3302      	adds	r3, #2
 80017b8:	81bb      	strh	r3, [r7, #12]
 80017ba:	89ba      	ldrh	r2, [r7, #12]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3dd      	bcc.n	800177e <F_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200004cc 	.word	0x200004cc

080017d0 <F_Erase_Image>:

HAL_StatusTypeDef F_Erase_Image(uint32_t ImageAddress)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	44;
 80017e4:	232c      	movs	r3, #44	; 0x2c
 80017e6:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80017e8:	f006 fb1e 	bl	8007e28 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80017ec:	f107 0208 	add.w	r2, r7, #8
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fbfe 	bl	8007ff8 <HAL_FLASHEx_Erase>
 80017fc:	4603      	mov	r3, r0
 80017fe:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8001800:	f006 fb38 	bl	8007e74 <HAL_FLASH_Lock>
	return Local_retVal;
 8001804:	7ffb      	ldrb	r3, [r7, #31]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <F_FlashHalfWordToAddress>:


HAL_StatusTypeDef F_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 800180e:	b5b0      	push	{r4, r5, r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 800181a:	f006 fb05 	bl	8007e28 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	2200      	movs	r2, #0
 8001822:	461c      	mov	r4, r3
 8001824:	4615      	mov	r5, r2
 8001826:	4622      	mov	r2, r4
 8001828:	462b      	mov	r3, r5
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2001      	movs	r0, #1
 800182e:	f006 fa8b 	bl	8007d48 <HAL_FLASH_Program>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8001836:	f006 fb1d 	bl	8007e74 <HAL_FLASH_Lock>

	return Local_retVal;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}

08001844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001848:	f3bf 8f4f 	dsb	sy
}
 800184c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <__NVIC_SystemReset+0x24>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001856:	4904      	ldr	r1, [pc, #16]	; (8001868 <__NVIC_SystemReset+0x24>)
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_SystemReset+0x28>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800185e:	f3bf 8f4f 	dsb	sy
}
 8001862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <__NVIC_SystemReset+0x20>
 8001868:	e000ed00 	.word	0xe000ed00
 800186c:	05fa0004 	.word	0x05fa0004

08001870 <FL_Syns_Config>:
static uint8_t Counter_Done_OTA  = 0;
static uint8_t gl_u8Flag_Sendbitmap = 0 ;
static uint8_t First_OTA = 0;
//uint32_t FL_uint32localAddress = ACTIVE_IMAGE + 0x80 ;
FL_Return_t FL_Syns_Config(uint32_t unicast_address, uint8_t* buffer_req, uint8_t* buffer_resp
	, uint8_t SF ,  uint8_t BandWidth , uint8_t CR ){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	70fb      	strb	r3, [r7, #3]
	/* Add info to packet */
	buffer_req[3] = SF ;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3303      	adds	r3, #3
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = BandWidth ;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3304      	adds	r3, #4
 800188a:	7e3a      	ldrb	r2, [r7, #24]
 800188c:	701a      	strb	r2, [r3, #0]
	/*	Wait to get Response from Node */
	buffer_req[5] = CR ;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3305      	adds	r3, #5
 8001892:	7f3a      	ldrb	r2, [r7, #28]
 8001894:	701a      	strb	r2, [r3, #0]
	gl_SF = SF ;
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <FL_Syns_Config+0xb0>)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	7013      	strb	r3, [r2, #0]
	gl_BW = BandWidth;
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <FL_Syns_Config+0xb4>)
 800189e:	7e3b      	ldrb	r3, [r7, #24]
 80018a0:	7013      	strb	r3, [r2, #0]
	gl_CR  = CR;
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <FL_Syns_Config+0xb8>)
 80018a4:	7f3b      	ldrb	r3, [r7, #28]
 80018a6:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80018a8:	2028      	movs	r0, #40	; 0x28
 80018aa:	f006 f980 	bl	8007bae <HAL_NVIC_DisableIRQ>
	//Check MCU receive config
	if(LORA_IF_Stransmit_Request(&SX1278_2, (uint8_t*) buffer_req,(uint8_t*) buffer_resp ,
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <FL_Syns_Config+0xbc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2221      	movs	r2, #33	; 0x21
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	481c      	ldr	r0, [pc, #112]	; (8001930 <FL_Syns_Config+0xc0>)
 80018c0:	f003 f868 	bl	8004994 <LORA_IF_Stransmit_Request>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d124      	bne.n	8001914 <FL_Syns_Config+0xa4>
			ret,GW_SYNC_CONFIG , MCU_RECEIVED_CONFIG ) == LORA_OKE)
	{
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <FL_Syns_Config+0xc4>)
 80018cc:	7d1a      	ldrb	r2, [r3, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	751a      	strb	r2, [r3, #20]
 80018d2:	7d5a      	ldrb	r2, [r3, #21]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f042 0204 	orr.w	r2, r2, #4
 80018da:	755a      	strb	r2, [r3, #21]
 80018dc:	7d9a      	ldrb	r2, [r3, #22]
 80018de:	2200      	movs	r2, #0
 80018e0:	759a      	strb	r2, [r3, #22]
 80018e2:	7dda      	ldrb	r2, [r3, #23]
 80018e4:	2200      	movs	r2, #0
 80018e6:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e8:	2028      	movs	r0, #40	; 0x28
 80018ea:	f006 f952 	bl	8007b92 <HAL_NVIC_EnableIRQ>
		ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, 5000);
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	2110      	movs	r1, #16
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <FL_Syns_Config+0xc0>)
 80018f6:	f002 fda9 	bl	800444c <SX1278_LoRaEntryRx>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <FL_Syns_Config+0xbc>)
 8001900:	701a      	strb	r2, [r3, #0]
		HAL_Delay(3000);
 8001902:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001906:	f006 f809 	bl	800791c <HAL_Delay>

		/************Change SYSTEM TO SEND Update********************************/

		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <FL_Syns_Config+0xc8>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f9c4 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
	}
	return FL_FAIL;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000bba 	.word	0x20000bba
 8001924:	20000bbb 	.word	0x20000bbb
 8001928:	20000bbc 	.word	0x20000bbc
 800192c:	20000bb9 	.word	0x20000bb9
 8001930:	200019d0 	.word	0x200019d0
 8001934:	40010400 	.word	0x40010400
 8001938:	20000020 	.word	0x20000020

0800193c <Sequence_Process>:
//	}
//		return FL_SUCCESS ;
//	return FL_FAIL;
//}
/* Start Send Fragment */
FL_Return_t Sequence_Process(uint8_t* buffer_flashing_data){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if(LORA_IF_Stransmit_Fragment_Firmware(&SX1278_1,(uint8_t*) buffer_flashing_data  ) == LORA_OKE){
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <Sequence_Process+0x24>)
 8001948:	f003 f862 	bl	8004a10 <LORA_IF_Stransmit_Fragment_Firmware>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <Sequence_Process+0x1a>
		return FL_SUCCESS;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <Sequence_Process+0x1c>
	}
	return FL_FAIL;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200018a0 	.word	0x200018a0

08001964 <Flashing_end>:
/* End Programming process*/
uint8_t Flashing_end(uint8_t broadcast_addr,uint32_t unicast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp ,uint8_t ACK_REQ){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
	//AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001974:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001978:	2150      	movs	r1, #80	; 0x50
 800197a:	4821      	ldr	r0, [pc, #132]	; (8001a00 <Flashing_end+0x9c>)
 800197c:	f002 fe0f 	bl	800459e <SX1278_LoRaEntryTx>
 8001980:	4603      	mov	r3, r0
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <Flashing_end+0xa0>)
 8001986:	701a      	strb	r2, [r3, #0]
	//AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
	ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001988:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800198c:	2250      	movs	r2, #80	; 0x50
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	481b      	ldr	r0, [pc, #108]	; (8001a00 <Flashing_end+0x9c>)
 8001992:	f002 fe5c 	bl	800464e <SX1278_LoRaTxPacket>
 8001996:	4603      	mov	r3, r0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <Flashing_end+0xa0>)
 800199c:	701a      	strb	r2, [r3, #0]
	if(ret){
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <Flashing_end+0xa0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d027      	beq.n	80019f6 <Flashing_end+0x92>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	4817      	ldr	r0, [pc, #92]	; (8001a08 <Flashing_end+0xa4>)
 80019ac:	f006 fe3b 	bl	8008626 <HAL_GPIO_TogglePin>
		ret = SX1278_LoRaEntryRx(&SX1278_1, SIZE_BUFFER_112BYTES, 4000);
 80019b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80019b4:	2170      	movs	r1, #112	; 0x70
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <Flashing_end+0x9c>)
 80019b8:	f002 fd48 	bl	800444c <SX1278_LoRaEntryRx>
 80019bc:	4603      	mov	r3, r0
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <Flashing_end+0xa0>)
 80019c2:	701a      	strb	r2, [r3, #0]
		gl_u8Flag_Sendbitmap = 1;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <Flashing_end+0xa8>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <Flashing_end+0xac>)
 80019cc:	7d1a      	ldrb	r2, [r3, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f042 0202 	orr.w	r2, r2, #2
 80019d4:	751a      	strb	r2, [r3, #20]
 80019d6:	7d5a      	ldrb	r2, [r3, #21]
 80019d8:	2200      	movs	r2, #0
 80019da:	755a      	strb	r2, [r3, #21]
 80019dc:	7d9a      	ldrb	r2, [r3, #22]
 80019de:	2200      	movs	r2, #0
 80019e0:	759a      	strb	r2, [r3, #22]
 80019e2:	7dda      	ldrb	r2, [r3, #23]
 80019e4:	2200      	movs	r2, #0
 80019e6:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019e8:	2007      	movs	r0, #7
 80019ea:	f006 f8d2 	bl	8007b92 <HAL_NVIC_EnableIRQ>
		HAL_Delay(2000);
 80019ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f2:	f005 ff93 	bl	800791c <HAL_Delay>
	}
}
 80019f6:	bf00      	nop
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200018a0 	.word	0x200018a0
 8001a04:	20000bb9 	.word	0x20000bb9
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	20000c82 	.word	0x20000c82
 8001a10:	40010400 	.word	0x40010400

08001a14 <FL_OTA_end>:



uint8_t FL_OTA_end(uint8_t broadcast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp , uint8_t ACK_REQ){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	4613      	mov	r3, r2
 8001a26:	73bb      	strb	r3, [r7, #14]
	buffer_packet[0] = broadcast_addr;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	701a      	strb	r2, [r3, #0]
	buffer_packet[1] = broadcast_addr;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
	buffer_packet[2] = ACK_REQ;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	7bba      	ldrb	r2, [r7, #14]
 8001a3c:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <FL_OTA_end+0x88>)
 8001a40:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <FL_OTA_end+0x8c>)
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <FL_OTA_end+0x90>)
 8001a44:	f004 f936 	bl	8005cb4 <AES_init_ctx_iv>
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001a48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a4c:	2150      	movs	r1, #80	; 0x50
 8001a4e:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <FL_OTA_end+0x94>)
 8001a50:	f002 fda5 	bl	800459e <SX1278_LoRaEntryTx>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <FL_OTA_end+0x98>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8001a5c:	2250      	movs	r2, #80	; 0x50
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <FL_OTA_end+0x90>)
 8001a62:	f004 ff28 	bl	80068b6 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8001a66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a6a:	2250      	movs	r2, #80	; 0x50
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <FL_OTA_end+0x94>)
 8001a70:	f002 fded 	bl	800464e <SX1278_LoRaTxPacket>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <FL_OTA_end+0x98>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	if(ret){
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <FL_OTA_end+0x98>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <FL_OTA_end+0x7e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <FL_OTA_end+0x9c>)
 8001a8a:	f006 fdcc 	bl	8008626 <HAL_GPIO_TogglePin>
		//ret = SX1278_LoRaEntryRx(&SX1278_1, SIZE_BUFFER_112BYTES, 4000);
		//__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
		//HAL_NVIC_EnableIRQ(EXTI1_IRQn);
		//HAL_Delay(2000);
		return 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <FL_OTA_end+0x80>
	}
	return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000034 	.word	0x20000034
 8001aa0:	20000024 	.word	0x20000024
 8001aa4:	20000bc0 	.word	0x20000bc0
 8001aa8:	200018a0 	.word	0x200018a0
 8001aac:	20000bb9 	.word	0x20000bb9
 8001ab0:	40010c00 	.word	0x40010c00

08001ab4 <Send_request>:

/*request get value from gateway*/
uint8_t Send_request(SX1278_t *module , uint32_t unicast_addr , uint8_t * buffer_req_2 , uint8_t ACK_REQ){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	70fb      	strb	r3, [r7, #3]
	buffer_req_2[0]  = (unicast_addr>>SHIFT_24_BIT)&0xff;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	0e1a      	lsrs	r2, r3, #24
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
	buffer_req_2[1]  = (unicast_addr>>SHIFT_16_BIT)&0xff;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0c1a      	lsrs	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
	buffer_req_2[2]  = (unicast_addr>>SHIFT_8_BIT)&0xff;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	0a1a      	lsrs	r2, r3, #8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
	buffer_req_2[3]  = (unicast_addr>>SHIFT_0_BIT)&0xff;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3303      	adds	r3, #3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]
	buffer_req_2[4]  = GW_REQ_PARAMETER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	228c      	movs	r2, #140	; 0x8c
 8001af4:	701a      	strb	r2, [r3, #0]
	uint32_t counter =0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
	// 2. Clear Pending Interrupt

	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001afa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001afe:	2110      	movs	r1, #16
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f002 fd4c 	bl	800459e <SX1278_LoRaEntryTx>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <Send_request+0xe8>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <Send_request+0xec>)
 8001b10:	4924      	ldr	r1, [pc, #144]	; (8001ba4 <Send_request+0xf0>)
 8001b12:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <Send_request+0xf4>)
 8001b14:	f004 f8ce 	bl	8005cb4 <AES_init_ctx_iv>
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req_2, 16);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <Send_request+0xf4>)
 8001b20:	f004 fec9 	bl	80068b6 <AES_CTR_xcrypt_buffer>

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f002 fd8e 	bl	800464e <SX1278_LoRaTxPacket>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <Send_request+0xe8>)
 8001b38:	701a      	strb	r2, [r3, #0]
	memset(&buffer_req_2 , 0xff , 16);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	21ff      	movs	r1, #255	; 0xff
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00a fc6e 	bl	800c422 <memset>
	if(ret){
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <Send_request+0xe8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <Send_request+0xa4>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001b4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b52:	4816      	ldr	r0, [pc, #88]	; (8001bac <Send_request+0xf8>)
 8001b54:	f006 fd67 	bl	8008626 <HAL_GPIO_TogglePin>
	}

	__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <Send_request+0xfc>)
 8001b5a:	7d1a      	ldrb	r2, [r3, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	751a      	strb	r2, [r3, #20]
 8001b60:	7d5a      	ldrb	r2, [r3, #21]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f042 0204 	orr.w	r2, r2, #4
 8001b68:	755a      	strb	r2, [r3, #21]
 8001b6a:	7d9a      	ldrb	r2, [r3, #22]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	759a      	strb	r2, [r3, #22]
 8001b70:	7dda      	ldrb	r2, [r3, #23]
 8001b72:	2200      	movs	r2, #0
 8001b74:	75da      	strb	r2, [r3, #23]
	ret = SX1278_LoRaEntryRx(&SX1278_2, 16, 3000);
 8001b76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <Send_request+0x100>)
 8001b7e:	f002 fc65 	bl	800444c <SX1278_LoRaEntryRx>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <Send_request+0xe8>)
 8001b88:	701a      	strb	r2, [r3, #0]
	//HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b8a:	2028      	movs	r0, #40	; 0x28
 8001b8c:	f006 f801 	bl	8007b92 <HAL_NVIC_EnableIRQ>
	//Get data from SPI_2


}
 8001b90:	bf00      	nop
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000bb9 	.word	0x20000bb9
 8001ba0:	20000034 	.word	0x20000034
 8001ba4:	20000024 	.word	0x20000024
 8001ba8:	20000bc0 	.word	0x20000bc0
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	200019d0 	.word	0x200019d0

08001bb8 <Flashing_Request>:
uint8_t Flashing_Request(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_req ,uint8_t ACK_REQ ,uint8_t ACK_RESP ){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	603a      	str	r2, [r7, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	71bb      	strb	r3, [r7, #6]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	717b      	strb	r3, [r7, #5]
	uint16_t counter_tx =0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	82fb      	strh	r3, [r7, #22]
	uint32_t Address_update = INIT_VAL_ZERO;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
	uint8_t  buffer_flag ;
	RTE_RUNNABLE_NODE_ADDR_ReadData(&Address_update);
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 f816 	bl	8002c0c <Rte_NodeAddr_ReadData>
	buffer_req[0] =  (Address_update>> SHIFT_24_BIT)& 0xFF; // unicast addr
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	0e1b      	lsrs	r3, r3, #24
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = (Address_update>> SHIFT_16_BIT)& 0xFF ; // unicast addr
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	0c1a      	lsrs	r2, r3, #16
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = (Address_update>> SHIFT_8_BIT)& 0xFF ;  // unicast addr
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	0a1a      	lsrs	r2, r3, #8
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = (Address_update>> SHIFT_0_BIT)& 0xFF ;  // unicast addr
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3303      	adds	r3, #3
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = ACK_REQ;	// Not use
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	797a      	ldrb	r2, [r7, #5]
 8001c12:	701a      	strb	r2, [r3, #0]
	//Get the current Packet;
	RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8001c14:	f107 0316 	add.w	r3, r7, #22
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 f875 	bl	8002d08 <Rte_PacketSendLoraNum_ReadData>
//	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
//						SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	ret = SX1278_LoRaEntryTx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001c1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c22:	2110      	movs	r1, #16
 8001c24:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <Flashing_Request+0x10c>)
 8001c26:	f002 fcba 	bl	800459e <SX1278_LoRaEntryTx>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <Flashing_Request+0x110>)
 8001c30:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <Flashing_Request+0x114>)
 8001c34:	4926      	ldr	r1, [pc, #152]	; (8001cd0 <Flashing_Request+0x118>)
 8001c36:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <Flashing_Request+0x11c>)
 8001c38:	f004 f83c 	bl	8005cb4 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req, 16);
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <Flashing_Request+0x11c>)
 8001c42:	f004 fe38 	bl	80068b6 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_2, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001c46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <Flashing_Request+0x10c>)
 8001c50:	f002 fcfd 	bl	800464e <SX1278_LoRaTxPacket>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <Flashing_Request+0x110>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	//__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
	if(ret){
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <Flashing_Request+0x110>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d029      	beq.n	8001cb8 <Flashing_Request+0x100>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <Flashing_Request+0x120>)
 8001c6a:	f006 fcdc 	bl	8008626 <HAL_GPIO_TogglePin>
		counter_tx++;
 8001c6e:	8afb      	ldrh	r3, [r7, #22]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	82fb      	strh	r3, [r7, #22]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(counter_tx);
 8001c76:	8afb      	ldrh	r3, [r7, #22]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f80f 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
		if(counter_tx == 10){
 8001c7e:	8afb      	ldrh	r3, [r7, #22]
 8001c80:	2b0a      	cmp	r3, #10
 8001c82:	d117      	bne.n	8001cb4 <Flashing_Request+0xfc>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 fef5 	bl	8002a74 <Rte_SystemState_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(GW_OUTOFREQUEST_ERROR);
 8001c8a:	201f      	movs	r0, #31
 8001c8c:	f000 ffe2 	bl	8002c54 <Rte_UI_Error_WriteData>
			buffer_flag = 0xFB;
 8001c90:	23fb      	movs	r3, #251	; 0xfb
 8001c92:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart2,&buffer_flag, 1, HAL_MAX_DELAY);
 8001c94:	f107 010f 	add.w	r1, r7, #15
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <Flashing_Request+0x124>)
 8001ca0:	f009 f814 	bl	800accc <HAL_UART_Transmit>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <Flashing_Request+0x124>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <Flashing_Request+0x124>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	60da      	str	r2, [r3, #12]

		}
		return 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <Flashing_Request+0x102>
	}

	return -1;
 8001cb8:	23ff      	movs	r3, #255	; 0xff
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200019d0 	.word	0x200019d0
 8001cc8:	20000bb9 	.word	0x20000bb9
 8001ccc:	20000034 	.word	0x20000034
 8001cd0:	20000024 	.word	0x20000024
 8001cd4:	20000bc0 	.word	0x20000bc0
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	2000183c 	.word	0x2000183c

08001ce0 <Wait_Accept_OTA>:
uint8_t Wait_Accept_OTA(uint32_t addr_node,  uint8_t* buffer_resp ,uint8_t ACK_RESP ){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	4613      	mov	r3, r2
 8001cec:	71fb      	strb	r3, [r7, #7]
	uint32_t counter_rx = INITIAL_VALUE_ZERO;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
	uint32_t Node_Address_update = addr_node;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
	uint32_t Node_Address_receive = INITIAL_VALUE_ZERO;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaRxPacket(&SX1278_2);
 8001cfa:	4821      	ldr	r0, [pc, #132]	; (8001d80 <Wait_Accept_OTA+0xa0>)
 8001cfc:	f002 fc0b 	bl	8004516 <SX1278_LoRaRxPacket>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <Wait_Accept_OTA+0xa4>)
 8001d06:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <Wait_Accept_OTA+0xa8>)
 8001d0a:	4920      	ldr	r1, [pc, #128]	; (8001d8c <Wait_Accept_OTA+0xac>)
 8001d0c:	4820      	ldr	r0, [pc, #128]	; (8001d90 <Wait_Accept_OTA+0xb0>)
 8001d0e:	f003 ffd1 	bl	8005cb4 <AES_init_ctx_iv>
	if(ret > 0){
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <Wait_Accept_OTA+0xa4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d02d      	beq.n	8001d76 <Wait_Accept_OTA+0x96>
		ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_resp, ret);
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <Wait_Accept_OTA+0xa4>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	4817      	ldr	r0, [pc, #92]	; (8001d80 <Wait_Accept_OTA+0xa0>)
 8001d24:	f002 fcff 	bl	8004726 <SX1278_read>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <Wait_Accept_OTA+0xa4>)
 8001d2e:	701a      	strb	r2, [r3, #0]
		AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp, 16);
 8001d30:	2210      	movs	r2, #16
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	4816      	ldr	r0, [pc, #88]	; (8001d90 <Wait_Accept_OTA+0xb0>)
 8001d36:	f004 fdbe 	bl	80068b6 <AES_CTR_xcrypt_buffer>
		Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	061a      	lsls	r2, r3, #24
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3301      	adds	r3, #1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	431a      	orrs	r2, r3
								|(buffer_resp[2] << SHIFT_8_BIT)|(buffer_resp[3] << SHIFT_0_BIT);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	4313      	orrs	r3, r2
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	3203      	adds	r2, #3
 8001d58:	7812      	ldrb	r2, [r2, #0]
 8001d5a:	4313      	orrs	r3, r2
		Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8001d5c:	617b      	str	r3, [r7, #20]
		if(Node_Address_receive == Node_Address_update && buffer_resp[4]== ACK_RESP ){
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d107      	bne.n	8001d76 <Wait_Accept_OTA+0x96>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d101      	bne.n	8001d76 <Wait_Accept_OTA+0x96>
			return 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <Wait_Accept_OTA+0x98>
		}
	}
	return 0;
 8001d76:	2300      	movs	r3, #0

}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200019d0 	.word	0x200019d0
 8001d84:	20000bb9 	.word	0x20000bb9
 8001d88:	20000034 	.word	0x20000034
 8001d8c:	20000024 	.word	0x20000024
 8001d90:	20000bc0 	.word	0x20000bc0

08001d94 <FL_u32ReadAddressData>:
		}

		}
}
// Using for testing flashing
uint32_t FL_u32ReadAddressData(uint32_t address){
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <FL_CalculateCRCFWLoRa>:

uint32_t FL_CalculateCRCFWLoRa(uint32_t u32Size_of_Image , uint32_t Active_Addr_Indicate){
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	uint32_t local_u32CRC = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <FL_CalculateCRCFWLoRa+0x74>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <FL_CalculateCRCFWLoRa+0x74>)
 8001dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc8:	6153      	str	r3, [r2, #20]
	u32Size_of_Image = u32Size_of_Image/4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	607b      	str	r3, [r7, #4]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <FL_CalculateCRCFWLoRa+0x78>)
 8001dd2:	7a1a      	ldrb	r2, [r3, #8]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	721a      	strb	r2, [r3, #8]
 8001ddc:	7a5a      	ldrb	r2, [r3, #9]
 8001dde:	2200      	movs	r2, #0
 8001de0:	725a      	strb	r2, [r3, #9]
 8001de2:	7a9a      	ldrb	r2, [r3, #10]
 8001de4:	2200      	movs	r2, #0
 8001de6:	729a      	strb	r2, [r3, #10]
 8001de8:	7ada      	ldrb	r2, [r3, #11]
 8001dea:	2200      	movs	r2, #0
 8001dec:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e00b      	b.n	8001e0c <FL_CalculateCRCFWLoRa+0x5c>
		/* Calculate CRC */
		CRC->DR  = FL_u32ReadAddressData(Active_Addr_Indicate);
 8001df4:	4c0c      	ldr	r4, [pc, #48]	; (8001e28 <FL_CalculateCRCFWLoRa+0x78>)
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f7ff ffcc 	bl	8001d94 <FL_u32ReadAddressData>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	6023      	str	r3, [r4, #0]
		Active_Addr_Indicate+=4;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	603b      	str	r3, [r7, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3ef      	bcc.n	8001df4 <FL_CalculateCRCFWLoRa+0x44>
	}
	local_u32CRC = CRC->DR;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <FL_CalculateCRCFWLoRa+0x78>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60bb      	str	r3, [r7, #8]
	return local_u32CRC;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40023000 	.word	0x40023000

08001e2c <FL_CalculateCRCBItmaskLoRa>:
uint32_t FL_CalculateCRCBItmaskLoRa(uint32_t u32Size_of_bitmask , uint8_t *buffer){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck;
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e40:	6153      	str	r3, [r2, #20]
	u32Size_of_bitmask = u32Size_of_bitmask/4;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	607b      	str	r3, [r7, #4]
	uint32_t local_u32CRC ;
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001e4a:	7a1a      	ldrb	r2, [r3, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	721a      	strb	r2, [r3, #8]
 8001e54:	7a5a      	ldrb	r2, [r3, #9]
 8001e56:	2200      	movs	r2, #0
 8001e58:	725a      	strb	r2, [r3, #9]
 8001e5a:	7a9a      	ldrb	r2, [r3, #10]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	729a      	strb	r2, [r3, #10]
 8001e60:	7ada      	ldrb	r2, [r3, #11]
 8001e62:	2200      	movs	r2, #0
 8001e64:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e023      	b.n	8001eb4 <FL_CalculateCRCBItmaskLoRa+0x88>
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3303      	adds	r3, #3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	440b      	add	r3, r1
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431a      	orrs	r2, r3
										|(buffer[Local_u32Count*4+1] <<SHIFT_8_BIT)|(buffer[Local_u32Count*4] <<SHIFT_0_BIT);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	3301      	adds	r3, #1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	440b      	add	r3, r1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	440a      	add	r2, r1
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	4313      	orrs	r3, r2
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 8001ea6:	60fb      	str	r3, [r7, #12]
		/* Calculate CRC */
		CRC->DR  = Local_u32PlayloadCheck;
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6013      	str	r3, [r2, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3d7      	bcc.n	8001e6c <FL_CalculateCRCBItmaskLoRa+0x40>
	}
	local_u32CRC = CRC->DR;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
	return local_u32CRC;
 8001ec2:	693b      	ldr	r3, [r7, #16]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40023000 	.word	0x40023000

08001ed8 <Send_Start_OTA>:
//}

/*
 * @Request Start OTA
 */
void Send_Start_OTA(void){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af02      	add	r7, sp, #8
	gl_u32TargetAddr = INITIAL_VALUE_ZERO;
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <Send_Start_OTA+0x84>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,&Status_flag, 1, HAL_MAX_DELAY);
//			HAL_TIM_Base_Start_IT(&htim4);
//		}
//		First_OTA = 1;
//	}
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <Send_Start_OTA+0x88>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe11 	bl	8002b10 <Rte_Crc_WriteData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001eee:	481b      	ldr	r0, [pc, #108]	; (8001f5c <Send_Start_OTA+0x84>)
 8001ef0:	f000 fe8c 	bl	8002c0c <Rte_NodeAddr_ReadData>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001ef4:	2028      	movs	r0, #40	; 0x28
 8001ef6:	f005 fe5a 	bl	8007bae <HAL_NVIC_DisableIRQ>
	//Check CRC

	// Using for testing

	if(Flashing_Request(ADDR_BROADCAST, gl_u32TargetAddr, buffer_req, GW_START_OTA , MCU_ACCEPT_RESPONSE) == 1){
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <Send_Start_OTA+0x84>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b2d9      	uxtb	r1, r3
 8001f00:	2305      	movs	r3, #5
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <Send_Start_OTA+0x8c>)
 8001f08:	20ff      	movs	r0, #255	; 0xff
 8001f0a:	f7ff fe55 	bl	8001bb8 <Flashing_Request>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11f      	bne.n	8001f54 <Send_Start_OTA+0x7c>
		//RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_WAIT_ACCEPT_OTA);
		__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <Send_Start_OTA+0x90>)
 8001f16:	7d1a      	ldrb	r2, [r3, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	751a      	strb	r2, [r3, #20]
 8001f1c:	7d5a      	ldrb	r2, [r3, #21]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f042 0204 	orr.w	r2, r2, #4
 8001f24:	755a      	strb	r2, [r3, #21]
 8001f26:	7d9a      	ldrb	r2, [r3, #22]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	759a      	strb	r2, [r3, #22]
 8001f2c:	7dda      	ldrb	r2, [r3, #23]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	75da      	strb	r2, [r3, #23]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f32:	2028      	movs	r0, #40	; 0x28
 8001f34:	f005 fe2d 	bl	8007b92 <HAL_NVIC_EnableIRQ>
		ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001f38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <Send_Start_OTA+0x94>)
 8001f40:	f002 fa84 	bl	800444c <SX1278_LoRaEntryRx>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <Send_Start_OTA+0x98>)
 8001f4a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000);
 8001f4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f50:	f005 fce4 	bl	800791c <HAL_Delay>
	}

}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200004d4 	.word	0x200004d4
 8001f60:	200004d8 	.word	0x200004d8
 8001f64:	200005bc 	.word	0x200005bc
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	200019d0 	.word	0x200019d0
 8001f70:	20000bb9 	.word	0x20000bb9

08001f74 <FL_FlashLoRa_INIT>:
//
//
//}


void FL_FlashLoRa_INIT(void){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af02      	add	r7, sp, #8
 	gl_u8StatusFlash 			= 		INITIAL_VALUE_ZERO;
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <FL_FlashLoRa_INIT+0x124>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
	gl_u16No_Packet_Flash		=		INITZERO_START+1;
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <FL_FlashLoRa_INIT+0x128>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	801a      	strh	r2, [r3, #0]
	gl_start_array_backup 		= 		INITIAL_VALUE_ZERO;
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <FL_FlashLoRa_INIT+0x12c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	gl_u32CRCFW 				= 		INITIAL_VALUE_ZERO;
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
	gl_u16AppVer 	   			= 		INITIAL_VALUE_ZERO;
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <FL_FlashLoRa_INIT+0x134>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	801a      	strh	r2, [r3, #0]
	gl_u32CodeSize 				=		INITIAL_VALUE_ZERO;
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
	gl_u8backup_flag 			=  		INITIAL_VALUE_ZERO;
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <FL_FlashLoRa_INIT+0x13c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	buffer_flashing_data        = 		NULL_PTR;
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <FL_FlashLoRa_INIT+0x140>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
	//Calculate Number packet Lora SPI
	//Get Variable Via RTE FW
	//RTE_RUNNABLE_CRC_VALUE_ReadData(&gl_u32CRCFW);
	RTE_RUNNABLE_APP_VER_ReadData(&gl_u16AppVer);
 8001faa:	483f      	ldr	r0, [pc, #252]	; (80020a8 <FL_FlashLoRa_INIT+0x134>)
 8001fac:	f000 fe0a 	bl	8002bc4 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_CODE_SIZE_ReadData(&gl_u32CodeSize);
 8001fb0:	483e      	ldr	r0, [pc, #248]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8001fb2:	f000 fe19 	bl	8002be8 <Rte_CodeSize_ReadData>

	gl_u16NumberPacket_LoRa = (uint16_t)((gl_u32CodeSize + PACKET_64bytes - 1) / PACKET_64bytes);
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	333f      	adds	r3, #63	; 0x3f
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <FL_FlashLoRa_INIT+0x144>)
 8001fc2:	801a      	strh	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001fc4:	483d      	ldr	r0, [pc, #244]	; (80020bc <FL_FlashLoRa_INIT+0x148>)
 8001fc6:	f000 fe21 	bl	8002c0c <Rte_NodeAddr_ReadData>
	RTE_RUNNABLE_FLAG_TOTAL_REQUEST_PACKET_WriteData(gl_u16NumberPacket_LoRa);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <FL_FlashLoRa_INIT+0x144>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 ff2a 	bl	8002e28 <Rte_Flag_Total_request_packet_WriteData>
	//Calculate CRC
	gl_u32CRCFW = FL_CalculateCRCFWLoRa(gl_u32CodeSize, IMAGE_NEW_FIRMWARE);
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4939      	ldr	r1, [pc, #228]	; (80020c0 <FL_FlashLoRa_INIT+0x14c>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fee8 	bl	8001db0 <FL_CalculateCRCFWLoRa>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 8001fe4:	6013      	str	r3, [r2, #0]
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd90 	bl	8002b10 <Rte_Crc_WriteData>

	// Get the Infor SW FLASH
	GW_Config_SetUp();
 8001ff0:	f000 fcee 	bl	80029d0 <GW_Config_SetUp>
	//Start Flashing
	// Pack inform to buffer
	// CRC
	buffer_req[0] = ADDR_BROADCAST;
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = ADDR_BROADCAST;
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8001ffc:	22ff      	movs	r2, #255	; 0xff
 8001ffe:	705a      	strb	r2, [r3, #1]
	buffer_req[15] = (gl_u32CRCFW>>SHIFT_24_BIT);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 800200a:	73da      	strb	r2, [r3, #15]
	buffer_req[14] = (gl_u32CRCFW>>SHIFT_16_BIT);
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002016:	739a      	strb	r2, [r3, #14]
	buffer_req[13] = (gl_u32CRCFW>>SHIFT_8_BIT);
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002022:	735a      	strb	r2, [r3, #13]
	buffer_req[12] = (gl_u32CRCFW>>SHIFT_0_BIT);
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <FL_FlashLoRa_INIT+0x130>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 800202c:	731a      	strb	r2, [r3, #12]
	// Appl ver
	buffer_req[11] =(gl_u16AppVer>>SHIFT_8_BIT);
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <FL_FlashLoRa_INIT+0x134>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b29b      	uxth	r3, r3
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 800203a:	72da      	strb	r2, [r3, #11]
	buffer_req[10] =(gl_u16AppVer>>SHIFT_0_BIT);
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <FL_FlashLoRa_INIT+0x134>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002044:	729a      	strb	r2, [r3, #10]
	// size Code
	buffer_req[9] =(gl_u32CodeSize>>SHIFT_24_BIT);
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e1b      	lsrs	r3, r3, #24
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002050:	725a      	strb	r2, [r3, #9]
	buffer_req[8] =(gl_u32CodeSize>>SHIFT_16_BIT);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 800205c:	721a      	strb	r2, [r3, #8]
	buffer_req[7] =(gl_u32CodeSize>>SHIFT_8_BIT);
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002068:	71da      	strb	r2, [r3, #7]
	buffer_req[6] =(gl_u32CodeSize>>SHIFT_0_BIT);
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <FL_FlashLoRa_INIT+0x138>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 8002072:	719a      	strb	r2, [r3, #6]
	// Node Addr
	FL_Syns_Config(gl_u32TargetAddr, (uint8_t*) buffer_req, (uint8_t*) buffer_resp, u8SF, u8BW, u8CR );
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <FL_FlashLoRa_INIT+0x148>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <FL_FlashLoRa_INIT+0x154>)
 800207a:	7819      	ldrb	r1, [r3, #0]
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <FL_FlashLoRa_INIT+0x158>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <FL_FlashLoRa_INIT+0x15c>)
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	460b      	mov	r3, r1
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <FL_FlashLoRa_INIT+0x160>)
 800208c:	490d      	ldr	r1, [pc, #52]	; (80020c4 <FL_FlashLoRa_INIT+0x150>)
 800208e:	f7ff fbef 	bl	8001870 <FL_Syns_Config>
	//Flashing_end(ADDR_SLAVE_NODE_1,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, number_packet);
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200004d0 	.word	0x200004d0
 800209c:	20000020 	.word	0x20000020
 80020a0:	200004d1 	.word	0x200004d1
 80020a4:	200004d8 	.word	0x200004d8
 80020a8:	200004dc 	.word	0x200004dc
 80020ac:	200004e0 	.word	0x200004e0
 80020b0:	200004e7 	.word	0x200004e7
 80020b4:	200005cc 	.word	0x200005cc
 80020b8:	200004e4 	.word	0x200004e4
 80020bc:	200004d4 	.word	0x200004d4
 80020c0:	08012800 	.word	0x08012800
 80020c4:	200005bc 	.word	0x200005bc
 80020c8:	20000c84 	.word	0x20000c84
 80020cc:	20000c83 	.word	0x20000c83
 80020d0:	20000c85 	.word	0x20000c85
 80020d4:	200004ec 	.word	0x200004ec

080020d8 <FL_getPacketlost>:
uint16_t FL_getPacketlost(uint8_t* buffer_Rx , uint16_t packetNumber){
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
	uint16_t index =  (packetNumber)/8;
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	81fb      	strh	r3, [r7, #14]
	uint16_t offset = (packetNumber)%8;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	81bb      	strh	r3, [r7, #12]
	return (buffer_Rx[index] >> offset) &0x01;
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	89bb      	ldrh	r3, [r7, #12]
 80020fe:	fa42 f303 	asr.w	r3, r2, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	b29b      	uxth	r3, r3
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <FL_PacketLoRaSend_START>:
void FL_PacketLoRaSend_START(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af02      	add	r7, sp, #8
	uint8_t Local_u8StatusFlash = INITIAL_VALUE_ZERO;
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Flag_Sendbitmap = INITIAL_VALUE_ZERO;
 800211e:	2300      	movs	r3, #0
 8002120:	71bb      	strb	r3, [r7, #6]
	// clear buffer
	clearDataBuffer((uint8_t*) buffer_req, 16);
 8002122:	2110      	movs	r1, #16
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <FL_PacketLoRaSend_START+0xf4>)
 8002126:	f005 f83d 	bl	80071a4 <clearDataBuffer>
	//getSizePacket(number_packet, (uint8_t*) buffer_req);
	if(gl_u16NumberPacket_LoRa>=0){
		//Get Data from EnCrypt cybertext
		RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_ReadData(&buffer_flashing_data);
 800212a:	4838      	ldr	r0, [pc, #224]	; (800220c <FL_PacketLoRaSend_START+0xf8>)
 800212c:	f000 fcda 	bl	8002ae4 <Rte_EncyptedBuffer_ReadData>
		//FL_u128PasteBuffer((uint8_t *)buffer_flashing_data ,gl_u8No_Packet_Flash);
		// Check is missing packet
		gl_u8Flag_Sendbitmap =0;
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <FL_PacketLoRaSend_START+0xfc>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
		if(gl_u16NumberPacket_LoRa == 1){
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <FL_PacketLoRaSend_START+0x100>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10d      	bne.n	800215a <FL_PacketLoRaSend_START+0x46>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800213e:	2007      	movs	r0, #7
 8002140:	f005 fd35 	bl	8007bae <HAL_NVIC_DisableIRQ>
			Flashing_end(ADDR_BROADCAST , gl_u32TargetAddr
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <FL_PacketLoRaSend_START+0x104>)
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <FL_PacketLoRaSend_START+0xf8>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2339      	movs	r3, #57	; 0x39
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <FL_PacketLoRaSend_START+0x108>)
 8002152:	20ff      	movs	r0, #255	; 0xff
 8002154:	f7ff fc06 	bl	8001964 <Flashing_end>
 8002158:	e023      	b.n	80021a2 <FL_PacketLoRaSend_START+0x8e>
						,(uint8_t*)buffer_flashing_data , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_FINISHING_SENDING_CODE );
			}
		else{
			if(gl_u8backup_flag == 1){
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <FL_PacketLoRaSend_START+0x10c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <FL_PacketLoRaSend_START+0x6a>
						// Get the lost message number
						gl_u16No_Packet_Flash = buffer_number_pack_lost[lost_counter_pos];
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <FL_PacketLoRaSend_START+0x110>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <FL_PacketLoRaSend_START+0x114>)
 800216a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 8002170:	801a      	strh	r2, [r3, #0]
						lost_counter_pos++;
 8002172:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <FL_PacketLoRaSend_START+0x110>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <FL_PacketLoRaSend_START+0x110>)
 800217c:	801a      	strh	r2, [r3, #0]
			}
			if(gl_u16No_Packet_Flash == 0xffff){
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002186:	4293      	cmp	r3, r2
 8002188:	d105      	bne.n	8002196 <FL_PacketLoRaSend_START+0x82>
				gl_u8backup_flag = 0;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <FL_PacketLoRaSend_START+0x10c>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
				gl_u16No_Packet_Flash = 0;
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
			}
			gl_u8start_array_backup++;
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <FL_PacketLoRaSend_START+0x11c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <FL_PacketLoRaSend_START+0x11c>)
 80021a0:	701a      	strb	r2, [r3, #0]

		}
		if (gl_u16NumberPacket_LoRa >1 && gl_u8Flag_Sendbitmap == 0 ){
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <FL_PacketLoRaSend_START+0x100>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d91b      	bls.n	80021e2 <FL_PacketLoRaSend_START+0xce>
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <FL_PacketLoRaSend_START+0xfc>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d117      	bne.n	80021e2 <FL_PacketLoRaSend_START+0xce>
			//Send Packet Flashing
			Sequence_Process((uint8_t*)buffer_flashing_data );
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <FL_PacketLoRaSend_START+0xf8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fbc0 	bl	800193c <Sequence_Process>
			/*Display UI*/
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80021bc:	2006      	movs	r0, #6
 80021be:	f000 fc59 	bl	8002a74 <Rte_SystemState_WriteData>
			gl_u16NumberPacket_LoRa--;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <FL_PacketLoRaSend_START+0x100>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <FL_PacketLoRaSend_START+0x100>)
 80021cc:	801a      	strh	r2, [r3, #0]
			if(gl_u8backup_flag ==0)
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <FL_PacketLoRaSend_START+0x10c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <FL_PacketLoRaSend_START+0xce>
				gl_u16No_Packet_Flash++;
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 80021e0:	801a      	strh	r2, [r3, #0]
		}
		// UPDATE TO PORT
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <FL_PacketLoRaSend_START+0x118>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fd58 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
		RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 80021ec:	20fe      	movs	r0, #254	; 0xfe
 80021ee:	f000 fd67 	bl	8002cc0 <Rte_FlagLoRaResp_WriteData>
		if(gl_u16NumberPacket_LoRa ==1 ){
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <FL_PacketLoRaSend_START+0x100>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <FL_PacketLoRaSend_START+0xec>
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(GW_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 80021fa:	2039      	movs	r0, #57	; 0x39
 80021fc:	f000 fd60 	bl	8002cc0 <Rte_FlagLoRaResp_WriteData>
		}
		// Last packet

	}
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200005bc 	.word	0x200005bc
 800220c:	200005cc 	.word	0x200005cc
 8002210:	20000c82 	.word	0x20000c82
 8002214:	200004e4 	.word	0x200004e4
 8002218:	200004d4 	.word	0x200004d4
 800221c:	2000054c 	.word	0x2000054c
 8002220:	200004e7 	.word	0x200004e7
 8002224:	200004e8 	.word	0x200004e8
 8002228:	20000628 	.word	0x20000628
 800222c:	20000020 	.word	0x20000020
 8002230:	200004e6 	.word	0x200004e6

08002234 <FL_PacketLoRaDone_OTA>:
void FL_PacketLoRaDone_OTA(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	GW_State_Save_State((uint32_t)SYS_IDLE);
 8002238:	2000      	movs	r0, #0
 800223a:	f000 fb8b 	bl	8002954 <GW_State_Save_State>
	if(FL_OTA_end(ADDR_BROADCAST ,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_END_OTA )==1){
 800223e:	237c      	movs	r3, #124	; 0x7c
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <FL_PacketLoRaDone_OTA+0x5c>)
 8002242:	4914      	ldr	r1, [pc, #80]	; (8002294 <FL_PacketLoRaDone_OTA+0x60>)
 8002244:	20ff      	movs	r0, #255	; 0xff
 8002246:	f7ff fbe5 	bl	8001a14 <FL_OTA_end>
 800224a:	4603      	mov	r3, r0
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <FL_PacketLoRaDone_OTA+0x28>
		Counter_Done_OTA++;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <FL_PacketLoRaDone_OTA+0x64>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <FL_PacketLoRaDone_OTA+0x64>)
 800225a:	701a      	strb	r2, [r3, #0]
	}
	if(Counter_Done_OTA == 5){
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <FL_PacketLoRaDone_OTA+0x64>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d112      	bne.n	800228a <FL_PacketLoRaDone_OTA+0x56>
		HAL_Delay(5000);
 8002264:	f241 3088 	movw	r0, #5000	; 0x1388
 8002268:	f005 fb58 	bl	800791c <HAL_Delay>
		RTE_RUNNABLE_PACKET_LORA_REIVECED_WriteData(buffer_packet_Rx);
 800226c:	4808      	ldr	r0, [pc, #32]	; (8002290 <FL_PacketLoRaDone_OTA+0x5c>)
 800226e:	f000 fd81 	bl	8002d74 <Rte_PacketLoRaReceived_WriteData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 fbfe 	bl	8002a74 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_UI_ERROR_WriteData(0xff);
 8002278:	20ff      	movs	r0, #255	; 0xff
 800227a:	f000 fceb 	bl	8002c54 <Rte_UI_Error_WriteData>
		Counter_Done_OTA= 0;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <FL_PacketLoRaDone_OTA+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <FL_PacketLoRaDone_OTA+0x68>)
 8002286:	f008 f8c3 	bl	800a410 <HAL_TIM_Base_Start_IT>
	}

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000054c 	.word	0x2000054c
 8002294:	200004fc 	.word	0x200004fc
 8002298:	20000c81 	.word	0x20000c81
 800229c:	20001764 	.word	0x20001764

080022a0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d133      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x7a>
	  //uint8_t status_node = 0 ;
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_FlagLoraSendDevice);
 80022b2:	482f      	ldr	r0, [pc, #188]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022b4:	f000 fd82 	bl	8002dbc <Rte_Flag_LoRaRequestDevice_ReadData>

	  if(gl_FlagLoraSendDevice == 0x00){
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x28>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f000 fd69 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
 80022c6:	e025      	b.n	8002314 <HAL_TIM_PeriodElapsedCallback+0x74>
	  }
	  else if(gl_FlagLoraSendDevice == 0x06){
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d108      	bne.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x42>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_3(gl_Flag_Timeout);
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fdef 	bl	8002eb8 <Rte_Flag_NodeStatus_WriteData_Node3>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fd5c 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
 80022e0:	e018      	b.n	8002314 <HAL_TIM_PeriodElapsedCallback+0x74>
	  }

	  else if(gl_FlagLoraSendDevice == 0x05){
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d108      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x5c>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_2(gl_Flag_Timeout);
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fdd0 	bl	8002e94 <Rte_Flag_NodeStatus_WriteData_Node2>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x03);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 fd4f 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
 80022fa:	e00b      	b.n	8002314 <HAL_TIM_PeriodElapsedCallback+0x74>
	  }
	  else if(gl_FlagLoraSendDevice == 0x04){
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_TIM_PeriodElapsedCallback+0x74>
		  RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_1(gl_Flag_Timeout);
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fdb1 	bl	8002e70 <Rte_Flag_NodeStatus_WriteData_Node1>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x02);
 800230e:	2002      	movs	r0, #2
 8002310:	f000 fd42 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
	  }
	  gl_Flag_Timeout = 0;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]


  }
  if(htim->Instance == TIM4){
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d121      	bne.n	8002368 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  if(counter ==2){
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d117      	bne.n	800235c <HAL_TIM_PeriodElapsedCallback+0xbc>
		  // Disable UART interrupt
		  HAL_UART_Receive_IT(&huart2, &header_flag, 1);
 800232c:	2201      	movs	r2, #1
 800232e:	4914      	ldr	r1, [pc, #80]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002330:	4814      	ldr	r0, [pc, #80]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002332:	f008 fd4e 	bl	800add2 <HAL_UART_Receive_IT>
		  __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0220 	bic.w	r2, r2, #32
 8002344:	60da      	str	r2, [r3, #12]
		  // Reset UART configuration
		  HAL_UART_DeInit(&huart2);
 8002346:	480f      	ldr	r0, [pc, #60]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002348:	f008 fc8e 	bl	800ac68 <HAL_UART_DeInit>
		  RTE_RUNNABLE_UI_ERROR_WriteData(UI_ERROR_RESET);
 800234c:	2001      	movs	r0, #1
 800234e:	f000 fc81 	bl	8002c54 <Rte_UI_Error_WriteData>
		  // Reinitialize UART
		  // Reset SW
		  HAL_TIM_Base_Stop_IT(&htim4);
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002354:	f008 f8ae 	bl	800a4b4 <HAL_TIM_Base_Stop_IT>
		  NVIC_SystemReset();
 8002358:	f7ff fa74 	bl	8001844 <__NVIC_SystemReset>
		  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
		  {
			  Error_Handler();
		  }
	  }
	  counter +=1;
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002366:	701a      	strb	r2, [r3, #0]
  }
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200004ea 	.word	0x200004ea
 8002374:	200004eb 	.word	0x200004eb
 8002378:	40000800 	.word	0x40000800
 800237c:	20000bbd 	.word	0x20000bbd
 8002380:	20000bb8 	.word	0x20000bb8
 8002384:	2000183c 	.word	0x2000183c
 8002388:	200017ac 	.word	0x200017ac

0800238c <HAL_GPIO_EXTI_Callback>:
// Interrupt DIO2
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   // <----- The ISR Function We're Looking For!
{	uint8_t local_state=0;
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af04      	add	r7, sp, #16
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
	uint32_t unicast_addr =0;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
	uint8_t local_Flag = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t local_index_data = 0 ;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&local_state);
 80023a8:	f107 0317 	add.w	r3, r7, #23
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fb73 	bl	8002a98 <Rte_SystemState_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&unicast_addr);
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fc28 	bl	8002c0c <Rte_NodeAddr_ReadData>

  		//Rte_FlagLoRaResp_ReadData(&flag_LoRa);
	if(GPIO_Pin == DIO_2_Pin){
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	f040 80cd 	bne.w	8002560 <HAL_GPIO_EXTI_Callback+0x1d4>
		uint32_t local_u32addrNode_req = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
		if(local_state == SYS_REQUEST_OTA){
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_EXTI_Callback+0x8c>
			if(Wait_Accept_OTA(gl_u32TargetAddr,  (uint8_t*) buffer_resp , MCU_ACCEPT_RESPONSE)==1){
 80023d0:	4ba1      	ldr	r3, [pc, #644]	; (8002658 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2205      	movs	r2, #5
 80023d6:	49a1      	ldr	r1, [pc, #644]	; (800265c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fc81 	bl	8001ce0 <Wait_Accept_OTA>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d115      	bne.n	8002410 <HAL_GPIO_EXTI_Callback+0x84>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80023e4:	2028      	movs	r0, #40	; 0x28
 80023e6:	f005 fbe2 	bl	8007bae <HAL_NVIC_DisableIRQ>
				__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 80023ea:	4b9d      	ldr	r3, [pc, #628]	; (8002660 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80023ec:	7d1a      	ldrb	r2, [r3, #20]
 80023ee:	2200      	movs	r2, #0
 80023f0:	751a      	strb	r2, [r3, #20]
 80023f2:	7d5a      	ldrb	r2, [r3, #21]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f042 0204 	orr.w	r2, r2, #4
 80023fa:	755a      	strb	r2, [r3, #21]
 80023fc:	7d9a      	ldrb	r2, [r3, #22]
 80023fe:	2200      	movs	r2, #0
 8002400:	759a      	strb	r2, [r3, #22]
 8002402:	7dda      	ldrb	r2, [r3, #23]
 8002404:	2200      	movs	r2, #0
 8002406:	75da      	strb	r2, [r3, #23]
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_CONFIG_LORA);
 8002408:	2005      	movs	r0, #5
 800240a:	f000 fb33 	bl	8002a74 <Rte_SystemState_WriteData>
 800240e:	e0a7      	b.n	8002560 <HAL_GPIO_EXTI_Callback+0x1d4>
			}
			else{
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fb2f 	bl	8002a74 <Rte_SystemState_WriteData>
 8002416:	e0a3      	b.n	8002560 <HAL_GPIO_EXTI_Callback+0x1d4>
			}
		}
		else if ( local_state == SYS_CONFIG_LORA ){
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d12d      	bne.n	800247a <HAL_GPIO_EXTI_Callback+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800241e:	2028      	movs	r0, #40	; 0x28
 8002420:	f005 fbc5 	bl	8007bae <HAL_NVIC_DisableIRQ>
			if(LORA_IF_GetData_Frame(&SX1278_2 ,unicast_addr ,(uint8_t*) buffer_resp , ret , 5000 , SIZE_BUFFER_16BYTES ,MCU_RECEIVED_CONFIG ) == 1){
 8002424:	6939      	ldr	r1, [r7, #16]
 8002426:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2221      	movs	r2, #33	; 0x21
 800242c:	9202      	str	r2, [sp, #8]
 800242e:	2210      	movs	r2, #16
 8002430:	9201      	str	r2, [sp, #4]
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	9200      	str	r2, [sp, #0]
 8002438:	4a88      	ldr	r2, [pc, #544]	; (800265c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800243a:	488b      	ldr	r0, [pc, #556]	; (8002668 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800243c:	f002 fa52 	bl	80048e4 <LORA_IF_GetData_Frame>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 808c 	bne.w	8002560 <HAL_GPIO_EXTI_Callback+0x1d4>
				__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8002448:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800244a:	7d1a      	ldrb	r2, [r3, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	751a      	strb	r2, [r3, #20]
 8002450:	7d5a      	ldrb	r2, [r3, #21]
 8002452:	2200      	movs	r2, #0
 8002454:	f042 0204 	orr.w	r2, r2, #4
 8002458:	755a      	strb	r2, [r3, #21]
 800245a:	7d9a      	ldrb	r2, [r3, #22]
 800245c:	2200      	movs	r2, #0
 800245e:	759a      	strb	r2, [r3, #22]
 8002460:	7dda      	ldrb	r2, [r3, #23]
 8002462:	2200      	movs	r2, #0
 8002464:	75da      	strb	r2, [r3, #23]
				gl_flag_receiveConfig = 1;
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
				// Enable timer receive data hear
				// HAL_TIM_Base_Start_IT(&htim2);
				RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 800246c:	20fe      	movs	r0, #254	; 0xfe
 800246e:	f000 fc27 	bl	8002cc0 <Rte_FlagLoRaResp_WriteData>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8002472:	2006      	movs	r0, #6
 8002474:	f000 fafe 	bl	8002a74 <Rte_SystemState_WriteData>
 8002478:	e072      	b.n	8002560 <HAL_GPIO_EXTI_Callback+0x1d4>
				//GW_State_Save_State(SYS_ENCRYPT_FW);
			}
		}
		else{
			ret = SX1278_LoRaRxPacket(&SX1278_2);
 800247a:	487b      	ldr	r0, [pc, #492]	; (8002668 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800247c:	f002 f84b 	bl	8004516 <SX1278_LoRaRxPacket>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002486:	701a      	strb	r2, [r3, #0]
			if ( ret > 0 ) {
 8002488:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d062      	beq.n	8002556 <HAL_GPIO_EXTI_Callback+0x1ca>
				AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8002490:	4a77      	ldr	r2, [pc, #476]	; (8002670 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002492:	4978      	ldr	r1, [pc, #480]	; (8002674 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8002494:	4878      	ldr	r0, [pc, #480]	; (8002678 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002496:	f003 fc0d 	bl	8005cb4 <AES_init_ctx_iv>

				ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_req_2, ret);
 800249a:	4b72      	ldr	r3, [pc, #456]	; (8002664 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4976      	ldr	r1, [pc, #472]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024a2:	4871      	ldr	r0, [pc, #452]	; (8002668 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80024a4:	f002 f93f 	bl	8004726 <SX1278_read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80024ae:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
				AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req_2, 16);
 80024b0:	2210      	movs	r2, #16
 80024b2:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024b4:	4870      	ldr	r0, [pc, #448]	; (8002678 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80024b6:	f004 f9fe 	bl	80068b6 <AES_CTR_xcrypt_buffer>

				//convert buffer to address_node_req
				local_u32addrNode_req = (buffer_req_2[0] << SHIFT_24_BIT) |(buffer_req_2[1] << SHIFT_16_BIT)
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	061a      	lsls	r2, r3, #24
 80024c0:	4b6e      	ldr	r3, [pc, #440]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
																		 |(buffer_req_2[2] << SHIFT_8_BIT) | (buffer_req_2[3] << SHIFT_0_BIT);
 80024c8:	4b6c      	ldr	r3, [pc, #432]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024ca:	789b      	ldrb	r3, [r3, #2]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024d2:	78d2      	ldrb	r2, [r2, #3]
 80024d4:	4313      	orrs	r3, r2
				local_u32addrNode_req = (buffer_req_2[0] << SHIFT_24_BIT) |(buffer_req_2[1] << SHIFT_16_BIT)
 80024d6:	61fb      	str	r3, [r7, #28]
				if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 ||
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_GPIO_EXTI_Callback+0x164>
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4a68      	ldr	r2, [pc, #416]	; (8002684 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_EXTI_Callback+0x164>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d132      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x1ca>
						local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
					{  if(buffer_req_2[4] == 0x01 || buffer_req_2[4] == 0x02){
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_EXTI_Callback+0x174>
 80024f8:	4b60      	ldr	r3, [pc, #384]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d12a      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x1ca>
						RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_ReadData(&local_index_data);
 8002500:	f107 030f 	add.w	r3, r7, #15
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fc7d 	bl	8002e04 <Rte_Flag_NodeRequestIndex_ReadData>
						gl_Flag_Timeout =1;
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_GPIO_EXTI_Callback+0x300>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, &buffer_req_2, 16, HAL_MAX_DELAY);
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	2210      	movs	r2, #16
 8002516:	4959      	ldr	r1, [pc, #356]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002518:	485d      	ldr	r0, [pc, #372]	; (8002690 <HAL_GPIO_EXTI_Callback+0x304>)
 800251a:	f008 fbd7 	bl	800accc <HAL_UART_Transmit>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	485c      	ldr	r0, [pc, #368]	; (8002694 <HAL_GPIO_EXTI_Callback+0x308>)
 8002524:	f006 f87f 	bl	8008626 <HAL_GPIO_TogglePin>
						//RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(true);
						// clear data After sending success
						memset(&buffer_req_2 , 0xff,16);
 8002528:	2210      	movs	r2, #16
 800252a:	21ff      	movs	r1, #255	; 0xff
 800252c:	4853      	ldr	r0, [pc, #332]	; (800267c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800252e:	f009 ff78 	bl	800c422 <memset>
						HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002532:	2028      	movs	r0, #40	; 0x28
 8002534:	f005 fb3b 	bl	8007bae <HAL_NVIC_DisableIRQ>
						__HAL_GPIO_EXTI_CLEAR_IT(DIO_2_Pin);
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800253a:	7d1a      	ldrb	r2, [r3, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	751a      	strb	r2, [r3, #20]
 8002540:	7d5a      	ldrb	r2, [r3, #21]
 8002542:	2200      	movs	r2, #0
 8002544:	f042 0204 	orr.w	r2, r2, #4
 8002548:	755a      	strb	r2, [r3, #21]
 800254a:	7d9a      	ldrb	r2, [r3, #22]
 800254c:	2200      	movs	r2, #0
 800254e:	759a      	strb	r2, [r3, #22]
 8002550:	7dda      	ldrb	r2, [r3, #23]
 8002552:	2200      	movs	r2, #0
 8002554:	75da      	strb	r2, [r3, #23]
					//return 1;
				}
		}


			memset(buffer_resp_2 , 0xff ,16);
 8002556:	2210      	movs	r2, #16
 8002558:	21ff      	movs	r1, #255	; 0xff
 800255a:	484f      	ldr	r0, [pc, #316]	; (8002698 <HAL_GPIO_EXTI_Callback+0x30c>)
 800255c:	f009 ff61 	bl	800c422 <memset>
		}
	}
	if(GPIO_Pin == DIO_Pin){
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 80f1 	bne.w	800274a <HAL_GPIO_EXTI_Callback+0x3be>
		if( local_state == SYS_SEND_UPDATE){
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b07      	cmp	r3, #7
 800256c:	f040 80ed 	bne.w	800274a <HAL_GPIO_EXTI_Callback+0x3be>
			local_Flag =LORA_IF_GetData_End_Frame(&SX1278_1, (uint8_t*) buffer_packet_Rx, unicast_addr,SIZE_BUFFER_112BYTES, MAX_TIME_OUT);
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2370      	movs	r3, #112	; 0x70
 800257a:	4948      	ldr	r1, [pc, #288]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 800257c:	4848      	ldr	r0, [pc, #288]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x314>)
 800257e:	f002 fa7d 	bl	8004a7c <LORA_IF_GetData_End_Frame>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			// Write status Flash to LORA RESP
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(local_Flag);
 8002588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fb97 	bl	8002cc0 <Rte_FlagLoRaResp_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(local_Flag);
 8002592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fb5c 	bl	8002c54 <Rte_UI_Error_WriteData>
			switch (local_Flag) {
 800259c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a0:	2b4f      	cmp	r3, #79	; 0x4f
 80025a2:	f000 80bb 	beq.w	800271c <HAL_GPIO_EXTI_Callback+0x390>
 80025a6:	2b76      	cmp	r3, #118	; 0x76
 80025a8:	f040 80ce 	bne.w	8002748 <HAL_GPIO_EXTI_Callback+0x3bc>
				case MCU_REQUEST_PACKET_FW_LOSS:
					//get the number packet loss
					memset(buffer_number_pack_lost , 0xffff , 64);
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025b2:	483c      	ldr	r0, [pc, #240]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x318>)
 80025b4:	f009 ff35 	bl	800c422 <memset>
					uint16_t localcounter = INITIAL_VALUE_ZERO ;
 80025b8:	2300      	movs	r3, #0
 80025ba:	84fb      	strh	r3, [r7, #38]	; 0x26
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 80025be:	7a9b      	ldrb	r3, [r3, #10]
 80025c0:	061a      	lsls	r2, r3, #24
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 80025c4:	7a5b      	ldrb	r3, [r3, #9]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
																				|(buffer_packet_Rx[8] << SHIFT_8_BIT)|(buffer_packet_Rx[7] << SHIFT_0_BIT);
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 80025cc:	7a1b      	ldrb	r3, [r3, #8]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	4a32      	ldr	r2, [pc, #200]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 80025d4:	79d2      	ldrb	r2, [r2, #7]
 80025d6:	4313      	orrs	r3, r2
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 80025d8:	61bb      	str	r3, [r7, #24]
					copy_Array_BL(u8buffer_Pack_Lost, buffer_packet_Rx,11,88);
 80025da:	2358      	movs	r3, #88	; 0x58
 80025dc:	220b      	movs	r2, #11
 80025de:	492f      	ldr	r1, [pc, #188]	; (800269c <HAL_GPIO_EXTI_Callback+0x310>)
 80025e0:	4831      	ldr	r0, [pc, #196]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80025e2:	f004 fdbb 	bl	800715c <copy_Array_BL>
					if (FL_CalculateCRCBItmaskLoRa(88,u8buffer_Pack_Lost ) == CRC_bitmask_req){
 80025e6:	4930      	ldr	r1, [pc, #192]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80025e8:	2058      	movs	r0, #88	; 0x58
 80025ea:	f7ff fc1f 	bl	8001e2c <FL_CalculateCRCBItmaskLoRa>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d17f      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x36a>
						lost_counter_pos = 0;
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_GPIO_EXTI_Callback+0x320>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]
						RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x324>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fb4b 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 8002606:	2300      	movs	r3, #0
 8002608:	84bb      	strh	r3, [r7, #36]	; 0x24
 800260a:	e014      	b.n	8002636 <HAL_GPIO_EXTI_Callback+0x2aa>
							if(!FL_getPacketlost((uint8_t*) u8buffer_Pack_Lost , i )){
 800260c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800260e:	4619      	mov	r1, r3
 8002610:	4825      	ldr	r0, [pc, #148]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002612:	f7ff fd61 	bl	80020d8 <FL_getPacketlost>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_GPIO_EXTI_Callback+0x2a4>
								buffer_number_pack_lost[localcounter] = i+1;
 800261c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800261e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002620:	3201      	adds	r2, #1
 8002622:	b291      	uxth	r1, r2
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								localcounter++;
 800262a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800262c:	3301      	adds	r3, #1
 800262e:	84fb      	strh	r3, [r7, #38]	; 0x26
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 8002630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002632:	3301      	adds	r3, #1
 8002634:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x324>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	3b01      	subs	r3, #1
 800263e:	429a      	cmp	r2, r3
 8002640:	dbe4      	blt.n	800260c <HAL_GPIO_EXTI_Callback+0x280>
							}
						}
						if(localcounter == 0){
 8002642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002644:	2b00      	cmp	r3, #0
 8002646:	d135      	bne.n	80026b4 <HAL_GPIO_EXTI_Callback+0x328>
							// no packet Lost
							RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_DONE_UPDATE);
 8002648:	2008      	movs	r0, #8
 800264a:	f000 fa13 	bl	8002a74 <Rte_SystemState_WriteData>
							RTE_RUNNABLE_UI_ERROR_WriteData(MCU_ACKNOWLEDGE_FINISHING);
 800264e:	2077      	movs	r0, #119	; 0x77
 8002650:	f000 fb00 	bl	8002c54 <Rte_UI_Error_WriteData>
 8002654:	e04f      	b.n	80026f6 <HAL_GPIO_EXTI_Callback+0x36a>
 8002656:	bf00      	nop
 8002658:	200004d4 	.word	0x200004d4
 800265c:	200004ec 	.word	0x200004ec
 8002660:	40010400 	.word	0x40010400
 8002664:	20000bb9 	.word	0x20000bb9
 8002668:	200019d0 	.word	0x200019d0
 800266c:	20000c80 	.word	0x20000c80
 8002670:	20000034 	.word	0x20000034
 8002674:	20000024 	.word	0x20000024
 8002678:	20000bc0 	.word	0x20000bc0
 800267c:	20001aec 	.word	0x20001aec
 8002680:	26011bcd 	.word	0x26011bcd
 8002684:	26011def 	.word	0x26011def
 8002688:	260120f0 	.word	0x260120f0
 800268c:	200004eb 	.word	0x200004eb
 8002690:	2000183c 	.word	0x2000183c
 8002694:	40010c00 	.word	0x40010c00
 8002698:	20000ba8 	.word	0x20000ba8
 800269c:	2000054c 	.word	0x2000054c
 80026a0:	200018a0 	.word	0x200018a0
 80026a4:	20000628 	.word	0x20000628
 80026a8:	200005d0 	.word	0x200005d0
 80026ac:	200004e8 	.word	0x200004e8
 80026b0:	20000020 	.word	0x20000020
						}
						else{
							//Get the number packet
							gl_u16NumberPacket_LoRa = localcounter;
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_GPIO_EXTI_Callback+0x3c8>)
 80026b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026b8:	8013      	strh	r3, [r2, #0]
							gl_u8backup_flag =1;
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
							lost_counter_pos++;
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_GPIO_EXTI_Callback+0x3d0>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_GPIO_EXTI_Callback+0x3d0>)
 80026ca:	801a      	strh	r2, [r3, #0]
							// Init first packet
							gl_u16No_Packet_Flash = buffer_number_pack_lost[INITIAL_VALUE_ZERO];
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80026ce:	881a      	ldrh	r2, [r3, #0]
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80026d2:	801a      	strh	r2, [r3, #0]
							if(gl_u16No_Packet_Flash != 0xffff){
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00a      	beq.n	80026f6 <HAL_GPIO_EXTI_Callback+0x36a>
								RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fad9 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
								RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(FL_FRAGMENT_FIRMWARE);
 80026ea:	20fe      	movs	r0, #254	; 0xfe
 80026ec:	f000 fae8 	bl	8002cc0 <Rte_FlagLoRaResp_WriteData>
								RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80026f0:	2006      	movs	r0, #6
 80026f2:	f000 f9bf 	bl	8002a74 <Rte_SystemState_WriteData>
							}
						}
					}
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80026f6:	2007      	movs	r0, #7
 80026f8:	f005 fa59 	bl	8007bae <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_GPIO_EXTI_Callback+0x3dc>)
 80026fe:	7d1a      	ldrb	r2, [r3, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	f042 0202 	orr.w	r2, r2, #2
 8002706:	751a      	strb	r2, [r3, #20]
 8002708:	7d5a      	ldrb	r2, [r3, #21]
 800270a:	2200      	movs	r2, #0
 800270c:	755a      	strb	r2, [r3, #21]
 800270e:	7d9a      	ldrb	r2, [r3, #22]
 8002710:	2200      	movs	r2, #0
 8002712:	759a      	strb	r2, [r3, #22]
 8002714:	7dda      	ldrb	r2, [r3, #23]
 8002716:	2200      	movs	r2, #0
 8002718:	75da      	strb	r2, [r3, #23]
					break;
 800271a:	e016      	b.n	800274a <HAL_GPIO_EXTI_Callback+0x3be>
				case MCU_ERROR_CRC :
					/* SEND UART NRC to ESP hear*/
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800271c:	2000      	movs	r0, #0
 800271e:	f000 f9a9 	bl	8002a74 <Rte_SystemState_WriteData>
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002722:	2007      	movs	r0, #7
 8002724:	f005 fa43 	bl	8007bae <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO_Pin);
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_GPIO_EXTI_Callback+0x3dc>)
 800272a:	7d1a      	ldrb	r2, [r3, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	f042 0202 	orr.w	r2, r2, #2
 8002732:	751a      	strb	r2, [r3, #20]
 8002734:	7d5a      	ldrb	r2, [r3, #21]
 8002736:	2200      	movs	r2, #0
 8002738:	755a      	strb	r2, [r3, #21]
 800273a:	7d9a      	ldrb	r2, [r3, #22]
 800273c:	2200      	movs	r2, #0
 800273e:	759a      	strb	r2, [r3, #22]
 8002740:	7dda      	ldrb	r2, [r3, #23]
 8002742:	2200      	movs	r2, #0
 8002744:	75da      	strb	r2, [r3, #23]
					//HAL_UART_Transmit(&huart2, gl_u8ErrorFlag, 1, HAL_MAX_DELAY);
					break;
 8002746:	e000      	b.n	800274a <HAL_GPIO_EXTI_Callback+0x3be>
				default:
					/*Unknown Error*/
					break;
 8002748:	bf00      	nop
			}

		}
	}

}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200004e4 	.word	0x200004e4
 8002758:	200004e7 	.word	0x200004e7
 800275c:	200004e8 	.word	0x200004e8
 8002760:	20000628 	.word	0x20000628
 8002764:	20000020 	.word	0x20000020
 8002768:	40010400 	.word	0x40010400

0800276c <GW_Config_GetParameter>:

// Global Parameter
uint8_t u8BW; // Bandwidth
uint8_t u8SF; // Spreading Frequency
uint8_t u8CR; // Coding Rate
uint32_t GW_Config_GetParameter(uint32_t Address){
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	return *((volatile uint32_t*)(Address));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <GW_voidEraseRestoreConfigPage>:


void GW_voidEraseRestoreConfigPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8002784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002788:	b0b2      	sub	sp, #200	; 0xc8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <GW_voidEraseRestoreConfigPage+0x124>)
 80027a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a8:	e031      	b.n	800280e <GW_voidEraseRestoreConfigPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 80027aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4013      	ands	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <GW_voidEraseRestoreConfigPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80027d4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	33c8      	adds	r3, #200	; 0xc8
 80027dc:	443b      	add	r3, r7
 80027de:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027e2:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80027e6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027ea:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	33c8      	adds	r3, #200	; 0xc8
 80027f4:	443b      	add	r3, r7
 80027f6:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80027fa:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80027fe:	3301      	adds	r3, #1
 8002800:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 8002804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002808:	3304      	adds	r3, #4
 800280a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 800280e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002812:	4a26      	ldr	r2, [pc, #152]	; (80028ac <GW_voidEraseRestoreConfigPage+0x128>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d9c8      	bls.n	80027aa <GW_voidEraseRestoreConfigPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_STATUS_GW_CONFIG;
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <GW_voidEraseRestoreConfigPage+0x124>)
 8002822:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8002828:	f005 fafe 	bl	8007e28 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 800282c:	f107 020c 	add.w	r2, r7, #12
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fbde 	bl	8007ff8 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 800283c:	2300      	movs	r3, #0
 800283e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8002842:	e01a      	b.n	800287a <GW_voidEraseRestoreConfigPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8002844:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	33c8      	adds	r3, #200	; 0xc8
 800284c:	443b      	add	r3, r7
 800284e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8002852:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	33c8      	adds	r3, #200	; 0xc8
 800285a:	443b      	add	r3, r7
 800285c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002860:	2200      	movs	r2, #0
 8002862:	4698      	mov	r8, r3
 8002864:	4691      	mov	r9, r2
 8002866:	4642      	mov	r2, r8
 8002868:	464b      	mov	r3, r9
 800286a:	2002      	movs	r0, #2
 800286c:	f005 fa6c 	bl	8007d48 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8002870:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002874:	3301      	adds	r3, #1
 8002876:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800287a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800287e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002882:	429a      	cmp	r2, r3
 8002884:	d3de      	bcc.n	8002844 <GW_voidEraseRestoreConfigPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	461c      	mov	r4, r3
 800288c:	4615      	mov	r5, r2
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	2002      	movs	r0, #2
 8002896:	f005 fa57 	bl	8007d48 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800289a:	f005 faeb 	bl	8007e74 <HAL_FLASH_Lock>
}
 800289e:	bf00      	nop
 80028a0:	37c8      	adds	r7, #200	; 0xc8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028a8:	0801fc00 	.word	0x0801fc00
 80028ac:	0801fc4f 	.word	0x0801fc4f

080028b0 <GW_Config_Init>:


void GW_Config_Init(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 80028b6:	2310      	movs	r3, #16
 80028b8:	9305      	str	r3, [sp, #20]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	2300      	movs	r3, #0
 80028c0:	9303      	str	r3, [sp, #12]
 80028c2:	2307      	movs	r3, #7
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	2306      	movs	r3, #6
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2301      	movs	r3, #1
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	a31f      	add	r3, pc, #124	; (adr r3, 800294c <GW_Config_Init+0x9c>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	4818      	ldr	r0, [pc, #96]	; (8002938 <GW_Config_Init+0x88>)
 80028d6:	f001 fef9 	bl	80046cc <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 80028da:	2310      	movs	r3, #16
 80028dc:	9305      	str	r3, [sp, #20]
 80028de:	2300      	movs	r3, #0
 80028e0:	9304      	str	r3, [sp, #16]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	2307      	movs	r3, #7
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	2306      	movs	r3, #6
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2301      	movs	r3, #1
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	a30f      	add	r3, pc, #60	; (adr r3, 8002930 <GW_Config_Init+0x80>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	4810      	ldr	r0, [pc, #64]	; (800293c <GW_Config_Init+0x8c>)
 80028fa:	f001 fee7 	bl	80046cc <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);

	//init Lora RA-02 spi 2 RX mode
	//SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	RTE_RUNNABLE_APP_VER_WriteData(GW_Config_GetParameter(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS));
 80028fe:	4810      	ldr	r0, [pc, #64]	; (8002940 <GW_Config_Init+0x90>)
 8002900:	f7ff ff34 	bl	800276c <GW_Config_GetParameter>
 8002904:	4603      	mov	r3, r0
 8002906:	b29b      	uxth	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f913 	bl	8002b34 <Rte_ApplVer_WriteData>
	RTE_RUNNABLE_NODE_ADDR_WriteData(GW_Config_GetParameter(FLAG_STATUS_ADDRESS_TARGET_ADDRESS));
 800290e:	480d      	ldr	r0, [pc, #52]	; (8002944 <GW_Config_Init+0x94>)
 8002910:	f7ff ff2c 	bl	800276c <GW_Config_GetParameter>
 8002914:	4603      	mov	r3, r0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f930 	bl	8002b7c <Rte_NodeAddr_WriteData>
	RTE_RUNNABLE_CODE_SIZE_WriteData(GW_Config_GetParameter(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS));
 800291c:	480a      	ldr	r0, [pc, #40]	; (8002948 <GW_Config_Init+0x98>)
 800291e:	f7ff ff25 	bl	800276c <GW_Config_GetParameter>
 8002922:	4603      	mov	r3, r0
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f917 	bl	8002b58 <Rte_CodeSize_WriteData>
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	19cf0e40 	.word	0x19cf0e40
 8002934:	00000000 	.word	0x00000000
 8002938:	200018a0 	.word	0x200018a0
 800293c:	200019d0 	.word	0x200019d0
 8002940:	0801fc30 	.word	0x0801fc30
 8002944:	0801fc34 	.word	0x0801fc34
 8002948:	0801fc38 	.word	0x0801fc38
 800294c:	19de5080 	.word	0x19de5080
 8002950:	00000000 	.word	0x00000000

08002954 <GW_State_Save_State>:

void GW_State_Save_State(uint8_t State){
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	GW_voidEraseRestoreConfigPage(FLAG_STATE_GW_CONFIG,State );
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4619      	mov	r1, r3
 8002962:	4803      	ldr	r0, [pc, #12]	; (8002970 <GW_State_Save_State+0x1c>)
 8002964:	f7ff ff0e 	bl	8002784 <GW_voidEraseRestoreConfigPage>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	0801fc08 	.word	0x0801fc08

08002974 <GW_Reset_State>:
void GW_Reset_State(void){
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
	uint8_t flag_reset = 0xFB;
 800297a:	23fb      	movs	r3, #251	; 0xfb
 800297c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&flag_reset, 1, HAL_MAX_DELAY);
 800297e:	1df9      	adds	r1, r7, #7
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	2201      	movs	r2, #1
 8002986:	4803      	ldr	r0, [pc, #12]	; (8002994 <GW_Reset_State+0x20>)
 8002988:	f008 f9a0 	bl	800accc <HAL_UART_Transmit>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000183c 	.word	0x2000183c

08002998 <GW_State_Init>:
void GW_State_Init(void){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	uint8_t local_state = 0 ;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
	local_state = GW_Config_GetParameter(FLAG_STATE_GW_CONFIG);
 80029a2:	480a      	ldr	r0, [pc, #40]	; (80029cc <GW_State_Init+0x34>)
 80029a4:	f7ff fee2 	bl	800276c <GW_Config_GetParameter>
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
	if (local_state  == 0xFF){
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d103      	bne.n	80029ba <GW_State_Init+0x22>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 f85e 	bl	8002a74 <Rte_SystemState_WriteData>
	}
	else{
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
	}
}
 80029b8:	e003      	b.n	80029c2 <GW_State_Init+0x2a>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f859 	bl	8002a74 <Rte_SystemState_WriteData>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	0801fc08 	.word	0x0801fc08

080029d0 <GW_Config_SetUp>:
void GW_Config_SetUp(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af06      	add	r7, sp, #24
	uint32_t GW_u32LocalStatus_GW_Config = GW_Config_GetParameter(FLAG_STATUS_GW_CONFIG);
 80029d6:	4820      	ldr	r0, [pc, #128]	; (8002a58 <GW_Config_SetUp+0x88>)
 80029d8:	f7ff fec8 	bl	800276c <GW_Config_GetParameter>
 80029dc:	6078      	str	r0, [r7, #4]
	uint32_t GW_u32LocalParameter= GW_Config_GetParameter(FLAG_PARAMETER_GW_CONFIG);
 80029de:	481f      	ldr	r0, [pc, #124]	; (8002a5c <GW_Config_SetUp+0x8c>)
 80029e0:	f7ff fec4 	bl	800276c <GW_Config_GetParameter>
 80029e4:	4603      	mov	r3, r0
 80029e6:	603b      	str	r3, [r7, #0]
	// Get Parameter

	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_SET ){
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d103      	bne.n	80029f8 <GW_Config_SetUp+0x28>

		// SET CONFIG Value as Default
		GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG ,GW_CONFIG_PARAMETER_SF_BW_CR_DEFAULT );
 80029f0:	491b      	ldr	r1, [pc, #108]	; (8002a60 <GW_Config_SetUp+0x90>)
 80029f2:	481a      	ldr	r0, [pc, #104]	; (8002a5c <GW_Config_SetUp+0x8c>)
 80029f4:	f7ff fec6 	bl	8002784 <GW_voidEraseRestoreConfigPage>
	}
	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_RESET ){
		// do nothing
	}
	RTE_RUNNABLE_CONFIG_LORA_ReadData(&GW_u32LocalParameter);
 80029f8:	463b      	mov	r3, r7
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f9a8 	bl	8002d50 <Rte_FlagConfigLoRA_ReadData>
	u8SF = (GW_u32LocalParameter >> SHIFT_16_BIT)& 0xFF ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <GW_Config_SetUp+0x94>)
 8002a08:	701a      	strb	r2, [r3, #0]
	u8BW = (GW_u32LocalParameter >> SHIFT_8_BIT)& 0xFF ;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <GW_Config_SetUp+0x98>)
 8002a12:	701a      	strb	r2, [r3, #0]
	u8CR = (GW_u32LocalParameter >> SHIFT_0_BIT)& 0xFF ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <GW_Config_SetUp+0x9c>)
 8002a1a:	701a      	strb	r2, [r3, #0]
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, u8SF,
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <GW_Config_SetUp+0x94>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <GW_Config_SetUp+0x98>)
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	4911      	ldr	r1, [pc, #68]	; (8002a6c <GW_Config_SetUp+0x9c>)
 8002a26:	7809      	ldrb	r1, [r1, #0]
 8002a28:	2010      	movs	r0, #16
 8002a2a:	9005      	str	r0, [sp, #20]
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	9004      	str	r0, [sp, #16]
 8002a30:	9103      	str	r1, [sp, #12]
 8002a32:	9202      	str	r2, [sp, #8]
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	2301      	movs	r3, #1
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	a305      	add	r3, pc, #20	; (adr r3, 8002a50 <GW_Config_SetUp+0x80>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	480b      	ldr	r0, [pc, #44]	; (8002a70 <GW_Config_SetUp+0xa0>)
 8002a42:	f001 fe43 	bl	80046cc <SX1278_init>
			u8BW, u8CR, SX1278_LORA_CRC_EN, 16);
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	19de5080 	.word	0x19de5080
 8002a54:	00000000 	.word	0x00000000
 8002a58:	0801fc00 	.word	0x0801fc00
 8002a5c:	0801fc04 	.word	0x0801fc04
 8002a60:	00010801 	.word	0x00010801
 8002a64:	20000c84 	.word	0x20000c84
 8002a68:	20000c83 	.word	0x20000c83
 8002a6c:	20000c85 	.word	0x20000c85
 8002a70:	200018a0 	.word	0x200018a0

08002a74 <Rte_SystemState_WriteData>:
static uint8_t gl_u8Flag_Node_Status_Node1 =INITIAL_VALUE_ZERO ;
/*Port*/
/**************************************************************************/
/*                         Ports Write SystemState                         */
/**************************************************************************/
Std_ReturnType Rte_SystemState_WriteData(uint8_t SystemStateVar){
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
	gl_u8SystemState = SystemStateVar;
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <Rte_SystemState_WriteData+0x20>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000c86 	.word	0x20000c86

08002a98 <Rte_SystemState_ReadData>:
/**************************************************************************/
/*                         Ports Read SystemState                        */
/**************************************************************************/
Std_ReturnType Rte_SystemState_ReadData(uint8_t *SystemStateVar){
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
	(*SystemStateVar) = gl_u8SystemState;
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <Rte_SystemState_ReadData+0x20>)
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20000c86 	.word	0x20000c86

08002abc <Rte_EncyptedBuffer_WriteData>:
/**************************************************************************/
/*                         Ports Write Encrypt                            */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_WriteData(uint8_t *EncyptedBufferP2Var){
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <Rte_EncyptedBuffer_WriteData+0x18>
		gl_EncryptDataBufferPtr = EncyptedBufferP2Var;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <Rte_EncyptedBuffer_WriteData+0x24>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6013      	str	r3, [r2, #0]
	return retVal;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000c9c 	.word	0x20000c9c

08002ae4 <Rte_EncyptedBuffer_ReadData>:
	return retVal;
}
/**************************************************************************/
/*                         Ports Read Encrypt                             */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_ReadData(uint8_t **EncyptedBufferP2Var){
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <Rte_EncyptedBuffer_ReadData+0x1a>
		(*EncyptedBufferP2Var) = gl_EncryptDataBufferPtr;
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <Rte_EncyptedBuffer_ReadData+0x28>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
	return retVal;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000c9c 	.word	0x20000c9c

08002b10 <Rte_Crc_WriteData>:


/**************************************************************************/
/*                         Ports Write Update FW                         */
/**************************************************************************/
Std_ReturnType Rte_Crc_WriteData(uint32_t CRCVar){
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
	gl_u32CRCVar = CRCVar;
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <Rte_Crc_WriteData+0x20>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
	return retVal;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000c88 	.word	0x20000c88

08002b34 <Rte_ApplVer_WriteData>:
Std_ReturnType Rte_ApplVer_WriteData(uint16_t ApplVerVar){
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
	gl_u8ApplVerVar = ApplVerVar;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <Rte_ApplVer_WriteData+0x20>)
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000c8c 	.word	0x20000c8c

08002b58 <Rte_CodeSize_WriteData>:
Std_ReturnType Rte_CodeSize_WriteData(uint32_t CodeSizeVar){
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
	gl_u32CodeSizeVar = CodeSizeVar;
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <Rte_CodeSize_WriteData+0x20>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
	return retVal;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000c90 	.word	0x20000c90

08002b7c <Rte_NodeAddr_WriteData>:
Std_ReturnType Rte_NodeAddr_WriteData(uint32_t NodeAddrVar){
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
	gl_u32NodeAddrVar = NodeAddrVar;
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <Rte_NodeAddr_WriteData+0x20>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
	return retVal;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000c94 	.word	0x20000c94

08002ba0 <Rte_UpdateProgress_WriteData>:
{
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8HeaderAckFLagVar = HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_WriteData(uint8_t UpdateProgressVar){
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
	gl_u8UpdateProgressVar = UpdateProgressVar;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <Rte_UpdateProgress_WriteData+0x20>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000c98 	.word	0x20000c98

08002bc4 <Rte_ApplVer_ReadData>:
Std_ReturnType Rte_Crc_ReadData(uint32_t *CRCVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*CRCVar) = gl_u32CRCVar;
	return retVal;
}
Std_ReturnType Rte_ApplVer_ReadData(uint16_t *ApplVerVar){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
	(*ApplVerVar) = gl_u8ApplVerVar;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <Rte_ApplVer_ReadData+0x20>)
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000c8c 	.word	0x20000c8c

08002be8 <Rte_CodeSize_ReadData>:
Std_ReturnType Rte_CodeSize_ReadData(uint32_t *CodeSizeVar){
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
	(*CodeSizeVar) = gl_u32CodeSizeVar;
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <Rte_CodeSize_ReadData+0x20>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	601a      	str	r2, [r3, #0]
	return retVal;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000c90 	.word	0x20000c90

08002c0c <Rte_NodeAddr_ReadData>:
Std_ReturnType Rte_NodeAddr_ReadData(uint32_t *NodeAddrVar){
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
	(*NodeAddrVar) = gl_u32NodeAddrVar;
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <Rte_NodeAddr_ReadData+0x20>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]
	return retVal;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000c94 	.word	0x20000c94

08002c30 <Rte_UpdateProgress_ReadData>:
Std_ReturnType Rte_HeaderAckFlag_ReadData(uint8_t *HeaderAckFLagVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*HeaderAckFLagVar) = gl_u8HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_ReadData(uint8_t *UpdateProgressVar){
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
	(*UpdateProgressVar) = gl_u8UpdateProgressVar;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <Rte_UpdateProgress_ReadData+0x20>)
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000c98 	.word	0x20000c98

08002c54 <Rte_UI_Error_WriteData>:
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8UserResponseVar = UserResponseVar;
	return retVal;
}

Std_ReturnType Rte_UI_Error_WriteData(uint8_t UIErrorVar){
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
	gl_u8UIErrorVar = UIErrorVar;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <Rte_UI_Error_WriteData+0x20>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000ca0 	.word	0x20000ca0

08002c78 <Rte_UI_Error_ReadData>:

/**************************************************************************/
/*                        Ports  Read UI						 		  */
/**************************************************************************/
Std_ReturnType Rte_UI_Error_ReadData(uint8_t *UIErrorVar ){
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
	(*UIErrorVar) = gl_u8UIErrorVar;
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <Rte_UI_Error_ReadData+0x20>)
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000ca0 	.word	0x20000ca0

08002c9c <Rte_PacketSendLoraNum_WriteData>:
	return retVal;
}
/**************************************************************************/
/*                        Ports  Write num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_WriteData(uint16_t NumPacketLoraFWVar){
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
	gl_u16NumPacketLoraFWVar = NumPacketLoraFWVar;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <Rte_PacketSendLoraNum_WriteData+0x20>)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000ca2 	.word	0x20000ca2

08002cc0 <Rte_FlagLoRaResp_WriteData>:

Std_ReturnType Rte_FlagLoRaResp_WriteData(uint8_t FlagLoRaRespVar){
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRaRespVar = FlagLoRaRespVar;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <Rte_FlagLoRaResp_WriteData+0x20>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000ca4 	.word	0x20000ca4

08002ce4 <Rte_FlagConfigLoRA_WriteData>:

Std_ReturnType Rte_FlagConfigLoRA_WriteData(uint32_t FlagLoraConfigVar){
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
	gl_u32FlagLoraConfigVar = FlagLoraConfigVar;
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <Rte_FlagConfigLoRA_WriteData+0x20>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6013      	str	r3, [r2, #0]
	return retVal;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000ca8 	.word	0x20000ca8

08002d08 <Rte_PacketSendLoraNum_ReadData>:


/**************************************************************************/
/*                        Ports  Read num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_ReadData(uint16_t *NumPacketLoraFWVar){
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
	(*NumPacketLoraFWVar) = gl_u16NumPacketLoraFWVar;
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <Rte_PacketSendLoraNum_ReadData+0x20>)
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20000ca2 	.word	0x20000ca2

08002d2c <Rte_FlagLoRaResp_ReadData>:
Std_ReturnType Rte_FlagLoRaResp_ReadData(uint8_t *FlagLoRaRespVar){
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
	(*FlagLoRaRespVar) = gl_u8FlagLoRaRespVar;
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <Rte_FlagLoRaResp_ReadData+0x20>)
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000ca4 	.word	0x20000ca4

08002d50 <Rte_FlagConfigLoRA_ReadData>:

Std_ReturnType Rte_FlagConfigLoRA_ReadData(uint32_t *FlagLoraConfigVar){
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
	(*FlagLoraConfigVar) =gl_u32FlagLoraConfigVar ;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <Rte_FlagConfigLoRA_ReadData+0x20>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]
	return retVal;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	20000ca8 	.word	0x20000ca8

08002d74 <Rte_PacketLoRaReceived_WriteData>:

/**************************************************************************/
/*                         Ports Write Received Packet LoRa            */
/**************************************************************************/
Std_ReturnType Rte_PacketLoRaReceived_WriteData(uint8_t *BufferLoRaReceivedP2Var ){
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
	gl_DataBufferLoRaPtr= BufferLoRaReceivedP2Var;
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <Rte_PacketLoRaReceived_WriteData+0x20>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
	return retVal;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000cb0 	.word	0x20000cb0

08002d98 <Rte_Flag_LoRaRequestDevice_WriteData>:
	(*BufferLoRaReceivedP2Var) = gl_DataBufferLoRaPtr;
	return retVal;
}


Std_ReturnType Rte_Flag_LoRaRequestDevice_WriteData(uint8_t FlagLoRa_DeviceVar){
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRa_DeviceVar = FlagLoRa_DeviceVar;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <Rte_Flag_LoRaRequestDevice_WriteData+0x20>)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000cac 	.word	0x20000cac

08002dbc <Rte_Flag_LoRaRequestDevice_ReadData>:

Std_ReturnType Rte_Flag_LoRaRequestDevice_ReadData(uint8_t *FlagLoRa_DeviceVar){
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
	(*FlagLoRa_DeviceVar) = gl_u8FlagLoRa_DeviceVar;
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <Rte_Flag_LoRaRequestDevice_ReadData+0x20>)
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000cac 	.word	0x20000cac

08002de0 <Rte_Flag_NodeRequestIndex_WriteData>:

/***************************************************************************/
/* 							Ports Define Node Connect                      */
/***************************************************************************/
Std_ReturnType Rte_Flag_NodeRequestIndex_WriteData(uint8_t NumIndex_Node){
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
	gl_u8NumIndex_Node = NumIndex_Node;
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <Rte_Flag_NodeRequestIndex_WriteData+0x20>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000cb4 	.word	0x20000cb4

08002e04 <Rte_Flag_NodeRequestIndex_ReadData>:
Std_ReturnType Rte_Flag_NodeRequestIndex_ReadData(uint8_t *NumIndex_Node){
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
	(*NumIndex_Node) = gl_u8NumIndex_Node;
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <Rte_Flag_NodeRequestIndex_ReadData+0x20>)
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000cb4 	.word	0x20000cb4

08002e28 <Rte_Flag_Total_request_packet_WriteData>:

Std_ReturnType Rte_Flag_Total_request_packet_WriteData(uint16_t Num_Total_Packet){
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
	gl_u16totalpacket = Num_Total_Packet;
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <Rte_Flag_Total_request_packet_WriteData+0x20>)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	8013      	strh	r3, [r2, #0]
	return retVal;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000cb6 	.word	0x20000cb6

08002e4c <Rte_Flag_Total_request_packet_ReadData>:

Std_ReturnType Rte_Flag_Total_request_packet_ReadData(uint16_t *Num_Total_Packet){
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
	(*Num_Total_Packet) = gl_u16totalpacket;
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <Rte_Flag_Total_request_packet_ReadData+0x20>)
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	801a      	strh	r2, [r3, #0]
	return retVal;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000cb6 	.word	0x20000cb6

08002e70 <Rte_Flag_NodeStatus_WriteData_Node1>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node1(uint8_t Flag_Node_Status){
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node1  = Flag_Node_Status;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <Rte_Flag_NodeStatus_WriteData_Node1+0x20>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000cba 	.word	0x20000cba

08002e94 <Rte_Flag_NodeStatus_WriteData_Node2>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node2(uint8_t Flag_Node_Status){
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node2  = Flag_Node_Status;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <Rte_Flag_NodeStatus_WriteData_Node2+0x20>)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	20000cb8 	.word	0x20000cb8

08002eb8 <Rte_Flag_NodeStatus_WriteData_Node3>:

Std_ReturnType Rte_Flag_NodeStatus_WriteData_Node3(uint8_t Flag_Node_Status){
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
	gl_u8Flag_Node_Status_Node3  = Flag_Node_Status;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <Rte_Flag_NodeStatus_WriteData_Node3+0x20>)
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	7013      	strb	r3, [r2, #0]
	return retVal;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	20000cb9 	.word	0x20000cb9

08002edc <Rte_Flag_NodeStatus_ReadData_Node1>:
Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node1(uint8_t *Flag_Node_Status){
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node1;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <Rte_Flag_NodeStatus_ReadData_Node1+0x20>)
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	20000cba 	.word	0x20000cba

08002f00 <Rte_Flag_NodeStatus_ReadData_Node2>:

Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node2(uint8_t *Flag_Node_Status){
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node2 ;
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <Rte_Flag_NodeStatus_ReadData_Node2+0x20>)
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000cb8 	.word	0x20000cb8

08002f24 <Rte_Flag_NodeStatus_ReadData_Node3>:

Std_ReturnType Rte_Flag_NodeStatus_ReadData_Node3(uint8_t *Flag_Node_Status){
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
	(*Flag_Node_Status) = gl_u8Flag_Node_Status_Node3 ;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <Rte_Flag_NodeStatus_ReadData_Node3+0x20>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	701a      	strb	r2, [r3, #0]
	return retVal;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000cb9 	.word	0x20000cb9

08002f48 <ReceiveFWUpdate_Init>:

/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveFWUpdate_Init(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	gl_u32NodeAddr 						= INITIAL_VALUE_ZERO;
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <ReceiveFWUpdate_Init+0x84>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
	gl_u8TypeFlag 						= INITIAL_VALUE_ZERO;
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <ReceiveFWUpdate_Init+0x88>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
	gl_u32ImgSize 						= INITIAL_VALUE_ZERO;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <ReceiveFWUpdate_Init+0x8c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
	gl_u16AppVersion 					= INITIAL_VALUE_ZERO;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <ReceiveFWUpdate_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]
	gl_u32CRCValue 						= INITIAL_VALUE_ZERO;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <ReceiveFWUpdate_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
	gl_u32ConfigLoRa 					= INITIAL_VALUE_ZERO;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <ReceiveFWUpdate_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
	gl_u8SystemState 					= SYS_IDLE;
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <ReceiveFWUpdate_Init+0x9c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
	gl_RXUartInternal_State 			= RX_IDLE;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <ReceiveFWUpdate_Init+0xa0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
	gl_u8RxUserResp						= INITIAL_VALUE_ZERO;
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <ReceiveFWUpdate_Init+0xa4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
	gl_u8DonwLoadPercentProogess 		= INITIAL_VALUE_ZERO;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <ReceiveFWUpdate_Init+0xa8>)
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
	gl_u32Remain_Byte					= INITIAL_VALUE_ZERO;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <ReceiveFWUpdate_Init+0xac>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
	gl_u8DownLoadUpdateProgress 		= INITIAL_VALUE_ZERO;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <ReceiveFWUpdate_Init+0xb0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
	gl_u8NumberPacket_Uart 				= INITIAL_VALUE_ZERO;
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <ReceiveFWUpdate_Init+0xb4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
	gl_u16NumberPacket_LoRa 				= INITIAL_VALUE_ZERO;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <ReceiveFWUpdate_Init+0xb8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
	gl_u32ReceiveBytes 					= INITIAL_VALUE_ZERO;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <ReceiveFWUpdate_Init+0xbc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <ReceiveFWUpdate_Init+0xc0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <ReceiveFWUpdate_Init+0xc0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 	1);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4914      	ldr	r1, [pc, #80]	; (800300c <ReceiveFWUpdate_Init+0xc4>)
 8002fbc:	4812      	ldr	r0, [pc, #72]	; (8003008 <ReceiveFWUpdate_Init+0xc0>)
 8002fbe:	f007 ff08 	bl	800add2 <HAL_UART_Receive_IT>

	F_voidInitVariables();
 8002fc2:	f7fe fbb9 	bl	8001738 <F_voidInitVariables>
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000cbc 	.word	0x20000cbc
 8002fd0:	20000cc0 	.word	0x20000cc0
 8002fd4:	20000cc4 	.word	0x20000cc4
 8002fd8:	20000cc8 	.word	0x20000cc8
 8002fdc:	20000ccc 	.word	0x20000ccc
 8002fe0:	20000cd0 	.word	0x20000cd0
 8002fe4:	20001101 	.word	0x20001101
 8002fe8:	20000cd4 	.word	0x20000cd4
 8002fec:	20001100 	.word	0x20001100
 8002ff0:	200010f8 	.word	0x200010f8
 8002ff4:	200010f0 	.word	0x200010f0
 8002ff8:	200010f4 	.word	0x200010f4
 8002ffc:	200010ed 	.word	0x200010ed
 8003000:	200010ee 	.word	0x200010ee
 8003004:	200010fc 	.word	0x200010fc
 8003008:	2000183c 	.word	0x2000183c
 800300c:	200010d8 	.word	0x200010d8

08003010 <ReceiveFWUpdate_MainFunc>:
void ReceiveFWUpdate_MainFunc(void){
 8003010:	b598      	push	{r3, r4, r7, lr}
 8003012:	af00      	add	r7, sp, #0
	switch (gl_RXUartInternal_State) {
 8003014:	4ba5      	ldr	r3, [pc, #660]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f200 8283 	bhi.w	8003524 <ReceiveFWUpdate_MainFunc+0x514>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <ReceiveFWUpdate_MainFunc+0x14>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003059 	.word	0x08003059
 8003028:	0800307b 	.word	0x0800307b
 800302c:	080030e7 	.word	0x080030e7
 8003030:	08003525 	.word	0x08003525
 8003034:	08003305 	.word	0x08003305
 8003038:	08003525 	.word	0x08003525
 800303c:	08003525 	.word	0x08003525
 8003040:	08003525 	.word	0x08003525
 8003044:	08003525 	.word	0x08003525
 8003048:	08003525 	.word	0x08003525
 800304c:	08003525 	.word	0x08003525
 8003050:	080034a3 	.word	0x080034a3
 8003054:	080030af 	.word	0x080030af
		case RX_IDLE:

		{	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003058:	4b95      	ldr	r3, [pc, #596]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	4b94      	ldr	r3, [pc, #592]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	60da      	str	r2, [r3, #12]
			if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST)
 8003068:	4b92      	ldr	r3, [pc, #584]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 825b 	bne.w	8003528 <ReceiveFWUpdate_MainFunc+0x518>
				gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 8003072:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
			break;
 8003078:	e256      	b.n	8003528 <ReceiveFWUpdate_MainFunc+0x518>
		}
		case RX_ACCEPT_UPDATE :
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;
 800307a:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 800307c:	2205      	movs	r2, #5
 800307e:	701a      	strb	r2, [r3, #0]
			// Stop IT Timer vs EXT
			HAL_TIM_Base_Stop_IT(&htim2);
 8003080:	488e      	ldr	r0, [pc, #568]	; (80032bc <ReceiveFWUpdate_MainFunc+0x2ac>)
 8003082:	f007 fa17 	bl	800a4b4 <HAL_TIM_Base_Stop_IT>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003086:	2028      	movs	r0, #40	; 0x28
 8003088:	f004 fd91 	bl	8007bae <HAL_NVIC_DisableIRQ>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 800308c:	2004      	movs	r0, #4
 800308e:	f7ff fe83 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
			F_Erase_Image(IMAGE_NEW_FIRMWARE);
 8003092:	488b      	ldr	r0, [pc, #556]	; (80032c0 <ReceiveFWUpdate_MainFunc+0x2b0>)
 8003094:	f7fe fb9c 	bl	80017d0 <F_Erase_Image>
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	2201      	movs	r2, #1
 800309e:	4986      	ldr	r1, [pc, #536]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030a0:	4883      	ldr	r0, [pc, #524]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030a2:	f007 fe13 	bl	800accc <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 80030a6:	4b81      	ldr	r3, [pc, #516]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
			break;
 80030ac:	e241      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
		}
		case RX_DENY_UPDATE:
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_DENY;
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030b0:	2206      	movs	r2, #6
 80030b2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	2201      	movs	r2, #1
 80030ba:	497f      	ldr	r1, [pc, #508]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80030bc:	487c      	ldr	r0, [pc, #496]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030be:	f007 fe05 	bl	800accc <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_u8RxUserResp = INITIAL_VALUE_ZERO;
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <ReceiveFWUpdate_MainFunc+0x2b4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff fcd3 	bl	8002a74 <Rte_SystemState_WriteData>
			// Enable Uart Interrupt hear
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80030ce:	4b78      	ldr	r3, [pc, #480]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0220 	orr.w	r2, r2, #32
 80030dc:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State = RX_IDLE;
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
			break;
 80030e4:	e225      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
			/*Receive Header file*/
			//HAL_UART_Receive(&huart2, gl_u8RXBuffer_Header, HEADER_CONFIG_SIZE, HAL_MAX_DELAY);
			/*Put Information FW to RTE*/
			//byte 7 to byte 4 is size

			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 80030e8:	7a1b      	ldrb	r3, [r3, #8]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <ReceiveFWUpdate_MainFunc+0x2b8>)
 80030ee:	fb03 f202 	mul.w	r2, r3, r2
 80030f2:	4b70      	ldr	r3, [pc, #448]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 80030f4:	79db      	ldrb	r3, [r3, #7]
 80030f6:	4619      	mov	r1, r3
 80030f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	441a      	add	r2, r3
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003104:	799b      	ldrb	r3, [r3, #6]
 8003106:	4619      	mov	r1, r3
 8003108:	2364      	movs	r3, #100	; 0x64
 800310a:	fb01 f303 	mul.w	r3, r1, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 800310e:	4413      	add	r3, r2
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8003110:	4a68      	ldr	r2, [pc, #416]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003112:	7952      	ldrb	r2, [r2, #5]
 8003114:	4413      	add	r3, r2
 8003116:	461a      	mov	r2, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8003118:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <ReceiveFWUpdate_MainFunc+0x2bc>)
 800311a:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = (gl_u8RXBuffer_Header[9] << SHIFT_8_BIT) | (gl_u8RXBuffer_Header[10] << SHIFT_0_BIT);
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800311e:	7a5b      	ldrb	r3, [r3, #9]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	b21a      	sxth	r2, r3
 8003124:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003126:	7a9b      	ldrb	r3, [r3, #10]
 8003128:	b21b      	sxth	r3, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	b21b      	sxth	r3, r3
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <ReceiveFWUpdate_MainFunc+0x2c0>)
 8003132:	801a      	strh	r2, [r3, #0]
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8003134:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003136:	7b9b      	ldrb	r3, [r3, #14]
 8003138:	061a      	lsls	r2, r3, #24
 800313a:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800313c:	7b1b      	ldrb	r3, [r3, #12]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
							 |(gl_u8RXBuffer_Header[11] <<  SHIFT_8_BIT)  | (gl_u8RXBuffer_Header[13] << SHIFT_0_BIT);
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003144:	7adb      	ldrb	r3, [r3, #11]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4313      	orrs	r3, r2
 800314a:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800314c:	7b52      	ldrb	r2, [r2, #13]
 800314e:	4313      	orrs	r3, r2
 8003150:	461a      	mov	r2, r3
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8003152:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <ReceiveFWUpdate_MainFunc+0x2c4>)
 8003154:	601a      	str	r2, [r3, #0]
			//Update Parameter
			//F_FlashWordToAddress(FLAG_PARAMETER_GW_CONFIG, gl_u32ConfigLoRa);



			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	061a      	lsls	r2, r3, #24
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
					|(gl_u8RXBuffer_Header[2]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[3]<<  SHIFT_0_BIT);
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003166:	789b      	ldrb	r3, [r3, #2]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	4313      	orrs	r3, r2
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800316e:	78d2      	ldrb	r2, [r2, #3]
 8003170:	4313      	orrs	r3, r2
 8003172:	461a      	mov	r2, r3
			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8003174:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8003176:	601a      	str	r2, [r3, #0]
			//CRC firmware
			gl_u32CRCValue =(gl_u8RXBuffer_Header[17]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[16]<<  SHIFT_16_BIT)
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800317a:	7c5b      	ldrb	r3, [r3, #17]
 800317c:	061a      	lsls	r2, r3, #24
 800317e:	4b4d      	ldr	r3, [pc, #308]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003180:	7c1b      	ldrb	r3, [r3, #16]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
							|(gl_u8RXBuffer_Header[15]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[14]<<  SHIFT_0_BIT);
 8003186:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003188:	7bdb      	ldrb	r3, [r3, #15]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	4313      	orrs	r3, r2
 800318e:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 8003190:	7b92      	ldrb	r2, [r2, #14]
 8003192:	4313      	orrs	r3, r2
 8003194:	461a      	mov	r2, r3
			gl_u32CRCValue =(gl_u8RXBuffer_Header[17]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[16]<<  SHIFT_16_BIT)
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <ReceiveFWUpdate_MainFunc+0x2cc>)
 8003198:	601a      	str	r2, [r3, #0]


			gl_u8RXBuffer_Flag_Req_Bytes = gl_u8RXBuffer_Header[4];
 800319a:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 800319c:	791a      	ldrb	r2, [r3, #4]
 800319e:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80031a0:	701a      	strb	r2, [r3, #0]
			if(gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_HEADER_FLAG ){
 80031a2:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b07      	cmp	r3, #7
 80031a8:	d165      	bne.n	8003276 <ReceiveFWUpdate_MainFunc+0x266>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,(uint32_t)gl_u16AppVersion);
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <ReceiveFWUpdate_MainFunc+0x2c0>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	484b      	ldr	r0, [pc, #300]	; (80032e0 <ReceiveFWUpdate_MainFunc+0x2d0>)
 80031b2:	f7ff fae7 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,gl_u32ImgSize);
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <ReceiveFWUpdate_MainFunc+0x2bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4849      	ldr	r0, [pc, #292]	; (80032e4 <ReceiveFWUpdate_MainFunc+0x2d4>)
 80031be:	f7ff fae1 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_ADDRESS_TARGET_ADDRESS,gl_u32NodeAddr);
 80031c2:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <ReceiveFWUpdate_MainFunc+0x2c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4847      	ldr	r0, [pc, #284]	; (80032e8 <ReceiveFWUpdate_MainFunc+0x2d8>)
 80031ca:	f7ff fadb 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG,gl_u32ConfigLoRa);
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <ReceiveFWUpdate_MainFunc+0x2c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4845      	ldr	r0, [pc, #276]	; (80032ec <ReceiveFWUpdate_MainFunc+0x2dc>)
 80031d6:	f7ff fad5 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS, gl_u32CRCValue);
 80031da:	4b40      	ldr	r3, [pc, #256]	; (80032dc <ReceiveFWUpdate_MainFunc+0x2cc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	4843      	ldr	r0, [pc, #268]	; (80032f0 <ReceiveFWUpdate_MainFunc+0x2e0>)
 80031e2:	f7ff facf 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_GW_CONFIG,GW_CONFIG_PARAMETER_SET);
 80031e6:	f04f 31ff 	mov.w	r1, #4294967295
 80031ea:	4842      	ldr	r0, [pc, #264]	; (80032f4 <ReceiveFWUpdate_MainFunc+0x2e4>)
 80031ec:	f7ff faca 	bl	8002784 <GW_voidEraseRestoreConfigPage>
				RTE_RUNNABLE_APP_VER_WriteData(gl_u16AppVersion);
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <ReceiveFWUpdate_MainFunc+0x2c0>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fc9d 	bl	8002b34 <Rte_ApplVer_WriteData>
				RTE_RUNNABLE_CODE_SIZE_WriteData(gl_u32ImgSize);
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <ReceiveFWUpdate_MainFunc+0x2bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fcaa 	bl	8002b58 <Rte_CodeSize_WriteData>
				//RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCValue);
				RTE_RUNNABLE_NODE_ADDR_WriteData(gl_u32NodeAddr);
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <ReceiveFWUpdate_MainFunc+0x2c8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fcb7 	bl	8002b7c <Rte_NodeAddr_WriteData>
				RTE_RUNNABLE_CONFIG_LORA_WriteData(gl_u32ConfigLoRa);
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <ReceiveFWUpdate_MainFunc+0x2c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fd66 	bl	8002ce4 <Rte_FlagConfigLoRA_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
				//Calculate Number packet Rx Uart
				gl_u8NumberPacket_Uart = (uint8_t)(gl_u32ImgSize/PACKET_1024bytes)+1;
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <ReceiveFWUpdate_MainFunc+0x2e8>)
 800322c:	701a      	strb	r2, [r3, #0]
				/* Get info from header */

				gl_u32Remain_Byte = (gl_u32ImgSize % PACKET_1024bytes);
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <ReceiveFWUpdate_MainFunc+0x2bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003236:	4a31      	ldr	r2, [pc, #196]	; (80032fc <ReceiveFWUpdate_MainFunc+0x2ec>)
 8003238:	6013      	str	r3, [r2, #0]

				RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16NumberPacket_LoRa);
 800323a:	4b31      	ldr	r3, [pc, #196]	; (8003300 <ReceiveFWUpdate_MainFunc+0x2f0>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fd2c 	bl	8002c9c <Rte_PacketSendLoraNum_WriteData>
				gl_u8RXBuffer_Flag_Req_Bytes = HEADER_FLAG_RECEIVED;
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8003246:	2208      	movs	r2, #8
 8003248:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_IDLE);
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,0);
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	2201      	movs	r2, #1
 8003250:	4919      	ldr	r1, [pc, #100]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8003252:	4817      	ldr	r0, [pc, #92]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003254:	f007 fd3a 	bl	800accc <HAL_UART_Transmit>
				/*Change state */
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_RECEIVE_UPDATE);
 8003258:	2002      	movs	r0, #2
 800325a:	f7ff fc0b 	bl	8002a74 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_PACKET;
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <ReceiveFWUpdate_MainFunc+0x29c>)
 8003260:	2204      	movs	r2, #4
 8003262:	701a      	strb	r2, [r3, #0]

				__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0220 	bic.w	r2, r2, #32
 8003272:	60da      	str	r2, [r3, #12]
					memset(gl_u8RXBuffer_Header , 0x00 , 16);
				}

			}

			break;
 8003274:	e15a      	b.n	800352c <ReceiveFWUpdate_MainFunc+0x51c>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	60da      	str	r2, [r3, #12]
				if (gl_u8RXBuffer_Flag_Req_Bytes == NEW_UPDATE_REQUEST_ACCEPT){
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b05      	cmp	r3, #5
 800328c:	f040 814e 	bne.w	800352c <ReceiveFWUpdate_MainFunc+0x51c>
					HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
 8003294:	2201      	movs	r2, #1
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <ReceiveFWUpdate_MainFunc+0x2a0>)
 800329a:	f007 fd17 	bl	800accc <HAL_UART_Transmit>
					memset(gl_u8RXBuffer_Header , 0x00 , 16);
 800329e:	2210      	movs	r2, #16
 80032a0:	2100      	movs	r1, #0
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <ReceiveFWUpdate_MainFunc+0x2a4>)
 80032a4:	f009 f8bd 	bl	800c422 <memset>
			break;
 80032a8:	e140      	b.n	800352c <ReceiveFWUpdate_MainFunc+0x51c>
 80032aa:	bf00      	nop
 80032ac:	20000cd4 	.word	0x20000cd4
 80032b0:	2000183c 	.word	0x2000183c
 80032b4:	200010d8 	.word	0x200010d8
 80032b8:	200010ec 	.word	0x200010ec
 80032bc:	20001764 	.word	0x20001764
 80032c0:	08012800 	.word	0x08012800
 80032c4:	20001100 	.word	0x20001100
 80032c8:	000f4240 	.word	0x000f4240
 80032cc:	20000cc4 	.word	0x20000cc4
 80032d0:	20000cc8 	.word	0x20000cc8
 80032d4:	20000cd0 	.word	0x20000cd0
 80032d8:	20000cbc 	.word	0x20000cbc
 80032dc:	20000ccc 	.word	0x20000ccc
 80032e0:	0801fc30 	.word	0x0801fc30
 80032e4:	0801fc38 	.word	0x0801fc38
 80032e8:	0801fc34 	.word	0x0801fc34
 80032ec:	0801fc04 	.word	0x0801fc04
 80032f0:	0801fc3c 	.word	0x0801fc3c
 80032f4:	0801fc00 	.word	0x0801fc00
 80032f8:	200010ed 	.word	0x200010ed
 80032fc:	200010f0 	.word	0x200010f0
 8003300:	200010ee 	.word	0x200010ee
		}
		case RX_RECEIVED_PACKET:
		{

			if(gl_u32ReceiveBytes == 0)
 8003304:	4b8c      	ldr	r3, [pc, #560]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11b      	bne.n	8003344 <ReceiveFWUpdate_MainFunc+0x334>
			{
				HAL_TIM_Base_Start(&htim1);
 800330c:	488b      	ldr	r0, [pc, #556]	; (800353c <ReceiveFWUpdate_MainFunc+0x52c>)
 800330e:	f007 f80f 	bl	800a330 <HAL_TIM_Base_Start>
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 8003314:	220a      	movs	r2, #10
 8003316:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
 800331c:	2201      	movs	r2, #1
 800331e:	4988      	ldr	r1, [pc, #544]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 8003320:	4888      	ldr	r0, [pc, #544]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 8003322:	f007 fcd3 	bl	800accc <HAL_UART_Transmit>

				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003326:	4b87      	ldr	r3, [pc, #540]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4b85      	ldr	r3, [pc, #532]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]

				gl_u32ReceiveBytes += PACKET_1024bytes;
 8003336:	4b80      	ldr	r3, [pc, #512]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800333e:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e05a      	b.n	80033fa <ReceiveFWUpdate_MainFunc+0x3ea>
			}
			else if(gl_u8NumberPacket_Uart >= 1 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET)
 8003344:	4b80      	ldr	r3, [pc, #512]	; (8003548 <ReceiveFWUpdate_MainFunc+0x538>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d056      	beq.n	80033fa <ReceiveFWUpdate_MainFunc+0x3ea>
 800334c:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b0b      	cmp	r3, #11
 8003352:	d152      	bne.n	80033fa <ReceiveFWUpdate_MainFunc+0x3ea>
			{
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
				HAL_TIM_Base_Stop_IT(&htim4);
 8003354:	487d      	ldr	r0, [pc, #500]	; (800354c <ReceiveFWUpdate_MainFunc+0x53c>)
 8003356:	f007 f8ad 	bl	800a4b4 <HAL_TIM_Base_Stop_IT>
				gl_u8NumberPacket_Uart--;
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <ReceiveFWUpdate_MainFunc+0x538>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4b79      	ldr	r3, [pc, #484]	; (8003548 <ReceiveFWUpdate_MainFunc+0x538>)
 8003364:	701a      	strb	r2, [r3, #0]
				/*Calculate Progress*/
				gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8003366:	4b74      	ldr	r3, [pc, #464]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fc92 	bl	8000c94 <__aeabi_ui2f>
 8003370:	4604      	mov	r4, r0
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <ReceiveFWUpdate_MainFunc+0x540>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fc8c 	bl	8000c94 <__aeabi_ui2f>
 800337c:	4603      	mov	r3, r0
 800337e:	4619      	mov	r1, r3
 8003380:	4620      	mov	r0, r4
 8003382:	f7fd fd93 	bl	8000eac <__aeabi_fdiv>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <ReceiveFWUpdate_MainFunc+0x544>)
 800338c:	601a      	str	r2, [r3, #0]
				gl_u8DownLoadUpdateProgress = (uint8_t)(gl_u8DonwLoadPercentProogess*100);
 800338e:	4b71      	ldr	r3, [pc, #452]	; (8003554 <ReceiveFWUpdate_MainFunc+0x544>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4971      	ldr	r1, [pc, #452]	; (8003558 <ReceiveFWUpdate_MainFunc+0x548>)
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fcd5 	bl	8000d44 <__aeabi_fmul>
 800339a:	4603      	mov	r3, r0
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fe47 	bl	8001030 <__aeabi_f2uiz>
 80033a2:	4603      	mov	r3, r0
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <ReceiveFWUpdate_MainFunc+0x54c>)
 80033a8:	701a      	strb	r2, [r3, #0]
				/*Write to RTE */

				RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 80033aa:	4b6c      	ldr	r3, [pc, #432]	; (800355c <ReceiveFWUpdate_MainFunc+0x54c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fbf6 	bl	8002ba0 <Rte_UpdateProgress_WriteData>
				//Flash to block
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	2201      	movs	r2, #1
 80033ba:	4961      	ldr	r1, [pc, #388]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 80033bc:	4861      	ldr	r0, [pc, #388]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80033be:	f007 fc85 	bl	800accc <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80033c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c6:	4866      	ldr	r0, [pc, #408]	; (8003560 <ReceiveFWUpdate_MainFunc+0x550>)
 80033c8:	f005 f92d 	bl	8008626 <HAL_GPIO_TogglePin>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,1);
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80033cc:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	60da      	str	r2, [r3, #12]
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 80033de:	220a      	movs	r2, #10
 80033e0:	701a      	strb	r2, [r3, #0]
				gl_u32ReceiveBytes += PACKET_1024bytes;
 80033e2:	4b55      	ldr	r3, [pc, #340]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ea:	4a53      	ldr	r2, [pc, #332]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 80033ec:	6013      	str	r3, [r2, #0]
				//reset counter
				TIM4->CNT = 0;
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <ReceiveFWUpdate_MainFunc+0x554>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim4);
 80033f4:	4855      	ldr	r0, [pc, #340]	; (800354c <ReceiveFWUpdate_MainFunc+0x53c>)
 80033f6:	f007 f80b 	bl	800a410 <HAL_TIM_Base_Start_IT>
			}
			if(gl_u8NumberPacket_Uart == 0 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_RECEIVE_ALL)
 80033fa:	4b53      	ldr	r3, [pc, #332]	; (8003548 <ReceiveFWUpdate_MainFunc+0x538>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8096 	bne.w	8003530 <ReceiveFWUpdate_MainFunc+0x520>
 8003404:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	f040 8091 	bne.w	8003530 <ReceiveFWUpdate_MainFunc+0x520>
			{
				//gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
				/*ERROR*/
				HAL_TIM_Base_Stop_IT(&htim4);
 800340e:	484f      	ldr	r0, [pc, #316]	; (800354c <ReceiveFWUpdate_MainFunc+0x53c>)
 8003410:	f007 f850 	bl	800a4b4 <HAL_TIM_Base_Stop_IT>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 8003414:	2003      	movs	r0, #3
 8003416:	f7ff fb2d 	bl	8002a74 <Rte_SystemState_WriteData>
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	2201      	movs	r2, #1
 8003420:	4947      	ldr	r1, [pc, #284]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 8003422:	4848      	ldr	r0, [pc, #288]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 8003424:	f007 fc52 	bl	800accc <HAL_UART_Transmit>
				//F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
				gl_u32ReceiveBytes += gl_u32Remain_Byte;
 8003428:	4b43      	ldr	r3, [pc, #268]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <ReceiveFWUpdate_MainFunc+0x558>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003434:	6013      	str	r3, [r2, #0]
				gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fc2a 	bl	8000c94 <__aeabi_ui2f>
 8003440:	4604      	mov	r4, r0
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <ReceiveFWUpdate_MainFunc+0x540>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fc24 	bl	8000c94 <__aeabi_ui2f>
 800344c:	4603      	mov	r3, r0
 800344e:	4619      	mov	r1, r3
 8003450:	4620      	mov	r0, r4
 8003452:	f7fd fd2b 	bl	8000eac <__aeabi_fdiv>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <ReceiveFWUpdate_MainFunc+0x544>)
 800345c:	601a      	str	r2, [r3, #0]
				gl_u8DownLoadUpdateProgress = (uint8_t)(gl_u8DonwLoadPercentProogess*100);
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <ReceiveFWUpdate_MainFunc+0x544>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	493d      	ldr	r1, [pc, #244]	; (8003558 <ReceiveFWUpdate_MainFunc+0x548>)
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fc6d 	bl	8000d44 <__aeabi_fmul>
 800346a:	4603      	mov	r3, r0
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fddf 	bl	8001030 <__aeabi_f2uiz>
 8003472:	4603      	mov	r3, r0
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <ReceiveFWUpdate_MainFunc+0x54c>)
 8003478:	701a      	strb	r2, [r3, #0]
				RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <ReceiveFWUpdate_MainFunc+0x54c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fb8e 	bl	8002ba0 <Rte_UpdateProgress_WriteData>
				gl_RXUartInternal_State = RX_END_STATE;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <ReceiveFWUpdate_MainFunc+0x55c>)
 8003486:	220b      	movs	r2, #11
 8003488:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_REQUEST_OTA);
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	60da      	str	r2, [r3, #12]
				HAL_TIM_Base_Stop(&htim1);
 800349a:	4828      	ldr	r0, [pc, #160]	; (800353c <ReceiveFWUpdate_MainFunc+0x52c>)
 800349c:	f006 ff92 	bl	800a3c4 <HAL_TIM_Base_Stop>
			else{
				/*ERROR*/

			}

			break;
 80034a0:	e046      	b.n	8003530 <ReceiveFWUpdate_MainFunc+0x520>
		}
		case RX_END_STATE:
		{
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80034a2:	4b28      	ldr	r3, [pc, #160]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	60da      	str	r2, [r3, #12]
			gl_u8RXBuffer_Flag_Req_Bytes = DONE_OTA;
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 80034b4:	227b      	movs	r2, #123	; 0x7b
 80034b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
 80034bc:	2201      	movs	r2, #1
 80034be:	4920      	ldr	r1, [pc, #128]	; (8003540 <ReceiveFWUpdate_MainFunc+0x530>)
 80034c0:	4820      	ldr	r0, [pc, #128]	; (8003544 <ReceiveFWUpdate_MainFunc+0x534>)
 80034c2:	f007 fc03 	bl	800accc <HAL_UART_Transmit>
			gl_u32NodeAddr = INITIAL_VALUE_ZERO;
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <ReceiveFWUpdate_MainFunc+0x560>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
			gl_u8TypeFlag = INITIAL_VALUE_ZERO;
 80034cc:	4b29      	ldr	r3, [pc, #164]	; (8003574 <ReceiveFWUpdate_MainFunc+0x564>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
			gl_u32ImgSize =INITIAL_VALUE_ZERO;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <ReceiveFWUpdate_MainFunc+0x540>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = INITIAL_VALUE_ZERO;
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <ReceiveFWUpdate_MainFunc+0x568>)
 80034da:	2200      	movs	r2, #0
 80034dc:	801a      	strh	r2, [r3, #0]
			gl_u32CRCValue = INITIAL_VALUE_ZERO ;
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <ReceiveFWUpdate_MainFunc+0x56c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
			gl_u8SystemState = SYS_IDLE;
 80034e4:	4b26      	ldr	r3, [pc, #152]	; (8003580 <ReceiveFWUpdate_MainFunc+0x570>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
			gl_RXUartInternal_State = RX_IDLE;
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <ReceiveFWUpdate_MainFunc+0x55c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
			gl_u8RxUserResp=INITIAL_VALUE_ZERO;
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <ReceiveFWUpdate_MainFunc+0x574>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
			gl_u8DonwLoadPercentProogess =INITIAL_VALUE_ZERO;
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <ReceiveFWUpdate_MainFunc+0x544>)
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
			gl_u32Remain_Byte= INITIAL_VALUE_ZERO;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <ReceiveFWUpdate_MainFunc+0x558>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = INITIAL_VALUE_ZERO;
 8003504:	4b15      	ldr	r3, [pc, #84]	; (800355c <ReceiveFWUpdate_MainFunc+0x54c>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart = INITIAL_VALUE_ZERO;
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <ReceiveFWUpdate_MainFunc+0x538>)
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
			gl_u16NumberPacket_LoRa = INITIAL_VALUE_ZERO;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <ReceiveFWUpdate_MainFunc+0x578>)
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]
			gl_u32ReceiveBytes = INITIAL_VALUE_ZERO;
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <ReceiveFWUpdate_MainFunc+0x528>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(INITIAL_VALUE_ZERO);
 800351c:	2000      	movs	r0, #0
 800351e:	f7ff fb3f 	bl	8002ba0 <Rte_UpdateProgress_WriteData>
			break;
 8003522:	e006      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
		}
		default:
			break;
 8003524:	bf00      	nop
 8003526:	e004      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
			break;
 8003528:	bf00      	nop
 800352a:	e002      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
			break;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <ReceiveFWUpdate_MainFunc+0x522>
			break;
 8003530:	bf00      	nop
	}
}
 8003532:	bf00      	nop
 8003534:	bd98      	pop	{r3, r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	200010fc 	.word	0x200010fc
 800353c:	2000171c 	.word	0x2000171c
 8003540:	200010ec 	.word	0x200010ec
 8003544:	2000183c 	.word	0x2000183c
 8003548:	200010ed 	.word	0x200010ed
 800354c:	200017ac 	.word	0x200017ac
 8003550:	20000cc4 	.word	0x20000cc4
 8003554:	200010f8 	.word	0x200010f8
 8003558:	42c80000 	.word	0x42c80000
 800355c:	200010f4 	.word	0x200010f4
 8003560:	40011000 	.word	0x40011000
 8003564:	40000800 	.word	0x40000800
 8003568:	200010f0 	.word	0x200010f0
 800356c:	20000cd4 	.word	0x20000cd4
 8003570:	20000cbc 	.word	0x20000cbc
 8003574:	20000cc0 	.word	0x20000cc0
 8003578:	20000cc8 	.word	0x20000cc8
 800357c:	20000ccc 	.word	0x20000ccc
 8003580:	20001101 	.word	0x20001101
 8003584:	20001100 	.word	0x20001100
 8003588:	200010ee 	.word	0x200010ee

0800358c <HAL_UART_RxCpltCallback>:
/********************HAL_UART_CALLBACK***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	//  HAL_GPIO_WritePin(GPIOA	, GPIO_PIN_10,0);
	// for testing time encrypt

	Std_ReturnType retVal;
 	retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 8003594:	4864      	ldr	r0, [pc, #400]	; (8003728 <HAL_UART_RxCpltCallback+0x19c>)
 8003596:	f7ff fa7f 	bl	8002a98 <Rte_SystemState_ReadData>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
	// Handle for Get Wifi
	if(gl_u8RXBuffer_Header[0] == ESP_RESET_SPI && gl_u8SystemState != SYS_REQUEST_OTA){
 800359e:	4b63      	ldr	r3, [pc, #396]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2bf0      	cmp	r3, #240	; 0xf0
 80035a4:	d118      	bne.n	80035d8 <HAL_UART_RxCpltCallback+0x4c>
 80035a6:	4b60      	ldr	r3, [pc, #384]	; (8003728 <HAL_UART_RxCpltCallback+0x19c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d014      	beq.n	80035d8 <HAL_UART_RxCpltCallback+0x4c>
		if(RTE_E_OKE == retVal){
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	f040 80b4 	bne.w	800371e <HAL_UART_RxCpltCallback+0x192>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(WAIT_FOR_ESP_CONNECT);
 80035b6:	200a      	movs	r0, #10
 80035b8:	f7ff fa5c 	bl	8002a74 <Rte_SystemState_WriteData>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80035bc:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80035cc:	2201      	movs	r2, #1
 80035ce:	4957      	ldr	r1, [pc, #348]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 80035d0:	4857      	ldr	r0, [pc, #348]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80035d2:	f007 fbfe 	bl	800add2 <HAL_UART_Receive_IT>
		if(RTE_E_OKE == retVal){
 80035d6:	e0a2      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
		}
	}
	else if( gl_u8RXBuffer_Header[0] == WIFI_CONNECTED){
 80035d8:	4b54      	ldr	r3, [pc, #336]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2bf1      	cmp	r3, #241	; 0xf1
 80035de:	d117      	bne.n	8003610 <HAL_UART_RxCpltCallback+0x84>
		if(RTE_E_OKE == retVal){
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 809b 	bne.w	800371e <HAL_UART_RxCpltCallback+0x192>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(WIFI_CONNECTED);
 80035e8:	20f1      	movs	r0, #241	; 0xf1
 80035ea:	f7ff fa43 	bl	8002a74 <Rte_SystemState_WriteData>
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80035ee:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0220 	orr.w	r2, r2, #32
 80035fc:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State  = RX_IDLE;
 80035fe:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_UART_RxCpltCallback+0x1a8>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 8003604:	2201      	movs	r2, #1
 8003606:	4949      	ldr	r1, [pc, #292]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 8003608:	4849      	ldr	r0, [pc, #292]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 800360a:	f007 fbe2 	bl	800add2 <HAL_UART_Receive_IT>
	}

	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);


}
 800360e:	e086      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
	else if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST && gl_u8SystemState != SYS_REQUEST_OTA ){
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d11e      	bne.n	8003656 <HAL_UART_RxCpltCallback+0xca>
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_UART_RxCpltCallback+0x19c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d01a      	beq.n	8003656 <HAL_UART_RxCpltCallback+0xca>
		if(RTE_E_OKE == retVal){
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d113      	bne.n	800364e <HAL_UART_RxCpltCallback+0xc2>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_NEW_UPDATE_REQ);
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff fa24 	bl	8002a74 <Rte_SystemState_WriteData>
			gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_UART_RxCpltCallback+0x1a8>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003632:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 20);
 8003642:	2214      	movs	r2, #20
 8003644:	4939      	ldr	r1, [pc, #228]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 8003646:	483a      	ldr	r0, [pc, #232]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 8003648:	f007 fbc3 	bl	800add2 <HAL_UART_Receive_IT>
		if(RTE_E_OKE == retVal){
 800364c:	e067      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
			gl_u8RXBuffer_Flag_Req_Bytes = GATEWAY_BUSY;
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 8003650:	2203      	movs	r2, #3
 8003652:	701a      	strb	r2, [r3, #0]
		if(RTE_E_OKE == retVal){
 8003654:	e063      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
	else if (gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_NEXT_PACKET || gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET ){
 8003656:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b0a      	cmp	r3, #10
 800365c:	d003      	beq.n	8003666 <HAL_UART_RxCpltCallback+0xda>
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b0b      	cmp	r3, #11
 8003664:	d13f      	bne.n	80036e6 <HAL_UART_RxCpltCallback+0x15a>
		HAL_TIM_Base_Start_IT(&htim4);
 8003666:	4835      	ldr	r0, [pc, #212]	; (800373c <HAL_UART_RxCpltCallback+0x1b0>)
 8003668:	f006 fed2 	bl	800a410 <HAL_TIM_Base_Start_IT>
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800366c:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0220 	orr.w	r2, r2, #32
 800367a:	60da      	str	r2, [r3, #12]
		Decrypt_MainFunc((uint8_t*)gl_u8RXBuffer);
 800367c:	4830      	ldr	r0, [pc, #192]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 800367e:	f7fd ff77 	bl	8001570 <Decrypt_MainFunc>
		if(gl_u8NumberPacket_Uart == 1){
 8003682:	4b30      	ldr	r3, [pc, #192]	; (8003744 <HAL_UART_RxCpltCallback+0x1b8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d118      	bne.n	80036bc <HAL_UART_RxCpltCallback+0x130>
			HAL_TIM_Base_Stop_IT(&htim4);
 800368a:	482c      	ldr	r0, [pc, #176]	; (800373c <HAL_UART_RxCpltCallback+0x1b0>)
 800368c:	f006 ff12 	bl	800a4b4 <HAL_TIM_Base_Stop_IT>
			F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_UART_RxCpltCallback+0x1bc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	4829      	ldr	r0, [pc, #164]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 800369a:	f7fe f85b 	bl	8001754 <F_FlashBlockToAddress>
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 800369e:	2201      	movs	r2, #1
 80036a0:	4922      	ldr	r1, [pc, #136]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 80036a2:	4823      	ldr	r0, [pc, #140]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80036a4:	f007 fb95 	bl	800add2 <HAL_UART_Receive_IT>
			gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 80036aa:	220c      	movs	r2, #12
 80036ac:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart--;
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_UART_RxCpltCallback+0x1b8>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_UART_RxCpltCallback+0x1b8>)
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <HAL_UART_RxCpltCallback+0x140>
			F_FlashBlockToAddress(gl_u8RXBuffer, PACKET_1024bytes);
 80036bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c0:	481f      	ldr	r0, [pc, #124]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 80036c2:	f7fe f847 	bl	8001754 <F_FlashBlockToAddress>
			gl_u8RXBuffer_Flag_Req_Bytes = MASTER_ACCEPT_PACKET;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 80036c8:	220b      	movs	r2, #11
 80036ca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 80036cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d0:	491b      	ldr	r1, [pc, #108]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 80036d2:	4817      	ldr	r0, [pc, #92]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80036d4:	f007 fb7d 	bl	800add2 <HAL_UART_Receive_IT>
		memset(gl_u8RXBuffer , 0xff , 1024);
 80036d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036dc:	21ff      	movs	r1, #255	; 0xff
 80036de:	4818      	ldr	r0, [pc, #96]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 80036e0:	f008 fe9f 	bl	800c422 <memset>
 80036e4:	e01b      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
	else if(gl_RXUartInternal_State == RX_RECEIVED_HEADER)
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_UART_RxCpltCallback+0x1a8>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d106      	bne.n	80036fc <HAL_UART_RxCpltCallback+0x170>
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	4913      	ldr	r1, [pc, #76]	; (8003740 <HAL_UART_RxCpltCallback+0x1b4>)
 80036f4:	480e      	ldr	r0, [pc, #56]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 80036f6:	f007 fb6c 	bl	800add2 <HAL_UART_Receive_IT>
}
 80036fa:	e010      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
		gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;;
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_UART_RxCpltCallback+0x1ac>)
 80036fe:	2205      	movs	r2, #5
 8003700:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 8003712:	2201      	movs	r2, #1
 8003714:	4905      	ldr	r1, [pc, #20]	; (800372c <HAL_UART_RxCpltCallback+0x1a0>)
 8003716:	4806      	ldr	r0, [pc, #24]	; (8003730 <HAL_UART_RxCpltCallback+0x1a4>)
 8003718:	f007 fb5b 	bl	800add2 <HAL_UART_Receive_IT>
}
 800371c:	e7ff      	b.n	800371e <HAL_UART_RxCpltCallback+0x192>
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20001101 	.word	0x20001101
 800372c:	200010d8 	.word	0x200010d8
 8003730:	2000183c 	.word	0x2000183c
 8003734:	20000cd4 	.word	0x20000cd4
 8003738:	200010ec 	.word	0x200010ec
 800373c:	200017ac 	.word	0x200017ac
 8003740:	20000cd8 	.word	0x20000cd8
 8003744:	200010ed 	.word	0x200010ed
 8003748:	200010f0 	.word	0x200010f0

0800374c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003752:	f000 fbe9 	bl	8003f28 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003756:	f644 6320 	movw	r3, #20000	; 0x4e20
 800375a:	2201      	movs	r2, #1
 800375c:	2178      	movs	r1, #120	; 0x78
 800375e:	485b      	ldr	r0, [pc, #364]	; (80038cc <SSD1306_Init+0x180>)
 8003760:	f005 f9d4 	bl	8008b0c <HAL_I2C_IsDeviceReady>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800376a:	2300      	movs	r3, #0
 800376c:	e0a9      	b.n	80038c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800376e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003772:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003774:	e002      	b.n	800377c <SSD1306_Init+0x30>
		p--;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3b01      	subs	r3, #1
 800377a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f9      	bne.n	8003776 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003782:	22ae      	movs	r2, #174	; 0xae
 8003784:	2100      	movs	r1, #0
 8003786:	2078      	movs	r0, #120	; 0x78
 8003788:	f000 fc48 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800378c:	2220      	movs	r2, #32
 800378e:	2100      	movs	r1, #0
 8003790:	2078      	movs	r0, #120	; 0x78
 8003792:	f000 fc43 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003796:	2210      	movs	r2, #16
 8003798:	2100      	movs	r1, #0
 800379a:	2078      	movs	r0, #120	; 0x78
 800379c:	f000 fc3e 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80037a0:	22b0      	movs	r2, #176	; 0xb0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2078      	movs	r0, #120	; 0x78
 80037a6:	f000 fc39 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80037aa:	22c8      	movs	r2, #200	; 0xc8
 80037ac:	2100      	movs	r1, #0
 80037ae:	2078      	movs	r0, #120	; 0x78
 80037b0:	f000 fc34 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80037b4:	2200      	movs	r2, #0
 80037b6:	2100      	movs	r1, #0
 80037b8:	2078      	movs	r0, #120	; 0x78
 80037ba:	f000 fc2f 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80037be:	2210      	movs	r2, #16
 80037c0:	2100      	movs	r1, #0
 80037c2:	2078      	movs	r0, #120	; 0x78
 80037c4:	f000 fc2a 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	2100      	movs	r1, #0
 80037cc:	2078      	movs	r0, #120	; 0x78
 80037ce:	f000 fc25 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80037d2:	2281      	movs	r2, #129	; 0x81
 80037d4:	2100      	movs	r1, #0
 80037d6:	2078      	movs	r0, #120	; 0x78
 80037d8:	f000 fc20 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	2100      	movs	r1, #0
 80037e0:	2078      	movs	r0, #120	; 0x78
 80037e2:	f000 fc1b 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80037e6:	22a1      	movs	r2, #161	; 0xa1
 80037e8:	2100      	movs	r1, #0
 80037ea:	2078      	movs	r0, #120	; 0x78
 80037ec:	f000 fc16 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80037f0:	22a6      	movs	r2, #166	; 0xa6
 80037f2:	2100      	movs	r1, #0
 80037f4:	2078      	movs	r0, #120	; 0x78
 80037f6:	f000 fc11 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80037fa:	22a8      	movs	r2, #168	; 0xa8
 80037fc:	2100      	movs	r1, #0
 80037fe:	2078      	movs	r0, #120	; 0x78
 8003800:	f000 fc0c 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003804:	223f      	movs	r2, #63	; 0x3f
 8003806:	2100      	movs	r1, #0
 8003808:	2078      	movs	r0, #120	; 0x78
 800380a:	f000 fc07 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800380e:	22a4      	movs	r2, #164	; 0xa4
 8003810:	2100      	movs	r1, #0
 8003812:	2078      	movs	r0, #120	; 0x78
 8003814:	f000 fc02 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003818:	22d3      	movs	r2, #211	; 0xd3
 800381a:	2100      	movs	r1, #0
 800381c:	2078      	movs	r0, #120	; 0x78
 800381e:	f000 fbfd 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	2078      	movs	r0, #120	; 0x78
 8003828:	f000 fbf8 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800382c:	22d5      	movs	r2, #213	; 0xd5
 800382e:	2100      	movs	r1, #0
 8003830:	2078      	movs	r0, #120	; 0x78
 8003832:	f000 fbf3 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003836:	22f0      	movs	r2, #240	; 0xf0
 8003838:	2100      	movs	r1, #0
 800383a:	2078      	movs	r0, #120	; 0x78
 800383c:	f000 fbee 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003840:	22d9      	movs	r2, #217	; 0xd9
 8003842:	2100      	movs	r1, #0
 8003844:	2078      	movs	r0, #120	; 0x78
 8003846:	f000 fbe9 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800384a:	2222      	movs	r2, #34	; 0x22
 800384c:	2100      	movs	r1, #0
 800384e:	2078      	movs	r0, #120	; 0x78
 8003850:	f000 fbe4 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003854:	22da      	movs	r2, #218	; 0xda
 8003856:	2100      	movs	r1, #0
 8003858:	2078      	movs	r0, #120	; 0x78
 800385a:	f000 fbdf 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800385e:	2212      	movs	r2, #18
 8003860:	2100      	movs	r1, #0
 8003862:	2078      	movs	r0, #120	; 0x78
 8003864:	f000 fbda 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003868:	22db      	movs	r2, #219	; 0xdb
 800386a:	2100      	movs	r1, #0
 800386c:	2078      	movs	r0, #120	; 0x78
 800386e:	f000 fbd5 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003872:	2220      	movs	r2, #32
 8003874:	2100      	movs	r1, #0
 8003876:	2078      	movs	r0, #120	; 0x78
 8003878:	f000 fbd0 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800387c:	228d      	movs	r2, #141	; 0x8d
 800387e:	2100      	movs	r1, #0
 8003880:	2078      	movs	r0, #120	; 0x78
 8003882:	f000 fbcb 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003886:	2214      	movs	r2, #20
 8003888:	2100      	movs	r1, #0
 800388a:	2078      	movs	r0, #120	; 0x78
 800388c:	f000 fbc6 	bl	800401c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003890:	22af      	movs	r2, #175	; 0xaf
 8003892:	2100      	movs	r1, #0
 8003894:	2078      	movs	r0, #120	; 0x78
 8003896:	f000 fbc1 	bl	800401c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800389a:	222e      	movs	r2, #46	; 0x2e
 800389c:	2100      	movs	r1, #0
 800389e:	2078      	movs	r0, #120	; 0x78
 80038a0:	f000 fbbc 	bl	800401c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80038a4:	2000      	movs	r0, #0
 80038a6:	f000 f847 	bl	8003938 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80038aa:	f000 f813 	bl	80038d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <SSD1306_Init+0x184>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SSD1306_Init+0x184>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SSD1306_Init+0x184>)
 80038bc:	2201      	movs	r2, #1
 80038be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20001618 	.word	0x20001618
 80038d0:	20001524 	.word	0x20001524

080038d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	71fb      	strb	r3, [r7, #7]
 80038de:	e021      	b.n	8003924 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	3b50      	subs	r3, #80	; 0x50
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	2078      	movs	r0, #120	; 0x78
 80038ec:	f000 fb96 	bl	800401c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80038f0:	2200      	movs	r2, #0
 80038f2:	2100      	movs	r1, #0
 80038f4:	2078      	movs	r0, #120	; 0x78
 80038f6:	f000 fb91 	bl	800401c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80038fa:	2210      	movs	r2, #16
 80038fc:	2100      	movs	r1, #0
 80038fe:	2078      	movs	r0, #120	; 0x78
 8003900:	f000 fb8c 	bl	800401c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003904:	79fa      	ldrb	r2, [r7, #7]
 8003906:	4613      	mov	r3, r2
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	461a      	mov	r2, r3
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <SSD1306_UpdateScreen+0x60>)
 8003912:	441a      	add	r2, r3
 8003914:	2384      	movs	r3, #132	; 0x84
 8003916:	2140      	movs	r1, #64	; 0x40
 8003918:	2078      	movs	r0, #120	; 0x78
 800391a:	f000 fb19 	bl	8003f50 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	3301      	adds	r3, #1
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	2b07      	cmp	r3, #7
 8003928:	d9da      	bls.n	80038e0 <SSD1306_UpdateScreen+0xc>
	}
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20001104 	.word	0x20001104

08003938 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <SSD1306_Fill+0x14>
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <SSD1306_Fill+0x16>
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003952:	4619      	mov	r1, r3
 8003954:	4803      	ldr	r0, [pc, #12]	; (8003964 <SSD1306_Fill+0x2c>)
 8003956:	f008 fd64 	bl	800c422 <memset>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20001104 	.word	0x20001104

08003968 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003968:	b490      	push	{r4, r7}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
 8003972:	460b      	mov	r3, r1
 8003974:	80bb      	strh	r3, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	70fb      	strb	r3, [r7, #3]
	if (
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b83      	cmp	r3, #131	; 0x83
 800397e:	d854      	bhi.n	8003a2a <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	2b3f      	cmp	r3, #63	; 0x3f
 8003984:	d851      	bhi.n	8003a2a <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <SSD1306_DrawPixel+0xcc>)
 8003988:	791b      	ldrb	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d120      	bne.n	80039e4 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	88bb      	ldrh	r3, [r7, #4]
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	b298      	uxth	r0, r3
 80039aa:	4601      	mov	r1, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	440b      	add	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <SSD1306_DrawPixel+0xd0>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	b25a      	sxtb	r2, r3
 80039bc:	88bb      	ldrh	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b25c      	sxtb	r4, r3
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	4601      	mov	r1, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	440b      	add	r3, r1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	b2e1      	uxtb	r1, r4
 80039de:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <SSD1306_DrawPixel+0xd0>)
 80039e0:	54d1      	strb	r1, [r2, r3]
 80039e2:	e023      	b.n	8003a2c <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	b298      	uxth	r0, r3
 80039ec:	4601      	mov	r1, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	440b      	add	r3, r1
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <SSD1306_DrawPixel+0xd0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	b25a      	sxtb	r2, r3
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	b25c      	sxtb	r4, r3
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	4601      	mov	r1, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	015b      	lsls	r3, r3, #5
 8003a1c:	440b      	add	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	b2e1      	uxtb	r1, r4
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <SSD1306_DrawPixel+0xd0>)
 8003a26:	54d1      	strb	r1, [r2, r3]
 8003a28:	e000      	b.n	8003a2c <SSD1306_DrawPixel+0xc4>
		return;
 8003a2a:	bf00      	nop
	}
}
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc90      	pop	{r4, r7}
 8003a32:	4770      	bx	lr
 8003a34:	20001524 	.word	0x20001524
 8003a38:	20001104 	.word	0x20001104

08003a3c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	460a      	mov	r2, r1
 8003a46:	80fb      	strh	r3, [r7, #6]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003a4c:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <SSD1306_GotoXY+0x28>)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <SSD1306_GotoXY+0x28>)
 8003a54:	88bb      	ldrh	r3, [r7, #4]
 8003a56:	8053      	strh	r3, [r2, #2]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20001524 	.word	0x20001524

08003a68 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
 8003a74:	4613      	mov	r3, r2
 8003a76:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a78:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
	if (
 8003a84:	2b83      	cmp	r3, #131	; 0x83
 8003a86:	dc07      	bgt.n	8003a98 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003a8a:	885b      	ldrh	r3, [r3, #2]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a94:	2b3f      	cmp	r3, #63	; 0x3f
 8003a96:	dd01      	ble.n	8003a9c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e05e      	b.n	8003b5a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e04b      	b.n	8003b3a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	3b20      	subs	r3, #32
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	7849      	ldrb	r1, [r1, #1]
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	440b      	add	r3, r1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e030      	b.n	8003b28 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003ad6:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	b298      	uxth	r0, r3
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003ae4:	885a      	ldrh	r2, [r3, #2]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	79ba      	ldrb	r2, [r7, #6]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7ff ff39 	bl	8003968 <SSD1306_DrawPixel>
 8003af6:	e014      	b.n	8003b22 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	b298      	uxth	r0, r3
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003b06:	885a      	ldrh	r2, [r3, #2]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7ff ff23 	bl	8003968 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3301      	adds	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d3c8      	bcc.n	8003ac6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3301      	adds	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d3ad      	bcc.n	8003aa2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003b48:	881a      	ldrh	r2, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <SSD1306_Putc+0xfc>)
 8003b56:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003b58:	79fb      	ldrb	r3, [r7, #7]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20001524 	.word	0x20001524

08003b68 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003b76:	e012      	b.n	8003b9e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	79fa      	ldrb	r2, [r7, #7]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff71 	bl	8003a68 <SSD1306_Putc>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d002      	beq.n	8003b98 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	e008      	b.n	8003baa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e8      	bne.n	8003b78 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003bb2:	b590      	push	{r4, r7, lr}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4604      	mov	r4, r0
 8003bba:	4608      	mov	r0, r1
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4623      	mov	r3, r4
 8003bc2:	80fb      	strh	r3, [r7, #6]
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	80bb      	strh	r3, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b83      	cmp	r3, #131	; 0x83
 8003bd4:	d901      	bls.n	8003bda <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8003bd6:	2383      	movs	r3, #131	; 0x83
 8003bd8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	2b83      	cmp	r3, #131	; 0x83
 8003bde:	d901      	bls.n	8003be4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003be0:	2383      	movs	r3, #131	; 0x83
 8003be2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003be4:	88bb      	ldrh	r3, [r7, #4]
 8003be6:	2b3f      	cmp	r3, #63	; 0x3f
 8003be8:	d901      	bls.n	8003bee <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003bea:	233f      	movs	r3, #63	; 0x3f
 8003bec:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003bee:	883b      	ldrh	r3, [r7, #0]
 8003bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8003bf2:	d901      	bls.n	8003bf8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003bf4:	233f      	movs	r3, #63	; 0x3f
 8003bf6:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d205      	bcs.n	8003c0c <SSD1306_DrawLine+0x5a>
 8003c00:	887a      	ldrh	r2, [r7, #2]
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	e004      	b.n	8003c16 <SSD1306_DrawLine+0x64>
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003c18:	88ba      	ldrh	r2, [r7, #4]
 8003c1a:	883b      	ldrh	r3, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d205      	bcs.n	8003c2c <SSD1306_DrawLine+0x7a>
 8003c20:	883a      	ldrh	r2, [r7, #0]
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	e004      	b.n	8003c36 <SSD1306_DrawLine+0x84>
 8003c2c:	88ba      	ldrh	r2, [r7, #4]
 8003c2e:	883b      	ldrh	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d201      	bcs.n	8003c44 <SSD1306_DrawLine+0x92>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e001      	b.n	8003c48 <SSD1306_DrawLine+0x96>
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8003c4a:	88ba      	ldrh	r2, [r7, #4]
 8003c4c:	883b      	ldrh	r3, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d201      	bcs.n	8003c56 <SSD1306_DrawLine+0xa4>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e001      	b.n	8003c5a <SSD1306_DrawLine+0xa8>
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003c5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	dd06      	ble.n	8003c76 <SSD1306_DrawLine+0xc4>
 8003c68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c6c:	0fda      	lsrs	r2, r3, #31
 8003c6e:	4413      	add	r3, r2
 8003c70:	105b      	asrs	r3, r3, #1
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	e006      	b.n	8003c84 <SSD1306_DrawLine+0xd2>
 8003c76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c7a:	0fda      	lsrs	r2, r3, #31
 8003c7c:	4413      	add	r3, r2
 8003c7e:	105b      	asrs	r3, r3, #1
 8003c80:	425b      	negs	r3, r3
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003c86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d129      	bne.n	8003ce2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003c8e:	883a      	ldrh	r2, [r7, #0]
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d205      	bcs.n	8003ca2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8003c96:	883b      	ldrh	r3, [r7, #0]
 8003c98:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003c9a:	88bb      	ldrh	r3, [r7, #4]
 8003c9c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d205      	bcs.n	8003cb6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003cb2:	893b      	ldrh	r3, [r7, #8]
 8003cb4:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8003cb6:	88bb      	ldrh	r3, [r7, #4]
 8003cb8:	82bb      	strh	r3, [r7, #20]
 8003cba:	e00c      	b.n	8003cd6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003cbc:	8ab9      	ldrh	r1, [r7, #20]
 8003cbe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fe4f 	bl	8003968 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003cca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	82bb      	strh	r3, [r7, #20]
 8003cd6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003cda:	883b      	ldrh	r3, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	dded      	ble.n	8003cbc <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8003ce0:	e05f      	b.n	8003da2 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8003ce2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d129      	bne.n	8003d3e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003cea:	883a      	ldrh	r2, [r7, #0]
 8003cec:	88bb      	ldrh	r3, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d205      	bcs.n	8003cfe <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003cf2:	883b      	ldrh	r3, [r7, #0]
 8003cf4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003cf6:	88bb      	ldrh	r3, [r7, #4]
 8003cf8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d205      	bcs.n	8003d12 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	82bb      	strh	r3, [r7, #20]
 8003d16:	e00c      	b.n	8003d32 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003d18:	8abb      	ldrh	r3, [r7, #20]
 8003d1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d1e:	88b9      	ldrh	r1, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fe21 	bl	8003968 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003d26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	82bb      	strh	r3, [r7, #20]
 8003d32:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dded      	ble.n	8003d18 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8003d3c:	e031      	b.n	8003da2 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003d3e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d42:	88b9      	ldrh	r1, [r7, #4]
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fe0e 	bl	8003968 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d103      	bne.n	8003d5c <SSD1306_DrawLine+0x1aa>
 8003d54:	88ba      	ldrh	r2, [r7, #4]
 8003d56:	883b      	ldrh	r3, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d021      	beq.n	8003da0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003d5c:	8afb      	ldrh	r3, [r7, #22]
 8003d5e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003d60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d68:	425b      	negs	r3, r3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dd08      	ble.n	8003d80 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003d6e:	8afa      	ldrh	r2, [r7, #22]
 8003d70:	8a3b      	ldrh	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003d78:	89fa      	ldrh	r2, [r7, #14]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8003d80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dad8      	bge.n	8003d3e <SSD1306_DrawLine+0x18c>
			err += dx;
 8003d8c:	8afa      	ldrh	r2, [r7, #22]
 8003d8e:	8a7b      	ldrh	r3, [r7, #18]
 8003d90:	4413      	add	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003d96:	89ba      	ldrh	r2, [r7, #12]
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003d9e:	e7ce      	b.n	8003d3e <SSD1306_DrawLine+0x18c>
			break;
 8003da0:	bf00      	nop
		}
	}
}
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}

08003da8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	80fb      	strh	r3, [r7, #6]
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80bb      	strh	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	807b      	strh	r3, [r7, #2]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b83      	cmp	r3, #131	; 0x83
 8003dca:	d853      	bhi.n	8003e74 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8003dcc:	88bb      	ldrh	r3, [r7, #4]
 8003dce:	2b3f      	cmp	r3, #63	; 0x3f
 8003dd0:	d850      	bhi.n	8003e74 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	2b83      	cmp	r3, #131	; 0x83
 8003dda:	dd03      	ble.n	8003de4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	f1c3 0384 	rsb	r3, r3, #132	; 0x84
 8003de2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003de4:	88ba      	ldrh	r2, [r7, #4]
 8003de6:	883b      	ldrh	r3, [r7, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	2b3f      	cmp	r3, #63	; 0x3f
 8003dec:	dd03      	ble.n	8003df6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003dee:	88bb      	ldrh	r3, [r7, #4]
 8003df0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003df4:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	88bc      	ldrh	r4, [r7, #4]
 8003e00:	88b9      	ldrh	r1, [r7, #4]
 8003e02:	88f8      	ldrh	r0, [r7, #6]
 8003e04:	7e3b      	ldrb	r3, [r7, #24]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4623      	mov	r3, r4
 8003e0a:	f7ff fed2 	bl	8003bb2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8003e0e:	88ba      	ldrh	r2, [r7, #4]
 8003e10:	883b      	ldrh	r3, [r7, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	b299      	uxth	r1, r3
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b29c      	uxth	r4, r3
 8003e1e:	88ba      	ldrh	r2, [r7, #4]
 8003e20:	883b      	ldrh	r3, [r7, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	88f8      	ldrh	r0, [r7, #6]
 8003e28:	7e3b      	ldrb	r3, [r7, #24]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	4622      	mov	r2, r4
 8003e30:	f7ff febf 	bl	8003bb2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003e34:	88ba      	ldrh	r2, [r7, #4]
 8003e36:	883b      	ldrh	r3, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	b29c      	uxth	r4, r3
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	88b9      	ldrh	r1, [r7, #4]
 8003e40:	88f8      	ldrh	r0, [r7, #6]
 8003e42:	7e3b      	ldrb	r3, [r7, #24]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4623      	mov	r3, r4
 8003e48:	f7ff feb3 	bl	8003bb2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	4413      	add	r3, r2
 8003e52:	b298      	uxth	r0, r3
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	88ba      	ldrh	r2, [r7, #4]
 8003e5e:	883b      	ldrh	r3, [r7, #0]
 8003e60:	4413      	add	r3, r2
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	88b9      	ldrh	r1, [r7, #4]
 8003e66:	7e3b      	ldrb	r3, [r7, #24]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	f7ff fea0 	bl	8003bb2 <SSD1306_DrawLine>
 8003e72:	e000      	b.n	8003e76 <SSD1306_DrawRectangle+0xce>
		return;
 8003e74:	bf00      	nop
}
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd90      	pop	{r4, r7, pc}

08003e7c <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	80fb      	strh	r3, [r7, #6]
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80bb      	strh	r3, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	807b      	strh	r3, [r7, #2]
 8003e96:	4613      	mov	r3, r2
 8003e98:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b83      	cmp	r3, #131	; 0x83
 8003e9e:	d836      	bhi.n	8003f0e <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8003ea0:	88bb      	ldrh	r3, [r7, #4]
 8003ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ea4:	d833      	bhi.n	8003f0e <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	4413      	add	r3, r2
 8003eac:	2b83      	cmp	r3, #131	; 0x83
 8003eae:	dd03      	ble.n	8003eb8 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	f1c3 0384 	rsb	r3, r3, #132	; 0x84
 8003eb6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003eb8:	88ba      	ldrh	r2, [r7, #4]
 8003eba:	883b      	ldrh	r3, [r7, #0]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	2b3f      	cmp	r3, #63	; 0x3f
 8003ec0:	dd03      	ble.n	8003eca <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003ec2:	88bb      	ldrh	r3, [r7, #4]
 8003ec4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ec8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e018      	b.n	8003f02 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	88bb      	ldrh	r3, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	b299      	uxth	r1, r3
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4413      	add	r3, r2
 8003ee0:	b29c      	uxth	r4, r3
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	88bb      	ldrh	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	88f8      	ldrh	r0, [r7, #6]
 8003eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	f7ff fe5b 	bl	8003bb2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	883a      	ldrh	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d2e1      	bcs.n	8003ed0 <SSD1306_DrawFilledRectangle+0x54>
 8003f0c:	e000      	b.n	8003f10 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8003f0e:	bf00      	nop
	}
}
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}

08003f16 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f7ff fd0c 	bl	8003938 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003f20:	f7ff fcd8 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <ssd1306_I2C_Init+0x24>)
 8003f30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f32:	e002      	b.n	8003f3a <ssd1306_I2C_Init+0x12>
		p--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	0003d090 	.word	0x0003d090

08003f50 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b0c7      	sub	sp, #284	; 0x11c
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003f5e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003f62:	600a      	str	r2, [r1, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f6a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003f6e:	4622      	mov	r2, r4
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f76:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f86:	460a      	mov	r2, r1
 8003f88:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003f96:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003fa4:	e015      	b.n	8003fd2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003fa6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003faa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003fae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	441a      	add	r2, r3
 8003fb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003fba:	3301      	adds	r3, #1
 8003fbc:	7811      	ldrb	r1, [r2, #0]
 8003fbe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003fc2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003fc6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003fc8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003fd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003fdc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d8df      	bhi.n	8003fa6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b299      	uxth	r1, r3
 8003ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ff6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f107 020c 	add.w	r2, r7, #12
 8004004:	200a      	movs	r0, #10
 8004006:	9000      	str	r0, [sp, #0]
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <ssd1306_I2C_WriteMulti+0xc8>)
 800400a:	f004 fc81 	bl	8008910 <HAL_I2C_Master_Transmit>
}
 800400e:	bf00      	nop
 8004010:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004014:	46bd      	mov	sp, r7
 8004016:	bd90      	pop	{r4, r7, pc}
 8004018:	20001618 	.word	0x20001618

0800401c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af02      	add	r7, sp, #8
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
 8004026:	460b      	mov	r3, r1
 8004028:	71bb      	strb	r3, [r7, #6]
 800402a:	4613      	mov	r3, r2
 800402c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800402e:	79bb      	ldrb	r3, [r7, #6]
 8004030:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004032:	797b      	ldrb	r3, [r7, #5]
 8004034:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	b299      	uxth	r1, r3
 800403a:	f107 020c 	add.w	r2, r7, #12
 800403e:	230a      	movs	r3, #10
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2302      	movs	r3, #2
 8004044:	4803      	ldr	r0, [pc, #12]	; (8004054 <ssd1306_I2C_Write+0x38>)
 8004046:	f004 fc63 	bl	8008910 <HAL_I2C_Master_Transmit>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20001618 	.word	0x20001618

08004058 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fbd0 	bl	8004812 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fbeb 	bl	8004852 <SX1278_hw_SPIReadByte>
 800407c:	4603      	mov	r3, r0
 800407e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb88 	bl	800479c <SX1278_hw_SetNSS>
	return tmp;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
 80040a2:	4613      	mov	r3, r2
 80040a4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb75 	bl	800479c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f000 fba6 	bl	8004812 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	78ba      	ldrb	r2, [r7, #2]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb9f 	bl	8004812 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb5e 	bl	800479c <SX1278_hw_SetNSS>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	72fb      	strb	r3, [r7, #11]
 80040f8:	4613      	mov	r3, r2
 80040fa:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80040fc:	7abb      	ldrb	r3, [r7, #10]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d927      	bls.n	8004152 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fb47 	bl	800479c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	7afa      	ldrb	r2, [r7, #11]
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fb7b 	bl	8004812 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
 8004120:	e00c      	b.n	800413c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	18d4      	adds	r4, r2, r3
 800412c:	4608      	mov	r0, r1
 800412e:	f000 fb90 	bl	8004852 <SX1278_hw_SPIReadByte>
 8004132:	4603      	mov	r3, r0
 8004134:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	3301      	adds	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
 800413c:	7dfa      	ldrb	r2, [r7, #23]
 800413e:	7abb      	ldrb	r3, [r7, #10]
 8004140:	429a      	cmp	r2, r3
 8004142:	d3ee      	bcc.n	8004122 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fb26 	bl	800479c <SX1278_hw_SetNSS>
 8004150:	e000      	b.n	8004154 <SX1278_SPIBurstRead+0x6c>
		return;
 8004152:	bf00      	nop
	}
}
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	461a      	mov	r2, r3
 8004166:	460b      	mov	r3, r1
 8004168:	72fb      	strb	r3, [r7, #11]
 800416a:	4613      	mov	r3, r2
 800416c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800416e:	7abb      	ldrb	r3, [r7, #10]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d929      	bls.n	80041c8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb0e 	bl	800479c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f000 fb3f 	bl	8004812 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]
 8004198:	e00b      	b.n	80041b2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	f000 fb33 	bl	8004812 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	3301      	adds	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
 80041b2:	7dfa      	ldrb	r2, [r7, #23]
 80041b4:	7abb      	ldrb	r3, [r7, #10]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d3ef      	bcc.n	800419a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 faeb 	bl	800479c <SX1278_hw_SetNSS>
 80041c6:	e000      	b.n	80041ca <SX1278_SPIBurstWrite+0x70>
		return;
 80041c8:	bf00      	nop
	}
}
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f90d 	bl	80043f8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80041de:	200f      	movs	r0, #15
 80041e0:	f000 fb5d 	bl	800489e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f917 	bl	8004418 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	684a      	ldr	r2, [r1, #4]
 80041ee:	688b      	ldr	r3, [r1, #8]
 80041f0:	f04f 0000 	mov.w	r0, #0
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	04d9      	lsls	r1, r3, #19
 80041fa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80041fe:	04d0      	lsls	r0, r2, #19
 8004200:	4a6f      	ldr	r2, [pc, #444]	; (80043c0 <SX1278_config+0x1f0>)
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	f7fc ff33 	bl	8001070 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8004212:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	0c02      	lsrs	r2, r0, #16
 8004220:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004224:	0c0b      	lsrs	r3, r1, #16
 8004226:	b2d3      	uxtb	r3, r2
 8004228:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800422a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	0a02      	lsrs	r2, r0, #8
 8004238:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800423c:	0a0b      	lsrs	r3, r1, #8
 800423e:	b2d3      	uxtb	r3, r2
 8004240:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8004242:	7c3b      	ldrb	r3, [r7, #16]
 8004244:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8004246:	f107 020c 	add.w	r2, r7, #12
 800424a:	2303      	movs	r3, #3
 800424c:	2106      	movs	r1, #6
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ff83 	bl	800415a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8004254:	2234      	movs	r2, #52	; 0x34
 8004256:	2139      	movs	r1, #57	; 0x39
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff1c 	bl	8004096 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7b1b      	ldrb	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <SX1278_config+0x1f4>)
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	461a      	mov	r2, r3
 800426a:	2109      	movs	r1, #9
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff12 	bl	8004096 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8004272:	220b      	movs	r2, #11
 8004274:	210b      	movs	r1, #11
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff0d 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800427c:	2223      	movs	r2, #35	; 0x23
 800427e:	210c      	movs	r1, #12
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff08 	bl	8004096 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7b5b      	ldrb	r3, [r3, #13]
 800428a:	461a      	mov	r2, r3
 800428c:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <SX1278_config+0x1f8>)
 800428e:	5c9b      	ldrb	r3, [r3, r2]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d147      	bne.n	8004324 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7b9b      	ldrb	r3, [r3, #14]
 8004298:	461a      	mov	r2, r3
 800429a:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <SX1278_config+0x1fc>)
 800429c:	5c9b      	ldrb	r3, [r3, r2]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7bdb      	ldrb	r3, [r3, #15]
 80042a6:	4619      	mov	r1, r3
 80042a8:	4b49      	ldr	r3, [pc, #292]	; (80043d0 <SX1278_config+0x200>)
 80042aa:	5c5b      	ldrb	r3, [r3, r1]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	211d      	movs	r1, #29
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff feea 	bl	8004096 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7b5b      	ldrb	r3, [r3, #13]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <SX1278_config+0x1f8>)
 80042ca:	5c9b      	ldrb	r3, [r3, r2]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7c1b      	ldrb	r3, [r3, #16]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <SX1278_config+0x204>)
 80042d8:	5c5b      	ldrb	r3, [r3, r1]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4413      	add	r3, r2
 80042e0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80042e2:	3303      	adds	r3, #3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	211e      	movs	r1, #30
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fed3 	bl	8004096 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80042f0:	2131      	movs	r1, #49	; 0x31
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff feb0 	bl	8004058 <SX1278_SPIRead>
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	f043 0305 	orr.w	r3, r3, #5
 800430a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	461a      	mov	r2, r3
 8004310:	2131      	movs	r1, #49	; 0x31
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff febf 	bl	8004096 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004318:	220c      	movs	r2, #12
 800431a:	2137      	movs	r1, #55	; 0x37
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff feba 	bl	8004096 <SX1278_SPIWrite>
 8004322:	e029      	b.n	8004378 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7b9b      	ldrb	r3, [r3, #14]
 8004328:	461a      	mov	r2, r3
 800432a:	4b28      	ldr	r3, [pc, #160]	; (80043cc <SX1278_config+0x1fc>)
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7bdb      	ldrb	r3, [r3, #15]
 8004336:	4619      	mov	r1, r3
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <SX1278_config+0x200>)
 800433a:	5c5b      	ldrb	r3, [r3, r1]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004340:	4413      	add	r3, r2
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	211d      	movs	r1, #29
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fea4 	bl	8004096 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7b5b      	ldrb	r3, [r3, #13]
 8004352:	461a      	mov	r2, r3
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <SX1278_config+0x1f8>)
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7c1b      	ldrb	r3, [r3, #16]
 8004360:	4619      	mov	r1, r3
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <SX1278_config+0x204>)
 8004364:	5c5b      	ldrb	r3, [r3, r1]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800436a:	4413      	add	r3, r2
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	211e      	movs	r1, #30
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fe8f 	bl	8004096 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8004378:	2204      	movs	r2, #4
 800437a:	2126      	movs	r1, #38	; 0x26
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe8a 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8004382:	2208      	movs	r2, #8
 8004384:	211f      	movs	r1, #31
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe85 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800438c:	2200      	movs	r2, #0
 800438e:	2120      	movs	r1, #32
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fe80 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8004396:	2208      	movs	r2, #8
 8004398:	2121      	movs	r1, #33	; 0x21
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fe7b 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80043a0:	2201      	movs	r2, #1
 80043a2:	2141      	movs	r1, #65	; 0x41
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fe76 	bl	8004096 <SX1278_SPIWrite>
	module->readBytes = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f810 	bl	80043d8 <SX1278_standby>
}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	01e84800 	.word	0x01e84800
 80043c4:	0800f72c 	.word	0x0800f72c
 80043c8:	0800f730 	.word	0x0800f730
 80043cc:	0800f738 	.word	0x0800f738
 80043d0:	0800f744 	.word	0x0800f744
 80043d4:	0800f748 	.word	0x0800f748

080043d8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80043e0:	2209      	movs	r2, #9
 80043e2:	2101      	movs	r1, #1
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fe56 	bl	8004096 <SX1278_SPIWrite>
	module->status = STANDBY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	749a      	strb	r2, [r3, #18]
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8004400:	2208      	movs	r2, #8
 8004402:	2101      	movs	r1, #1
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fe46 	bl	8004096 <SX1278_SPIWrite>
	module->status = SLEEP;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	749a      	strb	r2, [r3, #18]
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8004420:	2288      	movs	r2, #136	; 0x88
 8004422:	2101      	movs	r1, #1
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fe36 	bl	8004096 <SX1278_SPIWrite>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800443a:	22ff      	movs	r2, #255	; 0xff
 800443c:	2112      	movs	r1, #18
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fe29 	bl	8004096 <SX1278_SPIWrite>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	460b      	mov	r3, r1
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	7afa      	ldrb	r2, [r7, #11]
 800445e:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff feb5 	bl	80041d0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004466:	2284      	movs	r2, #132	; 0x84
 8004468:	214d      	movs	r1, #77	; 0x4d
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff fe13 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	2124      	movs	r1, #36	; 0x24
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fe0e 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800447a:	2201      	movs	r2, #1
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fe09 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8004484:	223f      	movs	r2, #63	; 0x3f
 8004486:	2111      	movs	r1, #17
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff fe04 	bl	8004096 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff ffcf 	bl	8004432 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8004494:	7afb      	ldrb	r3, [r7, #11]
 8004496:	461a      	mov	r2, r3
 8004498:	2122      	movs	r1, #34	; 0x22
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff fdfb 	bl	8004096 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80044a0:	210f      	movs	r1, #15
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff fdd8 	bl	8004058 <SX1278_SPIRead>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	461a      	mov	r2, r3
 80044b0:	210d      	movs	r1, #13
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff fdef 	bl	8004096 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 80044b8:	2205      	movs	r2, #5
 80044ba:	2101      	movs	r1, #1
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff fdea 	bl	8004096 <SX1278_SPIWrite>
	module->readBytes = 0;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80044ca:	2118      	movs	r1, #24
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff fdc3 	bl	8004058 <SX1278_SPIRead>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d104      	bne.n	80044e6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2203      	movs	r2, #3
 80044e0:	749a      	strb	r2, [r3, #18]
			return 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e013      	b.n	800450e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f967 	bl	80047ca <SX1278_hw_Reset>
			SX1278_config(module);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fe67 	bl	80041d0 <SX1278_config>
			return 0;
 8004502:	2300      	movs	r3, #0
 8004504:	e003      	b.n	800450e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8004506:	2001      	movs	r0, #1
 8004508:	f000 f9c9 	bl	800489e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800450c:	e7dd      	b.n	80044ca <SX1278_LoRaEntryRx+0x7e>
	}
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f9c6 	bl	80048b4 <SX1278_hw_GetDIO0>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d030      	beq.n	8004590 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3313      	adds	r3, #19
 8004532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f007 ff72 	bl	800c422 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800453e:	2110      	movs	r1, #16
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fd89 	bl	8004058 <SX1278_SPIRead>
 8004546:	4603      	mov	r3, r0
 8004548:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	461a      	mov	r2, r3
 800454e:	210d      	movs	r1, #13
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fda0 	bl	8004096 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	7b5b      	ldrb	r3, [r3, #13]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7c5b      	ldrb	r3, [r3, #17]
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e005      	b.n	8004572 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004566:	2113      	movs	r1, #19
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fd75 	bl	8004058 <SX1278_SPIRead>
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f103 0213 	add.w	r2, r3, #19
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2100      	movs	r1, #0
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fdb3 	bl	80040e8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff51 	bl	8004432 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	460b      	mov	r3, r1
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	7afa      	ldrb	r2, [r7, #11]
 80045b0:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fe0c 	bl	80041d0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80045b8:	2287      	movs	r2, #135	; 0x87
 80045ba:	214d      	movs	r1, #77	; 0x4d
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fd6a 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80045c2:	2200      	movs	r2, #0
 80045c4:	2124      	movs	r1, #36	; 0x24
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fd65 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80045cc:	2241      	movs	r2, #65	; 0x41
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fd60 	bl	8004096 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff2b 	bl	8004432 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80045dc:	22f7      	movs	r2, #247	; 0xf7
 80045de:	2111      	movs	r1, #17
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fd58 	bl	8004096 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	461a      	mov	r2, r3
 80045ea:	2122      	movs	r1, #34	; 0x22
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fd52 	bl	8004096 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80045f2:	210e      	movs	r1, #14
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fd2f 	bl	8004058 <SX1278_SPIRead>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	461a      	mov	r2, r3
 8004602:	210d      	movs	r1, #13
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fd46 	bl	8004096 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800460a:	2122      	movs	r1, #34	; 0x22
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fd23 	bl	8004058 <SX1278_SPIRead>
 8004612:	4603      	mov	r3, r0
 8004614:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8004616:	7dba      	ldrb	r2, [r7, #22]
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	429a      	cmp	r2, r3
 800461c:	d104      	bne.n	8004628 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2202      	movs	r2, #2
 8004622:	749a      	strb	r2, [r3, #18]
			return 1;
 8004624:	2301      	movs	r3, #1
 8004626:	e00e      	b.n	8004646 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ea      	bne.n	800460a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f8c6 	bl	80047ca <SX1278_hw_Reset>
			SX1278_config(module);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fdc6 	bl	80041d0 <SX1278_config>
			return 0;
 8004644:	2300      	movs	r3, #0
		}
	}
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	2100      	movs	r1, #0
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fd78 	bl	800415a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800466a:	228b      	movs	r2, #139	; 0x8b
 800466c:	2101      	movs	r1, #1
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fd11 	bl	8004096 <SX1278_SPIWrite>
	while (1) {
		//Set Flag to Ignore EXT

		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f91b 	bl	80048b4 <SX1278_hw_GetDIO0>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8004684:	2112      	movs	r1, #18
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fce6 	bl	8004058 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fed0 	bl	8004432 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff fea0 	bl	80043d8 <SX1278_standby>
			return 1;
 8004698:	2301      	movs	r3, #1
 800469a:	e013      	b.n	80046c4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f88c 	bl	80047ca <SX1278_hw_Reset>
			SX1278_config(module);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fd8c 	bl	80041d0 <SX1278_config>
			return 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e003      	b.n	80046c4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80046bc:	2001      	movs	r0, #1
 80046be:	f000 f8ee 	bl	800489e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80046c2:	e7d7      	b.n	8004674 <SX1278_LoRaTxPacket+0x26>
	}
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f848 	bl	8004772 <SX1278_hw_init>
	module->frequency = frequency;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
	module->power = power;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	7e3a      	ldrb	r2, [r7, #24]
 80046f0:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	7f3a      	ldrb	r2, [r7, #28]
 80046f6:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80046fe:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004706:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800470e:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004716:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fd59 	bl	80041d0 <SX1278_config>
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	4613      	mov	r3, r2
 8004732:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d003      	beq.n	8004748 <SX1278_read+0x22>
		length = module->readBytes;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004746:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3313      	adds	r3, #19
 800474c:	79fa      	ldrb	r2, [r7, #7]
 800474e:	4619      	mov	r1, r3
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f007 fef4 	bl	800c53e <memcpy>
	rxBuf[length] = '\0';
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	4413      	add	r3, r2
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8004768:	79fb      	ldrb	r3, [r7, #7]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800477a:	2101      	movs	r1, #1
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f80d 	bl	800479c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6858      	ldr	r0, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	2201      	movs	r2, #1
 800478e:	4619      	mov	r1, r3
 8004790:	f003 ff31 	bl	80085f6 <HAL_GPIO_WritePin>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6958      	ldr	r0, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	b299      	uxth	r1, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	f003 ff1a 	bl	80085f6 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80047d2:	2101      	movs	r1, #1
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ffe1 	bl	800479c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6858      	ldr	r0, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2200      	movs	r2, #0
 80047e6:	4619      	mov	r1, r3
 80047e8:	f003 ff05 	bl	80085f6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80047ec:	2001      	movs	r0, #1
 80047ee:	f000 f856 	bl	800489e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6858      	ldr	r0, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2201      	movs	r2, #1
 80047fe:	4619      	mov	r1, r3
 8004800:	f003 fef9 	bl	80085f6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004804:	2064      	movs	r0, #100	; 0x64
 8004806:	f000 f84a 	bl	800489e <SX1278_hw_DelayMs>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800481e:	2100      	movs	r1, #0
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ffbb 	bl	800479c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6998      	ldr	r0, [r3, #24]
 800482a:	1cf9      	adds	r1, r7, #3
 800482c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004830:	2201      	movs	r2, #1
 8004832:	f005 f987 	bl	8009b44 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004836:	bf00      	nop
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4618      	mov	r0, r3
 800483e:	f005 fc74 	bl	800a12a <HAL_SPI_GetState>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d1f7      	bne.n	8004838 <SX1278_hw_SPICommand+0x26>
		;
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af02      	add	r7, sp, #8
 8004858:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800485e:	2300      	movs	r3, #0
 8004860:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004862:	2100      	movs	r1, #0
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ff99 	bl	800479c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6998      	ldr	r0, [r3, #24]
 800486e:	f107 020e 	add.w	r2, r7, #14
 8004872:	f107 010f 	add.w	r1, r7, #15
 8004876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2301      	movs	r3, #1
 800487e:	f005 faa4 	bl	8009dca <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004882:	bf00      	nop
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	4618      	mov	r0, r3
 800488a:	f005 fc4e 	bl	800a12a <HAL_SPI_GetState>
 800488e:	4603      	mov	r3, r0
 8004890:	2b01      	cmp	r3, #1
 8004892:	d1f7      	bne.n	8004884 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8004894:	7bbb      	ldrb	r3, [r7, #14]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f003 f838 	bl	800791c <HAL_Delay>
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f003 fe7d 	bl	80085c8 <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <LORA_IF_GetData_Frame>:
				return FL_FRAGMENT_FIRMWARE ;
			}
		}
	    return 0;
}
uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint32_t unicast_address,uint8_t* buffer_resp , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_resp ){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
	uint32 address_node_req = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
	ret = SX1278_LoRaRxPacket(module);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fe0b 	bl	8004516 <SX1278_LoRaRxPacket>
 8004900:	4603      	mov	r3, r0
 8004902:	70fb      	strb	r3, [r7, #3]
	if ( ret > 0 ) {
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d035      	beq.n	8004976 <LORA_IF_GetData_Frame+0x92>
		// Replace Receive Led hear
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800490a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800490e:	481d      	ldr	r0, [pc, #116]	; (8004984 <LORA_IF_GetData_Frame+0xa0>)
 8004910:	f003 fe89 	bl	8008626 <HAL_GPIO_TogglePin>
		ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	461a      	mov	r2, r3
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff ff03 	bl	8004726 <SX1278_read>
 8004920:	4603      	mov	r3, r0
 8004922:	70fb      	strb	r3, [r7, #3]
		AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <LORA_IF_GetData_Frame+0xa4>)
 8004926:	4919      	ldr	r1, [pc, #100]	; (800498c <LORA_IF_GetData_Frame+0xa8>)
 8004928:	4819      	ldr	r0, [pc, #100]	; (8004990 <LORA_IF_GetData_Frame+0xac>)
 800492a:	f001 f9c3 	bl	8005cb4 <AES_init_ctx_iv>
		AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 800492e:	2210      	movs	r2, #16
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4817      	ldr	r0, [pc, #92]	; (8004990 <LORA_IF_GetData_Frame+0xac>)
 8004934:	f001 ffbf 	bl	80068b6 <AES_CTR_xcrypt_buffer>
		address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	061a      	lsls	r2, r3, #24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3301      	adds	r3, #1
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
									   |(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3302      	adds	r3, #2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	4313      	orrs	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	3203      	adds	r2, #3
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	4313      	orrs	r3, r2
		address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 800495a:	613b      	str	r3, [r7, #16]
		if(address_node_req == unicast_address && buffer_resp[4] == ACK_resp)
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d10a      	bne.n	800497a <LORA_IF_GetData_Frame+0x96>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800496e:	429a      	cmp	r2, r3
 8004970:	d103      	bne.n	800497a <LORA_IF_GetData_Frame+0x96>
			return 1;
 8004972:	2301      	movs	r3, #1
 8004974:	e001      	b.n	800497a <LORA_IF_GetData_Frame+0x96>
	}
	else return 0;
 8004976:	2300      	movs	r3, #0
 8004978:	e7ff      	b.n	800497a <LORA_IF_GetData_Frame+0x96>

}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40011000 	.word	0x40011000
 8004988:	20000054 	.word	0x20000054
 800498c:	20000044 	.word	0x20000044
 8004990:	2000152c 	.word	0x2000152c

08004994 <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret ,uint8_t ACK_req , uint8_t ACK_resp ){
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	70fb      	strb	r3, [r7, #3]
	buffer_req[2] = ACK_req;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3302      	adds	r3, #2
 80049a6:	7e3a      	ldrb	r2, [r7, #24]
 80049a8:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 80049aa:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <LORA_IF_Stransmit_Request+0x6c>)
 80049ac:	4915      	ldr	r1, [pc, #84]	; (8004a04 <LORA_IF_Stransmit_Request+0x70>)
 80049ae:	4816      	ldr	r0, [pc, #88]	; (8004a08 <LORA_IF_Stransmit_Request+0x74>)
 80049b0:	f001 f980 	bl	8005cb4 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 80049b4:	2210      	movs	r2, #16
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4813      	ldr	r0, [pc, #76]	; (8004a08 <LORA_IF_Stransmit_Request+0x74>)
 80049ba:	f001 ff7c 	bl	80068b6 <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80049be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049c2:	2110      	movs	r1, #16
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff fdea 	bl	800459e <SX1278_LoRaEntryTx>
 80049ca:	4603      	mov	r3, r0
 80049cc:	70fb      	strb	r3, [r7, #3]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80049ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049d2:	2210      	movs	r2, #16
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fe39 	bl	800464e <SX1278_LoRaTxPacket>
 80049dc:	4603      	mov	r3, r0
 80049de:	70fb      	strb	r3, [r7, #3]
	/*Read the first Frame */
	 if(ret >0){
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <LORA_IF_Stransmit_Request+0x60>
		//Replace Blink Send hear
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80049e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049ea:	4808      	ldr	r0, [pc, #32]	; (8004a0c <LORA_IF_Stransmit_Request+0x78>)
 80049ec:	f003 fe1b 	bl	8008626 <HAL_GPIO_TogglePin>
		return LORA_OKE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <LORA_IF_Stransmit_Request+0x62>
	 }
	 return LORA_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000054 	.word	0x20000054
 8004a04:	20000044 	.word	0x20000044
 8004a08:	2000152c 	.word	0x2000152c
 8004a0c:	40010c00 	.word	0x40010c00

08004a10 <LORA_IF_Stransmit_Fragment_Firmware>:

LoRa_Return_t LORA_IF_Stransmit_Fragment_Firmware(SX1278_t *module ,uint8_t* buffer_flashing_data ){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a22:	2150      	movs	r1, #80	; 0x50
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fdba 	bl	800459e <SX1278_LoRaEntryTx>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a30:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_flashing_data, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004a36:	2250      	movs	r2, #80	; 0x50
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fe07 	bl	800464e <SX1278_LoRaTxPacket>
 8004a40:	4603      	mov	r3, r0
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a46:	701a      	strb	r2, [r3, #0]
	 if(ret){
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <LORA_IF_Stransmit_Fragment_Firmware+0x54>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a54:	4808      	ldr	r0, [pc, #32]	; (8004a78 <LORA_IF_Stransmit_Fragment_Firmware+0x68>)
 8004a56:	f003 fde6 	bl	8008626 <HAL_GPIO_TogglePin>
		 HAL_Delay(WAIT_PACKET_SEND);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f002 ff5e 	bl	800791c <HAL_Delay>
		/*Read the first Frame */
//		switch(local_u8Check_Code = LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_16BYTES)){
//			case(MCU_ACKNOWLEDGE_FINISHING):
//				buffer_packet[2] = buffer_resp[2];
		 return LORA_OKE ;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e003      	b.n	8004a6c <LORA_IF_Stransmit_Fragment_Firmware+0x5c>
//			case(MCU_IMAGE_CRC_NOT_CORRECT):
//				return LORA_FLASHING_ERROR;
	 }
//		}
	 else{
		 counter++;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	3301      	adds	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8004a6a:	e7d8      	b.n	8004a1e <LORA_IF_Stransmit_Fragment_Firmware+0xe>
			 return LORA_ERROR;
		 }
	 }

	}
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000bb9 	.word	0x20000bb9
 8004a78:	40010c00 	.word	0x40010c00

08004a7c <LORA_IF_GetData_End_Frame>:

uint8_t LORA_IF_GetData_End_Frame(SX1278_t *module, uint8_t *rxBuffer, uint32_t unicast_addr , uint8_t length, uint32_t timeout){
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
	uint32_t local_u32addrNode_req;
	memset(rxBuffer , 0xff ,112);
 8004a8e:	2270      	movs	r2, #112	; 0x70
 8004a90:	21ff      	movs	r1, #255	; 0xff
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f007 fcc5 	bl	800c422 <memset>
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <LORA_IF_GetData_End_Frame+0xb4>)
 8004a9a:	4926      	ldr	r1, [pc, #152]	; (8004b34 <LORA_IF_GetData_End_Frame+0xb8>)
 8004a9c:	4826      	ldr	r0, [pc, #152]	; (8004b38 <LORA_IF_GetData_End_Frame+0xbc>)
 8004a9e:	f001 f909 	bl	8005cb4 <AES_init_ctx_iv>
	ret = SX1278_LoRaRxPacket(module);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fd37 	bl	8004516 <SX1278_LoRaRxPacket>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <LORA_IF_GetData_End_Frame+0xc0>)
 8004aae:	701a      	strb	r2, [r3, #0]
	if ( ret > 0 ) {
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <LORA_IF_GetData_End_Frame+0xc0>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d036      	beq.n	8004b26 <LORA_IF_GetData_End_Frame+0xaa>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8004ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004abc:	4820      	ldr	r0, [pc, #128]	; (8004b40 <LORA_IF_GetData_End_Frame+0xc4>)
 8004abe:	f003 fdb2 	bl	8008626 <HAL_GPIO_TogglePin>
		ret = SX1278_read(module, (uint8_t*) rxBuffer, ret);
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <LORA_IF_GetData_End_Frame+0xc0>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fe2b 	bl	8004726 <SX1278_read>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <LORA_IF_GetData_End_Frame+0xc0>)
 8004ad6:	701a      	strb	r2, [r3, #0]
		AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) rxBuffer, length);
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4816      	ldr	r0, [pc, #88]	; (8004b38 <LORA_IF_GetData_End_Frame+0xbc>)
 8004ae0:	f001 fee9 	bl	80068b6 <AES_CTR_xcrypt_buffer>
		//convert buffer to address_node_req
		local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	061a      	lsls	r2, r3, #24
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	431a      	orrs	r2, r3
											|(rxBuffer[2] << SHIFT_8_BIT) | (rxBuffer[3] << SHIFT_0_BIT);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3302      	adds	r3, #2
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	4313      	orrs	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	3203      	adds	r2, #3
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	4313      	orrs	r3, r2
		local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 8004b06:	613b      	str	r3, [r7, #16]
		if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 || local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <LORA_IF_GetData_End_Frame+0xc8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <LORA_IF_GetData_End_Frame+0xa4>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <LORA_IF_GetData_End_Frame+0xcc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <LORA_IF_GetData_End_Frame+0xa4>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <LORA_IF_GetData_End_Frame+0xd0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d102      	bne.n	8004b26 <LORA_IF_GetData_End_Frame+0xaa>
			//return flag
			return rxBuffer[4];
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	791b      	ldrb	r3, [r3, #4]
 8004b24:	e7ff      	b.n	8004b26 <LORA_IF_GetData_End_Frame+0xaa>
	}
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000054 	.word	0x20000054
 8004b34:	20000044 	.word	0x20000044
 8004b38:	2000152c 	.word	0x2000152c
 8004b3c:	20000bb9 	.word	0x20000bb9
 8004b40:	40010c00 	.word	0x40010c00
 8004b44:	26011bcd 	.word	0x26011bcd
 8004b48:	26011def 	.word	0x26011def
 8004b4c:	260120f0 	.word	0x260120f0

08004b50 <UI_Init>:
static const uint8_t SX1278_SpreadFactor_Values[7] = { 6, 7, 8, 9, 10, 11, 12 };
static const float SX1278_CodingRate_Values[4] = { 1, 2, 3, 4 };
/**************************************************/
/*				  Init FUNC					      */
/**************************************************/
void UI_Init(void){
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
	// Init variables
	gl_UISTATE = UI_IDLE;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <UI_Init+0x38>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
	//gl_UISTATE = UI_START_OTA;
	gl_u8DownLoadProgress = INIT_VAL_ZERO;
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <UI_Init+0x3c>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
	gl_u32SizeCodeFw = INIT_VAL_ZERO;
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <UI_Init+0x40>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
	gl_counterdot = INIT_VAL_ZERO;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <UI_Init+0x44>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
	uint16_t  TOTAL_PACKETS = INIT_VAL_ZERO;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	80fb      	strh	r3, [r7, #6]
	// Init OLED display
	SSD1306_Init();
 8004b72:	f7fe fdeb 	bl	800374c <SSD1306_Init>
	/*Run main Appication before go to Flashing Appl*/
	// Init Flashing
	UI_Init_Flashing_Screen();
 8004b76:	f000 fa45 	bl	8005004 <UI_Init_Flashing_Screen>
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004b7a:	4807      	ldr	r0, [pc, #28]	; (8004b98 <UI_Init+0x48>)
 8004b7c:	f7fd ff8c 	bl	8002a98 <Rte_SystemState_ReadData>


}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200015ec 	.word	0x200015ec
 8004b8c:	200015ef 	.word	0x200015ef
 8004b90:	200015f4 	.word	0x200015f4
 8004b94:	200015f8 	.word	0x200015f8
 8004b98:	200015ed 	.word	0x200015ed

08004b9c <UI_Main_FLASHING>:

void UI_Main_FLASHING(void){
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
	switch (gl_UISTATE) {
 8004ba2:	4ba7      	ldr	r3, [pc, #668]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b0a      	cmp	r3, #10
 8004ba8:	f200 8208 	bhi.w	8004fbc <UI_Main_FLASHING+0x420>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UI_Main_FLASHING+0x18>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004fbd 	.word	0x08004fbd
 8004bbc:	08004d17 	.word	0x08004d17
 8004bc0:	08004d53 	.word	0x08004d53
 8004bc4:	08004e15 	.word	0x08004e15
 8004bc8:	08004ec5 	.word	0x08004ec5
 8004bcc:	08004f2b 	.word	0x08004f2b
 8004bd0:	08004fa1 	.word	0x08004fa1
 8004bd4:	08004f7b 	.word	0x08004f7b
 8004bd8:	08004cbf 	.word	0x08004cbf
 8004bdc:	08004c7f 	.word	0x08004c7f
		/* UI_IDE STATE */
		case UI_IDLE:
		{
			//RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_ReadData(&gl_u8NodeIndex);
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_1(&gl_u8NodeStatus_1);
 8004be0:	4898      	ldr	r0, [pc, #608]	; (8004e44 <UI_Main_FLASHING+0x2a8>)
 8004be2:	f7fe f97b 	bl	8002edc <Rte_Flag_NodeStatus_ReadData_Node1>
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_2(&gl_u8NodeStatus_2);
 8004be6:	4898      	ldr	r0, [pc, #608]	; (8004e48 <UI_Main_FLASHING+0x2ac>)
 8004be8:	f7fe f98a 	bl	8002f00 <Rte_Flag_NodeStatus_ReadData_Node2>
			RTE_RUNNABLE_FLAG_NODE_STATUS_ReadData_NODE_3(&gl_u8NodeStatus_3);
 8004bec:	4897      	ldr	r0, [pc, #604]	; (8004e4c <UI_Main_FLASHING+0x2b0>)
 8004bee:	f7fe f999 	bl	8002f24 <Rte_Flag_NodeStatus_ReadData_Node3>
			UI_Node_Connect(0x0,gl_u8NodeStatus_1);
 8004bf2:	4b94      	ldr	r3, [pc, #592]	; (8004e44 <UI_Main_FLASHING+0x2a8>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf14      	ite	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	2300      	moveq	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	2000      	movs	r0, #0
 8004c04:	f000 fa34 	bl	8005070 <UI_Node_Connect>
			UI_Node_Connect(0x01,gl_u8NodeStatus_2);
 8004c08:	4b8f      	ldr	r3, [pc, #572]	; (8004e48 <UI_Main_FLASHING+0x2ac>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f000 fa29 	bl	8005070 <UI_Node_Connect>
			UI_Node_Connect(0x02,gl_u8NodeStatus_3);
 8004c1e:	4b8b      	ldr	r3, [pc, #556]	; (8004e4c <UI_Main_FLASHING+0x2b0>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	2002      	movs	r0, #2
 8004c30:	f000 fa1e 	bl	8005070 <UI_Node_Connect>
			// Get System state Via RTE
			Std_ReturnType retVal  = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004c34:	4886      	ldr	r0, [pc, #536]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004c36:	f7fd ff2f 	bl	8002a98 <Rte_SystemState_ReadData>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	70bb      	strb	r3, [r7, #2]
			if(RTE_E_OKE == retVal){
 8004c3e:	78bb      	ldrb	r3, [r7, #2]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d118      	bne.n	8004c76 <UI_Main_FLASHING+0xda>
				if(SYS_RECEIVE_UPDATE == gl_SystemState )
 8004c44:	4b82      	ldr	r3, [pc, #520]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d109      	bne.n	8004c60 <UI_Main_FLASHING+0xc4>
				{
					// Clean UI screen
					UI_Clean();
 8004c4c:	f000 fa5c 	bl	8005108 <UI_Clean>
					UI_WaitForResp();
 8004c50:	f000 fa62 	bl	8005118 <UI_WaitForResp>
					// Display Information for FLashing
					UI_Downloading_FW();
 8004c54:	f000 fae6 	bl	8005224 <UI_Downloading_FW>
					gl_UISTATE =  UI_DOWNLOADING_FW;
 8004c58:	4b79      	ldr	r3, [pc, #484]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004c5a:	2209      	movs	r2, #9
 8004c5c:	701a      	strb	r2, [r3, #0]

			else{
				/*State In IDLE STATE and Change UI to ERROR STATE*/
				gl_UISTATE = UI_DISPLAYERROR;
			}
			break;
 8004c5e:	e1b1      	b.n	8004fc4 <UI_Main_FLASHING+0x428>
				else if(WAIT_FOR_ESP_CONNECT == gl_SystemState){
 8004c60:	4b7b      	ldr	r3, [pc, #492]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b0a      	cmp	r3, #10
 8004c66:	f040 81ad 	bne.w	8004fc4 <UI_Main_FLASHING+0x428>
					UI_Clean();
 8004c6a:	f000 fa4d 	bl	8005108 <UI_Clean>
					gl_UISTATE = UI_WAIT_FOR_WIFI;
 8004c6e:	4b74      	ldr	r3, [pc, #464]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004c70:	220a      	movs	r2, #10
 8004c72:	701a      	strb	r2, [r3, #0]
			break;
 8004c74:	e1a6      	b.n	8004fc4 <UI_Main_FLASHING+0x428>
				gl_UISTATE = UI_DISPLAYERROR;
 8004c76:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004c78:	2207      	movs	r2, #7
 8004c7a:	701a      	strb	r2, [r3, #0]
			break;
 8004c7c:	e1a2      	b.n	8004fc4 <UI_Main_FLASHING+0x428>
		}
		case UI_WAIT_FOR_WIFI:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004c7e:	4874      	ldr	r0, [pc, #464]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004c80:	f7fd ff0a 	bl	8002a98 <Rte_SystemState_ReadData>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]
			UI_Wait_ForConnect_WiFi();
 8004c88:	f000 fe42 	bl	8005910 <UI_Wait_ForConnect_WiFi>
			if(RTE_E_OKE == retVal){
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	f040 819a 	bne.w	8004fc8 <UI_Main_FLASHING+0x42c>
				if(WIFI_CONNECTED == gl_SystemState )
 8004c94:	4b6e      	ldr	r3, [pc, #440]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2bf1      	cmp	r3, #241	; 0xf1
 8004c9a:	f040 8195 	bne.w	8004fc8 <UI_Main_FLASHING+0x42c>
				{
					UI_Clean();
 8004c9e:	f000 fa33 	bl	8005108 <UI_Clean>
					UI_WiFi_Connected();
 8004ca2:	f000 feab 	bl	80059fc <UI_WiFi_Connected>
					//Change to UI_IDE
					gl_UISTATE = UI_IDLE;
 8004ca6:	4b66      	ldr	r3, [pc, #408]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 8004cac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cb0:	f002 fe34 	bl	800791c <HAL_Delay>
					UI_Clean();
 8004cb4:	f000 fa28 	bl	8005108 <UI_Clean>
					UI_Init_Flashing_Screen();
 8004cb8:	f000 f9a4 	bl	8005004 <UI_Init_Flashing_Screen>
				}
			}
			break;
 8004cbc:	e184      	b.n	8004fc8 <UI_Main_FLASHING+0x42c>
		}
		case UI_DOWNLOADING_FW:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_DOWNLOAD_PROGRESS_ReadData(&gl_u8DownLoadProgress);
 8004cbe:	4865      	ldr	r0, [pc, #404]	; (8004e54 <UI_Main_FLASHING+0x2b8>)
 8004cc0:	f7fd ffb6 	bl	8002c30 <Rte_UpdateProgress_ReadData>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75bb      	strb	r3, [r7, #22]
			if( RTE_E_OKE == retVal){
 8004cc8:	7dbb      	ldrb	r3, [r7, #22]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f040 817e 	bne.w	8004fcc <UI_Main_FLASHING+0x430>
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				UI_UpdateDownloading_FW(gl_u8DownLoadProgress);
 8004cd0:	4b60      	ldr	r3, [pc, #384]	; (8004e54 <UI_Main_FLASHING+0x2b8>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fab7 	bl	8005248 <UI_UpdateDownloading_FW>
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				if(gl_u8DownLoadProgress >100)
 8004cda:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <UI_Main_FLASHING+0x2b8>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d902      	bls.n	8004ce8 <UI_Main_FLASHING+0x14c>
					gl_u8DownLoadProgress=100;
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <UI_Main_FLASHING+0x2b8>)
 8004ce4:	2264      	movs	r2, #100	; 0x64
 8004ce6:	701a      	strb	r2, [r3, #0]
				if(100 == gl_u8DownLoadProgress)
 8004ce8:	4b5a      	ldr	r3, [pc, #360]	; (8004e54 <UI_Main_FLASHING+0x2b8>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b64      	cmp	r3, #100	; 0x64
 8004cee:	d104      	bne.n	8004cfa <UI_Main_FLASHING+0x15e>
				{
					//HAL_Delay(2000);
					UI_Clean();
 8004cf0:	f000 fa0a 	bl	8005108 <UI_Clean>
					gl_UISTATE = UI_START_OTA;
 8004cf4:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
				}
				retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_UIERRORTYPE);
 8004cfa:	4857      	ldr	r0, [pc, #348]	; (8004e58 <UI_Main_FLASHING+0x2bc>)
 8004cfc:	f7fd ffbc 	bl	8002c78 <Rte_UI_Error_ReadData>
 8004d00:	4603      	mov	r3, r0
 8004d02:	75bb      	strb	r3, [r7, #22]
				if(gl_UIERRORTYPE ==UI_ERROR_RESET )
 8004d04:	4b54      	ldr	r3, [pc, #336]	; (8004e58 <UI_Main_FLASHING+0x2bc>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	f040 815f 	bne.w	8004fcc <UI_Main_FLASHING+0x430>
					gl_UISTATE = UI_DISPLAYERROR;
 8004d0e:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004d14:	e15a      	b.n	8004fcc <UI_Main_FLASHING+0x430>
		}
		case UI_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004d16:	484e      	ldr	r0, [pc, #312]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004d18:	f7fd febe 	bl	8002a98 <Rte_SystemState_ReadData>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	70fb      	strb	r3, [r7, #3]
			retVal = Rte_PacketSendLoraNum_ReadData(&gl_TimeRequest);
 8004d20:	484e      	ldr	r0, [pc, #312]	; (8004e5c <UI_Main_FLASHING+0x2c0>)
 8004d22:	f7fd fff1 	bl	8002d08 <Rte_PacketSendLoraNum_ReadData>
 8004d26:	4603      	mov	r3, r0
 8004d28:	70fb      	strb	r3, [r7, #3]
			if (RTE_E_OKE == retVal){
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f040 814f 	bne.w	8004fd0 <UI_Main_FLASHING+0x434>
				if(gl_SystemState == SYS_REQUEST_OTA){
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d107      	bne.n	8004d4a <UI_Main_FLASHING+0x1ae>
					UI_StartOTA();
 8004d3a:	f000 fca3 	bl	8005684 <UI_StartOTA>
					UI_Wait_ACCEPT_OTA(gl_TimeRequest);
 8004d3e:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <UI_Main_FLASHING+0x2c0>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fcb2 	bl	80056ac <UI_Wait_ACCEPT_OTA>
				else {
					gl_UISTATE = UI_WAIT_START_OTA;
					//UI_Clean();
				}
			}
			break;
 8004d48:	e142      	b.n	8004fd0 <UI_Main_FLASHING+0x434>
					gl_UISTATE = UI_WAIT_START_OTA;
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	701a      	strb	r2, [r3, #0]
			break;
 8004d50:	e13e      	b.n	8004fd0 <UI_Main_FLASHING+0x434>
		}
		case UI_WAIT_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004d52:	483f      	ldr	r0, [pc, #252]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004d54:	f7fd fea0 	bl	8002a98 <Rte_SystemState_ReadData>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73bb      	strb	r3, [r7, #14]
			if (gl_SystemState == SYS_CONFIG_LORA){
 8004d5c:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d151      	bne.n	8004e08 <UI_Main_FLASHING+0x26c>
				gl_UISTATE = UI_SYNCONFIGURATION;
 8004d64:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004d66:	2204      	movs	r2, #4
 8004d68:	701a      	strb	r2, [r3, #0]
				UI_Clean();
 8004d6a:	f000 f9cd 	bl	8005108 <UI_Clean>
				RTE_RUNNABLE_CONFIG_LORA_ReadData(&gl_u32configLoRa);
 8004d6e:	483c      	ldr	r0, [pc, #240]	; (8004e60 <UI_Main_FLASHING+0x2c4>)
 8004d70:	f7fd ffee 	bl	8002d50 <Rte_FlagConfigLoRA_ReadData>
				u8SF = (gl_u32configLoRa >> SHIFT_16_BIT)& 0xFF ;
 8004d74:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <UI_Main_FLASHING+0x2c4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <UI_Main_FLASHING+0x2c8>)
 8004d7e:	701a      	strb	r2, [r3, #0]
				u8BW = (gl_u32configLoRa >> SHIFT_8_BIT)& 0xFF ;
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <UI_Main_FLASHING+0x2c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <UI_Main_FLASHING+0x2cc>)
 8004d8a:	701a      	strb	r2, [r3, #0]
				u8CR = (gl_u32configLoRa >> SHIFT_0_BIT)& 0xFF ;
 8004d8c:	4b34      	ldr	r3, [pc, #208]	; (8004e60 <UI_Main_FLASHING+0x2c4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <UI_Main_FLASHING+0x2d0>)
 8004d94:	701a      	strb	r2, [r3, #0]

				uint8_t sf = SX1278_SpreadFactor_Values[u8SF];
 8004d96:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <UI_Main_FLASHING+0x2c8>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <UI_Main_FLASHING+0x2d4>)
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	737b      	strb	r3, [r7, #13]
				float bw = SX1278_Bandwidth_Values[u8BW];
 8004da2:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <UI_Main_FLASHING+0x2cc>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <UI_Main_FLASHING+0x2d8>)
 8004daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dae:	60bb      	str	r3, [r7, #8]
				float cr = SX1278_CodingRate_Values[u8CR];
 8004db0:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <UI_Main_FLASHING+0x2d0>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b30      	ldr	r3, [pc, #192]	; (8004e78 <UI_Main_FLASHING+0x2dc>)
 8004db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dbc:	607b      	str	r3, [r7, #4]
				data_rate = UI_CalculateLoRaDataRate(sf, bw, cr);
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f7fc f936 	bl	8001030 <__aeabi_f2uiz>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc f932 	bl	8001030 <__aeabi_f2uiz>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	7b7b      	ldrb	r3, [r7, #13]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fe3d 	bl	8005a54 <UI_CalculateLoRaDataRate>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <UI_Main_FLASHING+0x2e0>)
 8004dde:	6013      	str	r3, [r2, #0]
				transmission_time_per_packet = (PACKET_SIZE * 8.0) / data_rate;
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <UI_Main_FLASHING+0x2e0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4826      	ldr	r0, [pc, #152]	; (8004e80 <UI_Main_FLASHING+0x2e4>)
 8004de8:	f7fc f860 	bl	8000eac <__aeabi_fdiv>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <UI_Main_FLASHING+0x2e8>)
 8004df2:	601a      	str	r2, [r3, #0]
				UI_DisplayConfig(u8BW ,u8SF ,u8CR);
 8004df4:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <UI_Main_FLASHING+0x2cc>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <UI_Main_FLASHING+0x2c8>)
 8004dfa:	7811      	ldrb	r1, [r2, #0]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <UI_Main_FLASHING+0x2d0>)
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fd1b 	bl	800583c <UI_DisplayConfig>
			else {
				/*OUT OF REQUEST*/
				gl_UISTATE=UI_DISPLAYERROR;
				UI_Clean();
			}
			break;
 8004e06:	e0ee      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
				gl_UISTATE=UI_DISPLAYERROR;
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <UI_Main_FLASHING+0x2a4>)
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	701a      	strb	r2, [r3, #0]
				UI_Clean();
 8004e0e:	f000 f97b 	bl	8005108 <UI_Clean>
			break;
 8004e12:	e0e8      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
		}
		case UI_SYNCONFIGURATION:
		{	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004e14:	480e      	ldr	r0, [pc, #56]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004e16:	f7fd fe3f 	bl	8002a98 <Rte_SystemState_ReadData>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]
			retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004e1e:	481a      	ldr	r0, [pc, #104]	; (8004e88 <UI_Main_FLASHING+0x2ec>)
 8004e20:	f7fd ff2a 	bl	8002c78 <Rte_UI_Error_ReadData>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
			if( RTE_E_OKE == retVal){
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	f040 80d2 	bne.w	8004fd4 <UI_Main_FLASHING+0x438>
				if(gl_SystemState == SYS_CONFIG_LORA){
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <UI_Main_FLASHING+0x2b4>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d129      	bne.n	8004e8c <UI_Main_FLASHING+0x2f0>
					UI_Synconfiguaraton();
 8004e38:	f000 faac 	bl	8005394 <UI_Synconfiguaraton>
 8004e3c:	e032      	b.n	8004ea4 <UI_Main_FLASHING+0x308>
 8004e3e:	bf00      	nop
 8004e40:	200015ec 	.word	0x200015ec
 8004e44:	20001602 	.word	0x20001602
 8004e48:	20001603 	.word	0x20001603
 8004e4c:	20001604 	.word	0x20001604
 8004e50:	200015ed 	.word	0x200015ed
 8004e54:	200015ef 	.word	0x200015ef
 8004e58:	200015ee 	.word	0x200015ee
 8004e5c:	200015fa 	.word	0x200015fa
 8004e60:	20001608 	.word	0x20001608
 8004e64:	20000c84 	.word	0x20000c84
 8004e68:	20000c83 	.word	0x20000c83
 8004e6c:	20000c85 	.word	0x20000c85
 8004e70:	0800f77c 	.word	0x0800f77c
 8004e74:	0800f754 	.word	0x0800f754
 8004e78:	0800f784 	.word	0x0800f784
 8004e7c:	2000160c 	.word	0x2000160c
 8004e80:	44200000 	.word	0x44200000
 8004e84:	20001610 	.word	0x20001610
 8004e88:	200015f0 	.word	0x200015f0
				}
				else if(gl_SystemState == SYS_SEND_UPDATE){
 8004e8c:	4b58      	ldr	r3, [pc, #352]	; (8004ff0 <UI_Main_FLASHING+0x454>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b07      	cmp	r3, #7
 8004e92:	d107      	bne.n	8004ea4 <UI_Main_FLASHING+0x308>
					UI_Clean();
 8004e94:	f000 f938 	bl	8005108 <UI_Clean>
					RTE_RUNNABLE_FLAG_TOTAL_REQUEST_PACKET_ReadData(&TOTAL_PACKETS);
 8004e98:	4856      	ldr	r0, [pc, #344]	; (8004ff4 <UI_Main_FLASHING+0x458>)
 8004e9a:	f7fd ffd7 	bl	8002e4c <Rte_Flag_Total_request_packet_ReadData>
					gl_UISTATE = UI_SENDPACKET_LORA_FW;
 8004e9e:	4b56      	ldr	r3, [pc, #344]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	701a      	strb	r2, [r3, #0]
				}

				if(gl_u8ErrorFlag == GW_REQUEST_UPDATE_ERROR){
 8004ea4:	4b55      	ldr	r3, [pc, #340]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eaa:	f040 8093 	bne.w	8004fd4 <UI_Main_FLASHING+0x438>
					UI_Clean();
 8004eae:	f000 f92b 	bl	8005108 <UI_Clean>
					gl_UISTATE =UI_DISPLAYERROR;
 8004eb2:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	701a      	strb	r2, [r3, #0]
					UI_DisplayERROR(gl_u8ErrorFlag);
 8004eb8:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fc21 	bl	8005704 <UI_DisplayERROR>
				}
			}
			break;
 8004ec2:	e087      	b.n	8004fd4 <UI_Main_FLASHING+0x438>
		}
		case UI_SENDPACKET_LORA_FW:
		{

			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8004ec4:	484e      	ldr	r0, [pc, #312]	; (8005000 <UI_Main_FLASHING+0x464>)
 8004ec6:	f7fd ff1f 	bl	8002d08 <Rte_PacketSendLoraNum_ReadData>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	747b      	strb	r3, [r7, #17]

			if(RTE_E_OKE == retVal_1){
 8004ece:	7c7b      	ldrb	r3, [r7, #17]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 8081 	bne.w	8004fd8 <UI_Main_FLASHING+0x43c>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004ed6:	4849      	ldr	r0, [pc, #292]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004ed8:	f7fd fece 	bl	8002c78 <Rte_UI_Error_ReadData>
 8004edc:	4603      	mov	r3, r0
 8004ede:	743b      	strb	r3, [r7, #16]
				UI_SendSW_LoRa(gl_u16Packet_LoRa_FW);
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <UI_Main_FLASHING+0x464>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fab3 	bl	8005450 <UI_SendSW_LoRa>
				if( MCU_ERROR_CRC == gl_u8ErrorFlag  ){
 8004eea:	4b44      	ldr	r3, [pc, #272]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b4f      	cmp	r3, #79	; 0x4f
 8004ef0:	d105      	bne.n	8004efe <UI_Main_FLASHING+0x362>
					UI_Clean();
 8004ef2:	f000 f909 	bl	8005108 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8004ef6:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004ef8:	2207      	movs	r2, #7
 8004efa:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
				}

			}
			break;
 8004efc:	e06c      	b.n	8004fd8 <UI_Main_FLASHING+0x43c>
				else if( MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8004efe:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b77      	cmp	r3, #119	; 0x77
 8004f04:	d107      	bne.n	8004f16 <UI_Main_FLASHING+0x37a>
					UI_Clean();
 8004f06:	f000 f8ff 	bl	8005108 <UI_Clean>
					UI_DoneDownload_FW();
 8004f0a:	f000 f9cf 	bl	80052ac <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004f10:	2208      	movs	r2, #8
 8004f12:	701a      	strb	r2, [r3, #0]
			break;
 8004f14:	e060      	b.n	8004fd8 <UI_Main_FLASHING+0x43c>
				else if(MCU_REQUEST_PACKET_FW_LOSS ==gl_u8ErrorFlag ){
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b76      	cmp	r3, #118	; 0x76
 8004f1c:	d15c      	bne.n	8004fd8 <UI_Main_FLASHING+0x43c>
					UI_Clean();
 8004f1e:	f000 f8f3 	bl	8005108 <UI_Clean>
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
 8004f22:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004f24:	2206      	movs	r2, #6
 8004f26:	701a      	strb	r2, [r3, #0]
			break;
 8004f28:	e056      	b.n	8004fd8 <UI_Main_FLASHING+0x43c>
		}
		case UI_RESENDPACKET_LORA_FW:
		{
			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8004f2a:	4835      	ldr	r0, [pc, #212]	; (8005000 <UI_Main_FLASHING+0x464>)
 8004f2c:	f7fd feec 	bl	8002d08 <Rte_PacketSendLoraNum_ReadData>
 8004f30:	4603      	mov	r3, r0
 8004f32:	74fb      	strb	r3, [r7, #19]
			if(RTE_E_OKE == retVal_1){
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d150      	bne.n	8004fdc <UI_Main_FLASHING+0x440>
				UI_Send_Packet_Lost(gl_u16Packet_LoRa_FW);
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <UI_Main_FLASHING+0x464>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fc44 	bl	80057cc <UI_Send_Packet_Lost>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004f44:	482d      	ldr	r0, [pc, #180]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004f46:	f7fd fe97 	bl	8002c78 <Rte_UI_Error_ReadData>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74bb      	strb	r3, [r7, #18]
				if(MCU_ERROR_CRC  ==gl_u8ErrorFlag){
 8004f4e:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b4f      	cmp	r3, #79	; 0x4f
 8004f54:	d105      	bne.n	8004f62 <UI_Main_FLASHING+0x3c6>
					UI_Clean();
 8004f56:	f000 f8d7 	bl	8005108 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					UI_DoneDownload_FW();
					gl_UISTATE = UI_DONE_OTA;
				}
			}
			break;
 8004f60:	e03c      	b.n	8004fdc <UI_Main_FLASHING+0x440>
				else if(MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b77      	cmp	r3, #119	; 0x77
 8004f68:	d138      	bne.n	8004fdc <UI_Main_FLASHING+0x440>
					UI_Clean();
 8004f6a:	f000 f8cd 	bl	8005108 <UI_Clean>
					UI_DoneDownload_FW();
 8004f6e:	f000 f99d 	bl	80052ac <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004f74:	2208      	movs	r2, #8
 8004f76:	701a      	strb	r2, [r3, #0]
			break;
 8004f78:	e030      	b.n	8004fdc <UI_Main_FLASHING+0x440>
		}
		case UI_DONE_OTA:
		{

			UI_DoneDownload_FW();
 8004f7a:	f000 f997 	bl	80052ac <UI_DoneDownload_FW>
			//HAL_Delay(2000);
			//UI_Init_Flashing_Screen();
			//RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
			uint8_t retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8004f7e:	481c      	ldr	r0, [pc, #112]	; (8004ff0 <UI_Main_FLASHING+0x454>)
 8004f80:	f7fd fd8a 	bl	8002a98 <Rte_SystemState_ReadData>
 8004f84:	4603      	mov	r3, r0
 8004f86:	757b      	strb	r3, [r7, #21]
			if(gl_SystemState ==SYS_IDLE ){
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <UI_Main_FLASHING+0x454>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d127      	bne.n	8004fe0 <UI_Main_FLASHING+0x444>
				UI_Clean();
 8004f90:	f000 f8ba 	bl	8005108 <UI_Clean>
				UI_Init_Flashing_Screen();
 8004f94:	f000 f836 	bl	8005004 <UI_Init_Flashing_Screen>
				gl_UISTATE = UI_IDLE;
 8004f98:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004f9e:	e01f      	b.n	8004fe0 <UI_Main_FLASHING+0x444>
		}
		case UI_DISPLAYERROR:
		{
			/*ERROR Handler */
			Std_ReturnType retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8004fa0:	4816      	ldr	r0, [pc, #88]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004fa2:	f7fd fe69 	bl	8002c78 <Rte_UI_Error_ReadData>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	753b      	strb	r3, [r7, #20]
			if(RTE_E_OKE == retVal){
 8004faa:	7d3b      	ldrb	r3, [r7, #20]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d119      	bne.n	8004fe4 <UI_Main_FLASHING+0x448>
				UI_DisplayERROR(gl_u8ErrorFlag);
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <UI_Main_FLASHING+0x460>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fba5 	bl	8005704 <UI_DisplayERROR>
				// START TIMER FOR RS SW

			}
			break;
 8004fba:	e013      	b.n	8004fe4 <UI_Main_FLASHING+0x448>
		}
		default:
			/*ERROR */
			gl_UISTATE = UI_DISPLAYERROR;
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <UI_Main_FLASHING+0x45c>)
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	701a      	strb	r2, [r3, #0]
			break;
 8004fc2:	e010      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fc4:	bf00      	nop
 8004fc6:	e00e      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fc8:	bf00      	nop
 8004fca:	e00c      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fcc:	bf00      	nop
 8004fce:	e00a      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fd0:	bf00      	nop
 8004fd2:	e008      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fd4:	bf00      	nop
 8004fd6:	e006      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fd8:	bf00      	nop
 8004fda:	e004      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fe0:	bf00      	nop
 8004fe2:	e000      	b.n	8004fe6 <UI_Main_FLASHING+0x44a>
			break;
 8004fe4:	bf00      	nop
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200015ed 	.word	0x200015ed
 8004ff4:	20001600 	.word	0x20001600
 8004ff8:	200015ec 	.word	0x200015ec
 8004ffc:	200015f0 	.word	0x200015f0
 8005000:	200015f2 	.word	0x200015f2

08005004 <UI_Init_Flashing_Screen>:
/**********************************************************/
/*					   Private UI FUNC					  */
/**********************************************************/
static void UI_Init_Flashing_Screen(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
    /* Set Background color */
    SSD1306_GotoXY(5, 0);
 8005008:	2100      	movs	r1, #0
 800500a:	2005      	movs	r0, #5
 800500c:	f7fe fd16 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 8005010:	2201      	movs	r2, #1
 8005012:	4911      	ldr	r1, [pc, #68]	; (8005058 <UI_Init_Flashing_Screen+0x54>)
 8005014:	4811      	ldr	r0, [pc, #68]	; (800505c <UI_Init_Flashing_Screen+0x58>)
 8005016:	f7fe fda7 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(10, 20);
 800501a:	2114      	movs	r1, #20
 800501c:	200a      	movs	r0, #10
 800501e:	f7fe fd0d 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("Node 1: Loss", &Font_7x10, 1); // Initial status for Node 1
 8005022:	2201      	movs	r2, #1
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <UI_Init_Flashing_Screen+0x5c>)
 8005026:	480f      	ldr	r0, [pc, #60]	; (8005064 <UI_Init_Flashing_Screen+0x60>)
 8005028:	f7fe fd9e 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(10, 30);
 800502c:	211e      	movs	r1, #30
 800502e:	200a      	movs	r0, #10
 8005030:	f7fe fd04 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("Node 2: Loss", &Font_7x10, 1); // Initial status for Node 2
 8005034:	2201      	movs	r2, #1
 8005036:	490a      	ldr	r1, [pc, #40]	; (8005060 <UI_Init_Flashing_Screen+0x5c>)
 8005038:	480b      	ldr	r0, [pc, #44]	; (8005068 <UI_Init_Flashing_Screen+0x64>)
 800503a:	f7fe fd95 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(10, 40);
 800503e:	2128      	movs	r1, #40	; 0x28
 8005040:	200a      	movs	r0, #10
 8005042:	f7fe fcfb 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("Node 3: Loss", &Font_7x10, 1); // Initial status for Node 3
 8005046:	2201      	movs	r2, #1
 8005048:	4905      	ldr	r1, [pc, #20]	; (8005060 <UI_Init_Flashing_Screen+0x5c>)
 800504a:	4808      	ldr	r0, [pc, #32]	; (800506c <UI_Init_Flashing_Screen+0x68>)
 800504c:	f7fe fd8c 	bl	8003b68 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // Update screen
 8005050:	f7fe fc40 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}
 8005058:	200000a4 	.word	0x200000a4
 800505c:	0800f538 	.word	0x0800f538
 8005060:	2000009c 	.word	0x2000009c
 8005064:	0800f540 	.word	0x0800f540
 8005068:	0800f550 	.word	0x0800f550
 800506c:	0800f560 	.word	0x0800f560

08005070 <UI_Node_Connect>:

static void UI_Node_Connect(int nodeIndex, bool connected) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
    SSD1306_GotoXY(10, 20 + (nodeIndex * 10)); // Calculate Y position based on node index
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	4413      	add	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	3314      	adds	r3, #20
 800508c:	b29b      	uxth	r3, r3
 800508e:	4619      	mov	r1, r3
 8005090:	200a      	movs	r0, #10
 8005092:	f7fe fcd3 	bl	8003a3c <SSD1306_GotoXY>
    if (connected) {
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <UI_Node_Connect+0x54>
        SSD1306_Puts("Node ", &Font_7x10, 1);
 800509c:	2201      	movs	r2, #1
 800509e:	4916      	ldr	r1, [pc, #88]	; (80050f8 <UI_Node_Connect+0x88>)
 80050a0:	4816      	ldr	r0, [pc, #88]	; (80050fc <UI_Node_Connect+0x8c>)
 80050a2:	f7fe fd61 	bl	8003b68 <SSD1306_Puts>
        SSD1306_Putc(nodeIndex + '1', &Font_7x10, 1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3331      	adds	r3, #49	; 0x31
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2201      	movs	r2, #1
 80050b0:	4911      	ldr	r1, [pc, #68]	; (80050f8 <UI_Node_Connect+0x88>)
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fcd8 	bl	8003a68 <SSD1306_Putc>
        SSD1306_Puts(": Alive ", &Font_7x10, 1);
 80050b8:	2201      	movs	r2, #1
 80050ba:	490f      	ldr	r1, [pc, #60]	; (80050f8 <UI_Node_Connect+0x88>)
 80050bc:	4810      	ldr	r0, [pc, #64]	; (8005100 <UI_Node_Connect+0x90>)
 80050be:	f7fe fd53 	bl	8003b68 <SSD1306_Puts>
 80050c2:	e012      	b.n	80050ea <UI_Node_Connect+0x7a>
    } else {
        SSD1306_Puts("Node ", &Font_7x10, 1);
 80050c4:	2201      	movs	r2, #1
 80050c6:	490c      	ldr	r1, [pc, #48]	; (80050f8 <UI_Node_Connect+0x88>)
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <UI_Node_Connect+0x8c>)
 80050ca:	f7fe fd4d 	bl	8003b68 <SSD1306_Puts>
        SSD1306_Putc(nodeIndex + '1', &Font_7x10, 1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	3331      	adds	r3, #49	; 0x31
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2201      	movs	r2, #1
 80050d8:	4907      	ldr	r1, [pc, #28]	; (80050f8 <UI_Node_Connect+0x88>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fcc4 	bl	8003a68 <SSD1306_Putc>
        SSD1306_Puts(": Loss  ", &Font_7x10, 1);
 80050e0:	2201      	movs	r2, #1
 80050e2:	4905      	ldr	r1, [pc, #20]	; (80050f8 <UI_Node_Connect+0x88>)
 80050e4:	4807      	ldr	r0, [pc, #28]	; (8005104 <UI_Node_Connect+0x94>)
 80050e6:	f7fe fd3f 	bl	8003b68 <SSD1306_Puts>
    }
    SSD1306_UpdateScreen(); // Update screen
 80050ea:	f7fe fbf3 	bl	80038d4 <SSD1306_UpdateScreen>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000009c 	.word	0x2000009c
 80050fc:	0800f570 	.word	0x0800f570
 8005100:	0800f578 	.word	0x0800f578
 8005104:	0800f584 	.word	0x0800f584

08005108 <UI_Clean>:
static void UI_Clean(void){
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800510c:	f7fe ff03 	bl	8003f16 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8005110:	f7fe fbe0 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}

08005118 <UI_WaitForResp>:

static void UI_WaitForResp(void){
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
	uint32_t local_u32NodeAddr = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
	uint32_t local_u32Codesize = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
	uint16_t local_u16Appver=0U;
 8005126:	2300      	movs	r3, #0
 8005128:	837b      	strh	r3, [r7, #26]
	RTE_RUNNABLE_CODE_SIZE_ReadData(&local_u32Codesize);
 800512a:	f107 031c 	add.w	r3, r7, #28
 800512e:	4618      	mov	r0, r3
 8005130:	f7fd fd5a 	bl	8002be8 <Rte_CodeSize_ReadData>
	RTE_RUNNABLE_APP_VER_ReadData(&local_u16Appver);
 8005134:	f107 031a 	add.w	r3, r7, #26
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd fd43 	bl	8002bc4 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 800513e:	f107 0320 	add.w	r3, r7, #32
 8005142:	4618      	mov	r0, r3
 8005144:	f7fd fd62 	bl	8002c0c <Rte_NodeAddr_ReadData>
	char buffer_version[10];
	char buffer_data_id[10];

	uint8_t major_version = (local_u16Appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	b29b      	uxth	r3, r3
 800514e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t minor_version = local_u16Appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	sprintf(buffer_data_id, "%X", local_u32NodeAddr);
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	4929      	ldr	r1, [pc, #164]	; (8005204 <UI_WaitForResp+0xec>)
 800515e:	4618      	mov	r0, r3
 8005160:	f007 f8fc 	bl	800c35c <siprintf>
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8005164:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800516c:	f107 0010 	add.w	r0, r7, #16
 8005170:	4925      	ldr	r1, [pc, #148]	; (8005208 <UI_WaitForResp+0xf0>)
 8005172:	f007 f8f3 	bl	800c35c <siprintf>
	char Local_DataBuffer[4];
	uint8_t local_estimatime = local_u32Codesize/BandWidth_UART +20;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4a24      	ldr	r2, [pc, #144]	; (800520c <UI_WaitForResp+0xf4>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3314      	adds	r3, #20
 8005184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SSD1306_GotoXY (5, 0);
 8005188:	2100      	movs	r1, #0
 800518a:	2005      	movs	r0, #5
 800518c:	f7fe fc56 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATE DOWNLOAD!!", &Font_7x10, 1);
 8005190:	2201      	movs	r2, #1
 8005192:	491f      	ldr	r1, [pc, #124]	; (8005210 <UI_WaitForResp+0xf8>)
 8005194:	481f      	ldr	r0, [pc, #124]	; (8005214 <UI_WaitForResp+0xfc>)
 8005196:	f7fe fce7 	bl	8003b68 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u16Appver );
 800519a:	8b7b      	ldrh	r3, [r7, #26]
 800519c:	461a      	mov	r2, r3
 800519e:	463b      	mov	r3, r7
 80051a0:	491d      	ldr	r1, [pc, #116]	; (8005218 <UI_WaitForResp+0x100>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f007 f8da 	bl	800c35c <siprintf>
	SSD1306_GotoXY (5, 10);
 80051a8:	210a      	movs	r1, #10
 80051aa:	2005      	movs	r0, #5
 80051ac:	f7fe fc46 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("VERSION:", &Font_7x10, 1);
 80051b0:	2201      	movs	r2, #1
 80051b2:	4917      	ldr	r1, [pc, #92]	; (8005210 <UI_WaitForResp+0xf8>)
 80051b4:	4819      	ldr	r0, [pc, #100]	; (800521c <UI_WaitForResp+0x104>)
 80051b6:	f7fe fcd7 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (70, 10);
 80051ba:	210a      	movs	r1, #10
 80051bc:	2046      	movs	r0, #70	; 0x46
 80051be:	f7fe fc3d 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	2201      	movs	r2, #1
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <UI_WaitForResp+0xf8>)
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fccc 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 80051d0:	2114      	movs	r1, #20
 80051d2:	2005      	movs	r0, #5
 80051d4:	f7fe fc32 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 80051d8:	2201      	movs	r2, #1
 80051da:	490d      	ldr	r1, [pc, #52]	; (8005210 <UI_WaitForResp+0xf8>)
 80051dc:	4810      	ldr	r0, [pc, #64]	; (8005220 <UI_WaitForResp+0x108>)
 80051de:	f7fe fcc3 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (60, 20);
 80051e2:	2114      	movs	r1, #20
 80051e4:	203c      	movs	r0, #60	; 0x3c
 80051e6:	f7fe fc29 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	2201      	movs	r2, #1
 80051ee:	4908      	ldr	r1, [pc, #32]	; (8005210 <UI_WaitForResp+0xf8>)
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fcb9 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80051f6:	f7fe fb6d 	bl	80038d4 <SSD1306_UpdateScreen>
}
 80051fa:	bf00      	nop
 80051fc:	3728      	adds	r7, #40	; 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	0800f590 	.word	0x0800f590
 8005208:	0800f594 	.word	0x0800f594
 800520c:	10624dd3 	.word	0x10624dd3
 8005210:	2000009c 	.word	0x2000009c
 8005214:	0800f59c 	.word	0x0800f59c
 8005218:	0800f5b0 	.word	0x0800f5b0
 800521c:	0800f5b4 	.word	0x0800f5b4
 8005220:	0800f5c0 	.word	0x0800f5c0

08005224 <UI_Downloading_FW>:
static void UI_Downloading_FW(void){
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (30, 30);
 8005228:	211e      	movs	r1, #30
 800522a:	201e      	movs	r0, #30
 800522c:	f7fe fc06 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("PROGRESS", &Font_7x10, 1);
 8005230:	2201      	movs	r2, #1
 8005232:	4903      	ldr	r1, [pc, #12]	; (8005240 <UI_Downloading_FW+0x1c>)
 8005234:	4803      	ldr	r0, [pc, #12]	; (8005244 <UI_Downloading_FW+0x20>)
 8005236:	f7fe fc97 	bl	8003b68 <SSD1306_Puts>
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	2000009c 	.word	0x2000009c
 8005244:	0800f5cc 	.word	0x0800f5cc

08005248 <UI_UpdateDownloading_FW>:
static void UI_UpdateDownloading_FW(uint8_t Var_Progress){
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	if(Var_Progress >100)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <UI_UpdateDownloading_FW+0x14>
		Var_Progress =100;
 8005258:	2364      	movs	r3, #100	; 0x64
 800525a:	71fb      	strb	r3, [r7, #7]
	sprintf(local_UpdateBuffer, "%d", Var_Progress);
 800525c:	79fa      	ldrb	r2, [r7, #7]
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	490f      	ldr	r1, [pc, #60]	; (80052a0 <UI_UpdateDownloading_FW+0x58>)
 8005264:	4618      	mov	r0, r3
 8005266:	f007 f879 	bl	800c35c <siprintf>
	SSD1306_GotoXY (50, 40);
 800526a:	2128      	movs	r1, #40	; 0x28
 800526c:	2032      	movs	r0, #50	; 0x32
 800526e:	f7fe fbe5 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 8005272:	2201      	movs	r2, #1
 8005274:	490b      	ldr	r1, [pc, #44]	; (80052a4 <UI_UpdateDownloading_FW+0x5c>)
 8005276:	480c      	ldr	r0, [pc, #48]	; (80052a8 <UI_UpdateDownloading_FW+0x60>)
 8005278:	f7fe fc76 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 800527c:	2128      	movs	r1, #40	; 0x28
 800527e:	2032      	movs	r0, #50	; 0x32
 8005280:	f7fe fbdc 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	2201      	movs	r2, #1
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <UI_UpdateDownloading_FW+0x5c>)
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fc6b 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8005292:	f7fe fb1f 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	0800f5b0 	.word	0x0800f5b0
 80052a4:	2000009c 	.word	0x2000009c
 80052a8:	0800f5d8 	.word	0x0800f5d8

080052ac <UI_DoneDownload_FW>:
static void UI_DoneDownload_FW(void){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
	/* Writing Text */
	Std_ReturnType retVal = RTE_RUNNABLE_APP_VER_ReadData(&gl_u32Version);
 80052b2:	482f      	ldr	r0, [pc, #188]	; (8005370 <UI_DoneDownload_FW+0xc4>)
 80052b4:	f7fd fc86 	bl	8002bc4 <Rte_ApplVer_ReadData>
 80052b8:	4603      	mov	r3, r0
 80052ba:	77fb      	strb	r3, [r7, #31]
	char buffer_version[10];
	char buffer_data_id[10];
	uint32_t local_u32NodeAddr = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	603b      	str	r3, [r7, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 80052c0:	463b      	mov	r3, r7
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fca2 	bl	8002c0c <Rte_NodeAddr_ReadData>
	uint8_t major_version = (gl_u32Version >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 80052c8:	4b29      	ldr	r3, [pc, #164]	; (8005370 <UI_DoneDownload_FW+0xc4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	77bb      	strb	r3, [r7, #30]
	uint8_t minor_version = gl_u32Version & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <UI_DoneDownload_FW+0xc4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	777b      	strb	r3, [r7, #29]
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 80052d6:	7fba      	ldrb	r2, [r7, #30]
 80052d8:	7f7b      	ldrb	r3, [r7, #29]
 80052da:	f107 0010 	add.w	r0, r7, #16
 80052de:	4925      	ldr	r1, [pc, #148]	; (8005374 <UI_DoneDownload_FW+0xc8>)
 80052e0:	f007 f83c 	bl	800c35c <siprintf>
	sprintf(buffer_data_id, "%X", local_u32NodeAddr);
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	4923      	ldr	r1, [pc, #140]	; (8005378 <UI_DoneDownload_FW+0xcc>)
 80052ea:	4618      	mov	r0, r3
 80052ec:	f007 f836 	bl	800c35c <siprintf>
	//char local_UpdateBuffer[4];
	SSD1306_GotoXY (40, 10);
 80052f0:	210a      	movs	r1, #10
 80052f2:	2028      	movs	r0, #40	; 0x28
 80052f4:	f7fe fba2 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA", &Font_11x18, 1);
 80052f8:	2201      	movs	r2, #1
 80052fa:	4920      	ldr	r1, [pc, #128]	; (800537c <UI_DoneDownload_FW+0xd0>)
 80052fc:	4820      	ldr	r0, [pc, #128]	; (8005380 <UI_DoneDownload_FW+0xd4>)
 80052fe:	f7fe fc33 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (30, 30);
 8005302:	211e      	movs	r1, #30
 8005304:	201e      	movs	r0, #30
 8005306:	f7fe fb99 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("COMPLETED", &Font_7x10, 1);
 800530a:	2201      	movs	r2, #1
 800530c:	491d      	ldr	r1, [pc, #116]	; (8005384 <UI_DoneDownload_FW+0xd8>)
 800530e:	481e      	ldr	r0, [pc, #120]	; (8005388 <UI_DoneDownload_FW+0xdc>)
 8005310:	f7fe fc2a 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (30, 40);
 8005314:	2128      	movs	r1, #40	; 0x28
 8005316:	201e      	movs	r0, #30
 8005318:	f7fe fb90 	bl	8003a3c <SSD1306_GotoXY>

	SSD1306_Puts ("VERSION: ", &Font_7x10, 1);
 800531c:	2201      	movs	r2, #1
 800531e:	4919      	ldr	r1, [pc, #100]	; (8005384 <UI_DoneDownload_FW+0xd8>)
 8005320:	481a      	ldr	r0, [pc, #104]	; (800538c <UI_DoneDownload_FW+0xe0>)
 8005322:	f7fe fc21 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 8005326:	2128      	movs	r1, #40	; 0x28
 8005328:	2064      	movs	r0, #100	; 0x64
 800532a:	f7fe fb87 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	2201      	movs	r2, #1
 8005334:	4913      	ldr	r1, [pc, #76]	; (8005384 <UI_DoneDownload_FW+0xd8>)
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fc16 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (5, 50);
 800533c:	2132      	movs	r1, #50	; 0x32
 800533e:	2005      	movs	r0, #5
 8005340:	f7fe fb7c 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 8005344:	2201      	movs	r2, #1
 8005346:	490f      	ldr	r1, [pc, #60]	; (8005384 <UI_DoneDownload_FW+0xd8>)
 8005348:	4811      	ldr	r0, [pc, #68]	; (8005390 <UI_DoneDownload_FW+0xe4>)
 800534a:	f7fe fc0d 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 800534e:	2132      	movs	r1, #50	; 0x32
 8005350:	203c      	movs	r0, #60	; 0x3c
 8005352:	f7fe fb73 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	2201      	movs	r2, #1
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <UI_DoneDownload_FW+0xd8>)
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fc03 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8005362:	f7fe fab7 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005366:	bf00      	nop
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200015fc 	.word	0x200015fc
 8005374:	0800f594 	.word	0x0800f594
 8005378:	0800f590 	.word	0x0800f590
 800537c:	200000a4 	.word	0x200000a4
 8005380:	0800f5e0 	.word	0x0800f5e0
 8005384:	2000009c 	.word	0x2000009c
 8005388:	0800f5e8 	.word	0x0800f5e8
 800538c:	0800f5f4 	.word	0x0800f5f4
 8005390:	0800f5c0 	.word	0x0800f5c0

08005394 <UI_Synconfiguaraton>:

static void UI_Synconfiguaraton(void){
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
	static uint8_t dot_count = 0; // Biến tĩnh để theo dõi trạng thái của hiệu ứng
	char dots[4]; // Chuỗi chứa hiệu ứng chấm
	// Cập nhật chuỗi hiệu ứng chấm dựa trên dot_count
	 switch (dot_count) {
 800539a:	4b27      	ldr	r3, [pc, #156]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d01f      	beq.n	80053e2 <UI_Synconfiguaraton+0x4e>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	dc23      	bgt.n	80053ee <UI_Synconfiguaraton+0x5a>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <UI_Synconfiguaraton+0x1c>
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d00a      	beq.n	80053c4 <UI_Synconfiguaraton+0x30>
 80053ae:	e01e      	b.n	80053ee <UI_Synconfiguaraton+0x5a>
	 case 0:
		 strcpy(dots, ".");
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	222e      	movs	r2, #46	; 0x2e
 80053b4:	801a      	strh	r2, [r3, #0]
		 dot_count++;
 80053b6:	4b20      	ldr	r3, [pc, #128]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 80053c0:	701a      	strb	r2, [r3, #0]
		 break;
 80053c2:	e017      	b.n	80053f4 <UI_Synconfiguaraton+0x60>
	 case 1:
		 strcpy(dots, "..");
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <UI_Synconfiguaraton+0xa8>)
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	4611      	mov	r1, r2
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	3302      	adds	r3, #2
 80053d0:	0c12      	lsrs	r2, r2, #16
 80053d2:	701a      	strb	r2, [r3, #0]
		 dot_count++;
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 80053de:	701a      	strb	r2, [r3, #0]
		 break;
 80053e0:	e008      	b.n	80053f4 <UI_Synconfiguaraton+0x60>
	 case 2:
		 strcpy(dots, "...");
 80053e2:	4b17      	ldr	r3, [pc, #92]	; (8005440 <UI_Synconfiguaraton+0xac>)
 80053e4:	607b      	str	r3, [r7, #4]
		 dot_count = 0; // Quay lại trạng thái đầu tiên sau khi đạt tới "..."
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <UI_Synconfiguaraton+0xa4>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
		 break;
 80053ec:	e002      	b.n	80053f4 <UI_Synconfiguaraton+0x60>
	 default:
		 strcpy(dots, ""); // Trường hợp mặc định (không bao giờ xảy ra)
 80053ee:	2300      	movs	r3, #0
 80053f0:	713b      	strb	r3, [r7, #4]
		 break;
 80053f2:	bf00      	nop
	 }
	 // Chỉ xóa dòng cần cập nhật thay vì toàn bộ màn hình
	 SSD1306_GotoXY(60, 0);
 80053f4:	2100      	movs	r1, #0
 80053f6:	203c      	movs	r0, #60	; 0x3c
 80053f8:	f7fe fb20 	bl	8003a3c <SSD1306_GotoXY>
	 SSD1306_Puts("   ", &Font_7x10, 1); // Xóa các dấu chấm cũ
 80053fc:	2201      	movs	r2, #1
 80053fe:	4911      	ldr	r1, [pc, #68]	; (8005444 <UI_Synconfiguaraton+0xb0>)
 8005400:	4811      	ldr	r0, [pc, #68]	; (8005448 <UI_Synconfiguaraton+0xb4>)
 8005402:	f7fe fbb1 	bl	8003b68 <SSD1306_Puts>
	 SSD1306_GotoXY(5, 10);
 8005406:	210a      	movs	r1, #10
 8005408:	2005      	movs	r0, #5
 800540a:	f7fe fb17 	bl	8003a3c <SSD1306_GotoXY>
	 SSD1306_Puts("SYNC UP ", &Font_7x10, 1);
 800540e:	2201      	movs	r2, #1
 8005410:	490c      	ldr	r1, [pc, #48]	; (8005444 <UI_Synconfiguaraton+0xb0>)
 8005412:	480e      	ldr	r0, [pc, #56]	; (800544c <UI_Synconfiguaraton+0xb8>)
 8005414:	f7fe fba8 	bl	8003b68 <SSD1306_Puts>
	 SSD1306_GotoXY(60, 10);
 8005418:	210a      	movs	r1, #10
 800541a:	203c      	movs	r0, #60	; 0x3c
 800541c:	f7fe fb0e 	bl	8003a3c <SSD1306_GotoXY>
	 SSD1306_Puts(dots, &Font_7x10, 1);
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	2201      	movs	r2, #1
 8005424:	4907      	ldr	r1, [pc, #28]	; (8005444 <UI_Synconfiguaraton+0xb0>)
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fb9e 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Cập nhật màn hình
 800542c:	f7fe fa52 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20001614 	.word	0x20001614
 800543c:	0800f600 	.word	0x0800f600
 8005440:	002e2e2e 	.word	0x002e2e2e
 8005444:	2000009c 	.word	0x2000009c
 8005448:	0800f604 	.word	0x0800f604
 800544c:	0800f608 	.word	0x0800f608

08005450 <UI_SendSW_LoRa>:
static void UI_SendSW_LoRa(uint16_t Var_numPacket) {
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b08e      	sub	sp, #56	; 0x38
 8005454:	af02      	add	r7, sp, #8
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]

    static uint8_t dot_count = 0; // Biến tĩnh để theo dõi trạng thái của hiệu ứng
    char dots[4]; // Chuỗi chứa hiệu ứng chấm
    char local_UpdateBuffer[4];
    // Cập nhật chuỗi hiệu ứng chấm dựa trên dot_count
    switch (dot_count) {
 800545a:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d021      	beq.n	80054a6 <UI_SendSW_LoRa+0x56>
 8005462:	2b02      	cmp	r3, #2
 8005464:	dc25      	bgt.n	80054b2 <UI_SendSW_LoRa+0x62>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <UI_SendSW_LoRa+0x20>
 800546a:	2b01      	cmp	r3, #1
 800546c:	d00b      	beq.n	8005486 <UI_SendSW_LoRa+0x36>
 800546e:	e020      	b.n	80054b2 <UI_SendSW_LoRa+0x62>
        case 0:
            strcpy(dots, ".");
 8005470:	f107 0318 	add.w	r3, r7, #24
 8005474:	222e      	movs	r2, #46	; 0x2e
 8005476:	801a      	strh	r2, [r3, #0]
            dot_count++;
 8005478:	4b73      	ldr	r3, [pc, #460]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b71      	ldr	r3, [pc, #452]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 8005482:	701a      	strb	r2, [r3, #0]
            break;
 8005484:	e018      	b.n	80054b8 <UI_SendSW_LoRa+0x68>
        case 1:
            strcpy(dots, "..");
 8005486:	f107 0318 	add.w	r3, r7, #24
 800548a:	4a70      	ldr	r2, [pc, #448]	; (800564c <UI_SendSW_LoRa+0x1fc>)
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4611      	mov	r1, r2
 8005490:	8019      	strh	r1, [r3, #0]
 8005492:	3302      	adds	r3, #2
 8005494:	0c12      	lsrs	r2, r2, #16
 8005496:	701a      	strb	r2, [r3, #0]
            dot_count++;
 8005498:	4b6b      	ldr	r3, [pc, #428]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b69      	ldr	r3, [pc, #420]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 80054a2:	701a      	strb	r2, [r3, #0]
            break;
 80054a4:	e008      	b.n	80054b8 <UI_SendSW_LoRa+0x68>
        case 2:
            strcpy(dots, "...");
 80054a6:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <UI_SendSW_LoRa+0x200>)
 80054a8:	61bb      	str	r3, [r7, #24]
            dot_count = 0; // Quay lại trạng thái đầu tiên sau khi đạt tới "..."
 80054aa:	4b67      	ldr	r3, [pc, #412]	; (8005648 <UI_SendSW_LoRa+0x1f8>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
            break;
 80054b0:	e002      	b.n	80054b8 <UI_SendSW_LoRa+0x68>
        default:
            strcpy(dots, ""); // Trường hợp mặc định (không bao giờ xảy ra)
 80054b2:	2300      	movs	r3, #0
 80054b4:	763b      	strb	r3, [r7, #24]
            break;
 80054b6:	bf00      	nop
    }
    // Calculate remain time
    float remaining_time = (transmission_time_per_packet+0.14) * (TOTAL_PACKETS - Var_numPacket);
 80054b8:	4b66      	ldr	r3, [pc, #408]	; (8005654 <UI_SendSW_LoRa+0x204>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fa ffb3 	bl	8000428 <__aeabi_f2d>
 80054c2:	a35f      	add	r3, pc, #380	; (adr r3, 8005640 <UI_SendSW_LoRa+0x1f0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fa fe50 	bl	800016c <__adddf3>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4b60      	ldr	r3, [pc, #384]	; (8005658 <UI_SendSW_LoRa+0x208>)
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fa ff90 	bl	8000404 <__aeabi_i2d>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4620      	mov	r0, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	f7fa fff4 	bl	80004d8 <__aeabi_dmul>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	f7fb fac6 	bl	8000a88 <__aeabi_d2f>
 80054fc:	4603      	mov	r3, r0
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Chuyển đổi thời gian còn lại sang phút và giây
    int minutes = (int)(remaining_time / 60);
 8005500:	4956      	ldr	r1, [pc, #344]	; (800565c <UI_SendSW_LoRa+0x20c>)
 8005502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005504:	f7fb fcd2 	bl	8000eac <__aeabi_fdiv>
 8005508:	4603      	mov	r3, r0
 800550a:	4618      	mov	r0, r3
 800550c:	f7fb fd6a 	bl	8000fe4 <__aeabi_f2iz>
 8005510:	4603      	mov	r3, r0
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
    int seconds = (int)(remaining_time) % 60;
 8005514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005516:	f7fb fd65 	bl	8000fe4 <__aeabi_f2iz>
 800551a:	4602      	mov	r2, r0
 800551c:	4b50      	ldr	r3, [pc, #320]	; (8005660 <UI_SendSW_LoRa+0x210>)
 800551e:	fb83 1302 	smull	r1, r3, r3, r2
 8005522:	4413      	add	r3, r2
 8005524:	1159      	asrs	r1, r3, #5
 8005526:	17d3      	asrs	r3, r2, #31
 8005528:	1ac9      	subs	r1, r1, r3
 800552a:	460b      	mov	r3, r1
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    char remaining_time_str[10];
    sprintf(remaining_time_str, "%02dm %02ds", minutes, seconds);
 8005536:	f107 0008 	add.w	r0, r7, #8
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	4949      	ldr	r1, [pc, #292]	; (8005664 <UI_SendSW_LoRa+0x214>)
 8005540:	f006 ff0c 	bl	800c35c <siprintf>
    // Chuẩn bị nội dung để hiển thị
    sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	f107 0314 	add.w	r3, r7, #20
 800554a:	4947      	ldr	r1, [pc, #284]	; (8005668 <UI_SendSW_LoRa+0x218>)
 800554c:	4618      	mov	r0, r3
 800554e:	f006 ff05 	bl	800c35c <siprintf>

    // Chỉ xóa phần cần cập nhật thay vì toàn bộ màn hình
    SSD1306_GotoXY(5, 0);
 8005552:	2100      	movs	r1, #0
 8005554:	2005      	movs	r0, #5
 8005556:	f7fe fa71 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("UPDATING", &Font_7x10, 1);
 800555a:	2201      	movs	r2, #1
 800555c:	4943      	ldr	r1, [pc, #268]	; (800566c <UI_SendSW_LoRa+0x21c>)
 800555e:	4844      	ldr	r0, [pc, #272]	; (8005670 <UI_SendSW_LoRa+0x220>)
 8005560:	f7fe fb02 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(80, 0); // Vị trí bắt đầu của dấu chấm
 8005564:	2100      	movs	r1, #0
 8005566:	2050      	movs	r0, #80	; 0x50
 8005568:	f7fe fa68 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("   ", &Font_7x10, 1); // Xóa dấu chấm cũ
 800556c:	2201      	movs	r2, #1
 800556e:	493f      	ldr	r1, [pc, #252]	; (800566c <UI_SendSW_LoRa+0x21c>)
 8005570:	4840      	ldr	r0, [pc, #256]	; (8005674 <UI_SendSW_LoRa+0x224>)
 8005572:	f7fe faf9 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(80, 0); // Vị trí bắt đầu của dấu chấm
 8005576:	2100      	movs	r1, #0
 8005578:	2050      	movs	r0, #80	; 0x50
 800557a:	f7fe fa5f 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(dots, &Font_7x10, 1);
 800557e:	f107 0318 	add.w	r3, r7, #24
 8005582:	2201      	movs	r2, #1
 8005584:	4939      	ldr	r1, [pc, #228]	; (800566c <UI_SendSW_LoRa+0x21c>)
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe faee 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(5, 20);
 800558c:	2114      	movs	r1, #20
 800558e:	2005      	movs	r0, #5
 8005590:	f7fe fa54 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("TIME LEFT:", &Font_7x10, 1);
 8005594:	2201      	movs	r2, #1
 8005596:	4935      	ldr	r1, [pc, #212]	; (800566c <UI_SendSW_LoRa+0x21c>)
 8005598:	4837      	ldr	r0, [pc, #220]	; (8005678 <UI_SendSW_LoRa+0x228>)
 800559a:	f7fe fae5 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(80, 20);
 800559e:	2114      	movs	r1, #20
 80055a0:	2050      	movs	r0, #80	; 0x50
 80055a2:	f7fe fa4b 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(remaining_time_str, &Font_7x10, 1);
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	2201      	movs	r2, #1
 80055ac:	492f      	ldr	r1, [pc, #188]	; (800566c <UI_SendSW_LoRa+0x21c>)
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fada 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(5, 40);
 80055b4:	2128      	movs	r1, #40	; 0x28
 80055b6:	2005      	movs	r0, #5
 80055b8:	f7fe fa40 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("PACKET SEND:", &Font_7x10, 1);
 80055bc:	2201      	movs	r2, #1
 80055be:	492b      	ldr	r1, [pc, #172]	; (800566c <UI_SendSW_LoRa+0x21c>)
 80055c0:	482e      	ldr	r0, [pc, #184]	; (800567c <UI_SendSW_LoRa+0x22c>)
 80055c2:	f7fe fad1 	bl	8003b68 <SSD1306_Puts>
    SSD1306_GotoXY(100, 40);
 80055c6:	2128      	movs	r1, #40	; 0x28
 80055c8:	2064      	movs	r0, #100	; 0x64
 80055ca:	f7fe fa37 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(local_UpdateBuffer, &Font_7x10, 1);
 80055ce:	f107 0314 	add.w	r3, r7, #20
 80055d2:	2201      	movs	r2, #1
 80055d4:	4925      	ldr	r1, [pc, #148]	; (800566c <UI_SendSW_LoRa+0x21c>)
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fac6 	bl	8003b68 <SSD1306_Puts>
    // Tính toán phần trăm hoàn thành

    float progress = (float)Var_numPacket / TOTAL_PACKETS;
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb fb58 	bl	8000c94 <__aeabi_ui2f>
 80055e4:	4604      	mov	r4, r0
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <UI_SendSW_LoRa+0x208>)
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fb fb56 	bl	8000c9c <__aeabi_i2f>
 80055f0:	4603      	mov	r3, r0
 80055f2:	4619      	mov	r1, r3
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7fb fc59 	bl	8000eac <__aeabi_fdiv>
 80055fa:	4603      	mov	r3, r0
 80055fc:	623b      	str	r3, [r7, #32]
    int progress_bar_length = (int)(progress * PROGRESS_BAR_WIDTH);
 80055fe:	4920      	ldr	r1, [pc, #128]	; (8005680 <UI_SendSW_LoRa+0x230>)
 8005600:	6a38      	ldr	r0, [r7, #32]
 8005602:	f7fb fb9f 	bl	8000d44 <__aeabi_fmul>
 8005606:	4603      	mov	r3, r0
 8005608:	4618      	mov	r0, r3
 800560a:	f7fb fceb 	bl	8000fe4 <__aeabi_f2iz>
 800560e:	4603      	mov	r3, r0
 8005610:	61fb      	str	r3, [r7, #28]
    // Vẽ thanh tiến trình
    SSD1306_DrawRectangle(5, 50, PROGRESS_BAR_WIDTH, 10, SSD1306_COLOR_WHITE); // Vẽ khung
 8005612:	2301      	movs	r3, #1
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	230a      	movs	r3, #10
 8005618:	2264      	movs	r2, #100	; 0x64
 800561a:	2132      	movs	r1, #50	; 0x32
 800561c:	2005      	movs	r0, #5
 800561e:	f7fe fbc3 	bl	8003da8 <SSD1306_DrawRectangle>
    SSD1306_DrawFilledRectangle(5, 50, progress_bar_length, 10, SSD1306_COLOR_WHITE); // Vẽ thanh tiến trình
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	b29a      	uxth	r2, r3
 8005626:	2301      	movs	r3, #1
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	230a      	movs	r3, #10
 800562c:	2132      	movs	r1, #50	; 0x32
 800562e:	2005      	movs	r0, #5
 8005630:	f7fe fc24 	bl	8003e7c <SSD1306_DrawFilledRectangle>
    SSD1306_UpdateScreen(); // Cập nhật màn hình
 8005634:	f7fe f94e 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005638:	bf00      	nop
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bdb0      	pop	{r4, r5, r7, pc}
 8005640:	1eb851ec 	.word	0x1eb851ec
 8005644:	3fc1eb85 	.word	0x3fc1eb85
 8005648:	20001615 	.word	0x20001615
 800564c:	0800f600 	.word	0x0800f600
 8005650:	002e2e2e 	.word	0x002e2e2e
 8005654:	20001610 	.word	0x20001610
 8005658:	20001600 	.word	0x20001600
 800565c:	42700000 	.word	0x42700000
 8005660:	88888889 	.word	0x88888889
 8005664:	0800f614 	.word	0x0800f614
 8005668:	0800f5b0 	.word	0x0800f5b0
 800566c:	2000009c 	.word	0x2000009c
 8005670:	0800f620 	.word	0x0800f620
 8005674:	0800f604 	.word	0x0800f604
 8005678:	0800f62c 	.word	0x0800f62c
 800567c:	0800f638 	.word	0x0800f638
 8005680:	42c80000 	.word	0x42c80000

08005684 <UI_StartOTA>:

static void UI_StartOTA(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,10); // goto 10, 10
 8005688:	210a      	movs	r1, #10
 800568a:	2000      	movs	r0, #0
 800568c:	f7fe f9d6 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("Send Request OTA!!", &Font_7x10, 1); // print start FUOTA
 8005690:	2201      	movs	r2, #1
 8005692:	4904      	ldr	r1, [pc, #16]	; (80056a4 <UI_StartOTA+0x20>)
 8005694:	4804      	ldr	r0, [pc, #16]	; (80056a8 <UI_StartOTA+0x24>)
 8005696:	f7fe fa67 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 800569a:	f7fe f91b 	bl	80038d4 <SSD1306_UpdateScreen>
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2000009c 	.word	0x2000009c
 80056a8:	0800f648 	.word	0x0800f648

080056ac <UI_Wait_ACCEPT_OTA>:
static void UI_Wait_ACCEPT_OTA(uint16_t Var_Time_request){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
	char local_DataBuffer[4];
	sprintf(local_DataBuffer, "%d", Var_Time_request);
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	490e      	ldr	r1, [pc, #56]	; (80056f8 <UI_Wait_ACCEPT_OTA+0x4c>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f006 fe4c 	bl	800c35c <siprintf>
	SSD1306_GotoXY (0, 40);
 80056c4:	2128      	movs	r1, #40	; 0x28
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fe f9b8 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("Time Request OTA:", &Font_7x10, 1);
 80056cc:	2201      	movs	r2, #1
 80056ce:	490b      	ldr	r1, [pc, #44]	; (80056fc <UI_Wait_ACCEPT_OTA+0x50>)
 80056d0:	480b      	ldr	r0, [pc, #44]	; (8005700 <UI_Wait_ACCEPT_OTA+0x54>)
 80056d2:	f7fe fa49 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (120, 40);
 80056d6:	2128      	movs	r1, #40	; 0x28
 80056d8:	2078      	movs	r0, #120	; 0x78
 80056da:	f7fe f9af 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (local_DataBuffer, &Font_7x10, 1);
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	2201      	movs	r2, #1
 80056e4:	4905      	ldr	r1, [pc, #20]	; (80056fc <UI_Wait_ACCEPT_OTA+0x50>)
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fa3e 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80056ec:	f7fe f8f2 	bl	80038d4 <SSD1306_UpdateScreen>
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	0800f5b0 	.word	0x0800f5b0
 80056fc:	2000009c 	.word	0x2000009c
 8005700:	0800f65c 	.word	0x0800f65c

08005704 <UI_DisplayERROR>:

static void UI_DisplayERROR(uint8_t Var_UIError){
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
	char local_ErrorBuffer[4];
	sprintf(local_ErrorBuffer, "%d", Var_UIError);
 800570e:	79fa      	ldrb	r2, [r7, #7]
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4925      	ldr	r1, [pc, #148]	; (80057ac <UI_DisplayERROR+0xa8>)
 8005716:	4618      	mov	r0, r3
 8005718:	f006 fe20 	bl	800c35c <siprintf>
	SSD1306_GotoXY (50, 10);
 800571c:	210a      	movs	r1, #10
 800571e:	2032      	movs	r0, #50	; 0x32
 8005720:	f7fe f98c 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("ERROR :", &Font_7x10, 1);
 8005724:	2201      	movs	r2, #1
 8005726:	4922      	ldr	r1, [pc, #136]	; (80057b0 <UI_DisplayERROR+0xac>)
 8005728:	4822      	ldr	r0, [pc, #136]	; (80057b4 <UI_DisplayERROR+0xb0>)
 800572a:	f7fe fa1d 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (10, 30);
 800572e:	211e      	movs	r1, #30
 8005730:	200a      	movs	r0, #10
 8005732:	f7fe f983 	bl	8003a3c <SSD1306_GotoXY>
	switch (Var_UIError) {
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	2b4f      	cmp	r3, #79	; 0x4f
 800573a:	d006      	beq.n	800574a <UI_DisplayERROR+0x46>
 800573c:	2b4f      	cmp	r3, #79	; 0x4f
 800573e:	dc28      	bgt.n	8005792 <UI_DisplayERROR+0x8e>
 8005740:	2b1f      	cmp	r3, #31
 8005742:	d017      	beq.n	8005774 <UI_DisplayERROR+0x70>
 8005744:	2b2f      	cmp	r3, #47	; 0x2f
 8005746:	d006      	beq.n	8005756 <UI_DisplayERROR+0x52>
 8005748:	e023      	b.n	8005792 <UI_DisplayERROR+0x8e>
		case MCU_ERROR_CRC:
			SSD1306_Puts ("INVALID CRC", &Font_7x10, 1);
 800574a:	2201      	movs	r2, #1
 800574c:	4918      	ldr	r1, [pc, #96]	; (80057b0 <UI_DisplayERROR+0xac>)
 800574e:	481a      	ldr	r0, [pc, #104]	; (80057b8 <UI_DisplayERROR+0xb4>)
 8005750:	f7fe fa0a 	bl	8003b68 <SSD1306_Puts>
			break;
 8005754:	e023      	b.n	800579e <UI_DisplayERROR+0x9a>
		case GW_REQUEST_UPDATE_ERROR:
			SSD1306_Puts ("REQUEST UPDATE", &Font_7x10, 1);
 8005756:	2201      	movs	r2, #1
 8005758:	4915      	ldr	r1, [pc, #84]	; (80057b0 <UI_DisplayERROR+0xac>)
 800575a:	4818      	ldr	r0, [pc, #96]	; (80057bc <UI_DisplayERROR+0xb8>)
 800575c:	f7fe fa04 	bl	8003b68 <SSD1306_Puts>
			SSD1306_GotoXY (50, 40);
 8005760:	2128      	movs	r1, #40	; 0x28
 8005762:	2032      	movs	r0, #50	; 0x32
 8005764:	f7fe f96a 	bl	8003a3c <SSD1306_GotoXY>
			SSD1306_Puts ("ERROR", &Font_7x10, 1);
 8005768:	2201      	movs	r2, #1
 800576a:	4911      	ldr	r1, [pc, #68]	; (80057b0 <UI_DisplayERROR+0xac>)
 800576c:	4814      	ldr	r0, [pc, #80]	; (80057c0 <UI_DisplayERROR+0xbc>)
 800576e:	f7fe f9fb 	bl	8003b68 <SSD1306_Puts>
			break;
 8005772:	e014      	b.n	800579e <UI_DisplayERROR+0x9a>
		case GW_OUTOFREQUEST_ERROR:
			SSD1306_Puts ("REQUEST UPDATE", &Font_7x10, 1);
 8005774:	2201      	movs	r2, #1
 8005776:	490e      	ldr	r1, [pc, #56]	; (80057b0 <UI_DisplayERROR+0xac>)
 8005778:	4810      	ldr	r0, [pc, #64]	; (80057bc <UI_DisplayERROR+0xb8>)
 800577a:	f7fe f9f5 	bl	8003b68 <SSD1306_Puts>
			SSD1306_GotoXY (50, 40);
 800577e:	2128      	movs	r1, #40	; 0x28
 8005780:	2032      	movs	r0, #50	; 0x32
 8005782:	f7fe f95b 	bl	8003a3c <SSD1306_GotoXY>
			SSD1306_Puts ("FAIL", &Font_7x10, 1);
 8005786:	2201      	movs	r2, #1
 8005788:	4909      	ldr	r1, [pc, #36]	; (80057b0 <UI_DisplayERROR+0xac>)
 800578a:	480e      	ldr	r0, [pc, #56]	; (80057c4 <UI_DisplayERROR+0xc0>)
 800578c:	f7fe f9ec 	bl	8003b68 <SSD1306_Puts>
			break;
 8005790:	e005      	b.n	800579e <UI_DisplayERROR+0x9a>
		default:
			SSD1306_Puts ("UNKNOWN ERROR!!", &Font_7x10, 1);
 8005792:	2201      	movs	r2, #1
 8005794:	4906      	ldr	r1, [pc, #24]	; (80057b0 <UI_DisplayERROR+0xac>)
 8005796:	480c      	ldr	r0, [pc, #48]	; (80057c8 <UI_DisplayERROR+0xc4>)
 8005798:	f7fe f9e6 	bl	8003b68 <SSD1306_Puts>
			break;
 800579c:	bf00      	nop
	}
	SSD1306_UpdateScreen(); //display
 800579e:	f7fe f899 	bl	80038d4 <SSD1306_UpdateScreen>

}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	0800f5b0 	.word	0x0800f5b0
 80057b0:	2000009c 	.word	0x2000009c
 80057b4:	0800f670 	.word	0x0800f670
 80057b8:	0800f678 	.word	0x0800f678
 80057bc:	0800f684 	.word	0x0800f684
 80057c0:	0800f694 	.word	0x0800f694
 80057c4:	0800f69c 	.word	0x0800f69c
 80057c8:	0800f6a4 	.word	0x0800f6a4

080057cc <UI_Send_Packet_Lost>:

static void UI_Send_Packet_Lost(uint16_t Var_numPacket){
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	4913      	ldr	r1, [pc, #76]	; (800582c <UI_Send_Packet_Lost+0x60>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f006 fdbc 	bl	800c35c <siprintf>
	SSD1306_GotoXY (5, 10);
 80057e4:	210a      	movs	r1, #10
 80057e6:	2005      	movs	r0, #5
 80057e8:	f7fe f928 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 80057ec:	2201      	movs	r2, #1
 80057ee:	4910      	ldr	r1, [pc, #64]	; (8005830 <UI_Send_Packet_Lost+0x64>)
 80057f0:	4810      	ldr	r0, [pc, #64]	; (8005834 <UI_Send_Packet_Lost+0x68>)
 80057f2:	f7fe f9b9 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 80057f6:	2114      	movs	r1, #20
 80057f8:	2005      	movs	r0, #5
 80057fa:	f7fe f91f 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET RESENT:", &Font_7x10, 1);
 80057fe:	2201      	movs	r2, #1
 8005800:	490b      	ldr	r1, [pc, #44]	; (8005830 <UI_Send_Packet_Lost+0x64>)
 8005802:	480d      	ldr	r0, [pc, #52]	; (8005838 <UI_Send_Packet_Lost+0x6c>)
 8005804:	f7fe f9b0 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY (100, 30);
 8005808:	211e      	movs	r1, #30
 800580a:	2064      	movs	r0, #100	; 0x64
 800580c:	f7fe f916 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	2201      	movs	r2, #1
 8005816:	4906      	ldr	r1, [pc, #24]	; (8005830 <UI_Send_Packet_Lost+0x64>)
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe f9a5 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800581e:	f7fe f859 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	0800f5b0 	.word	0x0800f5b0
 8005830:	2000009c 	.word	0x2000009c
 8005834:	0800f6b4 	.word	0x0800f6b4
 8005838:	0800f6c0 	.word	0x0800f6c0

0800583c <UI_DisplayConfig>:


static void UI_DisplayConfig(uint8_t bw, uint8_t sf, uint8_t cr) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	71fb      	strb	r3, [r7, #7]
 8005846:	460b      	mov	r3, r1
 8005848:	71bb      	strb	r3, [r7, #6]
 800584a:	4613      	mov	r3, r2
 800584c:	717b      	strb	r3, [r7, #5]
    char buffer[30]; // Buffer để chứa chuỗi hiển thị

    // Xóa màn hình trước khi cập nhật
    SSD1306_Clear();
 800584e:	f7fe fb62 	bl	8003f16 <SSD1306_Clear>
    // Hiển thị tiêu đề
    SSD1306_GotoXY(5, 20);
 8005852:	2114      	movs	r1, #20
 8005854:	2005      	movs	r0, #5
 8005856:	f7fe f8f1 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("LoRa Config", &Font_7x10, 1);
 800585a:	2201      	movs	r2, #1
 800585c:	4924      	ldr	r1, [pc, #144]	; (80058f0 <UI_DisplayConfig+0xb4>)
 800585e:	4825      	ldr	r0, [pc, #148]	; (80058f4 <UI_DisplayConfig+0xb8>)
 8005860:	f7fe f982 	bl	8003b68 <SSD1306_Puts>
    // Hiển thị giá trị Bandwidth (BW)
    sprintf(buffer, "BW: %s kHz", SX1278_Bandwidth_UI[bw]);
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <UI_DisplayConfig+0xbc>)
 8005868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800586c:	f107 0308 	add.w	r3, r7, #8
 8005870:	4922      	ldr	r1, [pc, #136]	; (80058fc <UI_DisplayConfig+0xc0>)
 8005872:	4618      	mov	r0, r3
 8005874:	f006 fd72 	bl	800c35c <siprintf>
    SSD1306_GotoXY(5, 30);
 8005878:	211e      	movs	r1, #30
 800587a:	2005      	movs	r0, #5
 800587c:	f7fe f8de 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 8005880:	f107 0308 	add.w	r3, r7, #8
 8005884:	2201      	movs	r2, #1
 8005886:	491a      	ldr	r1, [pc, #104]	; (80058f0 <UI_DisplayConfig+0xb4>)
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe f96d 	bl	8003b68 <SSD1306_Puts>
    // Hiển thị giá trị Spread Factor (SF)
    sprintf(buffer, "SF: %u", SX1278_SpreadFactor_UI[sf]);
 800588e:	79bb      	ldrb	r3, [r7, #6]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <UI_DisplayConfig+0xc4>)
 8005892:	5cd3      	ldrb	r3, [r2, r3]
 8005894:	461a      	mov	r2, r3
 8005896:	f107 0308 	add.w	r3, r7, #8
 800589a:	491a      	ldr	r1, [pc, #104]	; (8005904 <UI_DisplayConfig+0xc8>)
 800589c:	4618      	mov	r0, r3
 800589e:	f006 fd5d 	bl	800c35c <siprintf>
    SSD1306_GotoXY(5, 40);
 80058a2:	2128      	movs	r1, #40	; 0x28
 80058a4:	2005      	movs	r0, #5
 80058a6:	f7fe f8c9 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	2201      	movs	r2, #1
 80058b0:	490f      	ldr	r1, [pc, #60]	; (80058f0 <UI_DisplayConfig+0xb4>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe f958 	bl	8003b68 <SSD1306_Puts>

    // Hiển thị giá trị Coding Rate (CR)
    sprintf(buffer, "CR: %s", SX1278_CodingRate_UI[cr]);
 80058b8:	797b      	ldrb	r3, [r7, #5]
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <UI_DisplayConfig+0xcc>)
 80058bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	4911      	ldr	r1, [pc, #68]	; (800590c <UI_DisplayConfig+0xd0>)
 80058c6:	4618      	mov	r0, r3
 80058c8:	f006 fd48 	bl	800c35c <siprintf>
    SSD1306_GotoXY(5, 50);
 80058cc:	2132      	movs	r1, #50	; 0x32
 80058ce:	2005      	movs	r0, #5
 80058d0:	f7fe f8b4 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	2201      	movs	r2, #1
 80058da:	4905      	ldr	r1, [pc, #20]	; (80058f0 <UI_DisplayConfig+0xb4>)
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe f943 	bl	8003b68 <SSD1306_Puts>

    // Cập nhật màn hình
    SSD1306_UpdateScreen();
 80058e2:	f7fd fff7 	bl	80038d4 <SSD1306_UpdateScreen>
}
 80058e6:	bf00      	nop
 80058e8:	3728      	adds	r7, #40	; 0x28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000009c 	.word	0x2000009c
 80058f4:	0800f6d0 	.word	0x0800f6d0
 80058f8:	20000064 	.word	0x20000064
 80058fc:	0800f6dc 	.word	0x0800f6dc
 8005900:	0800f74c 	.word	0x0800f74c
 8005904:	0800f6e8 	.word	0x0800f6e8
 8005908:	2000008c 	.word	0x2000008c
 800590c:	0800f6f0 	.word	0x0800f6f0

08005910 <UI_Wait_ForConnect_WiFi>:

static void UI_Wait_ForConnect_WiFi(){
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
	// Variable to track the dot effect
	static uint8_t dot_count = 0;
	char dots[4];
	switch (dot_count) {
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d01f      	beq.n	800595e <UI_Wait_ForConnect_WiFi+0x4e>
 800591e:	2b02      	cmp	r3, #2
 8005920:	dc23      	bgt.n	800596a <UI_Wait_ForConnect_WiFi+0x5a>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <UI_Wait_ForConnect_WiFi+0x1c>
 8005926:	2b01      	cmp	r3, #1
 8005928:	d00a      	beq.n	8005940 <UI_Wait_ForConnect_WiFi+0x30>
 800592a:	e01e      	b.n	800596a <UI_Wait_ForConnect_WiFi+0x5a>
	case 0:
		strcpy(dots, ".");
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	222e      	movs	r2, #46	; 0x2e
 8005930:	801a      	strh	r2, [r3, #0]
		dot_count++;
 8005932:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	b2da      	uxtb	r2, r3
 800593a:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 800593c:	701a      	strb	r2, [r3, #0]
		break;
 800593e:	e017      	b.n	8005970 <UI_Wait_ForConnect_WiFi+0x60>
	case 1:
		strcpy(dots, "..");
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <UI_Wait_ForConnect_WiFi+0xcc>)
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	4611      	mov	r1, r2
 8005948:	8019      	strh	r1, [r3, #0]
 800594a:	3302      	adds	r3, #2
 800594c:	0c12      	lsrs	r2, r2, #16
 800594e:	701a      	strb	r2, [r3, #0]
		dot_count++;
 8005950:	4b21      	ldr	r3, [pc, #132]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 800595a:	701a      	strb	r2, [r3, #0]
		break;
 800595c:	e008      	b.n	8005970 <UI_Wait_ForConnect_WiFi+0x60>
	case 2:
		strcpy(dots, "...");
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <UI_Wait_ForConnect_WiFi+0xd0>)
 8005960:	607b      	str	r3, [r7, #4]
		dot_count = 0; // Reset after reaching "..."
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <UI_Wait_ForConnect_WiFi+0xc8>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
		break;
 8005968:	e002      	b.n	8005970 <UI_Wait_ForConnect_WiFi+0x60>
	default:
		strcpy(dots, ""); // Default case (should not occur)
 800596a:	2300      	movs	r3, #0
 800596c:	713b      	strb	r3, [r7, #4]
		break;
 800596e:	bf00      	nop
	}
	 // Clear only the necessary area of the screen instead of the whole screen
	SSD1306_GotoXY(90, 30);
 8005970:	211e      	movs	r1, #30
 8005972:	205a      	movs	r0, #90	; 0x5a
 8005974:	f7fe f862 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("   ", &Font_7x10, 1); // Clear old dots
 8005978:	2201      	movs	r2, #1
 800597a:	491a      	ldr	r1, [pc, #104]	; (80059e4 <UI_Wait_ForConnect_WiFi+0xd4>)
 800597c:	481a      	ldr	r0, [pc, #104]	; (80059e8 <UI_Wait_ForConnect_WiFi+0xd8>)
 800597e:	f7fe f8f3 	bl	8003b68 <SSD1306_Puts>
	// Display the static message
    /* Set Background color */
    SSD1306_GotoXY(5, 0);
 8005982:	2100      	movs	r1, #0
 8005984:	2005      	movs	r0, #5
 8005986:	f7fe f859 	bl	8003a3c <SSD1306_GotoXY>
    SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 800598a:	2201      	movs	r2, #1
 800598c:	4917      	ldr	r1, [pc, #92]	; (80059ec <UI_Wait_ForConnect_WiFi+0xdc>)
 800598e:	4818      	ldr	r0, [pc, #96]	; (80059f0 <UI_Wait_ForConnect_WiFi+0xe0>)
 8005990:	f7fe f8ea 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY(5, 20);
 8005994:	2114      	movs	r1, #20
 8005996:	2005      	movs	r0, #5
 8005998:	f7fe f850 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("Wait for", &Font_7x10, 1);
 800599c:	2201      	movs	r2, #1
 800599e:	4911      	ldr	r1, [pc, #68]	; (80059e4 <UI_Wait_ForConnect_WiFi+0xd4>)
 80059a0:	4814      	ldr	r0, [pc, #80]	; (80059f4 <UI_Wait_ForConnect_WiFi+0xe4>)
 80059a2:	f7fe f8e1 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY(5, 30);
 80059a6:	211e      	movs	r1, #30
 80059a8:	2005      	movs	r0, #5
 80059aa:	f7fe f847 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("Connect WiFi", &Font_7x10, 1);
 80059ae:	2201      	movs	r2, #1
 80059b0:	490c      	ldr	r1, [pc, #48]	; (80059e4 <UI_Wait_ForConnect_WiFi+0xd4>)
 80059b2:	4811      	ldr	r0, [pc, #68]	; (80059f8 <UI_Wait_ForConnect_WiFi+0xe8>)
 80059b4:	f7fe f8d8 	bl	8003b68 <SSD1306_Puts>
	// Display the dots
	SSD1306_GotoXY(90, 30);
 80059b8:	211e      	movs	r1, #30
 80059ba:	205a      	movs	r0, #90	; 0x5a
 80059bc:	f7fe f83e 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts(dots, &Font_7x10, 1);
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	2201      	movs	r2, #1
 80059c4:	4907      	ldr	r1, [pc, #28]	; (80059e4 <UI_Wait_ForConnect_WiFi+0xd4>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe f8ce 	bl	8003b68 <SSD1306_Puts>
	// Update the screen
	SSD1306_UpdateScreen();
 80059cc:	f7fd ff82 	bl	80038d4 <SSD1306_UpdateScreen>
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20001616 	.word	0x20001616
 80059dc:	0800f600 	.word	0x0800f600
 80059e0:	002e2e2e 	.word	0x002e2e2e
 80059e4:	2000009c 	.word	0x2000009c
 80059e8:	0800f604 	.word	0x0800f604
 80059ec:	200000a4 	.word	0x200000a4
 80059f0:	0800f538 	.word	0x0800f538
 80059f4:	0800f6f8 	.word	0x0800f6f8
 80059f8:	0800f704 	.word	0x0800f704

080059fc <UI_WiFi_Connected>:
static void UI_WiFi_Connected(){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
	// Variable to track the dot effect
	SSD1306_GotoXY(5, 0);
 8005a00:	2100      	movs	r1, #0
 8005a02:	2005      	movs	r0, #5
 8005a04:	f7fe f81a 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("GATEWAY", &Font_11x18, 1); // Print start FUOTA
 8005a08:	2201      	movs	r2, #1
 8005a0a:	490d      	ldr	r1, [pc, #52]	; (8005a40 <UI_WiFi_Connected+0x44>)
 8005a0c:	480d      	ldr	r0, [pc, #52]	; (8005a44 <UI_WiFi_Connected+0x48>)
 8005a0e:	f7fe f8ab 	bl	8003b68 <SSD1306_Puts>
	// Display the static message
	SSD1306_GotoXY(5, 20);
 8005a12:	2114      	movs	r1, #20
 8005a14:	2005      	movs	r0, #5
 8005a16:	f7fe f811 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("WIFI ", &Font_7x10, 1);
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	490a      	ldr	r1, [pc, #40]	; (8005a48 <UI_WiFi_Connected+0x4c>)
 8005a1e:	480b      	ldr	r0, [pc, #44]	; (8005a4c <UI_WiFi_Connected+0x50>)
 8005a20:	f7fe f8a2 	bl	8003b68 <SSD1306_Puts>
	SSD1306_GotoXY(5, 30);
 8005a24:	211e      	movs	r1, #30
 8005a26:	2005      	movs	r0, #5
 8005a28:	f7fe f808 	bl	8003a3c <SSD1306_GotoXY>
	SSD1306_Puts("CONNECTED !!", &Font_7x10, 1);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4906      	ldr	r1, [pc, #24]	; (8005a48 <UI_WiFi_Connected+0x4c>)
 8005a30:	4807      	ldr	r0, [pc, #28]	; (8005a50 <UI_WiFi_Connected+0x54>)
 8005a32:	f7fe f899 	bl	8003b68 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8005a36:	f7fd ff4d 	bl	80038d4 <SSD1306_UpdateScreen>
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	200000a4 	.word	0x200000a4
 8005a44:	0800f538 	.word	0x0800f538
 8005a48:	2000009c 	.word	0x2000009c
 8005a4c:	0800f714 	.word	0x0800f714
 8005a50:	0800f71c 	.word	0x0800f71c

08005a54 <UI_CalculateLoRaDataRate>:
float UI_CalculateLoRaDataRate(uint8_t sf, uint32_t bw, uint8_t cr) {
 8005a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	6039      	str	r1, [r7, #0]
 8005a60:	71fb      	strb	r3, [r7, #7]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71bb      	strb	r3, [r7, #6]
	return sf * ((4.0 / (4.0 + cr)) / (pow(2.0, sf) / bw)) * 1000.0;
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fa fccb 	bl	8000404 <__aeabi_i2d>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	460d      	mov	r5, r1
 8005a72:	79bb      	ldrb	r3, [r7, #6]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa fcc5 	bl	8000404 <__aeabi_i2d>
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <UI_CalculateLoRaDataRate+0xb8>)
 8005a80:	f7fa fb74 	bl	800016c <__adddf3>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	491f      	ldr	r1, [pc, #124]	; (8005b0c <UI_CalculateLoRaDataRate+0xb8>)
 8005a8e:	f7fa fe4d 	bl	800072c <__aeabi_ddiv>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4692      	mov	sl, r2
 8005a98:	469b      	mov	fp, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fa fca1 	bl	80003e4 <__aeabi_ui2d>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	f04f 0000 	mov.w	r0, #0
 8005aaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005aae:	f008 fda3 	bl	800e5f8 <pow>
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	4689      	mov	r9, r1
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f7fa fc94 	bl	80003e4 <__aeabi_ui2d>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fa fe32 	bl	800072c <__aeabi_ddiv>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4650      	mov	r0, sl
 8005ace:	4659      	mov	r1, fp
 8005ad0:	f7fa fe2c 	bl	800072c <__aeabi_ddiv>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7fa fcfc 	bl	80004d8 <__aeabi_dmul>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <UI_CalculateLoRaDataRate+0xbc>)
 8005aee:	f7fa fcf3 	bl	80004d8 <__aeabi_dmul>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fa ffc5 	bl	8000a88 <__aeabi_d2f>
 8005afe:	4603      	mov	r3, r0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40100000 	.word	0x40100000
 8005b10:	408f4000 	.word	0x408f4000

08005b14 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e030      	b.n	8005b86 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	440b      	add	r3, r1
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	441a      	add	r2, r3
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3301      	adds	r3, #1
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	440b      	add	r3, r1
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	3302      	adds	r3, #2
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	441a      	add	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	3302      	adds	r3, #2
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	440b      	add	r3, r1
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	3303      	adds	r3, #3
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	441a      	add	r2, r3
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	3303      	adds	r3, #3
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	440b      	add	r3, r1
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d9cb      	bls.n	8005b24 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e081      	b.n	8005c96 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d125      	bne.n	8005c1e <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8005bd6:	7b7b      	ldrb	r3, [r7, #13]
 8005bd8:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8005be6:	7b3b      	ldrb	r3, [r7, #12]
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b30      	ldr	r3, [pc, #192]	; (8005cac <KeyExpansion+0x198>)
 8005bec:	5c9b      	ldrb	r3, [r3, r2]
 8005bee:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8005bf0:	7b7b      	ldrb	r3, [r7, #13]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <KeyExpansion+0x198>)
 8005bf6:	5c9b      	ldrb	r3, [r3, r2]
 8005bf8:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <KeyExpansion+0x198>)
 8005c00:	5c9b      	ldrb	r3, [r3, r2]
 8005c02:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b28      	ldr	r3, [pc, #160]	; (8005cac <KeyExpansion+0x198>)
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8005c0e:	7b3a      	ldrb	r2, [r7, #12]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	089b      	lsrs	r3, r3, #2
 8005c14:	4926      	ldr	r1, [pc, #152]	; (8005cb0 <KeyExpansion+0x19c>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	4053      	eors	r3, r2
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3b04      	subs	r3, #4
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4413      	add	r3, r2
 8005c32:	7819      	ldrb	r1, [r3, #0]
 8005c34:	7b3a      	ldrb	r2, [r7, #12]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4403      	add	r3, r0
 8005c3c:	404a      	eors	r2, r1
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	3301      	adds	r3, #1
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	7819      	ldrb	r1, [r3, #0]
 8005c4c:	7b7a      	ldrb	r2, [r7, #13]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3301      	adds	r3, #1
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4403      	add	r3, r0
 8005c56:	404a      	eors	r2, r1
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3302      	adds	r3, #2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	7819      	ldrb	r1, [r3, #0]
 8005c66:	7bba      	ldrb	r2, [r7, #14]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4403      	add	r3, r0
 8005c70:	404a      	eors	r2, r1
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	7819      	ldrb	r1, [r3, #0]
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3303      	adds	r3, #3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4403      	add	r3, r0
 8005c8a:	404a      	eors	r2, r1
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b2b      	cmp	r3, #43	; 0x2b
 8005c9a:	f67f af7a 	bls.w	8005b92 <KeyExpansion+0x7e>
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	3724      	adds	r7, #36	; 0x24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	0800f794 	.word	0x0800f794
 8005cb0:	0800f994 	.word	0x0800f994

08005cb4 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff25 	bl	8005b14 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	33b0      	adds	r3, #176	; 0xb0
 8005cce:	2210      	movs	r2, #16
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f006 fc33 	bl	800c53e <memcpy>
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
 8005cf2:	e027      	b.n	8005d44 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75bb      	strb	r3, [r7, #22]
 8005cf8:	e01e      	b.n	8005d38 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8005cfa:	7dfa      	ldrb	r2, [r7, #23]
 8005cfc:	7dbb      	ldrb	r3, [r7, #22]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	0092      	lsls	r2, r2, #2
 8005d02:	440a      	add	r2, r1
 8005d04:	4413      	add	r3, r2
 8005d06:	7818      	ldrb	r0, [r3, #0]
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	009a      	lsls	r2, r3, #2
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	4413      	add	r3, r2
 8005d10:	009a      	lsls	r2, r3, #2
 8005d12:	7dbb      	ldrb	r3, [r7, #22]
 8005d14:	4413      	add	r3, r2
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	7819      	ldrb	r1, [r3, #0]
 8005d1e:	7dfa      	ldrb	r2, [r7, #23]
 8005d20:	7dbb      	ldrb	r3, [r7, #22]
 8005d22:	4041      	eors	r1, r0
 8005d24:	b2c8      	uxtb	r0, r1
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	0092      	lsls	r2, r2, #2
 8005d2a:	440a      	add	r2, r1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4602      	mov	r2, r0
 8005d30:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8005d32:	7dbb      	ldrb	r3, [r7, #22]
 8005d34:	3301      	adds	r3, #1
 8005d36:	75bb      	strb	r3, [r7, #22]
 8005d38:	7dbb      	ldrb	r3, [r7, #22]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d9dd      	bls.n	8005cfa <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	3301      	adds	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d9d4      	bls.n	8005cf4 <AddRoundKey+0x14>
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
	...

08005d58 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e01d      	b.n	8005da2 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8005d66:	2300      	movs	r3, #0
 8005d68:	73bb      	strb	r3, [r7, #14]
 8005d6a:	e014      	b.n	8005d96 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8005d6c:	7bba      	ldrb	r2, [r7, #14]
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	0092      	lsls	r2, r2, #2
 8005d74:	440a      	add	r2, r1
 8005d76:	4413      	add	r3, r2
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	7bba      	ldrb	r2, [r7, #14]
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	490c      	ldr	r1, [pc, #48]	; (8005db4 <SubBytes+0x5c>)
 8005d82:	5c08      	ldrb	r0, [r1, r0]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	0092      	lsls	r2, r2, #2
 8005d88:	440a      	add	r2, r1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	3301      	adds	r3, #1
 8005d94:	73bb      	strb	r3, [r7, #14]
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d9e7      	bls.n	8005d6c <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d9de      	bls.n	8005d66 <SubBytes+0xe>
    }
  }
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr
 8005db4:	0800f794 	.word	0x0800f794

08005db8 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	795a      	ldrb	r2, [r3, #5]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7a5a      	ldrb	r2, [r3, #9]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7b5a      	ldrb	r2, [r3, #13]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	789b      	ldrb	r3, [r3, #2]
 8005de8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7a9a      	ldrb	r2, [r3, #10]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	799b      	ldrb	r3, [r3, #6]
 8005dfc:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7b9a      	ldrb	r2, [r3, #14]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7bfa      	ldrb	r2, [r7, #15]
 8005e0a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7bda      	ldrb	r2, [r3, #15]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	7ada      	ldrb	r2, [r3, #11]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	79da      	ldrb	r2, [r3, #7]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	71da      	strb	r2, [r3, #7]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <xtime>:

static uint8_t xtime(uint8_t x)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	4603      	mov	r3, r0
 8005e42:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	0049      	lsls	r1, r1, #1
 8005e54:	440b      	add	r3, r1
 8005e56:	4619      	mov	r1, r3
 8005e58:	00c8      	lsls	r0, r1, #3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	440b      	add	r3, r1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	4053      	eors	r3, r2
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	b2db      	uxtb	r3, r3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
 8005e80:	e0a4      	b.n	8005fcc <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8005e82:	7bfa      	ldrb	r2, [r7, #15]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8005e8a:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	4053      	eors	r3, r2
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	789b      	ldrb	r3, [r3, #2]
 8005eac:	4053      	eors	r3, r2
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	4053      	eors	r3, r2
 8005ebc:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	4053      	eors	r3, r2
 8005ed2:	733b      	strb	r3, [r7, #12]
 8005ed4:	7b3b      	ldrb	r3, [r7, #12]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ffaf 	bl	8005e3a <xtime>
 8005edc:	4603      	mov	r3, r0
 8005ede:	733b      	strb	r3, [r7, #12]
 8005ee0:	7bfa      	ldrb	r2, [r7, #15]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8005ee8:	7b3a      	ldrb	r2, [r7, #12]
 8005eea:	7b7b      	ldrb	r3, [r7, #13]
 8005eec:	4053      	eors	r3, r2
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	7bfa      	ldrb	r2, [r7, #15]
 8005ef2:	404b      	eors	r3, r1
 8005ef4:	b2d9      	uxtb	r1, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	785a      	ldrb	r2, [r3, #1]
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	789b      	ldrb	r3, [r3, #2]
 8005f10:	4053      	eors	r3, r2
 8005f12:	733b      	strb	r3, [r7, #12]
 8005f14:	7b3b      	ldrb	r3, [r7, #12]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff ff8f 	bl	8005e3a <xtime>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	733b      	strb	r3, [r7, #12]
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	7859      	ldrb	r1, [r3, #1]
 8005f2a:	7b3a      	ldrb	r2, [r7, #12]
 8005f2c:	7b7b      	ldrb	r3, [r7, #13]
 8005f2e:	4053      	eors	r3, r2
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	404a      	eors	r2, r1
 8005f36:	b2d1      	uxtb	r1, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	460a      	mov	r2, r1
 8005f40:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	789a      	ldrb	r2, [r3, #2]
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	4053      	eors	r3, r2
 8005f58:	733b      	strb	r3, [r7, #12]
 8005f5a:	7b3b      	ldrb	r3, [r7, #12]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ff6c 	bl	8005e3a <xtime>
 8005f62:	4603      	mov	r3, r0
 8005f64:	733b      	strb	r3, [r7, #12]
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7899      	ldrb	r1, [r3, #2]
 8005f70:	7b3a      	ldrb	r2, [r7, #12]
 8005f72:	7b7b      	ldrb	r3, [r7, #13]
 8005f74:	4053      	eors	r3, r2
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	404a      	eors	r2, r1
 8005f7c:	b2d1      	uxtb	r1, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	460a      	mov	r2, r1
 8005f86:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	78da      	ldrb	r2, [r3, #3]
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	4053      	eors	r3, r2
 8005f96:	733b      	strb	r3, [r7, #12]
 8005f98:	7b3b      	ldrb	r3, [r7, #12]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff ff4d 	bl	8005e3a <xtime>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	733b      	strb	r3, [r7, #12]
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	78d9      	ldrb	r1, [r3, #3]
 8005fae:	7b3a      	ldrb	r2, [r7, #12]
 8005fb0:	7b7b      	ldrb	r3, [r7, #13]
 8005fb2:	4053      	eors	r3, r2
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	404a      	eors	r2, r1
 8005fba:	b2d1      	uxtb	r1, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f67f af57 	bls.w	8005e82 <MixColumns+0xe>
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8005fde:	b5b0      	push	{r4, r5, r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e33b      	b.n	8006664 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8005ff4:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	789b      	ldrb	r3, [r3, #2]
 800600c:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	78db      	ldrb	r3, [r3, #3]
 8006018:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ff0c 	bl	8005e3a <xtime>
 8006022:	4603      	mov	r3, r0
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ff08 	bl	8005e3a <xtime>
 800602a:	4603      	mov	r3, r0
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff04 	bl	8005e3a <xtime>
 8006032:	4603      	mov	r3, r0
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff00 	bl	8005e3a <xtime>
 800603a:	7abb      	ldrb	r3, [r7, #10]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fefc 	bl	8005e3a <xtime>
 8006042:	4603      	mov	r3, r0
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fef8 	bl	8005e3a <xtime>
 800604a:	7abb      	ldrb	r3, [r7, #10]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fef4 	bl	8005e3a <xtime>
 8006052:	4603      	mov	r3, r0
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fef0 	bl	8005e3a <xtime>
 800605a:	4603      	mov	r3, r0
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff feec 	bl	8005e3a <xtime>
 8006062:	4603      	mov	r3, r0
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fee8 	bl	8005e3a <xtime>
 800606a:	7a7b      	ldrb	r3, [r7, #9]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fee4 	bl	8005e3a <xtime>
 8006072:	7a7b      	ldrb	r3, [r7, #9]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fee0 	bl	8005e3a <xtime>
 800607a:	4603      	mov	r3, r0
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fedc 	bl	8005e3a <xtime>
 8006082:	4603      	mov	r3, r0
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fed8 	bl	8005e3a <xtime>
 800608a:	4603      	mov	r3, r0
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fed4 	bl	8005e3a <xtime>
 8006092:	7a3b      	ldrb	r3, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fed0 	bl	8005e3a <xtime>
 800609a:	7a3b      	ldrb	r3, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fecc 	bl	8005e3a <xtime>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fec8 	bl	8005e3a <xtime>
 80060aa:	7a3b      	ldrb	r3, [r7, #8]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fec4 	bl	8005e3a <xtime>
 80060b2:	4603      	mov	r3, r0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fec0 	bl	8005e3a <xtime>
 80060ba:	4603      	mov	r3, r0
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff febc 	bl	8005e3a <xtime>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff feb8 	bl	8005e3a <xtime>
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff feb4 	bl	8005e3a <xtime>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461c      	mov	r4, r3
 80060d6:	7afb      	ldrb	r3, [r7, #11]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff feae 	bl	8005e3a <xtime>
 80060de:	4603      	mov	r3, r0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff feaa 	bl	8005e3a <xtime>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4063      	eors	r3, r4
 80060ea:	b2dc      	uxtb	r4, r3
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fea3 	bl	8005e3a <xtime>
 80060f4:	4603      	mov	r3, r0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fe9f 	bl	8005e3a <xtime>
 80060fc:	4603      	mov	r3, r0
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fe9b 	bl	8005e3a <xtime>
 8006104:	4603      	mov	r3, r0
 8006106:	4063      	eors	r3, r4
 8006108:	b2dc      	uxtb	r4, r3
 800610a:	7abb      	ldrb	r3, [r7, #10]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fe94 	bl	8005e3a <xtime>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	7abb      	ldrb	r3, [r7, #10]
 8006118:	4053      	eors	r3, r2
 800611a:	b2dd      	uxtb	r5, r3
 800611c:	7abb      	ldrb	r3, [r7, #10]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fe8b 	bl	8005e3a <xtime>
 8006124:	4603      	mov	r3, r0
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fe87 	bl	8005e3a <xtime>
 800612c:	4603      	mov	r3, r0
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fe83 	bl	8005e3a <xtime>
 8006134:	4603      	mov	r3, r0
 8006136:	406b      	eors	r3, r5
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4063      	eors	r3, r4
 800613c:	b2dc      	uxtb	r4, r3
 800613e:	7a7b      	ldrb	r3, [r7, #9]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fe7a 	bl	8005e3a <xtime>
 8006146:	4603      	mov	r3, r0
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fe76 	bl	8005e3a <xtime>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	7a7b      	ldrb	r3, [r7, #9]
 8006154:	4053      	eors	r3, r2
 8006156:	b2dd      	uxtb	r5, r3
 8006158:	7a7b      	ldrb	r3, [r7, #9]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fe6d 	bl	8005e3a <xtime>
 8006160:	4603      	mov	r3, r0
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fe69 	bl	8005e3a <xtime>
 8006168:	4603      	mov	r3, r0
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fe65 	bl	8005e3a <xtime>
 8006170:	4603      	mov	r3, r0
 8006172:	406b      	eors	r3, r5
 8006174:	b2db      	uxtb	r3, r3
 8006176:	4063      	eors	r3, r4
 8006178:	b2dc      	uxtb	r4, r3
 800617a:	7a3b      	ldrb	r3, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fe5c 	bl	8005e3a <xtime>
 8006182:	4603      	mov	r3, r0
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe58 	bl	8005e3a <xtime>
 800618a:	4603      	mov	r3, r0
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fe54 	bl	8005e3a <xtime>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	7a3b      	ldrb	r3, [r7, #8]
 8006198:	4053      	eors	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4063      	eors	r3, r4
 800619e:	b2d9      	uxtb	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fe45 	bl	8005e3a <xtime>
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fe41 	bl	8005e3a <xtime>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fe3d 	bl	8005e3a <xtime>
 80061c0:	7afb      	ldrb	r3, [r7, #11]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fe39 	bl	8005e3a <xtime>
 80061c8:	4603      	mov	r3, r0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fe35 	bl	8005e3a <xtime>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fe31 	bl	8005e3a <xtime>
 80061d8:	4603      	mov	r3, r0
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fe2d 	bl	8005e3a <xtime>
 80061e0:	7abb      	ldrb	r3, [r7, #10]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fe29 	bl	8005e3a <xtime>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fe25 	bl	8005e3a <xtime>
 80061f0:	4603      	mov	r3, r0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fe21 	bl	8005e3a <xtime>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fe1d 	bl	8005e3a <xtime>
 8006200:	7a7b      	ldrb	r3, [r7, #9]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe19 	bl	8005e3a <xtime>
 8006208:	4603      	mov	r3, r0
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fe15 	bl	8005e3a <xtime>
 8006210:	7a7b      	ldrb	r3, [r7, #9]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fe11 	bl	8005e3a <xtime>
 8006218:	4603      	mov	r3, r0
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fe0d 	bl	8005e3a <xtime>
 8006220:	4603      	mov	r3, r0
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fe09 	bl	8005e3a <xtime>
 8006228:	4603      	mov	r3, r0
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fe05 	bl	8005e3a <xtime>
 8006230:	7a3b      	ldrb	r3, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fe01 	bl	8005e3a <xtime>
 8006238:	7a3b      	ldrb	r3, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fdfd 	bl	8005e3a <xtime>
 8006240:	4603      	mov	r3, r0
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fdf9 	bl	8005e3a <xtime>
 8006248:	4603      	mov	r3, r0
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fdf5 	bl	8005e3a <xtime>
 8006250:	4603      	mov	r3, r0
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fdf1 	bl	8005e3a <xtime>
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fded 	bl	8005e3a <xtime>
 8006260:	4603      	mov	r3, r0
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fde9 	bl	8005e3a <xtime>
 8006268:	4603      	mov	r3, r0
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fde5 	bl	8005e3a <xtime>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	4053      	eors	r3, r2
 8006278:	b2dc      	uxtb	r4, r3
 800627a:	7abb      	ldrb	r3, [r7, #10]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fddc 	bl	8005e3a <xtime>
 8006282:	4603      	mov	r3, r0
 8006284:	461d      	mov	r5, r3
 8006286:	7abb      	ldrb	r3, [r7, #10]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fdd6 	bl	8005e3a <xtime>
 800628e:	4603      	mov	r3, r0
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fdd2 	bl	8005e3a <xtime>
 8006296:	4603      	mov	r3, r0
 8006298:	406b      	eors	r3, r5
 800629a:	b2dd      	uxtb	r5, r3
 800629c:	7abb      	ldrb	r3, [r7, #10]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fdcb 	bl	8005e3a <xtime>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fdc7 	bl	8005e3a <xtime>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fdc3 	bl	8005e3a <xtime>
 80062b4:	4603      	mov	r3, r0
 80062b6:	406b      	eors	r3, r5
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	4063      	eors	r3, r4
 80062bc:	b2dc      	uxtb	r4, r3
 80062be:	7a7b      	ldrb	r3, [r7, #9]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fdba 	bl	8005e3a <xtime>
 80062c6:	4603      	mov	r3, r0
 80062c8:	461a      	mov	r2, r3
 80062ca:	7a7b      	ldrb	r3, [r7, #9]
 80062cc:	4053      	eors	r3, r2
 80062ce:	b2dd      	uxtb	r5, r3
 80062d0:	7a7b      	ldrb	r3, [r7, #9]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fdb1 	bl	8005e3a <xtime>
 80062d8:	4603      	mov	r3, r0
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fdad 	bl	8005e3a <xtime>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fda9 	bl	8005e3a <xtime>
 80062e8:	4603      	mov	r3, r0
 80062ea:	406b      	eors	r3, r5
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4063      	eors	r3, r4
 80062f0:	b2dc      	uxtb	r4, r3
 80062f2:	7a3b      	ldrb	r3, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fda0 	bl	8005e3a <xtime>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fd9c 	bl	8005e3a <xtime>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	7a3b      	ldrb	r3, [r7, #8]
 8006308:	4053      	eors	r3, r2
 800630a:	b2dd      	uxtb	r5, r3
 800630c:	7a3b      	ldrb	r3, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fd93 	bl	8005e3a <xtime>
 8006314:	4603      	mov	r3, r0
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fd8f 	bl	8005e3a <xtime>
 800631c:	4603      	mov	r3, r0
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fd8b 	bl	8005e3a <xtime>
 8006324:	4603      	mov	r3, r0
 8006326:	406b      	eors	r3, r5
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4063      	eors	r3, r4
 800632c:	b2d9      	uxtb	r1, r3
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	460a      	mov	r2, r1
 8006338:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fd7c 	bl	8005e3a <xtime>
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fd78 	bl	8005e3a <xtime>
 800634a:	4603      	mov	r3, r0
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fd74 	bl	8005e3a <xtime>
 8006352:	4603      	mov	r3, r0
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fd70 	bl	8005e3a <xtime>
 800635a:	4603      	mov	r3, r0
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fd6c 	bl	8005e3a <xtime>
 8006362:	7abb      	ldrb	r3, [r7, #10]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fd68 	bl	8005e3a <xtime>
 800636a:	7abb      	ldrb	r3, [r7, #10]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fd64 	bl	8005e3a <xtime>
 8006372:	4603      	mov	r3, r0
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fd60 	bl	8005e3a <xtime>
 800637a:	7abb      	ldrb	r3, [r7, #10]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fd5c 	bl	8005e3a <xtime>
 8006382:	4603      	mov	r3, r0
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fd58 	bl	8005e3a <xtime>
 800638a:	4603      	mov	r3, r0
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fd54 	bl	8005e3a <xtime>
 8006392:	4603      	mov	r3, r0
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fd50 	bl	8005e3a <xtime>
 800639a:	7a7b      	ldrb	r3, [r7, #9]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fd4c 	bl	8005e3a <xtime>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fd48 	bl	8005e3a <xtime>
 80063aa:	4603      	mov	r3, r0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fd44 	bl	8005e3a <xtime>
 80063b2:	4603      	mov	r3, r0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd40 	bl	8005e3a <xtime>
 80063ba:	7a3b      	ldrb	r3, [r7, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fd3c 	bl	8005e3a <xtime>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fd38 	bl	8005e3a <xtime>
 80063ca:	7a3b      	ldrb	r3, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fd34 	bl	8005e3a <xtime>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fd30 	bl	8005e3a <xtime>
 80063da:	4603      	mov	r3, r0
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fd2c 	bl	8005e3a <xtime>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fd28 	bl	8005e3a <xtime>
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fd24 	bl	8005e3a <xtime>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fd20 	bl	8005e3a <xtime>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	4053      	eors	r3, r2
 8006402:	b2dc      	uxtb	r4, r3
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fd17 	bl	8005e3a <xtime>
 800640c:	4603      	mov	r3, r0
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fd13 	bl	8005e3a <xtime>
 8006414:	4603      	mov	r3, r0
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fd0f 	bl	8005e3a <xtime>
 800641c:	4603      	mov	r3, r0
 800641e:	4063      	eors	r3, r4
 8006420:	b2dc      	uxtb	r4, r3
 8006422:	7abb      	ldrb	r3, [r7, #10]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fd08 	bl	8005e3a <xtime>
 800642a:	4603      	mov	r3, r0
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fd04 	bl	8005e3a <xtime>
 8006432:	4603      	mov	r3, r0
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fd00 	bl	8005e3a <xtime>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	7abb      	ldrb	r3, [r7, #10]
 8006440:	4053      	eors	r3, r2
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4063      	eors	r3, r4
 8006446:	b2dc      	uxtb	r4, r3
 8006448:	7a7b      	ldrb	r3, [r7, #9]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fcf5 	bl	8005e3a <xtime>
 8006450:	4603      	mov	r3, r0
 8006452:	461d      	mov	r5, r3
 8006454:	7a7b      	ldrb	r3, [r7, #9]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fcef 	bl	8005e3a <xtime>
 800645c:	4603      	mov	r3, r0
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fceb 	bl	8005e3a <xtime>
 8006464:	4603      	mov	r3, r0
 8006466:	406b      	eors	r3, r5
 8006468:	b2dd      	uxtb	r5, r3
 800646a:	7a7b      	ldrb	r3, [r7, #9]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fce4 	bl	8005e3a <xtime>
 8006472:	4603      	mov	r3, r0
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fce0 	bl	8005e3a <xtime>
 800647a:	4603      	mov	r3, r0
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fcdc 	bl	8005e3a <xtime>
 8006482:	4603      	mov	r3, r0
 8006484:	406b      	eors	r3, r5
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4063      	eors	r3, r4
 800648a:	b2dc      	uxtb	r4, r3
 800648c:	7a3b      	ldrb	r3, [r7, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fcd3 	bl	8005e3a <xtime>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	7a3b      	ldrb	r3, [r7, #8]
 800649a:	4053      	eors	r3, r2
 800649c:	b2dd      	uxtb	r5, r3
 800649e:	7a3b      	ldrb	r3, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fcca 	bl	8005e3a <xtime>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fcc6 	bl	8005e3a <xtime>
 80064ae:	4603      	mov	r3, r0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fcc2 	bl	8005e3a <xtime>
 80064b6:	4603      	mov	r3, r0
 80064b8:	406b      	eors	r3, r5
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4063      	eors	r3, r4
 80064be:	b2d9      	uxtb	r1, r3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	460a      	mov	r2, r1
 80064ca:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80064cc:	7afb      	ldrb	r3, [r7, #11]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fcb3 	bl	8005e3a <xtime>
 80064d4:	4603      	mov	r3, r0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fcaf 	bl	8005e3a <xtime>
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fcab 	bl	8005e3a <xtime>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff fca7 	bl	8005e3a <xtime>
 80064ec:	4603      	mov	r3, r0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fca3 	bl	8005e3a <xtime>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fc9f 	bl	8005e3a <xtime>
 80064fc:	7abb      	ldrb	r3, [r7, #10]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fc9b 	bl	8005e3a <xtime>
 8006504:	7abb      	ldrb	r3, [r7, #10]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fc97 	bl	8005e3a <xtime>
 800650c:	4603      	mov	r3, r0
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fc93 	bl	8005e3a <xtime>
 8006514:	4603      	mov	r3, r0
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fc8f 	bl	8005e3a <xtime>
 800651c:	4603      	mov	r3, r0
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fc8b 	bl	8005e3a <xtime>
 8006524:	7a7b      	ldrb	r3, [r7, #9]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fc87 	bl	8005e3a <xtime>
 800652c:	7a7b      	ldrb	r3, [r7, #9]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fc83 	bl	8005e3a <xtime>
 8006534:	4603      	mov	r3, r0
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fc7f 	bl	8005e3a <xtime>
 800653c:	7a7b      	ldrb	r3, [r7, #9]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fc7b 	bl	8005e3a <xtime>
 8006544:	4603      	mov	r3, r0
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fc77 	bl	8005e3a <xtime>
 800654c:	4603      	mov	r3, r0
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fc73 	bl	8005e3a <xtime>
 8006554:	4603      	mov	r3, r0
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fc6f 	bl	8005e3a <xtime>
 800655c:	7a3b      	ldrb	r3, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fc6b 	bl	8005e3a <xtime>
 8006564:	4603      	mov	r3, r0
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fc67 	bl	8005e3a <xtime>
 800656c:	4603      	mov	r3, r0
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fc63 	bl	8005e3a <xtime>
 8006574:	4603      	mov	r3, r0
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fc5f 	bl	8005e3a <xtime>
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fc5b 	bl	8005e3a <xtime>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	4053      	eors	r3, r2
 800658c:	b2dc      	uxtb	r4, r3
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fc52 	bl	8005e3a <xtime>
 8006596:	4603      	mov	r3, r0
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fc4e 	bl	8005e3a <xtime>
 800659e:	4603      	mov	r3, r0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fc4a 	bl	8005e3a <xtime>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4063      	eors	r3, r4
 80065aa:	b2dc      	uxtb	r4, r3
 80065ac:	7abb      	ldrb	r3, [r7, #10]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fc43 	bl	8005e3a <xtime>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fc3f 	bl	8005e3a <xtime>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	7abb      	ldrb	r3, [r7, #10]
 80065c2:	4053      	eors	r3, r2
 80065c4:	b2dd      	uxtb	r5, r3
 80065c6:	7abb      	ldrb	r3, [r7, #10]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fc36 	bl	8005e3a <xtime>
 80065ce:	4603      	mov	r3, r0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fc32 	bl	8005e3a <xtime>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fc2e 	bl	8005e3a <xtime>
 80065de:	4603      	mov	r3, r0
 80065e0:	406b      	eors	r3, r5
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4063      	eors	r3, r4
 80065e6:	b2dc      	uxtb	r4, r3
 80065e8:	7a7b      	ldrb	r3, [r7, #9]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fc25 	bl	8005e3a <xtime>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fc21 	bl	8005e3a <xtime>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fc1d 	bl	8005e3a <xtime>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	7a7b      	ldrb	r3, [r7, #9]
 8006606:	4053      	eors	r3, r2
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4063      	eors	r3, r4
 800660c:	b2dc      	uxtb	r4, r3
 800660e:	7a3b      	ldrb	r3, [r7, #8]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fc12 	bl	8005e3a <xtime>
 8006616:	4603      	mov	r3, r0
 8006618:	461d      	mov	r5, r3
 800661a:	7a3b      	ldrb	r3, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fc0c 	bl	8005e3a <xtime>
 8006622:	4603      	mov	r3, r0
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fc08 	bl	8005e3a <xtime>
 800662a:	4603      	mov	r3, r0
 800662c:	406b      	eors	r3, r5
 800662e:	b2dd      	uxtb	r5, r3
 8006630:	7a3b      	ldrb	r3, [r7, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fc01 	bl	8005e3a <xtime>
 8006638:	4603      	mov	r3, r0
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fbfd 	bl	8005e3a <xtime>
 8006640:	4603      	mov	r3, r0
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fbf9 	bl	8005e3a <xtime>
 8006648:	4603      	mov	r3, r0
 800664a:	406b      	eors	r3, r5
 800664c:	b2db      	uxtb	r3, r3
 800664e:	4063      	eors	r3, r4
 8006650:	b2d9      	uxtb	r1, r3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	460a      	mov	r2, r1
 800665c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b03      	cmp	r3, #3
 8006668:	f77f acc0 	ble.w	8005fec <InvMixColumns+0xe>
  }
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006678 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e01d      	b.n	80066c2 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8006686:	2300      	movs	r3, #0
 8006688:	73bb      	strb	r3, [r7, #14]
 800668a:	e014      	b.n	80066b6 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 800668c:	7bba      	ldrb	r2, [r7, #14]
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	0092      	lsls	r2, r2, #2
 8006694:	440a      	add	r2, r1
 8006696:	4413      	add	r3, r2
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	7bba      	ldrb	r2, [r7, #14]
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	490c      	ldr	r1, [pc, #48]	; (80066d4 <InvSubBytes+0x5c>)
 80066a2:	5c08      	ldrb	r0, [r1, r0]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	0092      	lsls	r2, r2, #2
 80066a8:	440a      	add	r2, r1
 80066aa:	4413      	add	r3, r2
 80066ac:	4602      	mov	r2, r0
 80066ae:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	3301      	adds	r3, #1
 80066b4:	73bb      	strb	r3, [r7, #14]
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d9e7      	bls.n	800668c <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	3301      	adds	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d9de      	bls.n	8006686 <InvSubBytes+0xe>
    }
  }
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr
 80066d4:	0800f894 	.word	0x0800f894

080066d8 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7b5b      	ldrb	r3, [r3, #13]
 80066e4:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7a5a      	ldrb	r2, [r3, #9]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	795a      	ldrb	r2, [r3, #5]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	785a      	ldrb	r2, [r3, #1]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7bfa      	ldrb	r2, [r7, #15]
 8006702:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	789b      	ldrb	r3, [r3, #2]
 8006708:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	7a9a      	ldrb	r2, [r3, #10]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7bfa      	ldrb	r2, [r7, #15]
 8006716:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	799b      	ldrb	r3, [r3, #6]
 800671c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7b9a      	ldrb	r2, [r3, #14]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7bfa      	ldrb	r2, [r7, #15]
 800672a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	79da      	ldrb	r2, [r3, #7]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7ada      	ldrb	r2, [r3, #11]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7bda      	ldrb	r2, [r3, #15]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	73da      	strb	r2, [r3, #15]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	2000      	movs	r0, #0
 800676e:	f7ff fab7 	bl	8005ce0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8006772:	2301      	movs	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff faee 	bl	8005d58 <SubBytes>
    ShiftRows(state);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff fb1b 	bl	8005db8 <ShiftRows>
    if (round == Nr) {
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b0a      	cmp	r3, #10
 8006786:	d00c      	beq.n	80067a2 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fb73 	bl	8005e74 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff faa3 	bl	8005ce0 <AddRoundKey>
  for (round = 1; ; ++round)
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	3301      	adds	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 80067a0:	e7e9      	b.n	8006776 <Cipher+0x1c>
      break;
 80067a2:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	200a      	movs	r0, #10
 80067aa:	f7ff fa99 	bl	8005ce0 <AddRoundKey>
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	200a      	movs	r0, #10
 80067ca:	f7ff fa89 	bl	8005ce0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 80067ce:	2309      	movs	r3, #9
 80067d0:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff80 	bl	80066d8 <InvShiftRows>
    InvSubBytes(state);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff4d 	bl	8006678 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fa7b 	bl	8005ce0 <AddRoundKey>
    if (round == 0) {
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fbf4 	bl	8005fde <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 80067fc:	e7e9      	b.n	80067d2 <InvCipher+0x1c>
      break;
 80067fe:	bf00      	nop
  }

}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
 8006816:	e010      	b.n	800683a <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	7819      	ldrb	r1, [r3, #0]
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4413      	add	r3, r2
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4403      	add	r3, r0
 800682e:	404a      	eors	r2, r1
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	3301      	adds	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d9eb      	bls.n	8006818 <XorWithIv+0x10>
  }
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 800684c:	b5b0      	push	{r4, r5, r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006858:	2300      	movs	r3, #0
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
 800685c:	e022      	b.n	80068a4 <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f107 0414 	add.w	r4, r7, #20
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4619      	mov	r1, r3
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f7ff ff9f 	bl	80067b6 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	33b0      	adds	r3, #176	; 0xb0
 800687c:	4619      	mov	r1, r3
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f7ff ffc2 	bl	8006808 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	33b0      	adds	r3, #176	; 0xb0
 8006888:	461d      	mov	r5, r3
 800688a:	f107 0414 	add.w	r4, r7, #20
 800688e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006890:	6028      	str	r0, [r5, #0]
 8006892:	6069      	str	r1, [r5, #4]
 8006894:	60aa      	str	r2, [r5, #8]
 8006896:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	3310      	adds	r3, #16
 800689c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	3310      	adds	r3, #16
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d3d8      	bcc.n	800685e <AES_CBC_decrypt_buffer+0x12>
  }

}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bdb0      	pop	{r4, r5, r7, pc}

080068b6 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80068b6:	b590      	push	{r4, r7, lr}
 80068b8:	b08b      	sub	sp, #44	; 0x2c
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80068c2:	2300      	movs	r3, #0
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
 80068c6:	2310      	movs	r3, #16
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	e04e      	b.n	800696a <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d136      	bne.n	8006940 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	33b0      	adds	r3, #176	; 0xb0
 80068d6:	f107 0410 	add.w	r4, r7, #16
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f107 0310 	add.w	r3, r7, #16
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ff34 	bl	800675a <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80068f2:	230f      	movs	r3, #15
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	e01e      	b.n	8006936 <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	4413      	add	r3, r2
 80068fe:	33b0      	adds	r3, #176	; 0xb0
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2bff      	cmp	r3, #255	; 0xff
 8006904:	d106      	bne.n	8006914 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	4413      	add	r3, r2
 800690c:	33b0      	adds	r3, #176	; 0xb0
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
          continue;
 8006912:	e00d      	b.n	8006930 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	4413      	add	r3, r2
 800691a:	33b0      	adds	r3, #176	; 0xb0
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	b2d9      	uxtb	r1, r3
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	4413      	add	r3, r2
 8006928:	33b0      	adds	r3, #176	; 0xb0
 800692a:	460a      	mov	r2, r1
 800692c:	701a      	strb	r2, [r3, #0]
        break;
 800692e:	e005      	b.n	800693c <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	3b01      	subs	r3, #1
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dadd      	bge.n	80068f8 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	4413      	add	r3, r2
 8006946:	7819      	ldrb	r1, [r3, #0]
 8006948:	f107 0210 	add.w	r2, r7, #16
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	4413      	add	r3, r2
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	68b8      	ldr	r0, [r7, #8]
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	4403      	add	r3, r0
 8006958:	404a      	eors	r2, r1
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	3301      	adds	r3, #1
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	3301      	adds	r3, #1
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d3ac      	bcc.n	80068cc <AES_CTR_xcrypt_buffer+0x16>
  }
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	372c      	adds	r7, #44	; 0x2c
 8006978:	46bd      	mov	sp, r7
 800697a:	bd90      	pop	{r4, r7, pc}

0800697c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006980:	f000 ff6a 	bl	8007858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006984:	f000 f900 	bl	8006b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006988:	f000 fb20 	bl	8006fcc <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 800698c:	f000 f972 	bl	8006c74 <MX_SPI1_Init>
  MX_I2C1_Init();
 8006990:	f000 f942 	bl	8006c18 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8006994:	f000 faf0 	bl	8006f78 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8006998:	f000 f9a2 	bl	8006ce0 <MX_SPI2_Init>
  MX_TIM2_Init();
 800699c:	f000 fa26 	bl	8006dec <MX_TIM2_Init>
  MX_TIM4_Init();
 80069a0:	f000 fa72 	bl	8006e88 <MX_TIM4_Init>
  MX_TIM1_Init();
 80069a4:	f000 f9d2 	bl	8006d4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80069a8:	f000 fabc 	bl	8006f24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module 1
  SX1278_hw_1.dio0.port = DIO_GPIO_Port;
 80069ac:	4b67      	ldr	r3, [pc, #412]	; (8006b4c <main+0x1d0>)
 80069ae:	4a68      	ldr	r2, [pc, #416]	; (8006b50 <main+0x1d4>)
 80069b0:	60da      	str	r2, [r3, #12]
  SX1278_hw_1.dio0.pin = DIO_Pin;
 80069b2:	4b66      	ldr	r3, [pc, #408]	; (8006b4c <main+0x1d0>)
 80069b4:	2202      	movs	r2, #2
 80069b6:	609a      	str	r2, [r3, #8]
  SX1278_hw_1.nss.port = NSS_GPIO_Port;
 80069b8:	4b64      	ldr	r3, [pc, #400]	; (8006b4c <main+0x1d0>)
 80069ba:	4a66      	ldr	r2, [pc, #408]	; (8006b54 <main+0x1d8>)
 80069bc:	615a      	str	r2, [r3, #20]
  SX1278_hw_1.nss.pin = NSS_Pin;
 80069be:	4b63      	ldr	r3, [pc, #396]	; (8006b4c <main+0x1d0>)
 80069c0:	2210      	movs	r2, #16
 80069c2:	611a      	str	r2, [r3, #16]
  SX1278_hw_1.reset.port = RESET_GPIO_Port;
 80069c4:	4b61      	ldr	r3, [pc, #388]	; (8006b4c <main+0x1d0>)
 80069c6:	4a62      	ldr	r2, [pc, #392]	; (8006b50 <main+0x1d4>)
 80069c8:	605a      	str	r2, [r3, #4]
  SX1278_hw_1.reset.pin = RESET_Pin;
 80069ca:	4b60      	ldr	r3, [pc, #384]	; (8006b4c <main+0x1d0>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
  SX1278_hw_1.spi = &hspi1;
 80069d0:	4b5e      	ldr	r3, [pc, #376]	; (8006b4c <main+0x1d0>)
 80069d2:	4a61      	ldr	r2, [pc, #388]	; (8006b58 <main+0x1dc>)
 80069d4:	619a      	str	r2, [r3, #24]
  SX1278_1.hw = &SX1278_hw_1;
 80069d6:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <main+0x1e0>)
 80069d8:	4a5c      	ldr	r2, [pc, #368]	; (8006b4c <main+0x1d0>)
 80069da:	601a      	str	r2, [r3, #0]

  //initialize LoRa module 2
  SX1278_hw_2.dio0.port = DIO_2_GPIO_Port;
 80069dc:	4b60      	ldr	r3, [pc, #384]	; (8006b60 <main+0x1e4>)
 80069de:	4a5c      	ldr	r2, [pc, #368]	; (8006b50 <main+0x1d4>)
 80069e0:	60da      	str	r2, [r3, #12]
  SX1278_hw_2.dio0.pin = DIO_2_Pin;
 80069e2:	4b5f      	ldr	r3, [pc, #380]	; (8006b60 <main+0x1e4>)
 80069e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069e8:	609a      	str	r2, [r3, #8]
  SX1278_hw_2.nss.port = SPI2_NSS_GPIO_Port;
 80069ea:	4b5d      	ldr	r3, [pc, #372]	; (8006b60 <main+0x1e4>)
 80069ec:	4a58      	ldr	r2, [pc, #352]	; (8006b50 <main+0x1d4>)
 80069ee:	615a      	str	r2, [r3, #20]
  SX1278_hw_2.nss.pin = SPI2_NSS_Pin;
 80069f0:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <main+0x1e4>)
 80069f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069f6:	611a      	str	r2, [r3, #16]
  SX1278_hw_2.reset.port = RESET2_GPIO_Port;
 80069f8:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <main+0x1e4>)
 80069fa:	4a55      	ldr	r2, [pc, #340]	; (8006b50 <main+0x1d4>)
 80069fc:	605a      	str	r2, [r3, #4]
  SX1278_hw_2.reset.pin = RESET2_Pin;
 80069fe:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <main+0x1e4>)
 8006a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a04:	601a      	str	r2, [r3, #0]
  SX1278_hw_2.spi = &hspi2;
 8006a06:	4b56      	ldr	r3, [pc, #344]	; (8006b60 <main+0x1e4>)
 8006a08:	4a56      	ldr	r2, [pc, #344]	; (8006b64 <main+0x1e8>)
 8006a0a:	619a      	str	r2, [r3, #24]
  SX1278_2.hw = &SX1278_hw_2;
 8006a0c:	4b56      	ldr	r3, [pc, #344]	; (8006b68 <main+0x1ec>)
 8006a0e:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <main+0x1e4>)
 8006a10:	601a      	str	r2, [r3, #0]

  /*GW Config Init first to get the config */
  GW_State_Init();
 8006a12:	f7fb ffc1 	bl	8002998 <GW_State_Init>
  GW_Reset_State();
 8006a16:	f7fb ffad 	bl	8002974 <GW_Reset_State>
  GW_Config_Init();
 8006a1a:	f7fb ff49 	bl	80028b0 <GW_Config_Init>
  Encrypt_Address_Read_Init();
 8006a1e:	f7fa fca7 	bl	8001370 <Encrypt_Address_Read_Init>
  UI_Init();
 8006a22:	f7fe f895 	bl	8004b50 <UI_Init>
  ReceiveFWUpdate_Init();
 8006a26:	f7fc fa8f 	bl	8002f48 <ReceiveFWUpdate_Init>
  // Init timer
  //HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);
 8006a2a:	4850      	ldr	r0, [pc, #320]	; (8006b6c <main+0x1f0>)
 8006a2c:	f003 fcf0 	bl	800a410 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8006a30:	2007      	movs	r0, #7
 8006a32:	f001 f8bc 	bl	8007bae <HAL_NVIC_DisableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State For Flashing
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8006a36:	484e      	ldr	r0, [pc, #312]	; (8006b70 <main+0x1f4>)
 8006a38:	f7fc f82e 	bl	8002a98 <Rte_SystemState_ReadData>
	  switch (SysTem_State)
 8006a3c:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <main+0x1f4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	2b09      	cmp	r3, #9
 8006a44:	d840      	bhi.n	8006ac8 <main+0x14c>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <main+0xd0>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a8f 	.word	0x08006a8f
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006ac9 	.word	0x08006ac9
 8006a5c:	08006a9f 	.word	0x08006a9f
 8006a60:	08006aa9 	.word	0x08006aa9
 8006a64:	08006aaf 	.word	0x08006aaf
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006a75 	.word	0x08006a75
	  {
	    case WAIT_FOR_ESP_CONNECT:
	    	ReceiveFWUpdate_MainFunc();
 8006a74:	f7fc facc 	bl	8003010 <ReceiveFWUpdate_MainFunc>
	    	break;
 8006a78:	e027      	b.n	8006aca <main+0x14e>
		case SYS_NEW_UPDATE_REQ:
			F_voidInitVariables();
 8006a7a:	f7fa fe5d 	bl	8001738 <F_voidInitVariables>
			Encrypt_Address_Read_Init();
 8006a7e:	f7fa fc77 	bl	8001370 <Encrypt_Address_Read_Init>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8006a82:	2004      	movs	r0, #4
 8006a84:	f7fc f988 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
			ReceiveFWUpdate_MainFunc();
 8006a88:	f7fc fac2 	bl	8003010 <ReceiveFWUpdate_MainFunc>
			break;
 8006a8c:	e01d      	b.n	8006aca <main+0x14e>
		case SYS_RECEIVE_UPDATE:
			//UI_Main_FLASHING();
			ReceiveFWUpdate_MainFunc();
 8006a8e:	f7fc fabf 	bl	8003010 <ReceiveFWUpdate_MainFunc>
			break;
 8006a92:	e01a      	b.n	8006aca <main+0x14e>
		case SYS_REQUEST_OTA:
			UI_Main_FLASHING();
 8006a94:	f7fe f882 	bl	8004b9c <UI_Main_FLASHING>
			Send_Start_OTA();
 8006a98:	f7fb fa1e 	bl	8001ed8 <Send_Start_OTA>
			break;
 8006a9c:	e015      	b.n	8006aca <main+0x14e>
		case SYS_CONFIG_LORA:
			UI_Main_FLASHING();
 8006a9e:	f7fe f87d 	bl	8004b9c <UI_Main_FLASHING>
			FL_FlashLoRa_INIT();
 8006aa2:	f7fb fa67 	bl	8001f74 <FL_FlashLoRa_INIT>
			break;
 8006aa6:	e010      	b.n	8006aca <main+0x14e>
		case SYS_ENCRYPT_FW:
			Encrypt_MainFunc();
 8006aa8:	f7fa fcc0 	bl	800142c <Encrypt_MainFunc>
			break;
 8006aac:	e00d      	b.n	8006aca <main+0x14e>
		case SYS_SEND_UPDATE:
			UI_Main_FLASHING();
 8006aae:	f7fe f875 	bl	8004b9c <UI_Main_FLASHING>
			FL_PacketLoRaSend_START();
 8006ab2:	f7fb fb2f 	bl	8002114 <FL_PacketLoRaSend_START>
			break;
 8006ab6:	e008      	b.n	8006aca <main+0x14e>
		case SYS_DONE_UPDATE:
			ReceiveFWUpdate_MainFunc();
 8006ab8:	f7fc faaa 	bl	8003010 <ReceiveFWUpdate_MainFunc>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x00);
 8006abc:	2000      	movs	r0, #0
 8006abe:	f7fc f96b 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
			FL_PacketLoRaDone_OTA();
 8006ac2:	f7fb fbb7 	bl	8002234 <FL_PacketLoRaDone_OTA>
			break;
 8006ac6:	e000      	b.n	8006aca <main+0x14e>
		default:
			break;
 8006ac8:	bf00      	nop
	  }
	  UI_Main_FLASHING();
 8006aca:	f7fe f867 	bl	8004b9c <UI_Main_FLASHING>
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_flagRequest);
 8006ace:	4829      	ldr	r0, [pc, #164]	; (8006b74 <main+0x1f8>)
 8006ad0:	f7fc f974 	bl	8002dbc <Rte_Flag_LoRaRequestDevice_ReadData>
	  if(gl_flagRequest == 0x01){
 8006ad4:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <main+0x1f8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10f      	bne.n	8006afc <main+0x180>
		 HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006adc:	2028      	movs	r0, #40	; 0x28
 8006ade:	f001 f866 	bl	8007bae <HAL_NVIC_DisableIRQ>

		 RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x00);
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	f7fc f97c 	bl	8002de0 <Rte_Flag_NodeRequestIndex_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_1, buffer_req_2 , GW_REQ_PARAMETER);
 8006ae8:	238c      	movs	r3, #140	; 0x8c
 8006aea:	4a23      	ldr	r2, [pc, #140]	; (8006b78 <main+0x1fc>)
 8006aec:	4923      	ldr	r1, [pc, #140]	; (8006b7c <main+0x200>)
 8006aee:	481e      	ldr	r0, [pc, #120]	; (8006b68 <main+0x1ec>)
 8006af0:	f7fa ffe0 	bl	8001ab4 <Send_request>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		 RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8006af4:	2004      	movs	r0, #4
 8006af6:	f7fc f94f 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
 8006afa:	e79c      	b.n	8006a36 <main+0xba>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);



	  }
	  else if(gl_flagRequest == 0x02){
 8006afc:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <main+0x1f8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d10f      	bne.n	8006b24 <main+0x1a8>
		 HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b04:	2028      	movs	r0, #40	; 0x28
 8006b06:	f001 f852 	bl	8007bae <HAL_NVIC_DisableIRQ>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		 RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x01);
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f7fc f968 	bl	8002de0 <Rte_Flag_NodeRequestIndex_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_2, buffer_req_2 , GW_REQ_PARAMETER);
 8006b10:	238c      	movs	r3, #140	; 0x8c
 8006b12:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <main+0x1fc>)
 8006b14:	491a      	ldr	r1, [pc, #104]	; (8006b80 <main+0x204>)
 8006b16:	4814      	ldr	r0, [pc, #80]	; (8006b68 <main+0x1ec>)
 8006b18:	f7fa ffcc 	bl	8001ab4 <Send_request>
		 //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData_NODE_1(false);
		 RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x05);
 8006b1c:	2005      	movs	r0, #5
 8006b1e:	f7fc f93b 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
 8006b22:	e788      	b.n	8006a36 <main+0xba>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	  }
	  else if(gl_flagRequest == 0x03){
 8006b24:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <main+0x1f8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d184      	bne.n	8006a36 <main+0xba>
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b2c:	2028      	movs	r0, #40	; 0x28
 8006b2e:	f001 f83e 	bl	8007bae <HAL_NVIC_DisableIRQ>
		  //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		  RTE_RUNNABLE_FLAG_NODE_REQUEST_INDEX_WriteData(0x02);
 8006b32:	2002      	movs	r0, #2
 8006b34:	f7fc f954 	bl	8002de0 <Rte_Flag_NodeRequestIndex_WriteData>
		  Send_request(&SX1278_2, ADDRESS__MAC_NODE_3, buffer_req_2, GW_REQ_PARAMETER);
 8006b38:	238c      	movs	r3, #140	; 0x8c
 8006b3a:	4a0f      	ldr	r2, [pc, #60]	; (8006b78 <main+0x1fc>)
 8006b3c:	4911      	ldr	r1, [pc, #68]	; (8006b84 <main+0x208>)
 8006b3e:	480a      	ldr	r0, [pc, #40]	; (8006b68 <main+0x1ec>)
 8006b40:	f7fa ffb8 	bl	8001ab4 <Send_request>
		  //RTE_RUNNABLE_FLAG_NODE_STATUS_WriteData(false);
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x06);
 8006b44:	2006      	movs	r0, #6
 8006b46:	f7fc f927 	bl	8002d98 <Rte_Flag_LoRaRequestDevice_WriteData>
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8006b4a:	e774      	b.n	8006a36 <main+0xba>
 8006b4c:	20001884 	.word	0x20001884
 8006b50:	40010c00 	.word	0x40010c00
 8006b54:	40010800 	.word	0x40010800
 8006b58:	2000166c 	.word	0x2000166c
 8006b5c:	200018a0 	.word	0x200018a0
 8006b60:	200019b4 	.word	0x200019b4
 8006b64:	200016c4 	.word	0x200016c4
 8006b68:	200019d0 	.word	0x200019d0
 8006b6c:	20001764 	.word	0x20001764
 8006b70:	20001ae4 	.word	0x20001ae4
 8006b74:	20001ae8 	.word	0x20001ae8
 8006b78:	20001aec 	.word	0x20001aec
 8006b7c:	26011bcd 	.word	0x26011bcd
 8006b80:	26011def 	.word	0x26011def
 8006b84:	260120f0 	.word	0x260120f0

08006b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b090      	sub	sp, #64	; 0x40
 8006b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b8e:	f107 0318 	add.w	r3, r7, #24
 8006b92:	2228      	movs	r2, #40	; 0x28
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f005 fc43 	bl	800c422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006baa:	2309      	movs	r3, #9
 8006bac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006bca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bd0:	f107 0318 	add.w	r3, r7, #24
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fb21 	bl	800921c <HAL_RCC_OscConfig>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8006be0:	f000 fa96 	bl	8007110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006be4:	230f      	movs	r3, #15
 8006be6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006be8:	2302      	movs	r3, #2
 8006bea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 fd8e 	bl	8009720 <HAL_RCC_ClockConfig>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006c0a:	f000 fa81 	bl	8007110 <Error_Handler>
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3740      	adds	r7, #64	; 0x40
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c1e:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <MX_I2C1_Init+0x54>)
 8006c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c24:	4a12      	ldr	r2, [pc, #72]	; (8006c70 <MX_I2C1_Init+0x58>)
 8006c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c54:	4804      	ldr	r0, [pc, #16]	; (8006c68 <MX_I2C1_Init+0x50>)
 8006c56:	f001 fd17 	bl	8008688 <HAL_I2C_Init>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006c60:	f000 fa56 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c64:	bf00      	nop
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20001618 	.word	0x20001618
 8006c6c:	40005400 	.word	0x40005400
 8006c70:	00061a80 	.word	0x00061a80

08006c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006c78:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <MX_SPI1_Init+0x68>)
 8006c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006c7e:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c8c:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c92:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006ca8:	2210      	movs	r2, #16
 8006caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006cc4:	4804      	ldr	r0, [pc, #16]	; (8006cd8 <MX_SPI1_Init+0x64>)
 8006cc6:	f002 feb9 	bl	8009a3c <HAL_SPI_Init>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006cd0:	f000 fa1e 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006cd4:	bf00      	nop
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	2000166c 	.word	0x2000166c
 8006cdc:	40013000 	.word	0x40013000

08006ce0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006ce4:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006ce6:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <MX_SPI2_Init+0x68>)
 8006ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006cf8:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006d04:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d14:	2210      	movs	r2, #16
 8006d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006d30:	4804      	ldr	r0, [pc, #16]	; (8006d44 <MX_SPI2_Init+0x64>)
 8006d32:	f002 fe83 	bl	8009a3c <HAL_SPI_Init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006d3c:	f000 f9e8 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006d40:	bf00      	nop
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200016c4 	.word	0x200016c4
 8006d48:	40003800 	.word	0x40003800

08006d4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	609a      	str	r2, [r3, #8]
 8006d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d60:	463b      	mov	r3, r7
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <MX_TIM1_Init+0x9c>)
 8006d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d70:	2247      	movs	r2, #71	; 0x47
 8006d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d74:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006d94:	4813      	ldr	r0, [pc, #76]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006d96:	f003 fa7b 	bl	800a290 <HAL_TIM_Base_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006da0:	f000 f9b6 	bl	8007110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	4619      	mov	r1, r3
 8006db0:	480c      	ldr	r0, [pc, #48]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006db2:	f003 fcb5 	bl	800a720 <HAL_TIM_ConfigClockSource>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006dbc:	f000 f9a8 	bl	8007110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006dc8:	463b      	mov	r3, r7
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4805      	ldr	r0, [pc, #20]	; (8006de4 <MX_TIM1_Init+0x98>)
 8006dce:	f003 fe8b 	bl	800aae8 <HAL_TIMEx_MasterConfigSynchronization>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006dd8:	f000 f99a 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006ddc:	bf00      	nop
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	2000171c 	.word	0x2000171c
 8006de8:	40012c00 	.word	0x40012c00

08006dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	609a      	str	r2, [r3, #8]
 8006dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e00:	463b      	mov	r3, r7
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006e08:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11015;
 8006e10:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e12:	f642 3207 	movw	r2, #11015	; 0x2b07
 8006e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65358;
 8006e1e:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e20:	f64f 724e 	movw	r2, #65358	; 0xff4e
 8006e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e2c:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006e32:	4814      	ldr	r0, [pc, #80]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e34:	f003 fa2c 	bl	800a290 <HAL_TIM_Base_Init>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006e3e:	f000 f967 	bl	8007110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006e48:	f107 0308 	add.w	r3, r7, #8
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	480d      	ldr	r0, [pc, #52]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e50:	f003 fc66 	bl	800a720 <HAL_TIM_ConfigClockSource>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006e5a:	f000 f959 	bl	8007110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006e66:	463b      	mov	r3, r7
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4806      	ldr	r0, [pc, #24]	; (8006e84 <MX_TIM2_Init+0x98>)
 8006e6c:	f003 fe3c 	bl	800aae8 <HAL_TIMEx_MasterConfigSynchronization>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006e76:	f000 f94b 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20001764 	.word	0x20001764

08006e88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	609a      	str	r2, [r3, #8]
 8006e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <MX_TIM4_Init+0x98>)
 8006ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5543;
 8006eaa:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006eac:	f241 52a7 	movw	r2, #5543	; 0x15a7
 8006eb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64934;
 8006eb8:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006eba:	f64f 52a6 	movw	r2, #64934	; 0xfda6
 8006ebe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006ecc:	4813      	ldr	r0, [pc, #76]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006ece:	f003 f9df 	bl	800a290 <HAL_TIM_Base_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8006ed8:	f000 f91a 	bl	8007110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	480c      	ldr	r0, [pc, #48]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006eea:	f003 fc19 	bl	800a720 <HAL_TIM_ConfigClockSource>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8006ef4:	f000 f90c 	bl	8007110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f00:	463b      	mov	r3, r7
 8006f02:	4619      	mov	r1, r3
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <MX_TIM4_Init+0x94>)
 8006f06:	f003 fdef 	bl	800aae8 <HAL_TIMEx_MasterConfigSynchronization>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8006f10:	f000 f8fe 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	200017ac 	.word	0x200017ac
 8006f20:	40000800 	.word	0x40000800

08006f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <MX_USART1_UART_Init+0x50>)
 8006f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f36:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f4a:	220c      	movs	r2, #12
 8006f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f5a:	4805      	ldr	r0, [pc, #20]	; (8006f70 <MX_USART1_UART_Init+0x4c>)
 8006f5c:	f003 fe34 	bl	800abc8 <HAL_UART_Init>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006f66:	f000 f8d3 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200017f4 	.word	0x200017f4
 8006f74:	40013800 	.word	0x40013800

08006f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <MX_USART2_UART_Init+0x50>)
 8006f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <MX_USART2_UART_Init+0x4c>)
 8006fb0:	f003 fe0a 	bl	800abc8 <HAL_UART_Init>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006fba:	f000 f8a9 	bl	8007110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000183c 	.word	0x2000183c
 8006fc8:	40004400 	.word	0x40004400

08006fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fe0:	4b46      	ldr	r3, [pc, #280]	; (80070fc <MX_GPIO_Init+0x130>)
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	4a45      	ldr	r2, [pc, #276]	; (80070fc <MX_GPIO_Init+0x130>)
 8006fe6:	f043 0310 	orr.w	r3, r3, #16
 8006fea:	6193      	str	r3, [r2, #24]
 8006fec:	4b43      	ldr	r3, [pc, #268]	; (80070fc <MX_GPIO_Init+0x130>)
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ff8:	4b40      	ldr	r3, [pc, #256]	; (80070fc <MX_GPIO_Init+0x130>)
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	4a3f      	ldr	r2, [pc, #252]	; (80070fc <MX_GPIO_Init+0x130>)
 8006ffe:	f043 0320 	orr.w	r3, r3, #32
 8007002:	6193      	str	r3, [r2, #24]
 8007004:	4b3d      	ldr	r3, [pc, #244]	; (80070fc <MX_GPIO_Init+0x130>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007010:	4b3a      	ldr	r3, [pc, #232]	; (80070fc <MX_GPIO_Init+0x130>)
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	4a39      	ldr	r2, [pc, #228]	; (80070fc <MX_GPIO_Init+0x130>)
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	6193      	str	r3, [r2, #24]
 800701c:	4b37      	ldr	r3, [pc, #220]	; (80070fc <MX_GPIO_Init+0x130>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007028:	4b34      	ldr	r3, [pc, #208]	; (80070fc <MX_GPIO_Init+0x130>)
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4a33      	ldr	r2, [pc, #204]	; (80070fc <MX_GPIO_Init+0x130>)
 800702e:	f043 0308 	orr.w	r3, r3, #8
 8007032:	6193      	str	r3, [r2, #24]
 8007034:	4b31      	ldr	r3, [pc, #196]	; (80070fc <MX_GPIO_Init+0x130>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007040:	2200      	movs	r2, #0
 8007042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007046:	482e      	ldr	r0, [pc, #184]	; (8007100 <MX_GPIO_Init+0x134>)
 8007048:	f001 fad5 	bl	80085f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800704c:	2200      	movs	r2, #0
 800704e:	2110      	movs	r1, #16
 8007050:	482c      	ldr	r0, [pc, #176]	; (8007104 <MX_GPIO_Init+0x138>)
 8007052:	f001 fad0 	bl	80085f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 8007056:	2200      	movs	r2, #0
 8007058:	f641 3105 	movw	r1, #6917	; 0x1b05
 800705c:	482a      	ldr	r0, [pc, #168]	; (8007108 <MX_GPIO_Init+0x13c>)
 800705e:	f001 faca 	bl	80085f6 <HAL_GPIO_WritePin>
                          |RECEIIVE_Pin|SEND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007070:	2302      	movs	r3, #2
 8007072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007074:	f107 0310 	add.w	r3, r7, #16
 8007078:	4619      	mov	r1, r3
 800707a:	4821      	ldr	r0, [pc, #132]	; (8007100 <MX_GPIO_Init+0x134>)
 800707c:	f001 f864 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8007080:	2310      	movs	r3, #16
 8007082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007084:	2301      	movs	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007088:	2300      	movs	r3, #0
 800708a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800708c:	2302      	movs	r3, #2
 800708e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	4619      	mov	r1, r3
 8007096:	481b      	ldr	r0, [pc, #108]	; (8007104 <MX_GPIO_Init+0x138>)
 8007098:	f001 f856 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin MODE_Pin RESET2_Pin SPI2_NSS_Pin
                           RECEIIVE_Pin SEND_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 800709c:	f641 3305 	movw	r3, #6917	; 0x1b05
 80070a0:	613b      	str	r3, [r7, #16]
                          |RECEIIVE_Pin|SEND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070a2:	2301      	movs	r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070aa:	2302      	movs	r3, #2
 80070ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070ae:	f107 0310 	add.w	r3, r7, #16
 80070b2:	4619      	mov	r1, r3
 80070b4:	4814      	ldr	r0, [pc, #80]	; (8007108 <MX_GPIO_Init+0x13c>)
 80070b6:	f001 f847 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO_Pin DIO_2_Pin */
  GPIO_InitStruct.Pin = DIO_Pin|DIO_2_Pin;
 80070ba:	f240 4302 	movw	r3, #1026	; 0x402
 80070be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <MX_GPIO_Init+0x140>)
 80070c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070c8:	f107 0310 	add.w	r3, r7, #16
 80070cc:	4619      	mov	r1, r3
 80070ce:	480e      	ldr	r0, [pc, #56]	; (8007108 <MX_GPIO_Init+0x13c>)
 80070d0:	f001 f83a 	bl	8008148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80070d4:	2200      	movs	r2, #0
 80070d6:	2102      	movs	r1, #2
 80070d8:	2007      	movs	r0, #7
 80070da:	f000 fd3e 	bl	8007b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80070de:	2007      	movs	r0, #7
 80070e0:	f000 fd57 	bl	8007b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80070e4:	2200      	movs	r2, #0
 80070e6:	2101      	movs	r1, #1
 80070e8:	2028      	movs	r0, #40	; 0x28
 80070ea:	f000 fd36 	bl	8007b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80070ee:	2028      	movs	r0, #40	; 0x28
 80070f0:	f000 fd4f 	bl	8007b92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80070f4:	bf00      	nop
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40021000 	.word	0x40021000
 8007100:	40011000 	.word	0x40011000
 8007104:	40010800 	.word	0x40010800
 8007108:	40010c00 	.word	0x40010c00
 800710c:	10110000 	.word	0x10110000

08007110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007114:	b672      	cpsid	i
}
 8007116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007118:	e7fe      	b.n	8007118 <Error_Handler+0x8>

0800711a <copy_Array>:
 *      Author: quang
 */

#include "operation.h"

void copy_Array(uint8* a , uint8* b , uint32 size){
 800711a:	b480      	push	{r7}
 800711c:	b087      	sub	sp, #28
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
	// Start Position is the 4th of a
	uint8* prtA = a + 16 ;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3310      	adds	r3, #16
 800712a:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 800712c:	2300      	movs	r3, #0
 800712e:	74fb      	strb	r3, [r7, #19]
 8007130:	e00a      	b.n	8007148 <copy_Array+0x2e>
		*(prtA++) = *(b++);
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	1c53      	adds	r3, r2, #1
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	6179      	str	r1, [r7, #20]
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8007142:	7cfb      	ldrb	r3, [r7, #19]
 8007144:	3301      	adds	r3, #1
 8007146:	74fb      	strb	r3, [r7, #19]
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d8f0      	bhi.n	8007132 <copy_Array+0x18>
	}
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <copy_Array_BL>:
void copy_Array_BL(uint8* a , uint8* b , uint8 init_val, uint32 size){
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	71fb      	strb	r3, [r7, #7]
	uint8* prtB = b + init_val ;
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	4413      	add	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8007174:	2300      	movs	r3, #0
 8007176:	74fb      	strb	r3, [r7, #19]
 8007178:	e00a      	b.n	8007190 <copy_Array_BL+0x34>
		*(a++) = *(prtB++);
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	1c53      	adds	r3, r2, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	60f9      	str	r1, [r7, #12]
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	3301      	adds	r3, #1
 800718e:	74fb      	strb	r3, [r7, #19]
 8007190:	7cfb      	ldrb	r3, [r7, #19]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d8f0      	bhi.n	800717a <copy_Array_BL+0x1e>
	}
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <clearDataBuffer>:


Return_Operation_t clearDataBuffer(uint8 *buffer , uint32 buffer_size){
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	// Clear buffer size
	memset(buffer, 0x00, buffer_size);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f005 f935 	bl	800c422 <memset>
	return DONE;
 80071b8:	2301      	movs	r3, #1
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <HAL_MspInit+0x5c>)
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	4a14      	ldr	r2, [pc, #80]	; (8007220 <HAL_MspInit+0x5c>)
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	6193      	str	r3, [r2, #24]
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_MspInit+0x5c>)
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_MspInit+0x5c>)
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <HAL_MspInit+0x5c>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	61d3      	str	r3, [r2, #28]
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_MspInit+0x5c>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_MspInit+0x60>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	4a04      	ldr	r2, [pc, #16]	; (8007224 <HAL_MspInit+0x60>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr
 8007220:	40021000 	.word	0x40021000
 8007224:	40010000 	.word	0x40010000

08007228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007230:	f107 0310 	add.w	r3, r7, #16
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_I2C_MspInit+0x70>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d123      	bne.n	8007290 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007248:	4b14      	ldr	r3, [pc, #80]	; (800729c <HAL_I2C_MspInit+0x74>)
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	4a13      	ldr	r2, [pc, #76]	; (800729c <HAL_I2C_MspInit+0x74>)
 800724e:	f043 0308 	orr.w	r3, r3, #8
 8007252:	6193      	str	r3, [r2, #24]
 8007254:	4b11      	ldr	r3, [pc, #68]	; (800729c <HAL_I2C_MspInit+0x74>)
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007260:	23c0      	movs	r3, #192	; 0xc0
 8007262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007264:	2312      	movs	r3, #18
 8007266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007268:	2303      	movs	r3, #3
 800726a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800726c:	f107 0310 	add.w	r3, r7, #16
 8007270:	4619      	mov	r1, r3
 8007272:	480b      	ldr	r0, [pc, #44]	; (80072a0 <HAL_I2C_MspInit+0x78>)
 8007274:	f000 ff68 	bl	8008148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_I2C_MspInit+0x74>)
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	4a07      	ldr	r2, [pc, #28]	; (800729c <HAL_I2C_MspInit+0x74>)
 800727e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007282:	61d3      	str	r3, [r2, #28]
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <HAL_I2C_MspInit+0x74>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007290:	bf00      	nop
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40005400 	.word	0x40005400
 800729c:	40021000 	.word	0x40021000
 80072a0:	40010c00 	.word	0x40010c00

080072a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ac:	f107 0318 	add.w	r3, r7, #24
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a37      	ldr	r2, [pc, #220]	; (800739c <HAL_SPI_MspInit+0xf8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d130      	bne.n	8007326 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80072c4:	4b36      	ldr	r3, [pc, #216]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	4a35      	ldr	r2, [pc, #212]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072ce:	6193      	str	r3, [r2, #24]
 80072d0:	4b33      	ldr	r3, [pc, #204]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072dc:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	4a2f      	ldr	r2, [pc, #188]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072e2:	f043 0304 	orr.w	r3, r3, #4
 80072e6:	6193      	str	r3, [r2, #24]
 80072e8:	4b2d      	ldr	r3, [pc, #180]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80072f4:	23a0      	movs	r3, #160	; 0xa0
 80072f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f8:	2302      	movs	r3, #2
 80072fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072fc:	2303      	movs	r3, #3
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007300:	f107 0318 	add.w	r3, r7, #24
 8007304:	4619      	mov	r1, r3
 8007306:	4827      	ldr	r0, [pc, #156]	; (80073a4 <HAL_SPI_MspInit+0x100>)
 8007308:	f000 ff1e 	bl	8008148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007310:	2300      	movs	r3, #0
 8007312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007314:	2300      	movs	r3, #0
 8007316:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007318:	f107 0318 	add.w	r3, r7, #24
 800731c:	4619      	mov	r1, r3
 800731e:	4821      	ldr	r0, [pc, #132]	; (80073a4 <HAL_SPI_MspInit+0x100>)
 8007320:	f000 ff12 	bl	8008148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007324:	e036      	b.n	8007394 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <HAL_SPI_MspInit+0x104>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d131      	bne.n	8007394 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007330:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 8007336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800733a:	61d3      	str	r3, [r2, #28]
 800733c:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 800734e:	f043 0308 	orr.w	r3, r3, #8
 8007352:	6193      	str	r3, [r2, #24]
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <HAL_SPI_MspInit+0xfc>)
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007360:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007366:	2302      	movs	r3, #2
 8007368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800736a:	2303      	movs	r3, #3
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	4619      	mov	r1, r3
 8007374:	480d      	ldr	r0, [pc, #52]	; (80073ac <HAL_SPI_MspInit+0x108>)
 8007376:	f000 fee7 	bl	8008148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800737a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800737e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007384:	2300      	movs	r3, #0
 8007386:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007388:	f107 0318 	add.w	r3, r7, #24
 800738c:	4619      	mov	r1, r3
 800738e:	4807      	ldr	r0, [pc, #28]	; (80073ac <HAL_SPI_MspInit+0x108>)
 8007390:	f000 feda 	bl	8008148 <HAL_GPIO_Init>
}
 8007394:	bf00      	nop
 8007396:	3728      	adds	r7, #40	; 0x28
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40013000 	.word	0x40013000
 80073a0:	40021000 	.word	0x40021000
 80073a4:	40010800 	.word	0x40010800
 80073a8:	40003800 	.word	0x40003800
 80073ac:	40010c00 	.word	0x40010c00

080073b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a23      	ldr	r2, [pc, #140]	; (800744c <HAL_TIM_Base_MspInit+0x9c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d10c      	bne.n	80073dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073c2:	4b23      	ldr	r3, [pc, #140]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	4a22      	ldr	r2, [pc, #136]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073cc:	6193      	str	r3, [r2, #24]
 80073ce:	4b20      	ldr	r3, [pc, #128]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80073da:	e032      	b.n	8007442 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e4:	d114      	bne.n	8007410 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	61d3      	str	r3, [r2, #28]
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80073fe:	2200      	movs	r2, #0
 8007400:	2103      	movs	r1, #3
 8007402:	201c      	movs	r0, #28
 8007404:	f000 fba9 	bl	8007b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007408:	201c      	movs	r0, #28
 800740a:	f000 fbc2 	bl	8007b92 <HAL_NVIC_EnableIRQ>
}
 800740e:	e018      	b.n	8007442 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a0f      	ldr	r2, [pc, #60]	; (8007454 <HAL_TIM_Base_MspInit+0xa4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d113      	bne.n	8007442 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800741a:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	61d3      	str	r3, [r2, #28]
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <HAL_TIM_Base_MspInit+0xa0>)
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	201e      	movs	r0, #30
 8007438:	f000 fb8f 	bl	8007b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800743c:	201e      	movs	r0, #30
 800743e:	f000 fba8 	bl	8007b92 <HAL_NVIC_EnableIRQ>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40021000 	.word	0x40021000
 8007454:	40000800 	.word	0x40000800

08007458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007460:	f107 0318 	add.w	r3, r7, #24
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3b      	ldr	r2, [pc, #236]	; (8007560 <HAL_UART_MspInit+0x108>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d132      	bne.n	80074de <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007478:	4b3a      	ldr	r3, [pc, #232]	; (8007564 <HAL_UART_MspInit+0x10c>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	4a39      	ldr	r2, [pc, #228]	; (8007564 <HAL_UART_MspInit+0x10c>)
 800747e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007482:	6193      	str	r3, [r2, #24]
 8007484:	4b37      	ldr	r3, [pc, #220]	; (8007564 <HAL_UART_MspInit+0x10c>)
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007490:	4b34      	ldr	r3, [pc, #208]	; (8007564 <HAL_UART_MspInit+0x10c>)
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	4a33      	ldr	r2, [pc, #204]	; (8007564 <HAL_UART_MspInit+0x10c>)
 8007496:	f043 0304 	orr.w	r3, r3, #4
 800749a:	6193      	str	r3, [r2, #24]
 800749c:	4b31      	ldr	r3, [pc, #196]	; (8007564 <HAL_UART_MspInit+0x10c>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ae:	2302      	movs	r3, #2
 80074b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074b2:	2303      	movs	r3, #3
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b6:	f107 0318 	add.w	r3, r7, #24
 80074ba:	4619      	mov	r1, r3
 80074bc:	482a      	ldr	r0, [pc, #168]	; (8007568 <HAL_UART_MspInit+0x110>)
 80074be:	f000 fe43 	bl	8008148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d0:	f107 0318 	add.w	r3, r7, #24
 80074d4:	4619      	mov	r1, r3
 80074d6:	4824      	ldr	r0, [pc, #144]	; (8007568 <HAL_UART_MspInit+0x110>)
 80074d8:	f000 fe36 	bl	8008148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80074dc:	e03c      	b.n	8007558 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a22      	ldr	r2, [pc, #136]	; (800756c <HAL_UART_MspInit+0x114>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d137      	bne.n	8007558 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <HAL_UART_MspInit+0x10c>)
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <HAL_UART_MspInit+0x10c>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f2:	61d3      	str	r3, [r2, #28]
 80074f4:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <HAL_UART_MspInit+0x10c>)
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007500:	4b18      	ldr	r3, [pc, #96]	; (8007564 <HAL_UART_MspInit+0x10c>)
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	4a17      	ldr	r2, [pc, #92]	; (8007564 <HAL_UART_MspInit+0x10c>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	6193      	str	r3, [r2, #24]
 800750c:	4b15      	ldr	r3, [pc, #84]	; (8007564 <HAL_UART_MspInit+0x10c>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007518:	2304      	movs	r3, #4
 800751a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751c:	2302      	movs	r3, #2
 800751e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007520:	2303      	movs	r3, #3
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007524:	f107 0318 	add.w	r3, r7, #24
 8007528:	4619      	mov	r1, r3
 800752a:	480f      	ldr	r0, [pc, #60]	; (8007568 <HAL_UART_MspInit+0x110>)
 800752c:	f000 fe0c 	bl	8008148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007530:	2308      	movs	r3, #8
 8007532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007538:	2300      	movs	r3, #0
 800753a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800753c:	f107 0318 	add.w	r3, r7, #24
 8007540:	4619      	mov	r1, r3
 8007542:	4809      	ldr	r0, [pc, #36]	; (8007568 <HAL_UART_MspInit+0x110>)
 8007544:	f000 fe00 	bl	8008148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	2026      	movs	r0, #38	; 0x26
 800754e:	f000 fb04 	bl	8007b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007552:	2026      	movs	r0, #38	; 0x26
 8007554:	f000 fb1d 	bl	8007b92 <HAL_NVIC_EnableIRQ>
}
 8007558:	bf00      	nop
 800755a:	3728      	adds	r7, #40	; 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40013800 	.word	0x40013800
 8007564:	40021000 	.word	0x40021000
 8007568:	40010800 	.word	0x40010800
 800756c:	40004400 	.word	0x40004400

08007570 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <HAL_UART_MspDeInit+0x58>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10b      	bne.n	800759a <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <HAL_UART_MspDeInit+0x5c>)
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	4a11      	ldr	r2, [pc, #68]	; (80075cc <HAL_UART_MspDeInit+0x5c>)
 8007588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800758e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007592:	480f      	ldr	r0, [pc, #60]	; (80075d0 <HAL_UART_MspDeInit+0x60>)
 8007594:	f000 ff5c 	bl	8008450 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8007598:	e011      	b.n	80075be <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0d      	ldr	r2, [pc, #52]	; (80075d4 <HAL_UART_MspDeInit+0x64>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d10c      	bne.n	80075be <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <HAL_UART_MspDeInit+0x5c>)
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4a08      	ldr	r2, [pc, #32]	; (80075cc <HAL_UART_MspDeInit+0x5c>)
 80075aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075ae:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80075b0:	210c      	movs	r1, #12
 80075b2:	4807      	ldr	r0, [pc, #28]	; (80075d0 <HAL_UART_MspDeInit+0x60>)
 80075b4:	f000 ff4c 	bl	8008450 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80075b8:	2026      	movs	r0, #38	; 0x26
 80075ba:	f000 faf8 	bl	8007bae <HAL_NVIC_DisableIRQ>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40013800 	.word	0x40013800
 80075cc:	40021000 	.word	0x40021000
 80075d0:	40010800 	.word	0x40010800
 80075d4:	40004400 	.word	0x40004400

080075d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80075dc:	e7fe      	b.n	80075dc <NMI_Handler+0x4>

080075de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075de:	b480      	push	{r7}
 80075e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075e2:	e7fe      	b.n	80075e2 <HardFault_Handler+0x4>

080075e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075e8:	e7fe      	b.n	80075e8 <MemManage_Handler+0x4>

080075ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075ea:	b480      	push	{r7}
 80075ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075ee:	e7fe      	b.n	80075ee <BusFault_Handler+0x4>

080075f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075f4:	e7fe      	b.n	80075f4 <UsageFault_Handler+0x4>

080075f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075f6:	b480      	push	{r7}
 80075f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr

08007602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800760e:	b480      	push	{r7}
 8007610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007612:	bf00      	nop
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800761e:	f000 f961 	bl	80078e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007622:	bf00      	nop
 8007624:	bd80      	pop	{r7, pc}

08007626 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO_Pin);
 800762a:	2002      	movs	r0, #2
 800762c:	f001 f814 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007630:	bf00      	nop
 8007632:	bd80      	pop	{r7, pc}

08007634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007638:	4802      	ldr	r0, [pc, #8]	; (8007644 <TIM2_IRQHandler+0x10>)
 800763a:	f002 ff69 	bl	800a510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800763e:	bf00      	nop
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20001764 	.word	0x20001764

08007648 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800764c:	4802      	ldr	r0, [pc, #8]	; (8007658 <TIM4_IRQHandler+0x10>)
 800764e:	f002 ff5f 	bl	800a510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200017ac 	.word	0x200017ac

0800765c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007660:	4802      	ldr	r0, [pc, #8]	; (800766c <USART2_IRQHandler+0x10>)
 8007662:	f003 fbdb 	bl	800ae1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007666:	bf00      	nop
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000183c 	.word	0x2000183c

08007670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO_2_Pin);
 8007674:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007678:	f000 ffee 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800767c:	bf00      	nop
 800767e:	bd80      	pop	{r7, pc}

08007680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  return 1;
 8007684:	2301      	movs	r3, #1
}
 8007686:	4618      	mov	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <_kill>:

int _kill(int pid, int sig)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007698:	f004 ff16 	bl	800c4c8 <__errno>
 800769c:	4603      	mov	r3, r0
 800769e:	2216      	movs	r2, #22
 80076a0:	601a      	str	r2, [r3, #0]
  return -1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <_exit>:

void _exit (int status)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80076b6:	f04f 31ff 	mov.w	r1, #4294967295
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ffe7 	bl	800768e <_kill>
  while (1) {}    /* Make sure we hang here */
 80076c0:	e7fe      	b.n	80076c0 <_exit+0x12>

080076c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e00a      	b.n	80076ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80076d4:	f3af 8000 	nop.w
 80076d8:	4601      	mov	r1, r0
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	60ba      	str	r2, [r7, #8]
 80076e0:	b2ca      	uxtb	r2, r1
 80076e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	3301      	adds	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	dbf0      	blt.n	80076d4 <_read+0x12>
  }

  return len;
 80076f2:	687b      	ldr	r3, [r7, #4]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e009      	b.n	8007722 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	60ba      	str	r2, [r7, #8]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3301      	adds	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	dbf1      	blt.n	800770e <_write+0x12>
  }
  return len;
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <_close>:

int _close(int file)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800773c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800775a:	605a      	str	r2, [r3, #4]
  return 0;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	bc80      	pop	{r7}
 8007766:	4770      	bx	lr

08007768 <_isatty>:

int _isatty(int file)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007770:	2301      	movs	r3, #1
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800779c:	4a14      	ldr	r2, [pc, #80]	; (80077f0 <_sbrk+0x5c>)
 800779e:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <_sbrk+0x60>)
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <_sbrk+0x64>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <_sbrk+0x64>)
 80077b2:	4a12      	ldr	r2, [pc, #72]	; (80077fc <_sbrk+0x68>)
 80077b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077b6:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <_sbrk+0x64>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d207      	bcs.n	80077d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077c4:	f004 fe80 	bl	800c4c8 <__errno>
 80077c8:	4603      	mov	r3, r0
 80077ca:	220c      	movs	r2, #12
 80077cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	e009      	b.n	80077e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80077d4:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <_sbrk+0x64>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <_sbrk+0x64>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4413      	add	r3, r2
 80077e2:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <_sbrk+0x64>)
 80077e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20005000 	.word	0x20005000
 80077f4:	00000400 	.word	0x00000400
 80077f8:	20001afc 	.word	0x20001afc
 80077fc:	20001c78 	.word	0x20001c78

08007800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800780c:	f7ff fff8 	bl	8007800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007810:	480b      	ldr	r0, [pc, #44]	; (8007840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007812:	490c      	ldr	r1, [pc, #48]	; (8007844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007814:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007818:	e002      	b.n	8007820 <LoopCopyDataInit>

0800781a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800781a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800781c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800781e:	3304      	adds	r3, #4

08007820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007824:	d3f9      	bcc.n	800781a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007828:	4c09      	ldr	r4, [pc, #36]	; (8007850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800782a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800782c:	e001      	b.n	8007832 <LoopFillZerobss>

0800782e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800782e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007830:	3204      	adds	r2, #4

08007832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007834:	d3fb      	bcc.n	800782e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007836:	f004 fe4d 	bl	800c4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800783a:	f7ff f89f 	bl	800697c <main>
  bx lr
 800783e:	4770      	bx	lr
  ldr r0, =_sdata
 8007840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007844:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8007848:	08011248 	.word	0x08011248
  ldr r2, =_sbss
 800784c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8007850:	20001c74 	.word	0x20001c74

08007854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007854:	e7fe      	b.n	8007854 <ADC1_2_IRQHandler>
	...

08007858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800785c:	4b08      	ldr	r3, [pc, #32]	; (8007880 <HAL_Init+0x28>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a07      	ldr	r2, [pc, #28]	; (8007880 <HAL_Init+0x28>)
 8007862:	f043 0310 	orr.w	r3, r3, #16
 8007866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007868:	2003      	movs	r0, #3
 800786a:	f000 f96b 	bl	8007b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800786e:	200f      	movs	r0, #15
 8007870:	f000 f808 	bl	8007884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007874:	f7ff fca6 	bl	80071c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40022000 	.word	0x40022000

08007884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800788c:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <HAL_InitTick+0x54>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b12      	ldr	r3, [pc, #72]	; (80078dc <HAL_InitTick+0x58>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800789a:	fbb3 f3f1 	udiv	r3, r3, r1
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f991 	bl	8007bca <HAL_SYSTICK_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e00e      	b.n	80078d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b0f      	cmp	r3, #15
 80078b6:	d80a      	bhi.n	80078ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078b8:	2200      	movs	r2, #0
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	f000 f94b 	bl	8007b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078c4:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <HAL_InitTick+0x5c>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e000      	b.n	80078d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200000ac 	.word	0x200000ac
 80078dc:	200000b4 	.word	0x200000b4
 80078e0:	200000b0 	.word	0x200000b0

080078e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_IncTick+0x1c>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <HAL_IncTick+0x20>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4413      	add	r3, r2
 80078f4:	4a03      	ldr	r2, [pc, #12]	; (8007904 <HAL_IncTick+0x20>)
 80078f6:	6013      	str	r3, [r2, #0]
}
 80078f8:	bf00      	nop
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	200000b4 	.word	0x200000b4
 8007904:	20001b00 	.word	0x20001b00

08007908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  return uwTick;
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <HAL_GetTick+0x10>)
 800790e:	681b      	ldr	r3, [r3, #0]
}
 8007910:	4618      	mov	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr
 8007918:	20001b00 	.word	0x20001b00

0800791c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007924:	f7ff fff0 	bl	8007908 <HAL_GetTick>
 8007928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d005      	beq.n	8007942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <HAL_Delay+0x44>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007942:	bf00      	nop
 8007944:	f7ff ffe0 	bl	8007908 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	429a      	cmp	r2, r3
 8007952:	d8f7      	bhi.n	8007944 <HAL_Delay+0x28>
  {
  }
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	200000b4 	.word	0x200000b4

08007964 <__NVIC_SetPriorityGrouping>:
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007980:	4013      	ands	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800798c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007996:	4a04      	ldr	r2, [pc, #16]	; (80079a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	60d3      	str	r3, [r2, #12]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	e000ed00 	.word	0xe000ed00

080079ac <__NVIC_GetPriorityGrouping>:
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__NVIC_GetPriorityGrouping+0x18>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	f003 0307 	and.w	r3, r3, #7
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <__NVIC_EnableIRQ>:
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	db0b      	blt.n	80079f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	f003 021f 	and.w	r2, r3, #31
 80079e0:	4906      	ldr	r1, [pc, #24]	; (80079fc <__NVIC_EnableIRQ+0x34>)
 80079e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	2001      	movs	r0, #1
 80079ea:	fa00 f202 	lsl.w	r2, r0, r2
 80079ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr
 80079fc:	e000e100 	.word	0xe000e100

08007a00 <__NVIC_DisableIRQ>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db12      	blt.n	8007a38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	f003 021f 	and.w	r2, r3, #31
 8007a18:	490a      	ldr	r1, [pc, #40]	; (8007a44 <__NVIC_DisableIRQ+0x44>)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2001      	movs	r0, #1
 8007a22:	fa00 f202 	lsl.w	r2, r0, r2
 8007a26:	3320      	adds	r3, #32
 8007a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a2c:	f3bf 8f4f 	dsb	sy
}
 8007a30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a32:	f3bf 8f6f 	isb	sy
}
 8007a36:	bf00      	nop
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	e000e100 	.word	0xe000e100

08007a48 <__NVIC_SetPriority>:
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	db0a      	blt.n	8007a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	490c      	ldr	r1, [pc, #48]	; (8007a94 <__NVIC_SetPriority+0x4c>)
 8007a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a66:	0112      	lsls	r2, r2, #4
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a70:	e00a      	b.n	8007a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	4908      	ldr	r1, [pc, #32]	; (8007a98 <__NVIC_SetPriority+0x50>)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	0112      	lsls	r2, r2, #4
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	440b      	add	r3, r1
 8007a86:	761a      	strb	r2, [r3, #24]
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	e000e100 	.word	0xe000e100
 8007a98:	e000ed00 	.word	0xe000ed00

08007a9c <NVIC_EncodePriority>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b089      	sub	sp, #36	; 0x24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f1c3 0307 	rsb	r3, r3, #7
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	bf28      	it	cs
 8007aba:	2304      	movcs	r3, #4
 8007abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d902      	bls.n	8007acc <NVIC_EncodePriority+0x30>
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3b03      	subs	r3, #3
 8007aca:	e000      	b.n	8007ace <NVIC_EncodePriority+0x32>
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43da      	mvns	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	401a      	ands	r2, r3
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	43d9      	mvns	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007af4:	4313      	orrs	r3, r2
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3724      	adds	r7, #36	; 0x24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b10:	d301      	bcc.n	8007b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b12:	2301      	movs	r3, #1
 8007b14:	e00f      	b.n	8007b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <SysTick_Config+0x40>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b1e:	210f      	movs	r1, #15
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	f7ff ff90 	bl	8007a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <SysTick_Config+0x40>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <SysTick_Config+0x40>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000e010 	.word	0xe000e010

08007b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff ff09 	bl	8007964 <__NVIC_SetPriorityGrouping>
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	4603      	mov	r3, r0
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b6c:	f7ff ff1e 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	6978      	ldr	r0, [r7, #20]
 8007b78:	f7ff ff90 	bl	8007a9c <NVIC_EncodePriority>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff ff5f 	bl	8007a48 <__NVIC_SetPriority>
}
 8007b8a:	bf00      	nop
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	4603      	mov	r3, r0
 8007b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ff11 	bl	80079c8 <__NVIC_EnableIRQ>
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff ff1f 	bl	8007a00 <__NVIC_DisableIRQ>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff ff94 	bl	8007b00 <SysTick_Config>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d008      	beq.n	8007c0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e020      	b.n	8007c4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 020e 	bic.w	r2, r2, #14
 8007c1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	2101      	movs	r1, #1
 8007c36:	fa01 f202 	lsl.w	r2, r1, r2
 8007c3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d005      	beq.n	8007c7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2204      	movs	r2, #4
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	e051      	b.n	8007d20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 020e 	bic.w	r2, r2, #14
 8007c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <HAL_DMA_Abort_IT+0xd4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d029      	beq.n	8007cfa <HAL_DMA_Abort_IT+0xa2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <HAL_DMA_Abort_IT+0xd8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_DMA_Abort_IT+0x9e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <HAL_DMA_Abort_IT+0xdc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01a      	beq.n	8007cf0 <HAL_DMA_Abort_IT+0x98>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	; (8007d38 <HAL_DMA_Abort_IT+0xe0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d012      	beq.n	8007cea <HAL_DMA_Abort_IT+0x92>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <HAL_DMA_Abort_IT+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_DMA_Abort_IT+0x8c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	; (8007d40 <HAL_DMA_Abort_IT+0xe8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d102      	bne.n	8007cde <HAL_DMA_Abort_IT+0x86>
 8007cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cdc:	e00e      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ce2:	e00b      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ce8:	e008      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cee:	e005      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cf4:	e002      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	e000      	b.n	8007cfc <HAL_DMA_Abort_IT+0xa4>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <HAL_DMA_Abort_IT+0xec>)
 8007cfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
    } 
  }
  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40020008 	.word	0x40020008
 8007d30:	4002001c 	.word	0x4002001c
 8007d34:	40020030 	.word	0x40020030
 8007d38:	40020044 	.word	0x40020044
 8007d3c:	40020058 	.word	0x40020058
 8007d40:	4002006c 	.word	0x4002006c
 8007d44:	40020000 	.word	0x40020000

08007d48 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d62:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <HAL_FLASH_Program+0xd8>)
 8007d64:	7e1b      	ldrb	r3, [r3, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_FLASH_Program+0x26>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e054      	b.n	8007e18 <HAL_FLASH_Program+0xd0>
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <HAL_FLASH_Program+0xd8>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d78:	f000 f8a8 	bl	8007ecc <FLASH_WaitForLastOperation>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d144      	bne.n	8007e10 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d102      	bne.n	8007d92 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	757b      	strb	r3, [r7, #21]
 8007d90:	e007      	b.n	8007da2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d102      	bne.n	8007d9e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	757b      	strb	r3, [r7, #21]
 8007d9c:	e001      	b.n	8007da2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8007d9e:	2304      	movs	r3, #4
 8007da0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	75bb      	strb	r3, [r7, #22]
 8007da6:	e02d      	b.n	8007e04 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007da8:	7dbb      	ldrb	r3, [r7, #22]
 8007daa:	005a      	lsls	r2, r3, #1
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	eb02 0c03 	add.w	ip, r2, r3
 8007db2:	7dbb      	ldrb	r3, [r7, #22]
 8007db4:	0119      	lsls	r1, r3, #4
 8007db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dba:	f1c1 0620 	rsb	r6, r1, #32
 8007dbe:	f1a1 0020 	sub.w	r0, r1, #32
 8007dc2:	fa22 f401 	lsr.w	r4, r2, r1
 8007dc6:	fa03 f606 	lsl.w	r6, r3, r6
 8007dca:	4334      	orrs	r4, r6
 8007dcc:	fa23 f000 	lsr.w	r0, r3, r0
 8007dd0:	4304      	orrs	r4, r0
 8007dd2:	fa23 f501 	lsr.w	r5, r3, r1
 8007dd6:	b2a3      	uxth	r3, r4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4660      	mov	r0, ip
 8007ddc:	f000 f85a 	bl	8007e94 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007de0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007de4:	f000 f872 	bl	8007ecc <FLASH_WaitForLastOperation>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <HAL_FLASH_Program+0xdc>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	4a0c      	ldr	r2, [pc, #48]	; (8007e24 <HAL_FLASH_Program+0xdc>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d107      	bne.n	8007e0e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	3301      	adds	r3, #1
 8007e02:	75bb      	strb	r3, [r7, #22]
 8007e04:	7dba      	ldrb	r2, [r7, #22]
 8007e06:	7d7b      	ldrb	r3, [r7, #21]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3cd      	bcc.n	8007da8 <HAL_FLASH_Program+0x60>
 8007e0c:	e000      	b.n	8007e10 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007e0e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <HAL_FLASH_Program+0xd8>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	761a      	strb	r2, [r3, #24]

  return status;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	20001b08 	.word	0x20001b08
 8007e24:	40022000 	.word	0x40022000

08007e28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <HAL_FLASH_Unlock+0x40>)
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00d      	beq.n	8007e5a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <HAL_FLASH_Unlock+0x40>)
 8007e40:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <HAL_FLASH_Unlock+0x44>)
 8007e42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007e44:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <HAL_FLASH_Unlock+0x40>)
 8007e46:	4a0a      	ldr	r2, [pc, #40]	; (8007e70 <HAL_FLASH_Unlock+0x48>)
 8007e48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <HAL_FLASH_Unlock+0x40>)
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40022000 	.word	0x40022000
 8007e6c:	45670123 	.word	0x45670123
 8007e70:	cdef89ab 	.word	0xcdef89ab

08007e74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <HAL_FLASH_Lock+0x1c>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4a04      	ldr	r2, [pc, #16]	; (8007e90 <HAL_FLASH_Lock+0x1c>)
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40022000 	.word	0x40022000

08007e94 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ea0:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <FLASH_Program_HalfWord+0x30>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <FLASH_Program_HalfWord+0x34>)
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	4a07      	ldr	r2, [pc, #28]	; (8007ec8 <FLASH_Program_HalfWord+0x34>)
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	887a      	ldrh	r2, [r7, #2]
 8007eb6:	801a      	strh	r2, [r3, #0]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20001b08 	.word	0x20001b08
 8007ec8:	40022000 	.word	0x40022000

08007ecc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007ed4:	f7ff fd18 	bl	8007908 <HAL_GetTick>
 8007ed8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007eda:	e010      	b.n	8007efe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d00c      	beq.n	8007efe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <FLASH_WaitForLastOperation+0x2e>
 8007eea:	f7ff fd0d 	bl	8007908 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d201      	bcs.n	8007efe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e025      	b.n	8007f4a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e8      	bne.n	8007edc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007f0a:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f18:	2220      	movs	r2, #32
 8007f1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007f34:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <FLASH_WaitForLastOperation+0x88>)
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007f40:	f000 f80a 	bl	8007f58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	40022000 	.word	0x40022000

08007f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007f62:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d009      	beq.n	8007f82 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007f6e:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f043 0302 	orr.w	r3, r3, #2
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007f78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f043 0310 	orr.w	r3, r3, #16
 8007f80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007f82:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007f8e:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007f98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f043 0304 	orr.w	r3, r3, #4
 8007fa0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007fae:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	; (8007ff4 <FLASH_SetErrorCode+0x9c>)
 8007fb8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007fba:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	4a0c      	ldr	r2, [pc, #48]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f240 1201 	movw	r2, #257	; 0x101
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d106      	bne.n	8007fde <FLASH_SetErrorCode+0x86>
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	61d3      	str	r3, [r2, #28]
}  
 8007fdc:	e002      	b.n	8007fe4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007fde:	4a04      	ldr	r2, [pc, #16]	; (8007ff0 <FLASH_SetErrorCode+0x98>)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60d3      	str	r3, [r2, #12]
}  
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40022000 	.word	0x40022000
 8007ff4:	20001b08 	.word	0x20001b08

08007ff8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800800a:	4b2f      	ldr	r3, [pc, #188]	; (80080c8 <HAL_FLASHEx_Erase+0xd0>)
 800800c:	7e1b      	ldrb	r3, [r3, #24]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_FLASHEx_Erase+0x1e>
 8008012:	2302      	movs	r3, #2
 8008014:	e053      	b.n	80080be <HAL_FLASHEx_Erase+0xc6>
 8008016:	4b2c      	ldr	r3, [pc, #176]	; (80080c8 <HAL_FLASHEx_Erase+0xd0>)
 8008018:	2201      	movs	r2, #1
 800801a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d116      	bne.n	8008052 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008028:	f7ff ff50 	bl	8007ecc <FLASH_WaitForLastOperation>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d141      	bne.n	80080b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8008032:	2001      	movs	r0, #1
 8008034:	f000 f84c 	bl	80080d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800803c:	f7ff ff46 	bl	8007ecc <FLASH_WaitForLastOperation>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008044:	4b21      	ldr	r3, [pc, #132]	; (80080cc <HAL_FLASHEx_Erase+0xd4>)
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	4a20      	ldr	r2, [pc, #128]	; (80080cc <HAL_FLASHEx_Erase+0xd4>)
 800804a:	f023 0304 	bic.w	r3, r3, #4
 800804e:	6113      	str	r3, [r2, #16]
 8008050:	e031      	b.n	80080b6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008052:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008056:	f7ff ff39 	bl	8007ecc <FLASH_WaitForLastOperation>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d12a      	bne.n	80080b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	e019      	b.n	80080a4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	f000 f849 	bl	8008108 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008076:	f24c 3050 	movw	r0, #50000	; 0xc350
 800807a:	f7ff ff27 	bl	8007ecc <FLASH_WaitForLastOperation>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <HAL_FLASHEx_Erase+0xd4>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	4a11      	ldr	r2, [pc, #68]	; (80080cc <HAL_FLASHEx_Erase+0xd4>)
 8008088:	f023 0302 	bic.w	r3, r3, #2
 800808c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	601a      	str	r2, [r3, #0]
            break;
 800809a:	e00c      	b.n	80080b6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	029a      	lsls	r2, r3, #10
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	4413      	add	r3, r2
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3dc      	bcc.n	8008070 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80080b6:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <HAL_FLASHEx_Erase+0xd0>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	761a      	strb	r2, [r3, #24]

  return status;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20001b08 	.word	0x20001b08
 80080cc:	40022000 	.word	0x40022000

080080d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <FLASH_MassErase+0x30>)
 80080da:	2200      	movs	r2, #0
 80080dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <FLASH_MassErase+0x34>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <FLASH_MassErase+0x34>)
 80080e4:	f043 0304 	orr.w	r3, r3, #4
 80080e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <FLASH_MassErase+0x34>)
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	4a05      	ldr	r2, [pc, #20]	; (8008104 <FLASH_MassErase+0x34>)
 80080f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	20001b08 	.word	0x20001b08
 8008104:	40022000 	.word	0x40022000

08008108 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <FLASH_PageErase+0x38>)
 8008112:	2200      	movs	r2, #0
 8008114:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <FLASH_PageErase+0x3c>)
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <FLASH_PageErase+0x3c>)
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <FLASH_PageErase+0x3c>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008128:	4b06      	ldr	r3, [pc, #24]	; (8008144 <FLASH_PageErase+0x3c>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4a05      	ldr	r2, [pc, #20]	; (8008144 <FLASH_PageErase+0x3c>)
 800812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008132:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20001b08 	.word	0x20001b08
 8008144:	40022000 	.word	0x40022000

08008148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008148:	b480      	push	{r7}
 800814a:	b08b      	sub	sp, #44	; 0x2c
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008156:	2300      	movs	r3, #0
 8008158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800815a:	e169      	b.n	8008430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800815c:	2201      	movs	r2, #1
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	4013      	ands	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	429a      	cmp	r2, r3
 8008176:	f040 8158 	bne.w	800842a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	4a9a      	ldr	r2, [pc, #616]	; (80083e8 <HAL_GPIO_Init+0x2a0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d05e      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
 8008184:	4a98      	ldr	r2, [pc, #608]	; (80083e8 <HAL_GPIO_Init+0x2a0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d875      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 800818a:	4a98      	ldr	r2, [pc, #608]	; (80083ec <HAL_GPIO_Init+0x2a4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d058      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
 8008190:	4a96      	ldr	r2, [pc, #600]	; (80083ec <HAL_GPIO_Init+0x2a4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d86f      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 8008196:	4a96      	ldr	r2, [pc, #600]	; (80083f0 <HAL_GPIO_Init+0x2a8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d052      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
 800819c:	4a94      	ldr	r2, [pc, #592]	; (80083f0 <HAL_GPIO_Init+0x2a8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d869      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 80081a2:	4a94      	ldr	r2, [pc, #592]	; (80083f4 <HAL_GPIO_Init+0x2ac>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d04c      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
 80081a8:	4a92      	ldr	r2, [pc, #584]	; (80083f4 <HAL_GPIO_Init+0x2ac>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d863      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 80081ae:	4a92      	ldr	r2, [pc, #584]	; (80083f8 <HAL_GPIO_Init+0x2b0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d046      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
 80081b4:	4a90      	ldr	r2, [pc, #576]	; (80083f8 <HAL_GPIO_Init+0x2b0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d85d      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 80081ba:	2b12      	cmp	r3, #18
 80081bc:	d82a      	bhi.n	8008214 <HAL_GPIO_Init+0xcc>
 80081be:	2b12      	cmp	r3, #18
 80081c0:	d859      	bhi.n	8008276 <HAL_GPIO_Init+0x12e>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <HAL_GPIO_Init+0x80>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	08008243 	.word	0x08008243
 80081cc:	0800821d 	.word	0x0800821d
 80081d0:	0800822f 	.word	0x0800822f
 80081d4:	08008271 	.word	0x08008271
 80081d8:	08008277 	.word	0x08008277
 80081dc:	08008277 	.word	0x08008277
 80081e0:	08008277 	.word	0x08008277
 80081e4:	08008277 	.word	0x08008277
 80081e8:	08008277 	.word	0x08008277
 80081ec:	08008277 	.word	0x08008277
 80081f0:	08008277 	.word	0x08008277
 80081f4:	08008277 	.word	0x08008277
 80081f8:	08008277 	.word	0x08008277
 80081fc:	08008277 	.word	0x08008277
 8008200:	08008277 	.word	0x08008277
 8008204:	08008277 	.word	0x08008277
 8008208:	08008277 	.word	0x08008277
 800820c:	08008225 	.word	0x08008225
 8008210:	08008239 	.word	0x08008239
 8008214:	4a79      	ldr	r2, [pc, #484]	; (80083fc <HAL_GPIO_Init+0x2b4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800821a:	e02c      	b.n	8008276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	623b      	str	r3, [r7, #32]
          break;
 8008222:	e029      	b.n	8008278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	623b      	str	r3, [r7, #32]
          break;
 800822c:	e024      	b.n	8008278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	3308      	adds	r3, #8
 8008234:	623b      	str	r3, [r7, #32]
          break;
 8008236:	e01f      	b.n	8008278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	330c      	adds	r3, #12
 800823e:	623b      	str	r3, [r7, #32]
          break;
 8008240:	e01a      	b.n	8008278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800824a:	2304      	movs	r3, #4
 800824c:	623b      	str	r3, [r7, #32]
          break;
 800824e:	e013      	b.n	8008278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d105      	bne.n	8008264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008258:	2308      	movs	r3, #8
 800825a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	611a      	str	r2, [r3, #16]
          break;
 8008262:	e009      	b.n	8008278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008264:	2308      	movs	r3, #8
 8008266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	615a      	str	r2, [r3, #20]
          break;
 800826e:	e003      	b.n	8008278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008270:	2300      	movs	r3, #0
 8008272:	623b      	str	r3, [r7, #32]
          break;
 8008274:	e000      	b.n	8008278 <HAL_GPIO_Init+0x130>
          break;
 8008276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2bff      	cmp	r3, #255	; 0xff
 800827c:	d801      	bhi.n	8008282 <HAL_GPIO_Init+0x13a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	e001      	b.n	8008286 <HAL_GPIO_Init+0x13e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3304      	adds	r3, #4
 8008286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2bff      	cmp	r3, #255	; 0xff
 800828c:	d802      	bhi.n	8008294 <HAL_GPIO_Init+0x14c>
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	e002      	b.n	800829a <HAL_GPIO_Init+0x152>
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	3b08      	subs	r3, #8
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	210f      	movs	r1, #15
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	fa01 f303 	lsl.w	r3, r1, r3
 80082a8:	43db      	mvns	r3, r3
 80082aa:	401a      	ands	r2, r3
 80082ac:	6a39      	ldr	r1, [r7, #32]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	fa01 f303 	lsl.w	r3, r1, r3
 80082b4:	431a      	orrs	r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80b1 	beq.w	800842a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80082c8:	4b4d      	ldr	r3, [pc, #308]	; (8008400 <HAL_GPIO_Init+0x2b8>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4a4c      	ldr	r2, [pc, #304]	; (8008400 <HAL_GPIO_Init+0x2b8>)
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	6193      	str	r3, [r2, #24]
 80082d4:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <HAL_GPIO_Init+0x2b8>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80082e0:	4a48      	ldr	r2, [pc, #288]	; (8008404 <HAL_GPIO_Init+0x2bc>)
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	3302      	adds	r3, #2
 80082e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	220f      	movs	r2, #15
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	43db      	mvns	r3, r3
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a40      	ldr	r2, [pc, #256]	; (8008408 <HAL_GPIO_Init+0x2c0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d013      	beq.n	8008334 <HAL_GPIO_Init+0x1ec>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3f      	ldr	r2, [pc, #252]	; (800840c <HAL_GPIO_Init+0x2c4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00d      	beq.n	8008330 <HAL_GPIO_Init+0x1e8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a3e      	ldr	r2, [pc, #248]	; (8008410 <HAL_GPIO_Init+0x2c8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <HAL_GPIO_Init+0x1e4>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a3d      	ldr	r2, [pc, #244]	; (8008414 <HAL_GPIO_Init+0x2cc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <HAL_GPIO_Init+0x1e0>
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <HAL_GPIO_Init+0x1ee>
 8008328:	2304      	movs	r3, #4
 800832a:	e004      	b.n	8008336 <HAL_GPIO_Init+0x1ee>
 800832c:	2302      	movs	r3, #2
 800832e:	e002      	b.n	8008336 <HAL_GPIO_Init+0x1ee>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <HAL_GPIO_Init+0x1ee>
 8008334:	2300      	movs	r3, #0
 8008336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008338:	f002 0203 	and.w	r2, r2, #3
 800833c:	0092      	lsls	r2, r2, #2
 800833e:	4093      	lsls	r3, r2
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008346:	492f      	ldr	r1, [pc, #188]	; (8008404 <HAL_GPIO_Init+0x2bc>)
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	089b      	lsrs	r3, r3, #2
 800834c:	3302      	adds	r3, #2
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008360:	4b2d      	ldr	r3, [pc, #180]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	492c      	ldr	r1, [pc, #176]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	4313      	orrs	r3, r2
 800836a:	608b      	str	r3, [r1, #8]
 800836c:	e006      	b.n	800837c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	43db      	mvns	r3, r3
 8008376:	4928      	ldr	r1, [pc, #160]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 8008378:	4013      	ands	r3, r2
 800837a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d006      	beq.n	8008396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008388:	4b23      	ldr	r3, [pc, #140]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	4922      	ldr	r1, [pc, #136]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	4313      	orrs	r3, r2
 8008392:	60cb      	str	r3, [r1, #12]
 8008394:	e006      	b.n	80083a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008396:	4b20      	ldr	r3, [pc, #128]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	43db      	mvns	r3, r3
 800839e:	491e      	ldr	r1, [pc, #120]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80083b0:	4b19      	ldr	r3, [pc, #100]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	4918      	ldr	r1, [pc, #96]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	604b      	str	r3, [r1, #4]
 80083bc:	e006      	b.n	80083cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	43db      	mvns	r3, r3
 80083c6:	4914      	ldr	r1, [pc, #80]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d021      	beq.n	800841c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	490e      	ldr	r1, [pc, #56]	; (8008418 <HAL_GPIO_Init+0x2d0>)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	600b      	str	r3, [r1, #0]
 80083e4:	e021      	b.n	800842a <HAL_GPIO_Init+0x2e2>
 80083e6:	bf00      	nop
 80083e8:	10320000 	.word	0x10320000
 80083ec:	10310000 	.word	0x10310000
 80083f0:	10220000 	.word	0x10220000
 80083f4:	10210000 	.word	0x10210000
 80083f8:	10120000 	.word	0x10120000
 80083fc:	10110000 	.word	0x10110000
 8008400:	40021000 	.word	0x40021000
 8008404:	40010000 	.word	0x40010000
 8008408:	40010800 	.word	0x40010800
 800840c:	40010c00 	.word	0x40010c00
 8008410:	40011000 	.word	0x40011000
 8008414:	40011400 	.word	0x40011400
 8008418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <HAL_GPIO_Init+0x304>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	43db      	mvns	r3, r3
 8008424:	4909      	ldr	r1, [pc, #36]	; (800844c <HAL_GPIO_Init+0x304>)
 8008426:	4013      	ands	r3, r2
 8008428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	3301      	adds	r3, #1
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	f47f ae8e 	bne.w	800815c <HAL_GPIO_Init+0x14>
  }
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	372c      	adds	r7, #44	; 0x2c
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr
 800844c:	40010400 	.word	0x40010400

08008450 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008450:	b480      	push	{r7}
 8008452:	b089      	sub	sp, #36	; 0x24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800845e:	e09a      	b.n	8008596 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008460:	2201      	movs	r2, #1
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	fa02 f303 	lsl.w	r3, r2, r3
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 808d 	beq.w	8008590 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008476:	4a4e      	ldr	r2, [pc, #312]	; (80085b0 <HAL_GPIO_DeInit+0x160>)
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	089b      	lsrs	r3, r3, #2
 800847c:	3302      	adds	r3, #2
 800847e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008482:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	220f      	movs	r2, #15
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4013      	ands	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a46      	ldr	r2, [pc, #280]	; (80085b4 <HAL_GPIO_DeInit+0x164>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_GPIO_DeInit+0x78>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a45      	ldr	r2, [pc, #276]	; (80085b8 <HAL_GPIO_DeInit+0x168>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00d      	beq.n	80084c4 <HAL_GPIO_DeInit+0x74>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a44      	ldr	r2, [pc, #272]	; (80085bc <HAL_GPIO_DeInit+0x16c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <HAL_GPIO_DeInit+0x70>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a43      	ldr	r2, [pc, #268]	; (80085c0 <HAL_GPIO_DeInit+0x170>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d101      	bne.n	80084bc <HAL_GPIO_DeInit+0x6c>
 80084b8:	2303      	movs	r3, #3
 80084ba:	e006      	b.n	80084ca <HAL_GPIO_DeInit+0x7a>
 80084bc:	2304      	movs	r3, #4
 80084be:	e004      	b.n	80084ca <HAL_GPIO_DeInit+0x7a>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e002      	b.n	80084ca <HAL_GPIO_DeInit+0x7a>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_GPIO_DeInit+0x7a>
 80084c8:	2300      	movs	r3, #0
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	f002 0203 	and.w	r2, r2, #3
 80084d0:	0092      	lsls	r2, r2, #2
 80084d2:	4093      	lsls	r3, r2
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d132      	bne.n	8008540 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80084da:	4b3a      	ldr	r3, [pc, #232]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	43db      	mvns	r3, r3
 80084e2:	4938      	ldr	r1, [pc, #224]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80084e8:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	43db      	mvns	r3, r3
 80084f0:	4934      	ldr	r1, [pc, #208]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80084f6:	4b33      	ldr	r3, [pc, #204]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	4931      	ldr	r1, [pc, #196]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 8008500:	4013      	ands	r3, r2
 8008502:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008504:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	43db      	mvns	r3, r3
 800850c:	492d      	ldr	r1, [pc, #180]	; (80085c4 <HAL_GPIO_DeInit+0x174>)
 800850e:	4013      	ands	r3, r2
 8008510:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	220f      	movs	r2, #15
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008522:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <HAL_GPIO_DeInit+0x160>)
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	089b      	lsrs	r3, r3, #2
 8008528:	3302      	adds	r3, #2
 800852a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	43da      	mvns	r2, r3
 8008532:	481f      	ldr	r0, [pc, #124]	; (80085b0 <HAL_GPIO_DeInit+0x160>)
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	089b      	lsrs	r3, r3, #2
 8008538:	400a      	ands	r2, r1
 800853a:	3302      	adds	r3, #2
 800853c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2bff      	cmp	r3, #255	; 0xff
 8008544:	d801      	bhi.n	800854a <HAL_GPIO_DeInit+0xfa>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	e001      	b.n	800854e <HAL_GPIO_DeInit+0xfe>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2bff      	cmp	r3, #255	; 0xff
 8008554:	d802      	bhi.n	800855c <HAL_GPIO_DeInit+0x10c>
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	e002      	b.n	8008562 <HAL_GPIO_DeInit+0x112>
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	3b08      	subs	r3, #8
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	210f      	movs	r1, #15
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	fa01 f303 	lsl.w	r3, r1, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	2104      	movs	r1, #4
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	fa01 f303 	lsl.w	r3, r1, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	43db      	mvns	r3, r3
 800858a:	401a      	ands	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	3301      	adds	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	fa22 f303 	lsr.w	r3, r2, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f af5e 	bne.w	8008460 <HAL_GPIO_DeInit+0x10>
  }
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3724      	adds	r7, #36	; 0x24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40010800 	.word	0x40010800
 80085b8:	40010c00 	.word	0x40010c00
 80085bc:	40011000 	.word	0x40011000
 80085c0:	40011400 	.word	0x40011400
 80085c4:	40010400 	.word	0x40010400

080085c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	887b      	ldrh	r3, [r7, #2]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
 80085e4:	e001      	b.n	80085ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	807b      	strh	r3, [r7, #2]
 8008602:	4613      	mov	r3, r2
 8008604:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008606:	787b      	ldrb	r3, [r7, #1]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800860c:	887a      	ldrh	r2, [r7, #2]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008612:	e003      	b.n	800861c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008614:	887b      	ldrh	r3, [r7, #2]
 8008616:	041a      	lsls	r2, r3, #16
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	611a      	str	r2, [r3, #16]
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008638:	887a      	ldrh	r2, [r7, #2]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4013      	ands	r3, r2
 800863e:	041a      	lsls	r2, r3, #16
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	43d9      	mvns	r1, r3
 8008644:	887b      	ldrh	r3, [r7, #2]
 8008646:	400b      	ands	r3, r1
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	611a      	str	r2, [r3, #16]
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d006      	beq.n	800867c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800866e:	4a05      	ldr	r2, [pc, #20]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 fe88 	bl	800238c <HAL_GPIO_EXTI_Callback>
  }
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40010400 	.word	0x40010400

08008688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e12b      	b.n	80088f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fe fdba 	bl	8007228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2224      	movs	r2, #36	; 0x24
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0201 	bic.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80086ec:	f001 f960 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 80086f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4a81      	ldr	r2, [pc, #516]	; (80088fc <HAL_I2C_Init+0x274>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d807      	bhi.n	800870c <HAL_I2C_Init+0x84>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a80      	ldr	r2, [pc, #512]	; (8008900 <HAL_I2C_Init+0x278>)
 8008700:	4293      	cmp	r3, r2
 8008702:	bf94      	ite	ls
 8008704:	2301      	movls	r3, #1
 8008706:	2300      	movhi	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e006      	b.n	800871a <HAL_I2C_Init+0x92>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a7d      	ldr	r2, [pc, #500]	; (8008904 <HAL_I2C_Init+0x27c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	bf94      	ite	ls
 8008714:	2301      	movls	r3, #1
 8008716:	2300      	movhi	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e0e7      	b.n	80088f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a78      	ldr	r2, [pc, #480]	; (8008908 <HAL_I2C_Init+0x280>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	0c9b      	lsrs	r3, r3, #18
 800872c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a6a      	ldr	r2, [pc, #424]	; (80088fc <HAL_I2C_Init+0x274>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d802      	bhi.n	800875c <HAL_I2C_Init+0xd4>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	3301      	adds	r3, #1
 800875a:	e009      	b.n	8008770 <HAL_I2C_Init+0xe8>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	4a69      	ldr	r2, [pc, #420]	; (800890c <HAL_I2C_Init+0x284>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	099b      	lsrs	r3, r3, #6
 800876e:	3301      	adds	r3, #1
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	430b      	orrs	r3, r1
 8008776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	495c      	ldr	r1, [pc, #368]	; (80088fc <HAL_I2C_Init+0x274>)
 800878c:	428b      	cmp	r3, r1
 800878e:	d819      	bhi.n	80087c4 <HAL_I2C_Init+0x13c>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1e59      	subs	r1, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	fbb1 f3f3 	udiv	r3, r1, r3
 800879e:	1c59      	adds	r1, r3, #1
 80087a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087a4:	400b      	ands	r3, r1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <HAL_I2C_Init+0x138>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	1e59      	subs	r1, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80087b8:	3301      	adds	r3, #1
 80087ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087be:	e051      	b.n	8008864 <HAL_I2C_Init+0x1dc>
 80087c0:	2304      	movs	r3, #4
 80087c2:	e04f      	b.n	8008864 <HAL_I2C_Init+0x1dc>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d111      	bne.n	80087f0 <HAL_I2C_Init+0x168>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1e58      	subs	r0, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6859      	ldr	r1, [r3, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	440b      	add	r3, r1
 80087da:	fbb0 f3f3 	udiv	r3, r0, r3
 80087de:	3301      	adds	r3, #1
 80087e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e012      	b.n	8008816 <HAL_I2C_Init+0x18e>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	1e58      	subs	r0, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6859      	ldr	r1, [r3, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	0099      	lsls	r1, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	fbb0 f3f3 	udiv	r3, r0, r3
 8008806:	3301      	adds	r3, #1
 8008808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800880c:	2b00      	cmp	r3, #0
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_I2C_Init+0x196>
 800881a:	2301      	movs	r3, #1
 800881c:	e022      	b.n	8008864 <HAL_I2C_Init+0x1dc>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10e      	bne.n	8008844 <HAL_I2C_Init+0x1bc>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	1e58      	subs	r0, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6859      	ldr	r1, [r3, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	440b      	add	r3, r1
 8008834:	fbb0 f3f3 	udiv	r3, r0, r3
 8008838:	3301      	adds	r3, #1
 800883a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800883e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008842:	e00f      	b.n	8008864 <HAL_I2C_Init+0x1dc>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1e58      	subs	r0, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6859      	ldr	r1, [r3, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	0099      	lsls	r1, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	fbb0 f3f3 	udiv	r3, r0, r3
 800885a:	3301      	adds	r3, #1
 800885c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	6809      	ldr	r1, [r1, #0]
 8008868:	4313      	orrs	r3, r2
 800886a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6911      	ldr	r1, [r2, #16]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	68d2      	ldr	r2, [r2, #12]
 800889e:	4311      	orrs	r1, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695a      	ldr	r2, [r3, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	000186a0 	.word	0x000186a0
 8008900:	001e847f 	.word	0x001e847f
 8008904:	003d08ff 	.word	0x003d08ff
 8008908:	431bde83 	.word	0x431bde83
 800890c:	10624dd3 	.word	0x10624dd3

08008910 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af02      	add	r7, sp, #8
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	461a      	mov	r2, r3
 800891c:	460b      	mov	r3, r1
 800891e:	817b      	strh	r3, [r7, #10]
 8008920:	4613      	mov	r3, r2
 8008922:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008924:	f7fe fff0 	bl	8007908 <HAL_GetTick>
 8008928:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b20      	cmp	r3, #32
 8008934:	f040 80e0 	bne.w	8008af8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2319      	movs	r3, #25
 800893e:	2201      	movs	r2, #1
 8008940:	4970      	ldr	r1, [pc, #448]	; (8008b04 <HAL_I2C_Master_Transmit+0x1f4>)
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fa92 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
 8008950:	e0d3      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_I2C_Master_Transmit+0x50>
 800895c:	2302      	movs	r3, #2
 800895e:	e0cc      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b01      	cmp	r3, #1
 8008974:	d007      	beq.n	8008986 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0201 	orr.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2221      	movs	r2, #33	; 0x21
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2210      	movs	r2, #16
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	893a      	ldrh	r2, [r7, #8]
 80089b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4a50      	ldr	r2, [pc, #320]	; (8008b08 <HAL_I2C_Master_Transmit+0x1f8>)
 80089c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089c8:	8979      	ldrh	r1, [r7, #10]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f9ca 	bl	8008d68 <I2C_MasterRequestWrite>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e08d      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089f4:	e066      	b.n	8008ac4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6a39      	ldr	r1, [r7, #32]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fb50 	bl	80090a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d107      	bne.n	8008a1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e06b      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d11b      	bne.n	8008a98 <HAL_I2C_Master_Transmit+0x188>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	6a39      	ldr	r1, [r7, #32]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fb47 	bl	8009130 <I2C_WaitOnBTFFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d107      	bne.n	8008ac0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008abe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e01a      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d194      	bne.n	80089f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e000      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	00100002 	.word	0x00100002
 8008b08:	ffff0000 	.word	0xffff0000

08008b0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	; 0x28
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008b1c:	f7fe fef4 	bl	8007908 <HAL_GetTick>
 8008b20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	f040 8111 	bne.w	8008d56 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2319      	movs	r3, #25
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4988      	ldr	r1, [pc, #544]	; (8008d60 <HAL_I2C_IsDeviceReady+0x254>)
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f994 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e104      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2C_IsDeviceReady+0x50>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e0fd      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d007      	beq.n	8008b82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2224      	movs	r2, #36	; 0x24
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a70      	ldr	r2, [pc, #448]	; (8008d64 <HAL_I2C_IsDeviceReady+0x258>)
 8008ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f952 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00d      	beq.n	8008bea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bdc:	d103      	bne.n	8008be6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e0b6      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bea:	897b      	ldrh	r3, [r7, #10]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	461a      	mov	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bf8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008bfa:	f7fe fe85 	bl	8007908 <HAL_GetTick>
 8008bfe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	bf0c      	ite	eq
 8008c0e:	2301      	moveq	r3, #1
 8008c10:	2300      	movne	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c24:	bf0c      	ite	eq
 8008c26:	2301      	moveq	r3, #1
 8008c28:	2300      	movne	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008c2e:	e025      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c30:	f7fe fe6a 	bl	8007908 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <HAL_I2C_IsDeviceReady+0x13a>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	22a0      	movs	r2, #160	; 0xa0
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c72:	bf0c      	ite	eq
 8008c74:	2301      	moveq	r3, #1
 8008c76:	2300      	movne	r3, #0
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2ba0      	cmp	r3, #160	; 0xa0
 8008c86:	d005      	beq.n	8008c94 <HAL_I2C_IsDeviceReady+0x188>
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <HAL_I2C_IsDeviceReady+0x188>
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0cd      	beq.n	8008c30 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d129      	bne.n	8008cfe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2319      	movs	r3, #25
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	4921      	ldr	r1, [pc, #132]	; (8008d60 <HAL_I2C_IsDeviceReady+0x254>)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f8c6 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e036      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e02c      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d0c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d16:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	2319      	movs	r3, #25
 8008d1e:	2201      	movs	r2, #1
 8008d20:	490f      	ldr	r1, [pc, #60]	; (8008d60 <HAL_I2C_IsDeviceReady+0x254>)
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f8a2 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e012      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	3301      	adds	r3, #1
 8008d36:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f4ff af32 	bcc.w	8008ba6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	00100002 	.word	0x00100002
 8008d64:	ffff0000 	.word	0xffff0000

08008d68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	460b      	mov	r3, r1
 8008d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d006      	beq.n	8008d92 <I2C_MasterRequestWrite+0x2a>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d003      	beq.n	8008d92 <I2C_MasterRequestWrite+0x2a>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d90:	d108      	bne.n	8008da4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e00b      	b.n	8008dbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	2b12      	cmp	r3, #18
 8008daa:	d107      	bne.n	8008dbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f84f 	bl	8008e6c <I2C_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de2:	d103      	bne.n	8008dec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e035      	b.n	8008e5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df8:	d108      	bne.n	8008e0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008dfa:	897b      	ldrh	r3, [r7, #10]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e08:	611a      	str	r2, [r3, #16]
 8008e0a:	e01b      	b.n	8008e44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e0c:	897b      	ldrh	r3, [r7, #10]
 8008e0e:	11db      	asrs	r3, r3, #7
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f063 030f 	orn	r3, r3, #15
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	490e      	ldr	r1, [pc, #56]	; (8008e64 <I2C_MasterRequestWrite+0xfc>)
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f898 	bl	8008f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e010      	b.n	8008e5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008e3a:	897b      	ldrh	r3, [r7, #10]
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4907      	ldr	r1, [pc, #28]	; (8008e68 <I2C_MasterRequestWrite+0x100>)
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f888 	bl	8008f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	00010008 	.word	0x00010008
 8008e68:	00010002 	.word	0x00010002

08008e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e7c:	e048      	b.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d044      	beq.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e86:	f7fe fd3f 	bl	8007908 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d139      	bne.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	0c1b      	lsrs	r3, r3, #16
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d10d      	bne.n	8008ec2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	43da      	mvns	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	e00c      	b.n	8008edc <I2C_WaitOnFlagUntilTimeout+0x70>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	43da      	mvns	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2301      	moveq	r3, #1
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d116      	bne.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	f043 0220 	orr.w	r2, r3, #32
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e023      	b.n	8008f58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10d      	bne.n	8008f36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	43da      	mvns	r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	e00c      	b.n	8008f50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	43da      	mvns	r2, r3
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4013      	ands	r3, r2
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d093      	beq.n	8008e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f6e:	e071      	b.n	8009054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7e:	d123      	bne.n	8008fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	f043 0204 	orr.w	r2, r3, #4
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e067      	b.n	8009098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	d041      	beq.n	8009054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd0:	f7fe fc9a 	bl	8007908 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d302      	bcc.n	8008fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d136      	bne.n	8009054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10c      	bne.n	800900a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	43da      	mvns	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	e00b      	b.n	8009022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	43da      	mvns	r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4013      	ands	r3, r2
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d016      	beq.n	8009054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	f043 0220 	orr.w	r2, r3, #32
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e021      	b.n	8009098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b01      	cmp	r3, #1
 800905c:	d10c      	bne.n	8009078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	43da      	mvns	r2, r3
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	4013      	ands	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	bf14      	ite	ne
 8009070:	2301      	movne	r3, #1
 8009072:	2300      	moveq	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	e00b      	b.n	8009090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	43da      	mvns	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4013      	ands	r3, r2
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	bf14      	ite	ne
 800908a:	2301      	movne	r3, #1
 800908c:	2300      	moveq	r3, #0
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	f47f af6d 	bne.w	8008f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090ac:	e034      	b.n	8009118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 f886 	bl	80091c0 <I2C_IsAcknowledgeFailed>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e034      	b.n	8009128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d028      	beq.n	8009118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c6:	f7fe fc1f 	bl	8007908 <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d302      	bcc.n	80090dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11d      	bne.n	8009118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e6:	2b80      	cmp	r3, #128	; 0x80
 80090e8:	d016      	beq.n	8009118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009104:	f043 0220 	orr.w	r2, r3, #32
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e007      	b.n	8009128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b80      	cmp	r3, #128	; 0x80
 8009124:	d1c3      	bne.n	80090ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800913c:	e034      	b.n	80091a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 f83e 	bl	80091c0 <I2C_IsAcknowledgeFailed>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e034      	b.n	80091b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d028      	beq.n	80091a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009156:	f7fe fbd7 	bl	8007908 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	429a      	cmp	r2, r3
 8009164:	d302      	bcc.n	800916c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11d      	bne.n	80091a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f003 0304 	and.w	r3, r3, #4
 8009176:	2b04      	cmp	r3, #4
 8009178:	d016      	beq.n	80091a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009194:	f043 0220 	orr.w	r2, r3, #32
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e007      	b.n	80091b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d1c3      	bne.n	800913e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d6:	d11b      	bne.n	8009210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	f043 0204 	orr.w	r2, r3, #4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr

0800921c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e272      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 8087 	beq.w	800934a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800923c:	4b92      	ldr	r3, [pc, #584]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 030c 	and.w	r3, r3, #12
 8009244:	2b04      	cmp	r3, #4
 8009246:	d00c      	beq.n	8009262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009248:	4b8f      	ldr	r3, [pc, #572]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f003 030c 	and.w	r3, r3, #12
 8009250:	2b08      	cmp	r3, #8
 8009252:	d112      	bne.n	800927a <HAL_RCC_OscConfig+0x5e>
 8009254:	4b8c      	ldr	r3, [pc, #560]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009260:	d10b      	bne.n	800927a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009262:	4b89      	ldr	r3, [pc, #548]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d06c      	beq.n	8009348 <HAL_RCC_OscConfig+0x12c>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d168      	bne.n	8009348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e24c      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009282:	d106      	bne.n	8009292 <HAL_RCC_OscConfig+0x76>
 8009284:	4b80      	ldr	r3, [pc, #512]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a7f      	ldr	r2, [pc, #508]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800928a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e02e      	b.n	80092f0 <HAL_RCC_OscConfig+0xd4>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10c      	bne.n	80092b4 <HAL_RCC_OscConfig+0x98>
 800929a:	4b7b      	ldr	r3, [pc, #492]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a7a      	ldr	r2, [pc, #488]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4b78      	ldr	r3, [pc, #480]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a77      	ldr	r2, [pc, #476]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	e01d      	b.n	80092f0 <HAL_RCC_OscConfig+0xd4>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092bc:	d10c      	bne.n	80092d8 <HAL_RCC_OscConfig+0xbc>
 80092be:	4b72      	ldr	r3, [pc, #456]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a71      	ldr	r2, [pc, #452]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	4b6f      	ldr	r3, [pc, #444]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a6e      	ldr	r2, [pc, #440]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	e00b      	b.n	80092f0 <HAL_RCC_OscConfig+0xd4>
 80092d8:	4b6b      	ldr	r3, [pc, #428]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a6a      	ldr	r2, [pc, #424]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	4b68      	ldr	r3, [pc, #416]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a67      	ldr	r2, [pc, #412]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80092ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d013      	beq.n	8009320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f8:	f7fe fb06 	bl	8007908 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009300:	f7fe fb02 	bl	8007908 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b64      	cmp	r3, #100	; 0x64
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e200      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009312:	4b5d      	ldr	r3, [pc, #372]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0f0      	beq.n	8009300 <HAL_RCC_OscConfig+0xe4>
 800931e:	e014      	b.n	800934a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009320:	f7fe faf2 	bl	8007908 <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009328:	f7fe faee 	bl	8007908 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b64      	cmp	r3, #100	; 0x64
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e1ec      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800933a:	4b53      	ldr	r3, [pc, #332]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1f0      	bne.n	8009328 <HAL_RCC_OscConfig+0x10c>
 8009346:	e000      	b.n	800934a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d063      	beq.n	800941e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009356:	4b4c      	ldr	r3, [pc, #304]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f003 030c 	and.w	r3, r3, #12
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00b      	beq.n	800937a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009362:	4b49      	ldr	r3, [pc, #292]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f003 030c 	and.w	r3, r3, #12
 800936a:	2b08      	cmp	r3, #8
 800936c:	d11c      	bne.n	80093a8 <HAL_RCC_OscConfig+0x18c>
 800936e:	4b46      	ldr	r3, [pc, #280]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d116      	bne.n	80093a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800937a:	4b43      	ldr	r3, [pc, #268]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_RCC_OscConfig+0x176>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d001      	beq.n	8009392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e1c0      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009392:	4b3d      	ldr	r3, [pc, #244]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4939      	ldr	r1, [pc, #228]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093a6:	e03a      	b.n	800941e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d020      	beq.n	80093f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093b0:	4b36      	ldr	r3, [pc, #216]	; (800948c <HAL_RCC_OscConfig+0x270>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b6:	f7fe faa7 	bl	8007908 <HAL_GetTick>
 80093ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093bc:	e008      	b.n	80093d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093be:	f7fe faa3 	bl	8007908 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d901      	bls.n	80093d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e1a1      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093d0:	4b2d      	ldr	r3, [pc, #180]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0f0      	beq.n	80093be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093dc:	4b2a      	ldr	r3, [pc, #168]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	4927      	ldr	r1, [pc, #156]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	600b      	str	r3, [r1, #0]
 80093f0:	e015      	b.n	800941e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093f2:	4b26      	ldr	r3, [pc, #152]	; (800948c <HAL_RCC_OscConfig+0x270>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093f8:	f7fe fa86 	bl	8007908 <HAL_GetTick>
 80093fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009400:	f7fe fa82 	bl	8007908 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e180      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009412:	4b1d      	ldr	r3, [pc, #116]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f0      	bne.n	8009400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d03a      	beq.n	80094a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d019      	beq.n	8009466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009432:	4b17      	ldr	r3, [pc, #92]	; (8009490 <HAL_RCC_OscConfig+0x274>)
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009438:	f7fe fa66 	bl	8007908 <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009440:	f7fe fa62 	bl	8007908 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e160      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <HAL_RCC_OscConfig+0x26c>)
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f0      	beq.n	8009440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800945e:	2001      	movs	r0, #1
 8009460:	f000 face 	bl	8009a00 <RCC_Delay>
 8009464:	e01c      	b.n	80094a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009466:	4b0a      	ldr	r3, [pc, #40]	; (8009490 <HAL_RCC_OscConfig+0x274>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800946c:	f7fe fa4c 	bl	8007908 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009472:	e00f      	b.n	8009494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009474:	f7fe fa48 	bl	8007908 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d908      	bls.n	8009494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e146      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
 8009486:	bf00      	nop
 8009488:	40021000 	.word	0x40021000
 800948c:	42420000 	.word	0x42420000
 8009490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009494:	4b92      	ldr	r3, [pc, #584]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e9      	bne.n	8009474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80a6 	beq.w	80095fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094b2:	4b8b      	ldr	r3, [pc, #556]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10d      	bne.n	80094da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094be:	4b88      	ldr	r3, [pc, #544]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	4a87      	ldr	r2, [pc, #540]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80094c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c8:	61d3      	str	r3, [r2, #28]
 80094ca:	4b85      	ldr	r3, [pc, #532]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094d6:	2301      	movs	r3, #1
 80094d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094da:	4b82      	ldr	r3, [pc, #520]	; (80096e4 <HAL_RCC_OscConfig+0x4c8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d118      	bne.n	8009518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094e6:	4b7f      	ldr	r3, [pc, #508]	; (80096e4 <HAL_RCC_OscConfig+0x4c8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a7e      	ldr	r2, [pc, #504]	; (80096e4 <HAL_RCC_OscConfig+0x4c8>)
 80094ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094f2:	f7fe fa09 	bl	8007908 <HAL_GetTick>
 80094f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094f8:	e008      	b.n	800950c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094fa:	f7fe fa05 	bl	8007908 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b64      	cmp	r3, #100	; 0x64
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e103      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800950c:	4b75      	ldr	r3, [pc, #468]	; (80096e4 <HAL_RCC_OscConfig+0x4c8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0f0      	beq.n	80094fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d106      	bne.n	800952e <HAL_RCC_OscConfig+0x312>
 8009520:	4b6f      	ldr	r3, [pc, #444]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	4a6e      	ldr	r2, [pc, #440]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	6213      	str	r3, [r2, #32]
 800952c:	e02d      	b.n	800958a <HAL_RCC_OscConfig+0x36e>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10c      	bne.n	8009550 <HAL_RCC_OscConfig+0x334>
 8009536:	4b6a      	ldr	r3, [pc, #424]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	4a69      	ldr	r2, [pc, #420]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800953c:	f023 0301 	bic.w	r3, r3, #1
 8009540:	6213      	str	r3, [r2, #32]
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	4a66      	ldr	r2, [pc, #408]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009548:	f023 0304 	bic.w	r3, r3, #4
 800954c:	6213      	str	r3, [r2, #32]
 800954e:	e01c      	b.n	800958a <HAL_RCC_OscConfig+0x36e>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	2b05      	cmp	r3, #5
 8009556:	d10c      	bne.n	8009572 <HAL_RCC_OscConfig+0x356>
 8009558:	4b61      	ldr	r3, [pc, #388]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	4a60      	ldr	r2, [pc, #384]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800955e:	f043 0304 	orr.w	r3, r3, #4
 8009562:	6213      	str	r3, [r2, #32]
 8009564:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	4a5d      	ldr	r2, [pc, #372]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	6213      	str	r3, [r2, #32]
 8009570:	e00b      	b.n	800958a <HAL_RCC_OscConfig+0x36e>
 8009572:	4b5b      	ldr	r3, [pc, #364]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	4a5a      	ldr	r2, [pc, #360]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	6213      	str	r3, [r2, #32]
 800957e:	4b58      	ldr	r3, [pc, #352]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	4a57      	ldr	r2, [pc, #348]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009584:	f023 0304 	bic.w	r3, r3, #4
 8009588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d015      	beq.n	80095be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009592:	f7fe f9b9 	bl	8007908 <HAL_GetTick>
 8009596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009598:	e00a      	b.n	80095b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800959a:	f7fe f9b5 	bl	8007908 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e0b1      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b0:	4b4b      	ldr	r3, [pc, #300]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0ee      	beq.n	800959a <HAL_RCC_OscConfig+0x37e>
 80095bc:	e014      	b.n	80095e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095be:	f7fe f9a3 	bl	8007908 <HAL_GetTick>
 80095c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095c4:	e00a      	b.n	80095dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c6:	f7fe f99f 	bl	8007908 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d901      	bls.n	80095dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e09b      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095dc:	4b40      	ldr	r3, [pc, #256]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1ee      	bne.n	80095c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d105      	bne.n	80095fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ee:	4b3c      	ldr	r3, [pc, #240]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	4a3b      	ldr	r2, [pc, #236]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80095f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8087 	beq.w	8009712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009604:	4b36      	ldr	r3, [pc, #216]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f003 030c 	and.w	r3, r3, #12
 800960c:	2b08      	cmp	r3, #8
 800960e:	d061      	beq.n	80096d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d146      	bne.n	80096a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009618:	4b33      	ldr	r3, [pc, #204]	; (80096e8 <HAL_RCC_OscConfig+0x4cc>)
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800961e:	f7fe f973 	bl	8007908 <HAL_GetTick>
 8009622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009624:	e008      	b.n	8009638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009626:	f7fe f96f 	bl	8007908 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e06d      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009638:	4b29      	ldr	r3, [pc, #164]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f0      	bne.n	8009626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800964c:	d108      	bne.n	8009660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800964e:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	4921      	ldr	r1, [pc, #132]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800965c:	4313      	orrs	r3, r2
 800965e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009660:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a19      	ldr	r1, [r3, #32]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	430b      	orrs	r3, r1
 8009672:	491b      	ldr	r1, [pc, #108]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 8009674:	4313      	orrs	r3, r2
 8009676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009678:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <HAL_RCC_OscConfig+0x4cc>)
 800967a:	2201      	movs	r2, #1
 800967c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800967e:	f7fe f943 	bl	8007908 <HAL_GetTick>
 8009682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009684:	e008      	b.n	8009698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009686:	f7fe f93f 	bl	8007908 <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d901      	bls.n	8009698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e03d      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009698:	4b11      	ldr	r3, [pc, #68]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0f0      	beq.n	8009686 <HAL_RCC_OscConfig+0x46a>
 80096a4:	e035      	b.n	8009712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <HAL_RCC_OscConfig+0x4cc>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096ac:	f7fe f92c 	bl	8007908 <HAL_GetTick>
 80096b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096b2:	e008      	b.n	80096c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096b4:	f7fe f928 	bl	8007908 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d901      	bls.n	80096c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e026      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <HAL_RCC_OscConfig+0x4c4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f0      	bne.n	80096b4 <HAL_RCC_OscConfig+0x498>
 80096d2:	e01e      	b.n	8009712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d107      	bne.n	80096ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e019      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40007000 	.word	0x40007000
 80096e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_RCC_OscConfig+0x500>)
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d106      	bne.n	800970e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800970a:	429a      	cmp	r2, r3
 800970c:	d001      	beq.n	8009712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e000      	b.n	8009714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	40021000 	.word	0x40021000

08009720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e0d0      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009734:	4b6a      	ldr	r3, [pc, #424]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d910      	bls.n	8009764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009742:	4b67      	ldr	r3, [pc, #412]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f023 0207 	bic.w	r2, r3, #7
 800974a:	4965      	ldr	r1, [pc, #404]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4313      	orrs	r3, r2
 8009750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009752:	4b63      	ldr	r3, [pc, #396]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d001      	beq.n	8009764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e0b8      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d020      	beq.n	80097b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800977c:	4b59      	ldr	r3, [pc, #356]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	4a58      	ldr	r2, [pc, #352]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009794:	4b53      	ldr	r3, [pc, #332]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4a52      	ldr	r2, [pc, #328]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800979a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800979e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097a0:	4b50      	ldr	r3, [pc, #320]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	494d      	ldr	r1, [pc, #308]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d040      	beq.n	8009840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d107      	bne.n	80097d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097c6:	4b47      	ldr	r3, [pc, #284]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d115      	bne.n	80097fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e07f      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d107      	bne.n	80097ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097de:	4b41      	ldr	r3, [pc, #260]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d109      	bne.n	80097fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e073      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ee:	4b3d      	ldr	r3, [pc, #244]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e06b      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097fe:	4b39      	ldr	r3, [pc, #228]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f023 0203 	bic.w	r2, r3, #3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4936      	ldr	r1, [pc, #216]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800980c:	4313      	orrs	r3, r2
 800980e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009810:	f7fe f87a 	bl	8007908 <HAL_GetTick>
 8009814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009816:	e00a      	b.n	800982e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009818:	f7fe f876 	bl	8007908 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	f241 3288 	movw	r2, #5000	; 0x1388
 8009826:	4293      	cmp	r3, r2
 8009828:	d901      	bls.n	800982e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e053      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982e:	4b2d      	ldr	r3, [pc, #180]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f003 020c 	and.w	r2, r3, #12
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	429a      	cmp	r2, r3
 800983e:	d1eb      	bne.n	8009818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009840:	4b27      	ldr	r3, [pc, #156]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0307 	and.w	r3, r3, #7
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d210      	bcs.n	8009870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800984e:	4b24      	ldr	r3, [pc, #144]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f023 0207 	bic.w	r2, r3, #7
 8009856:	4922      	ldr	r1, [pc, #136]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	4313      	orrs	r3, r2
 800985c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800985e:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d001      	beq.n	8009870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e032      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d008      	beq.n	800988e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800987c:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4916      	ldr	r1, [pc, #88]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800988a:	4313      	orrs	r3, r2
 800988c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800989a:	4b12      	ldr	r3, [pc, #72]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	490e      	ldr	r1, [pc, #56]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098ae:	f000 f821 	bl	80098f4 <HAL_RCC_GetSysClockFreq>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <HAL_RCC_ClockConfig+0x1c4>)
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	091b      	lsrs	r3, r3, #4
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	490a      	ldr	r1, [pc, #40]	; (80098e8 <HAL_RCC_ClockConfig+0x1c8>)
 80098c0:	5ccb      	ldrb	r3, [r1, r3]
 80098c2:	fa22 f303 	lsr.w	r3, r2, r3
 80098c6:	4a09      	ldr	r2, [pc, #36]	; (80098ec <HAL_RCC_ClockConfig+0x1cc>)
 80098c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80098ca:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <HAL_RCC_ClockConfig+0x1d0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd ffd8 	bl	8007884 <HAL_InitTick>

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	40022000 	.word	0x40022000
 80098e4:	40021000 	.word	0x40021000
 80098e8:	08010e68 	.word	0x08010e68
 80098ec:	200000ac 	.word	0x200000ac
 80098f0:	200000b0 	.word	0x200000b0

080098f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	2300      	movs	r3, #0
 8009908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800990e:	4b1e      	ldr	r3, [pc, #120]	; (8009988 <HAL_RCC_GetSysClockFreq+0x94>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f003 030c 	and.w	r3, r3, #12
 800991a:	2b04      	cmp	r3, #4
 800991c:	d002      	beq.n	8009924 <HAL_RCC_GetSysClockFreq+0x30>
 800991e:	2b08      	cmp	r3, #8
 8009920:	d003      	beq.n	800992a <HAL_RCC_GetSysClockFreq+0x36>
 8009922:	e027      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009924:	4b19      	ldr	r3, [pc, #100]	; (800998c <HAL_RCC_GetSysClockFreq+0x98>)
 8009926:	613b      	str	r3, [r7, #16]
      break;
 8009928:	e027      	b.n	800997a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	0c9b      	lsrs	r3, r3, #18
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	4a17      	ldr	r2, [pc, #92]	; (8009990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009934:	5cd3      	ldrb	r3, [r2, r3]
 8009936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d010      	beq.n	8009964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <HAL_RCC_GetSysClockFreq+0x94>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	0c5b      	lsrs	r3, r3, #17
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	4a11      	ldr	r2, [pc, #68]	; (8009994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800994e:	5cd3      	ldrb	r3, [r2, r3]
 8009950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <HAL_RCC_GetSysClockFreq+0x98>)
 8009956:	fb03 f202 	mul.w	r2, r3, r2
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e004      	b.n	800996e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009968:	fb02 f303 	mul.w	r3, r2, r3
 800996c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	613b      	str	r3, [r7, #16]
      break;
 8009972:	e002      	b.n	800997a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <HAL_RCC_GetSysClockFreq+0x98>)
 8009976:	613b      	str	r3, [r7, #16]
      break;
 8009978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800997a:	693b      	ldr	r3, [r7, #16]
}
 800997c:	4618      	mov	r0, r3
 800997e:	371c      	adds	r7, #28
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40021000 	.word	0x40021000
 800998c:	007a1200 	.word	0x007a1200
 8009990:	08010e80 	.word	0x08010e80
 8009994:	08010e90 	.word	0x08010e90
 8009998:	003d0900 	.word	0x003d0900

0800999c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <HAL_RCC_GetHCLKFreq+0x10>)
 80099a2:	681b      	ldr	r3, [r3, #0]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr
 80099ac:	200000ac 	.word	0x200000ac

080099b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099b4:	f7ff fff2 	bl	800999c <HAL_RCC_GetHCLKFreq>
 80099b8:	4602      	mov	r2, r0
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	4903      	ldr	r1, [pc, #12]	; (80099d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099c6:	5ccb      	ldrb	r3, [r1, r3]
 80099c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40021000 	.word	0x40021000
 80099d4:	08010e78 	.word	0x08010e78

080099d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80099dc:	f7ff ffde 	bl	800999c <HAL_RCC_GetHCLKFreq>
 80099e0:	4602      	mov	r2, r0
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	0adb      	lsrs	r3, r3, #11
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	4903      	ldr	r1, [pc, #12]	; (80099fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80099ee:	5ccb      	ldrb	r3, [r1, r3]
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40021000 	.word	0x40021000
 80099fc:	08010e78 	.word	0x08010e78

08009a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <RCC_Delay+0x34>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a0a      	ldr	r2, [pc, #40]	; (8009a38 <RCC_Delay+0x38>)
 8009a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a12:	0a5b      	lsrs	r3, r3, #9
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009a1c:	bf00      	nop
  }
  while (Delay --);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1e5a      	subs	r2, r3, #1
 8009a22:	60fa      	str	r2, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f9      	bne.n	8009a1c <RCC_Delay+0x1c>
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	200000ac 	.word	0x200000ac
 8009a38:	10624dd3 	.word	0x10624dd3

08009a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e076      	b.n	8009b3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d108      	bne.n	8009a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a5e:	d009      	beq.n	8009a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	61da      	str	r2, [r3, #28]
 8009a66:	e005      	b.n	8009a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fd fc08 	bl	80072a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af8:	ea42 0103 	orr.w	r1, r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	0c1a      	lsrs	r2, r3, #16
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f002 0204 	and.w	r2, r2, #4
 8009b1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69da      	ldr	r2, [r3, #28]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_SPI_Transmit+0x22>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e12d      	b.n	8009dc2 <HAL_SPI_Transmit+0x27e>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b6e:	f7fd fecb 	bl	8007908 <HAL_GetTick>
 8009b72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d002      	beq.n	8009b8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b84:	2302      	movs	r3, #2
 8009b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b88:	e116      	b.n	8009db8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <HAL_SPI_Transmit+0x52>
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b9a:	e10d      	b.n	8009db8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2203      	movs	r2, #3
 8009ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	88fa      	ldrh	r2, [r7, #6]
 8009bba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be2:	d10f      	bne.n	8009c04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d007      	beq.n	8009c22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c2a:	d14f      	bne.n	8009ccc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_SPI_Transmit+0xf6>
 8009c34:	8afb      	ldrh	r3, [r7, #22]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d142      	bne.n	8009cc0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3e:	881a      	ldrh	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	1c9a      	adds	r2, r3, #2
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c5e:	e02f      	b.n	8009cc0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d112      	bne.n	8009c94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c72:	881a      	ldrh	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7e:	1c9a      	adds	r2, r3, #2
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c92:	e015      	b.n	8009cc0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c94:	f7fd fe38 	bl	8007908 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d803      	bhi.n	8009cac <HAL_SPI_Transmit+0x168>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009caa:	d102      	bne.n	8009cb2 <HAL_SPI_Transmit+0x16e>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009cbe:	e07b      	b.n	8009db8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1ca      	bne.n	8009c60 <HAL_SPI_Transmit+0x11c>
 8009cca:	e050      	b.n	8009d6e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_SPI_Transmit+0x196>
 8009cd4:	8afb      	ldrh	r3, [r7, #22]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d144      	bne.n	8009d64 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	7812      	ldrb	r2, [r2, #0]
 8009ce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d00:	e030      	b.n	8009d64 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d113      	bne.n	8009d38 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	330c      	adds	r3, #12
 8009d1a:	7812      	ldrb	r2, [r2, #0]
 8009d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d36:	e015      	b.n	8009d64 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d38:	f7fd fde6 	bl	8007908 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d803      	bhi.n	8009d50 <HAL_SPI_Transmit+0x20c>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4e:	d102      	bne.n	8009d56 <HAL_SPI_Transmit+0x212>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009d62:	e029      	b.n	8009db8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1c9      	bne.n	8009d02 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fa6e 	bl	800a254 <SPI_EndRxTxTransaction>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2220      	movs	r2, #32
 8009d82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	77fb      	strb	r3, [r7, #31]
 8009dae:	e003      	b.n	8009db8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b08c      	sub	sp, #48	; 0x30
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_SPI_TransmitReceive+0x26>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e198      	b.n	800a122 <HAL_SPI_TransmitReceive+0x358>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009df8:	f7fd fd86 	bl	8007908 <HAL_GetTick>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e0e:	887b      	ldrh	r3, [r7, #2]
 8009e10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d00f      	beq.n	8009e3a <HAL_SPI_TransmitReceive+0x70>
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e20:	d107      	bne.n	8009e32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d103      	bne.n	8009e32 <HAL_SPI_TransmitReceive+0x68>
 8009e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d003      	beq.n	8009e3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009e32:	2302      	movs	r3, #2
 8009e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e38:	e16d      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <HAL_SPI_TransmitReceive+0x82>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <HAL_SPI_TransmitReceive+0x82>
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e52:	e160      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d003      	beq.n	8009e68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2205      	movs	r2, #5
 8009e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	887a      	ldrh	r2, [r7, #2]
 8009e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	887a      	ldrh	r2, [r7, #2]
 8009e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	887a      	ldrh	r2, [r7, #2]
 8009e8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	887a      	ldrh	r2, [r7, #2]
 8009e90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d007      	beq.n	8009ebc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ec4:	d17c      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_SPI_TransmitReceive+0x10a>
 8009ece:	8b7b      	ldrh	r3, [r7, #26]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d16a      	bne.n	8009faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed8:	881a      	ldrh	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee4:	1c9a      	adds	r2, r3, #2
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ef8:	e057      	b.n	8009faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d11b      	bne.n	8009f40 <HAL_SPI_TransmitReceive+0x176>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d016      	beq.n	8009f40 <HAL_SPI_TransmitReceive+0x176>
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d113      	bne.n	8009f40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	881a      	ldrh	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	1c9a      	adds	r2, r3, #2
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d119      	bne.n	8009f82 <HAL_SPI_TransmitReceive+0x1b8>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d014      	beq.n	8009f82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	b292      	uxth	r2, r2
 8009f64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	1c9a      	adds	r2, r3, #2
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f82:	f7fd fcc1 	bl	8007908 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d80b      	bhi.n	8009faa <HAL_SPI_TransmitReceive+0x1e0>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f98:	d007      	beq.n	8009faa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009fa8:	e0b5      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1a2      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x130>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d19d      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x130>
 8009fbe:	e080      	b.n	800a0c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_SPI_TransmitReceive+0x204>
 8009fc8:	8b7b      	ldrh	r3, [r7, #26]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d16f      	bne.n	800a0ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff4:	e05b      	b.n	800a0ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f003 0302 	and.w	r3, r3, #2
 800a000:	2b02      	cmp	r3, #2
 800a002:	d11c      	bne.n	800a03e <HAL_SPI_TransmitReceive+0x274>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a008:	b29b      	uxth	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d017      	beq.n	800a03e <HAL_SPI_TransmitReceive+0x274>
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d114      	bne.n	800a03e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	330c      	adds	r3, #12
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b01      	subs	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d119      	bne.n	800a080 <HAL_SPI_TransmitReceive+0x2b6>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a050:	b29b      	uxth	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d014      	beq.n	800a080 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a072:	b29b      	uxth	r3, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a07c:	2301      	movs	r3, #1
 800a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a080:	f7fd fc42 	bl	8007908 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d803      	bhi.n	800a098 <HAL_SPI_TransmitReceive+0x2ce>
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d102      	bne.n	800a09e <HAL_SPI_TransmitReceive+0x2d4>
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d107      	bne.n	800a0ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a0ac:	e033      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d19e      	bne.n	8009ff6 <HAL_SPI_TransmitReceive+0x22c>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d199      	bne.n	8009ff6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 f8c4 	bl	800a254 <SPI_EndRxTxTransaction>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d006      	beq.n	800a0e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a0de:	e01a      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	617b      	str	r3, [r7, #20]
 800a0fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a10c:	e003      	b.n	800a116 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a11e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a122:	4618      	mov	r0, r3
 800a124:	3730      	adds	r7, #48	; 0x30
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a138:	b2db      	uxtb	r3, r3
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	bc80      	pop	{r7}
 800a142:	4770      	bx	lr

0800a144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	4613      	mov	r3, r2
 800a152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a154:	f7fd fbd8 	bl	8007908 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	1a9b      	subs	r3, r3, r2
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	4413      	add	r3, r2
 800a162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a164:	f7fd fbd0 	bl	8007908 <HAL_GetTick>
 800a168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a16a:	4b39      	ldr	r3, [pc, #228]	; (800a250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	015b      	lsls	r3, r3, #5
 800a170:	0d1b      	lsrs	r3, r3, #20
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	fb02 f303 	mul.w	r3, r2, r3
 800a178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a17a:	e054      	b.n	800a226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a182:	d050      	beq.n	800a226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a184:	f7fd fbc0 	bl	8007908 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	429a      	cmp	r2, r3
 800a192:	d902      	bls.n	800a19a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d13d      	bne.n	800a216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1b2:	d111      	bne.n	800a1d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1bc:	d004      	beq.n	800a1c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c6:	d107      	bne.n	800a1d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e0:	d10f      	bne.n	800a202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e017      	b.n	800a246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	3b01      	subs	r3, #1
 800a224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4013      	ands	r3, r2
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	429a      	cmp	r2, r3
 800a234:	bf0c      	ite	eq
 800a236:	2301      	moveq	r3, #1
 800a238:	2300      	movne	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	429a      	cmp	r2, r3
 800a242:	d19b      	bne.n	800a17c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3720      	adds	r7, #32
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	200000ac 	.word	0x200000ac

0800a254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af02      	add	r7, sp, #8
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	2180      	movs	r1, #128	; 0x80
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff ff6a 	bl	800a144 <SPI_WaitFlagStateUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d007      	beq.n	800a286 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27a:	f043 0220 	orr.w	r2, r3, #32
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e000      	b.n	800a288 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e041      	b.n	800a326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fd f87a 	bl	80073b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f000 fb12 	bl	800a8f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b01      	cmp	r3, #1
 800a342:	d001      	beq.n	800a348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e032      	b.n	800a3ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a18      	ldr	r2, [pc, #96]	; (800a3b8 <HAL_TIM_Base_Start+0x88>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00e      	beq.n	800a378 <HAL_TIM_Base_Start+0x48>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a362:	d009      	beq.n	800a378 <HAL_TIM_Base_Start+0x48>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a14      	ldr	r2, [pc, #80]	; (800a3bc <HAL_TIM_Base_Start+0x8c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_TIM_Base_Start+0x48>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <HAL_TIM_Base_Start+0x90>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d111      	bne.n	800a39c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b06      	cmp	r3, #6
 800a388:	d010      	beq.n	800a3ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0201 	orr.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39a:	e007      	b.n	800a3ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	40012c00 	.word	0x40012c00
 800a3bc:	40000400 	.word	0x40000400
 800a3c0:	40000800 	.word	0x40000800

0800a3c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6a1a      	ldr	r2, [r3, #32]
 800a3d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10f      	bne.n	800a3fc <HAL_TIM_Base_Stop+0x38>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6a1a      	ldr	r2, [r3, #32]
 800a3e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d107      	bne.n	800a3fc <HAL_TIM_Base_Stop+0x38>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0201 	bic.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr

0800a410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d001      	beq.n	800a428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e03a      	b.n	800a49e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a18      	ldr	r2, [pc, #96]	; (800a4a8 <HAL_TIM_Base_Start_IT+0x98>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d00e      	beq.n	800a468 <HAL_TIM_Base_Start_IT+0x58>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a452:	d009      	beq.n	800a468 <HAL_TIM_Base_Start_IT+0x58>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a14      	ldr	r2, [pc, #80]	; (800a4ac <HAL_TIM_Base_Start_IT+0x9c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d004      	beq.n	800a468 <HAL_TIM_Base_Start_IT+0x58>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a13      	ldr	r2, [pc, #76]	; (800a4b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d111      	bne.n	800a48c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b06      	cmp	r3, #6
 800a478:	d010      	beq.n	800a49c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f042 0201 	orr.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a48a:	e007      	b.n	800a49c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40000400 	.word	0x40000400
 800a4b0:	40000800 	.word	0x40000800

0800a4b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0201 	bic.w	r2, r2, #1
 800a4ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6a1a      	ldr	r2, [r3, #32]
 800a4d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10f      	bne.n	800a4fc <HAL_TIM_Base_Stop_IT+0x48>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6a1a      	ldr	r2, [r3, #32]
 800a4e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d107      	bne.n	800a4fc <HAL_TIM_Base_Stop_IT+0x48>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b02      	cmp	r3, #2
 800a524:	d122      	bne.n	800a56c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b02      	cmp	r3, #2
 800a532:	d11b      	bne.n	800a56c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f06f 0202 	mvn.w	r2, #2
 800a53c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f9b4 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a558:	e005      	b.n	800a566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f9a7 	bl	800a8ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f9b6 	bl	800a8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	2b04      	cmp	r3, #4
 800a578:	d122      	bne.n	800a5c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b04      	cmp	r3, #4
 800a586:	d11b      	bne.n	800a5c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f06f 0204 	mvn.w	r2, #4
 800a590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2202      	movs	r2, #2
 800a596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f98a 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a5ac:	e005      	b.n	800a5ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f97d 	bl	800a8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f98c 	bl	800a8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f003 0308 	and.w	r3, r3, #8
 800a5ca:	2b08      	cmp	r3, #8
 800a5cc:	d122      	bne.n	800a614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d11b      	bne.n	800a614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f06f 0208 	mvn.w	r2, #8
 800a5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2204      	movs	r2, #4
 800a5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	f003 0303 	and.w	r3, r3, #3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f960 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a600:	e005      	b.n	800a60e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f953 	bl	800a8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f962 	bl	800a8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f003 0310 	and.w	r3, r3, #16
 800a61e:	2b10      	cmp	r3, #16
 800a620:	d122      	bne.n	800a668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b10      	cmp	r3, #16
 800a62e:	d11b      	bne.n	800a668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0210 	mvn.w	r2, #16
 800a638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2208      	movs	r2, #8
 800a63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f936 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a654:	e005      	b.n	800a662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f929 	bl	800a8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f938 	bl	800a8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b01      	cmp	r3, #1
 800a674:	d10e      	bne.n	800a694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b01      	cmp	r3, #1
 800a682:	d107      	bne.n	800a694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0201 	mvn.w	r2, #1
 800a68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7f7 fe06 	bl	80022a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d10e      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ac:	2b80      	cmp	r3, #128	; 0x80
 800a6ae:	d107      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa7b 	bl	800abb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ca:	2b40      	cmp	r3, #64	; 0x40
 800a6cc:	d10e      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	d107      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f8fc 	bl	800a8e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d10e      	bne.n	800a718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b20      	cmp	r3, #32
 800a706:	d107      	bne.n	800a718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0220 	mvn.w	r2, #32
 800a710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa46 	bl	800aba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <HAL_TIM_ConfigClockSource+0x1c>
 800a738:	2302      	movs	r3, #2
 800a73a:	e0b4      	b.n	800a8a6 <HAL_TIM_ConfigClockSource+0x186>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a75a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a774:	d03e      	beq.n	800a7f4 <HAL_TIM_ConfigClockSource+0xd4>
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a77a:	f200 8087 	bhi.w	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a782:	f000 8086 	beq.w	800a892 <HAL_TIM_ConfigClockSource+0x172>
 800a786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a78a:	d87f      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a78c:	2b70      	cmp	r3, #112	; 0x70
 800a78e:	d01a      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0xa6>
 800a790:	2b70      	cmp	r3, #112	; 0x70
 800a792:	d87b      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a794:	2b60      	cmp	r3, #96	; 0x60
 800a796:	d050      	beq.n	800a83a <HAL_TIM_ConfigClockSource+0x11a>
 800a798:	2b60      	cmp	r3, #96	; 0x60
 800a79a:	d877      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a79c:	2b50      	cmp	r3, #80	; 0x50
 800a79e:	d03c      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0xfa>
 800a7a0:	2b50      	cmp	r3, #80	; 0x50
 800a7a2:	d873      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d058      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x13a>
 800a7a8:	2b40      	cmp	r3, #64	; 0x40
 800a7aa:	d86f      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a7ac:	2b30      	cmp	r3, #48	; 0x30
 800a7ae:	d064      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15a>
 800a7b0:	2b30      	cmp	r3, #48	; 0x30
 800a7b2:	d86b      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	d060      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15a>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d867      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05c      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15a>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d05a      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15a>
 800a7c4:	e062      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7d6:	f000 f968 	bl	800aaaa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	609a      	str	r2, [r3, #8]
      break;
 800a7f2:	e04f      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a804:	f000 f951 	bl	800aaaa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689a      	ldr	r2, [r3, #8]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a816:	609a      	str	r2, [r3, #8]
      break;
 800a818:	e03c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a826:	461a      	mov	r2, r3
 800a828:	f000 f8c8 	bl	800a9bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2150      	movs	r1, #80	; 0x50
 800a832:	4618      	mov	r0, r3
 800a834:	f000 f91f 	bl	800aa76 <TIM_ITRx_SetConfig>
      break;
 800a838:	e02c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a846:	461a      	mov	r2, r3
 800a848:	f000 f8e6 	bl	800aa18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2160      	movs	r1, #96	; 0x60
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f90f 	bl	800aa76 <TIM_ITRx_SetConfig>
      break;
 800a858:	e01c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a866:	461a      	mov	r2, r3
 800a868:	f000 f8a8 	bl	800a9bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2140      	movs	r1, #64	; 0x40
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f8ff 	bl	800aa76 <TIM_ITRx_SetConfig>
      break;
 800a878:	e00c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f000 f8f6 	bl	800aa76 <TIM_ITRx_SetConfig>
      break;
 800a88a:	e003      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	73fb      	strb	r3, [r7, #15]
      break;
 800a890:	e000      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bc80      	pop	{r7}
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr

0800a8d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bc80      	pop	{r7}
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc80      	pop	{r7}
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a29      	ldr	r2, [pc, #164]	; (800a9b0 <TIM_Base_SetConfig+0xb8>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00b      	beq.n	800a928 <TIM_Base_SetConfig+0x30>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a916:	d007      	beq.n	800a928 <TIM_Base_SetConfig+0x30>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a26      	ldr	r2, [pc, #152]	; (800a9b4 <TIM_Base_SetConfig+0xbc>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_Base_SetConfig+0x30>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a25      	ldr	r2, [pc, #148]	; (800a9b8 <TIM_Base_SetConfig+0xc0>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d108      	bne.n	800a93a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <TIM_Base_SetConfig+0xb8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00b      	beq.n	800a95a <TIM_Base_SetConfig+0x62>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a948:	d007      	beq.n	800a95a <TIM_Base_SetConfig+0x62>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a19      	ldr	r2, [pc, #100]	; (800a9b4 <TIM_Base_SetConfig+0xbc>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d003      	beq.n	800a95a <TIM_Base_SetConfig+0x62>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a18      	ldr	r2, [pc, #96]	; (800a9b8 <TIM_Base_SetConfig+0xc0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d108      	bne.n	800a96c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	4313      	orrs	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a07      	ldr	r2, [pc, #28]	; (800a9b0 <TIM_Base_SetConfig+0xb8>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d103      	bne.n	800a9a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691a      	ldr	r2, [r3, #16]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	615a      	str	r2, [r3, #20]
}
 800a9a6:	bf00      	nop
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr
 800a9b0:	40012c00 	.word	0x40012c00
 800a9b4:	40000400 	.word	0x40000400
 800a9b8:	40000800 	.word	0x40000800

0800a9bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	f023 0201 	bic.w	r2, r3, #1
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f023 030a 	bic.w	r3, r3, #10
 800a9f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	621a      	str	r2, [r3, #32]
}
 800aa0e:	bf00      	nop
 800aa10:	371c      	adds	r7, #28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bc80      	pop	{r7}
 800aa16:	4770      	bx	lr

0800aa18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	f023 0210 	bic.w	r2, r3, #16
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	031b      	lsls	r3, r3, #12
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	621a      	str	r2, [r3, #32]
}
 800aa6c:	bf00      	nop
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bc80      	pop	{r7}
 800aa74:	4770      	bx	lr

0800aa76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f043 0307 	orr.w	r3, r3, #7
 800aa98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	609a      	str	r2, [r3, #8]
}
 800aaa0:	bf00      	nop
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bc80      	pop	{r7}
 800aaa8:	4770      	bx	lr

0800aaaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b087      	sub	sp, #28
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	021a      	lsls	r2, r3, #8
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	431a      	orrs	r2, r3
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	609a      	str	r2, [r3, #8]
}
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bc80      	pop	{r7}
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e046      	b.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a16      	ldr	r2, [pc, #88]	; (800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d00e      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4c:	d009      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a12      	ldr	r2, [pc, #72]	; (800ab9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d004      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a10      	ldr	r2, [pc, #64]	; (800aba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d10c      	bne.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bc80      	pop	{r7}
 800ab96:	4770      	bx	lr
 800ab98:	40012c00 	.word	0x40012c00
 800ab9c:	40000400 	.word	0x40000400
 800aba0:	40000800 	.word	0x40000800

0800aba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr

0800abb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr

0800abc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e042      	b.n	800ac60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fc fc32 	bl	8007458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2224      	movs	r2, #36	; 0x24
 800abf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68da      	ldr	r2, [r3, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fdf7 	bl	800b800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691a      	ldr	r2, [r3, #16]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	695a      	ldr	r2, [r3, #20]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e024      	b.n	800acc4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2224      	movs	r2, #36	; 0x24
 800ac7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac90:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7fc fc6c 	bl	8007570 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	; 0x28
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4613      	mov	r3, r2
 800acda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d16d      	bne.n	800adc8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <HAL_UART_Transmit+0x2c>
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e066      	b.n	800adca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2221      	movs	r2, #33	; 0x21
 800ad06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad0a:	f7fc fdfd 	bl	8007908 <HAL_GetTick>
 800ad0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	88fa      	ldrh	r2, [r7, #6]
 800ad14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad24:	d108      	bne.n	800ad38 <HAL_UART_Transmit+0x6c>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	e003      	b.n	800ad40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad40:	e02a      	b.n	800ad98 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 fb14 	bl	800b37a <UART_WaitOnFlagUntilTimeout>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e036      	b.n	800adca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10b      	bne.n	800ad7a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	3302      	adds	r3, #2
 800ad76:	61bb      	str	r3, [r7, #24]
 800ad78:	e007      	b.n	800ad8a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	3301      	adds	r3, #1
 800ad88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1cf      	bne.n	800ad42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2200      	movs	r2, #0
 800adaa:	2140      	movs	r1, #64	; 0x40
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fae4 	bl	800b37a <UART_WaitOnFlagUntilTimeout>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e006      	b.n	800adca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e000      	b.n	800adca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	4613      	mov	r3, r2
 800adde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d112      	bne.n	800ae12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <HAL_UART_Receive_IT+0x26>
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e00b      	b.n	800ae14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae02:	88fb      	ldrh	r3, [r7, #6]
 800ae04:	461a      	mov	r2, r3
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 fb24 	bl	800b456 <UART_Start_Receive_IT>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	e000      	b.n	800ae14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ae12:	2302      	movs	r3, #2
  }
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b0ba      	sub	sp, #232	; 0xe8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10f      	bne.n	800ae82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <HAL_UART_IRQHandler+0x66>
 800ae6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fc01 	bl	800b682 <UART_Receive_IT>
      return;
 800ae80:	e25b      	b.n	800b33a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 80de 	beq.w	800b048 <HAL_UART_IRQHandler+0x22c>
 800ae8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d106      	bne.n	800aea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 80d1 	beq.w	800b048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00b      	beq.n	800aeca <HAL_UART_IRQHandler+0xae>
 800aeb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec2:	f043 0201 	orr.w	r2, r3, #1
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <HAL_UART_IRQHandler+0xd2>
 800aed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d005      	beq.n	800aeee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee6:	f043 0202 	orr.w	r2, r3, #2
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aeee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef2:	f003 0302 	and.w	r3, r3, #2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00b      	beq.n	800af12 <HAL_UART_IRQHandler+0xf6>
 800aefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b00      	cmp	r3, #0
 800af04:	d005      	beq.n	800af12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0a:	f043 0204 	orr.w	r2, r3, #4
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d011      	beq.n	800af42 <HAL_UART_IRQHandler+0x126>
 800af1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d005      	beq.n	800af42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3a:	f043 0208 	orr.w	r2, r3, #8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 81f2 	beq.w	800b330 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af50:	f003 0320 	and.w	r3, r3, #32
 800af54:	2b00      	cmp	r3, #0
 800af56:	d008      	beq.n	800af6a <HAL_UART_IRQHandler+0x14e>
 800af58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fb8c 	bl	800b682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af74:	2b00      	cmp	r3, #0
 800af76:	bf14      	ite	ne
 800af78:	2301      	movne	r3, #1
 800af7a:	2300      	moveq	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d103      	bne.n	800af96 <HAL_UART_IRQHandler+0x17a>
 800af8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af92:	2b00      	cmp	r3, #0
 800af94:	d04f      	beq.n	800b036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa96 	bl	800b4c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d041      	beq.n	800b02e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3314      	adds	r3, #20
 800afb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3314      	adds	r3, #20
 800afd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1d9      	bne.n	800afaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d013      	beq.n	800b026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	4a7e      	ldr	r2, [pc, #504]	; (800b1fc <HAL_UART_IRQHandler+0x3e0>)
 800b004:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fc fe24 	bl	8007c58 <HAL_DMA_Abort_IT>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d016      	beq.n	800b044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b024:	e00e      	b.n	800b044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f993 	bl	800b352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b02c:	e00a      	b.n	800b044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f98f 	bl	800b352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b034:	e006      	b.n	800b044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f98b 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b042:	e175      	b.n	800b330 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b044:	bf00      	nop
    return;
 800b046:	e173      	b.n	800b330 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	f040 814f 	bne.w	800b2f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b056:	f003 0310 	and.w	r3, r3, #16
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 8148 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8141 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60bb      	str	r3, [r7, #8]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	60bb      	str	r3, [r7, #8]
 800b082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 80b6 	beq.w	800b200 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8145 	beq.w	800b334 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	f080 813e 	bcs.w	800b334 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	f000 8088 	beq.w	800b1dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b0f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1d9      	bne.n	800b0cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3314      	adds	r3, #20
 800b11e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3314      	adds	r3, #20
 800b138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b13c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b140:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b144:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e1      	bne.n	800b118 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3314      	adds	r3, #20
 800b15a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b16a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3314      	adds	r3, #20
 800b174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b178:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b17a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b17e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e3      	bne.n	800b154 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ac:	f023 0310 	bic.w	r3, r3, #16
 800b1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1be:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e3      	bne.n	800b19a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fc fd03 	bl	8007be2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2202      	movs	r2, #2
 800b1e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f8b6 	bl	800b364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1f8:	e09c      	b.n	800b334 <HAL_UART_IRQHandler+0x518>
 800b1fa:	bf00      	nop
 800b1fc:	0800b58d 	.word	0x0800b58d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 808e 	beq.w	800b338 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 8089 	beq.w	800b338 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330c      	adds	r3, #12
 800b22c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	e853 3f00 	ldrex	r3, [r3]
 800b234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b23c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	330c      	adds	r3, #12
 800b246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b24a:	647a      	str	r2, [r7, #68]	; 0x44
 800b24c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e3      	bne.n	800b226 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3314      	adds	r3, #20
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	623b      	str	r3, [r7, #32]
   return(result);
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	f023 0301 	bic.w	r3, r3, #1
 800b274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3314      	adds	r3, #20
 800b27e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b282:	633a      	str	r2, [r7, #48]	; 0x30
 800b284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e3      	bne.n	800b25e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0310 	bic.w	r3, r3, #16
 800b2ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2c8:	61fa      	str	r2, [r7, #28]
 800b2ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	69b9      	ldr	r1, [r7, #24]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e3      	bne.n	800b2a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2202      	movs	r2, #2
 800b2e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f83b 	bl	800b364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2ee:	e023      	b.n	800b338 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <HAL_UART_IRQHandler+0x4f4>
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f953 	bl	800b5b4 <UART_Transmit_IT>
    return;
 800b30e:	e014      	b.n	800b33a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00e      	beq.n	800b33a <HAL_UART_IRQHandler+0x51e>
 800b31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b324:	2b00      	cmp	r3, #0
 800b326:	d008      	beq.n	800b33a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f992 	bl	800b652 <UART_EndTransmit_IT>
    return;
 800b32e:	e004      	b.n	800b33a <HAL_UART_IRQHandler+0x51e>
    return;
 800b330:	bf00      	nop
 800b332:	e002      	b.n	800b33a <HAL_UART_IRQHandler+0x51e>
      return;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <HAL_UART_IRQHandler+0x51e>
      return;
 800b338:	bf00      	nop
  }
}
 800b33a:	37e8      	adds	r7, #232	; 0xe8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bc80      	pop	{r7}
 800b350:	4770      	bx	lr

0800b352 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr

0800b37a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b090      	sub	sp, #64	; 0x40
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	603b      	str	r3, [r7, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38a:	e050      	b.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d04c      	beq.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x30>
 800b39a:	f7fc fab5 	bl	8007908 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d241      	bcs.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	330c      	adds	r3, #12
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	330c      	adds	r3, #12
 800b3c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ca:	637a      	str	r2, [r7, #52]	; 0x34
 800b3cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3314      	adds	r3, #20
 800b3e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3fe:	623a      	str	r2, [r7, #32]
 800b400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	69f9      	ldr	r1, [r7, #28]
 800b404:	6a3a      	ldr	r2, [r7, #32]
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e5      	bne.n	800b3de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2220      	movs	r2, #32
 800b416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2220      	movs	r2, #32
 800b41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e00f      	b.n	800b44e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	4013      	ands	r3, r2
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	bf0c      	ite	eq
 800b43e:	2301      	moveq	r3, #1
 800b440:	2300      	movne	r3, #0
 800b442:	b2db      	uxtb	r3, r3
 800b444:	461a      	mov	r2, r3
 800b446:	79fb      	ldrb	r3, [r7, #7]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d09f      	beq.n	800b38c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3740      	adds	r7, #64	; 0x40
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b456:	b480      	push	{r7}
 800b458:	b085      	sub	sp, #20
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	4613      	mov	r3, r2
 800b462:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	88fa      	ldrh	r2, [r7, #6]
 800b46e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	88fa      	ldrh	r2, [r7, #6]
 800b474:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2222      	movs	r2, #34	; 0x22
 800b480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d007      	beq.n	800b49c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68da      	ldr	r2, [r3, #12]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b49a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	695a      	ldr	r2, [r3, #20]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68da      	ldr	r2, [r3, #12]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0220 	orr.w	r2, r2, #32
 800b4ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bc80      	pop	{r7}
 800b4c6:	4770      	bx	lr

0800b4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b095      	sub	sp, #84	; 0x54
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	330c      	adds	r3, #12
 800b4d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	330c      	adds	r3, #12
 800b4ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4f0:	643a      	str	r2, [r7, #64]	; 0x40
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4f8:	e841 2300 	strex	r3, r2, [r1]
 800b4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1e5      	bne.n	800b4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3314      	adds	r3, #20
 800b50a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	61fb      	str	r3, [r7, #28]
   return(result);
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3314      	adds	r3, #20
 800b522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b524:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e5      	bne.n	800b504 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d119      	bne.n	800b574 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f023 0310 	bic.w	r3, r3, #16
 800b556:	647b      	str	r3, [r7, #68]	; 0x44
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	330c      	adds	r3, #12
 800b55e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b560:	61ba      	str	r2, [r7, #24]
 800b562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	6979      	ldr	r1, [r7, #20]
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	613b      	str	r3, [r7, #16]
   return(result);
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e5      	bne.n	800b540 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b582:	bf00      	nop
 800b584:	3754      	adds	r7, #84	; 0x54
 800b586:	46bd      	mov	sp, r7
 800b588:	bc80      	pop	{r7}
 800b58a:	4770      	bx	lr

0800b58c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fed3 	bl	800b352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5ac:	bf00      	nop
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b21      	cmp	r3, #33	; 0x21
 800b5c6:	d13e      	bne.n	800b646 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d0:	d114      	bne.n	800b5fc <UART_Transmit_IT+0x48>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d110      	bne.n	800b5fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a1b      	ldr	r3, [r3, #32]
 800b5de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	1c9a      	adds	r2, r3, #2
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	621a      	str	r2, [r3, #32]
 800b5fa:	e008      	b.n	800b60e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	1c59      	adds	r1, r3, #1
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6211      	str	r1, [r2, #32]
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b612:	b29b      	uxth	r3, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	b29b      	uxth	r3, r3
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	4619      	mov	r1, r3
 800b61c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10f      	bne.n	800b642 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b630:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b640:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	e000      	b.n	800b648 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b646:	2302      	movs	r3, #2
  }
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc80      	pop	{r7}
 800b650:	4770      	bx	lr

0800b652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff fe64 	bl	800b340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b08c      	sub	sp, #48	; 0x30
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b22      	cmp	r3, #34	; 0x22
 800b694:	f040 80ae 	bne.w	800b7f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a0:	d117      	bne.n	800b6d2 <UART_Receive_IT+0x50>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d113      	bne.n	800b6d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ca:	1c9a      	adds	r2, r3, #2
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d0:	e026      	b.n	800b720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e4:	d007      	beq.n	800b6f6 <UART_Receive_IT+0x74>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10a      	bne.n	800b704 <UART_Receive_IT+0x82>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e008      	b.n	800b716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b710:	b2da      	uxtb	r2, r3
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29b      	uxth	r3, r3
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4619      	mov	r1, r3
 800b72e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b730:	2b00      	cmp	r3, #0
 800b732:	d15d      	bne.n	800b7f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0220 	bic.w	r2, r2, #32
 800b742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	695a      	ldr	r2, [r3, #20]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0201 	bic.w	r2, r2, #1
 800b762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2220      	movs	r2, #32
 800b768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b776:	2b01      	cmp	r3, #1
 800b778:	d135      	bne.n	800b7e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	330c      	adds	r3, #12
 800b786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	e853 3f00 	ldrex	r3, [r3]
 800b78e:	613b      	str	r3, [r7, #16]
   return(result);
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f023 0310 	bic.w	r3, r3, #16
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	330c      	adds	r3, #12
 800b79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a0:	623a      	str	r2, [r7, #32]
 800b7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a4:	69f9      	ldr	r1, [r7, #28]
 800b7a6:	6a3a      	ldr	r2, [r7, #32]
 800b7a8:	e841 2300 	strex	r3, r2, [r1]
 800b7ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1e5      	bne.n	800b780 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0310 	and.w	r3, r3, #16
 800b7be:	2b10      	cmp	r3, #16
 800b7c0:	d10a      	bne.n	800b7d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff fdc0 	bl	800b364 <HAL_UARTEx_RxEventCallback>
 800b7e4:	e002      	b.n	800b7ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7f7 fed0 	bl	800358c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e002      	b.n	800b7f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e000      	b.n	800b7f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b7f4:	2302      	movs	r3, #2
  }
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3730      	adds	r7, #48	; 0x30
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	430a      	orrs	r2, r1
 800b81c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b83a:	f023 030c 	bic.w	r3, r3, #12
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	68b9      	ldr	r1, [r7, #8]
 800b844:	430b      	orrs	r3, r1
 800b846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a2c      	ldr	r2, [pc, #176]	; (800b914 <UART_SetConfig+0x114>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d103      	bne.n	800b870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b868:	f7fe f8b6 	bl	80099d8 <HAL_RCC_GetPCLK2Freq>
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	e002      	b.n	800b876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b870:	f7fe f89e 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 800b874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	4613      	mov	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	009a      	lsls	r2, r3, #2
 800b880:	441a      	add	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88c:	4a22      	ldr	r2, [pc, #136]	; (800b918 <UART_SetConfig+0x118>)
 800b88e:	fba2 2303 	umull	r2, r3, r2, r3
 800b892:	095b      	lsrs	r3, r3, #5
 800b894:	0119      	lsls	r1, r3, #4
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009a      	lsls	r2, r3, #2
 800b8a0:	441a      	add	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8ac:	4b1a      	ldr	r3, [pc, #104]	; (800b918 <UART_SetConfig+0x118>)
 800b8ae:	fba3 0302 	umull	r0, r3, r3, r2
 800b8b2:	095b      	lsrs	r3, r3, #5
 800b8b4:	2064      	movs	r0, #100	; 0x64
 800b8b6:	fb00 f303 	mul.w	r3, r0, r3
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	3332      	adds	r3, #50	; 0x32
 800b8c0:	4a15      	ldr	r2, [pc, #84]	; (800b918 <UART_SetConfig+0x118>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	095b      	lsrs	r3, r3, #5
 800b8c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8cc:	4419      	add	r1, r3
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009a      	lsls	r2, r3, #2
 800b8d8:	441a      	add	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <UART_SetConfig+0x118>)
 800b8e6:	fba3 0302 	umull	r0, r3, r3, r2
 800b8ea:	095b      	lsrs	r3, r3, #5
 800b8ec:	2064      	movs	r0, #100	; 0x64
 800b8ee:	fb00 f303 	mul.w	r3, r0, r3
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	3332      	adds	r3, #50	; 0x32
 800b8f8:	4a07      	ldr	r2, [pc, #28]	; (800b918 <UART_SetConfig+0x118>)
 800b8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fe:	095b      	lsrs	r3, r3, #5
 800b900:	f003 020f 	and.w	r2, r3, #15
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	440a      	add	r2, r1
 800b90a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b90c:	bf00      	nop
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	40013800 	.word	0x40013800
 800b918:	51eb851f 	.word	0x51eb851f

0800b91c <__cvt>:
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b922:	461f      	mov	r7, r3
 800b924:	bfbb      	ittet	lt
 800b926:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b92a:	461f      	movlt	r7, r3
 800b92c:	2300      	movge	r3, #0
 800b92e:	232d      	movlt	r3, #45	; 0x2d
 800b930:	b088      	sub	sp, #32
 800b932:	4614      	mov	r4, r2
 800b934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b938:	7013      	strb	r3, [r2, #0]
 800b93a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b93c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b940:	f023 0820 	bic.w	r8, r3, #32
 800b944:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b948:	d005      	beq.n	800b956 <__cvt+0x3a>
 800b94a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b94e:	d100      	bne.n	800b952 <__cvt+0x36>
 800b950:	3501      	adds	r5, #1
 800b952:	2302      	movs	r3, #2
 800b954:	e000      	b.n	800b958 <__cvt+0x3c>
 800b956:	2303      	movs	r3, #3
 800b958:	aa07      	add	r2, sp, #28
 800b95a:	9204      	str	r2, [sp, #16]
 800b95c:	aa06      	add	r2, sp, #24
 800b95e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b962:	e9cd 3500 	strd	r3, r5, [sp]
 800b966:	4622      	mov	r2, r4
 800b968:	463b      	mov	r3, r7
 800b96a:	f000 fe81 	bl	800c670 <_dtoa_r>
 800b96e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b972:	4606      	mov	r6, r0
 800b974:	d102      	bne.n	800b97c <__cvt+0x60>
 800b976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b978:	07db      	lsls	r3, r3, #31
 800b97a:	d522      	bpl.n	800b9c2 <__cvt+0xa6>
 800b97c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b980:	eb06 0905 	add.w	r9, r6, r5
 800b984:	d110      	bne.n	800b9a8 <__cvt+0x8c>
 800b986:	7833      	ldrb	r3, [r6, #0]
 800b988:	2b30      	cmp	r3, #48	; 0x30
 800b98a:	d10a      	bne.n	800b9a2 <__cvt+0x86>
 800b98c:	2200      	movs	r2, #0
 800b98e:	2300      	movs	r3, #0
 800b990:	4620      	mov	r0, r4
 800b992:	4639      	mov	r1, r7
 800b994:	f7f5 f808 	bl	80009a8 <__aeabi_dcmpeq>
 800b998:	b918      	cbnz	r0, 800b9a2 <__cvt+0x86>
 800b99a:	f1c5 0501 	rsb	r5, r5, #1
 800b99e:	f8ca 5000 	str.w	r5, [sl]
 800b9a2:	f8da 3000 	ldr.w	r3, [sl]
 800b9a6:	4499      	add	r9, r3
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f4 fffa 	bl	80009a8 <__aeabi_dcmpeq>
 800b9b4:	b108      	cbz	r0, 800b9ba <__cvt+0x9e>
 800b9b6:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9ba:	2230      	movs	r2, #48	; 0x30
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	454b      	cmp	r3, r9
 800b9c0:	d307      	bcc.n	800b9d2 <__cvt+0xb6>
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	9b07      	ldr	r3, [sp, #28]
 800b9c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9c8:	1b9b      	subs	r3, r3, r6
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	b008      	add	sp, #32
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	1c59      	adds	r1, r3, #1
 800b9d4:	9107      	str	r1, [sp, #28]
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	e7f0      	b.n	800b9bc <__cvt+0xa0>

0800b9da <__exponent>:
 800b9da:	4603      	mov	r3, r0
 800b9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9de:	2900      	cmp	r1, #0
 800b9e0:	f803 2b02 	strb.w	r2, [r3], #2
 800b9e4:	bfb6      	itet	lt
 800b9e6:	222d      	movlt	r2, #45	; 0x2d
 800b9e8:	222b      	movge	r2, #43	; 0x2b
 800b9ea:	4249      	neglt	r1, r1
 800b9ec:	2909      	cmp	r1, #9
 800b9ee:	7042      	strb	r2, [r0, #1]
 800b9f0:	dd2a      	ble.n	800ba48 <__exponent+0x6e>
 800b9f2:	f10d 0207 	add.w	r2, sp, #7
 800b9f6:	4617      	mov	r7, r2
 800b9f8:	260a      	movs	r6, #10
 800b9fa:	fb91 f5f6 	sdiv	r5, r1, r6
 800b9fe:	4694      	mov	ip, r2
 800ba00:	fb06 1415 	mls	r4, r6, r5, r1
 800ba04:	3430      	adds	r4, #48	; 0x30
 800ba06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	2c63      	cmp	r4, #99	; 0x63
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba14:	dcf1      	bgt.n	800b9fa <__exponent+0x20>
 800ba16:	3130      	adds	r1, #48	; 0x30
 800ba18:	f1ac 0402 	sub.w	r4, ip, #2
 800ba1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba20:	4622      	mov	r2, r4
 800ba22:	1c41      	adds	r1, r0, #1
 800ba24:	42ba      	cmp	r2, r7
 800ba26:	d30a      	bcc.n	800ba3e <__exponent+0x64>
 800ba28:	f10d 0209 	add.w	r2, sp, #9
 800ba2c:	eba2 020c 	sub.w	r2, r2, ip
 800ba30:	42bc      	cmp	r4, r7
 800ba32:	bf88      	it	hi
 800ba34:	2200      	movhi	r2, #0
 800ba36:	4413      	add	r3, r2
 800ba38:	1a18      	subs	r0, r3, r0
 800ba3a:	b003      	add	sp, #12
 800ba3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba42:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ba46:	e7ed      	b.n	800ba24 <__exponent+0x4a>
 800ba48:	2330      	movs	r3, #48	; 0x30
 800ba4a:	3130      	adds	r1, #48	; 0x30
 800ba4c:	7083      	strb	r3, [r0, #2]
 800ba4e:	70c1      	strb	r1, [r0, #3]
 800ba50:	1d03      	adds	r3, r0, #4
 800ba52:	e7f1      	b.n	800ba38 <__exponent+0x5e>

0800ba54 <_printf_float>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	b091      	sub	sp, #68	; 0x44
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ba60:	4616      	mov	r6, r2
 800ba62:	461f      	mov	r7, r3
 800ba64:	4605      	mov	r5, r0
 800ba66:	f000 fce5 	bl	800c434 <_localeconv_r>
 800ba6a:	6803      	ldr	r3, [r0, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba70:	f7f4 fb6e 	bl	8000150 <strlen>
 800ba74:	2300      	movs	r3, #0
 800ba76:	930e      	str	r3, [sp, #56]	; 0x38
 800ba78:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7c:	900a      	str	r0, [sp, #40]	; 0x28
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	f103 0208 	add.w	r2, r3, #8
 800ba88:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ba8c:	f8d4 b000 	ldr.w	fp, [r4]
 800ba90:	f8c8 2000 	str.w	r2, [r8]
 800ba94:	e9d3 a800 	ldrd	sl, r8, [r3]
 800ba98:	4652      	mov	r2, sl
 800ba9a:	4643      	mov	r3, r8
 800ba9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800baa0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800baa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	4650      	mov	r0, sl
 800baac:	4b9c      	ldr	r3, [pc, #624]	; (800bd20 <_printf_float+0x2cc>)
 800baae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bab0:	f7f4 ffac 	bl	8000a0c <__aeabi_dcmpun>
 800bab4:	bb70      	cbnz	r0, 800bb14 <_printf_float+0xc0>
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	4650      	mov	r0, sl
 800babc:	4b98      	ldr	r3, [pc, #608]	; (800bd20 <_printf_float+0x2cc>)
 800babe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bac0:	f7f4 ff86 	bl	80009d0 <__aeabi_dcmple>
 800bac4:	bb30      	cbnz	r0, 800bb14 <_printf_float+0xc0>
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	4650      	mov	r0, sl
 800bacc:	4641      	mov	r1, r8
 800bace:	f7f4 ff75 	bl	80009bc <__aeabi_dcmplt>
 800bad2:	b110      	cbz	r0, 800bada <_printf_float+0x86>
 800bad4:	232d      	movs	r3, #45	; 0x2d
 800bad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bada:	4a92      	ldr	r2, [pc, #584]	; (800bd24 <_printf_float+0x2d0>)
 800badc:	4b92      	ldr	r3, [pc, #584]	; (800bd28 <_printf_float+0x2d4>)
 800bade:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bae2:	bf94      	ite	ls
 800bae4:	4690      	movls	r8, r2
 800bae6:	4698      	movhi	r8, r3
 800bae8:	2303      	movs	r3, #3
 800baea:	f04f 0a00 	mov.w	sl, #0
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	f02b 0304 	bic.w	r3, fp, #4
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	4633      	mov	r3, r6
 800baf8:	4621      	mov	r1, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	9700      	str	r7, [sp, #0]
 800bafe:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb00:	f000 f9d6 	bl	800beb0 <_printf_common>
 800bb04:	3001      	adds	r0, #1
 800bb06:	f040 8090 	bne.w	800bc2a <_printf_float+0x1d6>
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	b011      	add	sp, #68	; 0x44
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	4652      	mov	r2, sl
 800bb16:	4643      	mov	r3, r8
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4641      	mov	r1, r8
 800bb1c:	f7f4 ff76 	bl	8000a0c <__aeabi_dcmpun>
 800bb20:	b148      	cbz	r0, 800bb36 <_printf_float+0xe2>
 800bb22:	f1b8 0f00 	cmp.w	r8, #0
 800bb26:	bfb8      	it	lt
 800bb28:	232d      	movlt	r3, #45	; 0x2d
 800bb2a:	4a80      	ldr	r2, [pc, #512]	; (800bd2c <_printf_float+0x2d8>)
 800bb2c:	bfb8      	it	lt
 800bb2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb32:	4b7f      	ldr	r3, [pc, #508]	; (800bd30 <_printf_float+0x2dc>)
 800bb34:	e7d3      	b.n	800bade <_printf_float+0x8a>
 800bb36:	6863      	ldr	r3, [r4, #4]
 800bb38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	d142      	bne.n	800bbc6 <_printf_float+0x172>
 800bb40:	2306      	movs	r3, #6
 800bb42:	6063      	str	r3, [r4, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	9206      	str	r2, [sp, #24]
 800bb48:	aa0e      	add	r2, sp, #56	; 0x38
 800bb4a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bb4e:	aa0d      	add	r2, sp, #52	; 0x34
 800bb50:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bb54:	9203      	str	r2, [sp, #12]
 800bb56:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bb5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	6863      	ldr	r3, [r4, #4]
 800bb62:	4652      	mov	r2, sl
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4628      	mov	r0, r5
 800bb68:	4643      	mov	r3, r8
 800bb6a:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb6c:	f7ff fed6 	bl	800b91c <__cvt>
 800bb70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb72:	4680      	mov	r8, r0
 800bb74:	2947      	cmp	r1, #71	; 0x47
 800bb76:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb78:	d108      	bne.n	800bb8c <_printf_float+0x138>
 800bb7a:	1cc8      	adds	r0, r1, #3
 800bb7c:	db02      	blt.n	800bb84 <_printf_float+0x130>
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	4299      	cmp	r1, r3
 800bb82:	dd40      	ble.n	800bc06 <_printf_float+0x1b2>
 800bb84:	f1a9 0902 	sub.w	r9, r9, #2
 800bb88:	fa5f f989 	uxtb.w	r9, r9
 800bb8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb90:	d81f      	bhi.n	800bbd2 <_printf_float+0x17e>
 800bb92:	464a      	mov	r2, r9
 800bb94:	3901      	subs	r1, #1
 800bb96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb9a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb9c:	f7ff ff1d 	bl	800b9da <__exponent>
 800bba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bba2:	4682      	mov	sl, r0
 800bba4:	1813      	adds	r3, r2, r0
 800bba6:	2a01      	cmp	r2, #1
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	dc02      	bgt.n	800bbb2 <_printf_float+0x15e>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	07d2      	lsls	r2, r2, #31
 800bbb0:	d501      	bpl.n	800bbb6 <_printf_float+0x162>
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d09b      	beq.n	800baf6 <_printf_float+0xa2>
 800bbbe:	232d      	movs	r3, #45	; 0x2d
 800bbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc4:	e797      	b.n	800baf6 <_printf_float+0xa2>
 800bbc6:	2947      	cmp	r1, #71	; 0x47
 800bbc8:	d1bc      	bne.n	800bb44 <_printf_float+0xf0>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1ba      	bne.n	800bb44 <_printf_float+0xf0>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7b7      	b.n	800bb42 <_printf_float+0xee>
 800bbd2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bbd6:	d118      	bne.n	800bc0a <_printf_float+0x1b6>
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	dd0b      	ble.n	800bbf6 <_printf_float+0x1a2>
 800bbde:	6121      	str	r1, [r4, #16]
 800bbe0:	b913      	cbnz	r3, 800bbe8 <_printf_float+0x194>
 800bbe2:	6822      	ldr	r2, [r4, #0]
 800bbe4:	07d0      	lsls	r0, r2, #31
 800bbe6:	d502      	bpl.n	800bbee <_printf_float+0x19a>
 800bbe8:	3301      	adds	r3, #1
 800bbea:	440b      	add	r3, r1
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbf4:	e7df      	b.n	800bbb6 <_printf_float+0x162>
 800bbf6:	b913      	cbnz	r3, 800bbfe <_printf_float+0x1aa>
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	07d2      	lsls	r2, r2, #31
 800bbfc:	d501      	bpl.n	800bc02 <_printf_float+0x1ae>
 800bbfe:	3302      	adds	r3, #2
 800bc00:	e7f4      	b.n	800bbec <_printf_float+0x198>
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7f2      	b.n	800bbec <_printf_float+0x198>
 800bc06:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc0c:	4299      	cmp	r1, r3
 800bc0e:	db05      	blt.n	800bc1c <_printf_float+0x1c8>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	6121      	str	r1, [r4, #16]
 800bc14:	07d8      	lsls	r0, r3, #31
 800bc16:	d5ea      	bpl.n	800bbee <_printf_float+0x19a>
 800bc18:	1c4b      	adds	r3, r1, #1
 800bc1a:	e7e7      	b.n	800bbec <_printf_float+0x198>
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	bfcc      	ite	gt
 800bc20:	2201      	movgt	r2, #1
 800bc22:	f1c1 0202 	rsble	r2, r1, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	e7e0      	b.n	800bbec <_printf_float+0x198>
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	055a      	lsls	r2, r3, #21
 800bc2e:	d407      	bmi.n	800bc40 <_printf_float+0x1ec>
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	4642      	mov	r2, r8
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	d12b      	bne.n	800bc96 <_printf_float+0x242>
 800bc3e:	e764      	b.n	800bb0a <_printf_float+0xb6>
 800bc40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc44:	f240 80dd 	bls.w	800be02 <_printf_float+0x3ae>
 800bc48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f7f4 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d033      	beq.n	800bcc0 <_printf_float+0x26c>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	4a35      	ldr	r2, [pc, #212]	; (800bd34 <_printf_float+0x2e0>)
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f af51 	beq.w	800bb0a <_printf_float+0xb6>
 800bc68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	db02      	blt.n	800bc76 <_printf_float+0x222>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	07d8      	lsls	r0, r3, #31
 800bc74:	d50f      	bpl.n	800bc96 <_printf_float+0x242>
 800bc76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f af42 	beq.w	800bb0a <_printf_float+0xb6>
 800bc86:	f04f 0800 	mov.w	r8, #0
 800bc8a:	f104 091a 	add.w	r9, r4, #26
 800bc8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc90:	3b01      	subs	r3, #1
 800bc92:	4543      	cmp	r3, r8
 800bc94:	dc09      	bgt.n	800bcaa <_printf_float+0x256>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	079b      	lsls	r3, r3, #30
 800bc9a:	f100 8104 	bmi.w	800bea6 <_printf_float+0x452>
 800bc9e:	68e0      	ldr	r0, [r4, #12]
 800bca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bca2:	4298      	cmp	r0, r3
 800bca4:	bfb8      	it	lt
 800bca6:	4618      	movlt	r0, r3
 800bca8:	e731      	b.n	800bb0e <_printf_float+0xba>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	464a      	mov	r2, r9
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f af28 	beq.w	800bb0a <_printf_float+0xb6>
 800bcba:	f108 0801 	add.w	r8, r8, #1
 800bcbe:	e7e6      	b.n	800bc8e <_printf_float+0x23a>
 800bcc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc38      	bgt.n	800bd38 <_printf_float+0x2e4>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	4a19      	ldr	r2, [pc, #100]	; (800bd34 <_printf_float+0x2e0>)
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f43f af1a 	beq.w	800bb0a <_printf_float+0xb6>
 800bcd6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	d102      	bne.n	800bce4 <_printf_float+0x290>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	07d9      	lsls	r1, r3, #31
 800bce2:	d5d8      	bpl.n	800bc96 <_printf_float+0x242>
 800bce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af0b 	beq.w	800bb0a <_printf_float+0xb6>
 800bcf4:	f04f 0900 	mov.w	r9, #0
 800bcf8:	f104 0a1a 	add.w	sl, r4, #26
 800bcfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfe:	425b      	negs	r3, r3
 800bd00:	454b      	cmp	r3, r9
 800bd02:	dc01      	bgt.n	800bd08 <_printf_float+0x2b4>
 800bd04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd06:	e794      	b.n	800bc32 <_printf_float+0x1de>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	47b8      	blx	r7
 800bd12:	3001      	adds	r0, #1
 800bd14:	f43f aef9 	beq.w	800bb0a <_printf_float+0xb6>
 800bd18:	f109 0901 	add.w	r9, r9, #1
 800bd1c:	e7ee      	b.n	800bcfc <_printf_float+0x2a8>
 800bd1e:	bf00      	nop
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	08010e92 	.word	0x08010e92
 800bd28:	08010e96 	.word	0x08010e96
 800bd2c:	08010e9a 	.word	0x08010e9a
 800bd30:	08010e9e 	.word	0x08010e9e
 800bd34:	08010ea2 	.word	0x08010ea2
 800bd38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	bfa8      	it	ge
 800bd40:	461a      	movge	r2, r3
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	4691      	mov	r9, r2
 800bd46:	dc37      	bgt.n	800bdb8 <_printf_float+0x364>
 800bd48:	f04f 0b00 	mov.w	fp, #0
 800bd4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd50:	f104 021a 	add.w	r2, r4, #26
 800bd54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd58:	ebaa 0309 	sub.w	r3, sl, r9
 800bd5c:	455b      	cmp	r3, fp
 800bd5e:	dc33      	bgt.n	800bdc8 <_printf_float+0x374>
 800bd60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd64:	429a      	cmp	r2, r3
 800bd66:	db3b      	blt.n	800bde0 <_printf_float+0x38c>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	07da      	lsls	r2, r3, #31
 800bd6c:	d438      	bmi.n	800bde0 <_printf_float+0x38c>
 800bd6e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd72:	eba2 0903 	sub.w	r9, r2, r3
 800bd76:	eba2 020a 	sub.w	r2, r2, sl
 800bd7a:	4591      	cmp	r9, r2
 800bd7c:	bfa8      	it	ge
 800bd7e:	4691      	movge	r9, r2
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	dc34      	bgt.n	800bdf0 <_printf_float+0x39c>
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8e:	f104 0a1a 	add.w	sl, r4, #26
 800bd92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	eba3 0309 	sub.w	r3, r3, r9
 800bd9c:	4543      	cmp	r3, r8
 800bd9e:	f77f af7a 	ble.w	800bc96 <_printf_float+0x242>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4652      	mov	r2, sl
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	f43f aeac 	beq.w	800bb0a <_printf_float+0xb6>
 800bdb2:	f108 0801 	add.w	r8, r8, #1
 800bdb6:	e7ec      	b.n	800bd92 <_printf_float+0x33e>
 800bdb8:	4613      	mov	r3, r2
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4642      	mov	r2, r8
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	47b8      	blx	r7
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	d1c0      	bne.n	800bd48 <_printf_float+0x2f4>
 800bdc6:	e6a0      	b.n	800bb0a <_printf_float+0xb6>
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	920b      	str	r2, [sp, #44]	; 0x2c
 800bdd0:	47b8      	blx	r7
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	f43f ae99 	beq.w	800bb0a <_printf_float+0xb6>
 800bdd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdda:	f10b 0b01 	add.w	fp, fp, #1
 800bdde:	e7b9      	b.n	800bd54 <_printf_float+0x300>
 800bde0:	4631      	mov	r1, r6
 800bde2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	d1bf      	bne.n	800bd6e <_printf_float+0x31a>
 800bdee:	e68c      	b.n	800bb0a <_printf_float+0xb6>
 800bdf0:	464b      	mov	r3, r9
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	eb08 020a 	add.w	r2, r8, sl
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d1c2      	bne.n	800bd86 <_printf_float+0x332>
 800be00:	e683      	b.n	800bb0a <_printf_float+0xb6>
 800be02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be04:	2a01      	cmp	r2, #1
 800be06:	dc01      	bgt.n	800be0c <_printf_float+0x3b8>
 800be08:	07db      	lsls	r3, r3, #31
 800be0a:	d539      	bpl.n	800be80 <_printf_float+0x42c>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4642      	mov	r2, r8
 800be10:	4631      	mov	r1, r6
 800be12:	4628      	mov	r0, r5
 800be14:	47b8      	blx	r7
 800be16:	3001      	adds	r0, #1
 800be18:	f43f ae77 	beq.w	800bb0a <_printf_float+0xb6>
 800be1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	47b8      	blx	r7
 800be26:	3001      	adds	r0, #1
 800be28:	f43f ae6f 	beq.w	800bb0a <_printf_float+0xb6>
 800be2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be30:	2200      	movs	r2, #0
 800be32:	2300      	movs	r3, #0
 800be34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800be38:	f7f4 fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 800be3c:	b9d8      	cbnz	r0, 800be76 <_printf_float+0x422>
 800be3e:	f109 33ff 	add.w	r3, r9, #4294967295
 800be42:	f108 0201 	add.w	r2, r8, #1
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	d10e      	bne.n	800be6e <_printf_float+0x41a>
 800be50:	e65b      	b.n	800bb0a <_printf_float+0xb6>
 800be52:	2301      	movs	r3, #1
 800be54:	464a      	mov	r2, r9
 800be56:	4631      	mov	r1, r6
 800be58:	4628      	mov	r0, r5
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae54 	beq.w	800bb0a <_printf_float+0xb6>
 800be62:	f108 0801 	add.w	r8, r8, #1
 800be66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be68:	3b01      	subs	r3, #1
 800be6a:	4543      	cmp	r3, r8
 800be6c:	dcf1      	bgt.n	800be52 <_printf_float+0x3fe>
 800be6e:	4653      	mov	r3, sl
 800be70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be74:	e6de      	b.n	800bc34 <_printf_float+0x1e0>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	f104 091a 	add.w	r9, r4, #26
 800be7e:	e7f2      	b.n	800be66 <_printf_float+0x412>
 800be80:	2301      	movs	r3, #1
 800be82:	4642      	mov	r2, r8
 800be84:	e7df      	b.n	800be46 <_printf_float+0x3f2>
 800be86:	2301      	movs	r3, #1
 800be88:	464a      	mov	r2, r9
 800be8a:	4631      	mov	r1, r6
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b8      	blx	r7
 800be90:	3001      	adds	r0, #1
 800be92:	f43f ae3a 	beq.w	800bb0a <_printf_float+0xb6>
 800be96:	f108 0801 	add.w	r8, r8, #1
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be9e:	1a5b      	subs	r3, r3, r1
 800bea0:	4543      	cmp	r3, r8
 800bea2:	dcf0      	bgt.n	800be86 <_printf_float+0x432>
 800bea4:	e6fb      	b.n	800bc9e <_printf_float+0x24a>
 800bea6:	f04f 0800 	mov.w	r8, #0
 800beaa:	f104 0919 	add.w	r9, r4, #25
 800beae:	e7f4      	b.n	800be9a <_printf_float+0x446>

0800beb0 <_printf_common>:
 800beb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	4616      	mov	r6, r2
 800beb6:	4699      	mov	r9, r3
 800beb8:	688a      	ldr	r2, [r1, #8]
 800beba:	690b      	ldr	r3, [r1, #16]
 800bebc:	4607      	mov	r7, r0
 800bebe:	4293      	cmp	r3, r2
 800bec0:	bfb8      	it	lt
 800bec2:	4613      	movlt	r3, r2
 800bec4:	6033      	str	r3, [r6, #0]
 800bec6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beca:	460c      	mov	r4, r1
 800becc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bed0:	b10a      	cbz	r2, 800bed6 <_printf_common+0x26>
 800bed2:	3301      	adds	r3, #1
 800bed4:	6033      	str	r3, [r6, #0]
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	0699      	lsls	r1, r3, #26
 800beda:	bf42      	ittt	mi
 800bedc:	6833      	ldrmi	r3, [r6, #0]
 800bede:	3302      	addmi	r3, #2
 800bee0:	6033      	strmi	r3, [r6, #0]
 800bee2:	6825      	ldr	r5, [r4, #0]
 800bee4:	f015 0506 	ands.w	r5, r5, #6
 800bee8:	d106      	bne.n	800bef8 <_printf_common+0x48>
 800beea:	f104 0a19 	add.w	sl, r4, #25
 800beee:	68e3      	ldr	r3, [r4, #12]
 800bef0:	6832      	ldr	r2, [r6, #0]
 800bef2:	1a9b      	subs	r3, r3, r2
 800bef4:	42ab      	cmp	r3, r5
 800bef6:	dc2b      	bgt.n	800bf50 <_printf_common+0xa0>
 800bef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800befc:	1e13      	subs	r3, r2, #0
 800befe:	6822      	ldr	r2, [r4, #0]
 800bf00:	bf18      	it	ne
 800bf02:	2301      	movne	r3, #1
 800bf04:	0692      	lsls	r2, r2, #26
 800bf06:	d430      	bmi.n	800bf6a <_printf_common+0xba>
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf10:	47c0      	blx	r8
 800bf12:	3001      	adds	r0, #1
 800bf14:	d023      	beq.n	800bf5e <_printf_common+0xae>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	6922      	ldr	r2, [r4, #16]
 800bf1a:	f003 0306 	and.w	r3, r3, #6
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	bf14      	ite	ne
 800bf22:	2500      	movne	r5, #0
 800bf24:	6833      	ldreq	r3, [r6, #0]
 800bf26:	f04f 0600 	mov.w	r6, #0
 800bf2a:	bf08      	it	eq
 800bf2c:	68e5      	ldreq	r5, [r4, #12]
 800bf2e:	f104 041a 	add.w	r4, r4, #26
 800bf32:	bf08      	it	eq
 800bf34:	1aed      	subeq	r5, r5, r3
 800bf36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf3a:	bf08      	it	eq
 800bf3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf40:	4293      	cmp	r3, r2
 800bf42:	bfc4      	itt	gt
 800bf44:	1a9b      	subgt	r3, r3, r2
 800bf46:	18ed      	addgt	r5, r5, r3
 800bf48:	42b5      	cmp	r5, r6
 800bf4a:	d11a      	bne.n	800bf82 <_printf_common+0xd2>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e008      	b.n	800bf62 <_printf_common+0xb2>
 800bf50:	2301      	movs	r3, #1
 800bf52:	4652      	mov	r2, sl
 800bf54:	4649      	mov	r1, r9
 800bf56:	4638      	mov	r0, r7
 800bf58:	47c0      	blx	r8
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d103      	bne.n	800bf66 <_printf_common+0xb6>
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf66:	3501      	adds	r5, #1
 800bf68:	e7c1      	b.n	800beee <_printf_common+0x3e>
 800bf6a:	2030      	movs	r0, #48	; 0x30
 800bf6c:	18e1      	adds	r1, r4, r3
 800bf6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf78:	4422      	add	r2, r4
 800bf7a:	3302      	adds	r3, #2
 800bf7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf80:	e7c2      	b.n	800bf08 <_printf_common+0x58>
 800bf82:	2301      	movs	r3, #1
 800bf84:	4622      	mov	r2, r4
 800bf86:	4649      	mov	r1, r9
 800bf88:	4638      	mov	r0, r7
 800bf8a:	47c0      	blx	r8
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d0e6      	beq.n	800bf5e <_printf_common+0xae>
 800bf90:	3601      	adds	r6, #1
 800bf92:	e7d9      	b.n	800bf48 <_printf_common+0x98>

0800bf94 <_printf_i>:
 800bf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	7e0f      	ldrb	r7, [r1, #24]
 800bf9a:	4691      	mov	r9, r2
 800bf9c:	2f78      	cmp	r7, #120	; 0x78
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	469a      	mov	sl, r3
 800bfa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfaa:	d807      	bhi.n	800bfbc <_printf_i+0x28>
 800bfac:	2f62      	cmp	r7, #98	; 0x62
 800bfae:	d80a      	bhi.n	800bfc6 <_printf_i+0x32>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	f000 80d5 	beq.w	800c160 <_printf_i+0x1cc>
 800bfb6:	2f58      	cmp	r7, #88	; 0x58
 800bfb8:	f000 80c1 	beq.w	800c13e <_printf_i+0x1aa>
 800bfbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfc4:	e03a      	b.n	800c03c <_printf_i+0xa8>
 800bfc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfca:	2b15      	cmp	r3, #21
 800bfcc:	d8f6      	bhi.n	800bfbc <_printf_i+0x28>
 800bfce:	a101      	add	r1, pc, #4	; (adr r1, 800bfd4 <_printf_i+0x40>)
 800bfd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfd4:	0800c02d 	.word	0x0800c02d
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800bfbd 	.word	0x0800bfbd
 800bfe0:	0800bfbd 	.word	0x0800bfbd
 800bfe4:	0800bfbd 	.word	0x0800bfbd
 800bfe8:	0800bfbd 	.word	0x0800bfbd
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800bfbd 	.word	0x0800bfbd
 800bff4:	0800bfbd 	.word	0x0800bfbd
 800bff8:	0800bfbd 	.word	0x0800bfbd
 800bffc:	0800bfbd 	.word	0x0800bfbd
 800c000:	0800c147 	.word	0x0800c147
 800c004:	0800c06d 	.word	0x0800c06d
 800c008:	0800c101 	.word	0x0800c101
 800c00c:	0800bfbd 	.word	0x0800bfbd
 800c010:	0800bfbd 	.word	0x0800bfbd
 800c014:	0800c169 	.word	0x0800c169
 800c018:	0800bfbd 	.word	0x0800bfbd
 800c01c:	0800c06d 	.word	0x0800c06d
 800c020:	0800bfbd 	.word	0x0800bfbd
 800c024:	0800bfbd 	.word	0x0800bfbd
 800c028:	0800c109 	.word	0x0800c109
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	602a      	str	r2, [r5, #0]
 800c034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c03c:	2301      	movs	r3, #1
 800c03e:	e0a0      	b.n	800c182 <_printf_i+0x1ee>
 800c040:	6820      	ldr	r0, [r4, #0]
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	0607      	lsls	r7, r0, #24
 800c046:	f103 0104 	add.w	r1, r3, #4
 800c04a:	6029      	str	r1, [r5, #0]
 800c04c:	d501      	bpl.n	800c052 <_printf_i+0xbe>
 800c04e:	681e      	ldr	r6, [r3, #0]
 800c050:	e003      	b.n	800c05a <_printf_i+0xc6>
 800c052:	0646      	lsls	r6, r0, #25
 800c054:	d5fb      	bpl.n	800c04e <_printf_i+0xba>
 800c056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c05a:	2e00      	cmp	r6, #0
 800c05c:	da03      	bge.n	800c066 <_printf_i+0xd2>
 800c05e:	232d      	movs	r3, #45	; 0x2d
 800c060:	4276      	negs	r6, r6
 800c062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c066:	230a      	movs	r3, #10
 800c068:	4859      	ldr	r0, [pc, #356]	; (800c1d0 <_printf_i+0x23c>)
 800c06a:	e012      	b.n	800c092 <_printf_i+0xfe>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	1d19      	adds	r1, r3, #4
 800c072:	6029      	str	r1, [r5, #0]
 800c074:	0605      	lsls	r5, r0, #24
 800c076:	d501      	bpl.n	800c07c <_printf_i+0xe8>
 800c078:	681e      	ldr	r6, [r3, #0]
 800c07a:	e002      	b.n	800c082 <_printf_i+0xee>
 800c07c:	0641      	lsls	r1, r0, #25
 800c07e:	d5fb      	bpl.n	800c078 <_printf_i+0xe4>
 800c080:	881e      	ldrh	r6, [r3, #0]
 800c082:	2f6f      	cmp	r7, #111	; 0x6f
 800c084:	bf0c      	ite	eq
 800c086:	2308      	moveq	r3, #8
 800c088:	230a      	movne	r3, #10
 800c08a:	4851      	ldr	r0, [pc, #324]	; (800c1d0 <_printf_i+0x23c>)
 800c08c:	2100      	movs	r1, #0
 800c08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c092:	6865      	ldr	r5, [r4, #4]
 800c094:	2d00      	cmp	r5, #0
 800c096:	bfa8      	it	ge
 800c098:	6821      	ldrge	r1, [r4, #0]
 800c09a:	60a5      	str	r5, [r4, #8]
 800c09c:	bfa4      	itt	ge
 800c09e:	f021 0104 	bicge.w	r1, r1, #4
 800c0a2:	6021      	strge	r1, [r4, #0]
 800c0a4:	b90e      	cbnz	r6, 800c0aa <_printf_i+0x116>
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	d04b      	beq.n	800c142 <_printf_i+0x1ae>
 800c0aa:	4615      	mov	r5, r2
 800c0ac:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0b0:	fb03 6711 	mls	r7, r3, r1, r6
 800c0b4:	5dc7      	ldrb	r7, [r0, r7]
 800c0b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0ba:	4637      	mov	r7, r6
 800c0bc:	42bb      	cmp	r3, r7
 800c0be:	460e      	mov	r6, r1
 800c0c0:	d9f4      	bls.n	800c0ac <_printf_i+0x118>
 800c0c2:	2b08      	cmp	r3, #8
 800c0c4:	d10b      	bne.n	800c0de <_printf_i+0x14a>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	07de      	lsls	r6, r3, #31
 800c0ca:	d508      	bpl.n	800c0de <_printf_i+0x14a>
 800c0cc:	6923      	ldr	r3, [r4, #16]
 800c0ce:	6861      	ldr	r1, [r4, #4]
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	bfde      	ittt	le
 800c0d4:	2330      	movle	r3, #48	; 0x30
 800c0d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0de:	1b52      	subs	r2, r2, r5
 800c0e0:	6122      	str	r2, [r4, #16]
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	f8cd a000 	str.w	sl, [sp]
 800c0ec:	aa03      	add	r2, sp, #12
 800c0ee:	f7ff fedf 	bl	800beb0 <_printf_common>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d14a      	bne.n	800c18c <_printf_i+0x1f8>
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	b004      	add	sp, #16
 800c0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	f043 0320 	orr.w	r3, r3, #32
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	2778      	movs	r7, #120	; 0x78
 800c10a:	4832      	ldr	r0, [pc, #200]	; (800c1d4 <_printf_i+0x240>)
 800c10c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	6829      	ldr	r1, [r5, #0]
 800c114:	061f      	lsls	r7, r3, #24
 800c116:	f851 6b04 	ldr.w	r6, [r1], #4
 800c11a:	d402      	bmi.n	800c122 <_printf_i+0x18e>
 800c11c:	065f      	lsls	r7, r3, #25
 800c11e:	bf48      	it	mi
 800c120:	b2b6      	uxthmi	r6, r6
 800c122:	07df      	lsls	r7, r3, #31
 800c124:	bf48      	it	mi
 800c126:	f043 0320 	orrmi.w	r3, r3, #32
 800c12a:	6029      	str	r1, [r5, #0]
 800c12c:	bf48      	it	mi
 800c12e:	6023      	strmi	r3, [r4, #0]
 800c130:	b91e      	cbnz	r6, 800c13a <_printf_i+0x1a6>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	f023 0320 	bic.w	r3, r3, #32
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	2310      	movs	r3, #16
 800c13c:	e7a6      	b.n	800c08c <_printf_i+0xf8>
 800c13e:	4824      	ldr	r0, [pc, #144]	; (800c1d0 <_printf_i+0x23c>)
 800c140:	e7e4      	b.n	800c10c <_printf_i+0x178>
 800c142:	4615      	mov	r5, r2
 800c144:	e7bd      	b.n	800c0c2 <_printf_i+0x12e>
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	6826      	ldr	r6, [r4, #0]
 800c14a:	1d18      	adds	r0, r3, #4
 800c14c:	6961      	ldr	r1, [r4, #20]
 800c14e:	6028      	str	r0, [r5, #0]
 800c150:	0635      	lsls	r5, r6, #24
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	d501      	bpl.n	800c15a <_printf_i+0x1c6>
 800c156:	6019      	str	r1, [r3, #0]
 800c158:	e002      	b.n	800c160 <_printf_i+0x1cc>
 800c15a:	0670      	lsls	r0, r6, #25
 800c15c:	d5fb      	bpl.n	800c156 <_printf_i+0x1c2>
 800c15e:	8019      	strh	r1, [r3, #0]
 800c160:	2300      	movs	r3, #0
 800c162:	4615      	mov	r5, r2
 800c164:	6123      	str	r3, [r4, #16]
 800c166:	e7bc      	b.n	800c0e2 <_printf_i+0x14e>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	2100      	movs	r1, #0
 800c16c:	1d1a      	adds	r2, r3, #4
 800c16e:	602a      	str	r2, [r5, #0]
 800c170:	681d      	ldr	r5, [r3, #0]
 800c172:	6862      	ldr	r2, [r4, #4]
 800c174:	4628      	mov	r0, r5
 800c176:	f000 f9d4 	bl	800c522 <memchr>
 800c17a:	b108      	cbz	r0, 800c180 <_printf_i+0x1ec>
 800c17c:	1b40      	subs	r0, r0, r5
 800c17e:	6060      	str	r0, [r4, #4]
 800c180:	6863      	ldr	r3, [r4, #4]
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	2300      	movs	r3, #0
 800c186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c18a:	e7aa      	b.n	800c0e2 <_printf_i+0x14e>
 800c18c:	462a      	mov	r2, r5
 800c18e:	4649      	mov	r1, r9
 800c190:	4640      	mov	r0, r8
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	47d0      	blx	sl
 800c196:	3001      	adds	r0, #1
 800c198:	d0ad      	beq.n	800c0f6 <_printf_i+0x162>
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	079b      	lsls	r3, r3, #30
 800c19e:	d413      	bmi.n	800c1c8 <_printf_i+0x234>
 800c1a0:	68e0      	ldr	r0, [r4, #12]
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	4298      	cmp	r0, r3
 800c1a6:	bfb8      	it	lt
 800c1a8:	4618      	movlt	r0, r3
 800c1aa:	e7a6      	b.n	800c0fa <_printf_i+0x166>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	47d0      	blx	sl
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d09d      	beq.n	800c0f6 <_printf_i+0x162>
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	68e3      	ldr	r3, [r4, #12]
 800c1be:	9903      	ldr	r1, [sp, #12]
 800c1c0:	1a5b      	subs	r3, r3, r1
 800c1c2:	42ab      	cmp	r3, r5
 800c1c4:	dcf2      	bgt.n	800c1ac <_printf_i+0x218>
 800c1c6:	e7eb      	b.n	800c1a0 <_printf_i+0x20c>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	f104 0619 	add.w	r6, r4, #25
 800c1ce:	e7f5      	b.n	800c1bc <_printf_i+0x228>
 800c1d0:	08010ea4 	.word	0x08010ea4
 800c1d4:	08010eb5 	.word	0x08010eb5

0800c1d8 <std>:
 800c1d8:	2300      	movs	r3, #0
 800c1da:	b510      	push	{r4, lr}
 800c1dc:	4604      	mov	r4, r0
 800c1de:	e9c0 3300 	strd	r3, r3, [r0]
 800c1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1e6:	6083      	str	r3, [r0, #8]
 800c1e8:	8181      	strh	r1, [r0, #12]
 800c1ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c1ec:	81c2      	strh	r2, [r0, #14]
 800c1ee:	6183      	str	r3, [r0, #24]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	2208      	movs	r2, #8
 800c1f4:	305c      	adds	r0, #92	; 0x5c
 800c1f6:	f000 f914 	bl	800c422 <memset>
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <std+0x58>)
 800c1fc:	6224      	str	r4, [r4, #32]
 800c1fe:	6263      	str	r3, [r4, #36]	; 0x24
 800c200:	4b0c      	ldr	r3, [pc, #48]	; (800c234 <std+0x5c>)
 800c202:	62a3      	str	r3, [r4, #40]	; 0x28
 800c204:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <std+0x60>)
 800c206:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c208:	4b0c      	ldr	r3, [pc, #48]	; (800c23c <std+0x64>)
 800c20a:	6323      	str	r3, [r4, #48]	; 0x30
 800c20c:	4b0c      	ldr	r3, [pc, #48]	; (800c240 <std+0x68>)
 800c20e:	429c      	cmp	r4, r3
 800c210:	d006      	beq.n	800c220 <std+0x48>
 800c212:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c216:	4294      	cmp	r4, r2
 800c218:	d002      	beq.n	800c220 <std+0x48>
 800c21a:	33d0      	adds	r3, #208	; 0xd0
 800c21c:	429c      	cmp	r4, r3
 800c21e:	d105      	bne.n	800c22c <std+0x54>
 800c220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c228:	f000 b978 	b.w	800c51c <__retarget_lock_init_recursive>
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	bf00      	nop
 800c230:	0800c39d 	.word	0x0800c39d
 800c234:	0800c3bf 	.word	0x0800c3bf
 800c238:	0800c3f7 	.word	0x0800c3f7
 800c23c:	0800c41b 	.word	0x0800c41b
 800c240:	20001b28 	.word	0x20001b28

0800c244 <stdio_exit_handler>:
 800c244:	4a02      	ldr	r2, [pc, #8]	; (800c250 <stdio_exit_handler+0xc>)
 800c246:	4903      	ldr	r1, [pc, #12]	; (800c254 <stdio_exit_handler+0x10>)
 800c248:	4803      	ldr	r0, [pc, #12]	; (800c258 <stdio_exit_handler+0x14>)
 800c24a:	f000 b869 	b.w	800c320 <_fwalk_sglue>
 800c24e:	bf00      	nop
 800c250:	200000b8 	.word	0x200000b8
 800c254:	0800ded5 	.word	0x0800ded5
 800c258:	200000c4 	.word	0x200000c4

0800c25c <cleanup_stdio>:
 800c25c:	6841      	ldr	r1, [r0, #4]
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <cleanup_stdio+0x34>)
 800c260:	b510      	push	{r4, lr}
 800c262:	4299      	cmp	r1, r3
 800c264:	4604      	mov	r4, r0
 800c266:	d001      	beq.n	800c26c <cleanup_stdio+0x10>
 800c268:	f001 fe34 	bl	800ded4 <_fflush_r>
 800c26c:	68a1      	ldr	r1, [r4, #8]
 800c26e:	4b09      	ldr	r3, [pc, #36]	; (800c294 <cleanup_stdio+0x38>)
 800c270:	4299      	cmp	r1, r3
 800c272:	d002      	beq.n	800c27a <cleanup_stdio+0x1e>
 800c274:	4620      	mov	r0, r4
 800c276:	f001 fe2d 	bl	800ded4 <_fflush_r>
 800c27a:	68e1      	ldr	r1, [r4, #12]
 800c27c:	4b06      	ldr	r3, [pc, #24]	; (800c298 <cleanup_stdio+0x3c>)
 800c27e:	4299      	cmp	r1, r3
 800c280:	d004      	beq.n	800c28c <cleanup_stdio+0x30>
 800c282:	4620      	mov	r0, r4
 800c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c288:	f001 be24 	b.w	800ded4 <_fflush_r>
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	bf00      	nop
 800c290:	20001b28 	.word	0x20001b28
 800c294:	20001b90 	.word	0x20001b90
 800c298:	20001bf8 	.word	0x20001bf8

0800c29c <global_stdio_init.part.0>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <global_stdio_init.part.0+0x30>)
 800c2a0:	4c0b      	ldr	r4, [pc, #44]	; (800c2d0 <global_stdio_init.part.0+0x34>)
 800c2a2:	4a0c      	ldr	r2, [pc, #48]	; (800c2d4 <global_stdio_init.part.0+0x38>)
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	2104      	movs	r1, #4
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f7ff ff94 	bl	800c1d8 <std>
 800c2b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	2109      	movs	r1, #9
 800c2b8:	f7ff ff8e 	bl	800c1d8 <std>
 800c2bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c6:	2112      	movs	r1, #18
 800c2c8:	f7ff bf86 	b.w	800c1d8 <std>
 800c2cc:	20001c60 	.word	0x20001c60
 800c2d0:	20001b28 	.word	0x20001b28
 800c2d4:	0800c245 	.word	0x0800c245

0800c2d8 <__sfp_lock_acquire>:
 800c2d8:	4801      	ldr	r0, [pc, #4]	; (800c2e0 <__sfp_lock_acquire+0x8>)
 800c2da:	f000 b920 	b.w	800c51e <__retarget_lock_acquire_recursive>
 800c2de:	bf00      	nop
 800c2e0:	20001c69 	.word	0x20001c69

0800c2e4 <__sfp_lock_release>:
 800c2e4:	4801      	ldr	r0, [pc, #4]	; (800c2ec <__sfp_lock_release+0x8>)
 800c2e6:	f000 b91b 	b.w	800c520 <__retarget_lock_release_recursive>
 800c2ea:	bf00      	nop
 800c2ec:	20001c69 	.word	0x20001c69

0800c2f0 <__sinit>:
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	f7ff fff0 	bl	800c2d8 <__sfp_lock_acquire>
 800c2f8:	6a23      	ldr	r3, [r4, #32]
 800c2fa:	b11b      	cbz	r3, 800c304 <__sinit+0x14>
 800c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c300:	f7ff bff0 	b.w	800c2e4 <__sfp_lock_release>
 800c304:	4b04      	ldr	r3, [pc, #16]	; (800c318 <__sinit+0x28>)
 800c306:	6223      	str	r3, [r4, #32]
 800c308:	4b04      	ldr	r3, [pc, #16]	; (800c31c <__sinit+0x2c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1f5      	bne.n	800c2fc <__sinit+0xc>
 800c310:	f7ff ffc4 	bl	800c29c <global_stdio_init.part.0>
 800c314:	e7f2      	b.n	800c2fc <__sinit+0xc>
 800c316:	bf00      	nop
 800c318:	0800c25d 	.word	0x0800c25d
 800c31c:	20001c60 	.word	0x20001c60

0800c320 <_fwalk_sglue>:
 800c320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c324:	4607      	mov	r7, r0
 800c326:	4688      	mov	r8, r1
 800c328:	4614      	mov	r4, r2
 800c32a:	2600      	movs	r6, #0
 800c32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c330:	f1b9 0901 	subs.w	r9, r9, #1
 800c334:	d505      	bpl.n	800c342 <_fwalk_sglue+0x22>
 800c336:	6824      	ldr	r4, [r4, #0]
 800c338:	2c00      	cmp	r4, #0
 800c33a:	d1f7      	bne.n	800c32c <_fwalk_sglue+0xc>
 800c33c:	4630      	mov	r0, r6
 800c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d907      	bls.n	800c358 <_fwalk_sglue+0x38>
 800c348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c34c:	3301      	adds	r3, #1
 800c34e:	d003      	beq.n	800c358 <_fwalk_sglue+0x38>
 800c350:	4629      	mov	r1, r5
 800c352:	4638      	mov	r0, r7
 800c354:	47c0      	blx	r8
 800c356:	4306      	orrs	r6, r0
 800c358:	3568      	adds	r5, #104	; 0x68
 800c35a:	e7e9      	b.n	800c330 <_fwalk_sglue+0x10>

0800c35c <siprintf>:
 800c35c:	b40e      	push	{r1, r2, r3}
 800c35e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c362:	b500      	push	{lr}
 800c364:	b09c      	sub	sp, #112	; 0x70
 800c366:	ab1d      	add	r3, sp, #116	; 0x74
 800c368:	9002      	str	r0, [sp, #8]
 800c36a:	9006      	str	r0, [sp, #24]
 800c36c:	9107      	str	r1, [sp, #28]
 800c36e:	9104      	str	r1, [sp, #16]
 800c370:	4808      	ldr	r0, [pc, #32]	; (800c394 <siprintf+0x38>)
 800c372:	4909      	ldr	r1, [pc, #36]	; (800c398 <siprintf+0x3c>)
 800c374:	f853 2b04 	ldr.w	r2, [r3], #4
 800c378:	9105      	str	r1, [sp, #20]
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	a902      	add	r1, sp, #8
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	f001 fc28 	bl	800dbd4 <_svfiprintf_r>
 800c384:	2200      	movs	r2, #0
 800c386:	9b02      	ldr	r3, [sp, #8]
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	b01c      	add	sp, #112	; 0x70
 800c38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c390:	b003      	add	sp, #12
 800c392:	4770      	bx	lr
 800c394:	20000110 	.word	0x20000110
 800c398:	ffff0208 	.word	0xffff0208

0800c39c <__sread>:
 800c39c:	b510      	push	{r4, lr}
 800c39e:	460c      	mov	r4, r1
 800c3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a4:	f000 f86c 	bl	800c480 <_read_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	bfab      	itete	ge
 800c3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c3b0:	181b      	addge	r3, r3, r0
 800c3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3b6:	bfac      	ite	ge
 800c3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3ba:	81a3      	strhlt	r3, [r4, #12]
 800c3bc:	bd10      	pop	{r4, pc}

0800c3be <__swrite>:
 800c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c2:	461f      	mov	r7, r3
 800c3c4:	898b      	ldrh	r3, [r1, #12]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	05db      	lsls	r3, r3, #23
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	d505      	bpl.n	800c3dc <__swrite+0x1e>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d8:	f000 f840 	bl	800c45c <_lseek_r>
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	4632      	mov	r2, r6
 800c3e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3e4:	81a3      	strh	r3, [r4, #12]
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	463b      	mov	r3, r7
 800c3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f2:	f000 b857 	b.w	800c4a4 <_write_r>

0800c3f6 <__sseek>:
 800c3f6:	b510      	push	{r4, lr}
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fe:	f000 f82d 	bl	800c45c <_lseek_r>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	bf15      	itete	ne
 800c408:	6560      	strne	r0, [r4, #84]	; 0x54
 800c40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c412:	81a3      	strheq	r3, [r4, #12]
 800c414:	bf18      	it	ne
 800c416:	81a3      	strhne	r3, [r4, #12]
 800c418:	bd10      	pop	{r4, pc}

0800c41a <__sclose>:
 800c41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41e:	f000 b80d 	b.w	800c43c <_close_r>

0800c422 <memset>:
 800c422:	4603      	mov	r3, r0
 800c424:	4402      	add	r2, r0
 800c426:	4293      	cmp	r3, r2
 800c428:	d100      	bne.n	800c42c <memset+0xa>
 800c42a:	4770      	bx	lr
 800c42c:	f803 1b01 	strb.w	r1, [r3], #1
 800c430:	e7f9      	b.n	800c426 <memset+0x4>
	...

0800c434 <_localeconv_r>:
 800c434:	4800      	ldr	r0, [pc, #0]	; (800c438 <_localeconv_r+0x4>)
 800c436:	4770      	bx	lr
 800c438:	20000204 	.word	0x20000204

0800c43c <_close_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	2300      	movs	r3, #0
 800c440:	4d05      	ldr	r5, [pc, #20]	; (800c458 <_close_r+0x1c>)
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	f7fb f974 	bl	8007734 <_close>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d102      	bne.n	800c456 <_close_r+0x1a>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	b103      	cbz	r3, 800c456 <_close_r+0x1a>
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	20001c64 	.word	0x20001c64

0800c45c <_lseek_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	2200      	movs	r2, #0
 800c466:	4d05      	ldr	r5, [pc, #20]	; (800c47c <_lseek_r+0x20>)
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f7fb f986 	bl	800777c <_lseek>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_lseek_r+0x1e>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_lseek_r+0x1e>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20001c64 	.word	0x20001c64

0800c480 <_read_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	4611      	mov	r1, r2
 800c488:	2200      	movs	r2, #0
 800c48a:	4d05      	ldr	r5, [pc, #20]	; (800c4a0 <_read_r+0x20>)
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7fb f917 	bl	80076c2 <_read>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_read_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_read_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20001c64 	.word	0x20001c64

0800c4a4 <_write_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4d05      	ldr	r5, [pc, #20]	; (800c4c4 <_write_r+0x20>)
 800c4b0:	602a      	str	r2, [r5, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f7fb f922 	bl	80076fc <_write>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d102      	bne.n	800c4c2 <_write_r+0x1e>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	b103      	cbz	r3, 800c4c2 <_write_r+0x1e>
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	20001c64 	.word	0x20001c64

0800c4c8 <__errno>:
 800c4c8:	4b01      	ldr	r3, [pc, #4]	; (800c4d0 <__errno+0x8>)
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	20000110 	.word	0x20000110

0800c4d4 <__libc_init_array>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	4d0c      	ldr	r5, [pc, #48]	; (800c50c <__libc_init_array+0x38>)
 800c4da:	4c0d      	ldr	r4, [pc, #52]	; (800c510 <__libc_init_array+0x3c>)
 800c4dc:	1b64      	subs	r4, r4, r5
 800c4de:	10a4      	asrs	r4, r4, #2
 800c4e0:	42a6      	cmp	r6, r4
 800c4e2:	d109      	bne.n	800c4f8 <__libc_init_array+0x24>
 800c4e4:	f002 ff92 	bl	800f40c <_init>
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	4d0a      	ldr	r5, [pc, #40]	; (800c514 <__libc_init_array+0x40>)
 800c4ec:	4c0a      	ldr	r4, [pc, #40]	; (800c518 <__libc_init_array+0x44>)
 800c4ee:	1b64      	subs	r4, r4, r5
 800c4f0:	10a4      	asrs	r4, r4, #2
 800c4f2:	42a6      	cmp	r6, r4
 800c4f4:	d105      	bne.n	800c502 <__libc_init_array+0x2e>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fc:	4798      	blx	r3
 800c4fe:	3601      	adds	r6, #1
 800c500:	e7ee      	b.n	800c4e0 <__libc_init_array+0xc>
 800c502:	f855 3b04 	ldr.w	r3, [r5], #4
 800c506:	4798      	blx	r3
 800c508:	3601      	adds	r6, #1
 800c50a:	e7f2      	b.n	800c4f2 <__libc_init_array+0x1e>
 800c50c:	08011240 	.word	0x08011240
 800c510:	08011240 	.word	0x08011240
 800c514:	08011240 	.word	0x08011240
 800c518:	08011244 	.word	0x08011244

0800c51c <__retarget_lock_init_recursive>:
 800c51c:	4770      	bx	lr

0800c51e <__retarget_lock_acquire_recursive>:
 800c51e:	4770      	bx	lr

0800c520 <__retarget_lock_release_recursive>:
 800c520:	4770      	bx	lr

0800c522 <memchr>:
 800c522:	4603      	mov	r3, r0
 800c524:	b510      	push	{r4, lr}
 800c526:	b2c9      	uxtb	r1, r1
 800c528:	4402      	add	r2, r0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	d101      	bne.n	800c534 <memchr+0x12>
 800c530:	2000      	movs	r0, #0
 800c532:	e003      	b.n	800c53c <memchr+0x1a>
 800c534:	7804      	ldrb	r4, [r0, #0]
 800c536:	3301      	adds	r3, #1
 800c538:	428c      	cmp	r4, r1
 800c53a:	d1f6      	bne.n	800c52a <memchr+0x8>
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <memcpy>:
 800c53e:	440a      	add	r2, r1
 800c540:	4291      	cmp	r1, r2
 800c542:	f100 33ff 	add.w	r3, r0, #4294967295
 800c546:	d100      	bne.n	800c54a <memcpy+0xc>
 800c548:	4770      	bx	lr
 800c54a:	b510      	push	{r4, lr}
 800c54c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c550:	4291      	cmp	r1, r2
 800c552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c556:	d1f9      	bne.n	800c54c <memcpy+0xe>
 800c558:	bd10      	pop	{r4, pc}

0800c55a <quorem>:
 800c55a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55e:	6903      	ldr	r3, [r0, #16]
 800c560:	690c      	ldr	r4, [r1, #16]
 800c562:	4607      	mov	r7, r0
 800c564:	42a3      	cmp	r3, r4
 800c566:	db7f      	blt.n	800c668 <quorem+0x10e>
 800c568:	3c01      	subs	r4, #1
 800c56a:	f100 0514 	add.w	r5, r0, #20
 800c56e:	f101 0814 	add.w	r8, r1, #20
 800c572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c57c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c580:	3301      	adds	r3, #1
 800c582:	429a      	cmp	r2, r3
 800c584:	fbb2 f6f3 	udiv	r6, r2, r3
 800c588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c58c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c590:	d331      	bcc.n	800c5f6 <quorem+0x9c>
 800c592:	f04f 0e00 	mov.w	lr, #0
 800c596:	4640      	mov	r0, r8
 800c598:	46ac      	mov	ip, r5
 800c59a:	46f2      	mov	sl, lr
 800c59c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5a0:	b293      	uxth	r3, r2
 800c5a2:	fb06 e303 	mla	r3, r6, r3, lr
 800c5a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5aa:	0c1a      	lsrs	r2, r3, #16
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	fb06 220e 	mla	r2, r6, lr, r2
 800c5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800c5b6:	f8dc a000 	ldr.w	sl, [ip]
 800c5ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5be:	fa1f fa8a 	uxth.w	sl, sl
 800c5c2:	4453      	add	r3, sl
 800c5c4:	f8dc a000 	ldr.w	sl, [ip]
 800c5c8:	b292      	uxth	r2, r2
 800c5ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5d8:	4581      	cmp	r9, r0
 800c5da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5de:	f84c 3b04 	str.w	r3, [ip], #4
 800c5e2:	d2db      	bcs.n	800c59c <quorem+0x42>
 800c5e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c5e8:	b92b      	cbnz	r3, 800c5f6 <quorem+0x9c>
 800c5ea:	9b01      	ldr	r3, [sp, #4]
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	429d      	cmp	r5, r3
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	d32d      	bcc.n	800c650 <quorem+0xf6>
 800c5f4:	613c      	str	r4, [r7, #16]
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	f001 f994 	bl	800d924 <__mcmp>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	db23      	blt.n	800c648 <quorem+0xee>
 800c600:	4629      	mov	r1, r5
 800c602:	2000      	movs	r0, #0
 800c604:	3601      	adds	r6, #1
 800c606:	f858 2b04 	ldr.w	r2, [r8], #4
 800c60a:	f8d1 c000 	ldr.w	ip, [r1]
 800c60e:	b293      	uxth	r3, r2
 800c610:	1ac3      	subs	r3, r0, r3
 800c612:	0c12      	lsrs	r2, r2, #16
 800c614:	fa1f f08c 	uxth.w	r0, ip
 800c618:	4403      	add	r3, r0
 800c61a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c61e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c622:	b29b      	uxth	r3, r3
 800c624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c628:	45c1      	cmp	r9, r8
 800c62a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c62e:	f841 3b04 	str.w	r3, [r1], #4
 800c632:	d2e8      	bcs.n	800c606 <quorem+0xac>
 800c634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c63c:	b922      	cbnz	r2, 800c648 <quorem+0xee>
 800c63e:	3b04      	subs	r3, #4
 800c640:	429d      	cmp	r5, r3
 800c642:	461a      	mov	r2, r3
 800c644:	d30a      	bcc.n	800c65c <quorem+0x102>
 800c646:	613c      	str	r4, [r7, #16]
 800c648:	4630      	mov	r0, r6
 800c64a:	b003      	add	sp, #12
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	6812      	ldr	r2, [r2, #0]
 800c652:	3b04      	subs	r3, #4
 800c654:	2a00      	cmp	r2, #0
 800c656:	d1cd      	bne.n	800c5f4 <quorem+0x9a>
 800c658:	3c01      	subs	r4, #1
 800c65a:	e7c8      	b.n	800c5ee <quorem+0x94>
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	3b04      	subs	r3, #4
 800c660:	2a00      	cmp	r2, #0
 800c662:	d1f0      	bne.n	800c646 <quorem+0xec>
 800c664:	3c01      	subs	r4, #1
 800c666:	e7eb      	b.n	800c640 <quorem+0xe6>
 800c668:	2000      	movs	r0, #0
 800c66a:	e7ee      	b.n	800c64a <quorem+0xf0>
 800c66c:	0000      	movs	r0, r0
	...

0800c670 <_dtoa_r>:
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	4616      	mov	r6, r2
 800c676:	461f      	mov	r7, r3
 800c678:	69c4      	ldr	r4, [r0, #28]
 800c67a:	b099      	sub	sp, #100	; 0x64
 800c67c:	4605      	mov	r5, r0
 800c67e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c682:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c686:	b974      	cbnz	r4, 800c6a6 <_dtoa_r+0x36>
 800c688:	2010      	movs	r0, #16
 800c68a:	f000 fe1d 	bl	800d2c8 <malloc>
 800c68e:	4602      	mov	r2, r0
 800c690:	61e8      	str	r0, [r5, #28]
 800c692:	b920      	cbnz	r0, 800c69e <_dtoa_r+0x2e>
 800c694:	21ef      	movs	r1, #239	; 0xef
 800c696:	4bac      	ldr	r3, [pc, #688]	; (800c948 <_dtoa_r+0x2d8>)
 800c698:	48ac      	ldr	r0, [pc, #688]	; (800c94c <_dtoa_r+0x2dc>)
 800c69a:	f001 fc6d 	bl	800df78 <__assert_func>
 800c69e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6a2:	6004      	str	r4, [r0, #0]
 800c6a4:	60c4      	str	r4, [r0, #12]
 800c6a6:	69eb      	ldr	r3, [r5, #28]
 800c6a8:	6819      	ldr	r1, [r3, #0]
 800c6aa:	b151      	cbz	r1, 800c6c2 <_dtoa_r+0x52>
 800c6ac:	685a      	ldr	r2, [r3, #4]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4093      	lsls	r3, r2
 800c6b2:	604a      	str	r2, [r1, #4]
 800c6b4:	608b      	str	r3, [r1, #8]
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f000 fefa 	bl	800d4b0 <_Bfree>
 800c6bc:	2200      	movs	r2, #0
 800c6be:	69eb      	ldr	r3, [r5, #28]
 800c6c0:	601a      	str	r2, [r3, #0]
 800c6c2:	1e3b      	subs	r3, r7, #0
 800c6c4:	bfaf      	iteee	ge
 800c6c6:	2300      	movge	r3, #0
 800c6c8:	2201      	movlt	r2, #1
 800c6ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c6ce:	9305      	strlt	r3, [sp, #20]
 800c6d0:	bfa8      	it	ge
 800c6d2:	f8c8 3000 	strge.w	r3, [r8]
 800c6d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c6da:	4b9d      	ldr	r3, [pc, #628]	; (800c950 <_dtoa_r+0x2e0>)
 800c6dc:	bfb8      	it	lt
 800c6de:	f8c8 2000 	strlt.w	r2, [r8]
 800c6e2:	ea33 0309 	bics.w	r3, r3, r9
 800c6e6:	d119      	bne.n	800c71c <_dtoa_r+0xac>
 800c6e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6f4:	4333      	orrs	r3, r6
 800c6f6:	f000 8589 	beq.w	800d20c <_dtoa_r+0xb9c>
 800c6fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c6fc:	b953      	cbnz	r3, 800c714 <_dtoa_r+0xa4>
 800c6fe:	4b95      	ldr	r3, [pc, #596]	; (800c954 <_dtoa_r+0x2e4>)
 800c700:	e023      	b.n	800c74a <_dtoa_r+0xda>
 800c702:	4b95      	ldr	r3, [pc, #596]	; (800c958 <_dtoa_r+0x2e8>)
 800c704:	9303      	str	r3, [sp, #12]
 800c706:	3308      	adds	r3, #8
 800c708:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	9803      	ldr	r0, [sp, #12]
 800c70e:	b019      	add	sp, #100	; 0x64
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	4b8f      	ldr	r3, [pc, #572]	; (800c954 <_dtoa_r+0x2e4>)
 800c716:	9303      	str	r3, [sp, #12]
 800c718:	3303      	adds	r3, #3
 800c71a:	e7f5      	b.n	800c708 <_dtoa_r+0x98>
 800c71c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c720:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c728:	2200      	movs	r2, #0
 800c72a:	2300      	movs	r3, #0
 800c72c:	f7f4 f93c 	bl	80009a8 <__aeabi_dcmpeq>
 800c730:	4680      	mov	r8, r0
 800c732:	b160      	cbz	r0, 800c74e <_dtoa_r+0xde>
 800c734:	2301      	movs	r3, #1
 800c736:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8562 	beq.w	800d206 <_dtoa_r+0xb96>
 800c742:	4b86      	ldr	r3, [pc, #536]	; (800c95c <_dtoa_r+0x2ec>)
 800c744:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	3b01      	subs	r3, #1
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	e7de      	b.n	800c70c <_dtoa_r+0x9c>
 800c74e:	ab16      	add	r3, sp, #88	; 0x58
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	ab17      	add	r3, sp, #92	; 0x5c
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	4628      	mov	r0, r5
 800c758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c75c:	f001 f98a 	bl	800da74 <__d2b>
 800c760:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c764:	4682      	mov	sl, r0
 800c766:	2c00      	cmp	r4, #0
 800c768:	d07e      	beq.n	800c868 <_dtoa_r+0x1f8>
 800c76a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c76e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c770:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c778:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c77c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c780:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c784:	4619      	mov	r1, r3
 800c786:	2200      	movs	r2, #0
 800c788:	4b75      	ldr	r3, [pc, #468]	; (800c960 <_dtoa_r+0x2f0>)
 800c78a:	f7f3 fced 	bl	8000168 <__aeabi_dsub>
 800c78e:	a368      	add	r3, pc, #416	; (adr r3, 800c930 <_dtoa_r+0x2c0>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 fea0 	bl	80004d8 <__aeabi_dmul>
 800c798:	a367      	add	r3, pc, #412	; (adr r3, 800c938 <_dtoa_r+0x2c8>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 fce5 	bl	800016c <__adddf3>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	460f      	mov	r7, r1
 800c7a8:	f7f3 fe2c 	bl	8000404 <__aeabi_i2d>
 800c7ac:	a364      	add	r3, pc, #400	; (adr r3, 800c940 <_dtoa_r+0x2d0>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f7f3 fe91 	bl	80004d8 <__aeabi_dmul>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	4639      	mov	r1, r7
 800c7be:	f7f3 fcd5 	bl	800016c <__adddf3>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	460f      	mov	r7, r1
 800c7c6:	f7f4 f937 	bl	8000a38 <__aeabi_d2iz>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	4683      	mov	fp, r0
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	f7f4 f8f2 	bl	80009bc <__aeabi_dcmplt>
 800c7d8:	b148      	cbz	r0, 800c7ee <_dtoa_r+0x17e>
 800c7da:	4658      	mov	r0, fp
 800c7dc:	f7f3 fe12 	bl	8000404 <__aeabi_i2d>
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	f7f4 f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 800c7e8:	b908      	cbnz	r0, 800c7ee <_dtoa_r+0x17e>
 800c7ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7ee:	f1bb 0f16 	cmp.w	fp, #22
 800c7f2:	d857      	bhi.n	800c8a4 <_dtoa_r+0x234>
 800c7f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7f8:	4b5a      	ldr	r3, [pc, #360]	; (800c964 <_dtoa_r+0x2f4>)
 800c7fa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c802:	f7f4 f8db 	bl	80009bc <__aeabi_dcmplt>
 800c806:	2800      	cmp	r0, #0
 800c808:	d04e      	beq.n	800c8a8 <_dtoa_r+0x238>
 800c80a:	2300      	movs	r3, #0
 800c80c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c810:	930f      	str	r3, [sp, #60]	; 0x3c
 800c812:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c814:	1b1b      	subs	r3, r3, r4
 800c816:	1e5a      	subs	r2, r3, #1
 800c818:	bf46      	itte	mi
 800c81a:	f1c3 0901 	rsbmi	r9, r3, #1
 800c81e:	2300      	movmi	r3, #0
 800c820:	f04f 0900 	movpl.w	r9, #0
 800c824:	9209      	str	r2, [sp, #36]	; 0x24
 800c826:	bf48      	it	mi
 800c828:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c82a:	f1bb 0f00 	cmp.w	fp, #0
 800c82e:	db3d      	blt.n	800c8ac <_dtoa_r+0x23c>
 800c830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c832:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c836:	445b      	add	r3, fp
 800c838:	9309      	str	r3, [sp, #36]	; 0x24
 800c83a:	2300      	movs	r3, #0
 800c83c:	930a      	str	r3, [sp, #40]	; 0x28
 800c83e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c840:	2b09      	cmp	r3, #9
 800c842:	d867      	bhi.n	800c914 <_dtoa_r+0x2a4>
 800c844:	2b05      	cmp	r3, #5
 800c846:	bfc4      	itt	gt
 800c848:	3b04      	subgt	r3, #4
 800c84a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c84c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c84e:	bfc8      	it	gt
 800c850:	2400      	movgt	r4, #0
 800c852:	f1a3 0302 	sub.w	r3, r3, #2
 800c856:	bfd8      	it	le
 800c858:	2401      	movle	r4, #1
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	f200 8086 	bhi.w	800c96c <_dtoa_r+0x2fc>
 800c860:	e8df f003 	tbb	[pc, r3]
 800c864:	5637392c 	.word	0x5637392c
 800c868:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c86c:	441c      	add	r4, r3
 800c86e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c872:	2b20      	cmp	r3, #32
 800c874:	bfc1      	itttt	gt
 800c876:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c87a:	fa09 f903 	lslgt.w	r9, r9, r3
 800c87e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800c882:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c886:	bfd6      	itet	le
 800c888:	f1c3 0320 	rsble	r3, r3, #32
 800c88c:	ea49 0003 	orrgt.w	r0, r9, r3
 800c890:	fa06 f003 	lslle.w	r0, r6, r3
 800c894:	f7f3 fda6 	bl	80003e4 <__aeabi_ui2d>
 800c898:	2201      	movs	r2, #1
 800c89a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c89e:	3c01      	subs	r4, #1
 800c8a0:	9213      	str	r2, [sp, #76]	; 0x4c
 800c8a2:	e76f      	b.n	800c784 <_dtoa_r+0x114>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e7b3      	b.n	800c810 <_dtoa_r+0x1a0>
 800c8a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c8aa:	e7b2      	b.n	800c812 <_dtoa_r+0x1a2>
 800c8ac:	f1cb 0300 	rsb	r3, fp, #0
 800c8b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	eba9 090b 	sub.w	r9, r9, fp
 800c8b8:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ba:	e7c0      	b.n	800c83e <_dtoa_r+0x1ce>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	dc55      	bgt.n	800c972 <_dtoa_r+0x302>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	9306      	str	r3, [sp, #24]
 800c8cc:	9308      	str	r3, [sp, #32]
 800c8ce:	9223      	str	r2, [sp, #140]	; 0x8c
 800c8d0:	e00b      	b.n	800c8ea <_dtoa_r+0x27a>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7f3      	b.n	800c8be <_dtoa_r+0x24e>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8dc:	445b      	add	r3, fp
 800c8de:	9306      	str	r3, [sp, #24]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	9308      	str	r3, [sp, #32]
 800c8e6:	bfb8      	it	lt
 800c8e8:	2301      	movlt	r3, #1
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	69e8      	ldr	r0, [r5, #28]
 800c8f0:	f102 0614 	add.w	r6, r2, #20
 800c8f4:	429e      	cmp	r6, r3
 800c8f6:	d940      	bls.n	800c97a <_dtoa_r+0x30a>
 800c8f8:	6041      	str	r1, [r0, #4]
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f000 fd98 	bl	800d430 <_Balloc>
 800c900:	9003      	str	r0, [sp, #12]
 800c902:	2800      	cmp	r0, #0
 800c904:	d13c      	bne.n	800c980 <_dtoa_r+0x310>
 800c906:	4602      	mov	r2, r0
 800c908:	f240 11af 	movw	r1, #431	; 0x1af
 800c90c:	4b16      	ldr	r3, [pc, #88]	; (800c968 <_dtoa_r+0x2f8>)
 800c90e:	e6c3      	b.n	800c698 <_dtoa_r+0x28>
 800c910:	2301      	movs	r3, #1
 800c912:	e7e1      	b.n	800c8d8 <_dtoa_r+0x268>
 800c914:	2401      	movs	r4, #1
 800c916:	2300      	movs	r3, #0
 800c918:	940b      	str	r4, [sp, #44]	; 0x2c
 800c91a:	9322      	str	r3, [sp, #136]	; 0x88
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	2200      	movs	r2, #0
 800c922:	9306      	str	r3, [sp, #24]
 800c924:	9308      	str	r3, [sp, #32]
 800c926:	2312      	movs	r3, #18
 800c928:	e7d1      	b.n	800c8ce <_dtoa_r+0x25e>
 800c92a:	bf00      	nop
 800c92c:	f3af 8000 	nop.w
 800c930:	636f4361 	.word	0x636f4361
 800c934:	3fd287a7 	.word	0x3fd287a7
 800c938:	8b60c8b3 	.word	0x8b60c8b3
 800c93c:	3fc68a28 	.word	0x3fc68a28
 800c940:	509f79fb 	.word	0x509f79fb
 800c944:	3fd34413 	.word	0x3fd34413
 800c948:	08010ed3 	.word	0x08010ed3
 800c94c:	08010eea 	.word	0x08010eea
 800c950:	7ff00000 	.word	0x7ff00000
 800c954:	08010ecf 	.word	0x08010ecf
 800c958:	08010ec6 	.word	0x08010ec6
 800c95c:	08010ea3 	.word	0x08010ea3
 800c960:	3ff80000 	.word	0x3ff80000
 800c964:	08010fd8 	.word	0x08010fd8
 800c968:	08010f42 	.word	0x08010f42
 800c96c:	2301      	movs	r3, #1
 800c96e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c970:	e7d4      	b.n	800c91c <_dtoa_r+0x2ac>
 800c972:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c974:	9306      	str	r3, [sp, #24]
 800c976:	9308      	str	r3, [sp, #32]
 800c978:	e7b7      	b.n	800c8ea <_dtoa_r+0x27a>
 800c97a:	3101      	adds	r1, #1
 800c97c:	0052      	lsls	r2, r2, #1
 800c97e:	e7b7      	b.n	800c8f0 <_dtoa_r+0x280>
 800c980:	69eb      	ldr	r3, [r5, #28]
 800c982:	9a03      	ldr	r2, [sp, #12]
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	9b08      	ldr	r3, [sp, #32]
 800c988:	2b0e      	cmp	r3, #14
 800c98a:	f200 80a8 	bhi.w	800cade <_dtoa_r+0x46e>
 800c98e:	2c00      	cmp	r4, #0
 800c990:	f000 80a5 	beq.w	800cade <_dtoa_r+0x46e>
 800c994:	f1bb 0f00 	cmp.w	fp, #0
 800c998:	dd34      	ble.n	800ca04 <_dtoa_r+0x394>
 800c99a:	4b9a      	ldr	r3, [pc, #616]	; (800cc04 <_dtoa_r+0x594>)
 800c99c:	f00b 020f 	and.w	r2, fp, #15
 800c9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c9a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c9b0:	ea4f 142b 	mov.w	r4, fp, asr #4
 800c9b4:	d016      	beq.n	800c9e4 <_dtoa_r+0x374>
 800c9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c9ba:	4b93      	ldr	r3, [pc, #588]	; (800cc08 <_dtoa_r+0x598>)
 800c9bc:	2703      	movs	r7, #3
 800c9be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9c2:	f7f3 feb3 	bl	800072c <__aeabi_ddiv>
 800c9c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ca:	f004 040f 	and.w	r4, r4, #15
 800c9ce:	4e8e      	ldr	r6, [pc, #568]	; (800cc08 <_dtoa_r+0x598>)
 800c9d0:	b954      	cbnz	r4, 800c9e8 <_dtoa_r+0x378>
 800c9d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c9d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9da:	f7f3 fea7 	bl	800072c <__aeabi_ddiv>
 800c9de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9e2:	e029      	b.n	800ca38 <_dtoa_r+0x3c8>
 800c9e4:	2702      	movs	r7, #2
 800c9e6:	e7f2      	b.n	800c9ce <_dtoa_r+0x35e>
 800c9e8:	07e1      	lsls	r1, r4, #31
 800c9ea:	d508      	bpl.n	800c9fe <_dtoa_r+0x38e>
 800c9ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c9f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9f4:	f7f3 fd70 	bl	80004d8 <__aeabi_dmul>
 800c9f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c9fc:	3701      	adds	r7, #1
 800c9fe:	1064      	asrs	r4, r4, #1
 800ca00:	3608      	adds	r6, #8
 800ca02:	e7e5      	b.n	800c9d0 <_dtoa_r+0x360>
 800ca04:	f000 80a5 	beq.w	800cb52 <_dtoa_r+0x4e2>
 800ca08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca0c:	f1cb 0400 	rsb	r4, fp, #0
 800ca10:	4b7c      	ldr	r3, [pc, #496]	; (800cc04 <_dtoa_r+0x594>)
 800ca12:	f004 020f 	and.w	r2, r4, #15
 800ca16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	f7f3 fd5b 	bl	80004d8 <__aeabi_dmul>
 800ca22:	2702      	movs	r7, #2
 800ca24:	2300      	movs	r3, #0
 800ca26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca2a:	4e77      	ldr	r6, [pc, #476]	; (800cc08 <_dtoa_r+0x598>)
 800ca2c:	1124      	asrs	r4, r4, #4
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	f040 8084 	bne.w	800cb3c <_dtoa_r+0x4cc>
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1d2      	bne.n	800c9de <_dtoa_r+0x36e>
 800ca38:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ca3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ca40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 8087 	beq.w	800cb56 <_dtoa_r+0x4e6>
 800ca48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	4b6f      	ldr	r3, [pc, #444]	; (800cc0c <_dtoa_r+0x59c>)
 800ca50:	f7f3 ffb4 	bl	80009bc <__aeabi_dcmplt>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d07e      	beq.n	800cb56 <_dtoa_r+0x4e6>
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d07b      	beq.n	800cb56 <_dtoa_r+0x4e6>
 800ca5e:	9b06      	ldr	r3, [sp, #24]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	dd38      	ble.n	800cad6 <_dtoa_r+0x466>
 800ca64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca68:	2200      	movs	r2, #0
 800ca6a:	4b69      	ldr	r3, [pc, #420]	; (800cc10 <_dtoa_r+0x5a0>)
 800ca6c:	f7f3 fd34 	bl	80004d8 <__aeabi_dmul>
 800ca70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca74:	9c06      	ldr	r4, [sp, #24]
 800ca76:	f10b 38ff 	add.w	r8, fp, #4294967295
 800ca7a:	3701      	adds	r7, #1
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f7f3 fcc1 	bl	8000404 <__aeabi_i2d>
 800ca82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca86:	f7f3 fd27 	bl	80004d8 <__aeabi_dmul>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4b61      	ldr	r3, [pc, #388]	; (800cc14 <_dtoa_r+0x5a4>)
 800ca8e:	f7f3 fb6d 	bl	800016c <__adddf3>
 800ca92:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ca96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ca9a:	9611      	str	r6, [sp, #68]	; 0x44
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	d15d      	bne.n	800cb5c <_dtoa_r+0x4ec>
 800caa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caa4:	2200      	movs	r2, #0
 800caa6:	4b5c      	ldr	r3, [pc, #368]	; (800cc18 <_dtoa_r+0x5a8>)
 800caa8:	f7f3 fb5e 	bl	8000168 <__aeabi_dsub>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cab4:	4633      	mov	r3, r6
 800cab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cab8:	f7f3 ff9e 	bl	80009f8 <__aeabi_dcmpgt>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f040 8295 	bne.w	800cfec <_dtoa_r+0x97c>
 800cac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cac6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cac8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cacc:	f7f3 ff76 	bl	80009bc <__aeabi_dcmplt>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	f040 8289 	bne.w	800cfe8 <_dtoa_r+0x978>
 800cad6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cada:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f2c0 8151 	blt.w	800cd88 <_dtoa_r+0x718>
 800cae6:	f1bb 0f0e 	cmp.w	fp, #14
 800caea:	f300 814d 	bgt.w	800cd88 <_dtoa_r+0x718>
 800caee:	4b45      	ldr	r3, [pc, #276]	; (800cc04 <_dtoa_r+0x594>)
 800caf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800caf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800caf8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cafc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f280 80da 	bge.w	800ccb8 <_dtoa_r+0x648>
 800cb04:	9b08      	ldr	r3, [sp, #32]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f300 80d6 	bgt.w	800ccb8 <_dtoa_r+0x648>
 800cb0c:	f040 826b 	bne.w	800cfe6 <_dtoa_r+0x976>
 800cb10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb14:	2200      	movs	r2, #0
 800cb16:	4b40      	ldr	r3, [pc, #256]	; (800cc18 <_dtoa_r+0x5a8>)
 800cb18:	f7f3 fcde 	bl	80004d8 <__aeabi_dmul>
 800cb1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb20:	f7f3 ff60 	bl	80009e4 <__aeabi_dcmpge>
 800cb24:	9c08      	ldr	r4, [sp, #32]
 800cb26:	4626      	mov	r6, r4
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	f040 8241 	bne.w	800cfb0 <_dtoa_r+0x940>
 800cb2e:	2331      	movs	r3, #49	; 0x31
 800cb30:	9f03      	ldr	r7, [sp, #12]
 800cb32:	f10b 0b01 	add.w	fp, fp, #1
 800cb36:	f807 3b01 	strb.w	r3, [r7], #1
 800cb3a:	e23d      	b.n	800cfb8 <_dtoa_r+0x948>
 800cb3c:	07e2      	lsls	r2, r4, #31
 800cb3e:	d505      	bpl.n	800cb4c <_dtoa_r+0x4dc>
 800cb40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb44:	f7f3 fcc8 	bl	80004d8 <__aeabi_dmul>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	3701      	adds	r7, #1
 800cb4c:	1064      	asrs	r4, r4, #1
 800cb4e:	3608      	adds	r6, #8
 800cb50:	e76d      	b.n	800ca2e <_dtoa_r+0x3be>
 800cb52:	2702      	movs	r7, #2
 800cb54:	e770      	b.n	800ca38 <_dtoa_r+0x3c8>
 800cb56:	46d8      	mov	r8, fp
 800cb58:	9c08      	ldr	r4, [sp, #32]
 800cb5a:	e78f      	b.n	800ca7c <_dtoa_r+0x40c>
 800cb5c:	9903      	ldr	r1, [sp, #12]
 800cb5e:	4b29      	ldr	r3, [pc, #164]	; (800cc04 <_dtoa_r+0x594>)
 800cb60:	4421      	add	r1, r4
 800cb62:	9112      	str	r1, [sp, #72]	; 0x48
 800cb64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb6a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cb6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d054      	beq.n	800cc20 <_dtoa_r+0x5b0>
 800cb76:	2000      	movs	r0, #0
 800cb78:	4928      	ldr	r1, [pc, #160]	; (800cc1c <_dtoa_r+0x5ac>)
 800cb7a:	f7f3 fdd7 	bl	800072c <__aeabi_ddiv>
 800cb7e:	463b      	mov	r3, r7
 800cb80:	4632      	mov	r2, r6
 800cb82:	f7f3 faf1 	bl	8000168 <__aeabi_dsub>
 800cb86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cb8a:	9f03      	ldr	r7, [sp, #12]
 800cb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb90:	f7f3 ff52 	bl	8000a38 <__aeabi_d2iz>
 800cb94:	4604      	mov	r4, r0
 800cb96:	f7f3 fc35 	bl	8000404 <__aeabi_i2d>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cba2:	f7f3 fae1 	bl	8000168 <__aeabi_dsub>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	3430      	adds	r4, #48	; 0x30
 800cbac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbb4:	f807 4b01 	strb.w	r4, [r7], #1
 800cbb8:	f7f3 ff00 	bl	80009bc <__aeabi_dcmplt>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d173      	bne.n	800cca8 <_dtoa_r+0x638>
 800cbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	4911      	ldr	r1, [pc, #68]	; (800cc0c <_dtoa_r+0x59c>)
 800cbc8:	f7f3 face 	bl	8000168 <__aeabi_dsub>
 800cbcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbd0:	f7f3 fef4 	bl	80009bc <__aeabi_dcmplt>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	f040 80b6 	bne.w	800cd46 <_dtoa_r+0x6d6>
 800cbda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbdc:	429f      	cmp	r7, r3
 800cbde:	f43f af7a 	beq.w	800cad6 <_dtoa_r+0x466>
 800cbe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4b09      	ldr	r3, [pc, #36]	; (800cc10 <_dtoa_r+0x5a0>)
 800cbea:	f7f3 fc75 	bl	80004d8 <__aeabi_dmul>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cbf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <_dtoa_r+0x5a0>)
 800cbfa:	f7f3 fc6d 	bl	80004d8 <__aeabi_dmul>
 800cbfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc02:	e7c3      	b.n	800cb8c <_dtoa_r+0x51c>
 800cc04:	08010fd8 	.word	0x08010fd8
 800cc08:	08010fb0 	.word	0x08010fb0
 800cc0c:	3ff00000 	.word	0x3ff00000
 800cc10:	40240000 	.word	0x40240000
 800cc14:	401c0000 	.word	0x401c0000
 800cc18:	40140000 	.word	0x40140000
 800cc1c:	3fe00000 	.word	0x3fe00000
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 fc58 	bl	80004d8 <__aeabi_dmul>
 800cc28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc2e:	9c03      	ldr	r4, [sp, #12]
 800cc30:	9314      	str	r3, [sp, #80]	; 0x50
 800cc32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc36:	f7f3 feff 	bl	8000a38 <__aeabi_d2iz>
 800cc3a:	9015      	str	r0, [sp, #84]	; 0x54
 800cc3c:	f7f3 fbe2 	bl	8000404 <__aeabi_i2d>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc48:	f7f3 fa8e 	bl	8000168 <__aeabi_dsub>
 800cc4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc4e:	4606      	mov	r6, r0
 800cc50:	3330      	adds	r3, #48	; 0x30
 800cc52:	f804 3b01 	strb.w	r3, [r4], #1
 800cc56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc58:	460f      	mov	r7, r1
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	f04f 0200 	mov.w	r2, #0
 800cc60:	d124      	bne.n	800ccac <_dtoa_r+0x63c>
 800cc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc66:	4baf      	ldr	r3, [pc, #700]	; (800cf24 <_dtoa_r+0x8b4>)
 800cc68:	f7f3 fa80 	bl	800016c <__adddf3>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	f7f3 fec0 	bl	80009f8 <__aeabi_dcmpgt>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d163      	bne.n	800cd44 <_dtoa_r+0x6d4>
 800cc7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc80:	2000      	movs	r0, #0
 800cc82:	49a8      	ldr	r1, [pc, #672]	; (800cf24 <_dtoa_r+0x8b4>)
 800cc84:	f7f3 fa70 	bl	8000168 <__aeabi_dsub>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 fe94 	bl	80009bc <__aeabi_dcmplt>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f af1e 	beq.w	800cad6 <_dtoa_r+0x466>
 800cc9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cc9c:	1e7b      	subs	r3, r7, #1
 800cc9e:	9314      	str	r3, [sp, #80]	; 0x50
 800cca0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cca4:	2b30      	cmp	r3, #48	; 0x30
 800cca6:	d0f8      	beq.n	800cc9a <_dtoa_r+0x62a>
 800cca8:	46c3      	mov	fp, r8
 800ccaa:	e03b      	b.n	800cd24 <_dtoa_r+0x6b4>
 800ccac:	4b9e      	ldr	r3, [pc, #632]	; (800cf28 <_dtoa_r+0x8b8>)
 800ccae:	f7f3 fc13 	bl	80004d8 <__aeabi_dmul>
 800ccb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccb6:	e7bc      	b.n	800cc32 <_dtoa_r+0x5c2>
 800ccb8:	9f03      	ldr	r7, [sp, #12]
 800ccba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ccbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccc2:	4640      	mov	r0, r8
 800ccc4:	4649      	mov	r1, r9
 800ccc6:	f7f3 fd31 	bl	800072c <__aeabi_ddiv>
 800ccca:	f7f3 feb5 	bl	8000a38 <__aeabi_d2iz>
 800ccce:	4604      	mov	r4, r0
 800ccd0:	f7f3 fb98 	bl	8000404 <__aeabi_i2d>
 800ccd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccd8:	f7f3 fbfe 	bl	80004d8 <__aeabi_dmul>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4640      	mov	r0, r8
 800cce2:	4649      	mov	r1, r9
 800cce4:	f7f3 fa40 	bl	8000168 <__aeabi_dsub>
 800cce8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ccec:	f807 6b01 	strb.w	r6, [r7], #1
 800ccf0:	9e03      	ldr	r6, [sp, #12]
 800ccf2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ccf6:	1bbe      	subs	r6, r7, r6
 800ccf8:	45b4      	cmp	ip, r6
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	d136      	bne.n	800cd6e <_dtoa_r+0x6fe>
 800cd00:	f7f3 fa34 	bl	800016c <__adddf3>
 800cd04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd08:	4680      	mov	r8, r0
 800cd0a:	4689      	mov	r9, r1
 800cd0c:	f7f3 fe74 	bl	80009f8 <__aeabi_dcmpgt>
 800cd10:	bb58      	cbnz	r0, 800cd6a <_dtoa_r+0x6fa>
 800cd12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f7f3 fe45 	bl	80009a8 <__aeabi_dcmpeq>
 800cd1e:	b108      	cbz	r0, 800cd24 <_dtoa_r+0x6b4>
 800cd20:	07e3      	lsls	r3, r4, #31
 800cd22:	d422      	bmi.n	800cd6a <_dtoa_r+0x6fa>
 800cd24:	4651      	mov	r1, sl
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 fbc2 	bl	800d4b0 <_Bfree>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cd30:	703b      	strb	r3, [r7, #0]
 800cd32:	f10b 0301 	add.w	r3, fp, #1
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f43f ace6 	beq.w	800c70c <_dtoa_r+0x9c>
 800cd40:	601f      	str	r7, [r3, #0]
 800cd42:	e4e3      	b.n	800c70c <_dtoa_r+0x9c>
 800cd44:	4627      	mov	r7, r4
 800cd46:	463b      	mov	r3, r7
 800cd48:	461f      	mov	r7, r3
 800cd4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd4e:	2a39      	cmp	r2, #57	; 0x39
 800cd50:	d107      	bne.n	800cd62 <_dtoa_r+0x6f2>
 800cd52:	9a03      	ldr	r2, [sp, #12]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d1f7      	bne.n	800cd48 <_dtoa_r+0x6d8>
 800cd58:	2230      	movs	r2, #48	; 0x30
 800cd5a:	9903      	ldr	r1, [sp, #12]
 800cd5c:	f108 0801 	add.w	r8, r8, #1
 800cd60:	700a      	strb	r2, [r1, #0]
 800cd62:	781a      	ldrb	r2, [r3, #0]
 800cd64:	3201      	adds	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
 800cd68:	e79e      	b.n	800cca8 <_dtoa_r+0x638>
 800cd6a:	46d8      	mov	r8, fp
 800cd6c:	e7eb      	b.n	800cd46 <_dtoa_r+0x6d6>
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4b6d      	ldr	r3, [pc, #436]	; (800cf28 <_dtoa_r+0x8b8>)
 800cd72:	f7f3 fbb1 	bl	80004d8 <__aeabi_dmul>
 800cd76:	2200      	movs	r2, #0
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4680      	mov	r8, r0
 800cd7c:	4689      	mov	r9, r1
 800cd7e:	f7f3 fe13 	bl	80009a8 <__aeabi_dcmpeq>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d09b      	beq.n	800ccbe <_dtoa_r+0x64e>
 800cd86:	e7cd      	b.n	800cd24 <_dtoa_r+0x6b4>
 800cd88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd8a:	2a00      	cmp	r2, #0
 800cd8c:	f000 80c4 	beq.w	800cf18 <_dtoa_r+0x8a8>
 800cd90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cd92:	2a01      	cmp	r2, #1
 800cd94:	f300 80a8 	bgt.w	800cee8 <_dtoa_r+0x878>
 800cd98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	f000 80a0 	beq.w	800cee0 <_dtoa_r+0x870>
 800cda0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cda4:	464f      	mov	r7, r9
 800cda6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdaa:	2101      	movs	r1, #1
 800cdac:	441a      	add	r2, r3
 800cdae:	4628      	mov	r0, r5
 800cdb0:	4499      	add	r9, r3
 800cdb2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdb4:	f000 fc32 	bl	800d61c <__i2b>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b15f      	cbz	r7, 800cdd4 <_dtoa_r+0x764>
 800cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dd08      	ble.n	800cdd4 <_dtoa_r+0x764>
 800cdc2:	42bb      	cmp	r3, r7
 800cdc4:	bfa8      	it	ge
 800cdc6:	463b      	movge	r3, r7
 800cdc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdca:	eba9 0903 	sub.w	r9, r9, r3
 800cdce:	1aff      	subs	r7, r7, r3
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd6:	b1f3      	cbz	r3, 800ce16 <_dtoa_r+0x7a6>
 800cdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 80a0 	beq.w	800cf20 <_dtoa_r+0x8b0>
 800cde0:	2c00      	cmp	r4, #0
 800cde2:	dd10      	ble.n	800ce06 <_dtoa_r+0x796>
 800cde4:	4631      	mov	r1, r6
 800cde6:	4622      	mov	r2, r4
 800cde8:	4628      	mov	r0, r5
 800cdea:	f000 fcd5 	bl	800d798 <__pow5mult>
 800cdee:	4652      	mov	r2, sl
 800cdf0:	4601      	mov	r1, r0
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f000 fc27 	bl	800d648 <__multiply>
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	4651      	mov	r1, sl
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 fb56 	bl	800d4b0 <_Bfree>
 800ce04:	46c2      	mov	sl, r8
 800ce06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce08:	1b1a      	subs	r2, r3, r4
 800ce0a:	d004      	beq.n	800ce16 <_dtoa_r+0x7a6>
 800ce0c:	4651      	mov	r1, sl
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fcc2 	bl	800d798 <__pow5mult>
 800ce14:	4682      	mov	sl, r0
 800ce16:	2101      	movs	r1, #1
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f000 fbff 	bl	800d61c <__i2b>
 800ce1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce20:	4604      	mov	r4, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f340 8082 	ble.w	800cf2c <_dtoa_r+0x8bc>
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 fcb3 	bl	800d798 <__pow5mult>
 800ce32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce34:	4604      	mov	r4, r0
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	dd7b      	ble.n	800cf32 <_dtoa_r+0x8c2>
 800ce3a:	f04f 0800 	mov.w	r8, #0
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce44:	6918      	ldr	r0, [r3, #16]
 800ce46:	f000 fb9b 	bl	800d580 <__hi0bits>
 800ce4a:	f1c0 0020 	rsb	r0, r0, #32
 800ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce50:	4418      	add	r0, r3
 800ce52:	f010 001f 	ands.w	r0, r0, #31
 800ce56:	f000 8092 	beq.w	800cf7e <_dtoa_r+0x90e>
 800ce5a:	f1c0 0320 	rsb	r3, r0, #32
 800ce5e:	2b04      	cmp	r3, #4
 800ce60:	f340 8085 	ble.w	800cf6e <_dtoa_r+0x8fe>
 800ce64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce66:	f1c0 001c 	rsb	r0, r0, #28
 800ce6a:	4403      	add	r3, r0
 800ce6c:	4481      	add	r9, r0
 800ce6e:	4407      	add	r7, r0
 800ce70:	9309      	str	r3, [sp, #36]	; 0x24
 800ce72:	f1b9 0f00 	cmp.w	r9, #0
 800ce76:	dd05      	ble.n	800ce84 <_dtoa_r+0x814>
 800ce78:	4651      	mov	r1, sl
 800ce7a:	464a      	mov	r2, r9
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f000 fce5 	bl	800d84c <__lshift>
 800ce82:	4682      	mov	sl, r0
 800ce84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	dd05      	ble.n	800ce96 <_dtoa_r+0x826>
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f000 fcdc 	bl	800d84c <__lshift>
 800ce94:	4604      	mov	r4, r0
 800ce96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d072      	beq.n	800cf82 <_dtoa_r+0x912>
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4650      	mov	r0, sl
 800cea0:	f000 fd40 	bl	800d924 <__mcmp>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	da6c      	bge.n	800cf82 <_dtoa_r+0x912>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4651      	mov	r1, sl
 800ceac:	220a      	movs	r2, #10
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 fb20 	bl	800d4f4 <__multadd>
 800ceb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb6:	4682      	mov	sl, r0
 800ceb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 81ac 	beq.w	800d21a <_dtoa_r+0xbaa>
 800cec2:	2300      	movs	r3, #0
 800cec4:	4631      	mov	r1, r6
 800cec6:	220a      	movs	r2, #10
 800cec8:	4628      	mov	r0, r5
 800ceca:	f000 fb13 	bl	800d4f4 <__multadd>
 800cece:	9b06      	ldr	r3, [sp, #24]
 800ced0:	4606      	mov	r6, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f300 8093 	bgt.w	800cffe <_dtoa_r+0x98e>
 800ced8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	dc59      	bgt.n	800cf92 <_dtoa_r+0x922>
 800cede:	e08e      	b.n	800cffe <_dtoa_r+0x98e>
 800cee0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cee2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cee6:	e75d      	b.n	800cda4 <_dtoa_r+0x734>
 800cee8:	9b08      	ldr	r3, [sp, #32]
 800ceea:	1e5c      	subs	r4, r3, #1
 800ceec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	bfbf      	itttt	lt
 800cef2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cef4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800cef6:	1ae3      	sublt	r3, r4, r3
 800cef8:	18d2      	addlt	r2, r2, r3
 800cefa:	bfa8      	it	ge
 800cefc:	1b1c      	subge	r4, r3, r4
 800cefe:	9b08      	ldr	r3, [sp, #32]
 800cf00:	bfbe      	ittt	lt
 800cf02:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cf04:	920e      	strlt	r2, [sp, #56]	; 0x38
 800cf06:	2400      	movlt	r4, #0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	bfb5      	itete	lt
 800cf0c:	eba9 0703 	sublt.w	r7, r9, r3
 800cf10:	464f      	movge	r7, r9
 800cf12:	2300      	movlt	r3, #0
 800cf14:	9b08      	ldrge	r3, [sp, #32]
 800cf16:	e747      	b.n	800cda8 <_dtoa_r+0x738>
 800cf18:	464f      	mov	r7, r9
 800cf1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cf1e:	e74c      	b.n	800cdba <_dtoa_r+0x74a>
 800cf20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf22:	e773      	b.n	800ce0c <_dtoa_r+0x79c>
 800cf24:	3fe00000 	.word	0x3fe00000
 800cf28:	40240000 	.word	0x40240000
 800cf2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	dc18      	bgt.n	800cf64 <_dtoa_r+0x8f4>
 800cf32:	9b04      	ldr	r3, [sp, #16]
 800cf34:	b9b3      	cbnz	r3, 800cf64 <_dtoa_r+0x8f4>
 800cf36:	9b05      	ldr	r3, [sp, #20]
 800cf38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf3c:	b993      	cbnz	r3, 800cf64 <_dtoa_r+0x8f4>
 800cf3e:	9b05      	ldr	r3, [sp, #20]
 800cf40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf44:	0d1b      	lsrs	r3, r3, #20
 800cf46:	051b      	lsls	r3, r3, #20
 800cf48:	b17b      	cbz	r3, 800cf6a <_dtoa_r+0x8fa>
 800cf4a:	f04f 0801 	mov.w	r8, #1
 800cf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf50:	f109 0901 	add.w	r9, r9, #1
 800cf54:	3301      	adds	r3, #1
 800cf56:	9309      	str	r3, [sp, #36]	; 0x24
 800cf58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f47f af6f 	bne.w	800ce3e <_dtoa_r+0x7ce>
 800cf60:	2001      	movs	r0, #1
 800cf62:	e774      	b.n	800ce4e <_dtoa_r+0x7de>
 800cf64:	f04f 0800 	mov.w	r8, #0
 800cf68:	e7f6      	b.n	800cf58 <_dtoa_r+0x8e8>
 800cf6a:	4698      	mov	r8, r3
 800cf6c:	e7f4      	b.n	800cf58 <_dtoa_r+0x8e8>
 800cf6e:	d080      	beq.n	800ce72 <_dtoa_r+0x802>
 800cf70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf72:	331c      	adds	r3, #28
 800cf74:	441a      	add	r2, r3
 800cf76:	4499      	add	r9, r3
 800cf78:	441f      	add	r7, r3
 800cf7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7c:	e779      	b.n	800ce72 <_dtoa_r+0x802>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	e7f6      	b.n	800cf70 <_dtoa_r+0x900>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	dc34      	bgt.n	800cff2 <_dtoa_r+0x982>
 800cf88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	dd31      	ble.n	800cff2 <_dtoa_r+0x982>
 800cf8e:	9b08      	ldr	r3, [sp, #32]
 800cf90:	9306      	str	r3, [sp, #24]
 800cf92:	9b06      	ldr	r3, [sp, #24]
 800cf94:	b963      	cbnz	r3, 800cfb0 <_dtoa_r+0x940>
 800cf96:	4621      	mov	r1, r4
 800cf98:	2205      	movs	r2, #5
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f000 faaa 	bl	800d4f4 <__multadd>
 800cfa0:	4601      	mov	r1, r0
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	f000 fcbd 	bl	800d924 <__mcmp>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f73f adbf 	bgt.w	800cb2e <_dtoa_r+0x4be>
 800cfb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cfb2:	9f03      	ldr	r7, [sp, #12]
 800cfb4:	ea6f 0b03 	mvn.w	fp, r3
 800cfb8:	f04f 0800 	mov.w	r8, #0
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 fa76 	bl	800d4b0 <_Bfree>
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	f43f aead 	beq.w	800cd24 <_dtoa_r+0x6b4>
 800cfca:	f1b8 0f00 	cmp.w	r8, #0
 800cfce:	d005      	beq.n	800cfdc <_dtoa_r+0x96c>
 800cfd0:	45b0      	cmp	r8, r6
 800cfd2:	d003      	beq.n	800cfdc <_dtoa_r+0x96c>
 800cfd4:	4641      	mov	r1, r8
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f000 fa6a 	bl	800d4b0 <_Bfree>
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 fa66 	bl	800d4b0 <_Bfree>
 800cfe4:	e69e      	b.n	800cd24 <_dtoa_r+0x6b4>
 800cfe6:	2400      	movs	r4, #0
 800cfe8:	4626      	mov	r6, r4
 800cfea:	e7e1      	b.n	800cfb0 <_dtoa_r+0x940>
 800cfec:	46c3      	mov	fp, r8
 800cfee:	4626      	mov	r6, r4
 800cff0:	e59d      	b.n	800cb2e <_dtoa_r+0x4be>
 800cff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 80c8 	beq.w	800d18a <_dtoa_r+0xb1a>
 800cffa:	9b08      	ldr	r3, [sp, #32]
 800cffc:	9306      	str	r3, [sp, #24]
 800cffe:	2f00      	cmp	r7, #0
 800d000:	dd05      	ble.n	800d00e <_dtoa_r+0x99e>
 800d002:	4631      	mov	r1, r6
 800d004:	463a      	mov	r2, r7
 800d006:	4628      	mov	r0, r5
 800d008:	f000 fc20 	bl	800d84c <__lshift>
 800d00c:	4606      	mov	r6, r0
 800d00e:	f1b8 0f00 	cmp.w	r8, #0
 800d012:	d05b      	beq.n	800d0cc <_dtoa_r+0xa5c>
 800d014:	4628      	mov	r0, r5
 800d016:	6871      	ldr	r1, [r6, #4]
 800d018:	f000 fa0a 	bl	800d430 <_Balloc>
 800d01c:	4607      	mov	r7, r0
 800d01e:	b928      	cbnz	r0, 800d02c <_dtoa_r+0x9bc>
 800d020:	4602      	mov	r2, r0
 800d022:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d026:	4b81      	ldr	r3, [pc, #516]	; (800d22c <_dtoa_r+0xbbc>)
 800d028:	f7ff bb36 	b.w	800c698 <_dtoa_r+0x28>
 800d02c:	6932      	ldr	r2, [r6, #16]
 800d02e:	f106 010c 	add.w	r1, r6, #12
 800d032:	3202      	adds	r2, #2
 800d034:	0092      	lsls	r2, r2, #2
 800d036:	300c      	adds	r0, #12
 800d038:	f7ff fa81 	bl	800c53e <memcpy>
 800d03c:	2201      	movs	r2, #1
 800d03e:	4639      	mov	r1, r7
 800d040:	4628      	mov	r0, r5
 800d042:	f000 fc03 	bl	800d84c <__lshift>
 800d046:	46b0      	mov	r8, r6
 800d048:	4606      	mov	r6, r0
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	9a03      	ldr	r2, [sp, #12]
 800d04e:	3301      	adds	r3, #1
 800d050:	9308      	str	r3, [sp, #32]
 800d052:	9b06      	ldr	r3, [sp, #24]
 800d054:	4413      	add	r3, r2
 800d056:	930b      	str	r3, [sp, #44]	; 0x2c
 800d058:	9b04      	ldr	r3, [sp, #16]
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	930a      	str	r3, [sp, #40]	; 0x28
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	4621      	mov	r1, r4
 800d064:	3b01      	subs	r3, #1
 800d066:	4650      	mov	r0, sl
 800d068:	9304      	str	r3, [sp, #16]
 800d06a:	f7ff fa76 	bl	800c55a <quorem>
 800d06e:	4641      	mov	r1, r8
 800d070:	9006      	str	r0, [sp, #24]
 800d072:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d076:	4650      	mov	r0, sl
 800d078:	f000 fc54 	bl	800d924 <__mcmp>
 800d07c:	4632      	mov	r2, r6
 800d07e:	9009      	str	r0, [sp, #36]	; 0x24
 800d080:	4621      	mov	r1, r4
 800d082:	4628      	mov	r0, r5
 800d084:	f000 fc6a 	bl	800d95c <__mdiff>
 800d088:	68c2      	ldr	r2, [r0, #12]
 800d08a:	4607      	mov	r7, r0
 800d08c:	bb02      	cbnz	r2, 800d0d0 <_dtoa_r+0xa60>
 800d08e:	4601      	mov	r1, r0
 800d090:	4650      	mov	r0, sl
 800d092:	f000 fc47 	bl	800d924 <__mcmp>
 800d096:	4602      	mov	r2, r0
 800d098:	4639      	mov	r1, r7
 800d09a:	4628      	mov	r0, r5
 800d09c:	920c      	str	r2, [sp, #48]	; 0x30
 800d09e:	f000 fa07 	bl	800d4b0 <_Bfree>
 800d0a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0a6:	9f08      	ldr	r7, [sp, #32]
 800d0a8:	ea43 0102 	orr.w	r1, r3, r2
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ae:	4319      	orrs	r1, r3
 800d0b0:	d110      	bne.n	800d0d4 <_dtoa_r+0xa64>
 800d0b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0b6:	d029      	beq.n	800d10c <_dtoa_r+0xa9c>
 800d0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd02      	ble.n	800d0c4 <_dtoa_r+0xa54>
 800d0be:	9b06      	ldr	r3, [sp, #24]
 800d0c0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	f883 9000 	strb.w	r9, [r3]
 800d0ca:	e777      	b.n	800cfbc <_dtoa_r+0x94c>
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	e7ba      	b.n	800d046 <_dtoa_r+0x9d6>
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	e7e1      	b.n	800d098 <_dtoa_r+0xa28>
 800d0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	db04      	blt.n	800d0e4 <_dtoa_r+0xa74>
 800d0da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d0dc:	430b      	orrs	r3, r1
 800d0de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	d120      	bne.n	800d126 <_dtoa_r+0xab6>
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	dded      	ble.n	800d0c4 <_dtoa_r+0xa54>
 800d0e8:	4651      	mov	r1, sl
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f000 fbad 	bl	800d84c <__lshift>
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	f000 fc15 	bl	800d924 <__mcmp>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	dc03      	bgt.n	800d106 <_dtoa_r+0xa96>
 800d0fe:	d1e1      	bne.n	800d0c4 <_dtoa_r+0xa54>
 800d100:	f019 0f01 	tst.w	r9, #1
 800d104:	d0de      	beq.n	800d0c4 <_dtoa_r+0xa54>
 800d106:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d10a:	d1d8      	bne.n	800d0be <_dtoa_r+0xa4e>
 800d10c:	2339      	movs	r3, #57	; 0x39
 800d10e:	9a04      	ldr	r2, [sp, #16]
 800d110:	7013      	strb	r3, [r2, #0]
 800d112:	463b      	mov	r3, r7
 800d114:	461f      	mov	r7, r3
 800d116:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	2a39      	cmp	r2, #57	; 0x39
 800d11e:	d06b      	beq.n	800d1f8 <_dtoa_r+0xb88>
 800d120:	3201      	adds	r2, #1
 800d122:	701a      	strb	r2, [r3, #0]
 800d124:	e74a      	b.n	800cfbc <_dtoa_r+0x94c>
 800d126:	2a00      	cmp	r2, #0
 800d128:	dd07      	ble.n	800d13a <_dtoa_r+0xaca>
 800d12a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d12e:	d0ed      	beq.n	800d10c <_dtoa_r+0xa9c>
 800d130:	9a04      	ldr	r2, [sp, #16]
 800d132:	f109 0301 	add.w	r3, r9, #1
 800d136:	7013      	strb	r3, [r2, #0]
 800d138:	e740      	b.n	800cfbc <_dtoa_r+0x94c>
 800d13a:	9b08      	ldr	r3, [sp, #32]
 800d13c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d13e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d142:	4293      	cmp	r3, r2
 800d144:	d042      	beq.n	800d1cc <_dtoa_r+0xb5c>
 800d146:	4651      	mov	r1, sl
 800d148:	2300      	movs	r3, #0
 800d14a:	220a      	movs	r2, #10
 800d14c:	4628      	mov	r0, r5
 800d14e:	f000 f9d1 	bl	800d4f4 <__multadd>
 800d152:	45b0      	cmp	r8, r6
 800d154:	4682      	mov	sl, r0
 800d156:	f04f 0300 	mov.w	r3, #0
 800d15a:	f04f 020a 	mov.w	r2, #10
 800d15e:	4641      	mov	r1, r8
 800d160:	4628      	mov	r0, r5
 800d162:	d107      	bne.n	800d174 <_dtoa_r+0xb04>
 800d164:	f000 f9c6 	bl	800d4f4 <__multadd>
 800d168:	4680      	mov	r8, r0
 800d16a:	4606      	mov	r6, r0
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	3301      	adds	r3, #1
 800d170:	9308      	str	r3, [sp, #32]
 800d172:	e775      	b.n	800d060 <_dtoa_r+0x9f0>
 800d174:	f000 f9be 	bl	800d4f4 <__multadd>
 800d178:	4631      	mov	r1, r6
 800d17a:	4680      	mov	r8, r0
 800d17c:	2300      	movs	r3, #0
 800d17e:	220a      	movs	r2, #10
 800d180:	4628      	mov	r0, r5
 800d182:	f000 f9b7 	bl	800d4f4 <__multadd>
 800d186:	4606      	mov	r6, r0
 800d188:	e7f0      	b.n	800d16c <_dtoa_r+0xafc>
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	9306      	str	r3, [sp, #24]
 800d18e:	9f03      	ldr	r7, [sp, #12]
 800d190:	4621      	mov	r1, r4
 800d192:	4650      	mov	r0, sl
 800d194:	f7ff f9e1 	bl	800c55a <quorem>
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d19e:	f807 9b01 	strb.w	r9, [r7], #1
 800d1a2:	1afa      	subs	r2, r7, r3
 800d1a4:	9b06      	ldr	r3, [sp, #24]
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	dd07      	ble.n	800d1ba <_dtoa_r+0xb4a>
 800d1aa:	4651      	mov	r1, sl
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	220a      	movs	r2, #10
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	f000 f99f 	bl	800d4f4 <__multadd>
 800d1b6:	4682      	mov	sl, r0
 800d1b8:	e7ea      	b.n	800d190 <_dtoa_r+0xb20>
 800d1ba:	9b06      	ldr	r3, [sp, #24]
 800d1bc:	f04f 0800 	mov.w	r8, #0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bfcc      	ite	gt
 800d1c4:	461f      	movgt	r7, r3
 800d1c6:	2701      	movle	r7, #1
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	441f      	add	r7, r3
 800d1cc:	4651      	mov	r1, sl
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f000 fb3b 	bl	800d84c <__lshift>
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	4682      	mov	sl, r0
 800d1da:	f000 fba3 	bl	800d924 <__mcmp>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	dc97      	bgt.n	800d112 <_dtoa_r+0xaa2>
 800d1e2:	d102      	bne.n	800d1ea <_dtoa_r+0xb7a>
 800d1e4:	f019 0f01 	tst.w	r9, #1
 800d1e8:	d193      	bne.n	800d112 <_dtoa_r+0xaa2>
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	461f      	mov	r7, r3
 800d1ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f2:	2a30      	cmp	r2, #48	; 0x30
 800d1f4:	d0fa      	beq.n	800d1ec <_dtoa_r+0xb7c>
 800d1f6:	e6e1      	b.n	800cfbc <_dtoa_r+0x94c>
 800d1f8:	9a03      	ldr	r2, [sp, #12]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d18a      	bne.n	800d114 <_dtoa_r+0xaa4>
 800d1fe:	2331      	movs	r3, #49	; 0x31
 800d200:	f10b 0b01 	add.w	fp, fp, #1
 800d204:	e797      	b.n	800d136 <_dtoa_r+0xac6>
 800d206:	4b0a      	ldr	r3, [pc, #40]	; (800d230 <_dtoa_r+0xbc0>)
 800d208:	f7ff ba9f 	b.w	800c74a <_dtoa_r+0xda>
 800d20c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f47f aa77 	bne.w	800c702 <_dtoa_r+0x92>
 800d214:	4b07      	ldr	r3, [pc, #28]	; (800d234 <_dtoa_r+0xbc4>)
 800d216:	f7ff ba98 	b.w	800c74a <_dtoa_r+0xda>
 800d21a:	9b06      	ldr	r3, [sp, #24]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dcb6      	bgt.n	800d18e <_dtoa_r+0xb1e>
 800d220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d222:	2b02      	cmp	r3, #2
 800d224:	f73f aeb5 	bgt.w	800cf92 <_dtoa_r+0x922>
 800d228:	e7b1      	b.n	800d18e <_dtoa_r+0xb1e>
 800d22a:	bf00      	nop
 800d22c:	08010f42 	.word	0x08010f42
 800d230:	08010ea2 	.word	0x08010ea2
 800d234:	08010ec6 	.word	0x08010ec6

0800d238 <_free_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	4605      	mov	r5, r0
 800d23c:	2900      	cmp	r1, #0
 800d23e:	d040      	beq.n	800d2c2 <_free_r+0x8a>
 800d240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d244:	1f0c      	subs	r4, r1, #4
 800d246:	2b00      	cmp	r3, #0
 800d248:	bfb8      	it	lt
 800d24a:	18e4      	addlt	r4, r4, r3
 800d24c:	f000 f8e4 	bl	800d418 <__malloc_lock>
 800d250:	4a1c      	ldr	r2, [pc, #112]	; (800d2c4 <_free_r+0x8c>)
 800d252:	6813      	ldr	r3, [r2, #0]
 800d254:	b933      	cbnz	r3, 800d264 <_free_r+0x2c>
 800d256:	6063      	str	r3, [r4, #4]
 800d258:	6014      	str	r4, [r2, #0]
 800d25a:	4628      	mov	r0, r5
 800d25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d260:	f000 b8e0 	b.w	800d424 <__malloc_unlock>
 800d264:	42a3      	cmp	r3, r4
 800d266:	d908      	bls.n	800d27a <_free_r+0x42>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	1821      	adds	r1, r4, r0
 800d26c:	428b      	cmp	r3, r1
 800d26e:	bf01      	itttt	eq
 800d270:	6819      	ldreq	r1, [r3, #0]
 800d272:	685b      	ldreq	r3, [r3, #4]
 800d274:	1809      	addeq	r1, r1, r0
 800d276:	6021      	streq	r1, [r4, #0]
 800d278:	e7ed      	b.n	800d256 <_free_r+0x1e>
 800d27a:	461a      	mov	r2, r3
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	b10b      	cbz	r3, 800d284 <_free_r+0x4c>
 800d280:	42a3      	cmp	r3, r4
 800d282:	d9fa      	bls.n	800d27a <_free_r+0x42>
 800d284:	6811      	ldr	r1, [r2, #0]
 800d286:	1850      	adds	r0, r2, r1
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d10b      	bne.n	800d2a4 <_free_r+0x6c>
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	4401      	add	r1, r0
 800d290:	1850      	adds	r0, r2, r1
 800d292:	4283      	cmp	r3, r0
 800d294:	6011      	str	r1, [r2, #0]
 800d296:	d1e0      	bne.n	800d25a <_free_r+0x22>
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	4408      	add	r0, r1
 800d29e:	6010      	str	r0, [r2, #0]
 800d2a0:	6053      	str	r3, [r2, #4]
 800d2a2:	e7da      	b.n	800d25a <_free_r+0x22>
 800d2a4:	d902      	bls.n	800d2ac <_free_r+0x74>
 800d2a6:	230c      	movs	r3, #12
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	e7d6      	b.n	800d25a <_free_r+0x22>
 800d2ac:	6820      	ldr	r0, [r4, #0]
 800d2ae:	1821      	adds	r1, r4, r0
 800d2b0:	428b      	cmp	r3, r1
 800d2b2:	bf01      	itttt	eq
 800d2b4:	6819      	ldreq	r1, [r3, #0]
 800d2b6:	685b      	ldreq	r3, [r3, #4]
 800d2b8:	1809      	addeq	r1, r1, r0
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	6054      	str	r4, [r2, #4]
 800d2c0:	e7cb      	b.n	800d25a <_free_r+0x22>
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20001c6c 	.word	0x20001c6c

0800d2c8 <malloc>:
 800d2c8:	4b02      	ldr	r3, [pc, #8]	; (800d2d4 <malloc+0xc>)
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	f000 b823 	b.w	800d318 <_malloc_r>
 800d2d2:	bf00      	nop
 800d2d4:	20000110 	.word	0x20000110

0800d2d8 <sbrk_aligned>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	4e0e      	ldr	r6, [pc, #56]	; (800d314 <sbrk_aligned+0x3c>)
 800d2dc:	460c      	mov	r4, r1
 800d2de:	6831      	ldr	r1, [r6, #0]
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	b911      	cbnz	r1, 800d2ea <sbrk_aligned+0x12>
 800d2e4:	f000 fe38 	bl	800df58 <_sbrk_r>
 800d2e8:	6030      	str	r0, [r6, #0]
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 fe33 	bl	800df58 <_sbrk_r>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d00a      	beq.n	800d30c <sbrk_aligned+0x34>
 800d2f6:	1cc4      	adds	r4, r0, #3
 800d2f8:	f024 0403 	bic.w	r4, r4, #3
 800d2fc:	42a0      	cmp	r0, r4
 800d2fe:	d007      	beq.n	800d310 <sbrk_aligned+0x38>
 800d300:	1a21      	subs	r1, r4, r0
 800d302:	4628      	mov	r0, r5
 800d304:	f000 fe28 	bl	800df58 <_sbrk_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	d101      	bne.n	800d310 <sbrk_aligned+0x38>
 800d30c:	f04f 34ff 	mov.w	r4, #4294967295
 800d310:	4620      	mov	r0, r4
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	20001c70 	.word	0x20001c70

0800d318 <_malloc_r>:
 800d318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d31c:	1ccd      	adds	r5, r1, #3
 800d31e:	f025 0503 	bic.w	r5, r5, #3
 800d322:	3508      	adds	r5, #8
 800d324:	2d0c      	cmp	r5, #12
 800d326:	bf38      	it	cc
 800d328:	250c      	movcc	r5, #12
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	4607      	mov	r7, r0
 800d32e:	db01      	blt.n	800d334 <_malloc_r+0x1c>
 800d330:	42a9      	cmp	r1, r5
 800d332:	d905      	bls.n	800d340 <_malloc_r+0x28>
 800d334:	230c      	movs	r3, #12
 800d336:	2600      	movs	r6, #0
 800d338:	603b      	str	r3, [r7, #0]
 800d33a:	4630      	mov	r0, r6
 800d33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d414 <_malloc_r+0xfc>
 800d344:	f000 f868 	bl	800d418 <__malloc_lock>
 800d348:	f8d8 3000 	ldr.w	r3, [r8]
 800d34c:	461c      	mov	r4, r3
 800d34e:	bb5c      	cbnz	r4, 800d3a8 <_malloc_r+0x90>
 800d350:	4629      	mov	r1, r5
 800d352:	4638      	mov	r0, r7
 800d354:	f7ff ffc0 	bl	800d2d8 <sbrk_aligned>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	4604      	mov	r4, r0
 800d35c:	d155      	bne.n	800d40a <_malloc_r+0xf2>
 800d35e:	f8d8 4000 	ldr.w	r4, [r8]
 800d362:	4626      	mov	r6, r4
 800d364:	2e00      	cmp	r6, #0
 800d366:	d145      	bne.n	800d3f4 <_malloc_r+0xdc>
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d048      	beq.n	800d3fe <_malloc_r+0xe6>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	4631      	mov	r1, r6
 800d370:	4638      	mov	r0, r7
 800d372:	eb04 0903 	add.w	r9, r4, r3
 800d376:	f000 fdef 	bl	800df58 <_sbrk_r>
 800d37a:	4581      	cmp	r9, r0
 800d37c:	d13f      	bne.n	800d3fe <_malloc_r+0xe6>
 800d37e:	6821      	ldr	r1, [r4, #0]
 800d380:	4638      	mov	r0, r7
 800d382:	1a6d      	subs	r5, r5, r1
 800d384:	4629      	mov	r1, r5
 800d386:	f7ff ffa7 	bl	800d2d8 <sbrk_aligned>
 800d38a:	3001      	adds	r0, #1
 800d38c:	d037      	beq.n	800d3fe <_malloc_r+0xe6>
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	442b      	add	r3, r5
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	f8d8 3000 	ldr.w	r3, [r8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d038      	beq.n	800d40e <_malloc_r+0xf6>
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	42a2      	cmp	r2, r4
 800d3a0:	d12b      	bne.n	800d3fa <_malloc_r+0xe2>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	605a      	str	r2, [r3, #4]
 800d3a6:	e00f      	b.n	800d3c8 <_malloc_r+0xb0>
 800d3a8:	6822      	ldr	r2, [r4, #0]
 800d3aa:	1b52      	subs	r2, r2, r5
 800d3ac:	d41f      	bmi.n	800d3ee <_malloc_r+0xd6>
 800d3ae:	2a0b      	cmp	r2, #11
 800d3b0:	d917      	bls.n	800d3e2 <_malloc_r+0xca>
 800d3b2:	1961      	adds	r1, r4, r5
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	6025      	str	r5, [r4, #0]
 800d3b8:	bf18      	it	ne
 800d3ba:	6059      	strne	r1, [r3, #4]
 800d3bc:	6863      	ldr	r3, [r4, #4]
 800d3be:	bf08      	it	eq
 800d3c0:	f8c8 1000 	streq.w	r1, [r8]
 800d3c4:	5162      	str	r2, [r4, r5]
 800d3c6:	604b      	str	r3, [r1, #4]
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f104 060b 	add.w	r6, r4, #11
 800d3ce:	f000 f829 	bl	800d424 <__malloc_unlock>
 800d3d2:	f026 0607 	bic.w	r6, r6, #7
 800d3d6:	1d23      	adds	r3, r4, #4
 800d3d8:	1af2      	subs	r2, r6, r3
 800d3da:	d0ae      	beq.n	800d33a <_malloc_r+0x22>
 800d3dc:	1b9b      	subs	r3, r3, r6
 800d3de:	50a3      	str	r3, [r4, r2]
 800d3e0:	e7ab      	b.n	800d33a <_malloc_r+0x22>
 800d3e2:	42a3      	cmp	r3, r4
 800d3e4:	6862      	ldr	r2, [r4, #4]
 800d3e6:	d1dd      	bne.n	800d3a4 <_malloc_r+0x8c>
 800d3e8:	f8c8 2000 	str.w	r2, [r8]
 800d3ec:	e7ec      	b.n	800d3c8 <_malloc_r+0xb0>
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	6864      	ldr	r4, [r4, #4]
 800d3f2:	e7ac      	b.n	800d34e <_malloc_r+0x36>
 800d3f4:	4634      	mov	r4, r6
 800d3f6:	6876      	ldr	r6, [r6, #4]
 800d3f8:	e7b4      	b.n	800d364 <_malloc_r+0x4c>
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	e7cc      	b.n	800d398 <_malloc_r+0x80>
 800d3fe:	230c      	movs	r3, #12
 800d400:	4638      	mov	r0, r7
 800d402:	603b      	str	r3, [r7, #0]
 800d404:	f000 f80e 	bl	800d424 <__malloc_unlock>
 800d408:	e797      	b.n	800d33a <_malloc_r+0x22>
 800d40a:	6025      	str	r5, [r4, #0]
 800d40c:	e7dc      	b.n	800d3c8 <_malloc_r+0xb0>
 800d40e:	605b      	str	r3, [r3, #4]
 800d410:	deff      	udf	#255	; 0xff
 800d412:	bf00      	nop
 800d414:	20001c6c 	.word	0x20001c6c

0800d418 <__malloc_lock>:
 800d418:	4801      	ldr	r0, [pc, #4]	; (800d420 <__malloc_lock+0x8>)
 800d41a:	f7ff b880 	b.w	800c51e <__retarget_lock_acquire_recursive>
 800d41e:	bf00      	nop
 800d420:	20001c68 	.word	0x20001c68

0800d424 <__malloc_unlock>:
 800d424:	4801      	ldr	r0, [pc, #4]	; (800d42c <__malloc_unlock+0x8>)
 800d426:	f7ff b87b 	b.w	800c520 <__retarget_lock_release_recursive>
 800d42a:	bf00      	nop
 800d42c:	20001c68 	.word	0x20001c68

0800d430 <_Balloc>:
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	69c6      	ldr	r6, [r0, #28]
 800d434:	4604      	mov	r4, r0
 800d436:	460d      	mov	r5, r1
 800d438:	b976      	cbnz	r6, 800d458 <_Balloc+0x28>
 800d43a:	2010      	movs	r0, #16
 800d43c:	f7ff ff44 	bl	800d2c8 <malloc>
 800d440:	4602      	mov	r2, r0
 800d442:	61e0      	str	r0, [r4, #28]
 800d444:	b920      	cbnz	r0, 800d450 <_Balloc+0x20>
 800d446:	216b      	movs	r1, #107	; 0x6b
 800d448:	4b17      	ldr	r3, [pc, #92]	; (800d4a8 <_Balloc+0x78>)
 800d44a:	4818      	ldr	r0, [pc, #96]	; (800d4ac <_Balloc+0x7c>)
 800d44c:	f000 fd94 	bl	800df78 <__assert_func>
 800d450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d454:	6006      	str	r6, [r0, #0]
 800d456:	60c6      	str	r6, [r0, #12]
 800d458:	69e6      	ldr	r6, [r4, #28]
 800d45a:	68f3      	ldr	r3, [r6, #12]
 800d45c:	b183      	cbz	r3, 800d480 <_Balloc+0x50>
 800d45e:	69e3      	ldr	r3, [r4, #28]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d466:	b9b8      	cbnz	r0, 800d498 <_Balloc+0x68>
 800d468:	2101      	movs	r1, #1
 800d46a:	fa01 f605 	lsl.w	r6, r1, r5
 800d46e:	1d72      	adds	r2, r6, #5
 800d470:	4620      	mov	r0, r4
 800d472:	0092      	lsls	r2, r2, #2
 800d474:	f000 fd9e 	bl	800dfb4 <_calloc_r>
 800d478:	b160      	cbz	r0, 800d494 <_Balloc+0x64>
 800d47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d47e:	e00e      	b.n	800d49e <_Balloc+0x6e>
 800d480:	2221      	movs	r2, #33	; 0x21
 800d482:	2104      	movs	r1, #4
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fd95 	bl	800dfb4 <_calloc_r>
 800d48a:	69e3      	ldr	r3, [r4, #28]
 800d48c:	60f0      	str	r0, [r6, #12]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e4      	bne.n	800d45e <_Balloc+0x2e>
 800d494:	2000      	movs	r0, #0
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	6802      	ldr	r2, [r0, #0]
 800d49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4a4:	e7f7      	b.n	800d496 <_Balloc+0x66>
 800d4a6:	bf00      	nop
 800d4a8:	08010ed3 	.word	0x08010ed3
 800d4ac:	08010f53 	.word	0x08010f53

0800d4b0 <_Bfree>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	69c6      	ldr	r6, [r0, #28]
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b976      	cbnz	r6, 800d4d8 <_Bfree+0x28>
 800d4ba:	2010      	movs	r0, #16
 800d4bc:	f7ff ff04 	bl	800d2c8 <malloc>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	61e8      	str	r0, [r5, #28]
 800d4c4:	b920      	cbnz	r0, 800d4d0 <_Bfree+0x20>
 800d4c6:	218f      	movs	r1, #143	; 0x8f
 800d4c8:	4b08      	ldr	r3, [pc, #32]	; (800d4ec <_Bfree+0x3c>)
 800d4ca:	4809      	ldr	r0, [pc, #36]	; (800d4f0 <_Bfree+0x40>)
 800d4cc:	f000 fd54 	bl	800df78 <__assert_func>
 800d4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4d4:	6006      	str	r6, [r0, #0]
 800d4d6:	60c6      	str	r6, [r0, #12]
 800d4d8:	b13c      	cbz	r4, 800d4ea <_Bfree+0x3a>
 800d4da:	69eb      	ldr	r3, [r5, #28]
 800d4dc:	6862      	ldr	r2, [r4, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4e4:	6021      	str	r1, [r4, #0]
 800d4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	08010ed3 	.word	0x08010ed3
 800d4f0:	08010f53 	.word	0x08010f53

0800d4f4 <__multadd>:
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	461e      	mov	r6, r3
 800d4fe:	2000      	movs	r0, #0
 800d500:	690d      	ldr	r5, [r1, #16]
 800d502:	f101 0c14 	add.w	ip, r1, #20
 800d506:	f8dc 3000 	ldr.w	r3, [ip]
 800d50a:	3001      	adds	r0, #1
 800d50c:	b299      	uxth	r1, r3
 800d50e:	fb02 6101 	mla	r1, r2, r1, r6
 800d512:	0c1e      	lsrs	r6, r3, #16
 800d514:	0c0b      	lsrs	r3, r1, #16
 800d516:	fb02 3306 	mla	r3, r2, r6, r3
 800d51a:	b289      	uxth	r1, r1
 800d51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d520:	4285      	cmp	r5, r0
 800d522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d526:	f84c 1b04 	str.w	r1, [ip], #4
 800d52a:	dcec      	bgt.n	800d506 <__multadd+0x12>
 800d52c:	b30e      	cbz	r6, 800d572 <__multadd+0x7e>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	42ab      	cmp	r3, r5
 800d532:	dc19      	bgt.n	800d568 <__multadd+0x74>
 800d534:	6861      	ldr	r1, [r4, #4]
 800d536:	4638      	mov	r0, r7
 800d538:	3101      	adds	r1, #1
 800d53a:	f7ff ff79 	bl	800d430 <_Balloc>
 800d53e:	4680      	mov	r8, r0
 800d540:	b928      	cbnz	r0, 800d54e <__multadd+0x5a>
 800d542:	4602      	mov	r2, r0
 800d544:	21ba      	movs	r1, #186	; 0xba
 800d546:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <__multadd+0x84>)
 800d548:	480c      	ldr	r0, [pc, #48]	; (800d57c <__multadd+0x88>)
 800d54a:	f000 fd15 	bl	800df78 <__assert_func>
 800d54e:	6922      	ldr	r2, [r4, #16]
 800d550:	f104 010c 	add.w	r1, r4, #12
 800d554:	3202      	adds	r2, #2
 800d556:	0092      	lsls	r2, r2, #2
 800d558:	300c      	adds	r0, #12
 800d55a:	f7fe fff0 	bl	800c53e <memcpy>
 800d55e:	4621      	mov	r1, r4
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff ffa5 	bl	800d4b0 <_Bfree>
 800d566:	4644      	mov	r4, r8
 800d568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d56c:	3501      	adds	r5, #1
 800d56e:	615e      	str	r6, [r3, #20]
 800d570:	6125      	str	r5, [r4, #16]
 800d572:	4620      	mov	r0, r4
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	08010f42 	.word	0x08010f42
 800d57c:	08010f53 	.word	0x08010f53

0800d580 <__hi0bits>:
 800d580:	0c02      	lsrs	r2, r0, #16
 800d582:	0412      	lsls	r2, r2, #16
 800d584:	4603      	mov	r3, r0
 800d586:	b9ca      	cbnz	r2, 800d5bc <__hi0bits+0x3c>
 800d588:	0403      	lsls	r3, r0, #16
 800d58a:	2010      	movs	r0, #16
 800d58c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d590:	bf04      	itt	eq
 800d592:	021b      	lsleq	r3, r3, #8
 800d594:	3008      	addeq	r0, #8
 800d596:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d59a:	bf04      	itt	eq
 800d59c:	011b      	lsleq	r3, r3, #4
 800d59e:	3004      	addeq	r0, #4
 800d5a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d5a4:	bf04      	itt	eq
 800d5a6:	009b      	lsleq	r3, r3, #2
 800d5a8:	3002      	addeq	r0, #2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	db05      	blt.n	800d5ba <__hi0bits+0x3a>
 800d5ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d5b2:	f100 0001 	add.w	r0, r0, #1
 800d5b6:	bf08      	it	eq
 800d5b8:	2020      	moveq	r0, #32
 800d5ba:	4770      	bx	lr
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e7e5      	b.n	800d58c <__hi0bits+0xc>

0800d5c0 <__lo0bits>:
 800d5c0:	6803      	ldr	r3, [r0, #0]
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	f013 0007 	ands.w	r0, r3, #7
 800d5c8:	d00b      	beq.n	800d5e2 <__lo0bits+0x22>
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	d421      	bmi.n	800d612 <__lo0bits+0x52>
 800d5ce:	0798      	lsls	r0, r3, #30
 800d5d0:	bf49      	itett	mi
 800d5d2:	085b      	lsrmi	r3, r3, #1
 800d5d4:	089b      	lsrpl	r3, r3, #2
 800d5d6:	2001      	movmi	r0, #1
 800d5d8:	6013      	strmi	r3, [r2, #0]
 800d5da:	bf5c      	itt	pl
 800d5dc:	2002      	movpl	r0, #2
 800d5de:	6013      	strpl	r3, [r2, #0]
 800d5e0:	4770      	bx	lr
 800d5e2:	b299      	uxth	r1, r3
 800d5e4:	b909      	cbnz	r1, 800d5ea <__lo0bits+0x2a>
 800d5e6:	2010      	movs	r0, #16
 800d5e8:	0c1b      	lsrs	r3, r3, #16
 800d5ea:	b2d9      	uxtb	r1, r3
 800d5ec:	b909      	cbnz	r1, 800d5f2 <__lo0bits+0x32>
 800d5ee:	3008      	adds	r0, #8
 800d5f0:	0a1b      	lsrs	r3, r3, #8
 800d5f2:	0719      	lsls	r1, r3, #28
 800d5f4:	bf04      	itt	eq
 800d5f6:	091b      	lsreq	r3, r3, #4
 800d5f8:	3004      	addeq	r0, #4
 800d5fa:	0799      	lsls	r1, r3, #30
 800d5fc:	bf04      	itt	eq
 800d5fe:	089b      	lsreq	r3, r3, #2
 800d600:	3002      	addeq	r0, #2
 800d602:	07d9      	lsls	r1, r3, #31
 800d604:	d403      	bmi.n	800d60e <__lo0bits+0x4e>
 800d606:	085b      	lsrs	r3, r3, #1
 800d608:	f100 0001 	add.w	r0, r0, #1
 800d60c:	d003      	beq.n	800d616 <__lo0bits+0x56>
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	4770      	bx	lr
 800d612:	2000      	movs	r0, #0
 800d614:	4770      	bx	lr
 800d616:	2020      	movs	r0, #32
 800d618:	4770      	bx	lr
	...

0800d61c <__i2b>:
 800d61c:	b510      	push	{r4, lr}
 800d61e:	460c      	mov	r4, r1
 800d620:	2101      	movs	r1, #1
 800d622:	f7ff ff05 	bl	800d430 <_Balloc>
 800d626:	4602      	mov	r2, r0
 800d628:	b928      	cbnz	r0, 800d636 <__i2b+0x1a>
 800d62a:	f240 1145 	movw	r1, #325	; 0x145
 800d62e:	4b04      	ldr	r3, [pc, #16]	; (800d640 <__i2b+0x24>)
 800d630:	4804      	ldr	r0, [pc, #16]	; (800d644 <__i2b+0x28>)
 800d632:	f000 fca1 	bl	800df78 <__assert_func>
 800d636:	2301      	movs	r3, #1
 800d638:	6144      	str	r4, [r0, #20]
 800d63a:	6103      	str	r3, [r0, #16]
 800d63c:	bd10      	pop	{r4, pc}
 800d63e:	bf00      	nop
 800d640:	08010f42 	.word	0x08010f42
 800d644:	08010f53 	.word	0x08010f53

0800d648 <__multiply>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	4691      	mov	r9, r2
 800d64e:	690a      	ldr	r2, [r1, #16]
 800d650:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d654:	460c      	mov	r4, r1
 800d656:	429a      	cmp	r2, r3
 800d658:	bfbe      	ittt	lt
 800d65a:	460b      	movlt	r3, r1
 800d65c:	464c      	movlt	r4, r9
 800d65e:	4699      	movlt	r9, r3
 800d660:	6927      	ldr	r7, [r4, #16]
 800d662:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	6861      	ldr	r1, [r4, #4]
 800d66a:	eb07 060a 	add.w	r6, r7, sl
 800d66e:	42b3      	cmp	r3, r6
 800d670:	b085      	sub	sp, #20
 800d672:	bfb8      	it	lt
 800d674:	3101      	addlt	r1, #1
 800d676:	f7ff fedb 	bl	800d430 <_Balloc>
 800d67a:	b930      	cbnz	r0, 800d68a <__multiply+0x42>
 800d67c:	4602      	mov	r2, r0
 800d67e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d682:	4b43      	ldr	r3, [pc, #268]	; (800d790 <__multiply+0x148>)
 800d684:	4843      	ldr	r0, [pc, #268]	; (800d794 <__multiply+0x14c>)
 800d686:	f000 fc77 	bl	800df78 <__assert_func>
 800d68a:	f100 0514 	add.w	r5, r0, #20
 800d68e:	462b      	mov	r3, r5
 800d690:	2200      	movs	r2, #0
 800d692:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d696:	4543      	cmp	r3, r8
 800d698:	d321      	bcc.n	800d6de <__multiply+0x96>
 800d69a:	f104 0314 	add.w	r3, r4, #20
 800d69e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6a2:	f109 0314 	add.w	r3, r9, #20
 800d6a6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6aa:	9202      	str	r2, [sp, #8]
 800d6ac:	1b3a      	subs	r2, r7, r4
 800d6ae:	3a15      	subs	r2, #21
 800d6b0:	f022 0203 	bic.w	r2, r2, #3
 800d6b4:	3204      	adds	r2, #4
 800d6b6:	f104 0115 	add.w	r1, r4, #21
 800d6ba:	428f      	cmp	r7, r1
 800d6bc:	bf38      	it	cc
 800d6be:	2204      	movcc	r2, #4
 800d6c0:	9201      	str	r2, [sp, #4]
 800d6c2:	9a02      	ldr	r2, [sp, #8]
 800d6c4:	9303      	str	r3, [sp, #12]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d80c      	bhi.n	800d6e4 <__multiply+0x9c>
 800d6ca:	2e00      	cmp	r6, #0
 800d6cc:	dd03      	ble.n	800d6d6 <__multiply+0x8e>
 800d6ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d05a      	beq.n	800d78c <__multiply+0x144>
 800d6d6:	6106      	str	r6, [r0, #16]
 800d6d8:	b005      	add	sp, #20
 800d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6de:	f843 2b04 	str.w	r2, [r3], #4
 800d6e2:	e7d8      	b.n	800d696 <__multiply+0x4e>
 800d6e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6e8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ec:	d023      	beq.n	800d736 <__multiply+0xee>
 800d6ee:	46a9      	mov	r9, r5
 800d6f0:	f04f 0c00 	mov.w	ip, #0
 800d6f4:	f104 0e14 	add.w	lr, r4, #20
 800d6f8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6fc:	f8d9 1000 	ldr.w	r1, [r9]
 800d700:	fa1f fb82 	uxth.w	fp, r2
 800d704:	b289      	uxth	r1, r1
 800d706:	fb0a 110b 	mla	r1, sl, fp, r1
 800d70a:	4461      	add	r1, ip
 800d70c:	f8d9 c000 	ldr.w	ip, [r9]
 800d710:	0c12      	lsrs	r2, r2, #16
 800d712:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d716:	fb0a c202 	mla	r2, sl, r2, ip
 800d71a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d71e:	b289      	uxth	r1, r1
 800d720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d724:	4577      	cmp	r7, lr
 800d726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d72a:	f849 1b04 	str.w	r1, [r9], #4
 800d72e:	d8e3      	bhi.n	800d6f8 <__multiply+0xb0>
 800d730:	9a01      	ldr	r2, [sp, #4]
 800d732:	f845 c002 	str.w	ip, [r5, r2]
 800d736:	9a03      	ldr	r2, [sp, #12]
 800d738:	3304      	adds	r3, #4
 800d73a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d73e:	f1b9 0f00 	cmp.w	r9, #0
 800d742:	d021      	beq.n	800d788 <__multiply+0x140>
 800d744:	46ae      	mov	lr, r5
 800d746:	f04f 0a00 	mov.w	sl, #0
 800d74a:	6829      	ldr	r1, [r5, #0]
 800d74c:	f104 0c14 	add.w	ip, r4, #20
 800d750:	f8bc b000 	ldrh.w	fp, [ip]
 800d754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d758:	b289      	uxth	r1, r1
 800d75a:	fb09 220b 	mla	r2, r9, fp, r2
 800d75e:	4452      	add	r2, sl
 800d760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d764:	f84e 1b04 	str.w	r1, [lr], #4
 800d768:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d76c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d770:	f8be 1000 	ldrh.w	r1, [lr]
 800d774:	4567      	cmp	r7, ip
 800d776:	fb09 110a 	mla	r1, r9, sl, r1
 800d77a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d77e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d782:	d8e5      	bhi.n	800d750 <__multiply+0x108>
 800d784:	9a01      	ldr	r2, [sp, #4]
 800d786:	50a9      	str	r1, [r5, r2]
 800d788:	3504      	adds	r5, #4
 800d78a:	e79a      	b.n	800d6c2 <__multiply+0x7a>
 800d78c:	3e01      	subs	r6, #1
 800d78e:	e79c      	b.n	800d6ca <__multiply+0x82>
 800d790:	08010f42 	.word	0x08010f42
 800d794:	08010f53 	.word	0x08010f53

0800d798 <__pow5mult>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	4615      	mov	r5, r2
 800d79e:	f012 0203 	ands.w	r2, r2, #3
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	d007      	beq.n	800d7b8 <__pow5mult+0x20>
 800d7a8:	4c25      	ldr	r4, [pc, #148]	; (800d840 <__pow5mult+0xa8>)
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7b2:	f7ff fe9f 	bl	800d4f4 <__multadd>
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	10ad      	asrs	r5, r5, #2
 800d7ba:	d03d      	beq.n	800d838 <__pow5mult+0xa0>
 800d7bc:	69f4      	ldr	r4, [r6, #28]
 800d7be:	b97c      	cbnz	r4, 800d7e0 <__pow5mult+0x48>
 800d7c0:	2010      	movs	r0, #16
 800d7c2:	f7ff fd81 	bl	800d2c8 <malloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	61f0      	str	r0, [r6, #28]
 800d7ca:	b928      	cbnz	r0, 800d7d8 <__pow5mult+0x40>
 800d7cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d7d0:	4b1c      	ldr	r3, [pc, #112]	; (800d844 <__pow5mult+0xac>)
 800d7d2:	481d      	ldr	r0, [pc, #116]	; (800d848 <__pow5mult+0xb0>)
 800d7d4:	f000 fbd0 	bl	800df78 <__assert_func>
 800d7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7dc:	6004      	str	r4, [r0, #0]
 800d7de:	60c4      	str	r4, [r0, #12]
 800d7e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7e8:	b94c      	cbnz	r4, 800d7fe <__pow5mult+0x66>
 800d7ea:	f240 2171 	movw	r1, #625	; 0x271
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff14 	bl	800d61c <__i2b>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7fc:	6003      	str	r3, [r0, #0]
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	07eb      	lsls	r3, r5, #31
 800d804:	d50a      	bpl.n	800d81c <__pow5mult+0x84>
 800d806:	4639      	mov	r1, r7
 800d808:	4622      	mov	r2, r4
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff1c 	bl	800d648 <__multiply>
 800d810:	4680      	mov	r8, r0
 800d812:	4639      	mov	r1, r7
 800d814:	4630      	mov	r0, r6
 800d816:	f7ff fe4b 	bl	800d4b0 <_Bfree>
 800d81a:	4647      	mov	r7, r8
 800d81c:	106d      	asrs	r5, r5, #1
 800d81e:	d00b      	beq.n	800d838 <__pow5mult+0xa0>
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	b938      	cbnz	r0, 800d834 <__pow5mult+0x9c>
 800d824:	4622      	mov	r2, r4
 800d826:	4621      	mov	r1, r4
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff ff0d 	bl	800d648 <__multiply>
 800d82e:	6020      	str	r0, [r4, #0]
 800d830:	f8c0 9000 	str.w	r9, [r0]
 800d834:	4604      	mov	r4, r0
 800d836:	e7e4      	b.n	800d802 <__pow5mult+0x6a>
 800d838:	4638      	mov	r0, r7
 800d83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d83e:	bf00      	nop
 800d840:	080110a0 	.word	0x080110a0
 800d844:	08010ed3 	.word	0x08010ed3
 800d848:	08010f53 	.word	0x08010f53

0800d84c <__lshift>:
 800d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	4607      	mov	r7, r0
 800d854:	4691      	mov	r9, r2
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	6849      	ldr	r1, [r1, #4]
 800d85a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d864:	f108 0601 	add.w	r6, r8, #1
 800d868:	42b3      	cmp	r3, r6
 800d86a:	db0b      	blt.n	800d884 <__lshift+0x38>
 800d86c:	4638      	mov	r0, r7
 800d86e:	f7ff fddf 	bl	800d430 <_Balloc>
 800d872:	4605      	mov	r5, r0
 800d874:	b948      	cbnz	r0, 800d88a <__lshift+0x3e>
 800d876:	4602      	mov	r2, r0
 800d878:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d87c:	4b27      	ldr	r3, [pc, #156]	; (800d91c <__lshift+0xd0>)
 800d87e:	4828      	ldr	r0, [pc, #160]	; (800d920 <__lshift+0xd4>)
 800d880:	f000 fb7a 	bl	800df78 <__assert_func>
 800d884:	3101      	adds	r1, #1
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	e7ee      	b.n	800d868 <__lshift+0x1c>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f100 0114 	add.w	r1, r0, #20
 800d890:	f100 0210 	add.w	r2, r0, #16
 800d894:	4618      	mov	r0, r3
 800d896:	4553      	cmp	r3, sl
 800d898:	db33      	blt.n	800d902 <__lshift+0xb6>
 800d89a:	6920      	ldr	r0, [r4, #16]
 800d89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8a0:	f104 0314 	add.w	r3, r4, #20
 800d8a4:	f019 091f 	ands.w	r9, r9, #31
 800d8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8b0:	d02b      	beq.n	800d90a <__lshift+0xbe>
 800d8b2:	468a      	mov	sl, r1
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d8ba:	6818      	ldr	r0, [r3, #0]
 800d8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d8c0:	4310      	orrs	r0, r2
 800d8c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ca:	459c      	cmp	ip, r3
 800d8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8d0:	d8f3      	bhi.n	800d8ba <__lshift+0x6e>
 800d8d2:	ebac 0304 	sub.w	r3, ip, r4
 800d8d6:	3b15      	subs	r3, #21
 800d8d8:	f023 0303 	bic.w	r3, r3, #3
 800d8dc:	3304      	adds	r3, #4
 800d8de:	f104 0015 	add.w	r0, r4, #21
 800d8e2:	4584      	cmp	ip, r0
 800d8e4:	bf38      	it	cc
 800d8e6:	2304      	movcc	r3, #4
 800d8e8:	50ca      	str	r2, [r1, r3]
 800d8ea:	b10a      	cbz	r2, 800d8f0 <__lshift+0xa4>
 800d8ec:	f108 0602 	add.w	r6, r8, #2
 800d8f0:	3e01      	subs	r6, #1
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	612e      	str	r6, [r5, #16]
 800d8f8:	f7ff fdda 	bl	800d4b0 <_Bfree>
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d902:	f842 0f04 	str.w	r0, [r2, #4]!
 800d906:	3301      	adds	r3, #1
 800d908:	e7c5      	b.n	800d896 <__lshift+0x4a>
 800d90a:	3904      	subs	r1, #4
 800d90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d910:	459c      	cmp	ip, r3
 800d912:	f841 2f04 	str.w	r2, [r1, #4]!
 800d916:	d8f9      	bhi.n	800d90c <__lshift+0xc0>
 800d918:	e7ea      	b.n	800d8f0 <__lshift+0xa4>
 800d91a:	bf00      	nop
 800d91c:	08010f42 	.word	0x08010f42
 800d920:	08010f53 	.word	0x08010f53

0800d924 <__mcmp>:
 800d924:	4603      	mov	r3, r0
 800d926:	690a      	ldr	r2, [r1, #16]
 800d928:	6900      	ldr	r0, [r0, #16]
 800d92a:	b530      	push	{r4, r5, lr}
 800d92c:	1a80      	subs	r0, r0, r2
 800d92e:	d10d      	bne.n	800d94c <__mcmp+0x28>
 800d930:	3314      	adds	r3, #20
 800d932:	3114      	adds	r1, #20
 800d934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d93c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d944:	4295      	cmp	r5, r2
 800d946:	d002      	beq.n	800d94e <__mcmp+0x2a>
 800d948:	d304      	bcc.n	800d954 <__mcmp+0x30>
 800d94a:	2001      	movs	r0, #1
 800d94c:	bd30      	pop	{r4, r5, pc}
 800d94e:	42a3      	cmp	r3, r4
 800d950:	d3f4      	bcc.n	800d93c <__mcmp+0x18>
 800d952:	e7fb      	b.n	800d94c <__mcmp+0x28>
 800d954:	f04f 30ff 	mov.w	r0, #4294967295
 800d958:	e7f8      	b.n	800d94c <__mcmp+0x28>
	...

0800d95c <__mdiff>:
 800d95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d960:	460d      	mov	r5, r1
 800d962:	4607      	mov	r7, r0
 800d964:	4611      	mov	r1, r2
 800d966:	4628      	mov	r0, r5
 800d968:	4614      	mov	r4, r2
 800d96a:	f7ff ffdb 	bl	800d924 <__mcmp>
 800d96e:	1e06      	subs	r6, r0, #0
 800d970:	d111      	bne.n	800d996 <__mdiff+0x3a>
 800d972:	4631      	mov	r1, r6
 800d974:	4638      	mov	r0, r7
 800d976:	f7ff fd5b 	bl	800d430 <_Balloc>
 800d97a:	4602      	mov	r2, r0
 800d97c:	b928      	cbnz	r0, 800d98a <__mdiff+0x2e>
 800d97e:	f240 2137 	movw	r1, #567	; 0x237
 800d982:	4b3a      	ldr	r3, [pc, #232]	; (800da6c <__mdiff+0x110>)
 800d984:	483a      	ldr	r0, [pc, #232]	; (800da70 <__mdiff+0x114>)
 800d986:	f000 faf7 	bl	800df78 <__assert_func>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d990:	4610      	mov	r0, r2
 800d992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d996:	bfa4      	itt	ge
 800d998:	4623      	movge	r3, r4
 800d99a:	462c      	movge	r4, r5
 800d99c:	4638      	mov	r0, r7
 800d99e:	6861      	ldr	r1, [r4, #4]
 800d9a0:	bfa6      	itte	ge
 800d9a2:	461d      	movge	r5, r3
 800d9a4:	2600      	movge	r6, #0
 800d9a6:	2601      	movlt	r6, #1
 800d9a8:	f7ff fd42 	bl	800d430 <_Balloc>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	b918      	cbnz	r0, 800d9b8 <__mdiff+0x5c>
 800d9b0:	f240 2145 	movw	r1, #581	; 0x245
 800d9b4:	4b2d      	ldr	r3, [pc, #180]	; (800da6c <__mdiff+0x110>)
 800d9b6:	e7e5      	b.n	800d984 <__mdiff+0x28>
 800d9b8:	f102 0814 	add.w	r8, r2, #20
 800d9bc:	46c2      	mov	sl, r8
 800d9be:	f04f 0c00 	mov.w	ip, #0
 800d9c2:	6927      	ldr	r7, [r4, #16]
 800d9c4:	60c6      	str	r6, [r0, #12]
 800d9c6:	692e      	ldr	r6, [r5, #16]
 800d9c8:	f104 0014 	add.w	r0, r4, #20
 800d9cc:	f105 0914 	add.w	r9, r5, #20
 800d9d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d9d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9d8:	3410      	adds	r4, #16
 800d9da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d9de:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9e2:	fa1f f18b 	uxth.w	r1, fp
 800d9e6:	4461      	add	r1, ip
 800d9e8:	fa1f fc83 	uxth.w	ip, r3
 800d9ec:	0c1b      	lsrs	r3, r3, #16
 800d9ee:	eba1 010c 	sub.w	r1, r1, ip
 800d9f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d9fa:	b289      	uxth	r1, r1
 800d9fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800da00:	454e      	cmp	r6, r9
 800da02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800da06:	f84a 1b04 	str.w	r1, [sl], #4
 800da0a:	d8e6      	bhi.n	800d9da <__mdiff+0x7e>
 800da0c:	1b73      	subs	r3, r6, r5
 800da0e:	3b15      	subs	r3, #21
 800da10:	f023 0303 	bic.w	r3, r3, #3
 800da14:	3515      	adds	r5, #21
 800da16:	3304      	adds	r3, #4
 800da18:	42ae      	cmp	r6, r5
 800da1a:	bf38      	it	cc
 800da1c:	2304      	movcc	r3, #4
 800da1e:	4418      	add	r0, r3
 800da20:	4443      	add	r3, r8
 800da22:	461e      	mov	r6, r3
 800da24:	4605      	mov	r5, r0
 800da26:	4575      	cmp	r5, lr
 800da28:	d30e      	bcc.n	800da48 <__mdiff+0xec>
 800da2a:	f10e 0103 	add.w	r1, lr, #3
 800da2e:	1a09      	subs	r1, r1, r0
 800da30:	f021 0103 	bic.w	r1, r1, #3
 800da34:	3803      	subs	r0, #3
 800da36:	4586      	cmp	lr, r0
 800da38:	bf38      	it	cc
 800da3a:	2100      	movcc	r1, #0
 800da3c:	440b      	add	r3, r1
 800da3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da42:	b189      	cbz	r1, 800da68 <__mdiff+0x10c>
 800da44:	6117      	str	r7, [r2, #16]
 800da46:	e7a3      	b.n	800d990 <__mdiff+0x34>
 800da48:	f855 8b04 	ldr.w	r8, [r5], #4
 800da4c:	fa1f f188 	uxth.w	r1, r8
 800da50:	4461      	add	r1, ip
 800da52:	140c      	asrs	r4, r1, #16
 800da54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da58:	b289      	uxth	r1, r1
 800da5a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800da5e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800da62:	f846 1b04 	str.w	r1, [r6], #4
 800da66:	e7de      	b.n	800da26 <__mdiff+0xca>
 800da68:	3f01      	subs	r7, #1
 800da6a:	e7e8      	b.n	800da3e <__mdiff+0xe2>
 800da6c:	08010f42 	.word	0x08010f42
 800da70:	08010f53 	.word	0x08010f53

0800da74 <__d2b>:
 800da74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da76:	2101      	movs	r1, #1
 800da78:	4617      	mov	r7, r2
 800da7a:	461c      	mov	r4, r3
 800da7c:	9e08      	ldr	r6, [sp, #32]
 800da7e:	f7ff fcd7 	bl	800d430 <_Balloc>
 800da82:	4605      	mov	r5, r0
 800da84:	b930      	cbnz	r0, 800da94 <__d2b+0x20>
 800da86:	4602      	mov	r2, r0
 800da88:	f240 310f 	movw	r1, #783	; 0x30f
 800da8c:	4b22      	ldr	r3, [pc, #136]	; (800db18 <__d2b+0xa4>)
 800da8e:	4823      	ldr	r0, [pc, #140]	; (800db1c <__d2b+0xa8>)
 800da90:	f000 fa72 	bl	800df78 <__assert_func>
 800da94:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800da98:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800da9c:	bb24      	cbnz	r4, 800dae8 <__d2b+0x74>
 800da9e:	2f00      	cmp	r7, #0
 800daa0:	9301      	str	r3, [sp, #4]
 800daa2:	d026      	beq.n	800daf2 <__d2b+0x7e>
 800daa4:	4668      	mov	r0, sp
 800daa6:	9700      	str	r7, [sp, #0]
 800daa8:	f7ff fd8a 	bl	800d5c0 <__lo0bits>
 800daac:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dab0:	b1e8      	cbz	r0, 800daee <__d2b+0x7a>
 800dab2:	f1c0 0320 	rsb	r3, r0, #32
 800dab6:	fa02 f303 	lsl.w	r3, r2, r3
 800daba:	430b      	orrs	r3, r1
 800dabc:	40c2      	lsrs	r2, r0
 800dabe:	616b      	str	r3, [r5, #20]
 800dac0:	9201      	str	r2, [sp, #4]
 800dac2:	9b01      	ldr	r3, [sp, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bf14      	ite	ne
 800dac8:	2102      	movne	r1, #2
 800daca:	2101      	moveq	r1, #1
 800dacc:	61ab      	str	r3, [r5, #24]
 800dace:	6129      	str	r1, [r5, #16]
 800dad0:	b1bc      	cbz	r4, 800db02 <__d2b+0x8e>
 800dad2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dad6:	4404      	add	r4, r0
 800dad8:	6034      	str	r4, [r6, #0]
 800dada:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae0:	6018      	str	r0, [r3, #0]
 800dae2:	4628      	mov	r0, r5
 800dae4:	b003      	add	sp, #12
 800dae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daec:	e7d7      	b.n	800da9e <__d2b+0x2a>
 800daee:	6169      	str	r1, [r5, #20]
 800daf0:	e7e7      	b.n	800dac2 <__d2b+0x4e>
 800daf2:	a801      	add	r0, sp, #4
 800daf4:	f7ff fd64 	bl	800d5c0 <__lo0bits>
 800daf8:	9b01      	ldr	r3, [sp, #4]
 800dafa:	2101      	movs	r1, #1
 800dafc:	616b      	str	r3, [r5, #20]
 800dafe:	3020      	adds	r0, #32
 800db00:	e7e5      	b.n	800dace <__d2b+0x5a>
 800db02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db06:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800db0a:	6030      	str	r0, [r6, #0]
 800db0c:	6918      	ldr	r0, [r3, #16]
 800db0e:	f7ff fd37 	bl	800d580 <__hi0bits>
 800db12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800db16:	e7e2      	b.n	800dade <__d2b+0x6a>
 800db18:	08010f42 	.word	0x08010f42
 800db1c:	08010f53 	.word	0x08010f53

0800db20 <__ssputs_r>:
 800db20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db24:	461f      	mov	r7, r3
 800db26:	688e      	ldr	r6, [r1, #8]
 800db28:	4682      	mov	sl, r0
 800db2a:	42be      	cmp	r6, r7
 800db2c:	460c      	mov	r4, r1
 800db2e:	4690      	mov	r8, r2
 800db30:	680b      	ldr	r3, [r1, #0]
 800db32:	d82c      	bhi.n	800db8e <__ssputs_r+0x6e>
 800db34:	898a      	ldrh	r2, [r1, #12]
 800db36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db3a:	d026      	beq.n	800db8a <__ssputs_r+0x6a>
 800db3c:	6965      	ldr	r5, [r4, #20]
 800db3e:	6909      	ldr	r1, [r1, #16]
 800db40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db44:	eba3 0901 	sub.w	r9, r3, r1
 800db48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db4c:	1c7b      	adds	r3, r7, #1
 800db4e:	444b      	add	r3, r9
 800db50:	106d      	asrs	r5, r5, #1
 800db52:	429d      	cmp	r5, r3
 800db54:	bf38      	it	cc
 800db56:	461d      	movcc	r5, r3
 800db58:	0553      	lsls	r3, r2, #21
 800db5a:	d527      	bpl.n	800dbac <__ssputs_r+0x8c>
 800db5c:	4629      	mov	r1, r5
 800db5e:	f7ff fbdb 	bl	800d318 <_malloc_r>
 800db62:	4606      	mov	r6, r0
 800db64:	b360      	cbz	r0, 800dbc0 <__ssputs_r+0xa0>
 800db66:	464a      	mov	r2, r9
 800db68:	6921      	ldr	r1, [r4, #16]
 800db6a:	f7fe fce8 	bl	800c53e <memcpy>
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db78:	81a3      	strh	r3, [r4, #12]
 800db7a:	6126      	str	r6, [r4, #16]
 800db7c:	444e      	add	r6, r9
 800db7e:	6026      	str	r6, [r4, #0]
 800db80:	463e      	mov	r6, r7
 800db82:	6165      	str	r5, [r4, #20]
 800db84:	eba5 0509 	sub.w	r5, r5, r9
 800db88:	60a5      	str	r5, [r4, #8]
 800db8a:	42be      	cmp	r6, r7
 800db8c:	d900      	bls.n	800db90 <__ssputs_r+0x70>
 800db8e:	463e      	mov	r6, r7
 800db90:	4632      	mov	r2, r6
 800db92:	4641      	mov	r1, r8
 800db94:	6820      	ldr	r0, [r4, #0]
 800db96:	f000 f9c5 	bl	800df24 <memmove>
 800db9a:	2000      	movs	r0, #0
 800db9c:	68a3      	ldr	r3, [r4, #8]
 800db9e:	1b9b      	subs	r3, r3, r6
 800dba0:	60a3      	str	r3, [r4, #8]
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	4433      	add	r3, r6
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbac:	462a      	mov	r2, r5
 800dbae:	f000 fa27 	bl	800e000 <_realloc_r>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d1e0      	bne.n	800db7a <__ssputs_r+0x5a>
 800dbb8:	4650      	mov	r0, sl
 800dbba:	6921      	ldr	r1, [r4, #16]
 800dbbc:	f7ff fb3c 	bl	800d238 <_free_r>
 800dbc0:	230c      	movs	r3, #12
 800dbc2:	f8ca 3000 	str.w	r3, [sl]
 800dbc6:	89a3      	ldrh	r3, [r4, #12]
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	e7e9      	b.n	800dba8 <__ssputs_r+0x88>

0800dbd4 <_svfiprintf_r>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	4698      	mov	r8, r3
 800dbda:	898b      	ldrh	r3, [r1, #12]
 800dbdc:	4607      	mov	r7, r0
 800dbde:	061b      	lsls	r3, r3, #24
 800dbe0:	460d      	mov	r5, r1
 800dbe2:	4614      	mov	r4, r2
 800dbe4:	b09d      	sub	sp, #116	; 0x74
 800dbe6:	d50e      	bpl.n	800dc06 <_svfiprintf_r+0x32>
 800dbe8:	690b      	ldr	r3, [r1, #16]
 800dbea:	b963      	cbnz	r3, 800dc06 <_svfiprintf_r+0x32>
 800dbec:	2140      	movs	r1, #64	; 0x40
 800dbee:	f7ff fb93 	bl	800d318 <_malloc_r>
 800dbf2:	6028      	str	r0, [r5, #0]
 800dbf4:	6128      	str	r0, [r5, #16]
 800dbf6:	b920      	cbnz	r0, 800dc02 <_svfiprintf_r+0x2e>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dc00:	e0d0      	b.n	800dda4 <_svfiprintf_r+0x1d0>
 800dc02:	2340      	movs	r3, #64	; 0x40
 800dc04:	616b      	str	r3, [r5, #20]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0a:	2320      	movs	r3, #32
 800dc0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc10:	2330      	movs	r3, #48	; 0x30
 800dc12:	f04f 0901 	mov.w	r9, #1
 800dc16:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc1a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ddbc <_svfiprintf_r+0x1e8>
 800dc1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc22:	4623      	mov	r3, r4
 800dc24:	469a      	mov	sl, r3
 800dc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc2a:	b10a      	cbz	r2, 800dc30 <_svfiprintf_r+0x5c>
 800dc2c:	2a25      	cmp	r2, #37	; 0x25
 800dc2e:	d1f9      	bne.n	800dc24 <_svfiprintf_r+0x50>
 800dc30:	ebba 0b04 	subs.w	fp, sl, r4
 800dc34:	d00b      	beq.n	800dc4e <_svfiprintf_r+0x7a>
 800dc36:	465b      	mov	r3, fp
 800dc38:	4622      	mov	r2, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4638      	mov	r0, r7
 800dc3e:	f7ff ff6f 	bl	800db20 <__ssputs_r>
 800dc42:	3001      	adds	r0, #1
 800dc44:	f000 80a9 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc4a:	445a      	add	r2, fp
 800dc4c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 80a1 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc62:	f10a 0a01 	add.w	sl, sl, #1
 800dc66:	9304      	str	r3, [sp, #16]
 800dc68:	9307      	str	r3, [sp, #28]
 800dc6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc6e:	931a      	str	r3, [sp, #104]	; 0x68
 800dc70:	4654      	mov	r4, sl
 800dc72:	2205      	movs	r2, #5
 800dc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc78:	4850      	ldr	r0, [pc, #320]	; (800ddbc <_svfiprintf_r+0x1e8>)
 800dc7a:	f7fe fc52 	bl	800c522 <memchr>
 800dc7e:	9a04      	ldr	r2, [sp, #16]
 800dc80:	b9d8      	cbnz	r0, 800dcba <_svfiprintf_r+0xe6>
 800dc82:	06d0      	lsls	r0, r2, #27
 800dc84:	bf44      	itt	mi
 800dc86:	2320      	movmi	r3, #32
 800dc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc8c:	0711      	lsls	r1, r2, #28
 800dc8e:	bf44      	itt	mi
 800dc90:	232b      	movmi	r3, #43	; 0x2b
 800dc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc96:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc9c:	d015      	beq.n	800dcca <_svfiprintf_r+0xf6>
 800dc9e:	4654      	mov	r4, sl
 800dca0:	2000      	movs	r0, #0
 800dca2:	f04f 0c0a 	mov.w	ip, #10
 800dca6:	9a07      	ldr	r2, [sp, #28]
 800dca8:	4621      	mov	r1, r4
 800dcaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcae:	3b30      	subs	r3, #48	; 0x30
 800dcb0:	2b09      	cmp	r3, #9
 800dcb2:	d94d      	bls.n	800dd50 <_svfiprintf_r+0x17c>
 800dcb4:	b1b0      	cbz	r0, 800dce4 <_svfiprintf_r+0x110>
 800dcb6:	9207      	str	r2, [sp, #28]
 800dcb8:	e014      	b.n	800dce4 <_svfiprintf_r+0x110>
 800dcba:	eba0 0308 	sub.w	r3, r0, r8
 800dcbe:	fa09 f303 	lsl.w	r3, r9, r3
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	46a2      	mov	sl, r4
 800dcc6:	9304      	str	r3, [sp, #16]
 800dcc8:	e7d2      	b.n	800dc70 <_svfiprintf_r+0x9c>
 800dcca:	9b03      	ldr	r3, [sp, #12]
 800dccc:	1d19      	adds	r1, r3, #4
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	9103      	str	r1, [sp, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bfbb      	ittet	lt
 800dcd6:	425b      	neglt	r3, r3
 800dcd8:	f042 0202 	orrlt.w	r2, r2, #2
 800dcdc:	9307      	strge	r3, [sp, #28]
 800dcde:	9307      	strlt	r3, [sp, #28]
 800dce0:	bfb8      	it	lt
 800dce2:	9204      	strlt	r2, [sp, #16]
 800dce4:	7823      	ldrb	r3, [r4, #0]
 800dce6:	2b2e      	cmp	r3, #46	; 0x2e
 800dce8:	d10c      	bne.n	800dd04 <_svfiprintf_r+0x130>
 800dcea:	7863      	ldrb	r3, [r4, #1]
 800dcec:	2b2a      	cmp	r3, #42	; 0x2a
 800dcee:	d134      	bne.n	800dd5a <_svfiprintf_r+0x186>
 800dcf0:	9b03      	ldr	r3, [sp, #12]
 800dcf2:	3402      	adds	r4, #2
 800dcf4:	1d1a      	adds	r2, r3, #4
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	9203      	str	r2, [sp, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfb8      	it	lt
 800dcfe:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ddc0 <_svfiprintf_r+0x1ec>
 800dd08:	2203      	movs	r2, #3
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	7821      	ldrb	r1, [r4, #0]
 800dd0e:	f7fe fc08 	bl	800c522 <memchr>
 800dd12:	b138      	cbz	r0, 800dd24 <_svfiprintf_r+0x150>
 800dd14:	2240      	movs	r2, #64	; 0x40
 800dd16:	9b04      	ldr	r3, [sp, #16]
 800dd18:	eba0 000a 	sub.w	r0, r0, sl
 800dd1c:	4082      	lsls	r2, r0
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	3401      	adds	r4, #1
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd28:	2206      	movs	r2, #6
 800dd2a:	4826      	ldr	r0, [pc, #152]	; (800ddc4 <_svfiprintf_r+0x1f0>)
 800dd2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd30:	f7fe fbf7 	bl	800c522 <memchr>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d038      	beq.n	800ddaa <_svfiprintf_r+0x1d6>
 800dd38:	4b23      	ldr	r3, [pc, #140]	; (800ddc8 <_svfiprintf_r+0x1f4>)
 800dd3a:	bb1b      	cbnz	r3, 800dd84 <_svfiprintf_r+0x1b0>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	3307      	adds	r3, #7
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	3308      	adds	r3, #8
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4a:	4433      	add	r3, r6
 800dd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd4e:	e768      	b.n	800dc22 <_svfiprintf_r+0x4e>
 800dd50:	460c      	mov	r4, r1
 800dd52:	2001      	movs	r0, #1
 800dd54:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd58:	e7a6      	b.n	800dca8 <_svfiprintf_r+0xd4>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f04f 0c0a 	mov.w	ip, #10
 800dd60:	4619      	mov	r1, r3
 800dd62:	3401      	adds	r4, #1
 800dd64:	9305      	str	r3, [sp, #20]
 800dd66:	4620      	mov	r0, r4
 800dd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd6c:	3a30      	subs	r2, #48	; 0x30
 800dd6e:	2a09      	cmp	r2, #9
 800dd70:	d903      	bls.n	800dd7a <_svfiprintf_r+0x1a6>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c6      	beq.n	800dd04 <_svfiprintf_r+0x130>
 800dd76:	9105      	str	r1, [sp, #20]
 800dd78:	e7c4      	b.n	800dd04 <_svfiprintf_r+0x130>
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd82:	e7f0      	b.n	800dd66 <_svfiprintf_r+0x192>
 800dd84:	ab03      	add	r3, sp, #12
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <_svfiprintf_r+0x1f8>)
 800dd8e:	a904      	add	r1, sp, #16
 800dd90:	f7fd fe60 	bl	800ba54 <_printf_float>
 800dd94:	1c42      	adds	r2, r0, #1
 800dd96:	4606      	mov	r6, r0
 800dd98:	d1d6      	bne.n	800dd48 <_svfiprintf_r+0x174>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	065b      	lsls	r3, r3, #25
 800dd9e:	f53f af2d 	bmi.w	800dbfc <_svfiprintf_r+0x28>
 800dda2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dda4:	b01d      	add	sp, #116	; 0x74
 800dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddaa:	ab03      	add	r3, sp, #12
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	462a      	mov	r2, r5
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	4b06      	ldr	r3, [pc, #24]	; (800ddcc <_svfiprintf_r+0x1f8>)
 800ddb4:	a904      	add	r1, sp, #16
 800ddb6:	f7fe f8ed 	bl	800bf94 <_printf_i>
 800ddba:	e7eb      	b.n	800dd94 <_svfiprintf_r+0x1c0>
 800ddbc:	080110ac 	.word	0x080110ac
 800ddc0:	080110b2 	.word	0x080110b2
 800ddc4:	080110b6 	.word	0x080110b6
 800ddc8:	0800ba55 	.word	0x0800ba55
 800ddcc:	0800db21 	.word	0x0800db21

0800ddd0 <__sflush_r>:
 800ddd0:	898a      	ldrh	r2, [r1, #12]
 800ddd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	0710      	lsls	r0, r2, #28
 800ddd8:	460c      	mov	r4, r1
 800ddda:	d457      	bmi.n	800de8c <__sflush_r+0xbc>
 800dddc:	684b      	ldr	r3, [r1, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc04      	bgt.n	800ddec <__sflush_r+0x1c>
 800dde2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dc01      	bgt.n	800ddec <__sflush_r+0x1c>
 800dde8:	2000      	movs	r0, #0
 800ddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddee:	2e00      	cmp	r6, #0
 800ddf0:	d0fa      	beq.n	800dde8 <__sflush_r+0x18>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddf8:	682f      	ldr	r7, [r5, #0]
 800ddfa:	6a21      	ldr	r1, [r4, #32]
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	d032      	beq.n	800de66 <__sflush_r+0x96>
 800de00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	075a      	lsls	r2, r3, #29
 800de06:	d505      	bpl.n	800de14 <__sflush_r+0x44>
 800de08:	6863      	ldr	r3, [r4, #4]
 800de0a:	1ac0      	subs	r0, r0, r3
 800de0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de0e:	b10b      	cbz	r3, 800de14 <__sflush_r+0x44>
 800de10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de12:	1ac0      	subs	r0, r0, r3
 800de14:	2300      	movs	r3, #0
 800de16:	4602      	mov	r2, r0
 800de18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de1a:	4628      	mov	r0, r5
 800de1c:	6a21      	ldr	r1, [r4, #32]
 800de1e:	47b0      	blx	r6
 800de20:	1c43      	adds	r3, r0, #1
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	d106      	bne.n	800de34 <__sflush_r+0x64>
 800de26:	6829      	ldr	r1, [r5, #0]
 800de28:	291d      	cmp	r1, #29
 800de2a:	d82b      	bhi.n	800de84 <__sflush_r+0xb4>
 800de2c:	4a28      	ldr	r2, [pc, #160]	; (800ded0 <__sflush_r+0x100>)
 800de2e:	410a      	asrs	r2, r1
 800de30:	07d6      	lsls	r6, r2, #31
 800de32:	d427      	bmi.n	800de84 <__sflush_r+0xb4>
 800de34:	2200      	movs	r2, #0
 800de36:	6062      	str	r2, [r4, #4]
 800de38:	6922      	ldr	r2, [r4, #16]
 800de3a:	04d9      	lsls	r1, r3, #19
 800de3c:	6022      	str	r2, [r4, #0]
 800de3e:	d504      	bpl.n	800de4a <__sflush_r+0x7a>
 800de40:	1c42      	adds	r2, r0, #1
 800de42:	d101      	bne.n	800de48 <__sflush_r+0x78>
 800de44:	682b      	ldr	r3, [r5, #0]
 800de46:	b903      	cbnz	r3, 800de4a <__sflush_r+0x7a>
 800de48:	6560      	str	r0, [r4, #84]	; 0x54
 800de4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4c:	602f      	str	r7, [r5, #0]
 800de4e:	2900      	cmp	r1, #0
 800de50:	d0ca      	beq.n	800dde8 <__sflush_r+0x18>
 800de52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de56:	4299      	cmp	r1, r3
 800de58:	d002      	beq.n	800de60 <__sflush_r+0x90>
 800de5a:	4628      	mov	r0, r5
 800de5c:	f7ff f9ec 	bl	800d238 <_free_r>
 800de60:	2000      	movs	r0, #0
 800de62:	6360      	str	r0, [r4, #52]	; 0x34
 800de64:	e7c1      	b.n	800ddea <__sflush_r+0x1a>
 800de66:	2301      	movs	r3, #1
 800de68:	4628      	mov	r0, r5
 800de6a:	47b0      	blx	r6
 800de6c:	1c41      	adds	r1, r0, #1
 800de6e:	d1c8      	bne.n	800de02 <__sflush_r+0x32>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0c5      	beq.n	800de02 <__sflush_r+0x32>
 800de76:	2b1d      	cmp	r3, #29
 800de78:	d001      	beq.n	800de7e <__sflush_r+0xae>
 800de7a:	2b16      	cmp	r3, #22
 800de7c:	d101      	bne.n	800de82 <__sflush_r+0xb2>
 800de7e:	602f      	str	r7, [r5, #0]
 800de80:	e7b2      	b.n	800dde8 <__sflush_r+0x18>
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	e7ae      	b.n	800ddea <__sflush_r+0x1a>
 800de8c:	690f      	ldr	r7, [r1, #16]
 800de8e:	2f00      	cmp	r7, #0
 800de90:	d0aa      	beq.n	800dde8 <__sflush_r+0x18>
 800de92:	0793      	lsls	r3, r2, #30
 800de94:	bf18      	it	ne
 800de96:	2300      	movne	r3, #0
 800de98:	680e      	ldr	r6, [r1, #0]
 800de9a:	bf08      	it	eq
 800de9c:	694b      	ldreq	r3, [r1, #20]
 800de9e:	1bf6      	subs	r6, r6, r7
 800dea0:	600f      	str	r7, [r1, #0]
 800dea2:	608b      	str	r3, [r1, #8]
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	dd9f      	ble.n	800dde8 <__sflush_r+0x18>
 800dea8:	4633      	mov	r3, r6
 800deaa:	463a      	mov	r2, r7
 800deac:	4628      	mov	r0, r5
 800deae:	6a21      	ldr	r1, [r4, #32]
 800deb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800deb4:	47e0      	blx	ip
 800deb6:	2800      	cmp	r0, #0
 800deb8:	dc06      	bgt.n	800dec8 <__sflush_r+0xf8>
 800deba:	89a3      	ldrh	r3, [r4, #12]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	e790      	b.n	800ddea <__sflush_r+0x1a>
 800dec8:	4407      	add	r7, r0
 800deca:	1a36      	subs	r6, r6, r0
 800decc:	e7ea      	b.n	800dea4 <__sflush_r+0xd4>
 800dece:	bf00      	nop
 800ded0:	dfbffffe 	.word	0xdfbffffe

0800ded4 <_fflush_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	690b      	ldr	r3, [r1, #16]
 800ded8:	4605      	mov	r5, r0
 800deda:	460c      	mov	r4, r1
 800dedc:	b913      	cbnz	r3, 800dee4 <_fflush_r+0x10>
 800dede:	2500      	movs	r5, #0
 800dee0:	4628      	mov	r0, r5
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	b118      	cbz	r0, 800deee <_fflush_r+0x1a>
 800dee6:	6a03      	ldr	r3, [r0, #32]
 800dee8:	b90b      	cbnz	r3, 800deee <_fflush_r+0x1a>
 800deea:	f7fe fa01 	bl	800c2f0 <__sinit>
 800deee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0f3      	beq.n	800dede <_fflush_r+0xa>
 800def6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800def8:	07d0      	lsls	r0, r2, #31
 800defa:	d404      	bmi.n	800df06 <_fflush_r+0x32>
 800defc:	0599      	lsls	r1, r3, #22
 800defe:	d402      	bmi.n	800df06 <_fflush_r+0x32>
 800df00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df02:	f7fe fb0c 	bl	800c51e <__retarget_lock_acquire_recursive>
 800df06:	4628      	mov	r0, r5
 800df08:	4621      	mov	r1, r4
 800df0a:	f7ff ff61 	bl	800ddd0 <__sflush_r>
 800df0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df10:	4605      	mov	r5, r0
 800df12:	07da      	lsls	r2, r3, #31
 800df14:	d4e4      	bmi.n	800dee0 <_fflush_r+0xc>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	059b      	lsls	r3, r3, #22
 800df1a:	d4e1      	bmi.n	800dee0 <_fflush_r+0xc>
 800df1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df1e:	f7fe faff 	bl	800c520 <__retarget_lock_release_recursive>
 800df22:	e7dd      	b.n	800dee0 <_fflush_r+0xc>

0800df24 <memmove>:
 800df24:	4288      	cmp	r0, r1
 800df26:	b510      	push	{r4, lr}
 800df28:	eb01 0402 	add.w	r4, r1, r2
 800df2c:	d902      	bls.n	800df34 <memmove+0x10>
 800df2e:	4284      	cmp	r4, r0
 800df30:	4623      	mov	r3, r4
 800df32:	d807      	bhi.n	800df44 <memmove+0x20>
 800df34:	1e43      	subs	r3, r0, #1
 800df36:	42a1      	cmp	r1, r4
 800df38:	d008      	beq.n	800df4c <memmove+0x28>
 800df3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df42:	e7f8      	b.n	800df36 <memmove+0x12>
 800df44:	4601      	mov	r1, r0
 800df46:	4402      	add	r2, r0
 800df48:	428a      	cmp	r2, r1
 800df4a:	d100      	bne.n	800df4e <memmove+0x2a>
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df56:	e7f7      	b.n	800df48 <memmove+0x24>

0800df58 <_sbrk_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	2300      	movs	r3, #0
 800df5c:	4d05      	ldr	r5, [pc, #20]	; (800df74 <_sbrk_r+0x1c>)
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f9 fc16 	bl	8007794 <_sbrk>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_sbrk_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_sbrk_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20001c64 	.word	0x20001c64

0800df78 <__assert_func>:
 800df78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df7a:	4614      	mov	r4, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <__assert_func+0x2c>)
 800df80:	4605      	mov	r5, r0
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68d8      	ldr	r0, [r3, #12]
 800df86:	b14c      	cbz	r4, 800df9c <__assert_func+0x24>
 800df88:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <__assert_func+0x30>)
 800df8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df8e:	9100      	str	r1, [sp, #0]
 800df90:	462b      	mov	r3, r5
 800df92:	4906      	ldr	r1, [pc, #24]	; (800dfac <__assert_func+0x34>)
 800df94:	f000 f870 	bl	800e078 <fiprintf>
 800df98:	f000 f880 	bl	800e09c <abort>
 800df9c:	4b04      	ldr	r3, [pc, #16]	; (800dfb0 <__assert_func+0x38>)
 800df9e:	461c      	mov	r4, r3
 800dfa0:	e7f3      	b.n	800df8a <__assert_func+0x12>
 800dfa2:	bf00      	nop
 800dfa4:	20000110 	.word	0x20000110
 800dfa8:	080110c7 	.word	0x080110c7
 800dfac:	080110d4 	.word	0x080110d4
 800dfb0:	08011102 	.word	0x08011102

0800dfb4 <_calloc_r>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	fba1 5402 	umull	r5, r4, r1, r2
 800dfba:	b934      	cbnz	r4, 800dfca <_calloc_r+0x16>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7ff f9ab 	bl	800d318 <_malloc_r>
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	b928      	cbnz	r0, 800dfd2 <_calloc_r+0x1e>
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	220c      	movs	r2, #12
 800dfcc:	2600      	movs	r6, #0
 800dfce:	6002      	str	r2, [r0, #0]
 800dfd0:	e7f9      	b.n	800dfc6 <_calloc_r+0x12>
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f7fe fa24 	bl	800c422 <memset>
 800dfda:	e7f4      	b.n	800dfc6 <_calloc_r+0x12>

0800dfdc <__ascii_mbtowc>:
 800dfdc:	b082      	sub	sp, #8
 800dfde:	b901      	cbnz	r1, 800dfe2 <__ascii_mbtowc+0x6>
 800dfe0:	a901      	add	r1, sp, #4
 800dfe2:	b142      	cbz	r2, 800dff6 <__ascii_mbtowc+0x1a>
 800dfe4:	b14b      	cbz	r3, 800dffa <__ascii_mbtowc+0x1e>
 800dfe6:	7813      	ldrb	r3, [r2, #0]
 800dfe8:	600b      	str	r3, [r1, #0]
 800dfea:	7812      	ldrb	r2, [r2, #0]
 800dfec:	1e10      	subs	r0, r2, #0
 800dfee:	bf18      	it	ne
 800dff0:	2001      	movne	r0, #1
 800dff2:	b002      	add	sp, #8
 800dff4:	4770      	bx	lr
 800dff6:	4610      	mov	r0, r2
 800dff8:	e7fb      	b.n	800dff2 <__ascii_mbtowc+0x16>
 800dffa:	f06f 0001 	mvn.w	r0, #1
 800dffe:	e7f8      	b.n	800dff2 <__ascii_mbtowc+0x16>

0800e000 <_realloc_r>:
 800e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e004:	4680      	mov	r8, r0
 800e006:	4614      	mov	r4, r2
 800e008:	460e      	mov	r6, r1
 800e00a:	b921      	cbnz	r1, 800e016 <_realloc_r+0x16>
 800e00c:	4611      	mov	r1, r2
 800e00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e012:	f7ff b981 	b.w	800d318 <_malloc_r>
 800e016:	b92a      	cbnz	r2, 800e024 <_realloc_r+0x24>
 800e018:	f7ff f90e 	bl	800d238 <_free_r>
 800e01c:	4625      	mov	r5, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e024:	f000 f841 	bl	800e0aa <_malloc_usable_size_r>
 800e028:	4284      	cmp	r4, r0
 800e02a:	4607      	mov	r7, r0
 800e02c:	d802      	bhi.n	800e034 <_realloc_r+0x34>
 800e02e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e032:	d812      	bhi.n	800e05a <_realloc_r+0x5a>
 800e034:	4621      	mov	r1, r4
 800e036:	4640      	mov	r0, r8
 800e038:	f7ff f96e 	bl	800d318 <_malloc_r>
 800e03c:	4605      	mov	r5, r0
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0ed      	beq.n	800e01e <_realloc_r+0x1e>
 800e042:	42bc      	cmp	r4, r7
 800e044:	4622      	mov	r2, r4
 800e046:	4631      	mov	r1, r6
 800e048:	bf28      	it	cs
 800e04a:	463a      	movcs	r2, r7
 800e04c:	f7fe fa77 	bl	800c53e <memcpy>
 800e050:	4631      	mov	r1, r6
 800e052:	4640      	mov	r0, r8
 800e054:	f7ff f8f0 	bl	800d238 <_free_r>
 800e058:	e7e1      	b.n	800e01e <_realloc_r+0x1e>
 800e05a:	4635      	mov	r5, r6
 800e05c:	e7df      	b.n	800e01e <_realloc_r+0x1e>

0800e05e <__ascii_wctomb>:
 800e05e:	4603      	mov	r3, r0
 800e060:	4608      	mov	r0, r1
 800e062:	b141      	cbz	r1, 800e076 <__ascii_wctomb+0x18>
 800e064:	2aff      	cmp	r2, #255	; 0xff
 800e066:	d904      	bls.n	800e072 <__ascii_wctomb+0x14>
 800e068:	228a      	movs	r2, #138	; 0x8a
 800e06a:	f04f 30ff 	mov.w	r0, #4294967295
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	4770      	bx	lr
 800e072:	2001      	movs	r0, #1
 800e074:	700a      	strb	r2, [r1, #0]
 800e076:	4770      	bx	lr

0800e078 <fiprintf>:
 800e078:	b40e      	push	{r1, r2, r3}
 800e07a:	b503      	push	{r0, r1, lr}
 800e07c:	4601      	mov	r1, r0
 800e07e:	ab03      	add	r3, sp, #12
 800e080:	4805      	ldr	r0, [pc, #20]	; (800e098 <fiprintf+0x20>)
 800e082:	f853 2b04 	ldr.w	r2, [r3], #4
 800e086:	6800      	ldr	r0, [r0, #0]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	f000 f83d 	bl	800e108 <_vfiprintf_r>
 800e08e:	b002      	add	sp, #8
 800e090:	f85d eb04 	ldr.w	lr, [sp], #4
 800e094:	b003      	add	sp, #12
 800e096:	4770      	bx	lr
 800e098:	20000110 	.word	0x20000110

0800e09c <abort>:
 800e09c:	2006      	movs	r0, #6
 800e09e:	b508      	push	{r3, lr}
 800e0a0:	f000 fa0a 	bl	800e4b8 <raise>
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	f7f9 fb02 	bl	80076ae <_exit>

0800e0aa <_malloc_usable_size_r>:
 800e0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ae:	1f18      	subs	r0, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	bfbc      	itt	lt
 800e0b4:	580b      	ldrlt	r3, [r1, r0]
 800e0b6:	18c0      	addlt	r0, r0, r3
 800e0b8:	4770      	bx	lr

0800e0ba <__sfputc_r>:
 800e0ba:	6893      	ldr	r3, [r2, #8]
 800e0bc:	b410      	push	{r4}
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	6093      	str	r3, [r2, #8]
 800e0c4:	da07      	bge.n	800e0d6 <__sfputc_r+0x1c>
 800e0c6:	6994      	ldr	r4, [r2, #24]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	db01      	blt.n	800e0d0 <__sfputc_r+0x16>
 800e0cc:	290a      	cmp	r1, #10
 800e0ce:	d102      	bne.n	800e0d6 <__sfputc_r+0x1c>
 800e0d0:	bc10      	pop	{r4}
 800e0d2:	f000 b933 	b.w	800e33c <__swbuf_r>
 800e0d6:	6813      	ldr	r3, [r2, #0]
 800e0d8:	1c58      	adds	r0, r3, #1
 800e0da:	6010      	str	r0, [r2, #0]
 800e0dc:	7019      	strb	r1, [r3, #0]
 800e0de:	4608      	mov	r0, r1
 800e0e0:	bc10      	pop	{r4}
 800e0e2:	4770      	bx	lr

0800e0e4 <__sfputs_r>:
 800e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	4614      	mov	r4, r2
 800e0ec:	18d5      	adds	r5, r2, r3
 800e0ee:	42ac      	cmp	r4, r5
 800e0f0:	d101      	bne.n	800e0f6 <__sfputs_r+0x12>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	e007      	b.n	800e106 <__sfputs_r+0x22>
 800e0f6:	463a      	mov	r2, r7
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fe:	f7ff ffdc 	bl	800e0ba <__sfputc_r>
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	d1f3      	bne.n	800e0ee <__sfputs_r+0xa>
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e108 <_vfiprintf_r>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	460d      	mov	r5, r1
 800e10e:	4614      	mov	r4, r2
 800e110:	4698      	mov	r8, r3
 800e112:	4606      	mov	r6, r0
 800e114:	b09d      	sub	sp, #116	; 0x74
 800e116:	b118      	cbz	r0, 800e120 <_vfiprintf_r+0x18>
 800e118:	6a03      	ldr	r3, [r0, #32]
 800e11a:	b90b      	cbnz	r3, 800e120 <_vfiprintf_r+0x18>
 800e11c:	f7fe f8e8 	bl	800c2f0 <__sinit>
 800e120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e122:	07d9      	lsls	r1, r3, #31
 800e124:	d405      	bmi.n	800e132 <_vfiprintf_r+0x2a>
 800e126:	89ab      	ldrh	r3, [r5, #12]
 800e128:	059a      	lsls	r2, r3, #22
 800e12a:	d402      	bmi.n	800e132 <_vfiprintf_r+0x2a>
 800e12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e12e:	f7fe f9f6 	bl	800c51e <__retarget_lock_acquire_recursive>
 800e132:	89ab      	ldrh	r3, [r5, #12]
 800e134:	071b      	lsls	r3, r3, #28
 800e136:	d501      	bpl.n	800e13c <_vfiprintf_r+0x34>
 800e138:	692b      	ldr	r3, [r5, #16]
 800e13a:	b99b      	cbnz	r3, 800e164 <_vfiprintf_r+0x5c>
 800e13c:	4629      	mov	r1, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	f000 f93a 	bl	800e3b8 <__swsetup_r>
 800e144:	b170      	cbz	r0, 800e164 <_vfiprintf_r+0x5c>
 800e146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e148:	07dc      	lsls	r4, r3, #31
 800e14a:	d504      	bpl.n	800e156 <_vfiprintf_r+0x4e>
 800e14c:	f04f 30ff 	mov.w	r0, #4294967295
 800e150:	b01d      	add	sp, #116	; 0x74
 800e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	0598      	lsls	r0, r3, #22
 800e15a:	d4f7      	bmi.n	800e14c <_vfiprintf_r+0x44>
 800e15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e15e:	f7fe f9df 	bl	800c520 <__retarget_lock_release_recursive>
 800e162:	e7f3      	b.n	800e14c <_vfiprintf_r+0x44>
 800e164:	2300      	movs	r3, #0
 800e166:	9309      	str	r3, [sp, #36]	; 0x24
 800e168:	2320      	movs	r3, #32
 800e16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e16e:	2330      	movs	r3, #48	; 0x30
 800e170:	f04f 0901 	mov.w	r9, #1
 800e174:	f8cd 800c 	str.w	r8, [sp, #12]
 800e178:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e328 <_vfiprintf_r+0x220>
 800e17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e180:	4623      	mov	r3, r4
 800e182:	469a      	mov	sl, r3
 800e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e188:	b10a      	cbz	r2, 800e18e <_vfiprintf_r+0x86>
 800e18a:	2a25      	cmp	r2, #37	; 0x25
 800e18c:	d1f9      	bne.n	800e182 <_vfiprintf_r+0x7a>
 800e18e:	ebba 0b04 	subs.w	fp, sl, r4
 800e192:	d00b      	beq.n	800e1ac <_vfiprintf_r+0xa4>
 800e194:	465b      	mov	r3, fp
 800e196:	4622      	mov	r2, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff ffa2 	bl	800e0e4 <__sfputs_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f000 80a9 	beq.w	800e2f8 <_vfiprintf_r+0x1f0>
 800e1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a8:	445a      	add	r2, fp
 800e1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 80a1 	beq.w	800e2f8 <_vfiprintf_r+0x1f0>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c0:	f10a 0a01 	add.w	sl, sl, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800e1ce:	4654      	mov	r4, sl
 800e1d0:	2205      	movs	r2, #5
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	4854      	ldr	r0, [pc, #336]	; (800e328 <_vfiprintf_r+0x220>)
 800e1d8:	f7fe f9a3 	bl	800c522 <memchr>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	b9d8      	cbnz	r0, 800e218 <_vfiprintf_r+0x110>
 800e1e0:	06d1      	lsls	r1, r2, #27
 800e1e2:	bf44      	itt	mi
 800e1e4:	2320      	movmi	r3, #32
 800e1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ea:	0713      	lsls	r3, r2, #28
 800e1ec:	bf44      	itt	mi
 800e1ee:	232b      	movmi	r3, #43	; 0x2b
 800e1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d015      	beq.n	800e228 <_vfiprintf_r+0x120>
 800e1fc:	4654      	mov	r4, sl
 800e1fe:	2000      	movs	r0, #0
 800e200:	f04f 0c0a 	mov.w	ip, #10
 800e204:	9a07      	ldr	r2, [sp, #28]
 800e206:	4621      	mov	r1, r4
 800e208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20c:	3b30      	subs	r3, #48	; 0x30
 800e20e:	2b09      	cmp	r3, #9
 800e210:	d94d      	bls.n	800e2ae <_vfiprintf_r+0x1a6>
 800e212:	b1b0      	cbz	r0, 800e242 <_vfiprintf_r+0x13a>
 800e214:	9207      	str	r2, [sp, #28]
 800e216:	e014      	b.n	800e242 <_vfiprintf_r+0x13a>
 800e218:	eba0 0308 	sub.w	r3, r0, r8
 800e21c:	fa09 f303 	lsl.w	r3, r9, r3
 800e220:	4313      	orrs	r3, r2
 800e222:	46a2      	mov	sl, r4
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	e7d2      	b.n	800e1ce <_vfiprintf_r+0xc6>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	1d19      	adds	r1, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfbb      	ittet	lt
 800e234:	425b      	neglt	r3, r3
 800e236:	f042 0202 	orrlt.w	r2, r2, #2
 800e23a:	9307      	strge	r3, [sp, #28]
 800e23c:	9307      	strlt	r3, [sp, #28]
 800e23e:	bfb8      	it	lt
 800e240:	9204      	strlt	r2, [sp, #16]
 800e242:	7823      	ldrb	r3, [r4, #0]
 800e244:	2b2e      	cmp	r3, #46	; 0x2e
 800e246:	d10c      	bne.n	800e262 <_vfiprintf_r+0x15a>
 800e248:	7863      	ldrb	r3, [r4, #1]
 800e24a:	2b2a      	cmp	r3, #42	; 0x2a
 800e24c:	d134      	bne.n	800e2b8 <_vfiprintf_r+0x1b0>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	3402      	adds	r4, #2
 800e252:	1d1a      	adds	r2, r3, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	9203      	str	r2, [sp, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bfb8      	it	lt
 800e25c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e32c <_vfiprintf_r+0x224>
 800e266:	2203      	movs	r2, #3
 800e268:	4650      	mov	r0, sl
 800e26a:	7821      	ldrb	r1, [r4, #0]
 800e26c:	f7fe f959 	bl	800c522 <memchr>
 800e270:	b138      	cbz	r0, 800e282 <_vfiprintf_r+0x17a>
 800e272:	2240      	movs	r2, #64	; 0x40
 800e274:	9b04      	ldr	r3, [sp, #16]
 800e276:	eba0 000a 	sub.w	r0, r0, sl
 800e27a:	4082      	lsls	r2, r0
 800e27c:	4313      	orrs	r3, r2
 800e27e:	3401      	adds	r4, #1
 800e280:	9304      	str	r3, [sp, #16]
 800e282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e286:	2206      	movs	r2, #6
 800e288:	4829      	ldr	r0, [pc, #164]	; (800e330 <_vfiprintf_r+0x228>)
 800e28a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e28e:	f7fe f948 	bl	800c522 <memchr>
 800e292:	2800      	cmp	r0, #0
 800e294:	d03f      	beq.n	800e316 <_vfiprintf_r+0x20e>
 800e296:	4b27      	ldr	r3, [pc, #156]	; (800e334 <_vfiprintf_r+0x22c>)
 800e298:	bb1b      	cbnz	r3, 800e2e2 <_vfiprintf_r+0x1da>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	3307      	adds	r3, #7
 800e29e:	f023 0307 	bic.w	r3, r3, #7
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a8:	443b      	add	r3, r7
 800e2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ac:	e768      	b.n	800e180 <_vfiprintf_r+0x78>
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	2001      	movs	r0, #1
 800e2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b6:	e7a6      	b.n	800e206 <_vfiprintf_r+0xfe>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f04f 0c0a 	mov.w	ip, #10
 800e2be:	4619      	mov	r1, r3
 800e2c0:	3401      	adds	r4, #1
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ca:	3a30      	subs	r2, #48	; 0x30
 800e2cc:	2a09      	cmp	r2, #9
 800e2ce:	d903      	bls.n	800e2d8 <_vfiprintf_r+0x1d0>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0c6      	beq.n	800e262 <_vfiprintf_r+0x15a>
 800e2d4:	9105      	str	r1, [sp, #20]
 800e2d6:	e7c4      	b.n	800e262 <_vfiprintf_r+0x15a>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	2301      	movs	r3, #1
 800e2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2e0:	e7f0      	b.n	800e2c4 <_vfiprintf_r+0x1bc>
 800e2e2:	ab03      	add	r3, sp, #12
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	4b13      	ldr	r3, [pc, #76]	; (800e338 <_vfiprintf_r+0x230>)
 800e2ec:	a904      	add	r1, sp, #16
 800e2ee:	f7fd fbb1 	bl	800ba54 <_printf_float>
 800e2f2:	4607      	mov	r7, r0
 800e2f4:	1c78      	adds	r0, r7, #1
 800e2f6:	d1d6      	bne.n	800e2a6 <_vfiprintf_r+0x19e>
 800e2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	d405      	bmi.n	800e30a <_vfiprintf_r+0x202>
 800e2fe:	89ab      	ldrh	r3, [r5, #12]
 800e300:	059a      	lsls	r2, r3, #22
 800e302:	d402      	bmi.n	800e30a <_vfiprintf_r+0x202>
 800e304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e306:	f7fe f90b 	bl	800c520 <__retarget_lock_release_recursive>
 800e30a:	89ab      	ldrh	r3, [r5, #12]
 800e30c:	065b      	lsls	r3, r3, #25
 800e30e:	f53f af1d 	bmi.w	800e14c <_vfiprintf_r+0x44>
 800e312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e314:	e71c      	b.n	800e150 <_vfiprintf_r+0x48>
 800e316:	ab03      	add	r3, sp, #12
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	462a      	mov	r2, r5
 800e31c:	4630      	mov	r0, r6
 800e31e:	4b06      	ldr	r3, [pc, #24]	; (800e338 <_vfiprintf_r+0x230>)
 800e320:	a904      	add	r1, sp, #16
 800e322:	f7fd fe37 	bl	800bf94 <_printf_i>
 800e326:	e7e4      	b.n	800e2f2 <_vfiprintf_r+0x1ea>
 800e328:	080110ac 	.word	0x080110ac
 800e32c:	080110b2 	.word	0x080110b2
 800e330:	080110b6 	.word	0x080110b6
 800e334:	0800ba55 	.word	0x0800ba55
 800e338:	0800e0e5 	.word	0x0800e0e5

0800e33c <__swbuf_r>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	460e      	mov	r6, r1
 800e340:	4614      	mov	r4, r2
 800e342:	4605      	mov	r5, r0
 800e344:	b118      	cbz	r0, 800e34e <__swbuf_r+0x12>
 800e346:	6a03      	ldr	r3, [r0, #32]
 800e348:	b90b      	cbnz	r3, 800e34e <__swbuf_r+0x12>
 800e34a:	f7fd ffd1 	bl	800c2f0 <__sinit>
 800e34e:	69a3      	ldr	r3, [r4, #24]
 800e350:	60a3      	str	r3, [r4, #8]
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	071a      	lsls	r2, r3, #28
 800e356:	d525      	bpl.n	800e3a4 <__swbuf_r+0x68>
 800e358:	6923      	ldr	r3, [r4, #16]
 800e35a:	b31b      	cbz	r3, 800e3a4 <__swbuf_r+0x68>
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	6922      	ldr	r2, [r4, #16]
 800e360:	b2f6      	uxtb	r6, r6
 800e362:	1a98      	subs	r0, r3, r2
 800e364:	6963      	ldr	r3, [r4, #20]
 800e366:	4637      	mov	r7, r6
 800e368:	4283      	cmp	r3, r0
 800e36a:	dc04      	bgt.n	800e376 <__swbuf_r+0x3a>
 800e36c:	4621      	mov	r1, r4
 800e36e:	4628      	mov	r0, r5
 800e370:	f7ff fdb0 	bl	800ded4 <_fflush_r>
 800e374:	b9e0      	cbnz	r0, 800e3b0 <__swbuf_r+0x74>
 800e376:	68a3      	ldr	r3, [r4, #8]
 800e378:	3b01      	subs	r3, #1
 800e37a:	60a3      	str	r3, [r4, #8]
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	6022      	str	r2, [r4, #0]
 800e382:	701e      	strb	r6, [r3, #0]
 800e384:	6962      	ldr	r2, [r4, #20]
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	429a      	cmp	r2, r3
 800e38a:	d004      	beq.n	800e396 <__swbuf_r+0x5a>
 800e38c:	89a3      	ldrh	r3, [r4, #12]
 800e38e:	07db      	lsls	r3, r3, #31
 800e390:	d506      	bpl.n	800e3a0 <__swbuf_r+0x64>
 800e392:	2e0a      	cmp	r6, #10
 800e394:	d104      	bne.n	800e3a0 <__swbuf_r+0x64>
 800e396:	4621      	mov	r1, r4
 800e398:	4628      	mov	r0, r5
 800e39a:	f7ff fd9b 	bl	800ded4 <_fflush_r>
 800e39e:	b938      	cbnz	r0, 800e3b0 <__swbuf_r+0x74>
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f000 f806 	bl	800e3b8 <__swsetup_r>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d0d5      	beq.n	800e35c <__swbuf_r+0x20>
 800e3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b4:	e7f4      	b.n	800e3a0 <__swbuf_r+0x64>
	...

0800e3b8 <__swsetup_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4b2a      	ldr	r3, [pc, #168]	; (800e464 <__swsetup_r+0xac>)
 800e3bc:	4605      	mov	r5, r0
 800e3be:	6818      	ldr	r0, [r3, #0]
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	b118      	cbz	r0, 800e3cc <__swsetup_r+0x14>
 800e3c4:	6a03      	ldr	r3, [r0, #32]
 800e3c6:	b90b      	cbnz	r3, 800e3cc <__swsetup_r+0x14>
 800e3c8:	f7fd ff92 	bl	800c2f0 <__sinit>
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d2:	0718      	lsls	r0, r3, #28
 800e3d4:	d422      	bmi.n	800e41c <__swsetup_r+0x64>
 800e3d6:	06d9      	lsls	r1, r3, #27
 800e3d8:	d407      	bmi.n	800e3ea <__swsetup_r+0x32>
 800e3da:	2309      	movs	r3, #9
 800e3dc:	602b      	str	r3, [r5, #0]
 800e3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	e034      	b.n	800e454 <__swsetup_r+0x9c>
 800e3ea:	0758      	lsls	r0, r3, #29
 800e3ec:	d512      	bpl.n	800e414 <__swsetup_r+0x5c>
 800e3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3f0:	b141      	cbz	r1, 800e404 <__swsetup_r+0x4c>
 800e3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3f6:	4299      	cmp	r1, r3
 800e3f8:	d002      	beq.n	800e400 <__swsetup_r+0x48>
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f7fe ff1c 	bl	800d238 <_free_r>
 800e400:	2300      	movs	r3, #0
 800e402:	6363      	str	r3, [r4, #52]	; 0x34
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	2300      	movs	r3, #0
 800e40e:	6063      	str	r3, [r4, #4]
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	6023      	str	r3, [r4, #0]
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	f043 0308 	orr.w	r3, r3, #8
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	b94b      	cbnz	r3, 800e434 <__swsetup_r+0x7c>
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e42a:	d003      	beq.n	800e434 <__swsetup_r+0x7c>
 800e42c:	4621      	mov	r1, r4
 800e42e:	4628      	mov	r0, r5
 800e430:	f000 f883 	bl	800e53a <__smakebuf_r>
 800e434:	89a0      	ldrh	r0, [r4, #12]
 800e436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e43a:	f010 0301 	ands.w	r3, r0, #1
 800e43e:	d00a      	beq.n	800e456 <__swsetup_r+0x9e>
 800e440:	2300      	movs	r3, #0
 800e442:	60a3      	str	r3, [r4, #8]
 800e444:	6963      	ldr	r3, [r4, #20]
 800e446:	425b      	negs	r3, r3
 800e448:	61a3      	str	r3, [r4, #24]
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	b943      	cbnz	r3, 800e460 <__swsetup_r+0xa8>
 800e44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e452:	d1c4      	bne.n	800e3de <__swsetup_r+0x26>
 800e454:	bd38      	pop	{r3, r4, r5, pc}
 800e456:	0781      	lsls	r1, r0, #30
 800e458:	bf58      	it	pl
 800e45a:	6963      	ldrpl	r3, [r4, #20]
 800e45c:	60a3      	str	r3, [r4, #8]
 800e45e:	e7f4      	b.n	800e44a <__swsetup_r+0x92>
 800e460:	2000      	movs	r0, #0
 800e462:	e7f7      	b.n	800e454 <__swsetup_r+0x9c>
 800e464:	20000110 	.word	0x20000110

0800e468 <_raise_r>:
 800e468:	291f      	cmp	r1, #31
 800e46a:	b538      	push	{r3, r4, r5, lr}
 800e46c:	4604      	mov	r4, r0
 800e46e:	460d      	mov	r5, r1
 800e470:	d904      	bls.n	800e47c <_raise_r+0x14>
 800e472:	2316      	movs	r3, #22
 800e474:	6003      	str	r3, [r0, #0]
 800e476:	f04f 30ff 	mov.w	r0, #4294967295
 800e47a:	bd38      	pop	{r3, r4, r5, pc}
 800e47c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e47e:	b112      	cbz	r2, 800e486 <_raise_r+0x1e>
 800e480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e484:	b94b      	cbnz	r3, 800e49a <_raise_r+0x32>
 800e486:	4620      	mov	r0, r4
 800e488:	f000 f830 	bl	800e4ec <_getpid_r>
 800e48c:	462a      	mov	r2, r5
 800e48e:	4601      	mov	r1, r0
 800e490:	4620      	mov	r0, r4
 800e492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e496:	f000 b817 	b.w	800e4c8 <_kill_r>
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d00a      	beq.n	800e4b4 <_raise_r+0x4c>
 800e49e:	1c59      	adds	r1, r3, #1
 800e4a0:	d103      	bne.n	800e4aa <_raise_r+0x42>
 800e4a2:	2316      	movs	r3, #22
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	2001      	movs	r0, #1
 800e4a8:	e7e7      	b.n	800e47a <_raise_r+0x12>
 800e4aa:	2400      	movs	r4, #0
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4b2:	4798      	blx	r3
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	e7e0      	b.n	800e47a <_raise_r+0x12>

0800e4b8 <raise>:
 800e4b8:	4b02      	ldr	r3, [pc, #8]	; (800e4c4 <raise+0xc>)
 800e4ba:	4601      	mov	r1, r0
 800e4bc:	6818      	ldr	r0, [r3, #0]
 800e4be:	f7ff bfd3 	b.w	800e468 <_raise_r>
 800e4c2:	bf00      	nop
 800e4c4:	20000110 	.word	0x20000110

0800e4c8 <_kill_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	4d06      	ldr	r5, [pc, #24]	; (800e4e8 <_kill_r+0x20>)
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	4608      	mov	r0, r1
 800e4d2:	4611      	mov	r1, r2
 800e4d4:	602b      	str	r3, [r5, #0]
 800e4d6:	f7f9 f8da 	bl	800768e <_kill>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	d102      	bne.n	800e4e4 <_kill_r+0x1c>
 800e4de:	682b      	ldr	r3, [r5, #0]
 800e4e0:	b103      	cbz	r3, 800e4e4 <_kill_r+0x1c>
 800e4e2:	6023      	str	r3, [r4, #0]
 800e4e4:	bd38      	pop	{r3, r4, r5, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20001c64 	.word	0x20001c64

0800e4ec <_getpid_r>:
 800e4ec:	f7f9 b8c8 	b.w	8007680 <_getpid>

0800e4f0 <__swhatbuf_r>:
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f8:	4615      	mov	r5, r2
 800e4fa:	2900      	cmp	r1, #0
 800e4fc:	461e      	mov	r6, r3
 800e4fe:	b096      	sub	sp, #88	; 0x58
 800e500:	da0c      	bge.n	800e51c <__swhatbuf_r+0x2c>
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	2100      	movs	r1, #0
 800e506:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e50a:	bf0c      	ite	eq
 800e50c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e510:	2340      	movne	r3, #64	; 0x40
 800e512:	2000      	movs	r0, #0
 800e514:	6031      	str	r1, [r6, #0]
 800e516:	602b      	str	r3, [r5, #0]
 800e518:	b016      	add	sp, #88	; 0x58
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
 800e51c:	466a      	mov	r2, sp
 800e51e:	f000 f849 	bl	800e5b4 <_fstat_r>
 800e522:	2800      	cmp	r0, #0
 800e524:	dbed      	blt.n	800e502 <__swhatbuf_r+0x12>
 800e526:	9901      	ldr	r1, [sp, #4]
 800e528:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e52c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e530:	4259      	negs	r1, r3
 800e532:	4159      	adcs	r1, r3
 800e534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e538:	e7eb      	b.n	800e512 <__swhatbuf_r+0x22>

0800e53a <__smakebuf_r>:
 800e53a:	898b      	ldrh	r3, [r1, #12]
 800e53c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e53e:	079d      	lsls	r5, r3, #30
 800e540:	4606      	mov	r6, r0
 800e542:	460c      	mov	r4, r1
 800e544:	d507      	bpl.n	800e556 <__smakebuf_r+0x1c>
 800e546:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	6123      	str	r3, [r4, #16]
 800e54e:	2301      	movs	r3, #1
 800e550:	6163      	str	r3, [r4, #20]
 800e552:	b002      	add	sp, #8
 800e554:	bd70      	pop	{r4, r5, r6, pc}
 800e556:	466a      	mov	r2, sp
 800e558:	ab01      	add	r3, sp, #4
 800e55a:	f7ff ffc9 	bl	800e4f0 <__swhatbuf_r>
 800e55e:	9900      	ldr	r1, [sp, #0]
 800e560:	4605      	mov	r5, r0
 800e562:	4630      	mov	r0, r6
 800e564:	f7fe fed8 	bl	800d318 <_malloc_r>
 800e568:	b948      	cbnz	r0, 800e57e <__smakebuf_r+0x44>
 800e56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e56e:	059a      	lsls	r2, r3, #22
 800e570:	d4ef      	bmi.n	800e552 <__smakebuf_r+0x18>
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	e7e3      	b.n	800e546 <__smakebuf_r+0xc>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	6020      	str	r0, [r4, #0]
 800e582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	9b00      	ldr	r3, [sp, #0]
 800e58a:	6120      	str	r0, [r4, #16]
 800e58c:	6163      	str	r3, [r4, #20]
 800e58e:	9b01      	ldr	r3, [sp, #4]
 800e590:	b15b      	cbz	r3, 800e5aa <__smakebuf_r+0x70>
 800e592:	4630      	mov	r0, r6
 800e594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e598:	f000 f81e 	bl	800e5d8 <_isatty_r>
 800e59c:	b128      	cbz	r0, 800e5aa <__smakebuf_r+0x70>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	f023 0303 	bic.w	r3, r3, #3
 800e5a4:	f043 0301 	orr.w	r3, r3, #1
 800e5a8:	81a3      	strh	r3, [r4, #12]
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	431d      	orrs	r5, r3
 800e5ae:	81a5      	strh	r5, [r4, #12]
 800e5b0:	e7cf      	b.n	800e552 <__smakebuf_r+0x18>
	...

0800e5b4 <_fstat_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	4d06      	ldr	r5, [pc, #24]	; (800e5d4 <_fstat_r+0x20>)
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	4611      	mov	r1, r2
 800e5c0:	602b      	str	r3, [r5, #0]
 800e5c2:	f7f9 f8c2 	bl	800774a <_fstat>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	d102      	bne.n	800e5d0 <_fstat_r+0x1c>
 800e5ca:	682b      	ldr	r3, [r5, #0]
 800e5cc:	b103      	cbz	r3, 800e5d0 <_fstat_r+0x1c>
 800e5ce:	6023      	str	r3, [r4, #0]
 800e5d0:	bd38      	pop	{r3, r4, r5, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20001c64 	.word	0x20001c64

0800e5d8 <_isatty_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	2300      	movs	r3, #0
 800e5dc:	4d05      	ldr	r5, [pc, #20]	; (800e5f4 <_isatty_r+0x1c>)
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7f9 f8c0 	bl	8007768 <_isatty>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_isatty_r+0x1a>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_isatty_r+0x1a>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	20001c64 	.word	0x20001c64

0800e5f8 <pow>:
 800e5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	461d      	mov	r5, r3
 800e600:	4680      	mov	r8, r0
 800e602:	4689      	mov	r9, r1
 800e604:	f000 f868 	bl	800e6d8 <__ieee754_pow>
 800e608:	4622      	mov	r2, r4
 800e60a:	4606      	mov	r6, r0
 800e60c:	460f      	mov	r7, r1
 800e60e:	462b      	mov	r3, r5
 800e610:	4620      	mov	r0, r4
 800e612:	4629      	mov	r1, r5
 800e614:	f7f2 f9fa 	bl	8000a0c <__aeabi_dcmpun>
 800e618:	bbc8      	cbnz	r0, 800e68e <pow+0x96>
 800e61a:	2200      	movs	r2, #0
 800e61c:	2300      	movs	r3, #0
 800e61e:	4640      	mov	r0, r8
 800e620:	4649      	mov	r1, r9
 800e622:	f7f2 f9c1 	bl	80009a8 <__aeabi_dcmpeq>
 800e626:	b1b8      	cbz	r0, 800e658 <pow+0x60>
 800e628:	2200      	movs	r2, #0
 800e62a:	2300      	movs	r3, #0
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	f7f2 f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 800e634:	2800      	cmp	r0, #0
 800e636:	d141      	bne.n	800e6bc <pow+0xc4>
 800e638:	4620      	mov	r0, r4
 800e63a:	4629      	mov	r1, r5
 800e63c:	f000 f844 	bl	800e6c8 <finite>
 800e640:	b328      	cbz	r0, 800e68e <pow+0x96>
 800e642:	2200      	movs	r2, #0
 800e644:	2300      	movs	r3, #0
 800e646:	4620      	mov	r0, r4
 800e648:	4629      	mov	r1, r5
 800e64a:	f7f2 f9b7 	bl	80009bc <__aeabi_dcmplt>
 800e64e:	b1f0      	cbz	r0, 800e68e <pow+0x96>
 800e650:	f7fd ff3a 	bl	800c4c8 <__errno>
 800e654:	2322      	movs	r3, #34	; 0x22
 800e656:	e019      	b.n	800e68c <pow+0x94>
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	f000 f834 	bl	800e6c8 <finite>
 800e660:	b9c8      	cbnz	r0, 800e696 <pow+0x9e>
 800e662:	4640      	mov	r0, r8
 800e664:	4649      	mov	r1, r9
 800e666:	f000 f82f 	bl	800e6c8 <finite>
 800e66a:	b1a0      	cbz	r0, 800e696 <pow+0x9e>
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f000 f82a 	bl	800e6c8 <finite>
 800e674:	b178      	cbz	r0, 800e696 <pow+0x9e>
 800e676:	4632      	mov	r2, r6
 800e678:	463b      	mov	r3, r7
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f2 f9c5 	bl	8000a0c <__aeabi_dcmpun>
 800e682:	2800      	cmp	r0, #0
 800e684:	d0e4      	beq.n	800e650 <pow+0x58>
 800e686:	f7fd ff1f 	bl	800c4c8 <__errno>
 800e68a:	2321      	movs	r3, #33	; 0x21
 800e68c:	6003      	str	r3, [r0, #0]
 800e68e:	4630      	mov	r0, r6
 800e690:	4639      	mov	r1, r7
 800e692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e696:	2200      	movs	r2, #0
 800e698:	2300      	movs	r3, #0
 800e69a:	4630      	mov	r0, r6
 800e69c:	4639      	mov	r1, r7
 800e69e:	f7f2 f983 	bl	80009a8 <__aeabi_dcmpeq>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0f3      	beq.n	800e68e <pow+0x96>
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	f000 f80d 	bl	800e6c8 <finite>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d0ed      	beq.n	800e68e <pow+0x96>
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	4629      	mov	r1, r5
 800e6b6:	f000 f807 	bl	800e6c8 <finite>
 800e6ba:	e7c8      	b.n	800e64e <pow+0x56>
 800e6bc:	2600      	movs	r6, #0
 800e6be:	4f01      	ldr	r7, [pc, #4]	; (800e6c4 <pow+0xcc>)
 800e6c0:	e7e5      	b.n	800e68e <pow+0x96>
 800e6c2:	bf00      	nop
 800e6c4:	3ff00000 	.word	0x3ff00000

0800e6c8 <finite>:
 800e6c8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e6cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6d0:	0fc0      	lsrs	r0, r0, #31
 800e6d2:	4770      	bx	lr
 800e6d4:	0000      	movs	r0, r0
	...

0800e6d8 <__ieee754_pow>:
 800e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	b093      	sub	sp, #76	; 0x4c
 800e6de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6e2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800e6e6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e6ea:	4689      	mov	r9, r1
 800e6ec:	ea56 0102 	orrs.w	r1, r6, r2
 800e6f0:	4680      	mov	r8, r0
 800e6f2:	d111      	bne.n	800e718 <__ieee754_pow+0x40>
 800e6f4:	1803      	adds	r3, r0, r0
 800e6f6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800e6fa:	4152      	adcs	r2, r2
 800e6fc:	4299      	cmp	r1, r3
 800e6fe:	4b82      	ldr	r3, [pc, #520]	; (800e908 <__ieee754_pow+0x230>)
 800e700:	4193      	sbcs	r3, r2
 800e702:	f080 84ba 	bcs.w	800f07a <__ieee754_pow+0x9a2>
 800e706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e70a:	4640      	mov	r0, r8
 800e70c:	4649      	mov	r1, r9
 800e70e:	f7f1 fd2d 	bl	800016c <__adddf3>
 800e712:	4683      	mov	fp, r0
 800e714:	468c      	mov	ip, r1
 800e716:	e06f      	b.n	800e7f8 <__ieee754_pow+0x120>
 800e718:	4b7c      	ldr	r3, [pc, #496]	; (800e90c <__ieee754_pow+0x234>)
 800e71a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800e71e:	429c      	cmp	r4, r3
 800e720:	464d      	mov	r5, r9
 800e722:	4682      	mov	sl, r0
 800e724:	dc06      	bgt.n	800e734 <__ieee754_pow+0x5c>
 800e726:	d101      	bne.n	800e72c <__ieee754_pow+0x54>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d1ec      	bne.n	800e706 <__ieee754_pow+0x2e>
 800e72c:	429e      	cmp	r6, r3
 800e72e:	dc01      	bgt.n	800e734 <__ieee754_pow+0x5c>
 800e730:	d10f      	bne.n	800e752 <__ieee754_pow+0x7a>
 800e732:	b172      	cbz	r2, 800e752 <__ieee754_pow+0x7a>
 800e734:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e738:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e73c:	ea55 050a 	orrs.w	r5, r5, sl
 800e740:	d1e1      	bne.n	800e706 <__ieee754_pow+0x2e>
 800e742:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e746:	18db      	adds	r3, r3, r3
 800e748:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e74c:	4152      	adcs	r2, r2
 800e74e:	429d      	cmp	r5, r3
 800e750:	e7d5      	b.n	800e6fe <__ieee754_pow+0x26>
 800e752:	2d00      	cmp	r5, #0
 800e754:	da39      	bge.n	800e7ca <__ieee754_pow+0xf2>
 800e756:	4b6e      	ldr	r3, [pc, #440]	; (800e910 <__ieee754_pow+0x238>)
 800e758:	429e      	cmp	r6, r3
 800e75a:	dc52      	bgt.n	800e802 <__ieee754_pow+0x12a>
 800e75c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e760:	429e      	cmp	r6, r3
 800e762:	f340 849d 	ble.w	800f0a0 <__ieee754_pow+0x9c8>
 800e766:	1533      	asrs	r3, r6, #20
 800e768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e76c:	2b14      	cmp	r3, #20
 800e76e:	dd0f      	ble.n	800e790 <__ieee754_pow+0xb8>
 800e770:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e774:	fa22 f103 	lsr.w	r1, r2, r3
 800e778:	fa01 f303 	lsl.w	r3, r1, r3
 800e77c:	4293      	cmp	r3, r2
 800e77e:	f040 848f 	bne.w	800f0a0 <__ieee754_pow+0x9c8>
 800e782:	f001 0101 	and.w	r1, r1, #1
 800e786:	f1c1 0302 	rsb	r3, r1, #2
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	b182      	cbz	r2, 800e7b0 <__ieee754_pow+0xd8>
 800e78e:	e05d      	b.n	800e84c <__ieee754_pow+0x174>
 800e790:	2a00      	cmp	r2, #0
 800e792:	d159      	bne.n	800e848 <__ieee754_pow+0x170>
 800e794:	f1c3 0314 	rsb	r3, r3, #20
 800e798:	fa46 f103 	asr.w	r1, r6, r3
 800e79c:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a0:	42b3      	cmp	r3, r6
 800e7a2:	f040 847a 	bne.w	800f09a <__ieee754_pow+0x9c2>
 800e7a6:	f001 0101 	and.w	r1, r1, #1
 800e7aa:	f1c1 0302 	rsb	r3, r1, #2
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4b58      	ldr	r3, [pc, #352]	; (800e914 <__ieee754_pow+0x23c>)
 800e7b2:	429e      	cmp	r6, r3
 800e7b4:	d132      	bne.n	800e81c <__ieee754_pow+0x144>
 800e7b6:	2f00      	cmp	r7, #0
 800e7b8:	f280 846b 	bge.w	800f092 <__ieee754_pow+0x9ba>
 800e7bc:	4642      	mov	r2, r8
 800e7be:	464b      	mov	r3, r9
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	4954      	ldr	r1, [pc, #336]	; (800e914 <__ieee754_pow+0x23c>)
 800e7c4:	f7f1 ffb2 	bl	800072c <__aeabi_ddiv>
 800e7c8:	e7a3      	b.n	800e712 <__ieee754_pow+0x3a>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	2a00      	cmp	r2, #0
 800e7d0:	d13c      	bne.n	800e84c <__ieee754_pow+0x174>
 800e7d2:	4b4e      	ldr	r3, [pc, #312]	; (800e90c <__ieee754_pow+0x234>)
 800e7d4:	429e      	cmp	r6, r3
 800e7d6:	d1eb      	bne.n	800e7b0 <__ieee754_pow+0xd8>
 800e7d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e7dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800e7e4:	f000 8449 	beq.w	800f07a <__ieee754_pow+0x9a2>
 800e7e8:	4b4b      	ldr	r3, [pc, #300]	; (800e918 <__ieee754_pow+0x240>)
 800e7ea:	429c      	cmp	r4, r3
 800e7ec:	dd0b      	ble.n	800e806 <__ieee754_pow+0x12e>
 800e7ee:	2f00      	cmp	r7, #0
 800e7f0:	f2c0 8449 	blt.w	800f086 <__ieee754_pow+0x9ae>
 800e7f4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e7f8:	4658      	mov	r0, fp
 800e7fa:	4661      	mov	r1, ip
 800e7fc:	b013      	add	sp, #76	; 0x4c
 800e7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e802:	2302      	movs	r3, #2
 800e804:	e7e2      	b.n	800e7cc <__ieee754_pow+0xf4>
 800e806:	2f00      	cmp	r7, #0
 800e808:	f04f 0b00 	mov.w	fp, #0
 800e80c:	f04f 0c00 	mov.w	ip, #0
 800e810:	daf2      	bge.n	800e7f8 <__ieee754_pow+0x120>
 800e812:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e816:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e81a:	e7ed      	b.n	800e7f8 <__ieee754_pow+0x120>
 800e81c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e820:	d106      	bne.n	800e830 <__ieee754_pow+0x158>
 800e822:	4642      	mov	r2, r8
 800e824:	464b      	mov	r3, r9
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7f1 fe55 	bl	80004d8 <__aeabi_dmul>
 800e82e:	e770      	b.n	800e712 <__ieee754_pow+0x3a>
 800e830:	4b3a      	ldr	r3, [pc, #232]	; (800e91c <__ieee754_pow+0x244>)
 800e832:	429f      	cmp	r7, r3
 800e834:	d10a      	bne.n	800e84c <__ieee754_pow+0x174>
 800e836:	2d00      	cmp	r5, #0
 800e838:	db08      	blt.n	800e84c <__ieee754_pow+0x174>
 800e83a:	4640      	mov	r0, r8
 800e83c:	4649      	mov	r1, r9
 800e83e:	b013      	add	sp, #76	; 0x4c
 800e840:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	f000 bd0a 	b.w	800f25c <__ieee754_sqrt>
 800e848:	2300      	movs	r3, #0
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	4640      	mov	r0, r8
 800e84e:	4649      	mov	r1, r9
 800e850:	f000 fc58 	bl	800f104 <fabs>
 800e854:	4683      	mov	fp, r0
 800e856:	468c      	mov	ip, r1
 800e858:	f1ba 0f00 	cmp.w	sl, #0
 800e85c:	d128      	bne.n	800e8b0 <__ieee754_pow+0x1d8>
 800e85e:	b124      	cbz	r4, 800e86a <__ieee754_pow+0x192>
 800e860:	4b2c      	ldr	r3, [pc, #176]	; (800e914 <__ieee754_pow+0x23c>)
 800e862:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e866:	429a      	cmp	r2, r3
 800e868:	d122      	bne.n	800e8b0 <__ieee754_pow+0x1d8>
 800e86a:	2f00      	cmp	r7, #0
 800e86c:	da07      	bge.n	800e87e <__ieee754_pow+0x1a6>
 800e86e:	465a      	mov	r2, fp
 800e870:	4663      	mov	r3, ip
 800e872:	2000      	movs	r0, #0
 800e874:	4927      	ldr	r1, [pc, #156]	; (800e914 <__ieee754_pow+0x23c>)
 800e876:	f7f1 ff59 	bl	800072c <__aeabi_ddiv>
 800e87a:	4683      	mov	fp, r0
 800e87c:	468c      	mov	ip, r1
 800e87e:	2d00      	cmp	r5, #0
 800e880:	daba      	bge.n	800e7f8 <__ieee754_pow+0x120>
 800e882:	9b00      	ldr	r3, [sp, #0]
 800e884:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e888:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e88c:	431c      	orrs	r4, r3
 800e88e:	d108      	bne.n	800e8a2 <__ieee754_pow+0x1ca>
 800e890:	465a      	mov	r2, fp
 800e892:	4663      	mov	r3, ip
 800e894:	4658      	mov	r0, fp
 800e896:	4661      	mov	r1, ip
 800e898:	f7f1 fc66 	bl	8000168 <__aeabi_dsub>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	e790      	b.n	800e7c4 <__ieee754_pow+0xec>
 800e8a2:	9b00      	ldr	r3, [sp, #0]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d1a7      	bne.n	800e7f8 <__ieee754_pow+0x120>
 800e8a8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e8ac:	469c      	mov	ip, r3
 800e8ae:	e7a3      	b.n	800e7f8 <__ieee754_pow+0x120>
 800e8b0:	0feb      	lsrs	r3, r5, #31
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	930c      	str	r3, [sp, #48]	; 0x30
 800e8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8b8:	9b00      	ldr	r3, [sp, #0]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	d104      	bne.n	800e8c8 <__ieee754_pow+0x1f0>
 800e8be:	4642      	mov	r2, r8
 800e8c0:	464b      	mov	r3, r9
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	4649      	mov	r1, r9
 800e8c6:	e7e7      	b.n	800e898 <__ieee754_pow+0x1c0>
 800e8c8:	4b15      	ldr	r3, [pc, #84]	; (800e920 <__ieee754_pow+0x248>)
 800e8ca:	429e      	cmp	r6, r3
 800e8cc:	f340 80f6 	ble.w	800eabc <__ieee754_pow+0x3e4>
 800e8d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e8d4:	429e      	cmp	r6, r3
 800e8d6:	4b10      	ldr	r3, [pc, #64]	; (800e918 <__ieee754_pow+0x240>)
 800e8d8:	dd09      	ble.n	800e8ee <__ieee754_pow+0x216>
 800e8da:	429c      	cmp	r4, r3
 800e8dc:	dc0c      	bgt.n	800e8f8 <__ieee754_pow+0x220>
 800e8de:	2f00      	cmp	r7, #0
 800e8e0:	da0c      	bge.n	800e8fc <__ieee754_pow+0x224>
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	b013      	add	sp, #76	; 0x4c
 800e8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ea:	f000 bcb2 	b.w	800f252 <__math_oflow>
 800e8ee:	429c      	cmp	r4, r3
 800e8f0:	dbf5      	blt.n	800e8de <__ieee754_pow+0x206>
 800e8f2:	4b08      	ldr	r3, [pc, #32]	; (800e914 <__ieee754_pow+0x23c>)
 800e8f4:	429c      	cmp	r4, r3
 800e8f6:	dd15      	ble.n	800e924 <__ieee754_pow+0x24c>
 800e8f8:	2f00      	cmp	r7, #0
 800e8fa:	dcf2      	bgt.n	800e8e2 <__ieee754_pow+0x20a>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	b013      	add	sp, #76	; 0x4c
 800e900:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	f000 bca0 	b.w	800f248 <__math_uflow>
 800e908:	fff00000 	.word	0xfff00000
 800e90c:	7ff00000 	.word	0x7ff00000
 800e910:	433fffff 	.word	0x433fffff
 800e914:	3ff00000 	.word	0x3ff00000
 800e918:	3fefffff 	.word	0x3fefffff
 800e91c:	3fe00000 	.word	0x3fe00000
 800e920:	41e00000 	.word	0x41e00000
 800e924:	4661      	mov	r1, ip
 800e926:	2200      	movs	r2, #0
 800e928:	4658      	mov	r0, fp
 800e92a:	4b5f      	ldr	r3, [pc, #380]	; (800eaa8 <__ieee754_pow+0x3d0>)
 800e92c:	f7f1 fc1c 	bl	8000168 <__aeabi_dsub>
 800e930:	a355      	add	r3, pc, #340	; (adr r3, 800ea88 <__ieee754_pow+0x3b0>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	4604      	mov	r4, r0
 800e938:	460d      	mov	r5, r1
 800e93a:	f7f1 fdcd 	bl	80004d8 <__aeabi_dmul>
 800e93e:	a354      	add	r3, pc, #336	; (adr r3, 800ea90 <__ieee754_pow+0x3b8>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	4606      	mov	r6, r0
 800e946:	460f      	mov	r7, r1
 800e948:	4620      	mov	r0, r4
 800e94a:	4629      	mov	r1, r5
 800e94c:	f7f1 fdc4 	bl	80004d8 <__aeabi_dmul>
 800e950:	2200      	movs	r2, #0
 800e952:	4682      	mov	sl, r0
 800e954:	468b      	mov	fp, r1
 800e956:	4620      	mov	r0, r4
 800e958:	4629      	mov	r1, r5
 800e95a:	4b54      	ldr	r3, [pc, #336]	; (800eaac <__ieee754_pow+0x3d4>)
 800e95c:	f7f1 fdbc 	bl	80004d8 <__aeabi_dmul>
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	a14c      	add	r1, pc, #304	; (adr r1, 800ea98 <__ieee754_pow+0x3c0>)
 800e966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e96a:	f7f1 fbfd 	bl	8000168 <__aeabi_dsub>
 800e96e:	4622      	mov	r2, r4
 800e970:	462b      	mov	r3, r5
 800e972:	f7f1 fdb1 	bl	80004d8 <__aeabi_dmul>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	2000      	movs	r0, #0
 800e97c:	494c      	ldr	r1, [pc, #304]	; (800eab0 <__ieee754_pow+0x3d8>)
 800e97e:	f7f1 fbf3 	bl	8000168 <__aeabi_dsub>
 800e982:	4622      	mov	r2, r4
 800e984:	462b      	mov	r3, r5
 800e986:	4680      	mov	r8, r0
 800e988:	4689      	mov	r9, r1
 800e98a:	4620      	mov	r0, r4
 800e98c:	4629      	mov	r1, r5
 800e98e:	f7f1 fda3 	bl	80004d8 <__aeabi_dmul>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f1 fd9d 	bl	80004d8 <__aeabi_dmul>
 800e99e:	a340      	add	r3, pc, #256	; (adr r3, 800eaa0 <__ieee754_pow+0x3c8>)
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f7f1 fd98 	bl	80004d8 <__aeabi_dmul>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4650      	mov	r0, sl
 800e9ae:	4659      	mov	r1, fp
 800e9b0:	f7f1 fbda 	bl	8000168 <__aeabi_dsub>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	4630      	mov	r0, r6
 800e9be:	4639      	mov	r1, r7
 800e9c0:	f7f1 fbd4 	bl	800016c <__adddf3>
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	463b      	mov	r3, r7
 800e9ca:	4682      	mov	sl, r0
 800e9cc:	468b      	mov	fp, r1
 800e9ce:	f7f1 fbcb 	bl	8000168 <__aeabi_dsub>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	4629      	mov	r1, r5
 800e9da:	f7f1 fbc5 	bl	8000168 <__aeabi_dsub>
 800e9de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e9e2:	9b00      	ldr	r3, [sp, #0]
 800e9e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	f04f 0600 	mov.w	r6, #0
 800e9ee:	f04f 0200 	mov.w	r2, #0
 800e9f2:	bf0c      	ite	eq
 800e9f4:	4b2f      	ldreq	r3, [pc, #188]	; (800eab4 <__ieee754_pow+0x3dc>)
 800e9f6:	4b2c      	ldrne	r3, [pc, #176]	; (800eaa8 <__ieee754_pow+0x3d0>)
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea00:	e9cd 2300 	strd	r2, r3, [sp]
 800ea04:	4632      	mov	r2, r6
 800ea06:	463b      	mov	r3, r7
 800ea08:	f7f1 fbae 	bl	8000168 <__aeabi_dsub>
 800ea0c:	4652      	mov	r2, sl
 800ea0e:	465b      	mov	r3, fp
 800ea10:	f7f1 fd62 	bl	80004d8 <__aeabi_dmul>
 800ea14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea18:	4680      	mov	r8, r0
 800ea1a:	4689      	mov	r9, r1
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4629      	mov	r1, r5
 800ea20:	f7f1 fd5a 	bl	80004d8 <__aeabi_dmul>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4640      	mov	r0, r8
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	f7f1 fb9e 	bl	800016c <__adddf3>
 800ea30:	4632      	mov	r2, r6
 800ea32:	463b      	mov	r3, r7
 800ea34:	4680      	mov	r8, r0
 800ea36:	4689      	mov	r9, r1
 800ea38:	4650      	mov	r0, sl
 800ea3a:	4659      	mov	r1, fp
 800ea3c:	f7f1 fd4c 	bl	80004d8 <__aeabi_dmul>
 800ea40:	4604      	mov	r4, r0
 800ea42:	460d      	mov	r5, r1
 800ea44:	460b      	mov	r3, r1
 800ea46:	4602      	mov	r2, r0
 800ea48:	4649      	mov	r1, r9
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ea50:	f7f1 fb8c 	bl	800016c <__adddf3>
 800ea54:	4b18      	ldr	r3, [pc, #96]	; (800eab8 <__ieee754_pow+0x3e0>)
 800ea56:	4682      	mov	sl, r0
 800ea58:	4299      	cmp	r1, r3
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	460e      	mov	r6, r1
 800ea5e:	f340 82e7 	ble.w	800f030 <__ieee754_pow+0x958>
 800ea62:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ea66:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ea6a:	4303      	orrs	r3, r0
 800ea6c:	f000 81e2 	beq.w	800ee34 <__ieee754_pow+0x75c>
 800ea70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	f7f1 ffa0 	bl	80009bc <__aeabi_dcmplt>
 800ea7c:	3800      	subs	r0, #0
 800ea7e:	bf18      	it	ne
 800ea80:	2001      	movne	r0, #1
 800ea82:	e72f      	b.n	800e8e4 <__ieee754_pow+0x20c>
 800ea84:	f3af 8000 	nop.w
 800ea88:	60000000 	.word	0x60000000
 800ea8c:	3ff71547 	.word	0x3ff71547
 800ea90:	f85ddf44 	.word	0xf85ddf44
 800ea94:	3e54ae0b 	.word	0x3e54ae0b
 800ea98:	55555555 	.word	0x55555555
 800ea9c:	3fd55555 	.word	0x3fd55555
 800eaa0:	652b82fe 	.word	0x652b82fe
 800eaa4:	3ff71547 	.word	0x3ff71547
 800eaa8:	3ff00000 	.word	0x3ff00000
 800eaac:	3fd00000 	.word	0x3fd00000
 800eab0:	3fe00000 	.word	0x3fe00000
 800eab4:	bff00000 	.word	0xbff00000
 800eab8:	408fffff 	.word	0x408fffff
 800eabc:	4bd4      	ldr	r3, [pc, #848]	; (800ee10 <__ieee754_pow+0x738>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	402b      	ands	r3, r5
 800eac2:	b943      	cbnz	r3, 800ead6 <__ieee754_pow+0x3fe>
 800eac4:	4658      	mov	r0, fp
 800eac6:	4661      	mov	r1, ip
 800eac8:	4bd2      	ldr	r3, [pc, #840]	; (800ee14 <__ieee754_pow+0x73c>)
 800eaca:	f7f1 fd05 	bl	80004d8 <__aeabi_dmul>
 800eace:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ead2:	4683      	mov	fp, r0
 800ead4:	460c      	mov	r4, r1
 800ead6:	1523      	asrs	r3, r4, #20
 800ead8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eadc:	4413      	add	r3, r2
 800eade:	930b      	str	r3, [sp, #44]	; 0x2c
 800eae0:	4bcd      	ldr	r3, [pc, #820]	; (800ee18 <__ieee754_pow+0x740>)
 800eae2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eae6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eaea:	429c      	cmp	r4, r3
 800eaec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eaf0:	dd08      	ble.n	800eb04 <__ieee754_pow+0x42c>
 800eaf2:	4bca      	ldr	r3, [pc, #808]	; (800ee1c <__ieee754_pow+0x744>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	f340 8164 	ble.w	800edc2 <__ieee754_pow+0x6ea>
 800eafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eafc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb00:	3301      	adds	r3, #1
 800eb02:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb04:	2600      	movs	r6, #0
 800eb06:	00f3      	lsls	r3, r6, #3
 800eb08:	930d      	str	r3, [sp, #52]	; 0x34
 800eb0a:	4bc5      	ldr	r3, [pc, #788]	; (800ee20 <__ieee754_pow+0x748>)
 800eb0c:	4658      	mov	r0, fp
 800eb0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb16:	4629      	mov	r1, r5
 800eb18:	461a      	mov	r2, r3
 800eb1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800eb1e:	4623      	mov	r3, r4
 800eb20:	f7f1 fb22 	bl	8000168 <__aeabi_dsub>
 800eb24:	46da      	mov	sl, fp
 800eb26:	462b      	mov	r3, r5
 800eb28:	4652      	mov	r2, sl
 800eb2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800eb2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb32:	f7f1 fb1b 	bl	800016c <__adddf3>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	49b9      	ldr	r1, [pc, #740]	; (800ee24 <__ieee754_pow+0x74c>)
 800eb3e:	f7f1 fdf5 	bl	800072c <__aeabi_ddiv>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eb4e:	f7f1 fcc3 	bl	80004d8 <__aeabi_dmul>
 800eb52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb56:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800eb5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	2200      	movs	r2, #0
 800eb62:	46ab      	mov	fp, r5
 800eb64:	106d      	asrs	r5, r5, #1
 800eb66:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eb6a:	9304      	str	r3, [sp, #16]
 800eb6c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eb70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800eb74:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800eb78:	4640      	mov	r0, r8
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	4614      	mov	r4, r2
 800eb7e:	461d      	mov	r5, r3
 800eb80:	f7f1 fcaa 	bl	80004d8 <__aeabi_dmul>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eb8c:	f7f1 faec 	bl	8000168 <__aeabi_dsub>
 800eb90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	4620      	mov	r0, r4
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	f7f1 fae4 	bl	8000168 <__aeabi_dsub>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4650      	mov	r0, sl
 800eba6:	4659      	mov	r1, fp
 800eba8:	f7f1 fade 	bl	8000168 <__aeabi_dsub>
 800ebac:	4642      	mov	r2, r8
 800ebae:	464b      	mov	r3, r9
 800ebb0:	f7f1 fc92 	bl	80004d8 <__aeabi_dmul>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4630      	mov	r0, r6
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7f1 fad4 	bl	8000168 <__aeabi_dsub>
 800ebc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebc4:	f7f1 fc88 	bl	80004d8 <__aeabi_dmul>
 800ebc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebcc:	4682      	mov	sl, r0
 800ebce:	468b      	mov	fp, r1
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	f7f1 fc80 	bl	80004d8 <__aeabi_dmul>
 800ebd8:	a37b      	add	r3, pc, #492	; (adr r3, 800edc8 <__ieee754_pow+0x6f0>)
 800ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebde:	4604      	mov	r4, r0
 800ebe0:	460d      	mov	r5, r1
 800ebe2:	f7f1 fc79 	bl	80004d8 <__aeabi_dmul>
 800ebe6:	a37a      	add	r3, pc, #488	; (adr r3, 800edd0 <__ieee754_pow+0x6f8>)
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f7f1 fabe 	bl	800016c <__adddf3>
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	462b      	mov	r3, r5
 800ebf4:	f7f1 fc70 	bl	80004d8 <__aeabi_dmul>
 800ebf8:	a377      	add	r3, pc, #476	; (adr r3, 800edd8 <__ieee754_pow+0x700>)
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	f7f1 fab5 	bl	800016c <__adddf3>
 800ec02:	4622      	mov	r2, r4
 800ec04:	462b      	mov	r3, r5
 800ec06:	f7f1 fc67 	bl	80004d8 <__aeabi_dmul>
 800ec0a:	a375      	add	r3, pc, #468	; (adr r3, 800ede0 <__ieee754_pow+0x708>)
 800ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec10:	f7f1 faac 	bl	800016c <__adddf3>
 800ec14:	4622      	mov	r2, r4
 800ec16:	462b      	mov	r3, r5
 800ec18:	f7f1 fc5e 	bl	80004d8 <__aeabi_dmul>
 800ec1c:	a372      	add	r3, pc, #456	; (adr r3, 800ede8 <__ieee754_pow+0x710>)
 800ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec22:	f7f1 faa3 	bl	800016c <__adddf3>
 800ec26:	4622      	mov	r2, r4
 800ec28:	462b      	mov	r3, r5
 800ec2a:	f7f1 fc55 	bl	80004d8 <__aeabi_dmul>
 800ec2e:	a370      	add	r3, pc, #448	; (adr r3, 800edf0 <__ieee754_pow+0x718>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	f7f1 fa9a 	bl	800016c <__adddf3>
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	462b      	mov	r3, r5
 800ec40:	4620      	mov	r0, r4
 800ec42:	4629      	mov	r1, r5
 800ec44:	f7f1 fc48 	bl	80004d8 <__aeabi_dmul>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	4639      	mov	r1, r7
 800ec50:	f7f1 fc42 	bl	80004d8 <__aeabi_dmul>
 800ec54:	4604      	mov	r4, r0
 800ec56:	460d      	mov	r5, r1
 800ec58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec5c:	4642      	mov	r2, r8
 800ec5e:	464b      	mov	r3, r9
 800ec60:	f7f1 fa84 	bl	800016c <__adddf3>
 800ec64:	4652      	mov	r2, sl
 800ec66:	465b      	mov	r3, fp
 800ec68:	f7f1 fc36 	bl	80004d8 <__aeabi_dmul>
 800ec6c:	4622      	mov	r2, r4
 800ec6e:	462b      	mov	r3, r5
 800ec70:	f7f1 fa7c 	bl	800016c <__adddf3>
 800ec74:	4642      	mov	r2, r8
 800ec76:	4606      	mov	r6, r0
 800ec78:	460f      	mov	r7, r1
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	4640      	mov	r0, r8
 800ec7e:	4649      	mov	r1, r9
 800ec80:	f7f1 fc2a 	bl	80004d8 <__aeabi_dmul>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4b66      	ldr	r3, [pc, #408]	; (800ee28 <__ieee754_pow+0x750>)
 800ec90:	f7f1 fa6c 	bl	800016c <__adddf3>
 800ec94:	4632      	mov	r2, r6
 800ec96:	463b      	mov	r3, r7
 800ec98:	f7f1 fa68 	bl	800016c <__adddf3>
 800ec9c:	2400      	movs	r4, #0
 800ec9e:	460d      	mov	r5, r1
 800eca0:	4622      	mov	r2, r4
 800eca2:	460b      	mov	r3, r1
 800eca4:	4640      	mov	r0, r8
 800eca6:	4649      	mov	r1, r9
 800eca8:	f7f1 fc16 	bl	80004d8 <__aeabi_dmul>
 800ecac:	2200      	movs	r2, #0
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4689      	mov	r9, r1
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4b5c      	ldr	r3, [pc, #368]	; (800ee28 <__ieee754_pow+0x750>)
 800ecb8:	f7f1 fa56 	bl	8000168 <__aeabi_dsub>
 800ecbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ecc0:	f7f1 fa52 	bl	8000168 <__aeabi_dsub>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4630      	mov	r0, r6
 800ecca:	4639      	mov	r1, r7
 800eccc:	f7f1 fa4c 	bl	8000168 <__aeabi_dsub>
 800ecd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecd4:	f7f1 fc00 	bl	80004d8 <__aeabi_dmul>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	4606      	mov	r6, r0
 800ecdc:	460f      	mov	r7, r1
 800ecde:	462b      	mov	r3, r5
 800ece0:	4650      	mov	r0, sl
 800ece2:	4659      	mov	r1, fp
 800ece4:	f7f1 fbf8 	bl	80004d8 <__aeabi_dmul>
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	4630      	mov	r0, r6
 800ecee:	4639      	mov	r1, r7
 800ecf0:	f7f1 fa3c 	bl	800016c <__adddf3>
 800ecf4:	2400      	movs	r4, #0
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	460f      	mov	r7, r1
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	4640      	mov	r0, r8
 800ed00:	4649      	mov	r1, r9
 800ed02:	f7f1 fa33 	bl	800016c <__adddf3>
 800ed06:	a33c      	add	r3, pc, #240	; (adr r3, 800edf8 <__ieee754_pow+0x720>)
 800ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	460d      	mov	r5, r1
 800ed10:	f7f1 fbe2 	bl	80004d8 <__aeabi_dmul>
 800ed14:	4642      	mov	r2, r8
 800ed16:	464b      	mov	r3, r9
 800ed18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	4629      	mov	r1, r5
 800ed20:	f7f1 fa22 	bl	8000168 <__aeabi_dsub>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4630      	mov	r0, r6
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	f7f1 fa1c 	bl	8000168 <__aeabi_dsub>
 800ed30:	a333      	add	r3, pc, #204	; (adr r3, 800ee00 <__ieee754_pow+0x728>)
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	f7f1 fbcf 	bl	80004d8 <__aeabi_dmul>
 800ed3a:	a333      	add	r3, pc, #204	; (adr r3, 800ee08 <__ieee754_pow+0x730>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	4606      	mov	r6, r0
 800ed42:	460f      	mov	r7, r1
 800ed44:	4620      	mov	r0, r4
 800ed46:	4629      	mov	r1, r5
 800ed48:	f7f1 fbc6 	bl	80004d8 <__aeabi_dmul>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4630      	mov	r0, r6
 800ed52:	4639      	mov	r1, r7
 800ed54:	f7f1 fa0a 	bl	800016c <__adddf3>
 800ed58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed5a:	4b34      	ldr	r3, [pc, #208]	; (800ee2c <__ieee754_pow+0x754>)
 800ed5c:	4413      	add	r3, r2
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	f7f1 fa03 	bl	800016c <__adddf3>
 800ed66:	4680      	mov	r8, r0
 800ed68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ed6a:	4689      	mov	r9, r1
 800ed6c:	f7f1 fb4a 	bl	8000404 <__aeabi_i2d>
 800ed70:	4604      	mov	r4, r0
 800ed72:	460d      	mov	r5, r1
 800ed74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed7a:	4b2d      	ldr	r3, [pc, #180]	; (800ee30 <__ieee754_pow+0x758>)
 800ed7c:	4413      	add	r3, r2
 800ed7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ed82:	4642      	mov	r2, r8
 800ed84:	464b      	mov	r3, r9
 800ed86:	f7f1 f9f1 	bl	800016c <__adddf3>
 800ed8a:	4632      	mov	r2, r6
 800ed8c:	463b      	mov	r3, r7
 800ed8e:	f7f1 f9ed 	bl	800016c <__adddf3>
 800ed92:	4622      	mov	r2, r4
 800ed94:	462b      	mov	r3, r5
 800ed96:	f7f1 f9e9 	bl	800016c <__adddf3>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	462b      	mov	r3, r5
 800eda0:	4682      	mov	sl, r0
 800eda2:	468b      	mov	fp, r1
 800eda4:	f7f1 f9e0 	bl	8000168 <__aeabi_dsub>
 800eda8:	4632      	mov	r2, r6
 800edaa:	463b      	mov	r3, r7
 800edac:	f7f1 f9dc 	bl	8000168 <__aeabi_dsub>
 800edb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edb4:	f7f1 f9d8 	bl	8000168 <__aeabi_dsub>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4640      	mov	r0, r8
 800edbe:	4649      	mov	r1, r9
 800edc0:	e60b      	b.n	800e9da <__ieee754_pow+0x302>
 800edc2:	2601      	movs	r6, #1
 800edc4:	e69f      	b.n	800eb06 <__ieee754_pow+0x42e>
 800edc6:	bf00      	nop
 800edc8:	4a454eef 	.word	0x4a454eef
 800edcc:	3fca7e28 	.word	0x3fca7e28
 800edd0:	93c9db65 	.word	0x93c9db65
 800edd4:	3fcd864a 	.word	0x3fcd864a
 800edd8:	a91d4101 	.word	0xa91d4101
 800eddc:	3fd17460 	.word	0x3fd17460
 800ede0:	518f264d 	.word	0x518f264d
 800ede4:	3fd55555 	.word	0x3fd55555
 800ede8:	db6fabff 	.word	0xdb6fabff
 800edec:	3fdb6db6 	.word	0x3fdb6db6
 800edf0:	33333303 	.word	0x33333303
 800edf4:	3fe33333 	.word	0x3fe33333
 800edf8:	e0000000 	.word	0xe0000000
 800edfc:	3feec709 	.word	0x3feec709
 800ee00:	dc3a03fd 	.word	0xdc3a03fd
 800ee04:	3feec709 	.word	0x3feec709
 800ee08:	145b01f5 	.word	0x145b01f5
 800ee0c:	be3e2fe0 	.word	0xbe3e2fe0
 800ee10:	7ff00000 	.word	0x7ff00000
 800ee14:	43400000 	.word	0x43400000
 800ee18:	0003988e 	.word	0x0003988e
 800ee1c:	000bb679 	.word	0x000bb679
 800ee20:	08011208 	.word	0x08011208
 800ee24:	3ff00000 	.word	0x3ff00000
 800ee28:	40080000 	.word	0x40080000
 800ee2c:	08011228 	.word	0x08011228
 800ee30:	08011218 	.word	0x08011218
 800ee34:	a39c      	add	r3, pc, #624	; (adr r3, 800f0a8 <__ieee754_pow+0x9d0>)
 800ee36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3a:	4640      	mov	r0, r8
 800ee3c:	4649      	mov	r1, r9
 800ee3e:	f7f1 f995 	bl	800016c <__adddf3>
 800ee42:	4622      	mov	r2, r4
 800ee44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee48:	462b      	mov	r3, r5
 800ee4a:	4650      	mov	r0, sl
 800ee4c:	4639      	mov	r1, r7
 800ee4e:	f7f1 f98b 	bl	8000168 <__aeabi_dsub>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee5a:	f7f1 fdcd 	bl	80009f8 <__aeabi_dcmpgt>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	f47f ae06 	bne.w	800ea70 <__ieee754_pow+0x398>
 800ee64:	4aa2      	ldr	r2, [pc, #648]	; (800f0f0 <__ieee754_pow+0xa18>)
 800ee66:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	f340 8100 	ble.w	800f070 <__ieee754_pow+0x998>
 800ee70:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ee74:	151b      	asrs	r3, r3, #20
 800ee76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ee7a:	fa4a fa03 	asr.w	sl, sl, r3
 800ee7e:	44b2      	add	sl, r6
 800ee80:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ee84:	489b      	ldr	r0, [pc, #620]	; (800f0f4 <__ieee754_pow+0xa1c>)
 800ee86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ee8a:	4108      	asrs	r0, r1
 800ee8c:	ea00 030a 	and.w	r3, r0, sl
 800ee90:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ee94:	f1c1 0114 	rsb	r1, r1, #20
 800ee98:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ee9c:	fa4a fa01 	asr.w	sl, sl, r1
 800eea0:	2e00      	cmp	r6, #0
 800eea2:	f04f 0200 	mov.w	r2, #0
 800eea6:	4620      	mov	r0, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	bfb8      	it	lt
 800eeac:	f1ca 0a00 	rsblt	sl, sl, #0
 800eeb0:	f7f1 f95a 	bl	8000168 <__aeabi_dsub>
 800eeb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eebc:	2400      	movs	r4, #0
 800eebe:	4642      	mov	r2, r8
 800eec0:	464b      	mov	r3, r9
 800eec2:	f7f1 f953 	bl	800016c <__adddf3>
 800eec6:	a37a      	add	r3, pc, #488	; (adr r3, 800f0b0 <__ieee754_pow+0x9d8>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	4620      	mov	r0, r4
 800eece:	460d      	mov	r5, r1
 800eed0:	f7f1 fb02 	bl	80004d8 <__aeabi_dmul>
 800eed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eed8:	4606      	mov	r6, r0
 800eeda:	460f      	mov	r7, r1
 800eedc:	4620      	mov	r0, r4
 800eede:	4629      	mov	r1, r5
 800eee0:	f7f1 f942 	bl	8000168 <__aeabi_dsub>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4640      	mov	r0, r8
 800eeea:	4649      	mov	r1, r9
 800eeec:	f7f1 f93c 	bl	8000168 <__aeabi_dsub>
 800eef0:	a371      	add	r3, pc, #452	; (adr r3, 800f0b8 <__ieee754_pow+0x9e0>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	f7f1 faef 	bl	80004d8 <__aeabi_dmul>
 800eefa:	a371      	add	r3, pc, #452	; (adr r3, 800f0c0 <__ieee754_pow+0x9e8>)
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	4680      	mov	r8, r0
 800ef02:	4689      	mov	r9, r1
 800ef04:	4620      	mov	r0, r4
 800ef06:	4629      	mov	r1, r5
 800ef08:	f7f1 fae6 	bl	80004d8 <__aeabi_dmul>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7f1 f92a 	bl	800016c <__adddf3>
 800ef18:	4604      	mov	r4, r0
 800ef1a:	460d      	mov	r5, r1
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 f922 	bl	800016c <__adddf3>
 800ef28:	4632      	mov	r2, r6
 800ef2a:	463b      	mov	r3, r7
 800ef2c:	4680      	mov	r8, r0
 800ef2e:	4689      	mov	r9, r1
 800ef30:	f7f1 f91a 	bl	8000168 <__aeabi_dsub>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	f7f1 f914 	bl	8000168 <__aeabi_dsub>
 800ef40:	4642      	mov	r2, r8
 800ef42:	4606      	mov	r6, r0
 800ef44:	460f      	mov	r7, r1
 800ef46:	464b      	mov	r3, r9
 800ef48:	4640      	mov	r0, r8
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	f7f1 fac4 	bl	80004d8 <__aeabi_dmul>
 800ef50:	a35d      	add	r3, pc, #372	; (adr r3, 800f0c8 <__ieee754_pow+0x9f0>)
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	4604      	mov	r4, r0
 800ef58:	460d      	mov	r5, r1
 800ef5a:	f7f1 fabd 	bl	80004d8 <__aeabi_dmul>
 800ef5e:	a35c      	add	r3, pc, #368	; (adr r3, 800f0d0 <__ieee754_pow+0x9f8>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 f900 	bl	8000168 <__aeabi_dsub>
 800ef68:	4622      	mov	r2, r4
 800ef6a:	462b      	mov	r3, r5
 800ef6c:	f7f1 fab4 	bl	80004d8 <__aeabi_dmul>
 800ef70:	a359      	add	r3, pc, #356	; (adr r3, 800f0d8 <__ieee754_pow+0xa00>)
 800ef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef76:	f7f1 f8f9 	bl	800016c <__adddf3>
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	f7f1 faab 	bl	80004d8 <__aeabi_dmul>
 800ef82:	a357      	add	r3, pc, #348	; (adr r3, 800f0e0 <__ieee754_pow+0xa08>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	f7f1 f8ee 	bl	8000168 <__aeabi_dsub>
 800ef8c:	4622      	mov	r2, r4
 800ef8e:	462b      	mov	r3, r5
 800ef90:	f7f1 faa2 	bl	80004d8 <__aeabi_dmul>
 800ef94:	a354      	add	r3, pc, #336	; (adr r3, 800f0e8 <__ieee754_pow+0xa10>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 f8e7 	bl	800016c <__adddf3>
 800ef9e:	4622      	mov	r2, r4
 800efa0:	462b      	mov	r3, r5
 800efa2:	f7f1 fa99 	bl	80004d8 <__aeabi_dmul>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	4640      	mov	r0, r8
 800efac:	4649      	mov	r1, r9
 800efae:	f7f1 f8db 	bl	8000168 <__aeabi_dsub>
 800efb2:	4604      	mov	r4, r0
 800efb4:	460d      	mov	r5, r1
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4640      	mov	r0, r8
 800efbc:	4649      	mov	r1, r9
 800efbe:	f7f1 fa8b 	bl	80004d8 <__aeabi_dmul>
 800efc2:	2200      	movs	r2, #0
 800efc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efcc:	4620      	mov	r0, r4
 800efce:	4629      	mov	r1, r5
 800efd0:	f7f1 f8ca 	bl	8000168 <__aeabi_dsub>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efdc:	f7f1 fba6 	bl	800072c <__aeabi_ddiv>
 800efe0:	4632      	mov	r2, r6
 800efe2:	4604      	mov	r4, r0
 800efe4:	460d      	mov	r5, r1
 800efe6:	463b      	mov	r3, r7
 800efe8:	4640      	mov	r0, r8
 800efea:	4649      	mov	r1, r9
 800efec:	f7f1 fa74 	bl	80004d8 <__aeabi_dmul>
 800eff0:	4632      	mov	r2, r6
 800eff2:	463b      	mov	r3, r7
 800eff4:	f7f1 f8ba 	bl	800016c <__adddf3>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4620      	mov	r0, r4
 800effe:	4629      	mov	r1, r5
 800f000:	f7f1 f8b2 	bl	8000168 <__aeabi_dsub>
 800f004:	4642      	mov	r2, r8
 800f006:	464b      	mov	r3, r9
 800f008:	f7f1 f8ae 	bl	8000168 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	2000      	movs	r0, #0
 800f012:	4939      	ldr	r1, [pc, #228]	; (800f0f8 <__ieee754_pow+0xa20>)
 800f014:	f7f1 f8a8 	bl	8000168 <__aeabi_dsub>
 800f018:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f01c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f020:	da29      	bge.n	800f076 <__ieee754_pow+0x99e>
 800f022:	4652      	mov	r2, sl
 800f024:	f000 f874 	bl	800f110 <scalbn>
 800f028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f02c:	f7ff bbfd 	b.w	800e82a <__ieee754_pow+0x152>
 800f030:	4b32      	ldr	r3, [pc, #200]	; (800f0fc <__ieee754_pow+0xa24>)
 800f032:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f036:	429f      	cmp	r7, r3
 800f038:	f77f af14 	ble.w	800ee64 <__ieee754_pow+0x78c>
 800f03c:	4b30      	ldr	r3, [pc, #192]	; (800f100 <__ieee754_pow+0xa28>)
 800f03e:	440b      	add	r3, r1
 800f040:	4303      	orrs	r3, r0
 800f042:	d009      	beq.n	800f058 <__ieee754_pow+0x980>
 800f044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f048:	2200      	movs	r2, #0
 800f04a:	2300      	movs	r3, #0
 800f04c:	f7f1 fcb6 	bl	80009bc <__aeabi_dcmplt>
 800f050:	3800      	subs	r0, #0
 800f052:	bf18      	it	ne
 800f054:	2001      	movne	r0, #1
 800f056:	e452      	b.n	800e8fe <__ieee754_pow+0x226>
 800f058:	4622      	mov	r2, r4
 800f05a:	462b      	mov	r3, r5
 800f05c:	f7f1 f884 	bl	8000168 <__aeabi_dsub>
 800f060:	4642      	mov	r2, r8
 800f062:	464b      	mov	r3, r9
 800f064:	f7f1 fcbe 	bl	80009e4 <__aeabi_dcmpge>
 800f068:	2800      	cmp	r0, #0
 800f06a:	f43f aefb 	beq.w	800ee64 <__ieee754_pow+0x78c>
 800f06e:	e7e9      	b.n	800f044 <__ieee754_pow+0x96c>
 800f070:	f04f 0a00 	mov.w	sl, #0
 800f074:	e720      	b.n	800eeb8 <__ieee754_pow+0x7e0>
 800f076:	4621      	mov	r1, r4
 800f078:	e7d6      	b.n	800f028 <__ieee754_pow+0x950>
 800f07a:	f04f 0b00 	mov.w	fp, #0
 800f07e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800f0f8 <__ieee754_pow+0xa20>
 800f082:	f7ff bbb9 	b.w	800e7f8 <__ieee754_pow+0x120>
 800f086:	f04f 0b00 	mov.w	fp, #0
 800f08a:	f04f 0c00 	mov.w	ip, #0
 800f08e:	f7ff bbb3 	b.w	800e7f8 <__ieee754_pow+0x120>
 800f092:	4640      	mov	r0, r8
 800f094:	4649      	mov	r1, r9
 800f096:	f7ff bb3c 	b.w	800e712 <__ieee754_pow+0x3a>
 800f09a:	9200      	str	r2, [sp, #0]
 800f09c:	f7ff bb88 	b.w	800e7b0 <__ieee754_pow+0xd8>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f7ff bb72 	b.w	800e78a <__ieee754_pow+0xb2>
 800f0a6:	bf00      	nop
 800f0a8:	652b82fe 	.word	0x652b82fe
 800f0ac:	3c971547 	.word	0x3c971547
 800f0b0:	00000000 	.word	0x00000000
 800f0b4:	3fe62e43 	.word	0x3fe62e43
 800f0b8:	fefa39ef 	.word	0xfefa39ef
 800f0bc:	3fe62e42 	.word	0x3fe62e42
 800f0c0:	0ca86c39 	.word	0x0ca86c39
 800f0c4:	be205c61 	.word	0xbe205c61
 800f0c8:	72bea4d0 	.word	0x72bea4d0
 800f0cc:	3e663769 	.word	0x3e663769
 800f0d0:	c5d26bf1 	.word	0xc5d26bf1
 800f0d4:	3ebbbd41 	.word	0x3ebbbd41
 800f0d8:	af25de2c 	.word	0xaf25de2c
 800f0dc:	3f11566a 	.word	0x3f11566a
 800f0e0:	16bebd93 	.word	0x16bebd93
 800f0e4:	3f66c16c 	.word	0x3f66c16c
 800f0e8:	5555553e 	.word	0x5555553e
 800f0ec:	3fc55555 	.word	0x3fc55555
 800f0f0:	3fe00000 	.word	0x3fe00000
 800f0f4:	fff00000 	.word	0xfff00000
 800f0f8:	3ff00000 	.word	0x3ff00000
 800f0fc:	4090cbff 	.word	0x4090cbff
 800f100:	3f6f3400 	.word	0x3f6f3400

0800f104 <fabs>:
 800f104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f108:	4619      	mov	r1, r3
 800f10a:	4770      	bx	lr
 800f10c:	0000      	movs	r0, r0
	...

0800f110 <scalbn>:
 800f110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f112:	4616      	mov	r6, r2
 800f114:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f118:	4604      	mov	r4, r0
 800f11a:	460d      	mov	r5, r1
 800f11c:	460b      	mov	r3, r1
 800f11e:	b992      	cbnz	r2, 800f146 <scalbn+0x36>
 800f120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f124:	4303      	orrs	r3, r0
 800f126:	d03c      	beq.n	800f1a2 <scalbn+0x92>
 800f128:	4b31      	ldr	r3, [pc, #196]	; (800f1f0 <scalbn+0xe0>)
 800f12a:	2200      	movs	r2, #0
 800f12c:	f7f1 f9d4 	bl	80004d8 <__aeabi_dmul>
 800f130:	4b30      	ldr	r3, [pc, #192]	; (800f1f4 <scalbn+0xe4>)
 800f132:	4604      	mov	r4, r0
 800f134:	429e      	cmp	r6, r3
 800f136:	460d      	mov	r5, r1
 800f138:	da0f      	bge.n	800f15a <scalbn+0x4a>
 800f13a:	a329      	add	r3, pc, #164	; (adr r3, 800f1e0 <scalbn+0xd0>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	f7f1 f9ca 	bl	80004d8 <__aeabi_dmul>
 800f144:	e006      	b.n	800f154 <scalbn+0x44>
 800f146:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800f14a:	42ba      	cmp	r2, r7
 800f14c:	d109      	bne.n	800f162 <scalbn+0x52>
 800f14e:	4602      	mov	r2, r0
 800f150:	f7f1 f80c 	bl	800016c <__adddf3>
 800f154:	4604      	mov	r4, r0
 800f156:	460d      	mov	r5, r1
 800f158:	e023      	b.n	800f1a2 <scalbn+0x92>
 800f15a:	460b      	mov	r3, r1
 800f15c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f160:	3a36      	subs	r2, #54	; 0x36
 800f162:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f166:	428e      	cmp	r6, r1
 800f168:	dd0e      	ble.n	800f188 <scalbn+0x78>
 800f16a:	a31f      	add	r3, pc, #124	; (adr r3, 800f1e8 <scalbn+0xd8>)
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f174:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f178:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f17c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f180:	481d      	ldr	r0, [pc, #116]	; (800f1f8 <scalbn+0xe8>)
 800f182:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f186:	e7db      	b.n	800f140 <scalbn+0x30>
 800f188:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f18c:	4432      	add	r2, r6
 800f18e:	428a      	cmp	r2, r1
 800f190:	dceb      	bgt.n	800f16a <scalbn+0x5a>
 800f192:	2a00      	cmp	r2, #0
 800f194:	dd08      	ble.n	800f1a8 <scalbn+0x98>
 800f196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f19a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f19e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1ac:	da0c      	bge.n	800f1c8 <scalbn+0xb8>
 800f1ae:	a30c      	add	r3, pc, #48	; (adr r3, 800f1e0 <scalbn+0xd0>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f1b8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f1bc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f1c0:	480e      	ldr	r0, [pc, #56]	; (800f1fc <scalbn+0xec>)
 800f1c2:	f041 011f 	orr.w	r1, r1, #31
 800f1c6:	e7bb      	b.n	800f140 <scalbn+0x30>
 800f1c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1cc:	3236      	adds	r2, #54	; 0x36
 800f1ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4629      	mov	r1, r5
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4b08      	ldr	r3, [pc, #32]	; (800f200 <scalbn+0xf0>)
 800f1de:	e7af      	b.n	800f140 <scalbn+0x30>
 800f1e0:	c2f8f359 	.word	0xc2f8f359
 800f1e4:	01a56e1f 	.word	0x01a56e1f
 800f1e8:	8800759c 	.word	0x8800759c
 800f1ec:	7e37e43c 	.word	0x7e37e43c
 800f1f0:	43500000 	.word	0x43500000
 800f1f4:	ffff3cb0 	.word	0xffff3cb0
 800f1f8:	8800759c 	.word	0x8800759c
 800f1fc:	c2f8f359 	.word	0xc2f8f359
 800f200:	3c900000 	.word	0x3c900000

0800f204 <with_errno>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	4604      	mov	r4, r0
 800f208:	460d      	mov	r5, r1
 800f20a:	4616      	mov	r6, r2
 800f20c:	f7fd f95c 	bl	800c4c8 <__errno>
 800f210:	4629      	mov	r1, r5
 800f212:	6006      	str	r6, [r0, #0]
 800f214:	4620      	mov	r0, r4
 800f216:	bd70      	pop	{r4, r5, r6, pc}

0800f218 <xflow>:
 800f218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f21a:	4615      	mov	r5, r2
 800f21c:	461c      	mov	r4, r3
 800f21e:	b180      	cbz	r0, 800f242 <xflow+0x2a>
 800f220:	4610      	mov	r0, r2
 800f222:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f226:	e9cd 0100 	strd	r0, r1, [sp]
 800f22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f22e:	4628      	mov	r0, r5
 800f230:	4621      	mov	r1, r4
 800f232:	f7f1 f951 	bl	80004d8 <__aeabi_dmul>
 800f236:	2222      	movs	r2, #34	; 0x22
 800f238:	b003      	add	sp, #12
 800f23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f23e:	f7ff bfe1 	b.w	800f204 <with_errno>
 800f242:	4610      	mov	r0, r2
 800f244:	4619      	mov	r1, r3
 800f246:	e7ee      	b.n	800f226 <xflow+0xe>

0800f248 <__math_uflow>:
 800f248:	2200      	movs	r2, #0
 800f24a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f24e:	f7ff bfe3 	b.w	800f218 <xflow>

0800f252 <__math_oflow>:
 800f252:	2200      	movs	r2, #0
 800f254:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f258:	f7ff bfde 	b.w	800f218 <xflow>

0800f25c <__ieee754_sqrt>:
 800f25c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800f400 <__ieee754_sqrt+0x1a4>
 800f260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	ea3c 0c01 	bics.w	ip, ip, r1
 800f268:	460b      	mov	r3, r1
 800f26a:	4606      	mov	r6, r0
 800f26c:	460d      	mov	r5, r1
 800f26e:	460a      	mov	r2, r1
 800f270:	4604      	mov	r4, r0
 800f272:	d10e      	bne.n	800f292 <__ieee754_sqrt+0x36>
 800f274:	4602      	mov	r2, r0
 800f276:	f7f1 f92f 	bl	80004d8 <__aeabi_dmul>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4630      	mov	r0, r6
 800f280:	4629      	mov	r1, r5
 800f282:	f7f0 ff73 	bl	800016c <__adddf3>
 800f286:	4606      	mov	r6, r0
 800f288:	460d      	mov	r5, r1
 800f28a:	4630      	mov	r0, r6
 800f28c:	4629      	mov	r1, r5
 800f28e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f292:	2900      	cmp	r1, #0
 800f294:	dc0d      	bgt.n	800f2b2 <__ieee754_sqrt+0x56>
 800f296:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f29a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800f29e:	d0f4      	beq.n	800f28a <__ieee754_sqrt+0x2e>
 800f2a0:	b139      	cbz	r1, 800f2b2 <__ieee754_sqrt+0x56>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	f7f0 ff60 	bl	8000168 <__aeabi_dsub>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	f7f1 fa3e 	bl	800072c <__aeabi_ddiv>
 800f2b0:	e7e9      	b.n	800f286 <__ieee754_sqrt+0x2a>
 800f2b2:	1512      	asrs	r2, r2, #20
 800f2b4:	f000 8089 	beq.w	800f3ca <__ieee754_sqrt+0x16e>
 800f2b8:	2500      	movs	r5, #0
 800f2ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2be:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f2c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2c6:	07d2      	lsls	r2, r2, #31
 800f2c8:	bf5c      	itt	pl
 800f2ca:	005b      	lslpl	r3, r3, #1
 800f2cc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800f2d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2d4:	bf58      	it	pl
 800f2d6:	0064      	lslpl	r4, r4, #1
 800f2d8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f2dc:	0062      	lsls	r2, r4, #1
 800f2de:	2016      	movs	r0, #22
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800f2e6:	1076      	asrs	r6, r6, #1
 800f2e8:	190f      	adds	r7, r1, r4
 800f2ea:	429f      	cmp	r7, r3
 800f2ec:	bfde      	ittt	le
 800f2ee:	1bdb      	suble	r3, r3, r7
 800f2f0:	1939      	addle	r1, r7, r4
 800f2f2:	192d      	addle	r5, r5, r4
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	3801      	subs	r0, #1
 800f2f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f2fc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f300:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f304:	d1f0      	bne.n	800f2e8 <__ieee754_sqrt+0x8c>
 800f306:	4604      	mov	r4, r0
 800f308:	2720      	movs	r7, #32
 800f30a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f30e:	428b      	cmp	r3, r1
 800f310:	eb0c 0e00 	add.w	lr, ip, r0
 800f314:	dc02      	bgt.n	800f31c <__ieee754_sqrt+0xc0>
 800f316:	d113      	bne.n	800f340 <__ieee754_sqrt+0xe4>
 800f318:	4596      	cmp	lr, r2
 800f31a:	d811      	bhi.n	800f340 <__ieee754_sqrt+0xe4>
 800f31c:	f1be 0f00 	cmp.w	lr, #0
 800f320:	eb0e 000c 	add.w	r0, lr, ip
 800f324:	da56      	bge.n	800f3d4 <__ieee754_sqrt+0x178>
 800f326:	2800      	cmp	r0, #0
 800f328:	db54      	blt.n	800f3d4 <__ieee754_sqrt+0x178>
 800f32a:	f101 0801 	add.w	r8, r1, #1
 800f32e:	1a5b      	subs	r3, r3, r1
 800f330:	4641      	mov	r1, r8
 800f332:	4596      	cmp	lr, r2
 800f334:	bf88      	it	hi
 800f336:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f33a:	eba2 020e 	sub.w	r2, r2, lr
 800f33e:	4464      	add	r4, ip
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	3f01      	subs	r7, #1
 800f344:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f348:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f34c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f350:	d1dd      	bne.n	800f30e <__ieee754_sqrt+0xb2>
 800f352:	4313      	orrs	r3, r2
 800f354:	d01b      	beq.n	800f38e <__ieee754_sqrt+0x132>
 800f356:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f404 <__ieee754_sqrt+0x1a8>
 800f35a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f408 <__ieee754_sqrt+0x1ac>
 800f35e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f362:	e9db 2300 	ldrd	r2, r3, [fp]
 800f366:	f7f0 feff 	bl	8000168 <__aeabi_dsub>
 800f36a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4640      	mov	r0, r8
 800f374:	4649      	mov	r1, r9
 800f376:	f7f1 fb2b 	bl	80009d0 <__aeabi_dcmple>
 800f37a:	b140      	cbz	r0, 800f38e <__ieee754_sqrt+0x132>
 800f37c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f380:	e9db 2300 	ldrd	r2, r3, [fp]
 800f384:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f388:	d126      	bne.n	800f3d8 <__ieee754_sqrt+0x17c>
 800f38a:	463c      	mov	r4, r7
 800f38c:	3501      	adds	r5, #1
 800f38e:	106b      	asrs	r3, r5, #1
 800f390:	0864      	lsrs	r4, r4, #1
 800f392:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f396:	07ea      	lsls	r2, r5, #31
 800f398:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f39c:	bf48      	it	mi
 800f39e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f3a8:	e76d      	b.n	800f286 <__ieee754_sqrt+0x2a>
 800f3aa:	0ae3      	lsrs	r3, r4, #11
 800f3ac:	3915      	subs	r1, #21
 800f3ae:	0564      	lsls	r4, r4, #21
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d0fa      	beq.n	800f3aa <__ieee754_sqrt+0x14e>
 800f3b4:	02d8      	lsls	r0, r3, #11
 800f3b6:	d50a      	bpl.n	800f3ce <__ieee754_sqrt+0x172>
 800f3b8:	f1c2 0020 	rsb	r0, r2, #32
 800f3bc:	fa24 f000 	lsr.w	r0, r4, r0
 800f3c0:	1e55      	subs	r5, r2, #1
 800f3c2:	4094      	lsls	r4, r2
 800f3c4:	4303      	orrs	r3, r0
 800f3c6:	1b4a      	subs	r2, r1, r5
 800f3c8:	e776      	b.n	800f2b8 <__ieee754_sqrt+0x5c>
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	e7f0      	b.n	800f3b0 <__ieee754_sqrt+0x154>
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	3201      	adds	r2, #1
 800f3d2:	e7ef      	b.n	800f3b4 <__ieee754_sqrt+0x158>
 800f3d4:	4688      	mov	r8, r1
 800f3d6:	e7aa      	b.n	800f32e <__ieee754_sqrt+0xd2>
 800f3d8:	f7f0 fec8 	bl	800016c <__adddf3>
 800f3dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	f7f1 fae8 	bl	80009bc <__aeabi_dcmplt>
 800f3ec:	b120      	cbz	r0, 800f3f8 <__ieee754_sqrt+0x19c>
 800f3ee:	1ca1      	adds	r1, r4, #2
 800f3f0:	bf08      	it	eq
 800f3f2:	3501      	addeq	r5, #1
 800f3f4:	3402      	adds	r4, #2
 800f3f6:	e7ca      	b.n	800f38e <__ieee754_sqrt+0x132>
 800f3f8:	3401      	adds	r4, #1
 800f3fa:	f024 0401 	bic.w	r4, r4, #1
 800f3fe:	e7c6      	b.n	800f38e <__ieee754_sqrt+0x132>
 800f400:	7ff00000 	.word	0x7ff00000
 800f404:	20000280 	.word	0x20000280
 800f408:	20000288 	.word	0x20000288

0800f40c <_init>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	bf00      	nop
 800f410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f412:	bc08      	pop	{r3}
 800f414:	469e      	mov	lr, r3
 800f416:	4770      	bx	lr

0800f418 <_fini>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	bf00      	nop
 800f41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41e:	bc08      	pop	{r3}
 800f420:	469e      	mov	lr, r3
 800f422:	4770      	bx	lr
