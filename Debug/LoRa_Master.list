
LoRa_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .config_LoRa  00000004  0801fc04  0801fc04  0002fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009ed8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000018ac  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800b894  0800b894  0002fc08  2**0
                  CONTENTS
  5 .ARM          00000008  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800b89c  0800b89c  0002fc08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d0  20000000  0800b8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001908  200000d0  0800b974  000200d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200019d8  0800b974  000219d8  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002fc31  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019668  00000000  00000000  0002fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000431c  00000000  00000000  000492dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001880  00000000  00000000  0004d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000137d  00000000  00000000  0004ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c416  00000000  00000000  000501f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001feaf  00000000  00000000  0006c60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00093779  00000000  00000000  0008c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006bcc  00000000  00000000  0011fc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00126800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fd0 	.word	0x08009fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	08009fd0 	.word	0x08009fd0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_uldivmod>:
 800064c:	b953      	cbnz	r3, 8000664 <__aeabi_uldivmod+0x18>
 800064e:	b94a      	cbnz	r2, 8000664 <__aeabi_uldivmod+0x18>
 8000650:	2900      	cmp	r1, #0
 8000652:	bf08      	it	eq
 8000654:	2800      	cmpeq	r0, #0
 8000656:	bf1c      	itt	ne
 8000658:	f04f 31ff 	movne.w	r1, #4294967295
 800065c:	f04f 30ff 	movne.w	r0, #4294967295
 8000660:	f000 b972 	b.w	8000948 <__aeabi_idiv0>
 8000664:	f1ad 0c08 	sub.w	ip, sp, #8
 8000668:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800066c:	f000 f806 	bl	800067c <__udivmoddi4>
 8000670:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000678:	b004      	add	sp, #16
 800067a:	4770      	bx	lr

0800067c <__udivmoddi4>:
 800067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000680:	9e08      	ldr	r6, [sp, #32]
 8000682:	460d      	mov	r5, r1
 8000684:	4604      	mov	r4, r0
 8000686:	468e      	mov	lr, r1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d14c      	bne.n	8000726 <__udivmoddi4+0xaa>
 800068c:	428a      	cmp	r2, r1
 800068e:	4694      	mov	ip, r2
 8000690:	d967      	bls.n	8000762 <__udivmoddi4+0xe6>
 8000692:	fab2 f382 	clz	r3, r2
 8000696:	b153      	cbz	r3, 80006ae <__udivmoddi4+0x32>
 8000698:	fa02 fc03 	lsl.w	ip, r2, r3
 800069c:	f1c3 0220 	rsb	r2, r3, #32
 80006a0:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a4:	fa20 f202 	lsr.w	r2, r0, r2
 80006a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80006ac:	409c      	lsls	r4, r3
 80006ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b2:	fbbe f1f7 	udiv	r1, lr, r7
 80006b6:	fa1f f58c 	uxth.w	r5, ip
 80006ba:	fb07 ee11 	mls	lr, r7, r1, lr
 80006be:	fb01 f005 	mul.w	r0, r1, r5
 80006c2:	0c22      	lsrs	r2, r4, #16
 80006c4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80006c8:	4290      	cmp	r0, r2
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x66>
 80006cc:	eb1c 0202 	adds.w	r2, ip, r2
 80006d0:	f101 3eff 	add.w	lr, r1, #4294967295
 80006d4:	f080 8119 	bcs.w	800090a <__udivmoddi4+0x28e>
 80006d8:	4290      	cmp	r0, r2
 80006da:	f240 8116 	bls.w	800090a <__udivmoddi4+0x28e>
 80006de:	3902      	subs	r1, #2
 80006e0:	4462      	add	r2, ip
 80006e2:	1a12      	subs	r2, r2, r0
 80006e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80006e8:	fb07 2210 	mls	r2, r7, r0, r2
 80006ec:	fb00 f505 	mul.w	r5, r0, r5
 80006f0:	b2a4      	uxth	r4, r4
 80006f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f6:	42a5      	cmp	r5, r4
 80006f8:	d90a      	bls.n	8000710 <__udivmoddi4+0x94>
 80006fa:	eb1c 0404 	adds.w	r4, ip, r4
 80006fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000702:	f080 8104 	bcs.w	800090e <__udivmoddi4+0x292>
 8000706:	42a5      	cmp	r5, r4
 8000708:	f240 8101 	bls.w	800090e <__udivmoddi4+0x292>
 800070c:	4464      	add	r4, ip
 800070e:	3802      	subs	r0, #2
 8000710:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000714:	2100      	movs	r1, #0
 8000716:	1b64      	subs	r4, r4, r5
 8000718:	b11e      	cbz	r6, 8000722 <__udivmoddi4+0xa6>
 800071a:	40dc      	lsrs	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	e9c6 4300 	strd	r4, r3, [r6]
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0xc0>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80ea 	beq.w	8000904 <__udivmoddi4+0x288>
 8000730:	2100      	movs	r1, #0
 8000732:	e9c6 0500 	strd	r0, r5, [r6]
 8000736:	4608      	mov	r0, r1
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	fab3 f183 	clz	r1, r3
 8000740:	2900      	cmp	r1, #0
 8000742:	d148      	bne.n	80007d6 <__udivmoddi4+0x15a>
 8000744:	42ab      	cmp	r3, r5
 8000746:	d302      	bcc.n	800074e <__udivmoddi4+0xd2>
 8000748:	4282      	cmp	r2, r0
 800074a:	f200 80f8 	bhi.w	800093e <__udivmoddi4+0x2c2>
 800074e:	1a84      	subs	r4, r0, r2
 8000750:	eb65 0203 	sbc.w	r2, r5, r3
 8000754:	2001      	movs	r0, #1
 8000756:	4696      	mov	lr, r2
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0e2      	beq.n	8000722 <__udivmoddi4+0xa6>
 800075c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000760:	e7df      	b.n	8000722 <__udivmoddi4+0xa6>
 8000762:	b902      	cbnz	r2, 8000766 <__udivmoddi4+0xea>
 8000764:	deff      	udf	#255	; 0xff
 8000766:	fab2 f382 	clz	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 808e 	bne.w	800088c <__udivmoddi4+0x210>
 8000770:	1a88      	subs	r0, r1, r2
 8000772:	2101      	movs	r1, #1
 8000774:	0c17      	lsrs	r7, r2, #16
 8000776:	fa1f fe82 	uxth.w	lr, r2
 800077a:	fbb0 f5f7 	udiv	r5, r0, r7
 800077e:	fb07 0015 	mls	r0, r7, r5, r0
 8000782:	0c22      	lsrs	r2, r4, #16
 8000784:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000788:	fb0e f005 	mul.w	r0, lr, r5
 800078c:	4290      	cmp	r0, r2
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x126>
 8000790:	eb1c 0202 	adds.w	r2, ip, r2
 8000794:	f105 38ff 	add.w	r8, r5, #4294967295
 8000798:	d202      	bcs.n	80007a0 <__udivmoddi4+0x124>
 800079a:	4290      	cmp	r0, r2
 800079c:	f200 80cc 	bhi.w	8000938 <__udivmoddi4+0x2bc>
 80007a0:	4645      	mov	r5, r8
 80007a2:	1a12      	subs	r2, r2, r0
 80007a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80007a8:	fb07 2210 	mls	r2, r7, r0, r2
 80007ac:	fb0e fe00 	mul.w	lr, lr, r0
 80007b0:	b2a4      	uxth	r4, r4
 80007b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x150>
 80007ba:	eb1c 0404 	adds.w	r4, ip, r4
 80007be:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14e>
 80007c4:	45a6      	cmp	lr, r4
 80007c6:	f200 80b4 	bhi.w	8000932 <__udivmoddi4+0x2b6>
 80007ca:	4610      	mov	r0, r2
 80007cc:	eba4 040e 	sub.w	r4, r4, lr
 80007d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007d4:	e7a0      	b.n	8000718 <__udivmoddi4+0x9c>
 80007d6:	f1c1 0720 	rsb	r7, r1, #32
 80007da:	408b      	lsls	r3, r1
 80007dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e4:	fa25 fa07 	lsr.w	sl, r5, r7
 80007e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ec:	fbba f8f9 	udiv	r8, sl, r9
 80007f0:	408d      	lsls	r5, r1
 80007f2:	fa20 f307 	lsr.w	r3, r0, r7
 80007f6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007fa:	fa1f fe8c 	uxth.w	lr, ip
 80007fe:	432b      	orrs	r3, r5
 8000800:	fa00 f501 	lsl.w	r5, r0, r1
 8000804:	fb08 f00e 	mul.w	r0, r8, lr
 8000808:	0c1c      	lsrs	r4, r3, #16
 800080a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800080e:	42a0      	cmp	r0, r4
 8000810:	fa02 f201 	lsl.w	r2, r2, r1
 8000814:	d90b      	bls.n	800082e <__udivmoddi4+0x1b2>
 8000816:	eb1c 0404 	adds.w	r4, ip, r4
 800081a:	f108 3aff 	add.w	sl, r8, #4294967295
 800081e:	f080 8086 	bcs.w	800092e <__udivmoddi4+0x2b2>
 8000822:	42a0      	cmp	r0, r4
 8000824:	f240 8083 	bls.w	800092e <__udivmoddi4+0x2b2>
 8000828:	f1a8 0802 	sub.w	r8, r8, #2
 800082c:	4464      	add	r4, ip
 800082e:	1a24      	subs	r4, r4, r0
 8000830:	b298      	uxth	r0, r3
 8000832:	fbb4 f3f9 	udiv	r3, r4, r9
 8000836:	fb09 4413 	mls	r4, r9, r3, r4
 800083a:	fb03 fe0e 	mul.w	lr, r3, lr
 800083e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x1dc>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f103 30ff 	add.w	r0, r3, #4294967295
 800084e:	d26a      	bcs.n	8000926 <__udivmoddi4+0x2aa>
 8000850:	45a6      	cmp	lr, r4
 8000852:	d968      	bls.n	8000926 <__udivmoddi4+0x2aa>
 8000854:	3b02      	subs	r3, #2
 8000856:	4464      	add	r4, ip
 8000858:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800085c:	fba0 9302 	umull	r9, r3, r0, r2
 8000860:	eba4 040e 	sub.w	r4, r4, lr
 8000864:	429c      	cmp	r4, r3
 8000866:	46c8      	mov	r8, r9
 8000868:	469e      	mov	lr, r3
 800086a:	d354      	bcc.n	8000916 <__udivmoddi4+0x29a>
 800086c:	d051      	beq.n	8000912 <__udivmoddi4+0x296>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d067      	beq.n	8000942 <__udivmoddi4+0x2c6>
 8000872:	ebb5 0308 	subs.w	r3, r5, r8
 8000876:	eb64 040e 	sbc.w	r4, r4, lr
 800087a:	40cb      	lsrs	r3, r1
 800087c:	fa04 f707 	lsl.w	r7, r4, r7
 8000880:	431f      	orrs	r7, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	e9c6 7400 	strd	r7, r4, [r6]
 8000888:	2100      	movs	r1, #0
 800088a:	e74a      	b.n	8000722 <__udivmoddi4+0xa6>
 800088c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000890:	f1c3 0020 	rsb	r0, r3, #32
 8000894:	40c1      	lsrs	r1, r0
 8000896:	409d      	lsls	r5, r3
 8000898:	fa24 f000 	lsr.w	r0, r4, r0
 800089c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a0:	4328      	orrs	r0, r5
 80008a2:	fbb1 f5f7 	udiv	r5, r1, r7
 80008a6:	fb07 1115 	mls	r1, r7, r5, r1
 80008aa:	fa1f fe8c 	uxth.w	lr, ip
 80008ae:	0c02      	lsrs	r2, r0, #16
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	fb05 f10e 	mul.w	r1, r5, lr
 80008b8:	4291      	cmp	r1, r2
 80008ba:	fa04 f403 	lsl.w	r4, r4, r3
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x256>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80008c8:	d22f      	bcs.n	800092a <__udivmoddi4+0x2ae>
 80008ca:	4291      	cmp	r1, r2
 80008cc:	d92d      	bls.n	800092a <__udivmoddi4+0x2ae>
 80008ce:	3d02      	subs	r5, #2
 80008d0:	4462      	add	r2, ip
 80008d2:	1a52      	subs	r2, r2, r1
 80008d4:	fbb2 f1f7 	udiv	r1, r2, r7
 80008d8:	fb07 2211 	mls	r2, r7, r1, r2
 80008dc:	b280      	uxth	r0, r0
 80008de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80008e2:	fb01 f20e 	mul.w	r2, r1, lr
 80008e6:	4282      	cmp	r2, r0
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x280>
 80008ea:	eb1c 0000 	adds.w	r0, ip, r0
 80008ee:	f101 38ff 	add.w	r8, r1, #4294967295
 80008f2:	d216      	bcs.n	8000922 <__udivmoddi4+0x2a6>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	d914      	bls.n	8000922 <__udivmoddi4+0x2a6>
 80008f8:	3902      	subs	r1, #2
 80008fa:	4460      	add	r0, ip
 80008fc:	1a80      	subs	r0, r0, r2
 80008fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000902:	e73a      	b.n	800077a <__udivmoddi4+0xfe>
 8000904:	4631      	mov	r1, r6
 8000906:	4630      	mov	r0, r6
 8000908:	e70b      	b.n	8000722 <__udivmoddi4+0xa6>
 800090a:	4671      	mov	r1, lr
 800090c:	e6e9      	b.n	80006e2 <__udivmoddi4+0x66>
 800090e:	4610      	mov	r0, r2
 8000910:	e6fe      	b.n	8000710 <__udivmoddi4+0x94>
 8000912:	454d      	cmp	r5, r9
 8000914:	d2ab      	bcs.n	800086e <__udivmoddi4+0x1f2>
 8000916:	ebb9 0802 	subs.w	r8, r9, r2
 800091a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800091e:	3801      	subs	r0, #1
 8000920:	e7a5      	b.n	800086e <__udivmoddi4+0x1f2>
 8000922:	4641      	mov	r1, r8
 8000924:	e7ea      	b.n	80008fc <__udivmoddi4+0x280>
 8000926:	4603      	mov	r3, r0
 8000928:	e796      	b.n	8000858 <__udivmoddi4+0x1dc>
 800092a:	4645      	mov	r5, r8
 800092c:	e7d1      	b.n	80008d2 <__udivmoddi4+0x256>
 800092e:	46d0      	mov	r8, sl
 8000930:	e77d      	b.n	800082e <__udivmoddi4+0x1b2>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e749      	b.n	80007cc <__udivmoddi4+0x150>
 8000938:	3d02      	subs	r5, #2
 800093a:	4462      	add	r2, ip
 800093c:	e731      	b.n	80007a2 <__udivmoddi4+0x126>
 800093e:	4608      	mov	r0, r1
 8000940:	e70a      	b.n	8000758 <__udivmoddi4+0xdc>
 8000942:	4631      	mov	r1, r6
 8000944:	e6ed      	b.n	8000722 <__udivmoddi4+0xa6>
 8000946:	bf00      	nop

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <Encrypt_Address_Read_Init>:
static uint32_t gl_u32CRC_FragmentFW;
struct AES_ctx ctx_fw;
struct AES_ctx ctx_fw_des;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
void Encrypt_Address_Read_Init(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	gl_ReadAddress = STORE_AREA_START_ADDRESS;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <Encrypt_Address_Read_Init+0x18>)
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <Encrypt_Address_Read_Init+0x1c>)
 8000954:	601a      	str	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_fw_des, AES_CBC_128_Key, AES_CBC_128_IV);
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <Encrypt_Address_Read_Init+0x20>)
 8000958:	4905      	ldr	r1, [pc, #20]	; (8000970 <Encrypt_Address_Read_Init+0x24>)
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <Encrypt_Address_Read_Init+0x28>)
 800095c:	f003 faac 	bl	8003eb8 <AES_init_ctx_iv>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000180 	.word	0x20000180
 8000968:	08010000 	.word	0x08010000
 800096c:	20000010 	.word	0x20000010
 8000970:	20000000 	.word	0x20000000
 8000974:	2000024c 	.word	0x2000024c

08000978 <Calculate_CRC_firmware>:
uint32_t Calculate_CRC_firmware(uint8_t *buffer_firmware){
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32CRC_Code = INITIAL_VALUE_ZERO;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
	RCC->AHBENR |=0x40;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <Calculate_CRC_firmware+0x88>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <Calculate_CRC_firmware+0x88>)
 800098a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098e:	6153      	str	r3, [r2, #20]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 8000992:	2201      	movs	r2, #1
 8000994:	609a      	str	r2, [r3, #8]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e024      	b.n	80009e6 <Calculate_CRC_firmware+0x6e>
		/* Calculate CRC */
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3303      	adds	r3, #3
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	061a      	lsls	r2, r3, #24
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	440b      	add	r3, r1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	431a      	orrs	r2, r3
									   |(buffer_firmware[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer_firmware[Local_u8Count*4] <<SHIFT_0_BIT);
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	3301      	adds	r3, #1
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	440b      	add	r3, r1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4313      	orrs	r3, r2
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4611      	mov	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	440a      	add	r2, r1
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	4313      	orrs	r3, r2
		Local_u32CRC_Code = (buffer_firmware[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_firmware[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80009d8:	60bb      	str	r3, [r7, #8]
		CRC->DR  = Local_u32CRC_Code;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	6013      	str	r3, [r2, #0]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d9d7      	bls.n	800099c <Calculate_CRC_firmware+0x24>
	}
	Local_u32CRC_Code = CRC->DR;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <Calculate_CRC_firmware+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60bb      	str	r3, [r7, #8]
	return Local_u32CRC_Code;
 80009f2:	68bb      	ldr	r3, [r7, #8]

}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40023000 	.word	0x40023000

08000a08 <Encrypt_MainFunc>:
void Encrypt_MainFunc()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	gl_u32CRC_FragmentFW = INITIAL_VALUE_ZERO;
 8000a0e:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 8000a14:	4842      	ldr	r0, [pc, #264]	; (8000b20 <Encrypt_MainFunc+0x118>)
 8000a16:	f001 f835 	bl	8001a84 <Rte_SystemState_ReadData>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71bb      	strb	r3, [r7, #6]
	retVal = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8000a1e:	4841      	ldr	r0, [pc, #260]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a20:	f001 f968 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
 8000a24:	4603      	mov	r3, r0
 8000a26:	71bb      	strb	r3, [r7, #6]
	gl_ReadAddress = STORE_AREA_START_ADDRESS +(gl_u16NoPacket-1)*64;
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000a30:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a3a:	601a      	str	r2, [r3, #0]
	//Initialize Cyper IV ctx
	AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <Encrypt_MainFunc+0x124>)
 8000a3e:	493c      	ldr	r1, [pc, #240]	; (8000b30 <Encrypt_MainFunc+0x128>)
 8000a40:	483c      	ldr	r0, [pc, #240]	; (8000b34 <Encrypt_MainFunc+0x12c>)
 8000a42:	f003 fa39 	bl	8003eb8 <AES_init_ctx_iv>

	if(RTE_E_OKE == retVal){
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d163      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
		if(SYS_ENCRYPT_FW == gl_u8SystemState){
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <Encrypt_MainFunc+0x118>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	d15f      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e00f      	b.n	8000a7a <Encrypt_MainFunc+0x72>
				gl_u8FwFragment[local_counter] = (*(volatile uint8_t*)(gl_ReadAddress));
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	b2d1      	uxtb	r1, r2
 8000a66:	4a34      	ldr	r2, [pc, #208]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000a68:	54d1      	strb	r1, [r2, r3]
				gl_ReadAddress++;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <Encrypt_MainFunc+0x120>)
 8000a72:	6013      	str	r3, [r2, #0]
			for(uint8_t local_counter  = 0 ; local_counter < 64 ; local_counter++ ){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	3301      	adds	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7e:	d9ec      	bls.n	8000a5a <Encrypt_MainFunc+0x52>
			}
			//decrypt fw
			//Decrypt
			gl_u32CRC_FragmentFW = Calculate_CRC_firmware((uint8_t*) gl_u8FwFragment);
 8000a80:	482d      	ldr	r0, [pc, #180]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000a82:	f7ff ff79 	bl	8000978 <Calculate_CRC_firmware>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000a8a:	6013      	str	r3, [r2, #0]
			RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16NoPacket);
 8000a8c:	4825      	ldr	r0, [pc, #148]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000a8e:	f001 f931 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
			gl_u8CipherText[0]= ADDR_BROADCAST;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	701a      	strb	r2, [r3, #0]
			gl_u8CipherText[1]= ADDR_BROADCAST;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	705a      	strb	r2, [r3, #1]
			gl_u8CipherText[2] =FL_FRAGMENT_FIRMWARE;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000aa0:	22fe      	movs	r2, #254	; 0xfe
 8000aa2:	709a      	strb	r2, [r3, #2]
			gl_u8CipherText[3]= gl_u16NoPacket >> SHIFT_8_BIT;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ab0:	70da      	strb	r2, [r3, #3]
			gl_u8CipherText[4]= gl_u16NoPacket >> SHIFT_0_BIT;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <Encrypt_MainFunc+0x11c>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000aba:	711a      	strb	r2, [r3, #4]
			gl_u8CipherText[8] = gl_u32CRC_FragmentFW >>SHIFT_24_BIT;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0e1b      	lsrs	r3, r3, #24
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ac6:	721a      	strb	r2, [r3, #8]
			gl_u8CipherText[7] = gl_u32CRC_FragmentFW >>SHIFT_16_BIT;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0c1b      	lsrs	r3, r3, #16
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ad2:	71da      	strb	r2, [r3, #7]
			gl_u8CipherText[6] = gl_u32CRC_FragmentFW >>SHIFT_8_BIT;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ade:	719a      	strb	r2, [r3, #6]
			gl_u8CipherText[5] = gl_u32CRC_FragmentFW >>SHIFT_0_BIT;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <Encrypt_MainFunc+0x114>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000ae8:	715a      	strb	r2, [r3, #5]
			copy_Array((uint8_t*)gl_u8CipherText ,(uint8_t*) gl_u8FwFragment , 64);
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	4912      	ldr	r1, [pc, #72]	; (8000b38 <Encrypt_MainFunc+0x130>)
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000af0:	f004 fb79 	bl	80051e6 <copy_Array>

			/*Encrypt buffer to cyberText*/
			AES_CTR_xcrypt_buffer(&ctx_fw, gl_u8CipherText, 80);
 8000af4:	2250      	movs	r2, #80	; 0x50
 8000af6:	4911      	ldr	r1, [pc, #68]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <Encrypt_MainFunc+0x12c>)
 8000afa:	f003 ffde 	bl	8004aba <AES_CTR_xcrypt_buffer>
			retVal = RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_WriteData(gl_u8CipherText);
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <Encrypt_MainFunc+0x134>)
 8000b00:	f000 ffd2 	bl	8001aa8 <Rte_EncyptedBuffer_WriteData>
 8000b04:	4603      	mov	r3, r0
 8000b06:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <Encrypt_MainFunc+0x10c>
				// Set to Send Update
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_SEND_UPDATE);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 ffa6 	bl	8001a60 <Rte_SystemState_WriteData>
			}
		}

	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000188 	.word	0x20000188
 8000b20:	2000017c 	.word	0x2000017c
 8000b24:	20000184 	.word	0x20000184
 8000b28:	20000180 	.word	0x20000180
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2000018c 	.word	0x2000018c
 8000b38:	2000013c 	.word	0x2000013c
 8000b3c:	200000ec 	.word	0x200000ec

08000b40 <Decrypt_MainFunc>:
void Decrypt_MainFunc(uint8_t * gl_u8FwFragment){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	AES_CBC_decrypt_buffer(&ctx_fw_des, gl_u8FwFragment, 1024);
 8000b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <Decrypt_MainFunc+0x1c>)
 8000b50:	f003 ff7e 	bl	8004a50 <AES_CBC_decrypt_buffer>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000024c 	.word	0x2000024c

08000b60 <F_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void F_voidInitVariables (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <F_voidInitVariables+0x14>)
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <F_voidInitVariables+0x18>)
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000030c 	.word	0x2000030c
 8000b78:	08010000 	.word	0x08010000

08000b7c <F_FlashBlockToAddress>:


HAL_StatusTypeDef F_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000b90:	2300      	movs	r3, #0
 8000b92:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <F_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e024      	b.n	8000bea <F_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	e01d      	b.n	8000be2 <F_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	817b      	strh	r3, [r7, #10]
			F_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	897a      	ldrh	r2, [r7, #10]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f832 	bl	8000c36 <F_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <F_FlashBlockToAddress+0x78>)
 8000bda:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	3302      	adds	r3, #2
 8000be0:	81bb      	strh	r3, [r7, #12]
 8000be2:	89ba      	ldrh	r2, [r7, #12]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3dd      	bcc.n	8000ba6 <F_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000030c 	.word	0x2000030c

08000bf8 <F_Erase_Image>:

HAL_StatusTypeDef F_Erase_Image(uint32_t ImageAddress)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	44;
 8000c0c:	232c      	movs	r3, #44	; 0x2c
 8000c0e:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000c10:	f005 f812 	bl	8005c38 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000c14:	f107 0208 	add.w	r2, r7, #8
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 f8f2 	bl	8005e08 <HAL_FLASHEx_Erase>
 8000c24:	4603      	mov	r3, r0
 8000c26:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8000c28:	f005 f82c 	bl	8005c84 <HAL_FLASH_Lock>
	return Local_retVal;
 8000c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <F_FlashHalfWordToAddress>:


HAL_StatusTypeDef F_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000c36:	b5b0      	push	{r4, r5, r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000c42:	f004 fff9 	bl	8005c38 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	461c      	mov	r4, r3
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	4622      	mov	r2, r4
 8000c50:	462b      	mov	r3, r5
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 ff7f 	bl	8005b58 <HAL_FLASH_Program>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 8000c5e:	f005 f811 	bl	8005c84 <HAL_FLASH_Lock>

	return Local_retVal;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6c:	0000      	movs	r0, r0
	...

08000c70 <FL_Syns_Config>:
struct AES_ctx ctx_req;
static uint8_t AES_CTR_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CTR_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
//uint32_t FL_uint32localAddress = ACTIVE_IMAGE + 0x80 ;
FL_Return_t FL_Syns_Config(uint32_t unicast_address, uint8_t* buffer_req, uint8_t* buffer_resp
	, uint8_t SF ,  uint8_t BandWidth , uint8_t CR ){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af06      	add	r7, sp, #24
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	70fb      	strb	r3, [r7, #3]
	/* Add info to packet */
	buffer_req[3] = SF ;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3303      	adds	r3, #3
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = BandWidth ;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	7e3a      	ldrb	r2, [r7, #24]
 8000c8c:	701a      	strb	r2, [r3, #0]
	/*	Wait to get Response from Node */
	buffer_req[5] = CR ;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	3305      	adds	r3, #5
 8000c92:	7f3a      	ldrb	r2, [r7, #28]
 8000c94:	701a      	strb	r2, [r3, #0]
	if(LORA_IF_Stransmit_Request(&SX1278_2, (uint8_t*) buffer_req,(uint8_t*) buffer_resp ,
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <FL_Syns_Config+0xa0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2221      	movs	r2, #33	; 0x21
 8000c9c:	9201      	str	r2, [sp, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	9200      	str	r2, [sp, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <FL_Syns_Config+0xa4>)
 8000ca8:	f002 fb1a 	bl	80032e0 <LORA_IF_Stransmit_Request>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d124      	bne.n	8000cfc <FL_Syns_Config+0x8c>
			ret,GW_SYNC_CONFIG , MCU_RECEIVED_CONFIG ) == LORA_OKE)
	{
		if(LORA_IF_GetData_Frame(&SX1278_2 ,unicast_address ,(uint8_t*) buffer_resp , ret , 5000 , SIZE_BUFFER_16BYTES ,MCU_RECEIVED_CONFIG ) == 1)
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <FL_Syns_Config+0xa0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2221      	movs	r2, #33	; 0x21
 8000cb8:	9202      	str	r2, [sp, #8]
 8000cba:	2210      	movs	r2, #16
 8000cbc:	9201      	str	r2, [sp, #4]
 8000cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <FL_Syns_Config+0xa4>)
 8000cca:	f002 fa9f 	bl	800320c <LORA_IF_GetData_Frame>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d113      	bne.n	8000cfc <FL_Syns_Config+0x8c>
		{
			SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SF,
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	9305      	str	r3, [sp, #20]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9304      	str	r3, [sp, #16]
 8000cdc:	7f3b      	ldrb	r3, [r7, #28]
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	a306      	add	r3, pc, #24	; (adr r3, 8000d08 <FL_Syns_Config+0x98>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <FL_Syns_Config+0xa8>)
 8000cf4:	f002 f97e 	bl	8002ff4 <SX1278_init>
							BandWidth, CR, SX1278_LORA_CRC_EN, 16);
			// Setting LORA For Flashing
			return FL_SUCCESS;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <FL_Syns_Config+0x8e>
		}
	}
	return FL_FAIL;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	19de5080 	.word	0x19de5080
 8000d0c:	00000000 	.word	0x00000000
 8000d10:	200009f8 	.word	0x200009f8
 8000d14:	20001738 	.word	0x20001738
 8000d18:	20001608 	.word	0x20001608

08000d1c <Sequence_Process>:
//		return FL_SUCCESS ;
//	}
//	return FL_FAIL;
//}
/* Start Send Fragment */
FL_Return_t Sequence_Process(uint8_t* buffer_flashing_data){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if(LORA_IF_Stransmit_Fragment_Firmware(&SX1278_1,(uint8_t*) buffer_flashing_data  ) == LORA_OKE){
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <Sequence_Process+0x24>)
 8000d28:	f002 fb18 	bl	800335c <LORA_IF_Stransmit_Fragment_Firmware>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <Sequence_Process+0x1a>
		return FL_SUCCESS;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <Sequence_Process+0x1c>
	}
	return FL_FAIL;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20001608 	.word	0x20001608

08000d44 <Flashing_end>:
/* End Programming process*/
uint8_t Flashing_end(uint8_t broadcast_addr,uint32_t unicast_addr , uint8_t* buffer_packet, uint8_t* buffer_resp ,uint8_t ACK_REQ){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
	uint32_t counter=0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
	buffer_packet[0] = broadcast_addr ; // broadcast
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	701a      	strb	r2, [r3, #0]
	buffer_packet[1] = broadcast_addr ; // broadcast
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	701a      	strb	r2, [r3, #0]
	buffer_packet[2] = ACK_REQ;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d6e:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000d70:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <Flashing_end+0xac>)
 8000d72:	4920      	ldr	r1, [pc, #128]	; (8000df4 <Flashing_end+0xb0>)
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <Flashing_end+0xb4>)
 8000d76:	f003 f89f 	bl	8003eb8 <AES_init_ctx_iv>
	ret = SX1278_LoRaEntryTx(&SX1278_1, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000d7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d7e:	2150      	movs	r1, #80	; 0x50
 8000d80:	481e      	ldr	r0, [pc, #120]	; (8000dfc <Flashing_end+0xb8>)
 8000d82:	f002 f8a0 	bl	8002ec6 <SX1278_LoRaEntryTx>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <Flashing_end+0xbc>)
 8000d8c:	701a      	strb	r2, [r3, #0]
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8000d8e:	2250      	movs	r2, #80	; 0x50
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <Flashing_end+0xb4>)
 8000d94:	f003 fe91 	bl	8004aba <AES_CTR_xcrypt_buffer>
	while(1){
		 ret = SX1278_LoRaTxPacket(&SX1278_1, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 8000d98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d9c:	2250      	movs	r2, #80	; 0x50
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4816      	ldr	r0, [pc, #88]	; (8000dfc <Flashing_end+0xb8>)
 8000da2:	f002 f8e8 	bl	8002f76 <SX1278_LoRaTxPacket>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <Flashing_end+0xbc>)
 8000dac:	701a      	strb	r2, [r3, #0]
		 if(ret){
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <Flashing_end+0xbc>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00f      	beq.n	8000dd6 <Flashing_end+0x92>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <Flashing_end+0xc0>)
 8000dbc:	f005 fa7f 	bl	80062be <HAL_GPIO_TogglePin>
			 return LORA_IF_GetData_End_Frame(&SX1278_1, (uint8_t*) buffer_resp, unicast_addr,SIZE_BUFFER_112BYTES, MAX_TIME_OUT);
 8000dc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2370      	movs	r3, #112	; 0x70
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <Flashing_end+0xb8>)
 8000dce:	f002 fafb 	bl	80033c8 <LORA_IF_GetData_End_Frame>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e008      	b.n	8000de8 <Flashing_end+0xa4>
		 }
		 else{
			 counter++;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
			 if(counter == MAX_TRY_REQ)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d1d8      	bne.n	8000d98 <Flashing_end+0x54>
			 {
				 return -1;
 8000de6:	23ff      	movs	r3, #255	; 0xff
			 }
		}

	}
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000034 	.word	0x20000034
 8000df4:	20000024 	.word	0x20000024
 8000df8:	200009fc 	.word	0x200009fc
 8000dfc:	20001608 	.word	0x20001608
 8000e00:	200009f8 	.word	0x200009f8
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <Send_request>:

/*request get value from gateway*/
uint8_t Send_request(SX1278_t *module , uint32_t unicast_addr , uint8_t * buffer_req_2 , uint8_t ACK_REQ){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	70fb      	strb	r3, [r7, #3]
	buffer_req_2[0]  = (unicast_addr>>SHIFT_24_BIT)&0xff;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	0e1b      	lsrs	r3, r3, #24
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	701a      	strb	r2, [r3, #0]
	buffer_req_2[1]  = (unicast_addr>>SHIFT_16_BIT)&0xff;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	0c1a      	lsrs	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
	buffer_req_2[2]  = (unicast_addr>>SHIFT_8_BIT)&0xff;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	0a1a      	lsrs	r2, r3, #8
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3302      	adds	r3, #2
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	701a      	strb	r2, [r3, #0]
	buffer_req_2[3]  = (unicast_addr>>SHIFT_0_BIT)&0xff;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3303      	adds	r3, #3
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	701a      	strb	r2, [r3, #0]
	buffer_req_2[4]  = GW_REQ_PARAMETER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	228c      	movs	r2, #140	; 0x8c
 8000e48:	701a      	strb	r2, [r3, #0]
	uint32_t counter =0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000e4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e52:	2110      	movs	r1, #16
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f002 f836 	bl	8002ec6 <SX1278_LoRaEntryTx>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <Send_request+0x16c>)
 8000e60:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000e62:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <Send_request+0x170>)
 8000e64:	4945      	ldr	r1, [pc, #276]	; (8000f7c <Send_request+0x174>)
 8000e66:	4846      	ldr	r0, [pc, #280]	; (8000f80 <Send_request+0x178>)
 8000e68:	f003 f826 	bl	8003eb8 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req_2, 16);
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	4843      	ldr	r0, [pc, #268]	; (8000f80 <Send_request+0x178>)
 8000e72:	f003 fe22 	bl	8004aba <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8000e76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f002 f879 	bl	8002f76 <SX1278_LoRaTxPacket>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <Send_request+0x16c>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	if(ret){
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <Send_request+0x16c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <Send_request+0x96>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	483a      	ldr	r0, [pc, #232]	; (8000f84 <Send_request+0x17c>)
 8000e9a:	f005 fa10 	bl	80062be <HAL_GPIO_TogglePin>
	}
	ret = SX1278_LoRaEntryRx(module, 16, 3000);
 8000e9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f001 ff65 	bl	8002d74 <SX1278_LoRaEntryRx>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <Send_request+0x16c>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	while(1){
		//Rte_FlagLoRaResp_ReadData(&flag_LoRa);
		uint32_t local_u32addrNode_req = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
		ret = SX1278_LoRaRxPacket(module);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f001 ffc1 	bl	8002e3e <SX1278_LoRaRxPacket>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <Send_request+0x16c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <Send_request+0x16c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d042      	beq.n	8000f52 <Send_request+0x14a>
			ret = SX1278_read(module, (uint8_t*) buffer_resp_2, ret);
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <Send_request+0x16c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	492d      	ldr	r1, [pc, #180]	; (8000f88 <Send_request+0x180>)
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f002 f8ba 	bl	800304e <SX1278_read>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <Send_request+0x16c>)
 8000ee0:	701a      	strb	r2, [r3, #0]
			AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <Send_request+0x170>)
 8000ee4:	4925      	ldr	r1, [pc, #148]	; (8000f7c <Send_request+0x174>)
 8000ee6:	4826      	ldr	r0, [pc, #152]	; (8000f80 <Send_request+0x178>)
 8000ee8:	f002 ffe6 	bl	8003eb8 <AES_init_ctx_iv>
			AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp_2, 16);
 8000eec:	2210      	movs	r2, #16
 8000eee:	4926      	ldr	r1, [pc, #152]	; (8000f88 <Send_request+0x180>)
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <Send_request+0x178>)
 8000ef2:	f003 fde2 	bl	8004aba <AES_CTR_xcrypt_buffer>
			//convert buffer to address_node_req
			local_u32addrNode_req = (buffer_resp_2[0] << SHIFT_24_BIT) |(buffer_resp_2[1] << SHIFT_16_BIT)
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <Send_request+0x180>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	061a      	lsls	r2, r3, #24
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <Send_request+0x180>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	431a      	orrs	r2, r3
											 |(buffer_resp_2[2] << SHIFT_8_BIT) | (buffer_resp_2[3] << SHIFT_0_BIT);
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <Send_request+0x180>)
 8000f06:	789b      	ldrb	r3, [r3, #2]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <Send_request+0x180>)
 8000f0e:	78d2      	ldrb	r2, [r2, #3]
 8000f10:	4313      	orrs	r3, r2
			local_u32addrNode_req = (buffer_resp_2[0] << SHIFT_24_BIT) |(buffer_resp_2[1] << SHIFT_16_BIT)
 8000f12:	613b      	str	r3, [r7, #16]
			if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 ||
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <Send_request+0x184>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <Send_request+0x124>
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <Send_request+0x188>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d003      	beq.n	8000f2c <Send_request+0x124>
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <Send_request+0x18c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10d      	bne.n	8000f48 <Send_request+0x140>
					local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
			{
				HAL_UART_Transmit(&huart2, &buffer_resp_2, 16, HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2210      	movs	r2, #16
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Send_request+0x180>)
 8000f34:	4818      	ldr	r0, [pc, #96]	; (8000f98 <Send_request+0x190>)
 8000f36:	f007 fd71 	bl	8008a1c <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <Send_request+0x17c>)
 8000f40:	f005 f9bd 	bl	80062be <HAL_GPIO_TogglePin>
				return 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e010      	b.n	8000f6a <Send_request+0x162>
			}
			memset(buffer_resp_2 , 0xff ,16);
 8000f48:	2210      	movs	r2, #16
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	480e      	ldr	r0, [pc, #56]	; (8000f88 <Send_request+0x180>)
 8000f4e:	f008 fbad 	bl	80096ac <memset>
		}
		counter++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f004 fc19 	bl	8005790 <HAL_Delay>
		if(counter == 3000){
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d1a4      	bne.n	8000eb2 <Send_request+0xaa>
			return 0;
 8000f68:	2300      	movs	r3, #0
		}
	}
	//Get data from SPI_2


}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200009f8 	.word	0x200009f8
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	20000024 	.word	0x20000024
 8000f80:	200009fc 	.word	0x200009fc
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	200009e8 	.word	0x200009e8
 8000f8c:	26011bcd 	.word	0x26011bcd
 8000f90:	26011def 	.word	0x26011def
 8000f94:	260120f0 	.word	0x260120f0
 8000f98:	200015a4 	.word	0x200015a4

08000f9c <Flashing_Request>:
uint8_t Flashing_Request(uint8_t broadcast_addr ,uint8_t addr_node,  uint8_t* buffer_req ,uint8_t ACK_REQ ,uint8_t ACK_RESP ){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	603a      	str	r2, [r7, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	460b      	mov	r3, r1
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	717b      	strb	r3, [r7, #5]
	uint16_t counter_tx =0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	81fb      	strh	r3, [r7, #14]
	uint32_t Address_update = INIT_VAL_ZERO;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&Address_update);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fe1a 	bl	8001bf8 <Rte_NodeAddr_ReadData>
	buffer_req[0] =  (Address_update>> SHIFT_24_BIT)& 0xFF; // unicast addr
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	0e1b      	lsrs	r3, r3, #24
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = (Address_update>> SHIFT_16_BIT)& 0xFF ; // unicast addr
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	0c1a      	lsrs	r2, r3, #16
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = (Address_update>> SHIFT_8_BIT)& 0xFF ;  // unicast addr
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	0a1a      	lsrs	r2, r3, #8
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = (Address_update>> SHIFT_0_BIT)& 0xFF ;  // unicast addr
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3303      	adds	r3, #3
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = ACK_REQ;	// Not use
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	797a      	ldrb	r2, [r7, #5]
 8000ff6:	701a      	strb	r2, [r3, #0]
	//Get the current Packet;
	RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8000ff8:	f107 030e 	add.w	r3, r7, #14
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fe79 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
	ret = SX1278_LoRaEntryTx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001002:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001006:	2110      	movs	r1, #16
 8001008:	4819      	ldr	r0, [pc, #100]	; (8001070 <Flashing_Request+0xd4>)
 800100a:	f001 ff5c 	bl	8002ec6 <SX1278_LoRaEntryTx>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <Flashing_Request+0xd8>)
 8001014:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <Flashing_Request+0xdc>)
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <Flashing_Request+0xe0>)
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <Flashing_Request+0xe4>)
 800101c:	f002 ff4c 	bl	8003eb8 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_req, 16);
 8001020:	2210      	movs	r2, #16
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <Flashing_Request+0xe4>)
 8001026:	f003 fd48 	bl	8004aba <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(&SX1278_2, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 800102a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800102e:	2210      	movs	r2, #16
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	480f      	ldr	r0, [pc, #60]	; (8001070 <Flashing_Request+0xd4>)
 8001034:	f001 ff9f 	bl	8002f76 <SX1278_LoRaTxPacket>
 8001038:	4603      	mov	r3, r0
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <Flashing_Request+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]
	if(ret){
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <Flashing_Request+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00e      	beq.n	8001066 <Flashing_Request+0xca>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <Flashing_Request+0xe8>)
 800104e:	f005 f936 	bl	80062be <HAL_GPIO_TogglePin>
		counter_tx++;
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	3301      	adds	r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	81fb      	strh	r3, [r7, #14]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(counter_tx);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fe13 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <Flashing_Request+0xcc>
	}
	return -1;
 8001066:	23ff      	movs	r3, #255	; 0xff
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20001738 	.word	0x20001738
 8001074:	200009f8 	.word	0x200009f8
 8001078:	20000034 	.word	0x20000034
 800107c:	20000024 	.word	0x20000024
 8001080:	200009fc 	.word	0x200009fc
 8001084:	40010c00 	.word	0x40010c00

08001088 <Wait_Accept_OTA>:
uint8_t Wait_Accept_OTA(uint32_t addr_node,  uint8_t* buffer_resp ,uint8_t ACK_RESP ){
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	4613      	mov	r3, r2
 8001094:	71fb      	strb	r3, [r7, #7]
	uint32_t counter_rx = INITIAL_VALUE_ZERO;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
	uint32_t Node_Address_update = addr_node;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	61bb      	str	r3, [r7, #24]
	uint32_t Node_Address_receive = INITIAL_VALUE_ZERO;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
	ret = SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80010a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010a6:	2110      	movs	r1, #16
 80010a8:	482b      	ldr	r0, [pc, #172]	; (8001158 <Wait_Accept_OTA+0xd0>)
 80010aa:	f001 fe63 	bl	8002d74 <SX1278_LoRaEntryRx>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <Wait_Accept_OTA+0xd4>)
 80010b4:	701a      	strb	r2, [r3, #0]
	while(1){
		ret = SX1278_LoRaRxPacket(&SX1278_2);
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <Wait_Accept_OTA+0xd0>)
 80010b8:	f001 fec1 	bl	8002e3e <SX1278_LoRaRxPacket>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <Wait_Accept_OTA+0xd4>)
 80010c2:	701a      	strb	r2, [r3, #0]
		AES_init_ctx_iv(&ctx_req, AES_CTR_128_Key, AES_CTR_128_IV);
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <Wait_Accept_OTA+0xd8>)
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <Wait_Accept_OTA+0xdc>)
 80010c8:	4827      	ldr	r0, [pc, #156]	; (8001168 <Wait_Accept_OTA+0xe0>)
 80010ca:	f002 fef5 	bl	8003eb8 <AES_init_ctx_iv>
		if(ret > 0){
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <Wait_Accept_OTA+0xd4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d02d      	beq.n	8001132 <Wait_Accept_OTA+0xaa>
			ret = SX1278_read(&SX1278_2, (uint8_t*) buffer_resp, ret);
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <Wait_Accept_OTA+0xd4>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	481e      	ldr	r0, [pc, #120]	; (8001158 <Wait_Accept_OTA+0xd0>)
 80010e0:	f001 ffb5 	bl	800304e <SX1278_read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <Wait_Accept_OTA+0xd4>)
 80010ea:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx_req, (uint8_t*) buffer_resp, 16);
 80010ec:	2210      	movs	r2, #16
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	481d      	ldr	r0, [pc, #116]	; (8001168 <Wait_Accept_OTA+0xe0>)
 80010f2:	f003 fce2 	bl	8004aba <AES_CTR_xcrypt_buffer>
			Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	061a      	lsls	r2, r3, #24
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3301      	adds	r3, #1
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	431a      	orrs	r2, r3
								|(buffer_resp[2] << SHIFT_8_BIT)|(buffer_resp[3] << SHIFT_0_BIT);
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3302      	adds	r3, #2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	4313      	orrs	r3, r2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	3203      	adds	r2, #3
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	4313      	orrs	r3, r2
			Node_Address_receive = (buffer_resp[0] << SHIFT_24_BIT) |(buffer_resp[1] << SHIFT_16_BIT)
 8001118:	617b      	str	r3, [r7, #20]
			if(Node_Address_receive == Node_Address_update && buffer_resp[4]== ACK_RESP ){
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	429a      	cmp	r2, r3
 8001120:	d1c9      	bne.n	80010b6 <Wait_Accept_OTA+0x2e>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3304      	adds	r3, #4
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	429a      	cmp	r2, r3
 800112c:	d1c3      	bne.n	80010b6 <Wait_Accept_OTA+0x2e>
				return 1;
 800112e:	2301      	movs	r3, #1
 8001130:	e00d      	b.n	800114e <Wait_Accept_OTA+0xc6>
			}

		}
		else{
			counter_rx++;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
			//delay 1ms
			HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f004 fb29 	bl	8005790 <HAL_Delay>
			if(counter_rx == MAX_TRY_REQ)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001144:	4293      	cmp	r3, r2
 8001146:	d1b6      	bne.n	80010b6 <Wait_Accept_OTA+0x2e>
			{
				counter_rx = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
				return 0;
 800114c:	2300      	movs	r3, #0
			}
		}
	}
}
 800114e:	4618      	mov	r0, r3
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001738 	.word	0x20001738
 800115c:	200009f8 	.word	0x200009f8
 8001160:	20000034 	.word	0x20000034
 8001164:	20000024 	.word	0x20000024
 8001168:	200009fc 	.word	0x200009fc

0800116c <FL_u32ReadAddressData>:
		}

		}
}
// Using for testing flashing
uint32_t FL_u32ReadAddressData(uint32_t address){
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <FL_CalculateCRCFWLoRa>:

uint32_t FL_CalculateCRCFWLoRa(uint32_t u32Size_of_Image , uint32_t Active_Addr_Indicate){
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint32_t local_u32CRC = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <FL_CalculateCRCFWLoRa+0x74>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <FL_CalculateCRCFWLoRa+0x74>)
 800119c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a0:	6153      	str	r3, [r2, #20]
	u32Size_of_Image = u32Size_of_Image/4;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <FL_CalculateCRCFWLoRa+0x78>)
 80011aa:	7a1a      	ldrb	r2, [r3, #8]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	721a      	strb	r2, [r3, #8]
 80011b4:	7a5a      	ldrb	r2, [r3, #9]
 80011b6:	2200      	movs	r2, #0
 80011b8:	725a      	strb	r2, [r3, #9]
 80011ba:	7a9a      	ldrb	r2, [r3, #10]
 80011bc:	2200      	movs	r2, #0
 80011be:	729a      	strb	r2, [r3, #10]
 80011c0:	7ada      	ldrb	r2, [r3, #11]
 80011c2:	2200      	movs	r2, #0
 80011c4:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	e00b      	b.n	80011e4 <FL_CalculateCRCFWLoRa+0x5c>
		/* Calculate CRC */
		CRC->DR  = FL_u32ReadAddressData(Active_Addr_Indicate);
 80011cc:	4c0c      	ldr	r4, [pc, #48]	; (8001200 <FL_CalculateCRCFWLoRa+0x78>)
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff ffcc 	bl	800116c <FL_u32ReadAddressData>
 80011d4:	4603      	mov	r3, r0
 80011d6:	6023      	str	r3, [r4, #0]
		Active_Addr_Indicate+=4;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	603b      	str	r3, [r7, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d3ef      	bcc.n	80011cc <FL_CalculateCRCFWLoRa+0x44>
	}
	local_u32CRC = CRC->DR;
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <FL_CalculateCRCFWLoRa+0x78>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60bb      	str	r3, [r7, #8]
	return local_u32CRC;
 80011f2:	68bb      	ldr	r3, [r7, #8]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	40023000 	.word	0x40023000

08001204 <FL_CalculateCRCBItmaskLoRa>:
uint32_t FL_CalculateCRCBItmaskLoRa(uint32_t u32Size_of_bitmask , uint8_t *buffer){
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck;
	// Enable Clock for CRC
	RCC->AHBENR |=0x40;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <FL_CalculateCRCBItmaskLoRa+0xa4>)
 8001214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001218:	6153      	str	r3, [r2, #20]
	u32Size_of_bitmask = u32Size_of_bitmask/4;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
	uint32_t local_u32CRC ;
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001222:	7a1a      	ldrb	r2, [r3, #8]
 8001224:	2200      	movs	r2, #0
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	721a      	strb	r2, [r3, #8]
 800122c:	7a5a      	ldrb	r2, [r3, #9]
 800122e:	2200      	movs	r2, #0
 8001230:	725a      	strb	r2, [r3, #9]
 8001232:	7a9a      	ldrb	r2, [r3, #10]
 8001234:	2200      	movs	r2, #0
 8001236:	729a      	strb	r2, [r3, #10]
 8001238:	7ada      	ldrb	r2, [r3, #11]
 800123a:	2200      	movs	r2, #0
 800123c:	72da      	strb	r2, [r3, #11]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e023      	b.n	800128c <FL_CalculateCRCBItmaskLoRa+0x88>
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3303      	adds	r3, #3
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	061a      	lsls	r2, r3, #24
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	440b      	add	r3, r1
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	431a      	orrs	r2, r3
										|(buffer[Local_u32Count*4+1] <<SHIFT_8_BIT)|(buffer[Local_u32Count*4] <<SHIFT_0_BIT);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	3301      	adds	r3, #1
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	440b      	add	r3, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	4313      	orrs	r3, r2
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	440a      	add	r2, r1
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	4313      	orrs	r3, r2
		Local_u32PlayloadCheck = (buffer[Local_u32Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u32Count*4+2] <<SHIFT_16_BIT)
 800127e:	60fb      	str	r3, [r7, #12]
		/* Calculate CRC */
		CRC->DR  = Local_u32PlayloadCheck;
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6013      	str	r3, [r2, #0]
	for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_bitmask ; Local_u32Count++){
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3d7      	bcc.n	8001244 <FL_CalculateCRCBItmaskLoRa+0x40>
	}
	local_u32CRC = CRC->DR;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <FL_CalculateCRCBItmaskLoRa+0xa8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
	return local_u32CRC;
 800129a:	693b      	ldr	r3, [r7, #16]
}
 800129c:	4618      	mov	r0, r3
 800129e:	371c      	adds	r7, #28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40023000 	.word	0x40023000

080012b0 <Send_Start_OTA>:
//}

/*
 * @Request Start OTA
 */
void Send_Start_OTA(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af02      	add	r7, sp, #8
	gl_u32TargetAddr = INITIAL_VALUE_ZERO;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <Send_Start_OTA+0x38>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <Send_Start_OTA+0x38>)
 80012be:	f000 fc9b 	bl	8001bf8 <Rte_NodeAddr_ReadData>
	if(Flashing_Request(ADDR_BROADCAST, gl_u32TargetAddr, buffer_req, GW_START_OTA , MCU_ACCEPT_RESPONSE) == 1){
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <Send_Start_OTA+0x38>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b2d9      	uxtb	r1, r3
 80012c8:	2302      	movs	r3, #2
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <Send_Start_OTA+0x3c>)
 80012d0:	20ff      	movs	r0, #255	; 0xff
 80012d2:	f7ff fe63 	bl	8000f9c <Flashing_Request>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <Send_Start_OTA+0x32>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_WAIT_ACCEPT_OTA);
 80012dc:	2004      	movs	r0, #4
 80012de:	f000 fbbf 	bl	8001a60 <Rte_SystemState_WriteData>
	}
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000314 	.word	0x20000314
 80012ec:	200003fc 	.word	0x200003fc

080012f0 <Wait_Start_OTA>:

/*
 * @Flashing Start
 */
void Wait_Start_OTA(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	uint16_t counter_tx =0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	80fb      	strh	r3, [r7, #6]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 80012fa:	4829      	ldr	r0, [pc, #164]	; (80013a0 <Wait_Start_OTA+0xb0>)
 80012fc:	f000 fc7c 	bl	8001bf8 <Rte_NodeAddr_ReadData>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_CONFIG_LORA);
 8001300:	2005      	movs	r0, #5
 8001302:	f000 fbad 	bl	8001a60 <Rte_SystemState_WriteData>
	if(Wait_Accept_OTA(gl_u32TargetAddr,  (uint8_t*) buffer_resp , MCU_ACCEPT_RESPONSE ) == 1){
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <Wait_Start_OTA+0xb0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2202      	movs	r2, #2
 800130c:	4925      	ldr	r1, [pc, #148]	; (80013a4 <Wait_Start_OTA+0xb4>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feba 	bl	8001088 <Wait_Accept_OTA>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d03e      	beq.n	8001398 <Wait_Start_OTA+0xa8>

	}
	else {
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 800131a:	2003      	movs	r0, #3
 800131c:	f000 fba0 	bl	8001a60 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&counter_tx);
 8001320:	1dbb      	adds	r3, r7, #6
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fce6 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
		if(counter_tx == 10){
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d134      	bne.n	8001398 <Wait_Start_OTA+0xa8>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fb96 	bl	8001a60 <Rte_SystemState_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(GW_OUTOFREQUEST_ERROR);
 8001334:	201f      	movs	r0, #31
 8001336:	f000 fc83 	bl	8001c40 <Rte_UI_Error_WriteData>
			__HAL_DBGMCU_FREEZE_IWDG();
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <Wait_Start_OTA+0xb8>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <Wait_Start_OTA+0xb8>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6053      	str	r3, [r2, #4]
			hiwdg.Instance = IWDG;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <Wait_Start_OTA+0xbc>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001352:	705a      	strb	r2, [r3, #1]
 8001354:	2200      	movs	r2, #0
 8001356:	709a      	strb	r2, [r3, #2]
 8001358:	2200      	movs	r2, #0
 800135a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800135e:	70da      	strb	r2, [r3, #3]
			hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <Wait_Start_OTA+0xbc>)
 8001362:	2200      	movs	r2, #0
 8001364:	711a      	strb	r2, [r3, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	715a      	strb	r2, [r3, #5]
 800136a:	2200      	movs	r2, #0
 800136c:	719a      	strb	r2, [r3, #6]
 800136e:	2200      	movs	r2, #0
 8001370:	71da      	strb	r2, [r3, #7]
			hiwdg.Init.Reload = 9;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <Wait_Start_OTA+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	f042 0209 	orr.w	r2, r2, #9
 800137a:	721a      	strb	r2, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	725a      	strb	r2, [r3, #9]
 8001380:	2200      	movs	r2, #0
 8001382:	729a      	strb	r2, [r3, #10]
 8001384:	2200      	movs	r2, #0
 8001386:	72da      	strb	r2, [r3, #11]
			if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <Wait_Start_OTA+0xbc>)
 800138a:	f005 fd7b 	bl	8006e84 <HAL_IWDG_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <Wait_Start_OTA+0xa8>
			{
				Error_Handler();
 8001394:	f003 ff22 	bl	80051dc <Error_Handler>


	}


}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000314 	.word	0x20000314
 80013a4:	2000032c 	.word	0x2000032c
 80013a8:	e0042000 	.word	0xe0042000
 80013ac:	20001458 	.word	0x20001458

080013b0 <FL_FlashLoRa_INIT>:


void FL_FlashLoRa_INIT(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af02      	add	r7, sp, #8
 	gl_u8StatusFlash 			= 		INITIAL_VALUE_ZERO;
 80013b6:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <FL_FlashLoRa_INIT+0x13c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	gl_u16No_Packet_Flash		=		INITZERO_START+1;
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <FL_FlashLoRa_INIT+0x140>)
 80013be:	2201      	movs	r2, #1
 80013c0:	801a      	strh	r2, [r3, #0]
	gl_start_array_backup 		= 		INITIAL_VALUE_ZERO;
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <FL_FlashLoRa_INIT+0x144>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	gl_u32CRCFW 				= 		INITIAL_VALUE_ZERO;
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
	gl_u16AppVer 	   			= 		INITIAL_VALUE_ZERO;
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <FL_FlashLoRa_INIT+0x14c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
	gl_u32CodeSize 				=		INITIAL_VALUE_ZERO;
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
	gl_u8backup_flag 			=  		INITIAL_VALUE_ZERO;
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <FL_FlashLoRa_INIT+0x154>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
	buffer_flashing_data        = 		NULL_PTR;
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <FL_FlashLoRa_INIT+0x158>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
	//Calculate Number packet Lora SPI
	//Get Variable Via RTE FW
	//RTE_RUNNABLE_CRC_VALUE_ReadData(&gl_u32CRCFW);
	RTE_RUNNABLE_APP_VER_ReadData(&gl_u16AppVer);
 80013e6:	4845      	ldr	r0, [pc, #276]	; (80014fc <FL_FlashLoRa_INIT+0x14c>)
 80013e8:	f000 fbe2 	bl	8001bb0 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_CODE_SIZE_ReadData(&gl_u32CodeSize);
 80013ec:	4844      	ldr	r0, [pc, #272]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 80013ee:	f000 fbf1 	bl	8001bd4 <Rte_CodeSize_ReadData>

	gl_u16NumberPacket_LoRa = (uint16_t)(gl_u32CodeSize/PACKET_64bytes)+1;
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	099b      	lsrs	r3, r3, #6
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <FL_FlashLoRa_INIT+0x15c>)
 8001400:	801a      	strh	r2, [r3, #0]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&gl_u32TargetAddr);
 8001402:	4843      	ldr	r0, [pc, #268]	; (8001510 <FL_FlashLoRa_INIT+0x160>)
 8001404:	f000 fbf8 	bl	8001bf8 <Rte_NodeAddr_ReadData>

	//Calculate CRC
	gl_u32CRCFW = FL_CalculateCRCFWLoRa(gl_u32CodeSize, IMAGE_NEW_FIRMWARE);
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4941      	ldr	r1, [pc, #260]	; (8001514 <FL_FlashLoRa_INIT+0x164>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff feba 	bl	8001188 <FL_CalculateCRCFWLoRa>
 8001414:	4603      	mov	r3, r0
 8001416:	4a38      	ldr	r2, [pc, #224]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 8001418:	6013      	str	r3, [r2, #0]
	RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCFW);
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fb6c 	bl	8001afc <Rte_Crc_WriteData>

	// Get the Infor SW FLASH
	GW_Config_SetUp();
 8001424:	f000 fae6 	bl	80019f4 <GW_Config_SetUp>
	//Start Flashing
	// Pack inform to buffer
	// CRC
	buffer_req[0] = ADDR_BROADCAST;
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = ADDR_BROADCAST;
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001430:	22ff      	movs	r2, #255	; 0xff
 8001432:	705a      	strb	r2, [r3, #1]
	buffer_req[15] = (gl_u32CRCFW>>SHIFT_24_BIT);
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0e1b      	lsrs	r3, r3, #24
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 800143e:	73da      	strb	r2, [r3, #15]
	buffer_req[14] = (gl_u32CRCFW>>SHIFT_16_BIT);
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b33      	ldr	r3, [pc, #204]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 800144a:	739a      	strb	r2, [r3, #14]
	buffer_req[13] = (gl_u32CRCFW>>SHIFT_8_BIT);
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001456:	735a      	strb	r2, [r3, #13]
	buffer_req[12] = (gl_u32CRCFW>>SHIFT_0_BIT);
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <FL_FlashLoRa_INIT+0x148>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001460:	731a      	strb	r2, [r3, #12]
	// Appl ver
	buffer_req[11] =(gl_u16AppVer>>SHIFT_8_BIT);
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <FL_FlashLoRa_INIT+0x14c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29b      	uxth	r3, r3
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 800146e:	72da      	strb	r2, [r3, #11]
	buffer_req[10] =(gl_u16AppVer>>SHIFT_0_BIT);
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <FL_FlashLoRa_INIT+0x14c>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001478:	729a      	strb	r2, [r3, #10]
	// size Code
	buffer_req[9] =(gl_u32CodeSize>>SHIFT_24_BIT);
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0e1b      	lsrs	r3, r3, #24
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001484:	725a      	strb	r2, [r3, #9]
	buffer_req[8] =(gl_u32CodeSize>>SHIFT_16_BIT);
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0c1b      	lsrs	r3, r3, #16
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 8001490:	721a      	strb	r2, [r3, #8]
	buffer_req[7] =(gl_u32CodeSize>>SHIFT_8_BIT);
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 800149c:	71da      	strb	r2, [r3, #7]
	buffer_req[6] =(gl_u32CodeSize>>SHIFT_0_BIT);
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <FL_FlashLoRa_INIT+0x150>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 80014a6:	719a      	strb	r2, [r3, #6]
	// Node Addr
	if(FL_Syns_Config(gl_u32TargetAddr, (uint8_t*) buffer_req, (uint8_t*) buffer_resp, u8SF, u8BW, u8CR ) == FL_SUCCESS){
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <FL_FlashLoRa_INIT+0x160>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <FL_FlashLoRa_INIT+0x16c>)
 80014ae:	7819      	ldrb	r1, [r3, #0]
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <FL_FlashLoRa_INIT+0x170>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <FL_FlashLoRa_INIT+0x174>)
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	9201      	str	r2, [sp, #4]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	460b      	mov	r3, r1
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <FL_FlashLoRa_INIT+0x178>)
 80014c0:	4915      	ldr	r1, [pc, #84]	; (8001518 <FL_FlashLoRa_INIT+0x168>)
 80014c2:	f7ff fbd5 	bl	8000c70 <FL_Syns_Config>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10b      	bne.n	80014e4 <FL_FlashLoRa_INIT+0x134>

		/************Change SYSTEM TO SEND Update********************************/
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 80014cc:	2006      	movs	r0, #6
 80014ce:	f000 fac7 	bl	8001a60 <Rte_SystemState_WriteData>
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <FL_FlashLoRa_INIT+0x140>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fbd6 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
		HAL_Delay(1000);
 80014dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e0:	f004 f956 	bl	8005790 <HAL_Delay>
		//GW_State_Save_State(SYS_ENCRYPT_FW);
	}
	//Flashing_end(ADDR_SLAVE_NODE_1,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, number_packet);
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000310 	.word	0x20000310
 80014f0:	20000020 	.word	0x20000020
 80014f4:	20000311 	.word	0x20000311
 80014f8:	20000318 	.word	0x20000318
 80014fc:	2000031c 	.word	0x2000031c
 8001500:	20000320 	.word	0x20000320
 8001504:	20000327 	.word	0x20000327
 8001508:	2000040c 	.word	0x2000040c
 800150c:	20000324 	.word	0x20000324
 8001510:	20000314 	.word	0x20000314
 8001514:	08010000 	.word	0x08010000
 8001518:	200003fc 	.word	0x200003fc
 800151c:	20000abd 	.word	0x20000abd
 8001520:	20000abc 	.word	0x20000abc
 8001524:	20000abe 	.word	0x20000abe
 8001528:	2000032c 	.word	0x2000032c

0800152c <FL_getPacketlost>:
uint16_t FL_getPacketlost(uint8_t* buffer_Rx , uint16_t packetNumber){
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
	uint16_t index =  (packetNumber)/8;
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	81fb      	strh	r3, [r7, #14]
	uint16_t offset = (packetNumber)%8;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	81bb      	strh	r3, [r7, #12]
	return (buffer_Rx[index] >> offset) &0x01;
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	fa42 f303 	asr.w	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b29b      	uxth	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <FL_PacketLoRaSend_START>:
void FL_PacketLoRaSend_START(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af02      	add	r7, sp, #8
	uint8_t Local_u8StatusFlash = INITIAL_VALUE_ZERO;
 800156e:	2300      	movs	r3, #0
 8001570:	72fb      	strb	r3, [r7, #11]

	// clear buffer
	clearDataBuffer((uint8_t*) buffer_req, 16);
 8001572:	2110      	movs	r1, #16
 8001574:	4872      	ldr	r0, [pc, #456]	; (8001740 <FL_PacketLoRaSend_START+0x1d8>)
 8001576:	f003 fe7b 	bl	8005270 <clearDataBuffer>
	//getSizePacket(number_packet, (uint8_t*) buffer_req);
	if(gl_u16NumberPacket_LoRa>=0){
		//Get Data from EnCrypt cybertext
		RTE_RUNNABLE_ENCRYPT_DATA_BUFFER_ReadData(&buffer_flashing_data);
 800157a:	4872      	ldr	r0, [pc, #456]	; (8001744 <FL_PacketLoRaSend_START+0x1dc>)
 800157c:	f000 faa8 	bl	8001ad0 <Rte_EncyptedBuffer_ReadData>
		//FL_u128PasteBuffer((uint8_t *)buffer_flashing_data ,gl_u8No_Packet_Flash);
		// Check is missing packet

		if (gl_u16NumberPacket_LoRa >0){
 8001580:	4b71      	ldr	r3, [pc, #452]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <FL_PacketLoRaSend_START+0x50>
			//Send Packet Flashing
			Sequence_Process((uint8_t*)buffer_flashing_data );
 8001588:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <FL_PacketLoRaSend_START+0x1dc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fbc5 	bl	8000d1c <Sequence_Process>
			/*Display UI*/
			if(gl_u16NumberPacket_LoRa!=0)
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <FL_PacketLoRaSend_START+0x38>
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 800159a:	2006      	movs	r0, #6
 800159c:	f000 fa60 	bl	8001a60 <Rte_SystemState_WriteData>
			gl_u16NumberPacket_LoRa--;
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b67      	ldr	r3, [pc, #412]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 80015aa:	801a      	strh	r2, [r3, #0]
			gl_u16No_Packet_Flash++;
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b65      	ldr	r3, [pc, #404]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80015b6:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u8backup_flag == 1){
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <FL_PacketLoRaSend_START+0x1e8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10d      	bne.n	80015dc <FL_PacketLoRaSend_START+0x74>
			// Get the lost message number
			gl_u16No_Packet_Flash = buffer_number_pack_lost[lost_counter_pos];
 80015c0:	4b64      	ldr	r3, [pc, #400]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b64      	ldr	r3, [pc, #400]	; (8001758 <FL_PacketLoRaSend_START+0x1f0>)
 80015c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80015ce:	801a      	strh	r2, [r3, #0]
			lost_counter_pos++;
 80015d0:	4b60      	ldr	r3, [pc, #384]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b5e      	ldr	r3, [pc, #376]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 80015da:	801a      	strh	r2, [r3, #0]
		}
		if(gl_u16No_Packet_Flash == 0xffff){
 80015dc:	4b5b      	ldr	r3, [pc, #364]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d105      	bne.n	80015f4 <FL_PacketLoRaSend_START+0x8c>
			gl_u8backup_flag = 0;
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <FL_PacketLoRaSend_START+0x1e8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
			gl_u16No_Packet_Flash = 0;
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	801a      	strh	r2, [r3, #0]
		}
		gl_u8start_array_backup++;
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <FL_PacketLoRaSend_START+0x1f4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <FL_PacketLoRaSend_START+0x1f4>)
 80015fe:	701a      	strb	r2, [r3, #0]
		RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fb3f 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
		if(gl_u16NumberPacket_LoRa == 0){
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8092 	bne.w	8001738 <FL_PacketLoRaSend_START+0x1d0>
			Local_u8StatusFlash = Flashing_end(ADDR_BROADCAST , gl_u32TargetAddr
 8001614:	4b52      	ldr	r3, [pc, #328]	; (8001760 <FL_PacketLoRaSend_START+0x1f8>)
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	2339      	movs	r3, #57	; 0x39
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4b51      	ldr	r3, [pc, #324]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 800161e:	4a52      	ldr	r2, [pc, #328]	; (8001768 <FL_PacketLoRaSend_START+0x200>)
 8001620:	20ff      	movs	r0, #255	; 0xff
 8001622:	f7ff fb8f 	bl	8000d44 <Flashing_end>
 8001626:	4603      	mov	r3, r0
 8001628:	72fb      	strb	r3, [r7, #11]
								,(uint8_t*) buffer_packet , (uint8_t*) buffer_packet_Rx ,GW_ACKNOWLEDGE_FINISHING_SENDING_CODE );

			// Write status Flash to LORA RESP
			RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(Local_u8StatusFlash);
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fb3d 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
			RTE_RUNNABLE_UI_ERROR_WriteData(Local_u8StatusFlash);
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fb03 	bl	8001c40 <Rte_UI_Error_WriteData>
			switch (Local_u8StatusFlash) {
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	2b77      	cmp	r3, #119	; 0x77
 800163e:	d006      	beq.n	800164e <FL_PacketLoRaSend_START+0xe6>
 8001640:	2b77      	cmp	r3, #119	; 0x77
 8001642:	dc76      	bgt.n	8001732 <FL_PacketLoRaSend_START+0x1ca>
 8001644:	2b4f      	cmp	r3, #79	; 0x4f
 8001646:	d070      	beq.n	800172a <FL_PacketLoRaSend_START+0x1c2>
 8001648:	2b76      	cmp	r3, #118	; 0x76
 800164a:	d004      	beq.n	8001656 <FL_PacketLoRaSend_START+0xee>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
					//HAL_UART_Transmit(&huart2, gl_u8ErrorFlag, 1, HAL_MAX_DELAY);
					break;
				default:
					/*Unknown Error*/
					break;
 800164c:	e071      	b.n	8001732 <FL_PacketLoRaSend_START+0x1ca>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_DONE_UPDATE);
 800164e:	2008      	movs	r0, #8
 8001650:	f000 fa06 	bl	8001a60 <Rte_SystemState_WriteData>
					break;
 8001654:	e070      	b.n	8001738 <FL_PacketLoRaSend_START+0x1d0>
					memset(buffer_number_pack_lost , 0xffff , 64);
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800165c:	483e      	ldr	r0, [pc, #248]	; (8001758 <FL_PacketLoRaSend_START+0x1f0>)
 800165e:	f008 f825 	bl	80096ac <memset>
					uint16_t localcounter = INITIAL_VALUE_ZERO ;
 8001662:	2300      	movs	r3, #0
 8001664:	81fb      	strh	r3, [r7, #14]
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 8001668:	7a9b      	ldrb	r3, [r3, #10]
 800166a:	061a      	lsls	r2, r3, #24
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 800166e:	7a5b      	ldrb	r3, [r3, #9]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
												|(buffer_packet_Rx[8] << SHIFT_8_BIT)|(buffer_packet_Rx[7] << SHIFT_0_BIT);
 8001674:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 8001676:	7a1b      	ldrb	r3, [r3, #8]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	4313      	orrs	r3, r2
 800167c:	4a39      	ldr	r2, [pc, #228]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 800167e:	79d2      	ldrb	r2, [r2, #7]
 8001680:	4313      	orrs	r3, r2
					uint32_t CRC_bitmask_req =(buffer_packet_Rx[10] << SHIFT_24_BIT)|(buffer_packet_Rx[9] << SHIFT_16_BIT)
 8001682:	607b      	str	r3, [r7, #4]
					copy_Array_BL(u8buffer_Pack_Lost, buffer_packet_Rx,11,88);
 8001684:	2358      	movs	r3, #88	; 0x58
 8001686:	220b      	movs	r2, #11
 8001688:	4936      	ldr	r1, [pc, #216]	; (8001764 <FL_PacketLoRaSend_START+0x1fc>)
 800168a:	4838      	ldr	r0, [pc, #224]	; (800176c <FL_PacketLoRaSend_START+0x204>)
 800168c:	f003 fdcc 	bl	8005228 <copy_Array_BL>
					if (FL_CalculateCRCBItmaskLoRa(88,u8buffer_Pack_Lost ) == CRC_bitmask_req){
 8001690:	4936      	ldr	r1, [pc, #216]	; (800176c <FL_PacketLoRaSend_START+0x204>)
 8001692:	2058      	movs	r0, #88	; 0x58
 8001694:	f7ff fdb6 	bl	8001204 <FL_CalculateCRCBItmaskLoRa>
 8001698:	4602      	mov	r2, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4293      	cmp	r3, r2
 800169e:	d14a      	bne.n	8001736 <FL_PacketLoRaSend_START+0x1ce>
						lost_counter_pos = 0;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
						RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 faec 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 80016b0:	2300      	movs	r3, #0
 80016b2:	81bb      	strh	r3, [r7, #12]
 80016b4:	e014      	b.n	80016e0 <FL_PacketLoRaSend_START+0x178>
							if(!FL_getPacketlost((uint8_t*) u8buffer_Pack_Lost , i )){
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	4619      	mov	r1, r3
 80016ba:	482c      	ldr	r0, [pc, #176]	; (800176c <FL_PacketLoRaSend_START+0x204>)
 80016bc:	f7ff ff36 	bl	800152c <FL_getPacketlost>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <FL_PacketLoRaSend_START+0x172>
								buffer_number_pack_lost[localcounter] = i+1;
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	89ba      	ldrh	r2, [r7, #12]
 80016ca:	3201      	adds	r2, #1
 80016cc:	b291      	uxth	r1, r2
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <FL_PacketLoRaSend_START+0x1f0>)
 80016d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								localcounter++;
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	3301      	adds	r3, #1
 80016d8:	81fb      	strh	r3, [r7, #14]
						for(uint16_t i=0 ; i < gl_u16No_Packet_Flash-1 ;i++){
 80016da:	89bb      	ldrh	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	81bb      	strh	r3, [r7, #12]
 80016e0:	89ba      	ldrh	r2, [r7, #12]
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbe4      	blt.n	80016b6 <FL_PacketLoRaSend_START+0x14e>
						gl_u16NumberPacket_LoRa = localcounter;
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <FL_PacketLoRaSend_START+0x1e0>)
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	8013      	strh	r3, [r2, #0]
						gl_u8backup_flag =1;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <FL_PacketLoRaSend_START+0x1e8>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
						lost_counter_pos++;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <FL_PacketLoRaSend_START+0x1ec>)
 8001702:	801a      	strh	r2, [r3, #0]
						gl_u16No_Packet_Flash = buffer_number_pack_lost[INITIAL_VALUE_ZERO];
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <FL_PacketLoRaSend_START+0x1f0>)
 8001706:	881a      	ldrh	r2, [r3, #0]
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 800170a:	801a      	strh	r2, [r3, #0]
						if(gl_u16No_Packet_Flash != 0xffff){
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d00e      	beq.n	8001736 <FL_PacketLoRaSend_START+0x1ce>
							RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16No_Packet_Flash);
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <FL_PacketLoRaSend_START+0x1e4>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fab3 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
							RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_ENCRYPT_FW);
 8001722:	2006      	movs	r0, #6
 8001724:	f000 f99c 	bl	8001a60 <Rte_SystemState_WriteData>
					break;
 8001728:	e005      	b.n	8001736 <FL_PacketLoRaSend_START+0x1ce>
					RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f998 	bl	8001a60 <Rte_SystemState_WriteData>
					break;
 8001730:	e002      	b.n	8001738 <FL_PacketLoRaSend_START+0x1d0>
					break;
 8001732:	bf00      	nop
 8001734:	e000      	b.n	8001738 <FL_PacketLoRaSend_START+0x1d0>
					break;
 8001736:	bf00      	nop
			}
		}
	}
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200003fc 	.word	0x200003fc
 8001744:	2000040c 	.word	0x2000040c
 8001748:	20000324 	.word	0x20000324
 800174c:	20000020 	.word	0x20000020
 8001750:	20000327 	.word	0x20000327
 8001754:	20000328 	.word	0x20000328
 8001758:	20000468 	.word	0x20000468
 800175c:	20000326 	.word	0x20000326
 8001760:	20000314 	.word	0x20000314
 8001764:	2000033c 	.word	0x2000033c
 8001768:	200003ac 	.word	0x200003ac
 800176c:	20000410 	.word	0x20000410

08001770 <HAL_TIM_PeriodElapsedCallback>:
//		}
//	}
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d121      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x56>
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_FlagLoraSendDevice);
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001784:	f000 faec 	bl	8001d60 <Rte_Flag_LoRaRequestDevice_ReadData>
	  if(gl_FlagLoraSendDevice == 0x00)
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <HAL_TIM_PeriodElapsedCallback+0x28>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 8001790:	2001      	movs	r0, #1
 8001792:	f000 fad3 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
	  else if(gl_FlagLoraSendDevice == 0x02)
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x03);
	  else if(gl_FlagLoraSendDevice == 0x03)
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
  }
}
 8001796:	e016      	b.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x56>
	  else if(gl_FlagLoraSendDevice == 0x01)
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d103      	bne.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x38>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x02);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f000 facb 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
}
 80017a6:	e00e      	b.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x56>
	  else if(gl_FlagLoraSendDevice == 0x02)
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d103      	bne.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x48>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x03);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 fac3 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
}
 80017b6:	e006      	b.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x56>
	  else if(gl_FlagLoraSendDevice == 0x03)
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d102      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x56>
		  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x01);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 fabb 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000032a 	.word	0x2000032a

080017d4 <GW_Config_GetParameter>:

// Global Parameter
uint8_t u8BW; // Bandwidth
uint8_t u8SF; // Spreading Frequency
uint8_t u8CR; // Coding Rate
uint32_t GW_Config_GetParameter(uint32_t Address){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return *((volatile uint32_t*)(Address));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <GW_voidEraseRestoreConfigPage>:


void GW_voidEraseRestoreConfigPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 80017ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017f0:	b0b2      	sub	sp, #200	; 0xc8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <GW_voidEraseRestoreConfigPage+0x124>)
 800180c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001810:	e031      	b.n	8001876 <GW_voidEraseRestoreConfigPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8001812:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	bf14      	ite	ne
 800181c:	2301      	movne	r3, #1
 800181e:	2300      	moveq	r3, #0
 8001820:	b2da      	uxtb	r2, r3
 8001822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4013      	ands	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d017      	beq.n	800186c <GW_voidEraseRestoreConfigPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 800183c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	33c8      	adds	r3, #200	; 0xc8
 8001844:	443b      	add	r3, r7
 8001846:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800184a:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 800184e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001852:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	33c8      	adds	r3, #200	; 0xc8
 800185c:	443b      	add	r3, r7
 800185e:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 8001862:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001866:	3301      	adds	r3, #1
 8001868:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 800186c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001870:	3304      	adds	r3, #4
 8001872:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = GW_START_OF_FLAG_ADDR ;Local_u32AddressCounter < GW_END_OF_FLAG_ADDR;)
 8001876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800187a:	4a26      	ldr	r2, [pc, #152]	; (8001914 <GW_voidEraseRestoreConfigPage+0x128>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d9c8      	bls.n	8001812 <GW_voidEraseRestoreConfigPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_STATUS_GW_CONFIG;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <GW_voidEraseRestoreConfigPage+0x124>)
 800188a:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8001890:	f004 f9d2 	bl	8005c38 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8001894:	f107 020c 	add.w	r2, r7, #12
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fab2 	bl	8005e08 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80018aa:	e01a      	b.n	80018e2 <GW_voidEraseRestoreConfigPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 80018ac:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	33c8      	adds	r3, #200	; 0xc8
 80018b4:	443b      	add	r3, r7
 80018b6:	f853 1c58 	ldr.w	r1, [r3, #-88]
 80018ba:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	33c8      	adds	r3, #200	; 0xc8
 80018c2:	443b      	add	r3, r7
 80018c4:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80018c8:	2200      	movs	r2, #0
 80018ca:	4698      	mov	r8, r3
 80018cc:	4691      	mov	r9, r2
 80018ce:	4642      	mov	r2, r8
 80018d0:	464b      	mov	r3, r9
 80018d2:	2002      	movs	r0, #2
 80018d4:	f004 f940 	bl	8005b58 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80018d8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80018dc:	3301      	adds	r3, #1
 80018de:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80018e2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80018e6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3de      	bcc.n	80018ac <GW_voidEraseRestoreConfigPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	461c      	mov	r4, r3
 80018f4:	4615      	mov	r5, r2
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	2002      	movs	r0, #2
 80018fe:	f004 f92b 	bl	8005b58 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8001902:	f004 f9bf 	bl	8005c84 <HAL_FLASH_Lock>
}
 8001906:	bf00      	nop
 8001908:	37c8      	adds	r7, #200	; 0xc8
 800190a:	46bd      	mov	sp, r7
 800190c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001910:	0801fc00 	.word	0x0801fc00
 8001914:	0801fc4f 	.word	0x0801fc4f

08001918 <GW_Config_Init>:


void GW_Config_Init(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278_1, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 800191e:	2310      	movs	r3, #16
 8001920:	9305      	str	r3, [sp, #20]
 8001922:	2300      	movs	r3, #0
 8001924:	9304      	str	r3, [sp, #16]
 8001926:	2300      	movs	r3, #0
 8001928:	9303      	str	r3, [sp, #12]
 800192a:	2307      	movs	r3, #7
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2306      	movs	r3, #6
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2301      	movs	r3, #1
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	a31f      	add	r3, pc, #124	; (adr r3, 80019b4 <GW_Config_Init+0x9c>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <GW_Config_Init+0x88>)
 800193e:	f001 fb59 	bl	8002ff4 <SX1278_init>
				SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	SX1278_init(&SX1278_2, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 8001942:	2310      	movs	r3, #16
 8001944:	9305      	str	r3, [sp, #20]
 8001946:	2300      	movs	r3, #0
 8001948:	9304      	str	r3, [sp, #16]
 800194a:	2300      	movs	r3, #0
 800194c:	9303      	str	r3, [sp, #12]
 800194e:	2307      	movs	r3, #7
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2306      	movs	r3, #6
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2301      	movs	r3, #1
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	a30f      	add	r3, pc, #60	; (adr r3, 8001998 <GW_Config_Init+0x80>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <GW_Config_Init+0x8c>)
 8001962:	f001 fb47 	bl	8002ff4 <SX1278_init>
					SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);

	//init Lora RA-02 spi 2 RX mode
	//SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	RTE_RUNNABLE_APP_VER_WriteData(GW_Config_GetParameter(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS));
 8001966:	4810      	ldr	r0, [pc, #64]	; (80019a8 <GW_Config_Init+0x90>)
 8001968:	f7ff ff34 	bl	80017d4 <GW_Config_GetParameter>
 800196c:	4603      	mov	r3, r0
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f8d5 	bl	8001b20 <Rte_ApplVer_WriteData>
	RTE_RUNNABLE_NODE_ADDR_WriteData(GW_Config_GetParameter(FLAG_STATUS_ADDRESS_TARGET_ADDRESS));
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <GW_Config_Init+0x94>)
 8001978:	f7ff ff2c 	bl	80017d4 <GW_Config_GetParameter>
 800197c:	4603      	mov	r3, r0
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8f2 	bl	8001b68 <Rte_NodeAddr_WriteData>
	RTE_RUNNABLE_CODE_SIZE_WriteData(GW_Config_GetParameter(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS));
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <GW_Config_Init+0x98>)
 8001986:	f7ff ff25 	bl	80017d4 <GW_Config_GetParameter>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f8d9 	bl	8001b44 <Rte_CodeSize_WriteData>
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	19cf0e40 	.word	0x19cf0e40
 800199c:	00000000 	.word	0x00000000
 80019a0:	20001608 	.word	0x20001608
 80019a4:	20001738 	.word	0x20001738
 80019a8:	0801fc30 	.word	0x0801fc30
 80019ac:	0801fc34 	.word	0x0801fc34
 80019b0:	0801fc38 	.word	0x0801fc38
 80019b4:	19de5080 	.word	0x19de5080
 80019b8:	00000000 	.word	0x00000000

080019bc <GW_State_Init>:

void GW_State_Save_State(uint8_t State){
	GW_voidEraseRestoreConfigPage(FLAG_STATE_GW_CONFIG,State );
}
void GW_State_Init(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	uint8_t local_state = 0 ;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
	local_state = GW_Config_GetParameter(FLAG_STATE_GW_CONFIG);
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <GW_State_Init+0x34>)
 80019c8:	f7ff ff04 	bl	80017d4 <GW_Config_GetParameter>
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
	if (local_state  == 0xFF){
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d103      	bne.n	80019de <GW_State_Init+0x22>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f842 	bl	8001a60 <Rte_SystemState_WriteData>
	}
	else{
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
	}
}
 80019dc:	e003      	b.n	80019e6 <GW_State_Init+0x2a>
		RTE_RUNNABLE_SYSTEM_STATE_WriteData(local_state);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f83d 	bl	8001a60 <Rte_SystemState_WriteData>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	0801fc08 	.word	0x0801fc08

080019f4 <GW_Config_SetUp>:
void GW_Config_SetUp(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	uint32_t GW_u32LocalStatus_GW_Config = GW_Config_GetParameter(FLAG_STATUS_GW_CONFIG);
 80019fa:	4813      	ldr	r0, [pc, #76]	; (8001a48 <GW_Config_SetUp+0x54>)
 80019fc:	f7ff feea 	bl	80017d4 <GW_Config_GetParameter>
 8001a00:	6078      	str	r0, [r7, #4]
	uint32_t GW_u32LocalParameter= GW_Config_GetParameter(FLAG_PARAMETER_GW_CONFIG);
 8001a02:	4812      	ldr	r0, [pc, #72]	; (8001a4c <GW_Config_SetUp+0x58>)
 8001a04:	f7ff fee6 	bl	80017d4 <GW_Config_GetParameter>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	603b      	str	r3, [r7, #0]
	// Get Parameter

	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_RESET ){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <GW_Config_SetUp+0x26>

		// SET CONFIG Value as Default
		GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG ,GW_CONFIG_PARAMETER_SF_BW_CR_DEFAULT );
 8001a12:	490f      	ldr	r1, [pc, #60]	; (8001a50 <GW_Config_SetUp+0x5c>)
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <GW_Config_SetUp+0x58>)
 8001a16:	f7ff fee9 	bl	80017ec <GW_voidEraseRestoreConfigPage>
	}
	if(GW_u32LocalStatus_GW_Config == GW_CONFIG_PARAMETER_SET ){
		// do nothing
	}
	RTE_RUNNABLE_CONFIG_LORA_ReadData(&GW_u32LocalParameter);
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f97b 	bl	8001d18 <Rte_FlagConfigLoRA_ReadData>
	u8SF = (GW_u32LocalParameter >> SHIFT_16_BIT)& 0xFF ;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <GW_Config_SetUp+0x60>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	u8BW = (GW_u32LocalParameter >> SHIFT_8_BIT)& 0xFF ;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <GW_Config_SetUp+0x64>)
 8001a34:	701a      	strb	r2, [r3, #0]
	u8CR = (GW_u32LocalParameter >> SHIFT_0_BIT)& 0xFF ;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <GW_Config_SetUp+0x68>)
 8001a3c:	701a      	strb	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0801fc00 	.word	0x0801fc00
 8001a4c:	0801fc04 	.word	0x0801fc04
 8001a50:	00010801 	.word	0x00010801
 8001a54:	20000abd 	.word	0x20000abd
 8001a58:	20000abc 	.word	0x20000abc
 8001a5c:	20000abe 	.word	0x20000abe

08001a60 <Rte_SystemState_WriteData>:
static uint8_t *gl_DataBufferLoRaPtr =  NULL_PTR;
/*Port*/
/**************************************************************************/
/*                         Ports Write SystemState                         */
/**************************************************************************/
Std_ReturnType Rte_SystemState_WriteData(uint8_t SystemStateVar){
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
	gl_u8SystemState = SystemStateVar;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <Rte_SystemState_WriteData+0x20>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000abf 	.word	0x20000abf

08001a84 <Rte_SystemState_ReadData>:
/**************************************************************************/
/*                         Ports Read SystemState                        */
/**************************************************************************/
Std_ReturnType Rte_SystemState_ReadData(uint8_t *SystemStateVar){
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
	(*SystemStateVar) = gl_u8SystemState;
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <Rte_SystemState_ReadData+0x20>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000abf 	.word	0x20000abf

08001aa8 <Rte_EncyptedBuffer_WriteData>:
/**************************************************************************/
/*                         Ports Write Encrypt                            */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_WriteData(uint8_t *EncyptedBufferP2Var){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <Rte_EncyptedBuffer_WriteData+0x18>
		gl_EncryptDataBufferPtr = EncyptedBufferP2Var;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <Rte_EncyptedBuffer_WriteData+0x24>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]
	return retVal;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000ad4 	.word	0x20000ad4

08001ad0 <Rte_EncyptedBuffer_ReadData>:
	return retVal;
}
/**************************************************************************/
/*                         Ports Read Encrypt                             */
/**************************************************************************/
Std_ReturnType Rte_EncyptedBuffer_ReadData(uint8_t **EncyptedBufferP2Var){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
	if(EncyptedBufferP2Var != NULL_PTR)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <Rte_EncyptedBuffer_ReadData+0x1a>
		(*EncyptedBufferP2Var) = gl_EncryptDataBufferPtr;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <Rte_EncyptedBuffer_ReadData+0x28>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
	return retVal;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000ad4 	.word	0x20000ad4

08001afc <Rte_Crc_WriteData>:


/**************************************************************************/
/*                         Ports Write Update FW                         */
/**************************************************************************/
Std_ReturnType Rte_Crc_WriteData(uint32_t CRCVar){
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
	gl_u32CRCVar = CRCVar;
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <Rte_Crc_WriteData+0x20>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
	return retVal;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000ac0 	.word	0x20000ac0

08001b20 <Rte_ApplVer_WriteData>:
Std_ReturnType Rte_ApplVer_WriteData(uint16_t ApplVerVar){
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
	gl_u8ApplVerVar = ApplVerVar;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <Rte_ApplVer_WriteData+0x20>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	8013      	strh	r3, [r2, #0]
	return retVal;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000ac4 	.word	0x20000ac4

08001b44 <Rte_CodeSize_WriteData>:
Std_ReturnType Rte_CodeSize_WriteData(uint32_t CodeSizeVar){
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
	gl_u32CodeSizeVar = CodeSizeVar;
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <Rte_CodeSize_WriteData+0x20>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
	return retVal;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000ac8 	.word	0x20000ac8

08001b68 <Rte_NodeAddr_WriteData>:
Std_ReturnType Rte_NodeAddr_WriteData(uint32_t NodeAddrVar){
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
	gl_u32NodeAddrVar = NodeAddrVar;
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <Rte_NodeAddr_WriteData+0x20>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
	return retVal;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000acc 	.word	0x20000acc

08001b8c <Rte_UpdateProgress_WriteData>:
{
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8HeaderAckFLagVar = HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_WriteData(uint8_t UpdateProgressVar){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
	gl_u8UpdateProgressVar = UpdateProgressVar;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <Rte_UpdateProgress_WriteData+0x20>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000ad0 	.word	0x20000ad0

08001bb0 <Rte_ApplVer_ReadData>:
Std_ReturnType Rte_Crc_ReadData(uint32_t *CRCVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*CRCVar) = gl_u32CRCVar;
	return retVal;
}
Std_ReturnType Rte_ApplVer_ReadData(uint16_t *ApplVerVar){
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
	(*ApplVerVar) = gl_u8ApplVerVar;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <Rte_ApplVer_ReadData+0x20>)
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	801a      	strh	r2, [r3, #0]
	return retVal;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000ac4 	.word	0x20000ac4

08001bd4 <Rte_CodeSize_ReadData>:
Std_ReturnType Rte_CodeSize_ReadData(uint32_t *CodeSizeVar){
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
	(*CodeSizeVar) = gl_u32CodeSizeVar;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <Rte_CodeSize_ReadData+0x20>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
	return retVal;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000ac8 	.word	0x20000ac8

08001bf8 <Rte_NodeAddr_ReadData>:
Std_ReturnType Rte_NodeAddr_ReadData(uint32_t *NodeAddrVar){
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
	(*NodeAddrVar) = gl_u32NodeAddrVar;
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <Rte_NodeAddr_ReadData+0x20>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]
	return retVal;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000acc 	.word	0x20000acc

08001c1c <Rte_UpdateProgress_ReadData>:
Std_ReturnType Rte_HeaderAckFlag_ReadData(uint8_t *HeaderAckFLagVar){
	Std_ReturnType retVal = RTE_E_OKE;
	(*HeaderAckFLagVar) = gl_u8HeaderAckFLagVar;
	return retVal;
}
Std_ReturnType Rte_UpdateProgress_ReadData(uint8_t *UpdateProgressVar){
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
	(*UpdateProgressVar) = gl_u8UpdateProgressVar;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <Rte_UpdateProgress_ReadData+0x20>)
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000ad0 	.word	0x20000ad0

08001c40 <Rte_UI_Error_WriteData>:
	Std_ReturnType retVal = RTE_E_OKE;
	gl_u8UserResponseVar = UserResponseVar;
	return retVal;
}

Std_ReturnType Rte_UI_Error_WriteData(uint8_t UIErrorVar){
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
	gl_u8UIErrorVar = UIErrorVar;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <Rte_UI_Error_WriteData+0x20>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000ad8 	.word	0x20000ad8

08001c64 <Rte_UI_Error_ReadData>:

/**************************************************************************/
/*                        Ports  Read UI						 		  */
/**************************************************************************/
Std_ReturnType Rte_UI_Error_ReadData(uint8_t *UIErrorVar ){
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
	(*UIErrorVar) = gl_u8UIErrorVar;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <Rte_UI_Error_ReadData+0x20>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000ad8 	.word	0x20000ad8

08001c88 <Rte_PacketSendLoraNum_WriteData>:
	return retVal;
}
/**************************************************************************/
/*                        Ports  Write num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_WriteData(uint16_t NumPacketLoraFWVar){
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType retVal = RTE_E_OKE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
	gl_u16NumPacketLoraFWVar = NumPacketLoraFWVar;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <Rte_PacketSendLoraNum_WriteData+0x20>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	8013      	strh	r3, [r2, #0]
	return retVal;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000ada 	.word	0x20000ada

08001cac <Rte_FlagLoRaResp_WriteData>:

Std_ReturnType Rte_FlagLoRaResp_WriteData(uint8_t FlagLoRaRespVar){
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRaRespVar = FlagLoRaRespVar;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <Rte_FlagLoRaResp_WriteData+0x20>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000adc 	.word	0x20000adc

08001cd0 <Rte_FlagConfigLoRA_WriteData>:

Std_ReturnType Rte_FlagConfigLoRA_WriteData(uint32_t FlagLoraConfigVar){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
	gl_u32FlagLoraConfigVar = FlagLoraConfigVar;
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <Rte_FlagConfigLoRA_WriteData+0x20>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
	return retVal;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000ae0 	.word	0x20000ae0

08001cf4 <Rte_PacketSendLoraNum_ReadData>:


/**************************************************************************/
/*                        Ports  Read num packet FW Lora		 		  */
/**************************************************************************/
Std_ReturnType Rte_PacketSendLoraNum_ReadData(uint16_t *NumPacketLoraFWVar){
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
	(*NumPacketLoraFWVar) = gl_u16NumPacketLoraFWVar;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <Rte_PacketSendLoraNum_ReadData+0x20>)
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	801a      	strh	r2, [r3, #0]
	return retVal;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000ada 	.word	0x20000ada

08001d18 <Rte_FlagConfigLoRA_ReadData>:
	Std_ReturnType retVal = RTE_E_OKE;
	(*FlagLoRaRespVar) = gl_u8FlagLoRaRespVar;
	return retVal;
}

Std_ReturnType Rte_FlagConfigLoRA_ReadData(uint32_t *FlagLoraConfigVar){
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
	(*FlagLoraConfigVar) =gl_u32FlagLoraConfigVar ;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <Rte_FlagConfigLoRA_ReadData+0x20>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]
	return retVal;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000ae0 	.word	0x20000ae0

08001d3c <Rte_Flag_LoRaRequestDevice_WriteData>:
	(*BufferLoRaReceivedP2Var) = gl_DataBufferLoRaPtr;
	return retVal;
}


Std_ReturnType Rte_Flag_LoRaRequestDevice_WriteData(uint8_t FlagLoRa_DeviceVar){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType retVal = RTE_E_OKE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
	gl_u8FlagLoRa_DeviceVar = FlagLoRa_DeviceVar;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <Rte_Flag_LoRaRequestDevice_WriteData+0x20>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	7013      	strb	r3, [r2, #0]
	return retVal;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000ae4 	.word	0x20000ae4

08001d60 <Rte_Flag_LoRaRequestDevice_ReadData>:

Std_ReturnType Rte_Flag_LoRaRequestDevice_ReadData(uint8_t *FlagLoRa_DeviceVar){
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal = RTE_E_OKE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
	(*FlagLoRa_DeviceVar) = gl_u8FlagLoRa_DeviceVar;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <Rte_Flag_LoRaRequestDevice_ReadData+0x20>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	701a      	strb	r2, [r3, #0]
	return retVal;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000ae4 	.word	0x20000ae4

08001d84 <ReceiveFWUpdate_Init>:

/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveFWUpdate_Init(void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	gl_u32NodeAddr 						= INITIAL_VALUE_ZERO;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <ReceiveFWUpdate_Init+0x80>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
	gl_u8TypeFlag 						= INITIAL_VALUE_ZERO;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <ReceiveFWUpdate_Init+0x84>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	gl_u32ImgSize 						= INITIAL_VALUE_ZERO;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <ReceiveFWUpdate_Init+0x88>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
	gl_u16AppVersion 					= INITIAL_VALUE_ZERO;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <ReceiveFWUpdate_Init+0x8c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
	gl_u32CRCValue 						= INITIAL_VALUE_ZERO;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <ReceiveFWUpdate_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
	gl_u32ConfigLoRa 					= INITIAL_VALUE_ZERO;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <ReceiveFWUpdate_Init+0x94>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	gl_u8SystemState 					= SYS_IDLE;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <ReceiveFWUpdate_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
	gl_RXUartInternal_State 			= RX_IDLE;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <ReceiveFWUpdate_Init+0x9c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
	gl_u8RxUserResp						= INITIAL_VALUE_ZERO;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <ReceiveFWUpdate_Init+0xa0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
	gl_u8DonwLoadPercentProogess 		= INITIAL_VALUE_ZERO;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <ReceiveFWUpdate_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	gl_u32Remain_Byte					= INITIAL_VALUE_ZERO;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <ReceiveFWUpdate_Init+0xa8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
	gl_u8DownLoadUpdateProgress 		= INITIAL_VALUE_ZERO;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <ReceiveFWUpdate_Init+0xac>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
	gl_u8NumberPacket_Uart 				= INITIAL_VALUE_ZERO;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <ReceiveFWUpdate_Init+0xb0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	gl_u16NumberPacket_LoRa 				= INITIAL_VALUE_ZERO;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <ReceiveFWUpdate_Init+0xb4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	801a      	strh	r2, [r3, #0]
	gl_u32ReceiveBytes 					= INITIAL_VALUE_ZERO;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <ReceiveFWUpdate_Init+0xb8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <ReceiveFWUpdate_Init+0xbc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <ReceiveFWUpdate_Init+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 	1);
 8001df2:	2201      	movs	r2, #1
 8001df4:	4913      	ldr	r1, [pc, #76]	; (8001e44 <ReceiveFWUpdate_Init+0xc0>)
 8001df6:	4812      	ldr	r0, [pc, #72]	; (8001e40 <ReceiveFWUpdate_Init+0xbc>)
 8001df8:	f006 fe93 	bl	8008b22 <HAL_UART_Receive_IT>

	F_voidInitVariables();
 8001dfc:	f7fe feb0 	bl	8000b60 <F_voidInitVariables>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000ae8 	.word	0x20000ae8
 8001e08:	20000aec 	.word	0x20000aec
 8001e0c:	20000af0 	.word	0x20000af0
 8001e10:	20000af4 	.word	0x20000af4
 8001e14:	20000af8 	.word	0x20000af8
 8001e18:	20000afc 	.word	0x20000afc
 8001e1c:	20000f25 	.word	0x20000f25
 8001e20:	20000b00 	.word	0x20000b00
 8001e24:	20000f24 	.word	0x20000f24
 8001e28:	20000f1d 	.word	0x20000f1d
 8001e2c:	20000f18 	.word	0x20000f18
 8001e30:	20000f1c 	.word	0x20000f1c
 8001e34:	20000f15 	.word	0x20000f15
 8001e38:	20000f16 	.word	0x20000f16
 8001e3c:	20000f20 	.word	0x20000f20
 8001e40:	200015a4 	.word	0x200015a4
 8001e44:	20000f04 	.word	0x20000f04

08001e48 <ReceiveFWUpdate_MainFunc>:
void ReceiveFWUpdate_MainFunc(void){
 8001e48:	b598      	push	{r3, r4, r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	switch (gl_RXUartInternal_State) {
 8001e4c:	4b9d      	ldr	r3, [pc, #628]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	f200 821a 	bhi.w	800228a <ReceiveFWUpdate_MainFunc+0x442>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <ReceiveFWUpdate_MainFunc+0x14>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001e91 	.word	0x08001e91
 8001e60:	08001ea1 	.word	0x08001ea1
 8001e64:	08001f07 	.word	0x08001f07
 8001e68:	0800228b 	.word	0x0800228b
 8001e6c:	0800208b 	.word	0x0800208b
 8001e70:	0800228b 	.word	0x0800228b
 8001e74:	0800228b 	.word	0x0800228b
 8001e78:	0800228b 	.word	0x0800228b
 8001e7c:	0800228b 	.word	0x0800228b
 8001e80:	0800228b 	.word	0x0800228b
 8001e84:	0800228b 	.word	0x0800228b
 8001e88:	0800220b 	.word	0x0800220b
 8001e8c:	08001ecf 	.word	0x08001ecf
		case RX_IDLE:
		{
			if(gl_u8RXBuffer_Header == NEW_UPDATE_REQUEST)
 8001e90:	4b8d      	ldr	r3, [pc, #564]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f040 81fb 	bne.w	800228e <ReceiveFWUpdate_MainFunc+0x446>
				gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 8001e98:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
			break;
 8001e9e:	e1f6      	b.n	800228e <ReceiveFWUpdate_MainFunc+0x446>
		}
		case RX_ACCEPT_UPDATE :
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_ACCEPT;
 8001ea0:	4b8a      	ldr	r3, [pc, #552]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	701a      	strb	r2, [r3, #0]
			// Stop IT Timer
			HAL_TIM_Base_Stop_IT(&htim2);
 8001ea6:	488a      	ldr	r0, [pc, #552]	; (80020d0 <ReceiveFWUpdate_MainFunc+0x288>)
 8001ea8:	f006 f90a 	bl	80080c0 <HAL_TIM_Base_Stop_IT>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8001eac:	2004      	movs	r0, #4
 8001eae:	f7ff ff45 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
			F_Erase_Image(IMAGE_NEW_FIRMWARE);
 8001eb2:	4888      	ldr	r0, [pc, #544]	; (80020d4 <ReceiveFWUpdate_MainFunc+0x28c>)
 8001eb4:	f7fe fea0 	bl	8000bf8 <F_Erase_Image>
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4983      	ldr	r1, [pc, #524]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001ec0:	4885      	ldr	r0, [pc, #532]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8001ec2:	f006 fdab 	bl	8008a1c <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
			break;
 8001ecc:	e1e2      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
		}
		case RX_DENY_UPDATE:
		{
			// Request ESP send Update
			gl_u8RXBuffer_Flag_Req_Bytes = NEW_UPDATE_REQUEST_DENY;
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	2201      	movs	r2, #1
 8001eda:	497c      	ldr	r1, [pc, #496]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001edc:	487e      	ldr	r0, [pc, #504]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8001ede:	f006 fd9d 	bl	8008a1c <HAL_UART_Transmit>
			// Erase APPLU address to Update
			gl_u8RxUserResp = INITIAL_VALUE_ZERO;
 8001ee2:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <ReceiveFWUpdate_MainFunc+0x294>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fdb9 	bl	8001a60 <Rte_SystemState_WriteData>
			// Enable Uart Interrupt hear
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8001eee:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b78      	ldr	r3, [pc, #480]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	60da      	str	r2, [r3, #12]
			gl_RXUartInternal_State = RX_IDLE;
 8001efe:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			break;
 8001f04:	e1c6      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
			/*Receive Header file*/
			//HAL_UART_Receive(&huart2, gl_u8RXBuffer_Header, HEADER_CONFIG_SIZE, HAL_MAX_DELAY);
			/*Put Information FW to RTE*/
			//byte 7 to byte 4 is size

			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f08:	7a1b      	ldrb	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b74      	ldr	r3, [pc, #464]	; (80020e0 <ReceiveFWUpdate_MainFunc+0x298>)
 8001f0e:	fb03 f202 	mul.w	r2, r3, r2
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f14:	79db      	ldrb	r3, [r3, #7]
 8001f16:	4619      	mov	r1, r3
 8001f18:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	441a      	add	r2, r3
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8001f22:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f24:	799b      	ldrb	r3, [r3, #6]
 8001f26:	4619      	mov	r1, r3
 8001f28:	2364      	movs	r3, #100	; 0x64
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001f2e:	4413      	add	r3, r2
						  (gl_u8RXBuffer_Header[6]*100) + (gl_u8RXBuffer_Header[5]) ;
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f32:	7952      	ldrb	r2, [r2, #5]
 8001f34:	4413      	add	r3, r2
 8001f36:	461a      	mov	r2, r3
			gl_u32ImgSize =(gl_u8RXBuffer_Header[8]*1000000) + (gl_u8RXBuffer_Header[7]*10000)+
 8001f38:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8001f3a:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = (gl_u8RXBuffer_Header[9] << SHIFT_8_BIT) | (gl_u8RXBuffer_Header[10] << SHIFT_0_BIT);
 8001f3c:	4b62      	ldr	r3, [pc, #392]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f3e:	7a5b      	ldrb	r3, [r3, #9]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f46:	7a9b      	ldrb	r3, [r3, #10]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001f52:	801a      	strh	r2, [r3, #0]
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8001f54:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f56:	7b9b      	ldrb	r3, [r3, #14]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f5c:	7b1b      	ldrb	r3, [r3, #12]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	431a      	orrs	r2, r3
							 |(gl_u8RXBuffer_Header[11] <<  SHIFT_8_BIT)  | (gl_u8RXBuffer_Header[13] << SHIFT_0_BIT);
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f64:	7adb      	ldrb	r3, [r3, #11]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f6c:	7b52      	ldrb	r2, [r2, #13]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	461a      	mov	r2, r3
			gl_u32ConfigLoRa =(gl_u8RXBuffer_Header[14] << SHIFT_24_BIT) | (gl_u8RXBuffer_Header[12] << SHIFT_16_BIT)
 8001f72:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8001f74:	601a      	str	r2, [r3, #0]
			//Update Parameter
			//F_FlashWordToAddress(FLAG_PARAMETER_GW_CONFIG, gl_u32ConfigLoRa);



			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8001f76:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	061a      	lsls	r2, r3, #24
 8001f7c:	4b52      	ldr	r3, [pc, #328]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	431a      	orrs	r2, r3
					|(gl_u8RXBuffer_Header[2]<<  SHIFT_8_BIT)|(gl_u8RXBuffer_Header[3]<<  SHIFT_0_BIT);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f8e:	78d2      	ldrb	r2, [r2, #3]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	461a      	mov	r2, r3
			gl_u32NodeAddr =(gl_u8RXBuffer_Header[0]<<  SHIFT_24_BIT)|(gl_u8RXBuffer_Header[1]<<  SHIFT_16_BIT)
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8001f96:	601a      	str	r2, [r3, #0]


			gl_u8RXBuffer_Flag_Req_Bytes = gl_u8RXBuffer_Header[4];
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8001f9a:	791a      	ldrb	r2, [r3, #4]
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001f9e:	701a      	strb	r2, [r3, #0]
			if(gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_HEADER_FLAG ){
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	d15f      	bne.n	8002068 <ReceiveFWUpdate_MainFunc+0x220>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,(uint32_t)gl_u16AppVersion);
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4851      	ldr	r0, [pc, #324]	; (80020f4 <ReceiveFWUpdate_MainFunc+0x2ac>)
 8001fb0:	f7ff fc1c 	bl	80017ec <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,gl_u32ImgSize);
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	484f      	ldr	r0, [pc, #316]	; (80020f8 <ReceiveFWUpdate_MainFunc+0x2b0>)
 8001fbc:	f7ff fc16 	bl	80017ec <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_ADDRESS_TARGET_ADDRESS,gl_u32NodeAddr);
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	484d      	ldr	r0, [pc, #308]	; (80020fc <ReceiveFWUpdate_MainFunc+0x2b4>)
 8001fc8:	f7ff fc10 	bl	80017ec <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_PARAMETER_GW_CONFIG,gl_u32ConfigLoRa);
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	484b      	ldr	r0, [pc, #300]	; (8002100 <ReceiveFWUpdate_MainFunc+0x2b8>)
 8001fd4:	f7ff fc0a 	bl	80017ec <GW_voidEraseRestoreConfigPage>
				GW_voidEraseRestoreConfigPage(FLAG_STATUS_GW_CONFIG,GW_CONFIG_PARAMETER_SET);
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	4849      	ldr	r0, [pc, #292]	; (8002104 <ReceiveFWUpdate_MainFunc+0x2bc>)
 8001fde:	f7ff fc05 	bl	80017ec <GW_voidEraseRestoreConfigPage>
				RTE_RUNNABLE_APP_VER_WriteData(gl_u16AppVersion);
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <ReceiveFWUpdate_MainFunc+0x2a0>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fd9a 	bl	8001b20 <Rte_ApplVer_WriteData>
				RTE_RUNNABLE_CODE_SIZE_WriteData(gl_u32ImgSize);
 8001fec:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fda7 	bl	8001b44 <Rte_CodeSize_WriteData>
				//RTE_RUNNABLE_CRC_VALUE_WriteData(gl_u32CRCValue);
				RTE_RUNNABLE_NODE_ADDR_WriteData(gl_u32NodeAddr);
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <ReceiveFWUpdate_MainFunc+0x2a8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fdb4 	bl	8001b68 <Rte_NodeAddr_WriteData>
				RTE_RUNNABLE_CONFIG_LORA_WriteData(gl_u32ConfigLoRa);
 8002000:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <ReceiveFWUpdate_MainFunc+0x2a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe63 	bl	8001cd0 <Rte_FlagConfigLoRA_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_HEADER;
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
				//Calculate Number packet Rx Uart
				gl_u8NumberPacket_Uart = (uint8_t)(gl_u32ImgSize/PACKET_1024bytes)+1;
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0a9b      	lsrs	r3, r3, #10
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <ReceiveFWUpdate_MainFunc+0x2c0>)
 800201e:	701a      	strb	r2, [r3, #0]
				/* Get info from header */

				gl_u32Remain_Byte = (gl_u32ImgSize % PACKET_1024bytes);
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <ReceiveFWUpdate_MainFunc+0x29c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <ReceiveFWUpdate_MainFunc+0x2c4>)
 800202a:	6013      	str	r3, [r2, #0]

				RTE_RUNNABLE_PACKET_SEND_LORA_NUM_WriteData(gl_u16NumberPacket_LoRa);
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <ReceiveFWUpdate_MainFunc+0x2c8>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fe29 	bl	8001c88 <Rte_PacketSendLoraNum_WriteData>
				gl_u8RXBuffer_Flag_Req_Bytes = HEADER_FLAG_RECEIVED;
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8002038:	2208      	movs	r2, #8
 800203a:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_IDLE);
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	2201      	movs	r2, #1
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8002044:	4824      	ldr	r0, [pc, #144]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8002046:	f006 fce9 	bl	8008a1c <HAL_UART_Transmit>
				/*Change state */
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_RECEIVE_UPDATE);
 800204a:	2002      	movs	r0, #2
 800204c:	f7ff fd08 	bl	8001a60 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_RECEIVED_PACKET;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <ReceiveFWUpdate_MainFunc+0x27c>)
 8002052:	2204      	movs	r2, #4
 8002054:	701a      	strb	r2, [r3, #0]

				__HAL_UART_DISABLE_IT(&huart2 , UART_IT_RXNE);
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0220 	bic.w	r2, r2, #32
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	e00a      	b.n	800207e <ReceiveFWUpdate_MainFunc+0x236>
			}
			else{
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	60da      	str	r2, [r3, #12]
				/*Invalid Request*/
				gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 800207a:	2204      	movs	r2, #4
 800207c:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
			}
			memset(gl_u8RXBuffer_Header , 0x00 , 16);
 800207e:	2210      	movs	r2, #16
 8002080:	2100      	movs	r1, #0
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <ReceiveFWUpdate_MainFunc+0x280>)
 8002084:	f007 fb12 	bl	80096ac <memset>
			break;
 8002088:	e104      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
		}
		case RX_RECEIVED_PACKET:
		{

			if(gl_u32ReceiveBytes == 0)
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <ReceiveFWUpdate_MainFunc+0x2cc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d142      	bne.n	8002118 <ReceiveFWUpdate_MainFunc+0x2d0>
			{
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 8002094:	220a      	movs	r2, #10
 8002096:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	2201      	movs	r2, #1
 800209e:	490b      	ldr	r1, [pc, #44]	; (80020cc <ReceiveFWUpdate_MainFunc+0x284>)
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 80020a2:	f006 fcbb 	bl	8008a1c <HAL_UART_Transmit>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <ReceiveFWUpdate_MainFunc+0x290>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	60da      	str	r2, [r3, #12]

				gl_u32ReceiveBytes += PACKET_1024bytes;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <ReceiveFWUpdate_MainFunc+0x2cc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020be:	4a15      	ldr	r2, [pc, #84]	; (8002114 <ReceiveFWUpdate_MainFunc+0x2cc>)
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e07a      	b.n	80021ba <ReceiveFWUpdate_MainFunc+0x372>
 80020c4:	20000b00 	.word	0x20000b00
 80020c8:	20000f04 	.word	0x20000f04
 80020cc:	20000f14 	.word	0x20000f14
 80020d0:	2000155c 	.word	0x2000155c
 80020d4:	08010000 	.word	0x08010000
 80020d8:	200015a4 	.word	0x200015a4
 80020dc:	20000f24 	.word	0x20000f24
 80020e0:	000f4240 	.word	0x000f4240
 80020e4:	20000af0 	.word	0x20000af0
 80020e8:	20000af4 	.word	0x20000af4
 80020ec:	20000afc 	.word	0x20000afc
 80020f0:	20000ae8 	.word	0x20000ae8
 80020f4:	0801fc30 	.word	0x0801fc30
 80020f8:	0801fc38 	.word	0x0801fc38
 80020fc:	0801fc34 	.word	0x0801fc34
 8002100:	0801fc04 	.word	0x0801fc04
 8002104:	0801fc00 	.word	0x0801fc00
 8002108:	20000f15 	.word	0x20000f15
 800210c:	20000f18 	.word	0x20000f18
 8002110:	20000f16 	.word	0x20000f16
 8002114:	20000f20 	.word	0x20000f20
			}
			else if(gl_u8NumberPacket_Uart >= 1 && gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET)
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <ReceiveFWUpdate_MainFunc+0x450>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d04c      	beq.n	80021ba <ReceiveFWUpdate_MainFunc+0x372>
 8002120:	4b5e      	ldr	r3, [pc, #376]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b0b      	cmp	r3, #11
 8002126:	d148      	bne.n	80021ba <ReceiveFWUpdate_MainFunc+0x372>
			{
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes, HAL_MAX_DELAY);
				//HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
				gl_u8NumberPacket_Uart--;
 8002128:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <ReceiveFWUpdate_MainFunc+0x450>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <ReceiveFWUpdate_MainFunc+0x450>)
 8002132:	701a      	strb	r2, [r3, #0]
				/*Calculate Progress*/
				gl_u8DonwLoadPercentProogess = (float)gl_u32ReceiveBytes /(float)gl_u32ImgSize;
 8002134:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f8bf 	bl	80002bc <__aeabi_ui2f>
 800213e:	4604      	mov	r4, r0
 8002140:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <ReceiveFWUpdate_MainFunc+0x45c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f8b9 	bl	80002bc <__aeabi_ui2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f7fe f9c0 	bl	80004d4 <__aeabi_fdiv>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa58 	bl	800060c <__aeabi_f2uiz>
 800215c:	4603      	mov	r3, r0
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <ReceiveFWUpdate_MainFunc+0x460>)
 8002162:	701a      	strb	r2, [r3, #0]
				gl_u8DownLoadUpdateProgress = gl_u8DonwLoadPercentProogess*100;
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <ReceiveFWUpdate_MainFunc+0x460>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	0091      	lsls	r1, r2, #2
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <ReceiveFWUpdate_MainFunc+0x464>)
 800217e:	701a      	strb	r2, [r3, #0]
				/*Write to RTE */
				RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(gl_u8DownLoadUpdateProgress);
 8002180:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <ReceiveFWUpdate_MainFunc+0x464>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fd01 	bl	8001b8c <Rte_UpdateProgress_WriteData>
				//Flash to block
				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	2201      	movs	r2, #1
 8002190:	4942      	ldr	r1, [pc, #264]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 8002192:	4847      	ldr	r0, [pc, #284]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 8002194:	f006 fc42 	bl	8008a1c <HAL_UART_Transmit>
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002198:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	60da      	str	r2, [r3, #12]
				gl_u8RXBuffer_Flag_Req_Bytes = ESP_SEND_NEXT_PACKET;
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 80021aa:	220a      	movs	r2, #10
 80021ac:	701a      	strb	r2, [r3, #0]
				gl_u32ReceiveBytes += PACKET_1024bytes;
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b6:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 80021b8:	6013      	str	r3, [r2, #0]

			}
			if((gl_u8NumberPacket_Uart == 0)&&(gl_u32Remain_Byte > 0))
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <ReceiveFWUpdate_MainFunc+0x450>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d167      	bne.n	8002292 <ReceiveFWUpdate_MainFunc+0x44a>
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <ReceiveFWUpdate_MainFunc+0x46c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <ReceiveFWUpdate_MainFunc+0x44a>
			{
				gl_u8RXBuffer_Flag_Req_Bytes = MASTER_RECEIVE_ALL;
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 80021cc:	220c      	movs	r2, #12
 80021ce:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
 80021d4:	2201      	movs	r2, #1
 80021d6:	4931      	ldr	r1, [pc, #196]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 80021d8:	4835      	ldr	r0, [pc, #212]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 80021da:	f006 fc1f 	bl	8008a1c <HAL_UART_Transmit>
				//F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
				gl_u32ReceiveBytes += gl_u32Remain_Byte;
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <ReceiveFWUpdate_MainFunc+0x46c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 80021ea:	6013      	str	r3, [r2, #0]
				RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_REQUEST_OTA);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f7ff fc37 	bl	8001a60 <Rte_SystemState_WriteData>
				gl_RXUartInternal_State = RX_END_STATE;
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <ReceiveFWUpdate_MainFunc+0x470>)
 80021f4:	220b      	movs	r2, #11
 80021f6:	701a      	strb	r2, [r3, #0]
				//GW_State_Save_State((uint32_t)SYS_REQUEST_OTA);
				__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	60da      	str	r2, [r3, #12]

			else{
				/*ERROR*/
			}

			break;
 8002208:	e043      	b.n	8002292 <ReceiveFWUpdate_MainFunc+0x44a>
		}
		case RX_END_STATE:
		{
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	60da      	str	r2, [r3, #12]
			gl_u8RXBuffer_Flag_Req_Bytes = DONE_OTA;
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 800221c:	22fc      	movs	r2, #252	; 0xfc
 800221e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &gl_u8RXBuffer_Flag_Req_Bytes, 1, HAL_MAX_DELAY);
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	2201      	movs	r2, #1
 8002226:	491d      	ldr	r1, [pc, #116]	; (800229c <ReceiveFWUpdate_MainFunc+0x454>)
 8002228:	4821      	ldr	r0, [pc, #132]	; (80022b0 <ReceiveFWUpdate_MainFunc+0x468>)
 800222a:	f006 fbf7 	bl	8008a1c <HAL_UART_Transmit>
			gl_u32NodeAddr = INITIAL_VALUE_ZERO;
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <ReceiveFWUpdate_MainFunc+0x474>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
			gl_u8TypeFlag = INITIAL_VALUE_ZERO;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <ReceiveFWUpdate_MainFunc+0x478>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
			gl_u32ImgSize =INITIAL_VALUE_ZERO;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <ReceiveFWUpdate_MainFunc+0x45c>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
			gl_u16AppVersion = INITIAL_VALUE_ZERO;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <ReceiveFWUpdate_MainFunc+0x47c>)
 8002242:	2200      	movs	r2, #0
 8002244:	801a      	strh	r2, [r3, #0]
			gl_u32CRCValue = INITIAL_VALUE_ZERO ;
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <ReceiveFWUpdate_MainFunc+0x480>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
			gl_u8SystemState = SYS_IDLE;
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <ReceiveFWUpdate_MainFunc+0x484>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
			gl_RXUartInternal_State = RX_IDLE;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <ReceiveFWUpdate_MainFunc+0x470>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
			gl_u8RxUserResp=INITIAL_VALUE_ZERO;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <ReceiveFWUpdate_MainFunc+0x488>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
			gl_u8DonwLoadPercentProogess =INITIAL_VALUE_ZERO;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <ReceiveFWUpdate_MainFunc+0x460>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
			gl_u32Remain_Byte= INITIAL_VALUE_ZERO;
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <ReceiveFWUpdate_MainFunc+0x46c>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
			gl_u8DownLoadUpdateProgress = INITIAL_VALUE_ZERO;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <ReceiveFWUpdate_MainFunc+0x464>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
			gl_u8NumberPacket_Uart = INITIAL_VALUE_ZERO;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <ReceiveFWUpdate_MainFunc+0x450>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
			gl_u16NumberPacket_LoRa = INITIAL_VALUE_ZERO;
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <ReceiveFWUpdate_MainFunc+0x48c>)
 8002278:	2200      	movs	r2, #0
 800227a:	801a      	strh	r2, [r3, #0]
			gl_u32ReceiveBytes = INITIAL_VALUE_ZERO;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <ReceiveFWUpdate_MainFunc+0x458>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
			RTE_RUNNABLE_DOWNLOAD_PROGRESS_WriteData(INITIAL_VALUE_ZERO);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fc82 	bl	8001b8c <Rte_UpdateProgress_WriteData>
			break;
 8002288:	e004      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
		}
		default:
			break;
 800228a:	bf00      	nop
 800228c:	e002      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
			break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <ReceiveFWUpdate_MainFunc+0x44c>
			break;
 8002292:	bf00      	nop
	}
}
 8002294:	bf00      	nop
 8002296:	bd98      	pop	{r3, r4, r7, pc}
 8002298:	20000f15 	.word	0x20000f15
 800229c:	20000f14 	.word	0x20000f14
 80022a0:	20000f20 	.word	0x20000f20
 80022a4:	20000af0 	.word	0x20000af0
 80022a8:	20000f1d 	.word	0x20000f1d
 80022ac:	20000f1c 	.word	0x20000f1c
 80022b0:	200015a4 	.word	0x200015a4
 80022b4:	20000f18 	.word	0x20000f18
 80022b8:	20000b00 	.word	0x20000b00
 80022bc:	20000ae8 	.word	0x20000ae8
 80022c0:	20000aec 	.word	0x20000aec
 80022c4:	20000af4 	.word	0x20000af4
 80022c8:	20000af8 	.word	0x20000af8
 80022cc:	20000f25 	.word	0x20000f25
 80022d0:	20000f24 	.word	0x20000f24
 80022d4:	20000f16 	.word	0x20000f16

080022d8 <HAL_UART_RxCpltCallback>:
/********************HAL_UART_CALLBACK***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVal;
	if(gl_u8RXBuffer_Header[0] == NEW_UPDATE_REQUEST){
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_UART_RxCpltCallback+0x100>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d11f      	bne.n	8002328 <HAL_UART_RxCpltCallback+0x50>
		retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_u8SystemState);
 80022e8:	483c      	ldr	r0, [pc, #240]	; (80023dc <HAL_UART_RxCpltCallback+0x104>)
 80022ea:	f7ff fbcb 	bl	8001a84 <Rte_SystemState_ReadData>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
		if(RTE_E_OKE == retVal){
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <HAL_UART_RxCpltCallback+0x48>
			//
			// Change state to system update
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_NEW_UPDATE_REQ);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff fbb1 	bl	8001a60 <Rte_SystemState_WriteData>
			gl_RXUartInternal_State = RX_ACCEPT_UPDATE;
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_UART_RxCpltCallback+0x108>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
			// Disable interrupt UART
			__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 16);
 8002314:	2210      	movs	r2, #16
 8002316:	4930      	ldr	r1, [pc, #192]	; (80023d8 <HAL_UART_RxCpltCallback+0x100>)
 8002318:	4832      	ldr	r0, [pc, #200]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 800231a:	f006 fc02 	bl	8008b22 <HAL_UART_Receive_IT>
	}

	//__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);


}
 800231e:	e057      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xf8>
			gl_u8RXBuffer_Flag_Req_Bytes = GATEWAY_BUSY;
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_UART_RxCpltCallback+0x110>)
 8002322:	2203      	movs	r2, #3
 8002324:	701a      	strb	r2, [r3, #0]
}
 8002326:	e053      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xf8>
	else if (gl_u8RXBuffer_Flag_Req_Bytes == ESP_SEND_NEXT_PACKET || gl_u8RXBuffer_Flag_Req_Bytes == MASTER_ACCEPT_PACKET ){
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_UART_RxCpltCallback+0x110>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b0a      	cmp	r3, #10
 800232e:	d003      	beq.n	8002338 <HAL_UART_RxCpltCallback+0x60>
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_UART_RxCpltCallback+0x110>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b0b      	cmp	r3, #11
 8002336:	d130      	bne.n	800239a <HAL_UART_RxCpltCallback+0xc2>
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 800234e:	4825      	ldr	r0, [pc, #148]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 8002350:	f006 fbe7 	bl	8008b22 <HAL_UART_Receive_IT>
		Decrypt_MainFunc((uint8_t*)gl_u8RXBuffer);
 8002354:	4825      	ldr	r0, [pc, #148]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 8002356:	f7fe fbf3 	bl	8000b40 <Decrypt_MainFunc>
		if(gl_u8NumberPacket_Uart == 1){
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_UART_RxCpltCallback+0x118>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10c      	bne.n	800237c <HAL_UART_RxCpltCallback+0xa4>
			F_FlashBlockToAddress(gl_u8RXBuffer, gl_u32Remain_Byte);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_UART_RxCpltCallback+0x11c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	4820      	ldr	r0, [pc, #128]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 800236c:	f7fe fc06 	bl	8000b7c <F_FlashBlockToAddress>
			HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 8002370:	2201      	movs	r2, #1
 8002372:	4919      	ldr	r1, [pc, #100]	; (80023d8 <HAL_UART_RxCpltCallback+0x100>)
 8002374:	481b      	ldr	r0, [pc, #108]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 8002376:	f006 fbd4 	bl	8008b22 <HAL_UART_Receive_IT>
 800237a:	e004      	b.n	8002386 <HAL_UART_RxCpltCallback+0xae>
			F_FlashBlockToAddress(gl_u8RXBuffer, PACKET_1024bytes);
 800237c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002380:	481a      	ldr	r0, [pc, #104]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 8002382:	f7fe fbfb 	bl	8000b7c <F_FlashBlockToAddress>
		memset(gl_u8RXBuffer , 0xff , 1024);
 8002386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238a:	21ff      	movs	r1, #255	; 0xff
 800238c:	4817      	ldr	r0, [pc, #92]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 800238e:	f007 f98d 	bl	80096ac <memset>
		gl_u8RXBuffer_Flag_Req_Bytes = MASTER_ACCEPT_PACKET;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_UART_RxCpltCallback+0x110>)
 8002394:	220b      	movs	r2, #11
 8002396:	701a      	strb	r2, [r3, #0]
}
 8002398:	e01a      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xf8>
	else if(gl_RXUartInternal_State == RX_RECEIVED_HEADER)
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_UART_RxCpltCallback+0x108>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d106      	bne.n	80023b0 <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer, PACKET_1024bytes);
 80023a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a6:	4911      	ldr	r1, [pc, #68]	; (80023ec <HAL_UART_RxCpltCallback+0x114>)
 80023a8:	480e      	ldr	r0, [pc, #56]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 80023aa:	f006 fbba 	bl	8008b22 <HAL_UART_Receive_IT>
}
 80023ae:	e00f      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xf8>
		gl_u8RXBuffer_Flag_Req_Bytes = INVALID_REQUEST;
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_UART_RxCpltCallback+0x110>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart2 , UART_IT_RXNE);
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, gl_u8RXBuffer_Header, 1);
 80023c6:	2201      	movs	r2, #1
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_UART_RxCpltCallback+0x100>)
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <HAL_UART_RxCpltCallback+0x10c>)
 80023cc:	f006 fba9 	bl	8008b22 <HAL_UART_Receive_IT>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000f04 	.word	0x20000f04
 80023dc:	20000f25 	.word	0x20000f25
 80023e0:	20000b00 	.word	0x20000b00
 80023e4:	200015a4 	.word	0x200015a4
 80023e8:	20000f14 	.word	0x20000f14
 80023ec:	20000b04 	.word	0x20000b04
 80023f0:	20000f15 	.word	0x20000f15
 80023f4:	20000f18 	.word	0x20000f18

080023f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80023fe:	f000 fa27 	bl	8002850 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002402:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002406:	2201      	movs	r2, #1
 8002408:	2178      	movs	r1, #120	; 0x78
 800240a:	485b      	ldr	r0, [pc, #364]	; (8002578 <SSD1306_Init+0x180>)
 800240c:	f004 f9b2 	bl	8006774 <HAL_I2C_IsDeviceReady>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002416:	2300      	movs	r3, #0
 8002418:	e0a9      	b.n	800256e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800241a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800241e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002420:	e002      	b.n	8002428 <SSD1306_Init+0x30>
		p--;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3b01      	subs	r3, #1
 8002426:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800242e:	22ae      	movs	r2, #174	; 0xae
 8002430:	2100      	movs	r1, #0
 8002432:	2078      	movs	r0, #120	; 0x78
 8002434:	f000 fa86 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002438:	2220      	movs	r2, #32
 800243a:	2100      	movs	r1, #0
 800243c:	2078      	movs	r0, #120	; 0x78
 800243e:	f000 fa81 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002442:	2210      	movs	r2, #16
 8002444:	2100      	movs	r1, #0
 8002446:	2078      	movs	r0, #120	; 0x78
 8002448:	f000 fa7c 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800244c:	22b0      	movs	r2, #176	; 0xb0
 800244e:	2100      	movs	r1, #0
 8002450:	2078      	movs	r0, #120	; 0x78
 8002452:	f000 fa77 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002456:	22c8      	movs	r2, #200	; 0xc8
 8002458:	2100      	movs	r1, #0
 800245a:	2078      	movs	r0, #120	; 0x78
 800245c:	f000 fa72 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2078      	movs	r0, #120	; 0x78
 8002466:	f000 fa6d 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800246a:	2210      	movs	r2, #16
 800246c:	2100      	movs	r1, #0
 800246e:	2078      	movs	r0, #120	; 0x78
 8002470:	f000 fa68 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	2100      	movs	r1, #0
 8002478:	2078      	movs	r0, #120	; 0x78
 800247a:	f000 fa63 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800247e:	2281      	movs	r2, #129	; 0x81
 8002480:	2100      	movs	r1, #0
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f000 fa5e 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	2100      	movs	r1, #0
 800248c:	2078      	movs	r0, #120	; 0x78
 800248e:	f000 fa59 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002492:	22a1      	movs	r2, #161	; 0xa1
 8002494:	2100      	movs	r1, #0
 8002496:	2078      	movs	r0, #120	; 0x78
 8002498:	f000 fa54 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800249c:	22a6      	movs	r2, #166	; 0xa6
 800249e:	2100      	movs	r1, #0
 80024a0:	2078      	movs	r0, #120	; 0x78
 80024a2:	f000 fa4f 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80024a6:	22a8      	movs	r2, #168	; 0xa8
 80024a8:	2100      	movs	r1, #0
 80024aa:	2078      	movs	r0, #120	; 0x78
 80024ac:	f000 fa4a 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80024b0:	223f      	movs	r2, #63	; 0x3f
 80024b2:	2100      	movs	r1, #0
 80024b4:	2078      	movs	r0, #120	; 0x78
 80024b6:	f000 fa45 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024ba:	22a4      	movs	r2, #164	; 0xa4
 80024bc:	2100      	movs	r1, #0
 80024be:	2078      	movs	r0, #120	; 0x78
 80024c0:	f000 fa40 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80024c4:	22d3      	movs	r2, #211	; 0xd3
 80024c6:	2100      	movs	r1, #0
 80024c8:	2078      	movs	r0, #120	; 0x78
 80024ca:	f000 fa3b 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2078      	movs	r0, #120	; 0x78
 80024d4:	f000 fa36 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80024d8:	22d5      	movs	r2, #213	; 0xd5
 80024da:	2100      	movs	r1, #0
 80024dc:	2078      	movs	r0, #120	; 0x78
 80024de:	f000 fa31 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80024e2:	22f0      	movs	r2, #240	; 0xf0
 80024e4:	2100      	movs	r1, #0
 80024e6:	2078      	movs	r0, #120	; 0x78
 80024e8:	f000 fa2c 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80024ec:	22d9      	movs	r2, #217	; 0xd9
 80024ee:	2100      	movs	r1, #0
 80024f0:	2078      	movs	r0, #120	; 0x78
 80024f2:	f000 fa27 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80024f6:	2222      	movs	r2, #34	; 0x22
 80024f8:	2100      	movs	r1, #0
 80024fa:	2078      	movs	r0, #120	; 0x78
 80024fc:	f000 fa22 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002500:	22da      	movs	r2, #218	; 0xda
 8002502:	2100      	movs	r1, #0
 8002504:	2078      	movs	r0, #120	; 0x78
 8002506:	f000 fa1d 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800250a:	2212      	movs	r2, #18
 800250c:	2100      	movs	r1, #0
 800250e:	2078      	movs	r0, #120	; 0x78
 8002510:	f000 fa18 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002514:	22db      	movs	r2, #219	; 0xdb
 8002516:	2100      	movs	r1, #0
 8002518:	2078      	movs	r0, #120	; 0x78
 800251a:	f000 fa13 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800251e:	2220      	movs	r2, #32
 8002520:	2100      	movs	r1, #0
 8002522:	2078      	movs	r0, #120	; 0x78
 8002524:	f000 fa0e 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002528:	228d      	movs	r2, #141	; 0x8d
 800252a:	2100      	movs	r1, #0
 800252c:	2078      	movs	r0, #120	; 0x78
 800252e:	f000 fa09 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002532:	2214      	movs	r2, #20
 8002534:	2100      	movs	r1, #0
 8002536:	2078      	movs	r0, #120	; 0x78
 8002538:	f000 fa04 	bl	8002944 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800253c:	22af      	movs	r2, #175	; 0xaf
 800253e:	2100      	movs	r1, #0
 8002540:	2078      	movs	r0, #120	; 0x78
 8002542:	f000 f9ff 	bl	8002944 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002546:	222e      	movs	r2, #46	; 0x2e
 8002548:	2100      	movs	r1, #0
 800254a:	2078      	movs	r0, #120	; 0x78
 800254c:	f000 f9fa 	bl	8002944 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002550:	2000      	movs	r0, #0
 8002552:	f000 f843 	bl	80025dc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002556:	f000 f813 	bl	8002580 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <SSD1306_Init+0x184>)
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <SSD1306_Init+0x184>)
 8002562:	2200      	movs	r2, #0
 8002564:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <SSD1306_Init+0x184>)
 8002568:	2201      	movs	r2, #1
 800256a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20001404 	.word	0x20001404
 800257c:	20001328 	.word	0x20001328

08002580 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002586:	2300      	movs	r3, #0
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	e01d      	b.n	80025c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	3b50      	subs	r3, #80	; 0x50
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	2100      	movs	r1, #0
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f000 f9d4 	bl	8002944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2078      	movs	r0, #120	; 0x78
 80025a2:	f000 f9cf 	bl	8002944 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80025a6:	2210      	movs	r2, #16
 80025a8:	2100      	movs	r1, #0
 80025aa:	2078      	movs	r0, #120	; 0x78
 80025ac:	f000 f9ca 	bl	8002944 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <SSD1306_UpdateScreen+0x58>)
 80025b6:	441a      	add	r2, r3
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	2078      	movs	r0, #120	; 0x78
 80025be:	f000 f95b 	bl	8002878 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	3301      	adds	r3, #1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	d9de      	bls.n	800258c <SSD1306_UpdateScreen+0xc>
	}
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000f28 	.word	0x20000f28

080025dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <SSD1306_Fill+0x14>
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <SSD1306_Fill+0x16>
 80025f0:	23ff      	movs	r3, #255	; 0xff
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	4619      	mov	r1, r3
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <SSD1306_Fill+0x2c>)
 80025fa:	f007 f857 	bl	80096ac <memset>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000f28 	.word	0x20000f28

0800260c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
 8002616:	460b      	mov	r3, r1
 8002618:	80bb      	strh	r3, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	70fb      	strb	r3, [r7, #3]
	if (
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b7f      	cmp	r3, #127	; 0x7f
 8002622:	d848      	bhi.n	80026b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002624:	88bb      	ldrh	r3, [r7, #4]
 8002626:	2b3f      	cmp	r3, #63	; 0x3f
 8002628:	d845      	bhi.n	80026b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <SSD1306_DrawPixel+0xb4>)
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d11a      	bne.n	800267c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	b298      	uxth	r0, r3
 800264e:	4603      	mov	r3, r0
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	4413      	add	r3, r2
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <SSD1306_DrawPixel+0xb8>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	b25a      	sxtb	r2, r3
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b259      	sxtb	r1, r3
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	4603      	mov	r3, r0
 8002670:	01db      	lsls	r3, r3, #7
 8002672:	4413      	add	r3, r2
 8002674:	b2c9      	uxtb	r1, r1
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <SSD1306_DrawPixel+0xb8>)
 8002678:	54d1      	strb	r1, [r2, r3]
 800267a:	e01d      	b.n	80026b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800267c:	88fa      	ldrh	r2, [r7, #6]
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	b298      	uxth	r0, r3
 8002684:	4603      	mov	r3, r0
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	4413      	add	r3, r2
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <SSD1306_DrawPixel+0xb8>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	b25a      	sxtb	r2, r3
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	b25b      	sxtb	r3, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	4013      	ands	r3, r2
 80026a4:	b259      	sxtb	r1, r3
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	4603      	mov	r3, r0
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <SSD1306_DrawPixel+0xb8>)
 80026b2:	54d1      	strb	r1, [r2, r3]
 80026b4:	e000      	b.n	80026b8 <SSD1306_DrawPixel+0xac>
		return;
 80026b6:	bf00      	nop
	}
}
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20001328 	.word	0x20001328
 80026c4:	20000f28 	.word	0x20000f28

080026c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	460a      	mov	r2, r1
 80026d2:	80fb      	strh	r3, [r7, #6]
 80026d4:	4613      	mov	r3, r2
 80026d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <SSD1306_GotoXY+0x28>)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <SSD1306_GotoXY+0x28>)
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	8053      	strh	r3, [r2, #2]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20001328 	.word	0x20001328

080026f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
	if (
 8002710:	2b7f      	cmp	r3, #127	; 0x7f
 8002712:	dc07      	bgt.n	8002724 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002716:	885b      	ldrh	r3, [r3, #2]
 8002718:	461a      	mov	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002720:	2b3f      	cmp	r3, #63	; 0x3f
 8002722:	dd01      	ble.n	8002728 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002724:	2300      	movs	r3, #0
 8002726:	e05e      	b.n	80027e6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e04b      	b.n	80027c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	3b20      	subs	r3, #32
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	7849      	ldrb	r1, [r1, #1]
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4619      	mov	r1, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	440b      	add	r3, r1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e030      	b.n	80027b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4413      	add	r3, r2
 800276c:	b298      	uxth	r0, r3
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002770:	885a      	ldrh	r2, [r3, #2]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4413      	add	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	79ba      	ldrb	r2, [r7, #6]
 800277c:	4619      	mov	r1, r3
 800277e:	f7ff ff45 	bl	800260c <SSD1306_DrawPixel>
 8002782:	e014      	b.n	80027ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4413      	add	r3, r2
 800278e:	b298      	uxth	r0, r3
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <SSD1306_Putc+0xfc>)
 8002792:	885a      	ldrh	r2, [r3, #2]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4413      	add	r3, r2
 800279a:	b299      	uxth	r1, r3
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	f7ff ff2f 	bl	800260c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3301      	adds	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4293      	cmp	r3, r2
 80027be:	d3c8      	bcc.n	8002752 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	461a      	mov	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d3ad      	bcc.n	800272e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <SSD1306_Putc+0xfc>)
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4413      	add	r3, r2
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <SSD1306_Putc+0xfc>)
 80027e2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80027e4:	79fb      	ldrb	r3, [r7, #7]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20001328 	.word	0x20001328

080027f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002802:	e012      	b.n	800282a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	79fa      	ldrb	r2, [r7, #7]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff71 	bl	80026f4 <SSD1306_Putc>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d002      	beq.n	8002824 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	e008      	b.n	8002836 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e8      	bne.n	8002804 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	781b      	ldrb	r3, [r3, #0]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff feca 	bl	80025dc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002848:	f7ff fe9a 	bl	8002580 <SSD1306_UpdateScreen>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <ssd1306_I2C_Init+0x24>)
 8002858:	607b      	str	r3, [r7, #4]
	while(p>0)
 800285a:	e002      	b.n	8002862 <ssd1306_I2C_Init+0x12>
		p--;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	0003d090 	.word	0x0003d090

08002878 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b0c7      	sub	sp, #284	; 0x11c
 800287c:	af02      	add	r7, sp, #8
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002886:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800288a:	600a      	str	r2, [r1, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002892:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002896:	4622      	mov	r2, r4
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800289e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80028a2:	4602      	mov	r2, r0
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ae:	460a      	mov	r2, r1
 80028b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80028b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80028cc:	e015      	b.n	80028fa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80028ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	441a      	add	r2, r3
 80028de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028e2:	3301      	adds	r3, #1
 80028e4:	7811      	ldrb	r1, [r2, #0]
 80028e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80028ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80028f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028f4:	3301      	adds	r3, #1
 80028f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80028fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002904:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d8df      	bhi.n	80028ce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800290e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002912:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b299      	uxth	r1, r3
 800291a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800291e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	200a      	movs	r0, #10
 800292e:	9000      	str	r0, [sp, #0]
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <ssd1306_I2C_WriteMulti+0xc8>)
 8002932:	f003 fe21 	bl	8006578 <HAL_I2C_Master_Transmit>
}
 8002936:	bf00      	nop
 8002938:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800293c:	46bd      	mov	sp, r7
 800293e:	bd90      	pop	{r4, r7, pc}
 8002940:	20001404 	.word	0x20001404

08002944 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	460b      	mov	r3, r1
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	4613      	mov	r3, r2
 8002954:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002956:	79bb      	ldrb	r3, [r7, #6]
 8002958:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800295a:	797b      	ldrb	r3, [r7, #5]
 800295c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	b299      	uxth	r1, r3
 8002962:	f107 020c 	add.w	r2, r7, #12
 8002966:	230a      	movs	r3, #10
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2302      	movs	r3, #2
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <ssd1306_I2C_Write+0x38>)
 800296e:	f003 fe03 	bl	8006578 <HAL_I2C_Master_Transmit>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20001404 	.word	0x20001404

08002980 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fbd0 	bl	800313a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fbeb 	bl	800317a <SX1278_hw_SPIReadByte>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb88 	bl	80030c4 <SX1278_hw_SetNSS>
	return tmp;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
 80029ca:	4613      	mov	r3, r2
 80029cc:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fb75 	bl	80030c4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 fba6 	bl	800313a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78ba      	ldrb	r2, [r7, #2]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fb9f 	bl	800313a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fb5e 	bl	80030c4 <SX1278_hw_SetNSS>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	72fb      	strb	r3, [r7, #11]
 8002a20:	4613      	mov	r3, r2
 8002a22:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8002a24:	7abb      	ldrb	r3, [r7, #10]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d927      	bls.n	8002a7a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fb47 	bl	80030c4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	7afa      	ldrb	r2, [r7, #11]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fb7b 	bl	800313a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
 8002a48:	e00c      	b.n	8002a64 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	18d4      	adds	r4, r2, r3
 8002a54:	4608      	mov	r0, r1
 8002a56:	f000 fb90 	bl	800317a <SX1278_hw_SPIReadByte>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	3301      	adds	r3, #1
 8002a62:	75fb      	strb	r3, [r7, #23]
 8002a64:	7dfa      	ldrb	r2, [r7, #23]
 8002a66:	7abb      	ldrb	r3, [r7, #10]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3ee      	bcc.n	8002a4a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb26 	bl	80030c4 <SX1278_hw_SetNSS>
 8002a78:	e000      	b.n	8002a7c <SX1278_SPIBurstRead+0x6c>
		return;
 8002a7a:	bf00      	nop
	}
}
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}

08002a82 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	460b      	mov	r3, r1
 8002a90:	72fb      	strb	r3, [r7, #11]
 8002a92:	4613      	mov	r3, r2
 8002a94:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002a96:	7abb      	ldrb	r3, [r7, #10]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d929      	bls.n	8002af0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fb0e 	bl	80030c4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fb3f 	bl	800313a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
 8002ac0:	e00b      	b.n	8002ada <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f000 fb33 	bl	800313a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
 8002ada:	7dfa      	ldrb	r2, [r7, #23]
 8002adc:	7abb      	ldrb	r3, [r7, #10]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3ef      	bcc.n	8002ac2 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 faeb 	bl	80030c4 <SX1278_hw_SetNSS>
 8002aee:	e000      	b.n	8002af2 <SX1278_SPIBurstWrite+0x70>
		return;
 8002af0:	bf00      	nop
	}
}
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f90d 	bl	8002d20 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002b06:	200f      	movs	r0, #15
 8002b08:	f000 fb5d 	bl	80031c6 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f917 	bl	8002d40 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	684a      	ldr	r2, [r1, #4]
 8002b16:	688b      	ldr	r3, [r1, #8]
 8002b18:	f04f 0000 	mov.w	r0, #0
 8002b1c:	f04f 0100 	mov.w	r1, #0
 8002b20:	04d9      	lsls	r1, r3, #19
 8002b22:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002b26:	04d0      	lsls	r0, r2, #19
 8002b28:	4a6f      	ldr	r2, [pc, #444]	; (8002ce8 <SX1278_config+0x1f0>)
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f7fd fd8d 	bl	800064c <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8002b3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	0c02      	lsrs	r2, r0, #16
 8002b48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b4c:	0c0b      	lsrs	r3, r1, #16
 8002b4e:	b2d3      	uxtb	r3, r2
 8002b50:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8002b52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	0a02      	lsrs	r2, r0, #8
 8002b60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b64:	0a0b      	lsrs	r3, r1, #8
 8002b66:	b2d3      	uxtb	r3, r2
 8002b68:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8002b6a:	7c3b      	ldrb	r3, [r7, #16]
 8002b6c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	2303      	movs	r3, #3
 8002b74:	2106      	movs	r1, #6
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff83 	bl	8002a82 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8002b7c:	2234      	movs	r2, #52	; 0x34
 8002b7e:	2139      	movs	r1, #57	; 0x39
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff1c 	bl	80029be <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7b1b      	ldrb	r3, [r3, #12]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b57      	ldr	r3, [pc, #348]	; (8002cec <SX1278_config+0x1f4>)
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	461a      	mov	r2, r3
 8002b92:	2109      	movs	r1, #9
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff12 	bl	80029be <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002b9a:	220b      	movs	r2, #11
 8002b9c:	210b      	movs	r1, #11
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff0d 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002ba4:	2223      	movs	r2, #35	; 0x23
 8002ba6:	210c      	movs	r1, #12
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff08 	bl	80029be <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7b5b      	ldrb	r3, [r3, #13]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <SX1278_config+0x1f8>)
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d147      	bne.n	8002c4c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7b9b      	ldrb	r3, [r3, #14]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <SX1278_config+0x1fc>)
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7bdb      	ldrb	r3, [r3, #15]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <SX1278_config+0x200>)
 8002bd2:	5c5b      	ldrb	r3, [r3, r1]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	211d      	movs	r1, #29
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff feea 	bl	80029be <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7b5b      	ldrb	r3, [r3, #13]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <SX1278_config+0x1f8>)
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7c1b      	ldrb	r3, [r3, #16]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <SX1278_config+0x204>)
 8002c00:	5c5b      	ldrb	r3, [r3, r1]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002c0a:	3303      	adds	r3, #3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	211e      	movs	r1, #30
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fed3 	bl	80029be <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8002c18:	2131      	movs	r1, #49	; 0x31
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feb0 	bl	8002980 <SX1278_SPIRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	f043 0305 	orr.w	r3, r3, #5
 8002c32:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	461a      	mov	r2, r3
 8002c38:	2131      	movs	r1, #49	; 0x31
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff febf 	bl	80029be <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002c40:	220c      	movs	r2, #12
 8002c42:	2137      	movs	r1, #55	; 0x37
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff feba 	bl	80029be <SX1278_SPIWrite>
 8002c4a:	e029      	b.n	8002ca0 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7b9b      	ldrb	r3, [r3, #14]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <SX1278_config+0x1fc>)
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7bdb      	ldrb	r3, [r3, #15]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <SX1278_config+0x200>)
 8002c62:	5c5b      	ldrb	r3, [r3, r1]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	211d      	movs	r1, #29
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fea4 	bl	80029be <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7b5b      	ldrb	r3, [r3, #13]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <SX1278_config+0x1f8>)
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c1b      	ldrb	r3, [r3, #16]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <SX1278_config+0x204>)
 8002c8c:	5c5b      	ldrb	r3, [r3, r1]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002c92:	4413      	add	r3, r2
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	211e      	movs	r1, #30
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe8f 	bl	80029be <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	2126      	movs	r1, #38	; 0x26
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fe8a 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002caa:	2208      	movs	r2, #8
 8002cac:	211f      	movs	r1, #31
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fe85 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fe80 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	2121      	movs	r1, #33	; 0x21
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fe7b 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2141      	movs	r1, #65	; 0x41
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fe76 	bl	80029be <SX1278_SPIWrite>
	module->readBytes = 0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f810 	bl	8002d00 <SX1278_standby>
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	01e84800 	.word	0x01e84800
 8002cec:	0800a140 	.word	0x0800a140
 8002cf0:	0800a144 	.word	0x0800a144
 8002cf4:	0800a14c 	.word	0x0800a14c
 8002cf8:	0800a158 	.word	0x0800a158
 8002cfc:	0800a15c 	.word	0x0800a15c

08002d00 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002d08:	2209      	movs	r2, #9
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fe56 	bl	80029be <SX1278_SPIWrite>
	module->status = STANDBY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	749a      	strb	r2, [r3, #18]
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002d28:	2208      	movs	r2, #8
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fe46 	bl	80029be <SX1278_SPIWrite>
	module->status = SLEEP;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	749a      	strb	r2, [r3, #18]
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002d48:	2288      	movs	r2, #136	; 0x88
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fe36 	bl	80029be <SX1278_SPIWrite>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002d62:	22ff      	movs	r2, #255	; 0xff
 8002d64:	2112      	movs	r1, #18
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fe29 	bl	80029be <SX1278_SPIWrite>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	7afa      	ldrb	r2, [r7, #11]
 8002d86:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff feb5 	bl	8002af8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8002d8e:	2284      	movs	r2, #132	; 0x84
 8002d90:	214d      	movs	r1, #77	; 0x4d
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fe13 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	2124      	movs	r1, #36	; 0x24
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fe0e 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8002da2:	2201      	movs	r2, #1
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7ff fe09 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8002dac:	223f      	movs	r2, #63	; 0x3f
 8002dae:	2111      	movs	r1, #17
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fe04 	bl	80029be <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ffcf 	bl	8002d5a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2122      	movs	r1, #34	; 0x22
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff fdfb 	bl	80029be <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8002dc8:	210f      	movs	r1, #15
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff fdd8 	bl	8002980 <SX1278_SPIRead>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	210d      	movs	r1, #13
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fdef 	bl	80029be <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 8002de0:	2205      	movs	r2, #5
 8002de2:	2101      	movs	r1, #1
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fdea 	bl	80029be <SX1278_SPIWrite>
	module->readBytes = 0;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002df2:	2118      	movs	r1, #24
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fdc3 	bl	8002980 <SX1278_SPIRead>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2203      	movs	r2, #3
 8002e08:	749a      	strb	r2, [r3, #18]
			return 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e013      	b.n	8002e36 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f967 	bl	80030f2 <SX1278_hw_Reset>
			SX1278_config(module);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fe67 	bl	8002af8 <SX1278_config>
			return 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e003      	b.n	8002e36 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 f9c9 	bl	80031c6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002e34:	e7dd      	b.n	8002df2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f9c6 	bl	80031dc <SX1278_hw_GetDIO0>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d030      	beq.n	8002eb8 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3313      	adds	r3, #19
 8002e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fc23 	bl	80096ac <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002e66:	2110      	movs	r1, #16
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fd89 	bl	8002980 <SX1278_SPIRead>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	461a      	mov	r2, r3
 8002e76:	210d      	movs	r1, #13
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fda0 	bl	80029be <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7b5b      	ldrb	r3, [r3, #13]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7c5b      	ldrb	r3, [r3, #17]
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e005      	b.n	8002e9a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8002e8e:	2113      	movs	r1, #19
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fd75 	bl	8002980 <SX1278_SPIRead>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f103 0213 	add.w	r2, r3, #19
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fdb3 	bl	8002a10 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ff51 	bl	8002d5a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	7afa      	ldrb	r2, [r7, #11]
 8002ed8:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff fe0c 	bl	8002af8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002ee0:	2287      	movs	r2, #135	; 0x87
 8002ee2:	214d      	movs	r1, #77	; 0x4d
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fd6a 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002eea:	2200      	movs	r2, #0
 8002eec:	2124      	movs	r1, #36	; 0x24
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff fd65 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002ef4:	2241      	movs	r2, #65	; 0x41
 8002ef6:	2140      	movs	r1, #64	; 0x40
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fd60 	bl	80029be <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff2b 	bl	8002d5a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002f04:	22f7      	movs	r2, #247	; 0xf7
 8002f06:	2111      	movs	r1, #17
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fd58 	bl	80029be <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	461a      	mov	r2, r3
 8002f12:	2122      	movs	r1, #34	; 0x22
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fd52 	bl	80029be <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002f1a:	210e      	movs	r1, #14
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fd2f 	bl	8002980 <SX1278_SPIRead>
 8002f22:	4603      	mov	r3, r0
 8002f24:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	210d      	movs	r1, #13
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fd46 	bl	80029be <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002f32:	2122      	movs	r1, #34	; 0x22
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fd23 	bl	8002980 <SX1278_SPIRead>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8002f3e:	7dba      	ldrb	r2, [r7, #22]
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d104      	bne.n	8002f50 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	749a      	strb	r2, [r3, #18]
			return 1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00e      	b.n	8002f6e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f8c6 	bl	80030f2 <SX1278_hw_Reset>
			SX1278_config(module);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff fdc6 	bl	8002af8 <SX1278_config>
			return 0;
 8002f6c:	2300      	movs	r3, #0
		}
	}
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fd78 	bl	8002a82 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8002f92:	228b      	movs	r2, #139	; 0x8b
 8002f94:	2101      	movs	r1, #1
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fd11 	bl	80029be <SX1278_SPIWrite>
	while (1) {
		//Set Flag to Ignore EXT

		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f91b 	bl	80031dc <SX1278_hw_GetDIO0>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8002fac:	2112      	movs	r1, #18
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff fce6 	bl	8002980 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fed0 	bl	8002d5a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fea0 	bl	8002d00 <SX1278_standby>
			return 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e013      	b.n	8002fec <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f88c 	bl	80030f2 <SX1278_hw_Reset>
			SX1278_config(module);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff fd8c 	bl	8002af8 <SX1278_config>
			return 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e003      	b.n	8002fec <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f000 f8ee 	bl	80031c6 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002fea:	e7d7      	b.n	8002f9c <SX1278_LoRaTxPacket+0x26>
	}
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f848 	bl	800309a <SX1278_hw_init>
	module->frequency = frequency;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]
	module->power = power;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	7e3a      	ldrb	r2, [r7, #24]
 8003018:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	7f3a      	ldrb	r2, [r7, #28]
 800301e:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003026:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800302e:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003036:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800303e:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fd59 	bl	8002af8 <SX1278_config>
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003062:	79fa      	ldrb	r2, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d003      	beq.n	8003070 <SX1278_read+0x22>
		length = module->readBytes;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800306e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3313      	adds	r3, #19
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	4619      	mov	r1, r3
 8003078:	68b8      	ldr	r0, [r7, #8]
 800307a:	f006 fb4b 	bl	8009714 <memcpy>
	rxBuf[length] = '\0';
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8003090:	79fb      	ldrb	r3, [r7, #7]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80030a2:	2101      	movs	r1, #1
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f80d 	bl	80030c4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6858      	ldr	r0, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	4619      	mov	r1, r3
 80030b8:	f003 f8e9 	bl	800628e <HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6958      	ldr	r0, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b299      	uxth	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	f003 f8d2 	bl	800628e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80030fa:	2101      	movs	r1, #1
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ffe1 	bl	80030c4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6858      	ldr	r0, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	2200      	movs	r2, #0
 800310e:	4619      	mov	r1, r3
 8003110:	f003 f8bd 	bl	800628e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8003114:	2001      	movs	r0, #1
 8003116:	f000 f856 	bl	80031c6 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6858      	ldr	r0, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	2201      	movs	r2, #1
 8003126:	4619      	mov	r1, r3
 8003128:	f003 f8b1 	bl	800628e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	f000 f84a 	bl	80031c6 <SX1278_hw_DelayMs>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8003146:	2100      	movs	r1, #0
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ffbb 	bl	80030c4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6998      	ldr	r0, [r3, #24]
 8003152:	1cf9      	adds	r1, r7, #3
 8003154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003158:	2201      	movs	r2, #1
 800315a:	f004 fb69 	bl	8007830 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800315e:	bf00      	nop
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4618      	mov	r0, r3
 8003166:	f004 fe56 	bl	8007e16 <HAL_SPI_GetState>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d1f7      	bne.n	8003160 <SX1278_hw_SPICommand+0x26>
		;
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af02      	add	r7, sp, #8
 8003180:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003186:	2300      	movs	r3, #0
 8003188:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff99 	bl	80030c4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6998      	ldr	r0, [r3, #24]
 8003196:	f107 020e 	add.w	r2, r7, #14
 800319a:	f107 010f 	add.w	r1, r7, #15
 800319e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2301      	movs	r3, #1
 80031a6:	f004 fc86 	bl	8007ab6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80031aa:	bf00      	nop
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fe30 	bl	8007e16 <HAL_SPI_GetState>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d1f7      	bne.n	80031ac <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f002 fade 	bl	8005790 <HAL_Delay>
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f003 f835 	bl	8006260 <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <LORA_IF_GetData_Frame>:
				return FL_FRAGMENT_FIRMWARE ;
			}
		}
	    return 0;
}
uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint32_t unicast_address,uint8_t* buffer_resp , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_resp ){
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
	uint32 address_node_req = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
	ret = SX1278_LoRaEntryRx(module, length, timeout);
 8003222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	4619      	mov	r1, r3
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fda2 	bl	8002d74 <SX1278_LoRaEntryRx>
 8003230:	4603      	mov	r3, r0
 8003232:	70fb      	strb	r3, [r7, #3]
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff fe02 	bl	8002e3e <SX1278_LoRaRxPacket>
 800323a:	4603      	mov	r3, r0
 800323c:	70fb      	strb	r3, [r7, #3]
		if ( ret > 0 ) {
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d035      	beq.n	80032b0 <LORA_IF_GetData_Frame+0xa4>
			// Replace Receive Led hear
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003248:	4821      	ldr	r0, [pc, #132]	; (80032d0 <LORA_IF_GetData_Frame+0xc4>)
 800324a:	f003 f838 	bl	80062be <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	461a      	mov	r2, r3
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff fefa 	bl	800304e <SX1278_read>
 800325a:	4603      	mov	r3, r0
 800325c:	70fb      	strb	r3, [r7, #3]
			AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 800325e:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <LORA_IF_GetData_Frame+0xc8>)
 8003260:	491d      	ldr	r1, [pc, #116]	; (80032d8 <LORA_IF_GetData_Frame+0xcc>)
 8003262:	481e      	ldr	r0, [pc, #120]	; (80032dc <LORA_IF_GetData_Frame+0xd0>)
 8003264:	f000 fe28 	bl	8003eb8 <AES_init_ctx_iv>
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 8003268:	2210      	movs	r2, #16
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	481b      	ldr	r0, [pc, #108]	; (80032dc <LORA_IF_GetData_Frame+0xd0>)
 800326e:	f001 fc24 	bl	8004aba <AES_CTR_xcrypt_buffer>
			address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	061a      	lsls	r2, r3, #24
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3301      	adds	r3, #1
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
							   |(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3302      	adds	r3, #2
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4313      	orrs	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	3203      	adds	r2, #3
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	4313      	orrs	r3, r2
			address_node_req = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8003294:	613b      	str	r3, [r7, #16]
			if(address_node_req == unicast_address && buffer_resp[4] == ACK_resp)
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	d108      	bne.n	80032b0 <LORA_IF_GetData_Frame+0xa4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d101      	bne.n	80032b0 <LORA_IF_GetData_Frame+0xa4>
				return 1;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00a      	b.n	80032c6 <LORA_IF_GetData_Frame+0xba>
			/*Received but wrong request*/

		}
		HAL_Delay(1);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f002 fa6d 	bl	8005790 <HAL_Delay>
		local_u32timeout++;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
		if(local_u32timeout == timeout)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1b7      	bne.n	8003234 <LORA_IF_GetData_Frame+0x28>
			return 0;
 80032c4:	2300      	movs	r3, #0
		/*Lost Packet Hear*/
	}
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40011000 	.word	0x40011000
 80032d4:	20000054 	.word	0x20000054
 80032d8:	20000044 	.word	0x20000044
 80032dc:	20001330 	.word	0x20001330

080032e0 <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret ,uint8_t ACK_req , uint8_t ACK_resp ){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	70fb      	strb	r3, [r7, #3]
	buffer_req[2] = ACK_req;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3302      	adds	r3, #2
 80032f2:	7e3a      	ldrb	r2, [r7, #24]
 80032f4:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <LORA_IF_Stransmit_Request+0x6c>)
 80032f8:	4915      	ldr	r1, [pc, #84]	; (8003350 <LORA_IF_Stransmit_Request+0x70>)
 80032fa:	4816      	ldr	r0, [pc, #88]	; (8003354 <LORA_IF_Stransmit_Request+0x74>)
 80032fc:	f000 fddc 	bl	8003eb8 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 8003300:	2210      	movs	r2, #16
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4813      	ldr	r0, [pc, #76]	; (8003354 <LORA_IF_Stransmit_Request+0x74>)
 8003306:	f001 fbd8 	bl	8004aba <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 800330a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800330e:	2110      	movs	r1, #16
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fdd8 	bl	8002ec6 <SX1278_LoRaEntryTx>
 8003316:	4603      	mov	r3, r0
 8003318:	70fb      	strb	r3, [r7, #3]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 800331a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800331e:	2210      	movs	r2, #16
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe27 	bl	8002f76 <SX1278_LoRaTxPacket>
 8003328:	4603      	mov	r3, r0
 800332a:	70fb      	strb	r3, [r7, #3]
	/*Read the first Frame */
	 if(ret >0){
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <LORA_IF_Stransmit_Request+0x60>
		//Replace Blink Send hear
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8003332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003336:	4808      	ldr	r0, [pc, #32]	; (8003358 <LORA_IF_Stransmit_Request+0x78>)
 8003338:	f002 ffc1 	bl	80062be <HAL_GPIO_TogglePin>
		return LORA_OKE;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <LORA_IF_Stransmit_Request+0x62>
	 }
	 return LORA_TIMEOUT;
 8003340:	2303      	movs	r3, #3
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000054 	.word	0x20000054
 8003350:	20000044 	.word	0x20000044
 8003354:	20001330 	.word	0x20001330
 8003358:	40010c00 	.word	0x40010c00

0800335c <LORA_IF_Stransmit_Fragment_Firmware>:

LoRa_Return_t LORA_IF_Stransmit_Fragment_Firmware(SX1278_t *module ,uint8_t* buffer_flashing_data ){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 800336a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800336e:	2150      	movs	r1, #80	; 0x50
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fda8 	bl	8002ec6 <SX1278_LoRaEntryTx>
 8003376:	4603      	mov	r3, r0
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 800337c:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_flashing_data, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 800337e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003382:	2250      	movs	r2, #80	; 0x50
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fdf5 	bl	8002f76 <SX1278_LoRaTxPacket>
 800338c:	4603      	mov	r3, r0
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8003392:	701a      	strb	r2, [r3, #0]
	 if(ret){
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <LORA_IF_Stransmit_Fragment_Firmware+0x64>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <LORA_IF_Stransmit_Fragment_Firmware+0x54>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800339c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a0:	4808      	ldr	r0, [pc, #32]	; (80033c4 <LORA_IF_Stransmit_Fragment_Firmware+0x68>)
 80033a2:	f002 ff8c 	bl	80062be <HAL_GPIO_TogglePin>
		 HAL_Delay(WAIT_PACKET_SEND);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f002 f9f2 	bl	8005790 <HAL_Delay>
		/*Read the first Frame */
//		switch(local_u8Check_Code = LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_16BYTES)){
//			case(MCU_ACKNOWLEDGE_FINISHING):
//				buffer_packet[2] = buffer_resp[2];
		 return LORA_OKE ;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e003      	b.n	80033b8 <LORA_IF_Stransmit_Fragment_Firmware+0x5c>
//			case(MCU_IMAGE_CRC_NOT_CORRECT):
//				return LORA_FLASHING_ERROR;
	 }
//		}
	 else{
		 counter++;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	3301      	adds	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_80BYTES, MAX_TIME_OUT);
 80033b6:	e7d8      	b.n	800336a <LORA_IF_Stransmit_Fragment_Firmware+0xe>
			 return LORA_ERROR;
		 }
	 }

	}
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200009f8 	.word	0x200009f8
 80033c4:	40010c00 	.word	0x40010c00

080033c8 <LORA_IF_GetData_End_Frame>:

uint8_t LORA_IF_GetData_End_Frame(SX1278_t *module, uint8_t *rxBuffer, uint32_t unicast_addr , uint8_t length, uint32_t timeout){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	70fb      	strb	r3, [r7, #3]
	uint32 local_u32timeout = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
	uint32_t local_u32addrNode_req;
	ret = SX1278_LoRaEntryRx(module, 112, 3000);
 80033da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033de:	2170      	movs	r1, #112	; 0x70
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff fcc7 	bl	8002d74 <SX1278_LoRaEntryRx>
 80033e6:	4603      	mov	r3, r0
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <LORA_IF_GetData_End_Frame+0xd4>)
 80033ec:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <LORA_IF_GetData_End_Frame+0xd8>)
 80033f0:	492c      	ldr	r1, [pc, #176]	; (80034a4 <LORA_IF_GetData_End_Frame+0xdc>)
 80033f2:	482d      	ldr	r0, [pc, #180]	; (80034a8 <LORA_IF_GetData_End_Frame+0xe0>)
 80033f4:	f000 fd60 	bl	8003eb8 <AES_init_ctx_iv>
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff fd20 	bl	8002e3e <SX1278_LoRaRxPacket>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <LORA_IF_GetData_End_Frame+0xd4>)
 8003404:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <LORA_IF_GetData_End_Frame+0xd4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d036      	beq.n	800347c <LORA_IF_GetData_End_Frame+0xb4>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800340e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003412:	4826      	ldr	r0, [pc, #152]	; (80034ac <LORA_IF_GetData_End_Frame+0xe4>)
 8003414:	f002 ff53 	bl	80062be <HAL_GPIO_TogglePin>
			ret = SX1278_read(module, (uint8_t*) rxBuffer, ret);
 8003418:	4b20      	ldr	r3, [pc, #128]	; (800349c <LORA_IF_GetData_End_Frame+0xd4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff fe14 	bl	800304e <SX1278_read>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <LORA_IF_GetData_End_Frame+0xd4>)
 800342c:	701a      	strb	r2, [r3, #0]
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) rxBuffer, length);
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	461a      	mov	r2, r3
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	481c      	ldr	r0, [pc, #112]	; (80034a8 <LORA_IF_GetData_End_Frame+0xe0>)
 8003436:	f001 fb40 	bl	8004aba <AES_CTR_xcrypt_buffer>
			//convert buffer to address_node_req
			local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	061a      	lsls	r2, r3, #24
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	431a      	orrs	r2, r3
									|(rxBuffer[2] << SHIFT_8_BIT) | (rxBuffer[3] << SHIFT_0_BIT);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3302      	adds	r3, #2
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	4313      	orrs	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	3203      	adds	r2, #3
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	4313      	orrs	r3, r2
			local_u32addrNode_req = (rxBuffer[0] << SHIFT_24_BIT) |(rxBuffer[1] << SHIFT_16_BIT)
 800345c:	613b      	str	r3, [r7, #16]
			if(local_u32addrNode_req == ADDRESS__MAC_NODE_1 ||local_u32addrNode_req == ADDRESS__MAC_NODE_2 || local_u32addrNode_req == ADDRESS__MAC_NODE_3 )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <LORA_IF_GetData_End_Frame+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <LORA_IF_GetData_End_Frame+0xae>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <LORA_IF_GetData_End_Frame+0xec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <LORA_IF_GetData_End_Frame+0xae>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <LORA_IF_GetData_End_Frame+0xf0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d102      	bne.n	800347c <LORA_IF_GetData_End_Frame+0xb4>
				//return flag
				return rxBuffer[4];
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	e00b      	b.n	8003494 <LORA_IF_GetData_End_Frame+0xcc>
		}
		local_u32timeout++;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8003482:	2001      	movs	r0, #1
 8003484:	f002 f984 	bl	8005790 <HAL_Delay>
		if(local_u32timeout == MAX_TIME_OUT_RECEIVE )
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800348e:	4293      	cmp	r3, r2
 8003490:	d1b2      	bne.n	80033f8 <LORA_IF_GetData_End_Frame+0x30>
			return 0;
 8003492:	2300      	movs	r3, #0
	}
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200009f8 	.word	0x200009f8
 80034a0:	20000054 	.word	0x20000054
 80034a4:	20000044 	.word	0x20000044
 80034a8:	20001330 	.word	0x20001330
 80034ac:	40010c00 	.word	0x40010c00
 80034b0:	26011bcd 	.word	0x26011bcd
 80034b4:	26011def 	.word	0x26011def
 80034b8:	260120f0 	.word	0x260120f0

080034bc <UI_Init>:
static uint16_t gl_TimeRequest;
static uint32_t gl_u32Version;
/**************************************************/
/*				  Init FUNC					      */
/**************************************************/
void UI_Init(void){
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	// Init variables
	gl_UISTATE = UI_IDLE;
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <UI_Init+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
	gl_u8DownLoadProgress = INIT_VAL_ZERO;
 80034c6:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <UI_Init+0x44>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	gl_u32SizeCodeFw = INIT_VAL_ZERO;
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <UI_Init+0x48>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
	gl_counterdot = INIT_VAL_ZERO;
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <UI_Init+0x4c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
	// Init OLED display
	SSD1306_Init();
 80034d8:	f7fe ff8e 	bl	80023f8 <SSD1306_Init>
	/*Run main Appication before go to Flashing Appl*/
	// Init Flashing
	UI_Init_Flashing_Screen();
 80034dc:	f000 f980 	bl	80037e0 <UI_Init_Flashing_Screen>
	RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 80034e0:	480a      	ldr	r0, [pc, #40]	; (800350c <UI_Init+0x50>)
 80034e2:	f7fe facf 	bl	8001a84 <Rte_SystemState_ReadData>
	if(gl_SystemState == SYS_REQUEST_OTA){
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <UI_Init+0x50>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d104      	bne.n	80034f8 <UI_Init+0x3c>
		UI_Clean();
 80034ee:	f000 f997 	bl	8003820 <UI_Clean>
		gl_UISTATE = UI_START_OTA;
 80034f2:	4b02      	ldr	r3, [pc, #8]	; (80034fc <UI_Init+0x40>)
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
	}

}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200013f0 	.word	0x200013f0
 8003500:	200013f2 	.word	0x200013f2
 8003504:	200013f8 	.word	0x200013f8
 8003508:	200013fc 	.word	0x200013fc
 800350c:	200013f1 	.word	0x200013f1

08003510 <UI_Main_FLASHING>:

void UI_Main_FLASHING(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
	switch (gl_UISTATE) {
 8003516:	4bac      	ldr	r3, [pc, #688]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b08      	cmp	r3, #8
 800351c:	f200 813f 	bhi.w	800379e <UI_Main_FLASHING+0x28e>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UI_Main_FLASHING+0x18>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003593 	.word	0x08003593
 8003530:	080035cd 	.word	0x080035cd
 8003534:	080035f9 	.word	0x080035f9
 8003538:	08003655 	.word	0x08003655
 800353c:	080036ad 	.word	0x080036ad
 8003540:	08003711 	.word	0x08003711
 8003544:	08003783 	.word	0x08003783
 8003548:	08003761 	.word	0x08003761
		/* UI_IDE STATE */
		case UI_IDLE:
		{
			UI_Init_Flashing_Screen();
 800354c:	f000 f948 	bl	80037e0 <UI_Init_Flashing_Screen>
			// Get System state Via RTE
			Std_ReturnType retVal  = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8003550:	489e      	ldr	r0, [pc, #632]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003552:	f7fe fa97 	bl	8001a84 <Rte_SystemState_ReadData>
 8003556:	4603      	mov	r3, r0
 8003558:	71bb      	strb	r3, [r7, #6]
			if(RTE_E_OKE == retVal){
 800355a:	79bb      	ldrb	r3, [r7, #6]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d114      	bne.n	800358a <UI_Main_FLASHING+0x7a>
				if(SYS_RECEIVE_UPDATE == gl_SystemState )
 8003560:	4b9a      	ldr	r3, [pc, #616]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b02      	cmp	r3, #2
 8003566:	f040 811e 	bne.w	80037a6 <UI_Main_FLASHING+0x296>
				{
					// Clean UI screen
					UI_Clean();
 800356a:	f000 f959 	bl	8003820 <UI_Clean>
					UI_WaitForResp();
 800356e:	f000 f95f 	bl	8003830 <UI_WaitForResp>
					HAL_Delay(1000);
 8003572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003576:	f002 f90b 	bl	8005790 <HAL_Delay>
					UI_Clean();
 800357a:	f000 f951 	bl	8003820 <UI_Clean>
					// Display Information for FLashing
					UI_Downloading_FW();
 800357e:	f000 f9dd 	bl	800393c <UI_Downloading_FW>
					gl_UISTATE =  UI_DOWNLOADING_FW;
 8003582:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]

			else{
				/*State In IDLE STATE and Change UI to ERROR STATE*/
				gl_UISTATE = UI_DISPLAYERROR;
			}
			break;
 8003588:	e10d      	b.n	80037a6 <UI_Main_FLASHING+0x296>
				gl_UISTATE = UI_DISPLAYERROR;
 800358a:	4b8f      	ldr	r3, [pc, #572]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 800358c:	2207      	movs	r2, #7
 800358e:	701a      	strb	r2, [r3, #0]
			break;
 8003590:	e109      	b.n	80037a6 <UI_Main_FLASHING+0x296>
		}
		case UI_DOWNLOADING_FW:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_DOWNLOAD_PROGRESS_ReadData(&gl_u8DownLoadProgress);
 8003592:	488f      	ldr	r0, [pc, #572]	; (80037d0 <UI_Main_FLASHING+0x2c0>)
 8003594:	f7fe fb42 	bl	8001c1c <Rte_UpdateProgress_ReadData>
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
			if( RTE_E_OKE == retVal){
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 8103 	bne.w	80037aa <UI_Main_FLASHING+0x29a>
				UI_UpdateDownloading_FW(gl_u8DownLoadProgress);
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <UI_Main_FLASHING+0x2c0>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f9f3 	bl	8003994 <UI_UpdateDownloading_FW>
				if(100 == gl_u8DownLoadProgress)
 80035ae:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <UI_Main_FLASHING+0x2c0>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	f040 80f9 	bne.w	80037aa <UI_Main_FLASHING+0x29a>
				{
					HAL_Delay(2000);
 80035b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035bc:	f002 f8e8 	bl	8005790 <HAL_Delay>
					UI_Clean();
 80035c0:	f000 f92e 	bl	8003820 <UI_Clean>
					gl_UISTATE = UI_START_OTA;
 80035c4:	4b80      	ldr	r3, [pc, #512]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80035ca:	e0ee      	b.n	80037aa <UI_Main_FLASHING+0x29a>
		}
		case UI_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 80035cc:	487f      	ldr	r0, [pc, #508]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 80035ce:	f7fe fa59 	bl	8001a84 <Rte_SystemState_ReadData>
 80035d2:	4603      	mov	r3, r0
 80035d4:	723b      	strb	r3, [r7, #8]
			if (RTE_E_OKE == retVal){
 80035d6:	7a3b      	ldrb	r3, [r7, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 80e8 	bne.w	80037ae <UI_Main_FLASHING+0x29e>
				if(gl_SystemState == SYS_REQUEST_OTA){
 80035de:	4b7b      	ldr	r3, [pc, #492]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d104      	bne.n	80035f0 <UI_Main_FLASHING+0xe0>
					UI_Clean();
 80035e6:	f000 f91b 	bl	8003820 <UI_Clean>
					UI_StartOTA();
 80035ea:	f000 facd 	bl	8003b88 <UI_StartOTA>
				else {
					gl_UISTATE = UI_WAIT_START_OTA;
					//UI_Clean();
				}
			}
			break;
 80035ee:	e0de      	b.n	80037ae <UI_Main_FLASHING+0x29e>
					gl_UISTATE = UI_WAIT_START_OTA;
 80035f0:	4b75      	ldr	r3, [pc, #468]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 80035f2:	2203      	movs	r2, #3
 80035f4:	701a      	strb	r2, [r3, #0]
			break;
 80035f6:	e0da      	b.n	80037ae <UI_Main_FLASHING+0x29e>
		}
		case UI_WAIT_START_OTA:
		{
			Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 80035f8:	4874      	ldr	r0, [pc, #464]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 80035fa:	f7fe fa43 	bl	8001a84 <Rte_SystemState_ReadData>
 80035fe:	4603      	mov	r3, r0
 8003600:	72bb      	strb	r3, [r7, #10]
			retVal = Rte_PacketSendLoraNum_ReadData(&gl_TimeRequest);
 8003602:	4874      	ldr	r0, [pc, #464]	; (80037d4 <UI_Main_FLASHING+0x2c4>)
 8003604:	f7fe fb76 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
 8003608:	4603      	mov	r3, r0
 800360a:	72bb      	strb	r3, [r7, #10]
			if(RTE_E_OKE == retVal){
 800360c:	7abb      	ldrb	r3, [r7, #10]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d120      	bne.n	8003654 <UI_Main_FLASHING+0x144>
				if(gl_SystemState == SYS_WAIT_ACCEPT_OTA){
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d105      	bne.n	8003626 <UI_Main_FLASHING+0x116>
					UI_Wait_ACCEPT_OTA(gl_TimeRequest);
 800361a:	4b6e      	ldr	r3, [pc, #440]	; (80037d4 <UI_Main_FLASHING+0x2c4>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fac6 	bl	8003bb0 <UI_Wait_ACCEPT_OTA>
 8003624:	e016      	b.n	8003654 <UI_Main_FLASHING+0x144>

				}
				else if(gl_SystemState == SYS_REQUEST_OTA){
 8003626:	4b69      	ldr	r3, [pc, #420]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d103      	bne.n	8003636 <UI_Main_FLASHING+0x126>
					gl_UISTATE = UI_START_OTA;
 800362e:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003630:	2202      	movs	r2, #2
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e00e      	b.n	8003654 <UI_Main_FLASHING+0x144>
				}
				else if (gl_SystemState == SYS_CONFIG_LORA){
 8003636:	4b65      	ldr	r3, [pc, #404]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d105      	bne.n	800364a <UI_Main_FLASHING+0x13a>
					gl_UISTATE = UI_SYNCONFIGURATION;
 800363e:	4b62      	ldr	r3, [pc, #392]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003640:	2204      	movs	r2, #4
 8003642:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 8003644:	f000 f8ec 	bl	8003820 <UI_Clean>
 8003648:	e004      	b.n	8003654 <UI_Main_FLASHING+0x144>
				}
				else {
					/*OUT OF REQUEST*/
					gl_UISTATE=UI_DISPLAYERROR;
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 800364c:	2207      	movs	r2, #7
 800364e:	701a      	strb	r2, [r3, #0]
					UI_Clean();
 8003650:	f000 f8e6 	bl	8003820 <UI_Clean>
			}

		}

		case UI_SYNCONFIGURATION:
		{	Std_ReturnType retVal = RTE_RUNNABLE_SYSTEM_STATE_ReadData(&gl_SystemState);
 8003654:	485d      	ldr	r0, [pc, #372]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003656:	f7fe fa15 	bl	8001a84 <Rte_SystemState_ReadData>
 800365a:	4603      	mov	r3, r0
 800365c:	727b      	strb	r3, [r7, #9]
			retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 800365e:	485e      	ldr	r0, [pc, #376]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 8003660:	f7fe fb00 	bl	8001c64 <Rte_UI_Error_ReadData>
 8003664:	4603      	mov	r3, r0
 8003666:	727b      	strb	r3, [r7, #9]
			if( RTE_E_OKE == retVal){
 8003668:	7a7b      	ldrb	r3, [r7, #9]
 800366a:	2b01      	cmp	r3, #1
 800366c:	f040 80a1 	bne.w	80037b2 <UI_Main_FLASHING+0x2a2>
				if(gl_SystemState == SYS_CONFIG_LORA){
 8003670:	4b56      	ldr	r3, [pc, #344]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d102      	bne.n	800367e <UI_Main_FLASHING+0x16e>
					UI_Synconfiguaraton();
 8003678:	f000 fa34 	bl	8003ae4 <UI_Synconfiguaraton>
 800367c:	e006      	b.n	800368c <UI_Main_FLASHING+0x17c>
				}
				else if(gl_SystemState == SYS_SEND_UPDATE)
 800367e:	4b53      	ldr	r3, [pc, #332]	; (80037cc <UI_Main_FLASHING+0x2bc>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b07      	cmp	r3, #7
 8003684:	d102      	bne.n	800368c <UI_Main_FLASHING+0x17c>
					gl_UISTATE = UI_SENDPACKET_LORA_FW;
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003688:	2205      	movs	r2, #5
 800368a:	701a      	strb	r2, [r3, #0]
				if(gl_u8ErrorFlag == GW_REQUEST_UPDATE_ERROR){
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b2f      	cmp	r3, #47	; 0x2f
 8003692:	f040 808e 	bne.w	80037b2 <UI_Main_FLASHING+0x2a2>
					UI_Clean();
 8003696:	f000 f8c3 	bl	8003820 <UI_Clean>
					gl_UISTATE =UI_DISPLAYERROR;
 800369a:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 800369c:	2207      	movs	r2, #7
 800369e:	701a      	strb	r2, [r3, #0]
					UI_DisplayERROR(gl_u8ErrorFlag);
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 faaf 	bl	8003c08 <UI_DisplayERROR>
				}
			}
			break;
 80036aa:	e082      	b.n	80037b2 <UI_Main_FLASHING+0x2a2>
		}
		case UI_SENDPACKET_LORA_FW:
		{

			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 80036ac:	484b      	ldr	r0, [pc, #300]	; (80037dc <UI_Main_FLASHING+0x2cc>)
 80036ae:	f7fe fb21 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
 80036b2:	4603      	mov	r3, r0
 80036b4:	733b      	strb	r3, [r7, #12]

			if(RTE_E_OKE == retVal_1){
 80036b6:	7b3b      	ldrb	r3, [r7, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d17c      	bne.n	80037b6 <UI_Main_FLASHING+0x2a6>
				UI_SendSW_LoRa(gl_u16Packet_LoRa_FW);
 80036bc:	4b47      	ldr	r3, [pc, #284]	; (80037dc <UI_Main_FLASHING+0x2cc>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fa29 	bl	8003b18 <UI_SendSW_LoRa>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 80036c6:	4844      	ldr	r0, [pc, #272]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 80036c8:	f7fe facc 	bl	8001c64 <Rte_UI_Error_ReadData>
 80036cc:	4603      	mov	r3, r0
 80036ce:	72fb      	strb	r3, [r7, #11]
				if( MCU_ERROR_CRC == gl_u8ErrorFlag  ){
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b4f      	cmp	r3, #79	; 0x4f
 80036d6:	d105      	bne.n	80036e4 <UI_Main_FLASHING+0x1d4>
					UI_Clean();
 80036d8:	f000 f8a2 	bl	8003820 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 80036de:	2207      	movs	r2, #7
 80036e0:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
				}

			}
			break;
 80036e2:	e068      	b.n	80037b6 <UI_Main_FLASHING+0x2a6>
				else if( MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 80036e4:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b77      	cmp	r3, #119	; 0x77
 80036ea:	d107      	bne.n	80036fc <UI_Main_FLASHING+0x1ec>
					UI_Clean();
 80036ec:	f000 f898 	bl	8003820 <UI_Clean>
					UI_DoneDownload_FW();
 80036f0:	f000 f97c 	bl	80039ec <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 80036f6:	2208      	movs	r2, #8
 80036f8:	701a      	strb	r2, [r3, #0]
			break;
 80036fa:	e05c      	b.n	80037b6 <UI_Main_FLASHING+0x2a6>
				else if(MCU_REQUEST_PACKET_FW_LOSS ==gl_u8ErrorFlag ){
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b76      	cmp	r3, #118	; 0x76
 8003702:	d158      	bne.n	80037b6 <UI_Main_FLASHING+0x2a6>
					UI_Clean();
 8003704:	f000 f88c 	bl	8003820 <UI_Clean>
					gl_UISTATE = UI_RESENDPACKET_LORA_FW;
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 800370a:	2206      	movs	r2, #6
 800370c:	701a      	strb	r2, [r3, #0]
			break;
 800370e:	e052      	b.n	80037b6 <UI_Main_FLASHING+0x2a6>
		}
		case UI_RESENDPACKET_LORA_FW:
		{
			Std_ReturnType retVal_1 = RTE_RUNNABLE_PACKET_SEND_LORA_NUM_ReadData(&gl_u16Packet_LoRa_FW);
 8003710:	4832      	ldr	r0, [pc, #200]	; (80037dc <UI_Main_FLASHING+0x2cc>)
 8003712:	f7fe faef 	bl	8001cf4 <Rte_PacketSendLoraNum_ReadData>
 8003716:	4603      	mov	r3, r0
 8003718:	73bb      	strb	r3, [r7, #14]
			if(RTE_E_OKE == retVal_1){
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d14c      	bne.n	80037ba <UI_Main_FLASHING+0x2aa>
				UI_Send_Packet_Lost(gl_u16Packet_LoRa_FW);
 8003720:	4b2e      	ldr	r3, [pc, #184]	; (80037dc <UI_Main_FLASHING+0x2cc>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fabf 	bl	8003ca8 <UI_Send_Packet_Lost>
				Std_ReturnType retVal_2 = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 800372a:	482b      	ldr	r0, [pc, #172]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 800372c:	f7fe fa9a 	bl	8001c64 <Rte_UI_Error_ReadData>
 8003730:	4603      	mov	r3, r0
 8003732:	737b      	strb	r3, [r7, #13]
				if(MCU_ERROR_CRC  ==gl_u8ErrorFlag){
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b4f      	cmp	r3, #79	; 0x4f
 800373a:	d105      	bne.n	8003748 <UI_Main_FLASHING+0x238>
					UI_Clean();
 800373c:	f000 f870 	bl	8003820 <UI_Clean>
					gl_UISTATE = UI_DISPLAYERROR;
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003742:	2207      	movs	r2, #7
 8003744:	701a      	strb	r2, [r3, #0]
					UI_Clean();
					UI_DoneDownload_FW();
					gl_UISTATE = UI_DONE_OTA;
				}
			}
			break;
 8003746:	e038      	b.n	80037ba <UI_Main_FLASHING+0x2aa>
				else if(MCU_ACKNOWLEDGE_FINISHING == gl_u8ErrorFlag){
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b77      	cmp	r3, #119	; 0x77
 800374e:	d134      	bne.n	80037ba <UI_Main_FLASHING+0x2aa>
					UI_Clean();
 8003750:	f000 f866 	bl	8003820 <UI_Clean>
					UI_DoneDownload_FW();
 8003754:	f000 f94a 	bl	80039ec <UI_DoneDownload_FW>
					gl_UISTATE = UI_DONE_OTA;
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 800375a:	2208      	movs	r2, #8
 800375c:	701a      	strb	r2, [r3, #0]
			break;
 800375e:	e02c      	b.n	80037ba <UI_Main_FLASHING+0x2aa>
		}
		case UI_DONE_OTA:
		{
			gl_UISTATE = UI_IDLE;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
			UI_DoneDownload_FW();
 8003766:	f000 f941 	bl	80039ec <UI_DoneDownload_FW>
			HAL_Delay(2000);
 800376a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800376e:	f002 f80f 	bl	8005790 <HAL_Delay>
			UI_Clean();
 8003772:	f000 f855 	bl	8003820 <UI_Clean>
			UI_Init_Flashing_Screen();
 8003776:	f000 f833 	bl	80037e0 <UI_Init_Flashing_Screen>
			RTE_RUNNABLE_SYSTEM_STATE_WriteData(SYS_IDLE);
 800377a:	2000      	movs	r0, #0
 800377c:	f7fe f970 	bl	8001a60 <Rte_SystemState_WriteData>
			break;
 8003780:	e01e      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
		}
		case UI_DISPLAYERROR:
		{
			/*ERROR Handler */
			Std_ReturnType retVal = RTE_RUNNABLE_UI_ERROR_ReadData(&gl_u8ErrorFlag);
 8003782:	4815      	ldr	r0, [pc, #84]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 8003784:	f7fe fa6e 	bl	8001c64 <Rte_UI_Error_ReadData>
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]
			if(RTE_E_OKE == retVal){
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <UI_Main_FLASHING+0x2ae>
				UI_DisplayERROR(gl_u8ErrorFlag);
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <UI_Main_FLASHING+0x2c8>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa36 	bl	8003c08 <UI_DisplayERROR>

			}
			break;
 800379c:	e00f      	b.n	80037be <UI_Main_FLASHING+0x2ae>
		}
		default:
			/*ERROR */
			gl_UISTATE = UI_DISPLAYERROR;
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <UI_Main_FLASHING+0x2b8>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	701a      	strb	r2, [r3, #0]
			break;
 80037a4:	e00c      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037a6:	bf00      	nop
 80037a8:	e00a      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037aa:	bf00      	nop
 80037ac:	e008      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037ae:	bf00      	nop
 80037b0:	e006      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <UI_Main_FLASHING+0x2b0>
			break;
 80037be:	bf00      	nop
	}
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200013f0 	.word	0x200013f0
 80037cc:	200013f1 	.word	0x200013f1
 80037d0:	200013f2 	.word	0x200013f2
 80037d4:	200013fe 	.word	0x200013fe
 80037d8:	200013f3 	.word	0x200013f3
 80037dc:	200013f4 	.word	0x200013f4

080037e0 <UI_Init_Flashing_Screen>:
/**********************************************************/
/*					   Private UI FUNC					  */
/**********************************************************/
static void UI_Init_Flashing_Screen(void){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	/* Set Backgroun color */
	SSD1306_GotoXY (5,10); // goto 10, 10
 80037e4:	210a      	movs	r1, #10
 80037e6:	2005      	movs	r0, #5
 80037e8:	f7fe ff6e 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts("GATEWAY", &Font_11x18, 1); // print start FUOTA
 80037ec:	2201      	movs	r2, #1
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <UI_Init_Flashing_Screen+0x30>)
 80037f0:	4808      	ldr	r0, [pc, #32]	; (8003814 <UI_Init_Flashing_Screen+0x34>)
 80037f2:	f7fe ffff 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (10, 40);
 80037f6:	2128      	movs	r1, #40	; 0x28
 80037f8:	200a      	movs	r0, #10
 80037fa:	f7fe ff65 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA UPDATE!!", &Font_7x10, 1);
 80037fe:	2201      	movs	r2, #1
 8003800:	4905      	ldr	r1, [pc, #20]	; (8003818 <UI_Init_Flashing_Screen+0x38>)
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <UI_Init_Flashing_Screen+0x3c>)
 8003804:	f7fe fff6 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003808:	f7fe feba 	bl	8002580 <SSD1306_UpdateScreen>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	2000006c 	.word	0x2000006c
 8003814:	08009fe8 	.word	0x08009fe8
 8003818:	20000064 	.word	0x20000064
 800381c:	08009ff0 	.word	0x08009ff0

08003820 <UI_Clean>:
static void UI_Clean(void){
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8003824:	f7ff f80b 	bl	800283e <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8003828:	f7fe feaa 	bl	8002580 <SSD1306_UpdateScreen>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <UI_WaitForResp>:

static void UI_WaitForResp(void){
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
	uint32_t local_u32NodeAddr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
	uint32_t local_u32Codesize = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
	uint16_t local_u16Appver=0U;
 800383e:	2300      	movs	r3, #0
 8003840:	837b      	strh	r3, [r7, #26]
	RTE_RUNNABLE_CODE_SIZE_ReadData(&local_u32Codesize);
 8003842:	f107 031c 	add.w	r3, r7, #28
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe f9c4 	bl	8001bd4 <Rte_CodeSize_ReadData>
	RTE_RUNNABLE_APP_VER_ReadData(&local_u16Appver);
 800384c:	f107 031a 	add.w	r3, r7, #26
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe f9ad 	bl	8001bb0 <Rte_ApplVer_ReadData>
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 8003856:	f107 0320 	add.w	r3, r7, #32
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe f9cc 	bl	8001bf8 <Rte_NodeAddr_ReadData>
	char buffer_version[10];
	char buffer_data_id[10];

	uint8_t major_version = (local_u16Appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8003860:	8b7b      	ldrh	r3, [r7, #26]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t minor_version = local_u16Appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	sprintf(buffer_data_id, "0x%X", local_u32NodeAddr);
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	4929      	ldr	r1, [pc, #164]	; (800391c <UI_WaitForResp+0xec>)
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fef8 	bl	800966c <siprintf>
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 800387c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003884:	f107 0010 	add.w	r0, r7, #16
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <UI_WaitForResp+0xf0>)
 800388a:	f005 feef 	bl	800966c <siprintf>
	char Local_DataBuffer[4];
	uint8_t local_estimatime = local_u32Codesize/BandWidth_UART +20;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <UI_WaitForResp+0xf4>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3314      	adds	r3, #20
 800389c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SSD1306_GotoXY (20, 0);
 80038a0:	2100      	movs	r1, #0
 80038a2:	2014      	movs	r0, #20
 80038a4:	f7fe ff10 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Update Downloading!!", &Font_7x10, 1);
 80038a8:	2201      	movs	r2, #1
 80038aa:	491f      	ldr	r1, [pc, #124]	; (8003928 <UI_WaitForResp+0xf8>)
 80038ac:	481f      	ldr	r0, [pc, #124]	; (800392c <UI_WaitForResp+0xfc>)
 80038ae:	f7fe ffa1 	bl	80027f4 <SSD1306_Puts>
	sprintf(Local_DataBuffer , "%d" ,local_u16Appver );
 80038b2:	8b7b      	ldrh	r3, [r7, #26]
 80038b4:	461a      	mov	r2, r3
 80038b6:	463b      	mov	r3, r7
 80038b8:	491d      	ldr	r1, [pc, #116]	; (8003930 <UI_WaitForResp+0x100>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f005 fed6 	bl	800966c <siprintf>
	SSD1306_GotoXY (20, 10);
 80038c0:	210a      	movs	r1, #10
 80038c2:	2014      	movs	r0, #20
 80038c4:	f7fe ff00 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Version:", &Font_7x10, 1);
 80038c8:	2201      	movs	r2, #1
 80038ca:	4917      	ldr	r1, [pc, #92]	; (8003928 <UI_WaitForResp+0xf8>)
 80038cc:	4819      	ldr	r0, [pc, #100]	; (8003934 <UI_WaitForResp+0x104>)
 80038ce:	f7fe ff91 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (60, 10);
 80038d2:	210a      	movs	r1, #10
 80038d4:	203c      	movs	r0, #60	; 0x3c
 80038d6:	f7fe fef7 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	2201      	movs	r2, #1
 80038e0:	4911      	ldr	r1, [pc, #68]	; (8003928 <UI_WaitForResp+0xf8>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe ff86 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (20, 20);
 80038e8:	2114      	movs	r1, #20
 80038ea:	2014      	movs	r0, #20
 80038ec:	f7fe feec 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Address:", &Font_7x10, 1);
 80038f0:	2201      	movs	r2, #1
 80038f2:	490d      	ldr	r1, [pc, #52]	; (8003928 <UI_WaitForResp+0xf8>)
 80038f4:	4810      	ldr	r0, [pc, #64]	; (8003938 <UI_WaitForResp+0x108>)
 80038f6:	f7fe ff7d 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (60, 20);
 80038fa:	2114      	movs	r1, #20
 80038fc:	203c      	movs	r0, #60	; 0x3c
 80038fe:	f7fe fee3 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	2201      	movs	r2, #1
 8003906:	4908      	ldr	r1, [pc, #32]	; (8003928 <UI_WaitForResp+0xf8>)
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe ff73 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 800390e:	f7fe fe37 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0800a000 	.word	0x0800a000
 8003920:	0800a008 	.word	0x0800a008
 8003924:	10624dd3 	.word	0x10624dd3
 8003928:	20000064 	.word	0x20000064
 800392c:	0800a010 	.word	0x0800a010
 8003930:	0800a028 	.word	0x0800a028
 8003934:	0800a02c 	.word	0x0800a02c
 8003938:	0800a038 	.word	0x0800a038

0800393c <UI_Downloading_FW>:
static void UI_Downloading_FW(void){
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8003940:	210a      	movs	r1, #10
 8003942:	2028      	movs	r0, #40	; 0x28
 8003944:	f7fe fec0 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Downloading", &Font_7x10, 1);
 8003948:	2201      	movs	r2, #1
 800394a:	490e      	ldr	r1, [pc, #56]	; (8003984 <UI_Downloading_FW+0x48>)
 800394c:	480e      	ldr	r0, [pc, #56]	; (8003988 <UI_Downloading_FW+0x4c>)
 800394e:	f7fe ff51 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 8003952:	2114      	movs	r1, #20
 8003954:	2028      	movs	r0, #40	; 0x28
 8003956:	f7fe feb7 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("  in", &Font_7x10, 1);
 800395a:	2201      	movs	r2, #1
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <UI_Downloading_FW+0x48>)
 800395e:	480b      	ldr	r0, [pc, #44]	; (800398c <UI_Downloading_FW+0x50>)
 8003960:	f7fe ff48 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8003964:	211e      	movs	r1, #30
 8003966:	2028      	movs	r0, #40	; 0x28
 8003968:	f7fe feae 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Progress", &Font_7x10, 1);
 800396c:	2201      	movs	r2, #1
 800396e:	4905      	ldr	r1, [pc, #20]	; (8003984 <UI_Downloading_FW+0x48>)
 8003970:	4807      	ldr	r0, [pc, #28]	; (8003990 <UI_Downloading_FW+0x54>)
 8003972:	f7fe ff3f 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8003976:	2128      	movs	r1, #40	; 0x28
 8003978:	2032      	movs	r0, #50	; 0x32
 800397a:	f7fe fea5 	bl	80026c8 <SSD1306_GotoXY>
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000064 	.word	0x20000064
 8003988:	0800a044 	.word	0x0800a044
 800398c:	0800a050 	.word	0x0800a050
 8003990:	0800a058 	.word	0x0800a058

08003994 <UI_UpdateDownloading_FW>:
static void UI_UpdateDownloading_FW(uint8_t Var_Progress){
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_Progress);
 800399e:	79fa      	ldrb	r2, [r7, #7]
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <UI_UpdateDownloading_FW+0x4c>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f005 fe60 	bl	800966c <siprintf>
	SSD1306_GotoXY (50, 40);
 80039ac:	2128      	movs	r1, #40	; 0x28
 80039ae:	2032      	movs	r0, #50	; 0x32
 80039b0:	f7fe fe8a 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 80039b4:	2201      	movs	r2, #1
 80039b6:	490b      	ldr	r1, [pc, #44]	; (80039e4 <UI_UpdateDownloading_FW+0x50>)
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <UI_UpdateDownloading_FW+0x54>)
 80039ba:	f7fe ff1b 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 80039be:	2128      	movs	r1, #40	; 0x28
 80039c0:	2032      	movs	r0, #50	; 0x32
 80039c2:	f7fe fe81 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	2201      	movs	r2, #1
 80039cc:	4905      	ldr	r1, [pc, #20]	; (80039e4 <UI_UpdateDownloading_FW+0x50>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe ff10 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80039d4:	f7fe fdd4 	bl	8002580 <SSD1306_UpdateScreen>
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	0800a028 	.word	0x0800a028
 80039e4:	20000064 	.word	0x20000064
 80039e8:	0800a064 	.word	0x0800a064

080039ec <UI_DoneDownload_FW>:
static void UI_DoneDownload_FW(void){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
	/* Writing Text */
	Std_ReturnType retVal = RTE_RUNNABLE_APP_VER_ReadData(&gl_u32Version);
 80039f2:	4833      	ldr	r0, [pc, #204]	; (8003ac0 <UI_DoneDownload_FW+0xd4>)
 80039f4:	f7fe f8dc 	bl	8001bb0 <Rte_ApplVer_ReadData>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char buffer_version[10];
	char buffer_data_id[10];
	uint32_t local_u32NodeAddr = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
	RTE_RUNNABLE_NODE_ADDR_ReadData(&local_u32NodeAddr);
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f8f6 	bl	8001bf8 <Rte_NodeAddr_ReadData>
	uint8_t major_version = (gl_u32Version >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <UI_DoneDownload_FW+0xd4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t minor_version = gl_u32Version & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 8003a16:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <UI_DoneDownload_FW+0xd4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8003a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a26:	f107 0018 	add.w	r0, r7, #24
 8003a2a:	4926      	ldr	r1, [pc, #152]	; (8003ac4 <UI_DoneDownload_FW+0xd8>)
 8003a2c:	f005 fe1e 	bl	800966c <siprintf>
	sprintf(buffer_data_id, "0x%X", local_u32NodeAddr);
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	4924      	ldr	r1, [pc, #144]	; (8003ac8 <UI_DoneDownload_FW+0xdc>)
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f005 fe17 	bl	800966c <siprintf>
	char local_UpdateBuffer[4];
	SSD1306_GotoXY (40, 10);
 8003a3e:	210a      	movs	r1, #10
 8003a40:	2028      	movs	r0, #40	; 0x28
 8003a42:	f7fe fe41 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("FUOTA", &Font_11x18, 1);
 8003a46:	2201      	movs	r2, #1
 8003a48:	4920      	ldr	r1, [pc, #128]	; (8003acc <UI_DoneDownload_FW+0xe0>)
 8003a4a:	4821      	ldr	r0, [pc, #132]	; (8003ad0 <UI_DoneDownload_FW+0xe4>)
 8003a4c:	f7fe fed2 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (30, 30);
 8003a50:	211e      	movs	r1, #30
 8003a52:	201e      	movs	r0, #30
 8003a54:	f7fe fe38 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("COMPLETED", &Font_7x10, 1);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	491e      	ldr	r1, [pc, #120]	; (8003ad4 <UI_DoneDownload_FW+0xe8>)
 8003a5c:	481e      	ldr	r0, [pc, #120]	; (8003ad8 <UI_DoneDownload_FW+0xec>)
 8003a5e:	f7fe fec9 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (30, 40);
 8003a62:	2128      	movs	r1, #40	; 0x28
 8003a64:	201e      	movs	r0, #30
 8003a66:	f7fe fe2f 	bl	80026c8 <SSD1306_GotoXY>

	SSD1306_Puts ("VERSION: ", &Font_7x10, 1);
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4919      	ldr	r1, [pc, #100]	; (8003ad4 <UI_DoneDownload_FW+0xe8>)
 8003a6e:	481b      	ldr	r0, [pc, #108]	; (8003adc <UI_DoneDownload_FW+0xf0>)
 8003a70:	f7fe fec0 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 8003a74:	2128      	movs	r1, #40	; 0x28
 8003a76:	2064      	movs	r0, #100	; 0x64
 8003a78:	f7fe fe26 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_version, &Font_7x10, 1);
 8003a7c:	f107 0318 	add.w	r3, r7, #24
 8003a80:	2201      	movs	r2, #1
 8003a82:	4914      	ldr	r1, [pc, #80]	; (8003ad4 <UI_DoneDownload_FW+0xe8>)
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe feb5 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (20, 50);
 8003a8a:	2132      	movs	r1, #50	; 0x32
 8003a8c:	2014      	movs	r0, #20
 8003a8e:	f7fe fe1b 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Address:", &Font_7x10, 1);
 8003a92:	2201      	movs	r2, #1
 8003a94:	490f      	ldr	r1, [pc, #60]	; (8003ad4 <UI_DoneDownload_FW+0xe8>)
 8003a96:	4812      	ldr	r0, [pc, #72]	; (8003ae0 <UI_DoneDownload_FW+0xf4>)
 8003a98:	f7fe feac 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 8003a9c:	2132      	movs	r1, #50	; 0x32
 8003a9e:	203c      	movs	r0, #60	; 0x3c
 8003aa0:	f7fe fe12 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <UI_DoneDownload_FW+0xe8>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fea1 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003ab2:	f7fe fd65 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003ab6:	bf00      	nop
 8003ab8:	3728      	adds	r7, #40	; 0x28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20001400 	.word	0x20001400
 8003ac4:	0800a008 	.word	0x0800a008
 8003ac8:	0800a000 	.word	0x0800a000
 8003acc:	2000006c 	.word	0x2000006c
 8003ad0:	0800a06c 	.word	0x0800a06c
 8003ad4:	20000064 	.word	0x20000064
 8003ad8:	0800a074 	.word	0x0800a074
 8003adc:	0800a080 	.word	0x0800a080
 8003ae0:	0800a038 	.word	0x0800a038

08003ae4 <UI_Synconfiguaraton>:

static void UI_Synconfiguaraton(void){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (5, 20);
 8003ae8:	2114      	movs	r1, #20
 8003aea:	2005      	movs	r0, #5
 8003aec:	f7fe fdec 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("SYNC UP ", &Font_7x10, 1);
 8003af0:	2201      	movs	r2, #1
 8003af2:	4906      	ldr	r1, [pc, #24]	; (8003b0c <UI_Synconfiguaraton+0x28>)
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <UI_Synconfiguaraton+0x2c>)
 8003af6:	f7fe fe7d 	bl	80027f4 <SSD1306_Puts>
	SSD1306_Puts ("...", &Font_7x10, 1);
 8003afa:	2201      	movs	r2, #1
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <UI_Synconfiguaraton+0x28>)
 8003afe:	4805      	ldr	r0, [pc, #20]	; (8003b14 <UI_Synconfiguaraton+0x30>)
 8003b00:	f7fe fe78 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003b04:	f7fe fd3c 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000064 	.word	0x20000064
 8003b10:	0800a08c 	.word	0x0800a08c
 8003b14:	0800a098 	.word	0x0800a098

08003b18 <UI_SendSW_LoRa>:
static void UI_SendSW_LoRa(uint16_t Var_numPacket){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	4913      	ldr	r1, [pc, #76]	; (8003b78 <UI_SendSW_LoRa+0x60>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f005 fd9e 	bl	800966c <siprintf>
	SSD1306_GotoXY (5, 20);
 8003b30:	2114      	movs	r1, #20
 8003b32:	2005      	movs	r0, #5
 8003b34:	f7fe fdc8 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4910      	ldr	r1, [pc, #64]	; (8003b7c <UI_SendSW_LoRa+0x64>)
 8003b3c:	4810      	ldr	r0, [pc, #64]	; (8003b80 <UI_SendSW_LoRa+0x68>)
 8003b3e:	f7fe fe59 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8003b42:	2128      	movs	r1, #40	; 0x28
 8003b44:	2005      	movs	r0, #5
 8003b46:	f7fe fdbf 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET SEND :", &Font_7x10, 1);
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	490b      	ldr	r1, [pc, #44]	; (8003b7c <UI_SendSW_LoRa+0x64>)
 8003b4e:	480d      	ldr	r0, [pc, #52]	; (8003b84 <UI_SendSW_LoRa+0x6c>)
 8003b50:	f7fe fe50 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 40);
 8003b54:	2128      	movs	r1, #40	; 0x28
 8003b56:	2064      	movs	r0, #100	; 0x64
 8003b58:	f7fe fdb6 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2201      	movs	r2, #1
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <UI_SendSW_LoRa+0x64>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fe45 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003b6a:	f7fe fd09 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	0800a028 	.word	0x0800a028
 8003b7c:	20000064 	.word	0x20000064
 8003b80:	0800a09c 	.word	0x0800a09c
 8003b84:	0800a0a8 	.word	0x0800a0a8

08003b88 <UI_StartOTA>:

static void UI_StartOTA(void){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,10); // goto 10, 10
 8003b8c:	210a      	movs	r1, #10
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fe fd9a 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts("Send Request OTA!!", &Font_7x10, 1); // print start FUOTA
 8003b94:	2201      	movs	r2, #1
 8003b96:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <UI_StartOTA+0x20>)
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <UI_StartOTA+0x24>)
 8003b9a:	f7fe fe2b 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003b9e:	f7fe fcef 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000064 	.word	0x20000064
 8003bac:	0800a0b8 	.word	0x0800a0b8

08003bb0 <UI_Wait_ACCEPT_OTA>:
static void UI_Wait_ACCEPT_OTA(uint16_t Var_Time_request){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
	char local_DataBuffer[4];
	sprintf(local_DataBuffer, "%d", Var_Time_request);
 8003bba:	88fa      	ldrh	r2, [r7, #6]
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <UI_Wait_ACCEPT_OTA+0x4c>)
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f005 fd52 	bl	800966c <siprintf>
	SSD1306_GotoXY (0, 40);
 8003bc8:	2128      	movs	r1, #40	; 0x28
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fe fd7c 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("Time Request OTA:", &Font_7x10, 1);
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	490b      	ldr	r1, [pc, #44]	; (8003c00 <UI_Wait_ACCEPT_OTA+0x50>)
 8003bd4:	480b      	ldr	r0, [pc, #44]	; (8003c04 <UI_Wait_ACCEPT_OTA+0x54>)
 8003bd6:	f7fe fe0d 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (120, 40);
 8003bda:	2128      	movs	r1, #40	; 0x28
 8003bdc:	2078      	movs	r0, #120	; 0x78
 8003bde:	f7fe fd73 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (local_DataBuffer, &Font_7x10, 1);
 8003be2:	f107 030c 	add.w	r3, r7, #12
 8003be6:	2201      	movs	r2, #1
 8003be8:	4905      	ldr	r1, [pc, #20]	; (8003c00 <UI_Wait_ACCEPT_OTA+0x50>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fe02 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8003bf0:	f7fe fcc6 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0800a028 	.word	0x0800a028
 8003c00:	20000064 	.word	0x20000064
 8003c04:	0800a0cc 	.word	0x0800a0cc

08003c08 <UI_DisplayERROR>:

static void UI_DisplayERROR(uint8_t Var_UIError){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	char local_ErrorBuffer[4];
	sprintf(local_ErrorBuffer, "%d", Var_UIError);
 8003c12:	79fa      	ldrb	r2, [r7, #7]
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	491c      	ldr	r1, [pc, #112]	; (8003c8c <UI_DisplayERROR+0x84>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f005 fd26 	bl	800966c <siprintf>
	SSD1306_GotoXY (50, 20);
 8003c20:	2114      	movs	r1, #20
 8003c22:	2032      	movs	r0, #50	; 0x32
 8003c24:	f7fe fd50 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("ERROR :", &Font_7x10, 1);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4919      	ldr	r1, [pc, #100]	; (8003c90 <UI_DisplayERROR+0x88>)
 8003c2c:	4819      	ldr	r0, [pc, #100]	; (8003c94 <UI_DisplayERROR+0x8c>)
 8003c2e:	f7fe fde1 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (10, 40);
 8003c32:	2128      	movs	r1, #40	; 0x28
 8003c34:	200a      	movs	r0, #10
 8003c36:	f7fe fd47 	bl	80026c8 <SSD1306_GotoXY>
	switch (Var_UIError) {
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b4f      	cmp	r3, #79	; 0x4f
 8003c3e:	d006      	beq.n	8003c4e <UI_DisplayERROR+0x46>
 8003c40:	2b4f      	cmp	r3, #79	; 0x4f
 8003c42:	dc16      	bgt.n	8003c72 <UI_DisplayERROR+0x6a>
 8003c44:	2b1f      	cmp	r3, #31
 8003c46:	d00e      	beq.n	8003c66 <UI_DisplayERROR+0x5e>
 8003c48:	2b2f      	cmp	r3, #47	; 0x2f
 8003c4a:	d006      	beq.n	8003c5a <UI_DisplayERROR+0x52>
 8003c4c:	e011      	b.n	8003c72 <UI_DisplayERROR+0x6a>
		case MCU_ERROR_CRC:
			SSD1306_Puts ("INVALID CRC", &Font_7x10, 1);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	490f      	ldr	r1, [pc, #60]	; (8003c90 <UI_DisplayERROR+0x88>)
 8003c52:	4811      	ldr	r0, [pc, #68]	; (8003c98 <UI_DisplayERROR+0x90>)
 8003c54:	f7fe fdce 	bl	80027f4 <SSD1306_Puts>
			break;
 8003c58:	e011      	b.n	8003c7e <UI_DisplayERROR+0x76>
		case GW_REQUEST_UPDATE_ERROR:
			SSD1306_Puts ("REQUEST UPDATE ERROR", &Font_7x10, 1);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <UI_DisplayERROR+0x88>)
 8003c5e:	480f      	ldr	r0, [pc, #60]	; (8003c9c <UI_DisplayERROR+0x94>)
 8003c60:	f7fe fdc8 	bl	80027f4 <SSD1306_Puts>
			break;
 8003c64:	e00b      	b.n	8003c7e <UI_DisplayERROR+0x76>
		case GW_OUTOFREQUEST_ERROR:
			SSD1306_Puts ("REQUEST UPDATE FAIL", &Font_7x10, 1);
 8003c66:	2201      	movs	r2, #1
 8003c68:	4909      	ldr	r1, [pc, #36]	; (8003c90 <UI_DisplayERROR+0x88>)
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <UI_DisplayERROR+0x98>)
 8003c6c:	f7fe fdc2 	bl	80027f4 <SSD1306_Puts>
			break;
 8003c70:	e005      	b.n	8003c7e <UI_DisplayERROR+0x76>
		default:
			SSD1306_Puts ("UNKNOWN ERROR!!", &Font_7x10, 1);
 8003c72:	2201      	movs	r2, #1
 8003c74:	4906      	ldr	r1, [pc, #24]	; (8003c90 <UI_DisplayERROR+0x88>)
 8003c76:	480b      	ldr	r0, [pc, #44]	; (8003ca4 <UI_DisplayERROR+0x9c>)
 8003c78:	f7fe fdbc 	bl	80027f4 <SSD1306_Puts>
			break;
 8003c7c:	bf00      	nop
	}
	SSD1306_UpdateScreen(); //display
 8003c7e:	f7fe fc7f 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	0800a028 	.word	0x0800a028
 8003c90:	20000064 	.word	0x20000064
 8003c94:	0800a0e0 	.word	0x0800a0e0
 8003c98:	0800a0e8 	.word	0x0800a0e8
 8003c9c:	0800a0f4 	.word	0x0800a0f4
 8003ca0:	0800a10c 	.word	0x0800a10c
 8003ca4:	0800a120 	.word	0x0800a120

08003ca8 <UI_Send_Packet_Lost>:

static void UI_Send_Packet_Lost(uint16_t Var_numPacket){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
	char local_UpdateBuffer[4];
	sprintf(local_UpdateBuffer, "%d", Var_numPacket);
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4913      	ldr	r1, [pc, #76]	; (8003d08 <UI_Send_Packet_Lost+0x60>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fcd6 	bl	800966c <siprintf>
	SSD1306_GotoXY (5, 10);
 8003cc0:	210a      	movs	r1, #10
 8003cc2:	2005      	movs	r0, #5
 8003cc4:	f7fe fd00 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("UPDATING...", &Font_7x10, 1);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4910      	ldr	r1, [pc, #64]	; (8003d0c <UI_Send_Packet_Lost+0x64>)
 8003ccc:	4810      	ldr	r0, [pc, #64]	; (8003d10 <UI_Send_Packet_Lost+0x68>)
 8003cce:	f7fe fd91 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 20);
 8003cd2:	2114      	movs	r1, #20
 8003cd4:	2005      	movs	r0, #5
 8003cd6:	f7fe fcf7 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts ("PACKET RESENT:", &Font_7x10, 1);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	490b      	ldr	r1, [pc, #44]	; (8003d0c <UI_Send_Packet_Lost+0x64>)
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <UI_Send_Packet_Lost+0x6c>)
 8003ce0:	f7fe fd88 	bl	80027f4 <SSD1306_Puts>
	SSD1306_GotoXY (100, 30);
 8003ce4:	211e      	movs	r1, #30
 8003ce6:	2064      	movs	r0, #100	; 0x64
 8003ce8:	f7fe fcee 	bl	80026c8 <SSD1306_GotoXY>
	SSD1306_Puts (local_UpdateBuffer, &Font_7x10, 1);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4906      	ldr	r1, [pc, #24]	; (8003d0c <UI_Send_Packet_Lost+0x64>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fd7d 	bl	80027f4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003cfa:	f7fe fc41 	bl	8002580 <SSD1306_UpdateScreen>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	0800a028 	.word	0x0800a028
 8003d0c:	20000064 	.word	0x20000064
 8003d10:	0800a09c 	.word	0x0800a09c
 8003d14:	0800a130 	.word	0x0800a130

08003d18 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e030      	b.n	8003d8a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	441a      	add	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	440b      	add	r3, r1
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	3301      	adds	r3, #1
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	441a      	add	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	440b      	add	r3, r1
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	440b      	add	r3, r1
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3303      	adds	r3, #3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	441a      	add	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	3303      	adds	r3, #3
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	440b      	add	r3, r1
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d9cb      	bls.n	8003d28 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8003d90:	2304      	movs	r3, #4
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e081      	b.n	8003e9a <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3302      	adds	r3, #2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	3303      	adds	r3, #3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d125      	bne.n	8003e22 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8003dd6:	7b3b      	ldrb	r3, [r7, #12]
 8003dd8:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8003dda:	7b7b      	ldrb	r3, [r7, #13]
 8003ddc:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8003dea:	7b3b      	ldrb	r3, [r7, #12]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <KeyExpansion+0x198>)
 8003df0:	5c9b      	ldrb	r3, [r3, r2]
 8003df2:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8003df4:	7b7b      	ldrb	r3, [r7, #13]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <KeyExpansion+0x198>)
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8003dfe:	7bbb      	ldrb	r3, [r7, #14]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <KeyExpansion+0x198>)
 8003e04:	5c9b      	ldrb	r3, [r3, r2]
 8003e06:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <KeyExpansion+0x198>)
 8003e0e:	5c9b      	ldrb	r3, [r3, r2]
 8003e10:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8003e12:	7b3a      	ldrb	r2, [r7, #12]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	4926      	ldr	r1, [pc, #152]	; (8003eb4 <KeyExpansion+0x19c>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	4053      	eors	r3, r2
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	7819      	ldrb	r1, [r3, #0]
 8003e38:	7b3a      	ldrb	r2, [r7, #12]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4403      	add	r3, r0
 8003e40:	404a      	eors	r2, r1
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	7819      	ldrb	r1, [r3, #0]
 8003e50:	7b7a      	ldrb	r2, [r7, #13]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3301      	adds	r3, #1
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4403      	add	r3, r0
 8003e5a:	404a      	eors	r2, r1
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	3302      	adds	r3, #2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	7819      	ldrb	r1, [r3, #0]
 8003e6a:	7bba      	ldrb	r2, [r7, #14]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3302      	adds	r3, #2
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4403      	add	r3, r0
 8003e74:	404a      	eors	r2, r1
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	7819      	ldrb	r1, [r3, #0]
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4403      	add	r3, r0
 8003e8e:	404a      	eors	r2, r1
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	3301      	adds	r3, #1
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b2b      	cmp	r3, #43	; 0x2b
 8003e9e:	f67f af7a 	bls.w	8003d96 <KeyExpansion+0x7e>
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	3724      	adds	r7, #36	; 0x24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	0800a160 	.word	0x0800a160
 8003eb4:	0800a360 	.word	0x0800a360

08003eb8 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff25 	bl	8003d18 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	33b0      	adds	r3, #176	; 0xb0
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f005 fc1c 	bl	8009714 <memcpy>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]
 8003ef6:	e027      	b.n	8003f48 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75bb      	strb	r3, [r7, #22]
 8003efc:	e01e      	b.n	8003f3c <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8003efe:	7dfa      	ldrb	r2, [r7, #23]
 8003f00:	7dbb      	ldrb	r3, [r7, #22]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	0092      	lsls	r2, r2, #2
 8003f06:	440a      	add	r2, r1
 8003f08:	4413      	add	r3, r2
 8003f0a:	7818      	ldrb	r0, [r3, #0]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	4413      	add	r3, r2
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	7dbb      	ldrb	r3, [r7, #22]
 8003f18:	4413      	add	r3, r2
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	7819      	ldrb	r1, [r3, #0]
 8003f22:	7dfa      	ldrb	r2, [r7, #23]
 8003f24:	7dbb      	ldrb	r3, [r7, #22]
 8003f26:	4041      	eors	r1, r0
 8003f28:	b2c8      	uxtb	r0, r1
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	0092      	lsls	r2, r2, #2
 8003f2e:	440a      	add	r2, r1
 8003f30:	4413      	add	r3, r2
 8003f32:	4602      	mov	r2, r0
 8003f34:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003f36:	7dbb      	ldrb	r3, [r7, #22]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	75bb      	strb	r3, [r7, #22]
 8003f3c:	7dbb      	ldrb	r3, [r7, #22]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d9dd      	bls.n	8003efe <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	3301      	adds	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d9d4      	bls.n	8003ef8 <AddRoundKey+0x14>
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
	...

08003f5c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e01d      	b.n	8003fa6 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73bb      	strb	r3, [r7, #14]
 8003f6e:	e014      	b.n	8003f9a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8003f70:	7bba      	ldrb	r2, [r7, #14]
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	440a      	add	r2, r1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	7bba      	ldrb	r2, [r7, #14]
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <SubBytes+0x5c>)
 8003f86:	5c08      	ldrb	r0, [r1, r0]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	440a      	add	r2, r1
 8003f8e:	4413      	add	r3, r2
 8003f90:	4602      	mov	r2, r0
 8003f92:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003f94:	7bbb      	ldrb	r3, [r7, #14]
 8003f96:	3301      	adds	r3, #1
 8003f98:	73bb      	strb	r3, [r7, #14]
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d9e7      	bls.n	8003f70 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d9de      	bls.n	8003f6a <SubBytes+0xe>
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	0800a160 	.word	0x0800a160

08003fbc <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	795a      	ldrb	r2, [r3, #5]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7a5a      	ldrb	r2, [r3, #9]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7b5a      	ldrb	r2, [r3, #13]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	789b      	ldrb	r3, [r3, #2]
 8003fec:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a9a      	ldrb	r2, [r3, #10]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	799b      	ldrb	r3, [r3, #6]
 8004000:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7b9a      	ldrb	r2, [r3, #14]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	78db      	ldrb	r3, [r3, #3]
 8004014:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7bda      	ldrb	r2, [r3, #15]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7ada      	ldrb	r2, [r3, #11]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	79da      	ldrb	r2, [r3, #7]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	71da      	strb	r2, [r3, #7]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <xtime>:

static uint8_t xtime(uint8_t x)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	b25a      	sxtb	r2, r3
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	09db      	lsrs	r3, r3, #7
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4619      	mov	r1, r3
 8004056:	0049      	lsls	r1, r1, #1
 8004058:	440b      	add	r3, r1
 800405a:	4619      	mov	r1, r3
 800405c:	00c8      	lsls	r0, r1, #3
 800405e:	4619      	mov	r1, r3
 8004060:	4603      	mov	r3, r0
 8004062:	440b      	add	r3, r1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	b25b      	sxtb	r3, r3
 8004068:	4053      	eors	r3, r2
 800406a:	b25b      	sxtb	r3, r3
 800406c:	b2db      	uxtb	r3, r3
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e0a4      	b.n	80041d0 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800408e:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	4053      	eors	r3, r2
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	789b      	ldrb	r3, [r3, #2]
 80040b0:	4053      	eors	r3, r2
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	4053      	eors	r3, r2
 80040c0:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	4053      	eors	r3, r2
 80040d6:	733b      	strb	r3, [r7, #12]
 80040d8:	7b3b      	ldrb	r3, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ffaf 	bl	800403e <xtime>
 80040e0:	4603      	mov	r3, r0
 80040e2:	733b      	strb	r3, [r7, #12]
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80040ec:	7b3a      	ldrb	r2, [r7, #12]
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	4053      	eors	r3, r2
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	404b      	eors	r3, r1
 80040f8:	b2d9      	uxtb	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	785a      	ldrb	r2, [r3, #1]
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	789b      	ldrb	r3, [r3, #2]
 8004114:	4053      	eors	r3, r2
 8004116:	733b      	strb	r3, [r7, #12]
 8004118:	7b3b      	ldrb	r3, [r7, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff8f 	bl	800403e <xtime>
 8004120:	4603      	mov	r3, r0
 8004122:	733b      	strb	r3, [r7, #12]
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	7859      	ldrb	r1, [r3, #1]
 800412e:	7b3a      	ldrb	r2, [r7, #12]
 8004130:	7b7b      	ldrb	r3, [r7, #13]
 8004132:	4053      	eors	r3, r2
 8004134:	b2da      	uxtb	r2, r3
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	404a      	eors	r2, r1
 800413a:	b2d1      	uxtb	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	460a      	mov	r2, r1
 8004144:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	789a      	ldrb	r2, [r3, #2]
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	78db      	ldrb	r3, [r3, #3]
 800415a:	4053      	eors	r3, r2
 800415c:	733b      	strb	r3, [r7, #12]
 800415e:	7b3b      	ldrb	r3, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff6c 	bl	800403e <xtime>
 8004166:	4603      	mov	r3, r0
 8004168:	733b      	strb	r3, [r7, #12]
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	7899      	ldrb	r1, [r3, #2]
 8004174:	7b3a      	ldrb	r2, [r7, #12]
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	4053      	eors	r3, r2
 800417a:	b2da      	uxtb	r2, r3
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	404a      	eors	r2, r1
 8004180:	b2d1      	uxtb	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	460a      	mov	r2, r1
 800418a:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	78da      	ldrb	r2, [r3, #3]
 8004196:	7bbb      	ldrb	r3, [r7, #14]
 8004198:	4053      	eors	r3, r2
 800419a:	733b      	strb	r3, [r7, #12]
 800419c:	7b3b      	ldrb	r3, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff4d 	bl	800403e <xtime>
 80041a4:	4603      	mov	r3, r0
 80041a6:	733b      	strb	r3, [r7, #12]
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	78d9      	ldrb	r1, [r3, #3]
 80041b2:	7b3a      	ldrb	r2, [r7, #12]
 80041b4:	7b7b      	ldrb	r3, [r7, #13]
 80041b6:	4053      	eors	r3, r2
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	404a      	eors	r2, r1
 80041be:	b2d1      	uxtb	r1, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	460a      	mov	r2, r1
 80041c8:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	3301      	adds	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f67f af57 	bls.w	8004086 <MixColumns+0xe>
  }
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80041e2:	b5b0      	push	{r4, r5, r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e33b      	b.n	8004868 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80041f8:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	789b      	ldrb	r3, [r3, #2]
 8004210:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	78db      	ldrb	r3, [r3, #3]
 800421c:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff0c 	bl	800403e <xtime>
 8004226:	4603      	mov	r3, r0
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff08 	bl	800403e <xtime>
 800422e:	4603      	mov	r3, r0
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff04 	bl	800403e <xtime>
 8004236:	4603      	mov	r3, r0
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff00 	bl	800403e <xtime>
 800423e:	7abb      	ldrb	r3, [r7, #10]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fefc 	bl	800403e <xtime>
 8004246:	4603      	mov	r3, r0
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fef8 	bl	800403e <xtime>
 800424e:	7abb      	ldrb	r3, [r7, #10]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fef4 	bl	800403e <xtime>
 8004256:	4603      	mov	r3, r0
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fef0 	bl	800403e <xtime>
 800425e:	4603      	mov	r3, r0
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff feec 	bl	800403e <xtime>
 8004266:	4603      	mov	r3, r0
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fee8 	bl	800403e <xtime>
 800426e:	7a7b      	ldrb	r3, [r7, #9]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fee4 	bl	800403e <xtime>
 8004276:	7a7b      	ldrb	r3, [r7, #9]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fee0 	bl	800403e <xtime>
 800427e:	4603      	mov	r3, r0
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fedc 	bl	800403e <xtime>
 8004286:	4603      	mov	r3, r0
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fed8 	bl	800403e <xtime>
 800428e:	4603      	mov	r3, r0
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fed4 	bl	800403e <xtime>
 8004296:	7a3b      	ldrb	r3, [r7, #8]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fed0 	bl	800403e <xtime>
 800429e:	7a3b      	ldrb	r3, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fecc 	bl	800403e <xtime>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fec8 	bl	800403e <xtime>
 80042ae:	7a3b      	ldrb	r3, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fec4 	bl	800403e <xtime>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fec0 	bl	800403e <xtime>
 80042be:	4603      	mov	r3, r0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff febc 	bl	800403e <xtime>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff feb8 	bl	800403e <xtime>
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff feb4 	bl	800403e <xtime>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461c      	mov	r4, r3
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff feae 	bl	800403e <xtime>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff feaa 	bl	800403e <xtime>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4063      	eors	r3, r4
 80042ee:	b2dc      	uxtb	r4, r3
 80042f0:	7afb      	ldrb	r3, [r7, #11]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fea3 	bl	800403e <xtime>
 80042f8:	4603      	mov	r3, r0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fe9f 	bl	800403e <xtime>
 8004300:	4603      	mov	r3, r0
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe9b 	bl	800403e <xtime>
 8004308:	4603      	mov	r3, r0
 800430a:	4063      	eors	r3, r4
 800430c:	b2dc      	uxtb	r4, r3
 800430e:	7abb      	ldrb	r3, [r7, #10]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fe94 	bl	800403e <xtime>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	7abb      	ldrb	r3, [r7, #10]
 800431c:	4053      	eors	r3, r2
 800431e:	b2dd      	uxtb	r5, r3
 8004320:	7abb      	ldrb	r3, [r7, #10]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fe8b 	bl	800403e <xtime>
 8004328:	4603      	mov	r3, r0
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fe87 	bl	800403e <xtime>
 8004330:	4603      	mov	r3, r0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe83 	bl	800403e <xtime>
 8004338:	4603      	mov	r3, r0
 800433a:	406b      	eors	r3, r5
 800433c:	b2db      	uxtb	r3, r3
 800433e:	4063      	eors	r3, r4
 8004340:	b2dc      	uxtb	r4, r3
 8004342:	7a7b      	ldrb	r3, [r7, #9]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fe7a 	bl	800403e <xtime>
 800434a:	4603      	mov	r3, r0
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fe76 	bl	800403e <xtime>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	7a7b      	ldrb	r3, [r7, #9]
 8004358:	4053      	eors	r3, r2
 800435a:	b2dd      	uxtb	r5, r3
 800435c:	7a7b      	ldrb	r3, [r7, #9]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fe6d 	bl	800403e <xtime>
 8004364:	4603      	mov	r3, r0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fe69 	bl	800403e <xtime>
 800436c:	4603      	mov	r3, r0
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fe65 	bl	800403e <xtime>
 8004374:	4603      	mov	r3, r0
 8004376:	406b      	eors	r3, r5
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4063      	eors	r3, r4
 800437c:	b2dc      	uxtb	r4, r3
 800437e:	7a3b      	ldrb	r3, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fe5c 	bl	800403e <xtime>
 8004386:	4603      	mov	r3, r0
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fe58 	bl	800403e <xtime>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fe54 	bl	800403e <xtime>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	7a3b      	ldrb	r3, [r7, #8]
 800439c:	4053      	eors	r3, r2
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	4063      	eors	r3, r4
 80043a2:	b2d9      	uxtb	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fe45 	bl	800403e <xtime>
 80043b4:	7afb      	ldrb	r3, [r7, #11]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe41 	bl	800403e <xtime>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe3d 	bl	800403e <xtime>
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fe39 	bl	800403e <xtime>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fe35 	bl	800403e <xtime>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fe31 	bl	800403e <xtime>
 80043dc:	4603      	mov	r3, r0
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fe2d 	bl	800403e <xtime>
 80043e4:	7abb      	ldrb	r3, [r7, #10]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fe29 	bl	800403e <xtime>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe25 	bl	800403e <xtime>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fe21 	bl	800403e <xtime>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fe1d 	bl	800403e <xtime>
 8004404:	7a7b      	ldrb	r3, [r7, #9]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe19 	bl	800403e <xtime>
 800440c:	4603      	mov	r3, r0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe15 	bl	800403e <xtime>
 8004414:	7a7b      	ldrb	r3, [r7, #9]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fe11 	bl	800403e <xtime>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fe0d 	bl	800403e <xtime>
 8004424:	4603      	mov	r3, r0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fe09 	bl	800403e <xtime>
 800442c:	4603      	mov	r3, r0
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fe05 	bl	800403e <xtime>
 8004434:	7a3b      	ldrb	r3, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fe01 	bl	800403e <xtime>
 800443c:	7a3b      	ldrb	r3, [r7, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fdfd 	bl	800403e <xtime>
 8004444:	4603      	mov	r3, r0
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fdf9 	bl	800403e <xtime>
 800444c:	4603      	mov	r3, r0
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fdf5 	bl	800403e <xtime>
 8004454:	4603      	mov	r3, r0
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fdf1 	bl	800403e <xtime>
 800445c:	7afb      	ldrb	r3, [r7, #11]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fded 	bl	800403e <xtime>
 8004464:	4603      	mov	r3, r0
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fde9 	bl	800403e <xtime>
 800446c:	4603      	mov	r3, r0
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fde5 	bl	800403e <xtime>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	4053      	eors	r3, r2
 800447c:	b2dc      	uxtb	r4, r3
 800447e:	7abb      	ldrb	r3, [r7, #10]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fddc 	bl	800403e <xtime>
 8004486:	4603      	mov	r3, r0
 8004488:	461d      	mov	r5, r3
 800448a:	7abb      	ldrb	r3, [r7, #10]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fdd6 	bl	800403e <xtime>
 8004492:	4603      	mov	r3, r0
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fdd2 	bl	800403e <xtime>
 800449a:	4603      	mov	r3, r0
 800449c:	406b      	eors	r3, r5
 800449e:	b2dd      	uxtb	r5, r3
 80044a0:	7abb      	ldrb	r3, [r7, #10]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fdcb 	bl	800403e <xtime>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fdc7 	bl	800403e <xtime>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fdc3 	bl	800403e <xtime>
 80044b8:	4603      	mov	r3, r0
 80044ba:	406b      	eors	r3, r5
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4063      	eors	r3, r4
 80044c0:	b2dc      	uxtb	r4, r3
 80044c2:	7a7b      	ldrb	r3, [r7, #9]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fdba 	bl	800403e <xtime>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	7a7b      	ldrb	r3, [r7, #9]
 80044d0:	4053      	eors	r3, r2
 80044d2:	b2dd      	uxtb	r5, r3
 80044d4:	7a7b      	ldrb	r3, [r7, #9]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fdb1 	bl	800403e <xtime>
 80044dc:	4603      	mov	r3, r0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fdad 	bl	800403e <xtime>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fda9 	bl	800403e <xtime>
 80044ec:	4603      	mov	r3, r0
 80044ee:	406b      	eors	r3, r5
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	4063      	eors	r3, r4
 80044f4:	b2dc      	uxtb	r4, r3
 80044f6:	7a3b      	ldrb	r3, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fda0 	bl	800403e <xtime>
 80044fe:	4603      	mov	r3, r0
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fd9c 	bl	800403e <xtime>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	7a3b      	ldrb	r3, [r7, #8]
 800450c:	4053      	eors	r3, r2
 800450e:	b2dd      	uxtb	r5, r3
 8004510:	7a3b      	ldrb	r3, [r7, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fd93 	bl	800403e <xtime>
 8004518:	4603      	mov	r3, r0
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fd8f 	bl	800403e <xtime>
 8004520:	4603      	mov	r3, r0
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd8b 	bl	800403e <xtime>
 8004528:	4603      	mov	r3, r0
 800452a:	406b      	eors	r3, r5
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4063      	eors	r3, r4
 8004530:	b2d9      	uxtb	r1, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	460a      	mov	r2, r1
 800453c:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fd7c 	bl	800403e <xtime>
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fd78 	bl	800403e <xtime>
 800454e:	4603      	mov	r3, r0
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fd74 	bl	800403e <xtime>
 8004556:	4603      	mov	r3, r0
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fd70 	bl	800403e <xtime>
 800455e:	4603      	mov	r3, r0
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fd6c 	bl	800403e <xtime>
 8004566:	7abb      	ldrb	r3, [r7, #10]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fd68 	bl	800403e <xtime>
 800456e:	7abb      	ldrb	r3, [r7, #10]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fd64 	bl	800403e <xtime>
 8004576:	4603      	mov	r3, r0
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fd60 	bl	800403e <xtime>
 800457e:	7abb      	ldrb	r3, [r7, #10]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fd5c 	bl	800403e <xtime>
 8004586:	4603      	mov	r3, r0
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fd58 	bl	800403e <xtime>
 800458e:	4603      	mov	r3, r0
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fd54 	bl	800403e <xtime>
 8004596:	4603      	mov	r3, r0
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fd50 	bl	800403e <xtime>
 800459e:	7a7b      	ldrb	r3, [r7, #9]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fd4c 	bl	800403e <xtime>
 80045a6:	4603      	mov	r3, r0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fd48 	bl	800403e <xtime>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fd44 	bl	800403e <xtime>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fd40 	bl	800403e <xtime>
 80045be:	7a3b      	ldrb	r3, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fd3c 	bl	800403e <xtime>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fd38 	bl	800403e <xtime>
 80045ce:	7a3b      	ldrb	r3, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fd34 	bl	800403e <xtime>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fd30 	bl	800403e <xtime>
 80045de:	4603      	mov	r3, r0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fd2c 	bl	800403e <xtime>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fd28 	bl	800403e <xtime>
 80045ee:	7afb      	ldrb	r3, [r7, #11]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fd24 	bl	800403e <xtime>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fd20 	bl	800403e <xtime>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	4053      	eors	r3, r2
 8004606:	b2dc      	uxtb	r4, r3
 8004608:	7afb      	ldrb	r3, [r7, #11]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fd17 	bl	800403e <xtime>
 8004610:	4603      	mov	r3, r0
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fd13 	bl	800403e <xtime>
 8004618:	4603      	mov	r3, r0
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fd0f 	bl	800403e <xtime>
 8004620:	4603      	mov	r3, r0
 8004622:	4063      	eors	r3, r4
 8004624:	b2dc      	uxtb	r4, r3
 8004626:	7abb      	ldrb	r3, [r7, #10]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fd08 	bl	800403e <xtime>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fd04 	bl	800403e <xtime>
 8004636:	4603      	mov	r3, r0
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fd00 	bl	800403e <xtime>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	7abb      	ldrb	r3, [r7, #10]
 8004644:	4053      	eors	r3, r2
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4063      	eors	r3, r4
 800464a:	b2dc      	uxtb	r4, r3
 800464c:	7a7b      	ldrb	r3, [r7, #9]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fcf5 	bl	800403e <xtime>
 8004654:	4603      	mov	r3, r0
 8004656:	461d      	mov	r5, r3
 8004658:	7a7b      	ldrb	r3, [r7, #9]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fcef 	bl	800403e <xtime>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fceb 	bl	800403e <xtime>
 8004668:	4603      	mov	r3, r0
 800466a:	406b      	eors	r3, r5
 800466c:	b2dd      	uxtb	r5, r3
 800466e:	7a7b      	ldrb	r3, [r7, #9]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fce4 	bl	800403e <xtime>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fce0 	bl	800403e <xtime>
 800467e:	4603      	mov	r3, r0
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fcdc 	bl	800403e <xtime>
 8004686:	4603      	mov	r3, r0
 8004688:	406b      	eors	r3, r5
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4063      	eors	r3, r4
 800468e:	b2dc      	uxtb	r4, r3
 8004690:	7a3b      	ldrb	r3, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fcd3 	bl	800403e <xtime>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	7a3b      	ldrb	r3, [r7, #8]
 800469e:	4053      	eors	r3, r2
 80046a0:	b2dd      	uxtb	r5, r3
 80046a2:	7a3b      	ldrb	r3, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fcca 	bl	800403e <xtime>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fcc6 	bl	800403e <xtime>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fcc2 	bl	800403e <xtime>
 80046ba:	4603      	mov	r3, r0
 80046bc:	406b      	eors	r3, r5
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	4063      	eors	r3, r4
 80046c2:	b2d9      	uxtb	r1, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	460a      	mov	r2, r1
 80046ce:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fcb3 	bl	800403e <xtime>
 80046d8:	4603      	mov	r3, r0
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fcaf 	bl	800403e <xtime>
 80046e0:	7afb      	ldrb	r3, [r7, #11]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fcab 	bl	800403e <xtime>
 80046e8:	4603      	mov	r3, r0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fca7 	bl	800403e <xtime>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fca3 	bl	800403e <xtime>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fc9f 	bl	800403e <xtime>
 8004700:	7abb      	ldrb	r3, [r7, #10]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fc9b 	bl	800403e <xtime>
 8004708:	7abb      	ldrb	r3, [r7, #10]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fc97 	bl	800403e <xtime>
 8004710:	4603      	mov	r3, r0
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fc93 	bl	800403e <xtime>
 8004718:	4603      	mov	r3, r0
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fc8f 	bl	800403e <xtime>
 8004720:	4603      	mov	r3, r0
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fc8b 	bl	800403e <xtime>
 8004728:	7a7b      	ldrb	r3, [r7, #9]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fc87 	bl	800403e <xtime>
 8004730:	7a7b      	ldrb	r3, [r7, #9]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fc83 	bl	800403e <xtime>
 8004738:	4603      	mov	r3, r0
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fc7f 	bl	800403e <xtime>
 8004740:	7a7b      	ldrb	r3, [r7, #9]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fc7b 	bl	800403e <xtime>
 8004748:	4603      	mov	r3, r0
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fc77 	bl	800403e <xtime>
 8004750:	4603      	mov	r3, r0
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fc73 	bl	800403e <xtime>
 8004758:	4603      	mov	r3, r0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fc6f 	bl	800403e <xtime>
 8004760:	7a3b      	ldrb	r3, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fc6b 	bl	800403e <xtime>
 8004768:	4603      	mov	r3, r0
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fc67 	bl	800403e <xtime>
 8004770:	4603      	mov	r3, r0
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fc63 	bl	800403e <xtime>
 8004778:	4603      	mov	r3, r0
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fc5f 	bl	800403e <xtime>
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fc5b 	bl	800403e <xtime>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	7afb      	ldrb	r3, [r7, #11]
 800478e:	4053      	eors	r3, r2
 8004790:	b2dc      	uxtb	r4, r3
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fc52 	bl	800403e <xtime>
 800479a:	4603      	mov	r3, r0
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fc4e 	bl	800403e <xtime>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fc4a 	bl	800403e <xtime>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4063      	eors	r3, r4
 80047ae:	b2dc      	uxtb	r4, r3
 80047b0:	7abb      	ldrb	r3, [r7, #10]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fc43 	bl	800403e <xtime>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fc3f 	bl	800403e <xtime>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	7abb      	ldrb	r3, [r7, #10]
 80047c6:	4053      	eors	r3, r2
 80047c8:	b2dd      	uxtb	r5, r3
 80047ca:	7abb      	ldrb	r3, [r7, #10]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fc36 	bl	800403e <xtime>
 80047d2:	4603      	mov	r3, r0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fc32 	bl	800403e <xtime>
 80047da:	4603      	mov	r3, r0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fc2e 	bl	800403e <xtime>
 80047e2:	4603      	mov	r3, r0
 80047e4:	406b      	eors	r3, r5
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4063      	eors	r3, r4
 80047ea:	b2dc      	uxtb	r4, r3
 80047ec:	7a7b      	ldrb	r3, [r7, #9]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fc25 	bl	800403e <xtime>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fc21 	bl	800403e <xtime>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fc1d 	bl	800403e <xtime>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	7a7b      	ldrb	r3, [r7, #9]
 800480a:	4053      	eors	r3, r2
 800480c:	b2db      	uxtb	r3, r3
 800480e:	4063      	eors	r3, r4
 8004810:	b2dc      	uxtb	r4, r3
 8004812:	7a3b      	ldrb	r3, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fc12 	bl	800403e <xtime>
 800481a:	4603      	mov	r3, r0
 800481c:	461d      	mov	r5, r3
 800481e:	7a3b      	ldrb	r3, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fc0c 	bl	800403e <xtime>
 8004826:	4603      	mov	r3, r0
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fc08 	bl	800403e <xtime>
 800482e:	4603      	mov	r3, r0
 8004830:	406b      	eors	r3, r5
 8004832:	b2dd      	uxtb	r5, r3
 8004834:	7a3b      	ldrb	r3, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fc01 	bl	800403e <xtime>
 800483c:	4603      	mov	r3, r0
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fbfd 	bl	800403e <xtime>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fbf9 	bl	800403e <xtime>
 800484c:	4603      	mov	r3, r0
 800484e:	406b      	eors	r3, r5
 8004850:	b2db      	uxtb	r3, r3
 8004852:	4063      	eors	r3, r4
 8004854:	b2d9      	uxtb	r1, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	460a      	mov	r2, r1
 8004860:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b03      	cmp	r3, #3
 800486c:	f77f acc0 	ble.w	80041f0 <InvMixColumns+0xe>
  }
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800487c <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e01d      	b.n	80048c6 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800488a:	2300      	movs	r3, #0
 800488c:	73bb      	strb	r3, [r7, #14]
 800488e:	e014      	b.n	80048ba <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8004890:	7bba      	ldrb	r2, [r7, #14]
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	440a      	add	r2, r1
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	7bba      	ldrb	r2, [r7, #14]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	490c      	ldr	r1, [pc, #48]	; (80048d8 <InvSubBytes+0x5c>)
 80048a6:	5c08      	ldrb	r0, [r1, r0]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	440a      	add	r2, r1
 80048ae:	4413      	add	r3, r2
 80048b0:	4602      	mov	r2, r0
 80048b2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	3301      	adds	r3, #1
 80048b8:	73bb      	strb	r3, [r7, #14]
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d9e7      	bls.n	8004890 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	3301      	adds	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d9de      	bls.n	800488a <InvSubBytes+0xe>
    }
  }
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	0800a260 	.word	0x0800a260

080048dc <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7b5b      	ldrb	r3, [r3, #13]
 80048e8:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7a5a      	ldrb	r2, [r3, #9]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	795a      	ldrb	r2, [r3, #5]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	785a      	ldrb	r2, [r3, #1]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	789b      	ldrb	r3, [r3, #2]
 800490c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7a9a      	ldrb	r2, [r3, #10]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	799b      	ldrb	r3, [r3, #6]
 8004920:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7b9a      	ldrb	r2, [r3, #14]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	78db      	ldrb	r3, [r3, #3]
 8004934:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	79da      	ldrb	r2, [r3, #7]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7ada      	ldrb	r2, [r3, #11]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	7bda      	ldrb	r2, [r3, #15]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	73da      	strb	r2, [r3, #15]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	2000      	movs	r0, #0
 8004972:	f7ff fab7 	bl	8003ee4 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff faee 	bl	8003f5c <SubBytes>
    ShiftRows(state);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fb1b 	bl	8003fbc <ShiftRows>
    if (round == Nr) {
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b0a      	cmp	r3, #10
 800498a:	d00c      	beq.n	80049a6 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fb73 	bl	8004078 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff faa3 	bl	8003ee4 <AddRoundKey>
  for (round = 1; ; ++round)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	3301      	adds	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 80049a4:	e7e9      	b.n	800497a <Cipher+0x1c>
      break;
 80049a6:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7ff fa99 	bl	8003ee4 <AddRoundKey>
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	200a      	movs	r0, #10
 80049ce:	f7ff fa89 	bl	8003ee4 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 80049d2:	2309      	movs	r3, #9
 80049d4:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff80 	bl	80048dc <InvShiftRows>
    InvSubBytes(state);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff4d 	bl	800487c <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fa7b 	bl	8003ee4 <AddRoundKey>
    if (round == 0) {
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fbf4 	bl	80041e2 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8004a00:	e7e9      	b.n	80049d6 <InvCipher+0x1c>
      break;
 8004a02:	bf00      	nop
  }

}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
 8004a1a:	e010      	b.n	8004a3e <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	7819      	ldrb	r1, [r3, #0]
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4403      	add	r3, r0
 8004a32:	404a      	eors	r2, r1
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	d9eb      	bls.n	8004a1c <XorWithIv+0x10>
  }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8004a50:	b5b0      	push	{r4, r5, r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e022      	b.n	8004aa8 <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f107 0414 	add.w	r4, r7, #20
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4619      	mov	r1, r3
 8004a76:	68b8      	ldr	r0, [r7, #8]
 8004a78:	f7ff ff9f 	bl	80049ba <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	33b0      	adds	r3, #176	; 0xb0
 8004a80:	4619      	mov	r1, r3
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f7ff ffc2 	bl	8004a0c <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	33b0      	adds	r3, #176	; 0xb0
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	f107 0414 	add.w	r4, r7, #20
 8004a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a94:	6028      	str	r0, [r5, #0]
 8004a96:	6069      	str	r1, [r5, #4]
 8004a98:	60aa      	str	r2, [r5, #8]
 8004a9a:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	3310      	adds	r3, #16
 8004aa0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	3310      	adds	r3, #16
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d3d8      	bcc.n	8004a62 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bdb0      	pop	{r4, r5, r7, pc}

08004aba <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8004aba:	b590      	push	{r4, r7, lr}
 8004abc:	b08b      	sub	sp, #44	; 0x2c
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	2310      	movs	r3, #16
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	e04e      	b.n	8004b6e <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d136      	bne.n	8004b44 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	33b0      	adds	r3, #176	; 0xb0
 8004ada:	f107 0410 	add.w	r4, r7, #16
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff ff34 	bl	800495e <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8004af6:	230f      	movs	r3, #15
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e01e      	b.n	8004b3a <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	4413      	add	r3, r2
 8004b02:	33b0      	adds	r3, #176	; 0xb0
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d106      	bne.n	8004b18 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	4413      	add	r3, r2
 8004b10:	33b0      	adds	r3, #176	; 0xb0
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
          continue;
 8004b16:	e00d      	b.n	8004b34 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	33b0      	adds	r3, #176	; 0xb0
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	b2d9      	uxtb	r1, r3
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	33b0      	adds	r3, #176	; 0xb0
 8004b2e:	460a      	mov	r2, r1
 8004b30:	701a      	strb	r2, [r3, #0]
        break;
 8004b32:	e005      	b.n	8004b40 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dadd      	bge.n	8004afc <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	4413      	add	r3, r2
 8004b4a:	7819      	ldrb	r1, [r3, #0]
 8004b4c:	f107 0210 	add.w	r2, r7, #16
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	4413      	add	r3, r2
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	4403      	add	r3, r0
 8004b5c:	404a      	eors	r2, r1
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	3301      	adds	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3ac      	bcc.n	8004ad0 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	372c      	adds	r7, #44	; 0x2c
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}

08004b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b84:	f000 fda2 	bl	80056cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b88:	f000 f8ea 	bl	8004d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b8c:	f000 fa94 	bl	80050b8 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 8004b90:	f000 f95c 	bl	8004e4c <MX_SPI1_Init>
  MX_TIM1_Init();
 8004b94:	f000 f9c6 	bl	8004f24 <MX_TIM1_Init>
  MX_I2C1_Init();
 8004b98:	f000 f92a 	bl	8004df0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004b9c:	f000 fa62 	bl	8005064 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8004ba0:	f000 f98a 	bl	8004eb8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8004ba4:	f000 fa10 	bl	8004fc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module 1
  SX1278_hw_1.dio0.port = DIO_GPIO_Port;
 8004ba8:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <main+0x1a4>)
 8004baa:	4a5f      	ldr	r2, [pc, #380]	; (8004d28 <main+0x1a8>)
 8004bac:	60da      	str	r2, [r3, #12]
  SX1278_hw_1.dio0.pin = DIO_Pin;
 8004bae:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <main+0x1a4>)
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	609a      	str	r2, [r3, #8]
  SX1278_hw_1.nss.port = NSS_GPIO_Port;
 8004bb4:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <main+0x1a4>)
 8004bb6:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <main+0x1ac>)
 8004bb8:	615a      	str	r2, [r3, #20]
  SX1278_hw_1.nss.pin = NSS_Pin;
 8004bba:	4b5a      	ldr	r3, [pc, #360]	; (8004d24 <main+0x1a4>)
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	611a      	str	r2, [r3, #16]
  SX1278_hw_1.reset.port = RESET_GPIO_Port;
 8004bc0:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <main+0x1a4>)
 8004bc2:	4a59      	ldr	r2, [pc, #356]	; (8004d28 <main+0x1a8>)
 8004bc4:	605a      	str	r2, [r3, #4]
  SX1278_hw_1.reset.pin = RESET_Pin;
 8004bc6:	4b57      	ldr	r3, [pc, #348]	; (8004d24 <main+0x1a4>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  SX1278_hw_1.spi = &hspi1;
 8004bcc:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <main+0x1a4>)
 8004bce:	4a58      	ldr	r2, [pc, #352]	; (8004d30 <main+0x1b0>)
 8004bd0:	619a      	str	r2, [r3, #24]
  SX1278_1.hw = &SX1278_hw_1;
 8004bd2:	4b58      	ldr	r3, [pc, #352]	; (8004d34 <main+0x1b4>)
 8004bd4:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <main+0x1a4>)
 8004bd6:	601a      	str	r2, [r3, #0]

  //initialize LoRa module 2
  SX1278_hw_2.dio0.port = DIO_2_GPIO_Port;
 8004bd8:	4b57      	ldr	r3, [pc, #348]	; (8004d38 <main+0x1b8>)
 8004bda:	4a53      	ldr	r2, [pc, #332]	; (8004d28 <main+0x1a8>)
 8004bdc:	60da      	str	r2, [r3, #12]
  SX1278_hw_2.dio0.pin = DIO_2_Pin;
 8004bde:	4b56      	ldr	r3, [pc, #344]	; (8004d38 <main+0x1b8>)
 8004be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be4:	609a      	str	r2, [r3, #8]
  SX1278_hw_2.nss.port = SPI2_NSS_GPIO_Port;
 8004be6:	4b54      	ldr	r3, [pc, #336]	; (8004d38 <main+0x1b8>)
 8004be8:	4a4f      	ldr	r2, [pc, #316]	; (8004d28 <main+0x1a8>)
 8004bea:	615a      	str	r2, [r3, #20]
  SX1278_hw_2.nss.pin = SPI2_NSS_Pin;
 8004bec:	4b52      	ldr	r3, [pc, #328]	; (8004d38 <main+0x1b8>)
 8004bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bf2:	611a      	str	r2, [r3, #16]
  SX1278_hw_2.reset.port = RESET2_GPIO_Port;
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <main+0x1b8>)
 8004bf6:	4a4c      	ldr	r2, [pc, #304]	; (8004d28 <main+0x1a8>)
 8004bf8:	605a      	str	r2, [r3, #4]
  SX1278_hw_2.reset.pin = RESET2_Pin;
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <main+0x1b8>)
 8004bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c00:	601a      	str	r2, [r3, #0]
  SX1278_hw_2.spi = &hspi2;
 8004c02:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <main+0x1b8>)
 8004c04:	4a4d      	ldr	r2, [pc, #308]	; (8004d3c <main+0x1bc>)
 8004c06:	619a      	str	r2, [r3, #24]
  SX1278_2.hw = &SX1278_hw_2;
 8004c08:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <main+0x1c0>)
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <main+0x1b8>)
 8004c0c:	601a      	str	r2, [r3, #0]

  /*GW Config Init first to get the config */
  GW_State_Init();
 8004c0e:	f7fc fed5 	bl	80019bc <GW_State_Init>
  GW_Config_Init();
 8004c12:	f7fc fe81 	bl	8001918 <GW_Config_Init>
  Encrypt_Address_Read_Init();
 8004c16:	f7fb fe99 	bl	800094c <Encrypt_Address_Read_Init>
  UI_Init();
 8004c1a:	f7fe fc4f 	bl	80034bc <UI_Init>
  ReceiveFWUpdate_Init();
 8004c1e:	f7fd f8b1 	bl	8001d84 <ReceiveFWUpdate_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // State For Flashing
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8004c22:	4848      	ldr	r0, [pc, #288]	; (8004d44 <main+0x1c4>)
 8004c24:	f7fc ff2e 	bl	8001a84 <Rte_SystemState_ReadData>
	  switch (SysTem_State)
 8004c28:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <main+0x1c4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	2b07      	cmp	r3, #7
 8004c30:	d83b      	bhi.n	8004caa <main+0x12a>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <main+0xb8>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c59 	.word	0x08004c59
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6b 	.word	0x08004c6b
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c8f 	.word	0x08004c8f
 8004c54:	08004c99 	.word	0x08004c99
	  {
//	  	case SYS_IDLE:
//
//	  		break;
		case SYS_NEW_UPDATE_REQ:
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x04);
 8004c58:	2004      	movs	r0, #4
 8004c5a:	f7fd f86f 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
			ReceiveFWUpdate_MainFunc();
 8004c5e:	f7fd f8f3 	bl	8001e48 <ReceiveFWUpdate_MainFunc>
			break;
 8004c62:	e023      	b.n	8004cac <main+0x12c>
		case SYS_RECEIVE_UPDATE:
			//UI_Main_FLASHING();
			ReceiveFWUpdate_MainFunc();
 8004c64:	f7fd f8f0 	bl	8001e48 <ReceiveFWUpdate_MainFunc>
			break;
 8004c68:	e020      	b.n	8004cac <main+0x12c>
		case SYS_REQUEST_OTA:
			UI_Main_FLASHING();
 8004c6a:	f7fe fc51 	bl	8003510 <UI_Main_FLASHING>
			Send_Start_OTA();
 8004c6e:	f7fc fb1f 	bl	80012b0 <Send_Start_OTA>
			break;
 8004c72:	e01b      	b.n	8004cac <main+0x12c>
		case SYS_WAIT_ACCEPT_OTA:
			UI_Main_FLASHING();
 8004c74:	f7fe fc4c 	bl	8003510 <UI_Main_FLASHING>
			Wait_Start_OTA();
 8004c78:	f7fc fb3a 	bl	80012f0 <Wait_Start_OTA>
			break;
 8004c7c:	e016      	b.n	8004cac <main+0x12c>
		case SYS_CONFIG_LORA:
			UI_Main_FLASHING();
 8004c7e:	f7fe fc47 	bl	8003510 <UI_Main_FLASHING>
			FL_FlashLoRa_INIT();
 8004c82:	f7fc fb95 	bl	80013b0 <FL_FlashLoRa_INIT>
			break;
 8004c86:	e011      	b.n	8004cac <main+0x12c>
		case SYS_ENCRYPT_FW:
			Encrypt_MainFunc();
 8004c88:	f7fb febe 	bl	8000a08 <Encrypt_MainFunc>
			break;
 8004c8c:	e00e      	b.n	8004cac <main+0x12c>
		case SYS_SEND_UPDATE:
			UI_Main_FLASHING();
 8004c8e:	f7fe fc3f 	bl	8003510 <UI_Main_FLASHING>
			FL_PacketLoRaSend_START();
 8004c92:	f7fc fc69 	bl	8001568 <FL_PacketLoRaSend_START>
			break;
 8004c96:	e009      	b.n	8004cac <main+0x12c>
		case SYS_DONE_UPDATE:
			ReceiveFWUpdate_MainFunc();
 8004c98:	f7fd f8d6 	bl	8001e48 <ReceiveFWUpdate_MainFunc>
			HAL_TIM_Base_Start_IT(&htim2);
 8004c9c:	482a      	ldr	r0, [pc, #168]	; (8004d48 <main+0x1c8>)
 8004c9e:	f003 f9bd 	bl	800801c <HAL_TIM_Base_Start_IT>
			RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_WriteData(0x00);
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fd f84a 	bl	8001d3c <Rte_Flag_LoRaRequestDevice_WriteData>
			//FL_PacketLoRaDone_OTA();

			break;
 8004ca8:	e000      	b.n	8004cac <main+0x12c>
		default:
			break;
 8004caa:	bf00      	nop
	  }
	  UI_Main_FLASHING();
 8004cac:	f7fe fc30 	bl	8003510 <UI_Main_FLASHING>
	  RTE_RUNNABLE_FLAG_LORA_REQUEST_DEVICE_ReadData(&gl_flagRequest);
 8004cb0:	4826      	ldr	r0, [pc, #152]	; (8004d4c <main+0x1cc>)
 8004cb2:	f7fd f855 	bl	8001d60 <Rte_Flag_LoRaRequestDevice_ReadData>
	  if(gl_flagRequest == 0x01){
 8004cb6:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <main+0x1cc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10c      	bne.n	8004cd8 <main+0x158>
		 RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x01);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f7fc fff4 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_1, buffer_req_2, GW_REQ_PARAMETER);
 8004cc4:	238c      	movs	r3, #140	; 0x8c
 8004cc6:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <main+0x1d0>)
 8004cc8:	4922      	ldr	r1, [pc, #136]	; (8004d54 <main+0x1d4>)
 8004cca:	481d      	ldr	r0, [pc, #116]	; (8004d40 <main+0x1c0>)
 8004ccc:	f7fc f89c 	bl	8000e08 <Send_request>
		 RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x00);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7fc ffeb 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
 8004cd6:	e020      	b.n	8004d1a <main+0x19a>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);



	  }
	  else if(gl_flagRequest == 0x02){
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <main+0x1cc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d10c      	bne.n	8004cfa <main+0x17a>
		 RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x01);
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	f7fc ffe3 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
		 Send_request(&SX1278_2, ADDRESS__MAC_NODE_2, buffer_req_2, GW_REQ_PARAMETER);
 8004ce6:	238c      	movs	r3, #140	; 0x8c
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <main+0x1d0>)
 8004cea:	491b      	ldr	r1, [pc, #108]	; (8004d58 <main+0x1d8>)
 8004cec:	4814      	ldr	r0, [pc, #80]	; (8004d40 <main+0x1c0>)
 8004cee:	f7fc f88b 	bl	8000e08 <Send_request>
		 RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fc ffda 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
 8004cf8:	e00f      	b.n	8004d1a <main+0x19a>
		 //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
	  }
	  else if(gl_flagRequest == 0x03){
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <main+0x1cc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d10b      	bne.n	8004d1a <main+0x19a>
		  RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x01);
 8004d02:	2001      	movs	r0, #1
 8004d04:	f7fc ffd2 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
		  Send_request(&SX1278_2, ADDRESS__MAC_NODE_3, buffer_req_2, GW_REQ_PARAMETER);
 8004d08:	238c      	movs	r3, #140	; 0x8c
 8004d0a:	4a11      	ldr	r2, [pc, #68]	; (8004d50 <main+0x1d0>)
 8004d0c:	4913      	ldr	r1, [pc, #76]	; (8004d5c <main+0x1dc>)
 8004d0e:	480c      	ldr	r0, [pc, #48]	; (8004d40 <main+0x1c0>)
 8004d10:	f7fc f87a 	bl	8000e08 <Send_request>
		  RTE_RUNNABLE_FLAG_LORA_RESP_WriteData(0x00);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fc ffc9 	bl	8001cac <Rte_FlagLoRaResp_WriteData>
		  //SX1278_LoRaEntryRx(&SX1278_2, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);

	  }
	  gl_flagRequest = 0x00;
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <main+0x1cc>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
	  RTE_RUNNABLE_SYSTEM_STATE_ReadData(&SysTem_State);
 8004d20:	e77f      	b.n	8004c22 <main+0xa2>
 8004d22:	bf00      	nop
 8004d24:	200015ec 	.word	0x200015ec
 8004d28:	40010c00 	.word	0x40010c00
 8004d2c:	40010800 	.word	0x40010800
 8004d30:	20001464 	.word	0x20001464
 8004d34:	20001608 	.word	0x20001608
 8004d38:	2000171c 	.word	0x2000171c
 8004d3c:	200014bc 	.word	0x200014bc
 8004d40:	20001738 	.word	0x20001738
 8004d44:	2000184c 	.word	0x2000184c
 8004d48:	2000155c 	.word	0x2000155c
 8004d4c:	20001850 	.word	0x20001850
 8004d50:	20001854 	.word	0x20001854
 8004d54:	26011bcd 	.word	0x26011bcd
 8004d58:	26011def 	.word	0x26011def
 8004d5c:	260120f0 	.word	0x260120f0

08004d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b090      	sub	sp, #64	; 0x40
 8004d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d66:	f107 0318 	add.w	r3, r7, #24
 8004d6a:	2228      	movs	r2, #40	; 0x28
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f004 fc9c 	bl	80096ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004d82:	2309      	movs	r3, #9
 8004d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d90:	2301      	movs	r3, #1
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d94:	2301      	movs	r3, #1
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004da2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004da8:	f107 0318 	add.w	r3, r7, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 f8ab 	bl	8006f08 <HAL_RCC_OscConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8004db8:	f000 fa10 	bl	80051dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fb18 	bl	800740c <HAL_RCC_ClockConfig>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004de2:	f000 f9fb 	bl	80051dc <Error_Handler>
  }
}
 8004de6:	bf00      	nop
 8004de8:	3740      	adds	r7, #64	; 0x40
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004df6:	4a13      	ldr	r2, [pc, #76]	; (8004e44 <MX_I2C1_Init+0x54>)
 8004df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004dfc:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <MX_I2C1_Init+0x58>)
 8004dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e2c:	4804      	ldr	r0, [pc, #16]	; (8004e40 <MX_I2C1_Init+0x50>)
 8004e2e:	f001 fa5f 	bl	80062f0 <HAL_I2C_Init>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e38:	f000 f9d0 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001404 	.word	0x20001404
 8004e44:	40005400 	.word	0x40005400
 8004e48:	00061a80 	.word	0x00061a80

08004e4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e52:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <MX_SPI1_Init+0x68>)
 8004e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e5e:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e76:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e80:	2210      	movs	r2, #16
 8004e82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e98:	220a      	movs	r2, #10
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e9c:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <MX_SPI1_Init+0x64>)
 8004e9e:	f002 fc43 	bl	8007728 <HAL_SPI_Init>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ea8:	f000 f998 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20001464 	.word	0x20001464
 8004eb4:	40013000 	.word	0x40013000

08004eb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <MX_SPI2_Init+0x68>)
 8004ec0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ec8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004eec:	2210      	movs	r2, #16
 8004eee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004f04:	220a      	movs	r2, #10
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f08:	4804      	ldr	r0, [pc, #16]	; (8004f1c <MX_SPI2_Init+0x64>)
 8004f0a:	f002 fc0d 	bl	8007728 <HAL_SPI_Init>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004f14:	f000 f962 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200014bc 	.word	0x200014bc
 8004f20:	40003800 	.word	0x40003800

08004f24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	60da      	str	r2, [r3, #12]
 8004f38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f42:	4b1f      	ldr	r3, [pc, #124]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <MX_TIM1_Init+0xa0>)
 8004f46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f6e:	4814      	ldr	r0, [pc, #80]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f70:	f003 f804 	bl	8007f7c <HAL_TIM_Base_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004f7a:	f000 f92f 	bl	80051dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004f7e:	2307      	movs	r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	480c      	ldr	r0, [pc, #48]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f8e:	f003 fa94 	bl	80084ba <HAL_TIM_SlaveConfigSynchro>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004f98:	f000 f920 	bl	80051dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <MX_TIM1_Init+0x9c>)
 8004faa:	f003 fc77 	bl	800889c <HAL_TIMEx_MasterConfigSynchronization>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004fb4:	f000 f912 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004fb8:	bf00      	nop
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20001514 	.word	0x20001514
 8004fc4:	40012c00 	.word	0x40012c00

08004fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fdc:	463b      	mov	r3, r7
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <MX_TIM2_Init+0x98>)
 8004fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5543;
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <MX_TIM2_Init+0x98>)
 8004fee:	f241 52a7 	movw	r2, #5543	; 0x15a7
 8004ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <MX_TIM2_Init+0x98>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64934;
 8004ffa:	4b19      	ldr	r3, [pc, #100]	; (8005060 <MX_TIM2_Init+0x98>)
 8004ffc:	f64f 52a6 	movw	r2, #64934	; 0xfda6
 8005000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <MX_TIM2_Init+0x98>)
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <MX_TIM2_Init+0x98>)
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800500e:	4814      	ldr	r0, [pc, #80]	; (8005060 <MX_TIM2_Init+0x98>)
 8005010:	f002 ffb4 	bl	8007f7c <HAL_TIM_Base_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800501a:	f000 f8df 	bl	80051dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800501e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005022:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	4619      	mov	r1, r3
 800502a:	480d      	ldr	r0, [pc, #52]	; (8005060 <MX_TIM2_Init+0x98>)
 800502c:	f003 f97e 	bl	800832c <HAL_TIM_ConfigClockSource>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005036:	f000 f8d1 	bl	80051dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005042:	463b      	mov	r3, r7
 8005044:	4619      	mov	r1, r3
 8005046:	4806      	ldr	r0, [pc, #24]	; (8005060 <MX_TIM2_Init+0x98>)
 8005048:	f003 fc28 	bl	800889c <HAL_TIMEx_MasterConfigSynchronization>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005052:	f000 f8c3 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	2000155c 	.word	0x2000155c

08005064 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005068:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 800506a:	4a12      	ldr	r2, [pc, #72]	; (80050b4 <MX_USART2_UART_Init+0x50>)
 800506c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 8005070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005076:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 800507e:	2200      	movs	r2, #0
 8005080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 8005084:	2200      	movs	r2, #0
 8005086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 800508a:	220c      	movs	r2, #12
 800508c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 8005090:	2200      	movs	r2, #0
 8005092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 8005096:	2200      	movs	r2, #0
 8005098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800509a:	4805      	ldr	r0, [pc, #20]	; (80050b0 <MX_USART2_UART_Init+0x4c>)
 800509c:	f003 fc6e 	bl	800897c <HAL_UART_Init>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80050a6:	f000 f899 	bl	80051dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	200015a4 	.word	0x200015a4
 80050b4:	40004400 	.word	0x40004400

080050b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050cc:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	4a3d      	ldr	r2, [pc, #244]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050d2:	f043 0310 	orr.w	r3, r3, #16
 80050d6:	6193      	str	r3, [r2, #24]
 80050d8:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050e4:	4b38      	ldr	r3, [pc, #224]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	4a37      	ldr	r2, [pc, #220]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6193      	str	r3, [r2, #24]
 80050f0:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fc:	4b32      	ldr	r3, [pc, #200]	; (80051c8 <MX_GPIO_Init+0x110>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <MX_GPIO_Init+0x110>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6193      	str	r3, [r2, #24]
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <MX_GPIO_Init+0x110>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005114:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <MX_GPIO_Init+0x110>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <MX_GPIO_Init+0x110>)
 800511a:	f043 0308 	orr.w	r3, r3, #8
 800511e:	6193      	str	r3, [r2, #24]
 8005120:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <MX_GPIO_Init+0x110>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005132:	4826      	ldr	r0, [pc, #152]	; (80051cc <MX_GPIO_Init+0x114>)
 8005134:	f001 f8ab 	bl	800628e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8005138:	2200      	movs	r2, #0
 800513a:	2110      	movs	r1, #16
 800513c:	4824      	ldr	r0, [pc, #144]	; (80051d0 <MX_GPIO_Init+0x118>)
 800513e:	f001 f8a6 	bl	800628e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 8005142:	2200      	movs	r2, #0
 8005144:	f641 3105 	movw	r1, #6917	; 0x1b05
 8005148:	4822      	ldr	r0, [pc, #136]	; (80051d4 <MX_GPIO_Init+0x11c>)
 800514a:	f001 f8a0 	bl	800628e <HAL_GPIO_WritePin>
                          |RECEIIVE_Pin|SEND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800514e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005154:	2301      	movs	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515c:	2302      	movs	r3, #2
 800515e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005160:	f107 0310 	add.w	r3, r7, #16
 8005164:	4619      	mov	r1, r3
 8005166:	4819      	ldr	r0, [pc, #100]	; (80051cc <MX_GPIO_Init+0x114>)
 8005168:	f000 fef6 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800516c:	2310      	movs	r3, #16
 800516e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2302      	movs	r3, #2
 800517a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4619      	mov	r1, r3
 8005182:	4813      	ldr	r0, [pc, #76]	; (80051d0 <MX_GPIO_Init+0x118>)
 8005184:	f000 fee8 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin MODE_Pin RESET2_Pin SPI2_NSS_Pin
                           RECEIIVE_Pin SEND_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|MODE_Pin|RESET2_Pin|SPI2_NSS_Pin
 8005188:	f641 3305 	movw	r3, #6917	; 0x1b05
 800518c:	613b      	str	r3, [r7, #16]
                          |RECEIIVE_Pin|SEND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2302      	movs	r3, #2
 8005198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519a:	f107 0310 	add.w	r3, r7, #16
 800519e:	4619      	mov	r1, r3
 80051a0:	480c      	ldr	r0, [pc, #48]	; (80051d4 <MX_GPIO_Init+0x11c>)
 80051a2:	f000 fed9 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO_Pin DIO_2_Pin */
  GPIO_InitStruct.Pin = DIO_Pin|DIO_2_Pin;
 80051a6:	f240 4302 	movw	r3, #1026	; 0x402
 80051aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <MX_GPIO_Init+0x120>)
 80051ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	4619      	mov	r1, r3
 80051ba:	4806      	ldr	r0, [pc, #24]	; (80051d4 <MX_GPIO_Init+0x11c>)
 80051bc:	f000 fecc 	bl	8005f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80051c0:	bf00      	nop
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40011000 	.word	0x40011000
 80051d0:	40010800 	.word	0x40010800
 80051d4:	40010c00 	.word	0x40010c00
 80051d8:	10110000 	.word	0x10110000

080051dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051e0:	b672      	cpsid	i
}
 80051e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051e4:	e7fe      	b.n	80051e4 <Error_Handler+0x8>

080051e6 <copy_Array>:
 *      Author: quang
 */

#include "operation.h"

void copy_Array(uint8* a , uint8* b , uint32 size){
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
	// Start Position is the 4th of a
	uint8* prtA = a + 16 ;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3310      	adds	r3, #16
 80051f6:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 80051f8:	2300      	movs	r3, #0
 80051fa:	74fb      	strb	r3, [r7, #19]
 80051fc:	e00a      	b.n	8005214 <copy_Array+0x2e>
		*(prtA++) = *(b++);
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	1c53      	adds	r3, r2, #1
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	6179      	str	r1, [r7, #20]
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	3301      	adds	r3, #1
 8005212:	74fb      	strb	r3, [r7, #19]
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d8f0      	bhi.n	80051fe <copy_Array+0x18>
	}
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <copy_Array_BL>:
void copy_Array_BL(uint8* a , uint8* b , uint8 init_val, uint32 size){
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
	uint8* prtB = b + init_val ;
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8005240:	2300      	movs	r3, #0
 8005242:	74fb      	strb	r3, [r7, #19]
 8005244:	e00a      	b.n	800525c <copy_Array_BL+0x34>
		*(a++) = *(prtB++);
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	1c53      	adds	r3, r2, #1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	60f9      	str	r1, [r7, #12]
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	3301      	adds	r3, #1
 800525a:	74fb      	strb	r3, [r7, #19]
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d8f0      	bhi.n	8005246 <copy_Array_BL+0x1e>
	}
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <clearDataBuffer>:


Return_Operation_t clearDataBuffer(uint8 *buffer , uint32 buffer_size){
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	// Clear buffer size
	memset(buffer, 0x00, buffer_size);
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	2100      	movs	r1, #0
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f004 fa14 	bl	80096ac <memset>
	return DONE;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_MspInit+0x5c>)
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <HAL_MspInit+0x5c>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6193      	str	r3, [r2, #24]
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_MspInit+0x5c>)
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_MspInit+0x5c>)
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <HAL_MspInit+0x5c>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	61d3      	str	r3, [r2, #28]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_MspInit+0x5c>)
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_MspInit+0x60>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <HAL_MspInit+0x60>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40010000 	.word	0x40010000

080052f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <HAL_I2C_MspInit+0x70>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d123      	bne.n	800535c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005314:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_I2C_MspInit+0x74>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <HAL_I2C_MspInit+0x74>)
 800531a:	f043 0308 	orr.w	r3, r3, #8
 800531e:	6193      	str	r3, [r2, #24]
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <HAL_I2C_MspInit+0x74>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800532c:	23c0      	movs	r3, #192	; 0xc0
 800532e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005330:	2312      	movs	r3, #18
 8005332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005334:	2303      	movs	r3, #3
 8005336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005338:	f107 0310 	add.w	r3, r7, #16
 800533c:	4619      	mov	r1, r3
 800533e:	480b      	ldr	r0, [pc, #44]	; (800536c <HAL_I2C_MspInit+0x78>)
 8005340:	f000 fe0a 	bl	8005f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_I2C_MspInit+0x74>)
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_I2C_MspInit+0x74>)
 800534a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800534e:	61d3      	str	r3, [r2, #28]
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_I2C_MspInit+0x74>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800535c:	bf00      	nop
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40005400 	.word	0x40005400
 8005368:	40021000 	.word	0x40021000
 800536c:	40010c00 	.word	0x40010c00

08005370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 0318 	add.w	r3, r7, #24
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a37      	ldr	r2, [pc, #220]	; (8005468 <HAL_SPI_MspInit+0xf8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d130      	bne.n	80053f2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005390:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_SPI_MspInit+0xfc>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	4a35      	ldr	r2, [pc, #212]	; (800546c <HAL_SPI_MspInit+0xfc>)
 8005396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800539a:	6193      	str	r3, [r2, #24]
 800539c:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_SPI_MspInit+0xfc>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a8:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_SPI_MspInit+0xfc>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	4a2f      	ldr	r2, [pc, #188]	; (800546c <HAL_SPI_MspInit+0xfc>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	6193      	str	r3, [r2, #24]
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <HAL_SPI_MspInit+0xfc>)
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80053c0:	23a0      	movs	r3, #160	; 0xa0
 80053c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	2302      	movs	r3, #2
 80053c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053c8:	2303      	movs	r3, #3
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	f107 0318 	add.w	r3, r7, #24
 80053d0:	4619      	mov	r1, r3
 80053d2:	4827      	ldr	r0, [pc, #156]	; (8005470 <HAL_SPI_MspInit+0x100>)
 80053d4:	f000 fdc0 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e4:	f107 0318 	add.w	r3, r7, #24
 80053e8:	4619      	mov	r1, r3
 80053ea:	4821      	ldr	r0, [pc, #132]	; (8005470 <HAL_SPI_MspInit+0x100>)
 80053ec:	f000 fdb4 	bl	8005f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80053f0:	e036      	b.n	8005460 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <HAL_SPI_MspInit+0x104>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d131      	bne.n	8005460 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_SPI_MspInit+0xfc>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_SPI_MspInit+0xfc>)
 8005402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005406:	61d3      	str	r3, [r2, #28]
 8005408:	4b18      	ldr	r3, [pc, #96]	; (800546c <HAL_SPI_MspInit+0xfc>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_SPI_MspInit+0xfc>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <HAL_SPI_MspInit+0xfc>)
 800541a:	f043 0308 	orr.w	r3, r3, #8
 800541e:	6193      	str	r3, [r2, #24]
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_SPI_MspInit+0xfc>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800542c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	2302      	movs	r3, #2
 8005434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005436:	2303      	movs	r3, #3
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800543a:	f107 0318 	add.w	r3, r7, #24
 800543e:	4619      	mov	r1, r3
 8005440:	480d      	ldr	r0, [pc, #52]	; (8005478 <HAL_SPI_MspInit+0x108>)
 8005442:	f000 fd89 	bl	8005f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800544a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005454:	f107 0318 	add.w	r3, r7, #24
 8005458:	4619      	mov	r1, r3
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <HAL_SPI_MspInit+0x108>)
 800545c:	f000 fd7c 	bl	8005f58 <HAL_GPIO_Init>
}
 8005460:	bf00      	nop
 8005462:	3728      	adds	r7, #40	; 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40013000 	.word	0x40013000
 800546c:	40021000 	.word	0x40021000
 8005470:	40010800 	.word	0x40010800
 8005474:	40003800 	.word	0x40003800
 8005478:	40010c00 	.word	0x40010c00

0800547c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <HAL_TIM_Base_MspInit+0x68>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10c      	bne.n	80054a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 8005494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005498:	6193      	str	r3, [r2, #24]
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80054a6:	e018      	b.n	80054da <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d113      	bne.n	80054da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	61d3      	str	r3, [r2, #28]
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_TIM_Base_MspInit+0x6c>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2102      	movs	r1, #2
 80054ce:	201c      	movs	r0, #28
 80054d0:	f000 fa59 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054d4:	201c      	movs	r0, #28
 80054d6:	f000 fa72 	bl	80059be <HAL_NVIC_EnableIRQ>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40021000 	.word	0x40021000

080054ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <HAL_UART_MspInit+0x98>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d137      	bne.n	800557c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800550c:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <HAL_UART_MspInit+0x9c>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_UART_MspInit+0x9c>)
 8005512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005516:	61d3      	str	r3, [r2, #28]
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <HAL_UART_MspInit+0x9c>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <HAL_UART_MspInit+0x9c>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_UART_MspInit+0x9c>)
 800552a:	f043 0304 	orr.w	r3, r3, #4
 800552e:	6193      	str	r3, [r2, #24]
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_UART_MspInit+0x9c>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800553c:	2304      	movs	r3, #4
 800553e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005540:	2302      	movs	r3, #2
 8005542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005544:	2303      	movs	r3, #3
 8005546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005548:	f107 0310 	add.w	r3, r7, #16
 800554c:	4619      	mov	r1, r3
 800554e:	480f      	ldr	r0, [pc, #60]	; (800558c <HAL_UART_MspInit+0xa0>)
 8005550:	f000 fd02 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005554:	2308      	movs	r3, #8
 8005556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	4619      	mov	r1, r3
 8005566:	4809      	ldr	r0, [pc, #36]	; (800558c <HAL_UART_MspInit+0xa0>)
 8005568:	f000 fcf6 	bl	8005f58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	2026      	movs	r0, #38	; 0x26
 8005572:	f000 fa08 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005576:	2026      	movs	r0, #38	; 0x26
 8005578:	f000 fa21 	bl	80059be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800557c:	bf00      	nop
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40004400 	.word	0x40004400
 8005588:	40021000 	.word	0x40021000
 800558c:	40010800 	.word	0x40010800

08005590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005594:	e7fe      	b.n	8005594 <NMI_Handler+0x4>

08005596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <HardFault_Handler+0x4>

0800559c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <MemManage_Handler+0x4>

080055a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055a6:	e7fe      	b.n	80055a6 <BusFault_Handler+0x4>

080055a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <UsageFault_Handler+0x4>

080055ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d6:	f000 f8bf 	bl	8005758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055e4:	4802      	ldr	r0, [pc, #8]	; (80055f0 <TIM2_IRQHandler+0x10>)
 80055e6:	f002 fd99 	bl	800811c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000155c 	.word	0x2000155c

080055f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055f8:	4802      	ldr	r0, [pc, #8]	; (8005604 <USART2_IRQHandler+0x10>)
 80055fa:	f003 fab7 	bl	8008b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200015a4 	.word	0x200015a4

08005608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <_sbrk+0x5c>)
 8005612:	4b15      	ldr	r3, [pc, #84]	; (8005668 <_sbrk+0x60>)
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800561c:	4b13      	ldr	r3, [pc, #76]	; (800566c <_sbrk+0x64>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <_sbrk+0x64>)
 8005626:	4a12      	ldr	r2, [pc, #72]	; (8005670 <_sbrk+0x68>)
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <_sbrk+0x64>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d207      	bcs.n	8005648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005638:	f004 f840 	bl	80096bc <__errno>
 800563c:	4603      	mov	r3, r0
 800563e:	220c      	movs	r2, #12
 8005640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e009      	b.n	800565c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <_sbrk+0x64>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <_sbrk+0x64>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	4a05      	ldr	r2, [pc, #20]	; (800566c <_sbrk+0x64>)
 8005658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20005000 	.word	0x20005000
 8005668:	00000400 	.word	0x00000400
 800566c:	20001864 	.word	0x20001864
 8005670:	200019d8 	.word	0x200019d8

08005674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005678:	bf00      	nop
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005680:	f7ff fff8 	bl	8005674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005684:	480b      	ldr	r0, [pc, #44]	; (80056b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005686:	490c      	ldr	r1, [pc, #48]	; (80056b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005688:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800568a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800568c:	e002      	b.n	8005694 <LoopCopyDataInit>

0800568e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800568e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005692:	3304      	adds	r3, #4

08005694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005698:	d3f9      	bcc.n	800568e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800569c:	4c09      	ldr	r4, [pc, #36]	; (80056c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800569e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a0:	e001      	b.n	80056a6 <LoopFillZerobss>

080056a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056a4:	3204      	adds	r2, #4

080056a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056a8:	d3fb      	bcc.n	80056a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056aa:	f004 f80d 	bl	80096c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80056ae:	f7ff fa67 	bl	8004b80 <main>
  bx lr
 80056b2:	4770      	bx	lr
  ldr r0, =_sdata
 80056b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056b8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80056bc:	0800b8a4 	.word	0x0800b8a4
  ldr r2, =_sbss
 80056c0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80056c4:	200019d8 	.word	0x200019d8

080056c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056c8:	e7fe      	b.n	80056c8 <ADC1_2_IRQHandler>
	...

080056cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_Init+0x28>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <HAL_Init+0x28>)
 80056d6:	f043 0310 	orr.w	r3, r3, #16
 80056da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056dc:	2003      	movs	r0, #3
 80056de:	f000 f947 	bl	8005970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056e2:	200f      	movs	r0, #15
 80056e4:	f000 f808 	bl	80056f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056e8:	f7ff fdd2 	bl	8005290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000

080056f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_InitTick+0x54>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_InitTick+0x58>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800570e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f95f 	bl	80059da <HAL_SYSTICK_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e00e      	b.n	8005744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b0f      	cmp	r3, #15
 800572a:	d80a      	bhi.n	8005742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800572c:	2200      	movs	r2, #0
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	f000 f927 	bl	8005986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <HAL_InitTick+0x5c>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000074 	.word	0x20000074
 8005750:	2000007c 	.word	0x2000007c
 8005754:	20000078 	.word	0x20000078

08005758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_IncTick+0x1c>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_IncTick+0x20>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4413      	add	r3, r2
 8005768:	4a03      	ldr	r2, [pc, #12]	; (8005778 <HAL_IncTick+0x20>)
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	2000007c 	.word	0x2000007c
 8005778:	20001868 	.word	0x20001868

0800577c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return uwTick;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <HAL_GetTick+0x10>)
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	20001868 	.word	0x20001868

08005790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005798:	f7ff fff0 	bl	800577c <HAL_GetTick>
 800579c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d005      	beq.n	80057b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_Delay+0x44>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057b6:	bf00      	nop
 80057b8:	f7ff ffe0 	bl	800577c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d8f7      	bhi.n	80057b8 <HAL_Delay+0x28>
  {
  }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000007c 	.word	0x2000007c

080057d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <__NVIC_SetPriorityGrouping+0x44>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057f4:	4013      	ands	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800580a:	4a04      	ldr	r2, [pc, #16]	; (800581c <__NVIC_SetPriorityGrouping+0x44>)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	60d3      	str	r3, [r2, #12]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	e000ed00 	.word	0xe000ed00

08005820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__NVIC_GetPriorityGrouping+0x18>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0307 	and.w	r3, r3, #7
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db0b      	blt.n	8005866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	f003 021f 	and.w	r2, r3, #31
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <__NVIC_EnableIRQ+0x34>)
 8005856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2001      	movs	r0, #1
 800585e:	fa00 f202 	lsl.w	r2, r0, r2
 8005862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	e000e100 	.word	0xe000e100

08005874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	6039      	str	r1, [r7, #0]
 800587e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db0a      	blt.n	800589e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	490c      	ldr	r1, [pc, #48]	; (80058c0 <__NVIC_SetPriority+0x4c>)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	440b      	add	r3, r1
 8005898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800589c:	e00a      	b.n	80058b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4908      	ldr	r1, [pc, #32]	; (80058c4 <__NVIC_SetPriority+0x50>)
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	3b04      	subs	r3, #4
 80058ac:	0112      	lsls	r2, r2, #4
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	440b      	add	r3, r1
 80058b2:	761a      	strb	r2, [r3, #24]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e100 	.word	0xe000e100
 80058c4:	e000ed00 	.word	0xe000ed00

080058c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f1c3 0307 	rsb	r3, r3, #7
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	bf28      	it	cs
 80058e6:	2304      	movcs	r3, #4
 80058e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d902      	bls.n	80058f8 <NVIC_EncodePriority+0x30>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3b03      	subs	r3, #3
 80058f6:	e000      	b.n	80058fa <NVIC_EncodePriority+0x32>
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43da      	mvns	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	401a      	ands	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005910:	f04f 31ff 	mov.w	r1, #4294967295
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	43d9      	mvns	r1, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005920:	4313      	orrs	r3, r2
         );
}
 8005922:	4618      	mov	r0, r3
 8005924:	3724      	adds	r7, #36	; 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3b01      	subs	r3, #1
 8005938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800593c:	d301      	bcc.n	8005942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800593e:	2301      	movs	r3, #1
 8005940:	e00f      	b.n	8005962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <SysTick_Config+0x40>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800594a:	210f      	movs	r1, #15
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	f7ff ff90 	bl	8005874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <SysTick_Config+0x40>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <SysTick_Config+0x40>)
 800595c:	2207      	movs	r2, #7
 800595e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	e000e010 	.word	0xe000e010

08005970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff2d 	bl	80057d8 <__NVIC_SetPriorityGrouping>
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005998:	f7ff ff42 	bl	8005820 <__NVIC_GetPriorityGrouping>
 800599c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff ff90 	bl	80058c8 <NVIC_EncodePriority>
 80059a8:	4602      	mov	r2, r0
 80059aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff5f 	bl	8005874 <__NVIC_SetPriority>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	4603      	mov	r3, r0
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff35 	bl	800583c <__NVIC_EnableIRQ>
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ffa2 	bl	800592c <SysTick_Config>
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d008      	beq.n	8005a1c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e020      	b.n	8005a5e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020e 	bic.w	r2, r2, #14
 8005a2a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d005      	beq.n	8005a8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2204      	movs	r2, #4
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e051      	b.n	8005b30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020e 	bic.w	r2, r2, #14
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <HAL_DMA_Abort_IT+0xd4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d029      	beq.n	8005b0a <HAL_DMA_Abort_IT+0xa2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <HAL_DMA_Abort_IT+0xd8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x9e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <HAL_DMA_Abort_IT+0xdc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01a      	beq.n	8005b00 <HAL_DMA_Abort_IT+0x98>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_DMA_Abort_IT+0xe0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d012      	beq.n	8005afa <HAL_DMA_Abort_IT+0x92>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <HAL_DMA_Abort_IT+0xe4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00a      	beq.n	8005af4 <HAL_DMA_Abort_IT+0x8c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <HAL_DMA_Abort_IT+0xe8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d102      	bne.n	8005aee <HAL_DMA_Abort_IT+0x86>
 8005ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005aec:	e00e      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af2:	e00b      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005af8:	e008      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005afe:	e005      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b04:	e002      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005b06:	2310      	movs	r3, #16
 8005b08:	e000      	b.n	8005b0c <HAL_DMA_Abort_IT+0xa4>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4a11      	ldr	r2, [pc, #68]	; (8005b54 <HAL_DMA_Abort_IT+0xec>)
 8005b0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
    } 
  }
  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40020008 	.word	0x40020008
 8005b40:	4002001c 	.word	0x4002001c
 8005b44:	40020030 	.word	0x40020030
 8005b48:	40020044 	.word	0x40020044
 8005b4c:	40020058 	.word	0x40020058
 8005b50:	4002006c 	.word	0x4002006c
 8005b54:	40020000 	.word	0x40020000

08005b58 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <HAL_FLASH_Program+0xd8>)
 8005b74:	7e1b      	ldrb	r3, [r3, #24]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_FLASH_Program+0x26>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e054      	b.n	8005c28 <HAL_FLASH_Program+0xd0>
 8005b7e:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <HAL_FLASH_Program+0xd8>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b88:	f000 f8a8 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d144      	bne.n	8005c20 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d102      	bne.n	8005ba2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	757b      	strb	r3, [r7, #21]
 8005ba0:	e007      	b.n	8005bb2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d102      	bne.n	8005bae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	757b      	strb	r3, [r7, #21]
 8005bac:	e001      	b.n	8005bb2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005bae:	2304      	movs	r3, #4
 8005bb0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75bb      	strb	r3, [r7, #22]
 8005bb6:	e02d      	b.n	8005c14 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005bb8:	7dbb      	ldrb	r3, [r7, #22]
 8005bba:	005a      	lsls	r2, r3, #1
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	eb02 0c03 	add.w	ip, r2, r3
 8005bc2:	7dbb      	ldrb	r3, [r7, #22]
 8005bc4:	0119      	lsls	r1, r3, #4
 8005bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bca:	f1c1 0620 	rsb	r6, r1, #32
 8005bce:	f1a1 0020 	sub.w	r0, r1, #32
 8005bd2:	fa22 f401 	lsr.w	r4, r2, r1
 8005bd6:	fa03 f606 	lsl.w	r6, r3, r6
 8005bda:	4334      	orrs	r4, r6
 8005bdc:	fa23 f000 	lsr.w	r0, r3, r0
 8005be0:	4304      	orrs	r4, r0
 8005be2:	fa23 f501 	lsr.w	r5, r3, r1
 8005be6:	b2a3      	uxth	r3, r4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4660      	mov	r0, ip
 8005bec:	f000 f85a 	bl	8005ca4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bf4:	f000 f872 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <HAL_FLASH_Program+0xdc>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	4a0c      	ldr	r2, [pc, #48]	; (8005c34 <HAL_FLASH_Program+0xdc>)
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005c0e:	7dbb      	ldrb	r3, [r7, #22]
 8005c10:	3301      	adds	r3, #1
 8005c12:	75bb      	strb	r3, [r7, #22]
 8005c14:	7dba      	ldrb	r2, [r7, #22]
 8005c16:	7d7b      	ldrb	r3, [r7, #21]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d3cd      	bcc.n	8005bb8 <HAL_FLASH_Program+0x60>
 8005c1c:	e000      	b.n	8005c20 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005c1e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_FLASH_Program+0xd8>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	761a      	strb	r2, [r3, #24]

  return status;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c30:	20001870 	.word	0x20001870
 8005c34:	40022000 	.word	0x40022000

08005c38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <HAL_FLASH_Unlock+0x40>)
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_FLASH_Unlock+0x40>)
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <HAL_FLASH_Unlock+0x44>)
 8005c52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <HAL_FLASH_Unlock+0x40>)
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <HAL_FLASH_Unlock+0x48>)
 8005c58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <HAL_FLASH_Unlock+0x40>)
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40022000 	.word	0x40022000
 8005c7c:	45670123 	.word	0x45670123
 8005c80:	cdef89ab 	.word	0xcdef89ab

08005c84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_FLASH_Lock+0x1c>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_FLASH_Lock+0x1c>)
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40022000 	.word	0x40022000

08005ca4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <FLASH_Program_HalfWord+0x30>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <FLASH_Program_HalfWord+0x34>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <FLASH_Program_HalfWord+0x34>)
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	887a      	ldrh	r2, [r7, #2]
 8005cc6:	801a      	strh	r2, [r3, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20001870 	.word	0x20001870
 8005cd8:	40022000 	.word	0x40022000

08005cdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005ce4:	f7ff fd4a 	bl	800577c <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005cea:	e010      	b.n	8005d0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d00c      	beq.n	8005d0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <FLASH_WaitForLastOperation+0x2e>
 8005cfa:	f7ff fd3f 	bl	800577c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d201      	bcs.n	8005d0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e025      	b.n	8005d5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e8      	bne.n	8005cec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d28:	2220      	movs	r2, #32
 8005d2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <FLASH_WaitForLastOperation+0x88>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005d50:	f000 f80a 	bl	8005d68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40022000 	.word	0x40022000

08005d68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005d72:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005d7e:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f043 0302 	orr.w	r3, r3, #2
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005d88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f043 0310 	orr.w	r3, r3, #16
 8005d90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d92:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005d9e:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005da8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005db2:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f043 0304 	orr.w	r3, r3, #4
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <FLASH_SetErrorCode+0x9c>)
 8005dc8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4a0c      	ldr	r2, [pc, #48]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f240 1201 	movw	r2, #257	; 0x101
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d106      	bne.n	8005dee <FLASH_SetErrorCode+0x86>
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	61d3      	str	r3, [r2, #28]
}  
 8005dec:	e002      	b.n	8005df4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005dee:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <FLASH_SetErrorCode+0x98>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60d3      	str	r3, [r2, #12]
}  
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40022000 	.word	0x40022000
 8005e04:	20001870 	.word	0x20001870

08005e08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_FLASHEx_Erase+0xd0>)
 8005e1c:	7e1b      	ldrb	r3, [r3, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_FLASHEx_Erase+0x1e>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e053      	b.n	8005ece <HAL_FLASHEx_Erase+0xc6>
 8005e26:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <HAL_FLASHEx_Erase+0xd0>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d116      	bne.n	8005e62 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e38:	f7ff ff50 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d141      	bne.n	8005ec6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005e42:	2001      	movs	r0, #1
 8005e44:	f000 f84c 	bl	8005ee0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e4c:	f7ff ff46 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_FLASHEx_Erase+0xd4>)
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <HAL_FLASHEx_Erase+0xd4>)
 8005e5a:	f023 0304 	bic.w	r3, r3, #4
 8005e5e:	6113      	str	r3, [r2, #16]
 8005e60:	e031      	b.n	8005ec6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e66:	f7ff ff39 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d12a      	bne.n	8005ec6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	e019      	b.n	8005eb4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005e80:	68b8      	ldr	r0, [r7, #8]
 8005e82:	f000 f849 	bl	8005f18 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e8a:	f7ff ff27 	bl	8005cdc <FLASH_WaitForLastOperation>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_FLASHEx_Erase+0xd4>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4a11      	ldr	r2, [pc, #68]	; (8005edc <HAL_FLASHEx_Erase+0xd4>)
 8005e98:	f023 0302 	bic.w	r3, r3, #2
 8005e9c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	601a      	str	r2, [r3, #0]
            break;
 8005eaa:	e00c      	b.n	8005ec6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	029a      	lsls	r2, r3, #10
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3dc      	bcc.n	8005e80 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <HAL_FLASHEx_Erase+0xd0>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	761a      	strb	r2, [r3, #24]

  return status;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20001870 	.word	0x20001870
 8005edc:	40022000 	.word	0x40022000

08005ee0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <FLASH_MassErase+0x30>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <FLASH_MassErase+0x34>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <FLASH_MassErase+0x34>)
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <FLASH_MassErase+0x34>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <FLASH_MassErase+0x34>)
 8005f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f04:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr
 8005f10:	20001870 	.word	0x20001870
 8005f14:	40022000 	.word	0x40022000

08005f18 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <FLASH_PageErase+0x38>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <FLASH_PageErase+0x3c>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <FLASH_PageErase+0x3c>)
 8005f2c:	f043 0302 	orr.w	r3, r3, #2
 8005f30:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005f32:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <FLASH_PageErase+0x3c>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <FLASH_PageErase+0x3c>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <FLASH_PageErase+0x3c>)
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20001870 	.word	0x20001870
 8005f54:	40022000 	.word	0x40022000

08005f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b08b      	sub	sp, #44	; 0x2c
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f6a:	e169      	b.n	8006240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	f040 8158 	bne.w	800623a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4a9a      	ldr	r2, [pc, #616]	; (80061f8 <HAL_GPIO_Init+0x2a0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d05e      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
 8005f94:	4a98      	ldr	r2, [pc, #608]	; (80061f8 <HAL_GPIO_Init+0x2a0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d875      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005f9a:	4a98      	ldr	r2, [pc, #608]	; (80061fc <HAL_GPIO_Init+0x2a4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d058      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
 8005fa0:	4a96      	ldr	r2, [pc, #600]	; (80061fc <HAL_GPIO_Init+0x2a4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d86f      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005fa6:	4a96      	ldr	r2, [pc, #600]	; (8006200 <HAL_GPIO_Init+0x2a8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d052      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
 8005fac:	4a94      	ldr	r2, [pc, #592]	; (8006200 <HAL_GPIO_Init+0x2a8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d869      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005fb2:	4a94      	ldr	r2, [pc, #592]	; (8006204 <HAL_GPIO_Init+0x2ac>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d04c      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
 8005fb8:	4a92      	ldr	r2, [pc, #584]	; (8006204 <HAL_GPIO_Init+0x2ac>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d863      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005fbe:	4a92      	ldr	r2, [pc, #584]	; (8006208 <HAL_GPIO_Init+0x2b0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d046      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
 8005fc4:	4a90      	ldr	r2, [pc, #576]	; (8006208 <HAL_GPIO_Init+0x2b0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d85d      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005fca:	2b12      	cmp	r3, #18
 8005fcc:	d82a      	bhi.n	8006024 <HAL_GPIO_Init+0xcc>
 8005fce:	2b12      	cmp	r3, #18
 8005fd0:	d859      	bhi.n	8006086 <HAL_GPIO_Init+0x12e>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <HAL_GPIO_Init+0x80>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08006053 	.word	0x08006053
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	0800603f 	.word	0x0800603f
 8005fe4:	08006081 	.word	0x08006081
 8005fe8:	08006087 	.word	0x08006087
 8005fec:	08006087 	.word	0x08006087
 8005ff0:	08006087 	.word	0x08006087
 8005ff4:	08006087 	.word	0x08006087
 8005ff8:	08006087 	.word	0x08006087
 8005ffc:	08006087 	.word	0x08006087
 8006000:	08006087 	.word	0x08006087
 8006004:	08006087 	.word	0x08006087
 8006008:	08006087 	.word	0x08006087
 800600c:	08006087 	.word	0x08006087
 8006010:	08006087 	.word	0x08006087
 8006014:	08006087 	.word	0x08006087
 8006018:	08006087 	.word	0x08006087
 800601c:	08006035 	.word	0x08006035
 8006020:	08006049 	.word	0x08006049
 8006024:	4a79      	ldr	r2, [pc, #484]	; (800620c <HAL_GPIO_Init+0x2b4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800602a:	e02c      	b.n	8006086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	623b      	str	r3, [r7, #32]
          break;
 8006032:	e029      	b.n	8006088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	623b      	str	r3, [r7, #32]
          break;
 800603c:	e024      	b.n	8006088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	3308      	adds	r3, #8
 8006044:	623b      	str	r3, [r7, #32]
          break;
 8006046:	e01f      	b.n	8006088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	330c      	adds	r3, #12
 800604e:	623b      	str	r3, [r7, #32]
          break;
 8006050:	e01a      	b.n	8006088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800605a:	2304      	movs	r3, #4
 800605c:	623b      	str	r3, [r7, #32]
          break;
 800605e:	e013      	b.n	8006088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006068:	2308      	movs	r3, #8
 800606a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	611a      	str	r2, [r3, #16]
          break;
 8006072:	e009      	b.n	8006088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006074:	2308      	movs	r3, #8
 8006076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	615a      	str	r2, [r3, #20]
          break;
 800607e:	e003      	b.n	8006088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006080:	2300      	movs	r3, #0
 8006082:	623b      	str	r3, [r7, #32]
          break;
 8006084:	e000      	b.n	8006088 <HAL_GPIO_Init+0x130>
          break;
 8006086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2bff      	cmp	r3, #255	; 0xff
 800608c:	d801      	bhi.n	8006092 <HAL_GPIO_Init+0x13a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	e001      	b.n	8006096 <HAL_GPIO_Init+0x13e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2bff      	cmp	r3, #255	; 0xff
 800609c:	d802      	bhi.n	80060a4 <HAL_GPIO_Init+0x14c>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	e002      	b.n	80060aa <HAL_GPIO_Init+0x152>
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3b08      	subs	r3, #8
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	210f      	movs	r1, #15
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	401a      	ands	r2, r3
 80060bc:	6a39      	ldr	r1, [r7, #32]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	431a      	orrs	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80b1 	beq.w	800623a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80060d8:	4b4d      	ldr	r3, [pc, #308]	; (8006210 <HAL_GPIO_Init+0x2b8>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	4a4c      	ldr	r2, [pc, #304]	; (8006210 <HAL_GPIO_Init+0x2b8>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6193      	str	r3, [r2, #24]
 80060e4:	4b4a      	ldr	r3, [pc, #296]	; (8006210 <HAL_GPIO_Init+0x2b8>)
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060f0:	4a48      	ldr	r2, [pc, #288]	; (8006214 <HAL_GPIO_Init+0x2bc>)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	089b      	lsrs	r3, r3, #2
 80060f6:	3302      	adds	r3, #2
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	220f      	movs	r2, #15
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a40      	ldr	r2, [pc, #256]	; (8006218 <HAL_GPIO_Init+0x2c0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_GPIO_Init+0x1ec>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3f      	ldr	r2, [pc, #252]	; (800621c <HAL_GPIO_Init+0x2c4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00d      	beq.n	8006140 <HAL_GPIO_Init+0x1e8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3e      	ldr	r2, [pc, #248]	; (8006220 <HAL_GPIO_Init+0x2c8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <HAL_GPIO_Init+0x1e4>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <HAL_GPIO_Init+0x2cc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <HAL_GPIO_Init+0x1e0>
 8006134:	2303      	movs	r3, #3
 8006136:	e006      	b.n	8006146 <HAL_GPIO_Init+0x1ee>
 8006138:	2304      	movs	r3, #4
 800613a:	e004      	b.n	8006146 <HAL_GPIO_Init+0x1ee>
 800613c:	2302      	movs	r3, #2
 800613e:	e002      	b.n	8006146 <HAL_GPIO_Init+0x1ee>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_GPIO_Init+0x1ee>
 8006144:	2300      	movs	r3, #0
 8006146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006148:	f002 0203 	and.w	r2, r2, #3
 800614c:	0092      	lsls	r2, r2, #2
 800614e:	4093      	lsls	r3, r2
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006156:	492f      	ldr	r1, [pc, #188]	; (8006214 <HAL_GPIO_Init+0x2bc>)
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	3302      	adds	r3, #2
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	492c      	ldr	r1, [pc, #176]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	608b      	str	r3, [r1, #8]
 800617c:	e006      	b.n	800618c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800617e:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	43db      	mvns	r3, r3
 8006186:	4928      	ldr	r1, [pc, #160]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 8006188:	4013      	ands	r3, r2
 800618a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006198:	4b23      	ldr	r3, [pc, #140]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4922      	ldr	r1, [pc, #136]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60cb      	str	r3, [r1, #12]
 80061a4:	e006      	b.n	80061b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061a6:	4b20      	ldr	r3, [pc, #128]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	491e      	ldr	r1, [pc, #120]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4918      	ldr	r1, [pc, #96]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	604b      	str	r3, [r1, #4]
 80061cc:	e006      	b.n	80061dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80061ce:	4b16      	ldr	r3, [pc, #88]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	4914      	ldr	r1, [pc, #80]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061d8:	4013      	ands	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d021      	beq.n	800622c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	490e      	ldr	r1, [pc, #56]	; (8006228 <HAL_GPIO_Init+0x2d0>)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	600b      	str	r3, [r1, #0]
 80061f4:	e021      	b.n	800623a <HAL_GPIO_Init+0x2e2>
 80061f6:	bf00      	nop
 80061f8:	10320000 	.word	0x10320000
 80061fc:	10310000 	.word	0x10310000
 8006200:	10220000 	.word	0x10220000
 8006204:	10210000 	.word	0x10210000
 8006208:	10120000 	.word	0x10120000
 800620c:	10110000 	.word	0x10110000
 8006210:	40021000 	.word	0x40021000
 8006214:	40010000 	.word	0x40010000
 8006218:	40010800 	.word	0x40010800
 800621c:	40010c00 	.word	0x40010c00
 8006220:	40011000 	.word	0x40011000
 8006224:	40011400 	.word	0x40011400
 8006228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_GPIO_Init+0x304>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	43db      	mvns	r3, r3
 8006234:	4909      	ldr	r1, [pc, #36]	; (800625c <HAL_GPIO_Init+0x304>)
 8006236:	4013      	ands	r3, r2
 8006238:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	3301      	adds	r3, #1
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	f47f ae8e 	bne.w	8005f6c <HAL_GPIO_Init+0x14>
  }
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	372c      	adds	r7, #44	; 0x2c
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr
 800625c:	40010400 	.word	0x40010400

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr

0800628e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	807b      	strh	r3, [r7, #2]
 800629a:	4613      	mov	r3, r2
 800629c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800629e:	787b      	ldrb	r3, [r7, #1]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062aa:	e003      	b.n	80062b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062ac:	887b      	ldrh	r3, [r7, #2]
 80062ae:	041a      	lsls	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062d0:	887a      	ldrh	r2, [r7, #2]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4013      	ands	r3, r2
 80062d6:	041a      	lsls	r2, r3, #16
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	43d9      	mvns	r1, r3
 80062dc:	887b      	ldrh	r3, [r7, #2]
 80062de:	400b      	ands	r3, r1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e12b      	b.n	800655a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe ffec 	bl	80052f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	; 0x24
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006354:	f001 f9a2 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4a81      	ldr	r2, [pc, #516]	; (8006564 <HAL_I2C_Init+0x274>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d807      	bhi.n	8006374 <HAL_I2C_Init+0x84>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a80      	ldr	r2, [pc, #512]	; (8006568 <HAL_I2C_Init+0x278>)
 8006368:	4293      	cmp	r3, r2
 800636a:	bf94      	ite	ls
 800636c:	2301      	movls	r3, #1
 800636e:	2300      	movhi	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e006      	b.n	8006382 <HAL_I2C_Init+0x92>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a7d      	ldr	r2, [pc, #500]	; (800656c <HAL_I2C_Init+0x27c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	bf94      	ite	ls
 800637c:	2301      	movls	r3, #1
 800637e:	2300      	movhi	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e0e7      	b.n	800655a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a78      	ldr	r2, [pc, #480]	; (8006570 <HAL_I2C_Init+0x280>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	0c9b      	lsrs	r3, r3, #18
 8006394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4a6a      	ldr	r2, [pc, #424]	; (8006564 <HAL_I2C_Init+0x274>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d802      	bhi.n	80063c4 <HAL_I2C_Init+0xd4>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	3301      	adds	r3, #1
 80063c2:	e009      	b.n	80063d8 <HAL_I2C_Init+0xe8>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	4a69      	ldr	r2, [pc, #420]	; (8006574 <HAL_I2C_Init+0x284>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	099b      	lsrs	r3, r3, #6
 80063d6:	3301      	adds	r3, #1
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	430b      	orrs	r3, r1
 80063de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	495c      	ldr	r1, [pc, #368]	; (8006564 <HAL_I2C_Init+0x274>)
 80063f4:	428b      	cmp	r3, r1
 80063f6:	d819      	bhi.n	800642c <HAL_I2C_Init+0x13c>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	1e59      	subs	r1, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	fbb1 f3f3 	udiv	r3, r1, r3
 8006406:	1c59      	adds	r1, r3, #1
 8006408:	f640 73fc 	movw	r3, #4092	; 0xffc
 800640c:	400b      	ands	r3, r1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_I2C_Init+0x138>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1e59      	subs	r1, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006420:	3301      	adds	r3, #1
 8006422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006426:	e051      	b.n	80064cc <HAL_I2C_Init+0x1dc>
 8006428:	2304      	movs	r3, #4
 800642a:	e04f      	b.n	80064cc <HAL_I2C_Init+0x1dc>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d111      	bne.n	8006458 <HAL_I2C_Init+0x168>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1e58      	subs	r0, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6859      	ldr	r1, [r3, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	440b      	add	r3, r1
 8006442:	fbb0 f3f3 	udiv	r3, r0, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e012      	b.n	800647e <HAL_I2C_Init+0x18e>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1e58      	subs	r0, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	0099      	lsls	r1, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	fbb0 f3f3 	udiv	r3, r0, r3
 800646e:	3301      	adds	r3, #1
 8006470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_I2C_Init+0x196>
 8006482:	2301      	movs	r3, #1
 8006484:	e022      	b.n	80064cc <HAL_I2C_Init+0x1dc>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10e      	bne.n	80064ac <HAL_I2C_Init+0x1bc>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1e58      	subs	r0, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	440b      	add	r3, r1
 800649c:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	e00f      	b.n	80064cc <HAL_I2C_Init+0x1dc>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1e58      	subs	r0, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6859      	ldr	r1, [r3, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	0099      	lsls	r1, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	fbb0 f3f3 	udiv	r3, r0, r3
 80064c2:	3301      	adds	r3, #1
 80064c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	6809      	ldr	r1, [r1, #0]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6911      	ldr	r1, [r2, #16]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	4311      	orrs	r1, r2
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	430b      	orrs	r3, r1
 800650e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	000186a0 	.word	0x000186a0
 8006568:	001e847f 	.word	0x001e847f
 800656c:	003d08ff 	.word	0x003d08ff
 8006570:	431bde83 	.word	0x431bde83
 8006574:	10624dd3 	.word	0x10624dd3

08006578 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	461a      	mov	r2, r3
 8006584:	460b      	mov	r3, r1
 8006586:	817b      	strh	r3, [r7, #10]
 8006588:	4613      	mov	r3, r2
 800658a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7ff f8f6 	bl	800577c <HAL_GetTick>
 8006590:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b20      	cmp	r3, #32
 800659c:	f040 80e0 	bne.w	8006760 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2319      	movs	r3, #25
 80065a6:	2201      	movs	r2, #1
 80065a8:	4970      	ldr	r1, [pc, #448]	; (800676c <HAL_I2C_Master_Transmit+0x1f4>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fa92 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0d3      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_I2C_Master_Transmit+0x50>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0cc      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d007      	beq.n	80065ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2221      	movs	r2, #33	; 0x21
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2210      	movs	r2, #16
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	893a      	ldrh	r2, [r7, #8]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4a50      	ldr	r2, [pc, #320]	; (8006770 <HAL_I2C_Master_Transmit+0x1f8>)
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006630:	8979      	ldrh	r1, [r7, #10]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f9ca 	bl	80069d0 <I2C_MasterRequestWrite>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e08d      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800665c:	e066      	b.n	800672c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6a39      	ldr	r1, [r7, #32]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fb50 	bl	8006d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b04      	cmp	r3, #4
 8006674:	d107      	bne.n	8006686 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e06b      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d11b      	bne.n	8006700 <HAL_I2C_Master_Transmit+0x188>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d017      	beq.n	8006700 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	6a39      	ldr	r1, [r7, #32]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fb47 	bl	8006d98 <I2C_WaitOnBTFFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2b04      	cmp	r3, #4
 8006716:	d107      	bne.n	8006728 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006726:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01a      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	d194      	bne.n	800665e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	00100002 	.word	0x00100002
 8006770:	ffff0000 	.word	0xffff0000

08006774 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	460b      	mov	r3, r1
 8006782:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006784:	f7fe fffa 	bl	800577c <HAL_GetTick>
 8006788:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	f040 8111 	bne.w	80069be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2319      	movs	r3, #25
 80067a2:	2201      	movs	r2, #1
 80067a4:	4988      	ldr	r1, [pc, #544]	; (80069c8 <HAL_I2C_IsDeviceReady+0x254>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f994 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
 80067b4:	e104      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2C_IsDeviceReady+0x50>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0fd      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d007      	beq.n	80067ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2224      	movs	r2, #36	; 0x24
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_I2C_IsDeviceReady+0x258>)
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2200      	movs	r2, #0
 8006826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f952 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006844:	d103      	bne.n	800684e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e0b6      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006860:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006862:	f7fe ff8b 	bl	800577c <HAL_GetTick>
 8006866:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	bf0c      	ite	eq
 8006876:	2301      	moveq	r3, #1
 8006878:	2300      	movne	r3, #0
 800687a:	b2db      	uxtb	r3, r3
 800687c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688c:	bf0c      	ite	eq
 800688e:	2301      	moveq	r3, #1
 8006890:	2300      	movne	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006896:	e025      	b.n	80068e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006898:	f7fe ff70 	bl	800577c <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <HAL_I2C_IsDeviceReady+0x13a>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22a0      	movs	r2, #160	; 0xa0
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2ba0      	cmp	r3, #160	; 0xa0
 80068ee:	d005      	beq.n	80068fc <HAL_I2C_IsDeviceReady+0x188>
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_I2C_IsDeviceReady+0x188>
 80068f6:	7dbb      	ldrb	r3, [r7, #22]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0cd      	beq.n	8006898 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d129      	bne.n	8006966 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006920:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2319      	movs	r3, #25
 800693e:	2201      	movs	r2, #1
 8006940:	4921      	ldr	r1, [pc, #132]	; (80069c8 <HAL_I2C_IsDeviceReady+0x254>)
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f8c6 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e036      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e02c      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006974:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800697e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2319      	movs	r3, #25
 8006986:	2201      	movs	r2, #1
 8006988:	490f      	ldr	r1, [pc, #60]	; (80069c8 <HAL_I2C_IsDeviceReady+0x254>)
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f8a2 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e012      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	3301      	adds	r3, #1
 800699e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	f4ff af32 	bcc.w	800680e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00100002 	.word	0x00100002
 80069cc:	ffff0000 	.word	0xffff0000

080069d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	460b      	mov	r3, r1
 80069de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d006      	beq.n	80069fa <I2C_MasterRequestWrite+0x2a>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d003      	beq.n	80069fa <I2C_MasterRequestWrite+0x2a>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069f8:	d108      	bne.n	8006a0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e00b      	b.n	8006a24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	2b12      	cmp	r3, #18
 8006a12:	d107      	bne.n	8006a24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f84f 	bl	8006ad4 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00d      	beq.n	8006a58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4a:	d103      	bne.n	8006a54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e035      	b.n	8006ac4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a60:	d108      	bne.n	8006a74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a62:	897b      	ldrh	r3, [r7, #10]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a70:	611a      	str	r2, [r3, #16]
 8006a72:	e01b      	b.n	8006aac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a74:	897b      	ldrh	r3, [r7, #10]
 8006a76:	11db      	asrs	r3, r3, #7
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0306 	and.w	r3, r3, #6
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f063 030f 	orn	r3, r3, #15
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	490e      	ldr	r1, [pc, #56]	; (8006acc <I2C_MasterRequestWrite+0xfc>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f898 	bl	8006bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e010      	b.n	8006ac4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006aa2:	897b      	ldrh	r3, [r7, #10]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4907      	ldr	r1, [pc, #28]	; (8006ad0 <I2C_MasterRequestWrite+0x100>)
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f888 	bl	8006bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	00010008 	.word	0x00010008
 8006ad0:	00010002 	.word	0x00010002

08006ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae4:	e048      	b.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d044      	beq.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fe fe45 	bl	800577c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d139      	bne.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	0c1b      	lsrs	r3, r3, #16
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10d      	bne.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	43da      	mvns	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	e00c      	b.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	43da      	mvns	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d116      	bne.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e023      	b.n	8006bc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10d      	bne.n	8006b9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	43da      	mvns	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	e00c      	b.n	8006bb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	43da      	mvns	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d093      	beq.n	8006ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bd6:	e071      	b.n	8006cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be6:	d123      	bne.n	8006c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	f043 0204 	orr.w	r2, r3, #4
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e067      	b.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d041      	beq.n	8006cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c38:	f7fe fda0 	bl	800577c <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d136      	bne.n	8006cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10c      	bne.n	8006c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	43da      	mvns	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4013      	ands	r3, r2
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bf14      	ite	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	2300      	moveq	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	e00b      	b.n	8006c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f043 0220 	orr.w	r2, r3, #32
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e021      	b.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d10c      	bne.n	8006ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	43da      	mvns	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e00b      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4013      	ands	r3, r2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f af6d 	bne.w	8006bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d14:	e034      	b.n	8006d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f886 	bl	8006e28 <I2C_IsAcknowledgeFailed>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e034      	b.n	8006d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d028      	beq.n	8006d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fe fd25 	bl	800577c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11d      	bne.n	8006d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d016      	beq.n	8006d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e007      	b.n	8006d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d1c3      	bne.n	8006d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006da4:	e034      	b.n	8006e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f83e 	bl	8006e28 <I2C_IsAcknowledgeFailed>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e034      	b.n	8006e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d028      	beq.n	8006e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dbe:	f7fe fcdd 	bl	800577c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d11d      	bne.n	8006e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d016      	beq.n	8006e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f043 0220 	orr.w	r2, r3, #32
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e007      	b.n	8006e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d1c3      	bne.n	8006da6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d11b      	bne.n	8006e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	f043 0204 	orr.w	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e034      	b.n	8006f00 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f245 5255 	movw	r2, #21845	; 0x5555
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6852      	ldr	r2, [r2, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6892      	ldr	r2, [r2, #8]
 8006ebc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006ebe:	f7fe fc5d 	bl	800577c <HAL_GetTick>
 8006ec2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ec4:	e00f      	b.n	8006ee6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006ec6:	f7fe fc59 	bl	800577c <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b27      	cmp	r3, #39	; 0x27
 8006ed2:	d908      	bls.n	8006ee6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00c      	b.n	8006f00 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e8      	bne.n	8006ec6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006efc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e272      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8087 	beq.w	8007036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f28:	4b92      	ldr	r3, [pc, #584]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f34:	4b8f      	ldr	r3, [pc, #572]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d112      	bne.n	8006f66 <HAL_RCC_OscConfig+0x5e>
 8006f40:	4b8c      	ldr	r3, [pc, #560]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f4c:	d10b      	bne.n	8006f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f4e:	4b89      	ldr	r3, [pc, #548]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d06c      	beq.n	8007034 <HAL_RCC_OscConfig+0x12c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d168      	bne.n	8007034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e24c      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCC_OscConfig+0x76>
 8006f70:	4b80      	ldr	r3, [pc, #512]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a7f      	ldr	r2, [pc, #508]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e02e      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x98>
 8006f86:	4b7b      	ldr	r3, [pc, #492]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7a      	ldr	r2, [pc, #488]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4b78      	ldr	r3, [pc, #480]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a77      	ldr	r2, [pc, #476]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e01d      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0xbc>
 8006faa:	4b72      	ldr	r3, [pc, #456]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a71      	ldr	r2, [pc, #452]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b6f      	ldr	r3, [pc, #444]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006fc4:	4b6b      	ldr	r3, [pc, #428]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6a      	ldr	r2, [pc, #424]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b68      	ldr	r3, [pc, #416]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a67      	ldr	r2, [pc, #412]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fe fbca 	bl	800577c <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fe fbc6 	bl	800577c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e200      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0xe4>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7fe fbb6 	bl	800577c <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007014:	f7fe fbb2 	bl	800577c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b64      	cmp	r3, #100	; 0x64
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1ec      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	4b53      	ldr	r3, [pc, #332]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x10c>
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d063      	beq.n	800710a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007042:	4b4c      	ldr	r3, [pc, #304]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800704e:	4b49      	ldr	r3, [pc, #292]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11c      	bne.n	8007094 <HAL_RCC_OscConfig+0x18c>
 800705a:	4b46      	ldr	r3, [pc, #280]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	4b43      	ldr	r3, [pc, #268]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x176>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1c0      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b3d      	ldr	r3, [pc, #244]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4939      	ldr	r1, [pc, #228]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	e03a      	b.n	800710a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709c:	4b36      	ldr	r3, [pc, #216]	; (8007178 <HAL_RCC_OscConfig+0x270>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a2:	f7fe fb6b 	bl	800577c <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fe fb67 	bl	800577c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e1a1      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070bc:	4b2d      	ldr	r3, [pc, #180]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4927      	ldr	r1, [pc, #156]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
 80070dc:	e015      	b.n	800710a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <HAL_RCC_OscConfig+0x270>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fe fb4a 	bl	800577c <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ec:	f7fe fb46 	bl	800577c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e180      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d03a      	beq.n	800718c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d019      	beq.n	8007152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <HAL_RCC_OscConfig+0x274>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007124:	f7fe fb2a 	bl	800577c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712c:	f7fe fb26 	bl	800577c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e160      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800714a:	2001      	movs	r0, #1
 800714c:	f000 face 	bl	80076ec <RCC_Delay>
 8007150:	e01c      	b.n	800718c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <HAL_RCC_OscConfig+0x274>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007158:	f7fe fb10 	bl	800577c <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800715e:	e00f      	b.n	8007180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007160:	f7fe fb0c 	bl	800577c <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d908      	bls.n	8007180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e146      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000
 8007178:	42420000 	.word	0x42420000
 800717c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b92      	ldr	r3, [pc, #584]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e9      	bne.n	8007160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a6 	beq.w	80072e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719e:	4b8b      	ldr	r3, [pc, #556]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4a87      	ldr	r2, [pc, #540]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	61d3      	str	r3, [r2, #28]
 80071b6:	4b85      	ldr	r3, [pc, #532]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c6:	4b82      	ldr	r3, [pc, #520]	; (80073d0 <HAL_RCC_OscConfig+0x4c8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d118      	bne.n	8007204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <HAL_RCC_OscConfig+0x4c8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a7e      	ldr	r2, [pc, #504]	; (80073d0 <HAL_RCC_OscConfig+0x4c8>)
 80071d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071de:	f7fe facd 	bl	800577c <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fe fac9 	bl	800577c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b64      	cmp	r3, #100	; 0x64
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e103      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f8:	4b75      	ldr	r3, [pc, #468]	; (80073d0 <HAL_RCC_OscConfig+0x4c8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d106      	bne.n	800721a <HAL_RCC_OscConfig+0x312>
 800720c:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	4a6e      	ldr	r2, [pc, #440]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6213      	str	r3, [r2, #32]
 8007218:	e02d      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <HAL_RCC_OscConfig+0x334>
 8007222:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	4a69      	ldr	r2, [pc, #420]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	6213      	str	r3, [r2, #32]
 800722e:	4b67      	ldr	r3, [pc, #412]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	4a66      	ldr	r2, [pc, #408]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	6213      	str	r3, [r2, #32]
 800723a:	e01c      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b05      	cmp	r3, #5
 8007242:	d10c      	bne.n	800725e <HAL_RCC_OscConfig+0x356>
 8007244:	4b61      	ldr	r3, [pc, #388]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	4a60      	ldr	r2, [pc, #384]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800724a:	f043 0304 	orr.w	r3, r3, #4
 800724e:	6213      	str	r3, [r2, #32]
 8007250:	4b5e      	ldr	r3, [pc, #376]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	4a5d      	ldr	r2, [pc, #372]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	6213      	str	r3, [r2, #32]
 800725c:	e00b      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800725e:	4b5b      	ldr	r3, [pc, #364]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	4a5a      	ldr	r2, [pc, #360]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	6213      	str	r3, [r2, #32]
 800726a:	4b58      	ldr	r3, [pc, #352]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	4a57      	ldr	r2, [pc, #348]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800727e:	f7fe fa7d 	bl	800577c <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007284:	e00a      	b.n	800729c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007286:	f7fe fa79 	bl	800577c <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f241 3288 	movw	r2, #5000	; 0x1388
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0b1      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	4b4b      	ldr	r3, [pc, #300]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ee      	beq.n	8007286 <HAL_RCC_OscConfig+0x37e>
 80072a8:	e014      	b.n	80072d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072aa:	f7fe fa67 	bl	800577c <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b0:	e00a      	b.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b2:	f7fe fa63 	bl	800577c <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e09b      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c8:	4b40      	ldr	r3, [pc, #256]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1ee      	bne.n	80072b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072da:	4b3c      	ldr	r3, [pc, #240]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4a3b      	ldr	r2, [pc, #236]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8087 	beq.w	80073fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f0:	4b36      	ldr	r3, [pc, #216]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d061      	beq.n	80073c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d146      	bne.n	8007392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007304:	4b33      	ldr	r3, [pc, #204]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730a:	f7fe fa37 	bl	800577c <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007312:	f7fe fa33 	bl	800577c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e06d      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007324:	4b29      	ldr	r3, [pc, #164]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d108      	bne.n	800734c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800733a:	4b24      	ldr	r3, [pc, #144]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	4921      	ldr	r1, [pc, #132]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800734c:	4b1f      	ldr	r3, [pc, #124]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a19      	ldr	r1, [r3, #32]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	430b      	orrs	r3, r1
 800735e:	491b      	ldr	r1, [pc, #108]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fe fa07 	bl	800577c <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007372:	f7fe fa03 	bl	800577c <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e03d      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x46a>
 8007390:	e035      	b.n	80073fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fe f9f0 	bl	800577c <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fe f9ec 	bl	800577c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e026      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_RCC_OscConfig+0x4c4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x498>
 80073be:	e01e      	b.n	80073fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d107      	bne.n	80073d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e019      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40007000 	.word	0x40007000
 80073d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <HAL_RCC_OscConfig+0x500>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d106      	bne.n	80073fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d001      	beq.n	80073fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40021000 	.word	0x40021000

0800740c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0d0      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007420:	4b6a      	ldr	r3, [pc, #424]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d910      	bls.n	8007450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742e:	4b67      	ldr	r3, [pc, #412]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f023 0207 	bic.w	r2, r3, #7
 8007436:	4965      	ldr	r1, [pc, #404]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743e:	4b63      	ldr	r3, [pc, #396]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0b8      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d020      	beq.n	800749e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007468:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4a58      	ldr	r2, [pc, #352]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800746e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007480:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4a52      	ldr	r2, [pc, #328]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800748a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800748c:	4b50      	ldr	r3, [pc, #320]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	494d      	ldr	r1, [pc, #308]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800749a:	4313      	orrs	r3, r2
 800749c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d040      	beq.n	800752c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d115      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e07f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ca:	4b41      	ldr	r3, [pc, #260]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e073      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074da:	4b3d      	ldr	r3, [pc, #244]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06b      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ea:	4b39      	ldr	r3, [pc, #228]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f023 0203 	bic.w	r2, r3, #3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4936      	ldr	r1, [pc, #216]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074fc:	f7fe f93e 	bl	800577c <HAL_GetTick>
 8007500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	e00a      	b.n	800751a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007504:	f7fe f93a 	bl	800577c <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007512:	4293      	cmp	r3, r2
 8007514:	d901      	bls.n	800751a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e053      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751a:	4b2d      	ldr	r3, [pc, #180]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f003 020c 	and.w	r2, r3, #12
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	429a      	cmp	r2, r3
 800752a:	d1eb      	bne.n	8007504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d210      	bcs.n	800755c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753a:	4b24      	ldr	r3, [pc, #144]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f023 0207 	bic.w	r2, r3, #7
 8007542:	4922      	ldr	r1, [pc, #136]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	4313      	orrs	r3, r2
 8007548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d001      	beq.n	800755c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e032      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007568:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	4916      	ldr	r1, [pc, #88]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	490e      	ldr	r1, [pc, #56]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007596:	4313      	orrs	r3, r2
 8007598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800759a:	f000 f821 	bl	80075e0 <HAL_RCC_GetSysClockFreq>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	490a      	ldr	r1, [pc, #40]	; (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80075ac:	5ccb      	ldrb	r3, [r1, r3]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1cc>)
 80075b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <HAL_RCC_ClockConfig+0x1d0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe f89c 	bl	80056f8 <HAL_InitTick>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	40022000 	.word	0x40022000
 80075d0:	40021000 	.word	0x40021000
 80075d4:	0800b834 	.word	0x0800b834
 80075d8:	20000074 	.word	0x20000074
 80075dc:	20000078 	.word	0x20000078

080075e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <HAL_RCC_GetSysClockFreq+0x94>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b04      	cmp	r3, #4
 8007608:	d002      	beq.n	8007610 <HAL_RCC_GetSysClockFreq+0x30>
 800760a:	2b08      	cmp	r3, #8
 800760c:	d003      	beq.n	8007616 <HAL_RCC_GetSysClockFreq+0x36>
 800760e:	e027      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <HAL_RCC_GetSysClockFreq+0x98>)
 8007612:	613b      	str	r3, [r7, #16]
      break;
 8007614:	e027      	b.n	8007666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	0c9b      	lsrs	r3, r3, #18
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007620:	5cd3      	ldrb	r3, [r2, r3]
 8007622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800762e:	4b11      	ldr	r3, [pc, #68]	; (8007674 <HAL_RCC_GetSysClockFreq+0x94>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	0c5b      	lsrs	r3, r3, #17
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	4a11      	ldr	r2, [pc, #68]	; (8007680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800763a:	5cd3      	ldrb	r3, [r2, r3]
 800763c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a0d      	ldr	r2, [pc, #52]	; (8007678 <HAL_RCC_GetSysClockFreq+0x98>)
 8007642:	fb03 f202 	mul.w	r2, r3, r2
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e004      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a0c      	ldr	r2, [pc, #48]	; (8007684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	613b      	str	r3, [r7, #16]
      break;
 800765e:	e002      	b.n	8007666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <HAL_RCC_GetSysClockFreq+0x98>)
 8007662:	613b      	str	r3, [r7, #16]
      break;
 8007664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007666:	693b      	ldr	r3, [r7, #16]
}
 8007668:	4618      	mov	r0, r3
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40021000 	.word	0x40021000
 8007678:	007a1200 	.word	0x007a1200
 800767c:	0800b84c 	.word	0x0800b84c
 8007680:	0800b85c 	.word	0x0800b85c
 8007684:	003d0900 	.word	0x003d0900

08007688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <HAL_RCC_GetHCLKFreq+0x10>)
 800768e:	681b      	ldr	r3, [r3, #0]
}
 8007690:	4618      	mov	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	20000074 	.word	0x20000074

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076a0:	f7ff fff2 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4903      	ldr	r1, [pc, #12]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40021000 	.word	0x40021000
 80076c0:	0800b844 	.word	0x0800b844

080076c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076c8:	f7ff ffde 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	0adb      	lsrs	r3, r3, #11
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	4903      	ldr	r1, [pc, #12]	; (80076e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40021000 	.word	0x40021000
 80076e8:	0800b844 	.word	0x0800b844

080076ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <RCC_Delay+0x34>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <RCC_Delay+0x38>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	0a5b      	lsrs	r3, r3, #9
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007708:	bf00      	nop
  }
  while (Delay --);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	60fa      	str	r2, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f9      	bne.n	8007708 <RCC_Delay+0x1c>
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	20000074 	.word	0x20000074
 8007724:	10624dd3 	.word	0x10624dd3

08007728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e076      	b.n	8007828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d108      	bne.n	8007754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774a:	d009      	beq.n	8007760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	61da      	str	r2, [r3, #28]
 8007752:	e005      	b.n	8007760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fd fdf8 	bl	8005370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	ea42 0103 	orr.w	r1, r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	0c1a      	lsrs	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f002 0204 	and.w	r2, r2, #4
 8007806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Transmit+0x22>
 800784e:	2302      	movs	r3, #2
 8007850:	e12d      	b.n	8007aae <HAL_SPI_Transmit+0x27e>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800785a:	f7fd ff8f 	bl	800577c <HAL_GetTick>
 800785e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d002      	beq.n	8007876 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007870:	2302      	movs	r3, #2
 8007872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007874:	e116      	b.n	8007aa4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_SPI_Transmit+0x52>
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007886:	e10d      	b.n	8007aa4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2203      	movs	r2, #3
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ce:	d10f      	bne.n	80078f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d007      	beq.n	800790e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007916:	d14f      	bne.n	80079b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_SPI_Transmit+0xf6>
 8007920:	8afb      	ldrh	r3, [r7, #22]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d142      	bne.n	80079ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	881a      	ldrh	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	1c9a      	adds	r2, r3, #2
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800794a:	e02f      	b.n	80079ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d112      	bne.n	8007980 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	881a      	ldrh	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	1c9a      	adds	r2, r3, #2
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	86da      	strh	r2, [r3, #54]	; 0x36
 800797e:	e015      	b.n	80079ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007980:	f7fd fefc 	bl	800577c <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d803      	bhi.n	8007998 <HAL_SPI_Transmit+0x168>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d102      	bne.n	800799e <HAL_SPI_Transmit+0x16e>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80079aa:	e07b      	b.n	8007aa4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1ca      	bne.n	800794c <HAL_SPI_Transmit+0x11c>
 80079b6:	e050      	b.n	8007a5a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_Transmit+0x196>
 80079c0:	8afb      	ldrh	r3, [r7, #22]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d144      	bne.n	8007a50 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079ec:	e030      	b.n	8007a50 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d113      	bne.n	8007a24 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a22:	e015      	b.n	8007a50 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a24:	f7fd feaa 	bl	800577c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d803      	bhi.n	8007a3c <HAL_SPI_Transmit+0x20c>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d102      	bne.n	8007a42 <HAL_SPI_Transmit+0x212>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007a4e:	e029      	b.n	8007aa4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1c9      	bne.n	80079ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fa6e 	bl	8007f40 <SPI_EndRxTxTransaction>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	77fb      	strb	r3, [r7, #31]
 8007a9a:	e003      	b.n	8007aa4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b08c      	sub	sp, #48	; 0x30
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_SPI_TransmitReceive+0x26>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e198      	b.n	8007e0e <HAL_SPI_TransmitReceive+0x358>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae4:	f7fd fe4a 	bl	800577c <HAL_GetTick>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d00f      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x70>
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b0c:	d107      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d103      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x68>
 8007b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d003      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b24:	e16d      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x82>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x82>
 8007b32:	887b      	ldrh	r3, [r7, #2]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b3e:	e160      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d003      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2205      	movs	r2, #5
 8007b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	887a      	ldrh	r2, [r7, #2]
 8007b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	887a      	ldrh	r2, [r7, #2]
 8007b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	887a      	ldrh	r2, [r7, #2]
 8007b76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	887a      	ldrh	r2, [r7, #2]
 8007b7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d007      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb0:	d17c      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x10a>
 8007bba:	8b7b      	ldrh	r3, [r7, #26]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d16a      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	881a      	ldrh	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	1c9a      	adds	r2, r3, #2
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be4:	e057      	b.n	8007c96 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d11b      	bne.n	8007c2c <HAL_SPI_TransmitReceive+0x176>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <HAL_SPI_TransmitReceive+0x176>
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d113      	bne.n	8007c2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	881a      	ldrh	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	1c9a      	adds	r2, r3, #2
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d119      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x1b8>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d014      	beq.n	8007c6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	b292      	uxth	r2, r2
 8007c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	1c9a      	adds	r2, r3, #2
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c6e:	f7fd fd85 	bl	800577c <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d80b      	bhi.n	8007c96 <HAL_SPI_TransmitReceive+0x1e0>
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d007      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007c94:	e0b5      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1a2      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x130>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d19d      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x130>
 8007caa:	e080      	b.n	8007dae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_SPI_TransmitReceive+0x204>
 8007cb4:	8b7b      	ldrh	r3, [r7, #26]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d16f      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce0:	e05b      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d11c      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x274>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d017      	beq.n	8007d2a <HAL_SPI_TransmitReceive+0x274>
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d114      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d119      	bne.n	8007d6c <HAL_SPI_TransmitReceive+0x2b6>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d014      	beq.n	8007d6c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d6c:	f7fd fd06 	bl	800577c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d803      	bhi.n	8007d84 <HAL_SPI_TransmitReceive+0x2ce>
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d82:	d102      	bne.n	8007d8a <HAL_SPI_TransmitReceive+0x2d4>
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d107      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007d98:	e033      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d19e      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x22c>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d199      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f8c4 	bl	8007f40 <SPI_EndRxTxTransaction>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d006      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007dca:	e01a      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df8:	e003      	b.n	8007e02 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3730      	adds	r7, #48	; 0x30
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e24:	b2db      	uxtb	r3, r3
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e40:	f7fd fc9c 	bl	800577c <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e50:	f7fd fc94 	bl	800577c <HAL_GetTick>
 8007e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	015b      	lsls	r3, r3, #5
 8007e5c:	0d1b      	lsrs	r3, r3, #20
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e66:	e054      	b.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d050      	beq.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e70:	f7fd fc84 	bl	800577c <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d902      	bls.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d13d      	bne.n	8007f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9e:	d111      	bne.n	8007ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea8:	d004      	beq.n	8007eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d107      	bne.n	8007ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ecc:	d10f      	bne.n	8007eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e017      	b.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	bf0c      	ite	eq
 8007f22:	2301      	moveq	r3, #1
 8007f24:	2300      	movne	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d19b      	bne.n	8007e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000074 	.word	0x20000074

08007f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	2180      	movs	r1, #128	; 0x80
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff ff6a 	bl	8007e30 <SPI_WaitFlagStateUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f66:	f043 0220 	orr.w	r2, r3, #32
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e000      	b.n	8007f74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e041      	b.n	8008012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fd fa6a 	bl	800547c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f000 fae4 	bl	8008588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d001      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e03a      	b.n	80080aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <HAL_TIM_Base_Start_IT+0x98>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00e      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x58>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805e:	d009      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x58>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d004      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x58>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a13      	ldr	r2, [pc, #76]	; (80080bc <HAL_TIM_Base_Start_IT+0xa0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d111      	bne.n	8008098 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b06      	cmp	r3, #6
 8008084:	d010      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	e007      	b.n	80080a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800

080080c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	f241 1311 	movw	r3, #4369	; 0x1111
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <HAL_TIM_Base_Stop_IT+0x48>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	f240 4344 	movw	r3, #1092	; 0x444
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_TIM_Base_Stop_IT+0x48>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b02      	cmp	r3, #2
 8008130:	d122      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b02      	cmp	r3, #2
 800813e:	d11b      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0202 	mvn.w	r2, #2
 8008148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9f6 	bl	8008550 <HAL_TIM_IC_CaptureCallback>
 8008164:	e005      	b.n	8008172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9e9 	bl	800853e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9f8 	bl	8008562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b04      	cmp	r3, #4
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0204 	mvn.w	r2, #4
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9cc 	bl	8008550 <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9bf 	bl	800853e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f9ce 	bl	8008562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d122      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d11b      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0208 	mvn.w	r2, #8
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9a2 	bl	8008550 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f995 	bl	800853e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9a4 	bl	8008562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b10      	cmp	r3, #16
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b10      	cmp	r3, #16
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0210 	mvn.w	r2, #16
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2208      	movs	r2, #8
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f978 	bl	8008550 <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f96b 	bl	800853e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f97a 	bl	8008562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10e      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b01      	cmp	r3, #1
 800828e:	d107      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0201 	mvn.w	r2, #1
 8008298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7f9 fa68 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d10e      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b8:	2b80      	cmp	r3, #128	; 0x80
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fb4f 	bl	800896a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b40      	cmp	r3, #64	; 0x40
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f93e 	bl	8008574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b20      	cmp	r3, #32
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b20      	cmp	r3, #32
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0220 	mvn.w	r2, #32
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb1a 	bl	8008958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIM_ConfigClockSource+0x1c>
 8008344:	2302      	movs	r3, #2
 8008346:	e0b4      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x186>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800836e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008380:	d03e      	beq.n	8008400 <HAL_TIM_ConfigClockSource+0xd4>
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	f200 8087 	bhi.w	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838e:	f000 8086 	beq.w	800849e <HAL_TIM_ConfigClockSource+0x172>
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d87f      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b70      	cmp	r3, #112	; 0x70
 800839a:	d01a      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0xa6>
 800839c:	2b70      	cmp	r3, #112	; 0x70
 800839e:	d87b      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083a0:	2b60      	cmp	r3, #96	; 0x60
 80083a2:	d050      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x11a>
 80083a4:	2b60      	cmp	r3, #96	; 0x60
 80083a6:	d877      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083a8:	2b50      	cmp	r3, #80	; 0x50
 80083aa:	d03c      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0xfa>
 80083ac:	2b50      	cmp	r3, #80	; 0x50
 80083ae:	d873      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d058      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0x13a>
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d86f      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083b8:	2b30      	cmp	r3, #48	; 0x30
 80083ba:	d064      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x15a>
 80083bc:	2b30      	cmp	r3, #48	; 0x30
 80083be:	d86b      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d060      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x15a>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d867      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d05c      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x15a>
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d05a      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x15a>
 80083d0:	e062      	b.n	8008498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083e2:	f000 fa3b 	bl	800885c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	609a      	str	r2, [r3, #8]
      break;
 80083fe:	e04f      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008410:	f000 fa24 	bl	800885c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008422:	609a      	str	r2, [r3, #8]
      break;
 8008424:	e03c      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008432:	461a      	mov	r2, r3
 8008434:	f000 f99b 	bl	800876e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2150      	movs	r1, #80	; 0x50
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f9f2 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 8008444:	e02c      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008452:	461a      	mov	r2, r3
 8008454:	f000 f9b9 	bl	80087ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2160      	movs	r1, #96	; 0x60
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f9e2 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 8008464:	e01c      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	461a      	mov	r2, r3
 8008474:	f000 f97b 	bl	800876e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2140      	movs	r1, #64	; 0x40
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f9d2 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 8008484:	e00c      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	4610      	mov	r0, r2
 8008492:	f000 f9c9 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 8008496:	e003      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
      break;
 800849c:	e000      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800849e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e031      	b.n	8008536 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f8b1 	bl	800864c <TIM_SlaveTimer_SetConfig>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e018      	b.n	8008536 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008512:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008522:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr
	...

08008588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a29      	ldr	r2, [pc, #164]	; (8008640 <TIM_Base_SetConfig+0xb8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00b      	beq.n	80085b8 <TIM_Base_SetConfig+0x30>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a6:	d007      	beq.n	80085b8 <TIM_Base_SetConfig+0x30>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a26      	ldr	r2, [pc, #152]	; (8008644 <TIM_Base_SetConfig+0xbc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_Base_SetConfig+0x30>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a25      	ldr	r2, [pc, #148]	; (8008648 <TIM_Base_SetConfig+0xc0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d108      	bne.n	80085ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <TIM_Base_SetConfig+0xb8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00b      	beq.n	80085ea <TIM_Base_SetConfig+0x62>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d007      	beq.n	80085ea <TIM_Base_SetConfig+0x62>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a19      	ldr	r2, [pc, #100]	; (8008644 <TIM_Base_SetConfig+0xbc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_Base_SetConfig+0x62>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a18      	ldr	r2, [pc, #96]	; (8008648 <TIM_Base_SetConfig+0xc0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d108      	bne.n	80085fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a07      	ldr	r2, [pc, #28]	; (8008640 <TIM_Base_SetConfig+0xb8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d103      	bne.n	8008630 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	615a      	str	r2, [r3, #20]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr
 8008640:	40012c00 	.word	0x40012c00
 8008644:	40000400 	.word	0x40000400
 8008648:	40000800 	.word	0x40000800

0800864c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2b70      	cmp	r3, #112	; 0x70
 8008694:	d01a      	beq.n	80086cc <TIM_SlaveTimer_SetConfig+0x80>
 8008696:	2b70      	cmp	r3, #112	; 0x70
 8008698:	d860      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 800869a:	2b60      	cmp	r3, #96	; 0x60
 800869c:	d054      	beq.n	8008748 <TIM_SlaveTimer_SetConfig+0xfc>
 800869e:	2b60      	cmp	r3, #96	; 0x60
 80086a0:	d85c      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 80086a2:	2b50      	cmp	r3, #80	; 0x50
 80086a4:	d046      	beq.n	8008734 <TIM_SlaveTimer_SetConfig+0xe8>
 80086a6:	2b50      	cmp	r3, #80	; 0x50
 80086a8:	d858      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 80086aa:	2b40      	cmp	r3, #64	; 0x40
 80086ac:	d019      	beq.n	80086e2 <TIM_SlaveTimer_SetConfig+0x96>
 80086ae:	2b40      	cmp	r3, #64	; 0x40
 80086b0:	d854      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 80086b2:	2b30      	cmp	r3, #48	; 0x30
 80086b4:	d055      	beq.n	8008762 <TIM_SlaveTimer_SetConfig+0x116>
 80086b6:	2b30      	cmp	r3, #48	; 0x30
 80086b8:	d850      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d051      	beq.n	8008762 <TIM_SlaveTimer_SetConfig+0x116>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d84c      	bhi.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d04d      	beq.n	8008762 <TIM_SlaveTimer_SetConfig+0x116>
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d04b      	beq.n	8008762 <TIM_SlaveTimer_SetConfig+0x116>
 80086ca:	e047      	b.n	800875c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80086dc:	f000 f8be 	bl	800885c <TIM_ETR_SetConfig>
      break;
 80086e0:	e040      	b.n	8008764 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	d101      	bne.n	80086ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e03b      	b.n	8008766 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6a1a      	ldr	r2, [r3, #32]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0201 	bic.w	r2, r2, #1
 8008704:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008714:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	4313      	orrs	r3, r2
 8008720:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	621a      	str	r2, [r3, #32]
      break;
 8008732:	e017      	b.n	8008764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008740:	461a      	mov	r2, r3
 8008742:	f000 f814 	bl	800876e <TIM_TI1_ConfigInputStage>
      break;
 8008746:	e00d      	b.n	8008764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008754:	461a      	mov	r2, r3
 8008756:	f000 f838 	bl	80087ca <TIM_TI2_ConfigInputStage>
      break;
 800875a:	e003      	b.n	8008764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	e000      	b.n	8008764 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008762:	bf00      	nop
  }

  return status;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800876e:	b480      	push	{r7}
 8008770:	b087      	sub	sp, #28
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f023 0201 	bic.w	r2, r3, #1
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f023 030a 	bic.w	r3, r3, #10
 80087aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	621a      	str	r2, [r3, #32]
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b087      	sub	sp, #28
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	f023 0210 	bic.w	r2, r3, #16
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	031b      	lsls	r3, r3, #12
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	f043 0307 	orr.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	609a      	str	r2, [r3, #8]
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	021a      	lsls	r2, r3, #8
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	431a      	orrs	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4313      	orrs	r3, r2
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	609a      	str	r2, [r3, #8]
}
 8008890:	bf00      	nop
 8008892:	371c      	adds	r7, #28
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr
	...

0800889c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e046      	b.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00e      	beq.n	8008916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008900:	d009      	beq.n	8008916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a12      	ldr	r2, [pc, #72]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d004      	beq.n	8008916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a10      	ldr	r2, [pc, #64]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d10c      	bne.n	8008930 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	4313      	orrs	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800

08008958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr

0800896a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e042      	b.n	8008a14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7fc fda2 	bl	80054ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2224      	movs	r2, #36	; 0x24
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fdc5 	bl	8009550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695a      	ldr	r2, [r3, #20]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d16d      	bne.n	8008b18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <HAL_UART_Transmit+0x2c>
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e066      	b.n	8008b1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2221      	movs	r2, #33	; 0x21
 8008a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a5a:	f7fc fe8f 	bl	800577c <HAL_GetTick>
 8008a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a74:	d108      	bne.n	8008a88 <HAL_UART_Transmit+0x6c>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	61bb      	str	r3, [r7, #24]
 8008a86:	e003      	b.n	8008a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a90:	e02a      	b.n	8008ae8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2180      	movs	r1, #128	; 0x80
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fb14 	bl	80090ca <UART_WaitOnFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e036      	b.n	8008b1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	e007      	b.n	8008ada <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	781a      	ldrb	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1cf      	bne.n	8008a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2140      	movs	r1, #64	; 0x40
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fae4 	bl	80090ca <UART_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e006      	b.n	8008b1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e000      	b.n	8008b1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008b18:	2302      	movs	r3, #2
  }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d112      	bne.n	8008b62 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <HAL_UART_Receive_IT+0x26>
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e00b      	b.n	8008b64 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	461a      	mov	r2, r3
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fb24 	bl	80091a6 <UART_Start_Receive_IT>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	e000      	b.n	8008b64 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b62:	2302      	movs	r3, #2
  }
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b0ba      	sub	sp, #232	; 0xe8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x66>
 8008bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fc01 	bl	80093d2 <UART_Receive_IT>
      return;
 8008bd0:	e25b      	b.n	800908a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80de 	beq.w	8008d98 <HAL_UART_IRQHandler+0x22c>
 8008bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 80d1 	beq.w	8008d98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_UART_IRQHandler+0xae>
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <HAL_UART_IRQHandler+0xd2>
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	f043 0202 	orr.w	r2, r3, #2
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <HAL_UART_IRQHandler+0xf6>
 8008c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	f043 0204 	orr.w	r2, r3, #4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <HAL_UART_IRQHandler+0x126>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8a:	f043 0208 	orr.w	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 81f2 	beq.w	8009080 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d008      	beq.n	8008cba <HAL_UART_IRQHandler+0x14e>
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb8c 	bl	80093d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x17a>
 8008cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d04f      	beq.n	8008d86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa96 	bl	8009218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d041      	beq.n	8008d7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3314      	adds	r3, #20
 8008d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3314      	adds	r3, #20
 8008d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d9      	bne.n	8008cfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d013      	beq.n	8008d76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d52:	4a7e      	ldr	r2, [pc, #504]	; (8008f4c <HAL_UART_IRQHandler+0x3e0>)
 8008d54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fc fe84 	bl	8005a68 <HAL_DMA_Abort_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d016      	beq.n	8008d94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d74:	e00e      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f993 	bl	80090a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7c:	e00a      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f98f 	bl	80090a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	e006      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f98b 	bl	80090a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008d92:	e175      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	bf00      	nop
    return;
 8008d96:	e173      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	f040 814f 	bne.w	8009040 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 8148 	beq.w	8009040 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8141 	beq.w	8009040 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 80b6 	beq.w	8008f50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8145 	beq.w	8009084 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e02:	429a      	cmp	r2, r3
 8008e04:	f080 813e 	bcs.w	8009084 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	f000 8088 	beq.w	8008f2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1d9      	bne.n	8008e1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3314      	adds	r3, #20
 8008e6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e7a:	f023 0301 	bic.w	r3, r3, #1
 8008e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3314      	adds	r3, #20
 8008e88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e1      	bne.n	8008e68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ec8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008eca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ece:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e3      	bne.n	8008ea4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	330c      	adds	r3, #12
 8008ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	330c      	adds	r3, #12
 8008f0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e3      	bne.n	8008eea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fc fd63 	bl	80059f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f8b6 	bl	80090b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f48:	e09c      	b.n	8009084 <HAL_UART_IRQHandler+0x518>
 8008f4a:	bf00      	nop
 8008f4c:	080092dd 	.word	0x080092dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 808e 	beq.w	8009088 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8089 	beq.w	8009088 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	330c      	adds	r3, #12
 8008f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f9a:	647a      	str	r2, [r7, #68]	; 0x44
 8008f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e3      	bne.n	8008f76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e3      	bne.n	8008fae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	60fb      	str	r3, [r7, #12]
   return(result);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0310 	bic.w	r3, r3, #16
 800900a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	330c      	adds	r3, #12
 8009014:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009018:	61fa      	str	r2, [r7, #28]
 800901a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	69b9      	ldr	r1, [r7, #24]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	617b      	str	r3, [r7, #20]
   return(result);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e3      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f83b 	bl	80090b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800903e:	e023      	b.n	8009088 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d009      	beq.n	8009060 <HAL_UART_IRQHandler+0x4f4>
 800904c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f953 	bl	8009304 <UART_Transmit_IT>
    return;
 800905e:	e014      	b.n	800908a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00e      	beq.n	800908a <HAL_UART_IRQHandler+0x51e>
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f992 	bl	80093a2 <UART_EndTransmit_IT>
    return;
 800907e:	e004      	b.n	800908a <HAL_UART_IRQHandler+0x51e>
    return;
 8009080:	bf00      	nop
 8009082:	e002      	b.n	800908a <HAL_UART_IRQHandler+0x51e>
      return;
 8009084:	bf00      	nop
 8009086:	e000      	b.n	800908a <HAL_UART_IRQHandler+0x51e>
      return;
 8009088:	bf00      	nop
  }
}
 800908a:	37e8      	adds	r7, #232	; 0xe8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr

080090b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bc80      	pop	{r7}
 80090c8:	4770      	bx	lr

080090ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b090      	sub	sp, #64	; 0x40
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	603b      	str	r3, [r7, #0]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090da:	e050      	b.n	800917e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e2:	d04c      	beq.n	800917e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80090e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <UART_WaitOnFlagUntilTimeout+0x30>
 80090ea:	f7fc fb47 	bl	800577c <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d241      	bcs.n	800917e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	330c      	adds	r3, #12
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800911a:	637a      	str	r2, [r7, #52]	; 0x34
 800911c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e5      	bne.n	80090fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3314      	adds	r3, #20
 8009134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	613b      	str	r3, [r7, #16]
   return(result);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	63bb      	str	r3, [r7, #56]	; 0x38
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3314      	adds	r3, #20
 800914c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800914e:	623a      	str	r2, [r7, #32]
 8009150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	69f9      	ldr	r1, [r7, #28]
 8009154:	6a3a      	ldr	r2, [r7, #32]
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	61bb      	str	r3, [r7, #24]
   return(result);
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e00f      	b.n	800919e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4013      	ands	r3, r2
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	429a      	cmp	r2, r3
 800918c:	bf0c      	ite	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	2300      	movne	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	461a      	mov	r2, r3
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	429a      	cmp	r2, r3
 800919a:	d09f      	beq.n	80090dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3740      	adds	r7, #64	; 0x40
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	4613      	mov	r3, r2
 80091b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	88fa      	ldrh	r2, [r7, #6]
 80091be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	88fa      	ldrh	r2, [r7, #6]
 80091c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2222      	movs	r2, #34	; 0x22
 80091d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0201 	orr.w	r2, r2, #1
 80091fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0220 	orr.w	r2, r2, #32
 800920a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr

08009218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b095      	sub	sp, #84	; 0x54
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009240:	643a      	str	r2, [r7, #64]	; 0x40
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e5      	bne.n	8009220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3314      	adds	r3, #20
 800925a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	61fb      	str	r3, [r7, #28]
   return(result);
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	64bb      	str	r3, [r7, #72]	; 0x48
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3314      	adds	r3, #20
 8009272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800927a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e5      	bne.n	8009254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	2b01      	cmp	r3, #1
 800928e:	d119      	bne.n	80092c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f023 0310 	bic.w	r3, r3, #16
 80092a6:	647b      	str	r3, [r7, #68]	; 0x44
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092b0:	61ba      	str	r2, [r7, #24]
 80092b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6979      	ldr	r1, [r7, #20]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	613b      	str	r3, [r7, #16]
   return(result);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e5      	bne.n	8009290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092d2:	bf00      	nop
 80092d4:	3754      	adds	r7, #84	; 0x54
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr

080092dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff fed3 	bl	80090a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b21      	cmp	r3, #33	; 0x21
 8009316:	d13e      	bne.n	8009396 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009320:	d114      	bne.n	800934c <UART_Transmit_IT+0x48>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d110      	bne.n	800934c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800933e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	1c9a      	adds	r2, r3, #2
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	621a      	str	r2, [r3, #32]
 800934a:	e008      	b.n	800935e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	1c59      	adds	r1, r3, #1
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6211      	str	r1, [r2, #32]
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4619      	mov	r1, r3
 800936c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10f      	bne.n	8009392 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009380:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009390:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	e000      	b.n	8009398 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009396:	2302      	movs	r3, #2
  }
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff fe64 	bl	8009090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b08c      	sub	sp, #48	; 0x30
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b22      	cmp	r3, #34	; 0x22
 80093e4:	f040 80ae 	bne.w	8009544 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f0:	d117      	bne.n	8009422 <UART_Receive_IT+0x50>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d113      	bne.n	8009422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009410:	b29a      	uxth	r2, r3
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	1c9a      	adds	r2, r3, #2
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	629a      	str	r2, [r3, #40]	; 0x28
 8009420:	e026      	b.n	8009470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009434:	d007      	beq.n	8009446 <UART_Receive_IT+0x74>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <UART_Receive_IT+0x82>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	b2da      	uxtb	r2, r3
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	e008      	b.n	8009466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4619      	mov	r1, r3
 800947e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009480:	2b00      	cmp	r3, #0
 8009482:	d15d      	bne.n	8009540 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0220 	bic.w	r2, r2, #32
 8009492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0201 	bic.w	r2, r2, #1
 80094b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d135      	bne.n	8009536 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	613b      	str	r3, [r7, #16]
   return(result);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f0:	623a      	str	r2, [r7, #32]
 80094f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	69f9      	ldr	r1, [r7, #28]
 80094f6:	6a3a      	ldr	r2, [r7, #32]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d10a      	bne.n	8009528 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fdc0 	bl	80090b4 <HAL_UARTEx_RxEventCallback>
 8009534:	e002      	b.n	800953c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7f8 fece 	bl	80022d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	e002      	b.n	8009546 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	e000      	b.n	8009546 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009544:	2302      	movs	r3, #2
  }
}
 8009546:	4618      	mov	r0, r3
 8009548:	3730      	adds	r7, #48	; 0x30
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800958a:	f023 030c 	bic.w	r3, r3, #12
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	430b      	orrs	r3, r1
 8009596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a2c      	ldr	r2, [pc, #176]	; (8009664 <UART_SetConfig+0x114>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d103      	bne.n	80095c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80095b8:	f7fe f884 	bl	80076c4 <HAL_RCC_GetPCLK2Freq>
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	e002      	b.n	80095c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80095c0:	f7fe f86c 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 80095c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009a      	lsls	r2, r3, #2
 80095d0:	441a      	add	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	4a22      	ldr	r2, [pc, #136]	; (8009668 <UART_SetConfig+0x118>)
 80095de:	fba2 2303 	umull	r2, r3, r2, r3
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	0119      	lsls	r1, r3, #4
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009a      	lsls	r2, r3, #2
 80095f0:	441a      	add	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80095fc:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <UART_SetConfig+0x118>)
 80095fe:	fba3 0302 	umull	r0, r3, r3, r2
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	2064      	movs	r0, #100	; 0x64
 8009606:	fb00 f303 	mul.w	r3, r0, r3
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	3332      	adds	r3, #50	; 0x32
 8009610:	4a15      	ldr	r2, [pc, #84]	; (8009668 <UART_SetConfig+0x118>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800961c:	4419      	add	r1, r3
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009a      	lsls	r2, r3, #2
 8009628:	441a      	add	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	fbb2 f2f3 	udiv	r2, r2, r3
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <UART_SetConfig+0x118>)
 8009636:	fba3 0302 	umull	r0, r3, r3, r2
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2064      	movs	r0, #100	; 0x64
 800963e:	fb00 f303 	mul.w	r3, r0, r3
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	3332      	adds	r3, #50	; 0x32
 8009648:	4a07      	ldr	r2, [pc, #28]	; (8009668 <UART_SetConfig+0x118>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f003 020f 	and.w	r2, r3, #15
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	440a      	add	r2, r1
 800965a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	40013800 	.word	0x40013800
 8009668:	51eb851f 	.word	0x51eb851f

0800966c <siprintf>:
 800966c:	b40e      	push	{r1, r2, r3}
 800966e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009672:	b500      	push	{lr}
 8009674:	b09c      	sub	sp, #112	; 0x70
 8009676:	ab1d      	add	r3, sp, #116	; 0x74
 8009678:	9002      	str	r0, [sp, #8]
 800967a:	9006      	str	r0, [sp, #24]
 800967c:	9107      	str	r1, [sp, #28]
 800967e:	9104      	str	r1, [sp, #16]
 8009680:	4808      	ldr	r0, [pc, #32]	; (80096a4 <siprintf+0x38>)
 8009682:	4909      	ldr	r1, [pc, #36]	; (80096a8 <siprintf+0x3c>)
 8009684:	f853 2b04 	ldr.w	r2, [r3], #4
 8009688:	9105      	str	r1, [sp, #20]
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	a902      	add	r1, sp, #8
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	f000 f99c 	bl	80099cc <_svfiprintf_r>
 8009694:	2200      	movs	r2, #0
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	b01c      	add	sp, #112	; 0x70
 800969c:	f85d eb04 	ldr.w	lr, [sp], #4
 80096a0:	b003      	add	sp, #12
 80096a2:	4770      	bx	lr
 80096a4:	200000cc 	.word	0x200000cc
 80096a8:	ffff0208 	.word	0xffff0208

080096ac <memset>:
 80096ac:	4603      	mov	r3, r0
 80096ae:	4402      	add	r2, r0
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d100      	bne.n	80096b6 <memset+0xa>
 80096b4:	4770      	bx	lr
 80096b6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ba:	e7f9      	b.n	80096b0 <memset+0x4>

080096bc <__errno>:
 80096bc:	4b01      	ldr	r3, [pc, #4]	; (80096c4 <__errno+0x8>)
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	200000cc 	.word	0x200000cc

080096c8 <__libc_init_array>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	2600      	movs	r6, #0
 80096cc:	4d0c      	ldr	r5, [pc, #48]	; (8009700 <__libc_init_array+0x38>)
 80096ce:	4c0d      	ldr	r4, [pc, #52]	; (8009704 <__libc_init_array+0x3c>)
 80096d0:	1b64      	subs	r4, r4, r5
 80096d2:	10a4      	asrs	r4, r4, #2
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	d109      	bne.n	80096ec <__libc_init_array+0x24>
 80096d8:	f000 fc7a 	bl	8009fd0 <_init>
 80096dc:	2600      	movs	r6, #0
 80096de:	4d0a      	ldr	r5, [pc, #40]	; (8009708 <__libc_init_array+0x40>)
 80096e0:	4c0a      	ldr	r4, [pc, #40]	; (800970c <__libc_init_array+0x44>)
 80096e2:	1b64      	subs	r4, r4, r5
 80096e4:	10a4      	asrs	r4, r4, #2
 80096e6:	42a6      	cmp	r6, r4
 80096e8:	d105      	bne.n	80096f6 <__libc_init_array+0x2e>
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f0:	4798      	blx	r3
 80096f2:	3601      	adds	r6, #1
 80096f4:	e7ee      	b.n	80096d4 <__libc_init_array+0xc>
 80096f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fa:	4798      	blx	r3
 80096fc:	3601      	adds	r6, #1
 80096fe:	e7f2      	b.n	80096e6 <__libc_init_array+0x1e>
 8009700:	0800b89c 	.word	0x0800b89c
 8009704:	0800b89c 	.word	0x0800b89c
 8009708:	0800b89c 	.word	0x0800b89c
 800970c:	0800b8a0 	.word	0x0800b8a0

08009710 <__retarget_lock_acquire_recursive>:
 8009710:	4770      	bx	lr

08009712 <__retarget_lock_release_recursive>:
 8009712:	4770      	bx	lr

08009714 <memcpy>:
 8009714:	440a      	add	r2, r1
 8009716:	4291      	cmp	r1, r2
 8009718:	f100 33ff 	add.w	r3, r0, #4294967295
 800971c:	d100      	bne.n	8009720 <memcpy+0xc>
 800971e:	4770      	bx	lr
 8009720:	b510      	push	{r4, lr}
 8009722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009726:	4291      	cmp	r1, r2
 8009728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800972c:	d1f9      	bne.n	8009722 <memcpy+0xe>
 800972e:	bd10      	pop	{r4, pc}

08009730 <_free_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4605      	mov	r5, r0
 8009734:	2900      	cmp	r1, #0
 8009736:	d040      	beq.n	80097ba <_free_r+0x8a>
 8009738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800973c:	1f0c      	subs	r4, r1, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	bfb8      	it	lt
 8009742:	18e4      	addlt	r4, r4, r3
 8009744:	f000 f8dc 	bl	8009900 <__malloc_lock>
 8009748:	4a1c      	ldr	r2, [pc, #112]	; (80097bc <_free_r+0x8c>)
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	b933      	cbnz	r3, 800975c <_free_r+0x2c>
 800974e:	6063      	str	r3, [r4, #4]
 8009750:	6014      	str	r4, [r2, #0]
 8009752:	4628      	mov	r0, r5
 8009754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009758:	f000 b8d8 	b.w	800990c <__malloc_unlock>
 800975c:	42a3      	cmp	r3, r4
 800975e:	d908      	bls.n	8009772 <_free_r+0x42>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	1821      	adds	r1, r4, r0
 8009764:	428b      	cmp	r3, r1
 8009766:	bf01      	itttt	eq
 8009768:	6819      	ldreq	r1, [r3, #0]
 800976a:	685b      	ldreq	r3, [r3, #4]
 800976c:	1809      	addeq	r1, r1, r0
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	e7ed      	b.n	800974e <_free_r+0x1e>
 8009772:	461a      	mov	r2, r3
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	b10b      	cbz	r3, 800977c <_free_r+0x4c>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d9fa      	bls.n	8009772 <_free_r+0x42>
 800977c:	6811      	ldr	r1, [r2, #0]
 800977e:	1850      	adds	r0, r2, r1
 8009780:	42a0      	cmp	r0, r4
 8009782:	d10b      	bne.n	800979c <_free_r+0x6c>
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	4401      	add	r1, r0
 8009788:	1850      	adds	r0, r2, r1
 800978a:	4283      	cmp	r3, r0
 800978c:	6011      	str	r1, [r2, #0]
 800978e:	d1e0      	bne.n	8009752 <_free_r+0x22>
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	4408      	add	r0, r1
 8009796:	6010      	str	r0, [r2, #0]
 8009798:	6053      	str	r3, [r2, #4]
 800979a:	e7da      	b.n	8009752 <_free_r+0x22>
 800979c:	d902      	bls.n	80097a4 <_free_r+0x74>
 800979e:	230c      	movs	r3, #12
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	e7d6      	b.n	8009752 <_free_r+0x22>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	1821      	adds	r1, r4, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf01      	itttt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	1809      	addeq	r1, r1, r0
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	6063      	str	r3, [r4, #4]
 80097b6:	6054      	str	r4, [r2, #4]
 80097b8:	e7cb      	b.n	8009752 <_free_r+0x22>
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	200019d0 	.word	0x200019d0

080097c0 <sbrk_aligned>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4e0e      	ldr	r6, [pc, #56]	; (80097fc <sbrk_aligned+0x3c>)
 80097c4:	460c      	mov	r4, r1
 80097c6:	6831      	ldr	r1, [r6, #0]
 80097c8:	4605      	mov	r5, r0
 80097ca:	b911      	cbnz	r1, 80097d2 <sbrk_aligned+0x12>
 80097cc:	f000 fbaa 	bl	8009f24 <_sbrk_r>
 80097d0:	6030      	str	r0, [r6, #0]
 80097d2:	4621      	mov	r1, r4
 80097d4:	4628      	mov	r0, r5
 80097d6:	f000 fba5 	bl	8009f24 <_sbrk_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	d00a      	beq.n	80097f4 <sbrk_aligned+0x34>
 80097de:	1cc4      	adds	r4, r0, #3
 80097e0:	f024 0403 	bic.w	r4, r4, #3
 80097e4:	42a0      	cmp	r0, r4
 80097e6:	d007      	beq.n	80097f8 <sbrk_aligned+0x38>
 80097e8:	1a21      	subs	r1, r4, r0
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 fb9a 	bl	8009f24 <_sbrk_r>
 80097f0:	3001      	adds	r0, #1
 80097f2:	d101      	bne.n	80097f8 <sbrk_aligned+0x38>
 80097f4:	f04f 34ff 	mov.w	r4, #4294967295
 80097f8:	4620      	mov	r0, r4
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	200019d4 	.word	0x200019d4

08009800 <_malloc_r>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	1ccd      	adds	r5, r1, #3
 8009806:	f025 0503 	bic.w	r5, r5, #3
 800980a:	3508      	adds	r5, #8
 800980c:	2d0c      	cmp	r5, #12
 800980e:	bf38      	it	cc
 8009810:	250c      	movcc	r5, #12
 8009812:	2d00      	cmp	r5, #0
 8009814:	4607      	mov	r7, r0
 8009816:	db01      	blt.n	800981c <_malloc_r+0x1c>
 8009818:	42a9      	cmp	r1, r5
 800981a:	d905      	bls.n	8009828 <_malloc_r+0x28>
 800981c:	230c      	movs	r3, #12
 800981e:	2600      	movs	r6, #0
 8009820:	603b      	str	r3, [r7, #0]
 8009822:	4630      	mov	r0, r6
 8009824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098fc <_malloc_r+0xfc>
 800982c:	f000 f868 	bl	8009900 <__malloc_lock>
 8009830:	f8d8 3000 	ldr.w	r3, [r8]
 8009834:	461c      	mov	r4, r3
 8009836:	bb5c      	cbnz	r4, 8009890 <_malloc_r+0x90>
 8009838:	4629      	mov	r1, r5
 800983a:	4638      	mov	r0, r7
 800983c:	f7ff ffc0 	bl	80097c0 <sbrk_aligned>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	4604      	mov	r4, r0
 8009844:	d155      	bne.n	80098f2 <_malloc_r+0xf2>
 8009846:	f8d8 4000 	ldr.w	r4, [r8]
 800984a:	4626      	mov	r6, r4
 800984c:	2e00      	cmp	r6, #0
 800984e:	d145      	bne.n	80098dc <_malloc_r+0xdc>
 8009850:	2c00      	cmp	r4, #0
 8009852:	d048      	beq.n	80098e6 <_malloc_r+0xe6>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	4631      	mov	r1, r6
 8009858:	4638      	mov	r0, r7
 800985a:	eb04 0903 	add.w	r9, r4, r3
 800985e:	f000 fb61 	bl	8009f24 <_sbrk_r>
 8009862:	4581      	cmp	r9, r0
 8009864:	d13f      	bne.n	80098e6 <_malloc_r+0xe6>
 8009866:	6821      	ldr	r1, [r4, #0]
 8009868:	4638      	mov	r0, r7
 800986a:	1a6d      	subs	r5, r5, r1
 800986c:	4629      	mov	r1, r5
 800986e:	f7ff ffa7 	bl	80097c0 <sbrk_aligned>
 8009872:	3001      	adds	r0, #1
 8009874:	d037      	beq.n	80098e6 <_malloc_r+0xe6>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	442b      	add	r3, r5
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	f8d8 3000 	ldr.w	r3, [r8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d038      	beq.n	80098f6 <_malloc_r+0xf6>
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	42a2      	cmp	r2, r4
 8009888:	d12b      	bne.n	80098e2 <_malloc_r+0xe2>
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	e00f      	b.n	80098b0 <_malloc_r+0xb0>
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	1b52      	subs	r2, r2, r5
 8009894:	d41f      	bmi.n	80098d6 <_malloc_r+0xd6>
 8009896:	2a0b      	cmp	r2, #11
 8009898:	d917      	bls.n	80098ca <_malloc_r+0xca>
 800989a:	1961      	adds	r1, r4, r5
 800989c:	42a3      	cmp	r3, r4
 800989e:	6025      	str	r5, [r4, #0]
 80098a0:	bf18      	it	ne
 80098a2:	6059      	strne	r1, [r3, #4]
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	bf08      	it	eq
 80098a8:	f8c8 1000 	streq.w	r1, [r8]
 80098ac:	5162      	str	r2, [r4, r5]
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	4638      	mov	r0, r7
 80098b2:	f104 060b 	add.w	r6, r4, #11
 80098b6:	f000 f829 	bl	800990c <__malloc_unlock>
 80098ba:	f026 0607 	bic.w	r6, r6, #7
 80098be:	1d23      	adds	r3, r4, #4
 80098c0:	1af2      	subs	r2, r6, r3
 80098c2:	d0ae      	beq.n	8009822 <_malloc_r+0x22>
 80098c4:	1b9b      	subs	r3, r3, r6
 80098c6:	50a3      	str	r3, [r4, r2]
 80098c8:	e7ab      	b.n	8009822 <_malloc_r+0x22>
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	6862      	ldr	r2, [r4, #4]
 80098ce:	d1dd      	bne.n	800988c <_malloc_r+0x8c>
 80098d0:	f8c8 2000 	str.w	r2, [r8]
 80098d4:	e7ec      	b.n	80098b0 <_malloc_r+0xb0>
 80098d6:	4623      	mov	r3, r4
 80098d8:	6864      	ldr	r4, [r4, #4]
 80098da:	e7ac      	b.n	8009836 <_malloc_r+0x36>
 80098dc:	4634      	mov	r4, r6
 80098de:	6876      	ldr	r6, [r6, #4]
 80098e0:	e7b4      	b.n	800984c <_malloc_r+0x4c>
 80098e2:	4613      	mov	r3, r2
 80098e4:	e7cc      	b.n	8009880 <_malloc_r+0x80>
 80098e6:	230c      	movs	r3, #12
 80098e8:	4638      	mov	r0, r7
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f000 f80e 	bl	800990c <__malloc_unlock>
 80098f0:	e797      	b.n	8009822 <_malloc_r+0x22>
 80098f2:	6025      	str	r5, [r4, #0]
 80098f4:	e7dc      	b.n	80098b0 <_malloc_r+0xb0>
 80098f6:	605b      	str	r3, [r3, #4]
 80098f8:	deff      	udf	#255	; 0xff
 80098fa:	bf00      	nop
 80098fc:	200019d0 	.word	0x200019d0

08009900 <__malloc_lock>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__malloc_lock+0x8>)
 8009902:	f7ff bf05 	b.w	8009710 <__retarget_lock_acquire_recursive>
 8009906:	bf00      	nop
 8009908:	200019cc 	.word	0x200019cc

0800990c <__malloc_unlock>:
 800990c:	4801      	ldr	r0, [pc, #4]	; (8009914 <__malloc_unlock+0x8>)
 800990e:	f7ff bf00 	b.w	8009712 <__retarget_lock_release_recursive>
 8009912:	bf00      	nop
 8009914:	200019cc 	.word	0x200019cc

08009918 <__ssputs_r>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	461f      	mov	r7, r3
 800991e:	688e      	ldr	r6, [r1, #8]
 8009920:	4682      	mov	sl, r0
 8009922:	42be      	cmp	r6, r7
 8009924:	460c      	mov	r4, r1
 8009926:	4690      	mov	r8, r2
 8009928:	680b      	ldr	r3, [r1, #0]
 800992a:	d82c      	bhi.n	8009986 <__ssputs_r+0x6e>
 800992c:	898a      	ldrh	r2, [r1, #12]
 800992e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009932:	d026      	beq.n	8009982 <__ssputs_r+0x6a>
 8009934:	6965      	ldr	r5, [r4, #20]
 8009936:	6909      	ldr	r1, [r1, #16]
 8009938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800993c:	eba3 0901 	sub.w	r9, r3, r1
 8009940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009944:	1c7b      	adds	r3, r7, #1
 8009946:	444b      	add	r3, r9
 8009948:	106d      	asrs	r5, r5, #1
 800994a:	429d      	cmp	r5, r3
 800994c:	bf38      	it	cc
 800994e:	461d      	movcc	r5, r3
 8009950:	0553      	lsls	r3, r2, #21
 8009952:	d527      	bpl.n	80099a4 <__ssputs_r+0x8c>
 8009954:	4629      	mov	r1, r5
 8009956:	f7ff ff53 	bl	8009800 <_malloc_r>
 800995a:	4606      	mov	r6, r0
 800995c:	b360      	cbz	r0, 80099b8 <__ssputs_r+0xa0>
 800995e:	464a      	mov	r2, r9
 8009960:	6921      	ldr	r1, [r4, #16]
 8009962:	f7ff fed7 	bl	8009714 <memcpy>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800996c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	6126      	str	r6, [r4, #16]
 8009974:	444e      	add	r6, r9
 8009976:	6026      	str	r6, [r4, #0]
 8009978:	463e      	mov	r6, r7
 800997a:	6165      	str	r5, [r4, #20]
 800997c:	eba5 0509 	sub.w	r5, r5, r9
 8009980:	60a5      	str	r5, [r4, #8]
 8009982:	42be      	cmp	r6, r7
 8009984:	d900      	bls.n	8009988 <__ssputs_r+0x70>
 8009986:	463e      	mov	r6, r7
 8009988:	4632      	mov	r2, r6
 800998a:	4641      	mov	r1, r8
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	f000 faaf 	bl	8009ef0 <memmove>
 8009992:	2000      	movs	r0, #0
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	1b9b      	subs	r3, r3, r6
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	4433      	add	r3, r6
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a4:	462a      	mov	r2, r5
 80099a6:	f000 fadb 	bl	8009f60 <_realloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d1e0      	bne.n	8009972 <__ssputs_r+0x5a>
 80099b0:	4650      	mov	r0, sl
 80099b2:	6921      	ldr	r1, [r4, #16]
 80099b4:	f7ff febc 	bl	8009730 <_free_r>
 80099b8:	230c      	movs	r3, #12
 80099ba:	f8ca 3000 	str.w	r3, [sl]
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	e7e9      	b.n	80099a0 <__ssputs_r+0x88>

080099cc <_svfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	4698      	mov	r8, r3
 80099d2:	898b      	ldrh	r3, [r1, #12]
 80099d4:	4607      	mov	r7, r0
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	460d      	mov	r5, r1
 80099da:	4614      	mov	r4, r2
 80099dc:	b09d      	sub	sp, #116	; 0x74
 80099de:	d50e      	bpl.n	80099fe <_svfiprintf_r+0x32>
 80099e0:	690b      	ldr	r3, [r1, #16]
 80099e2:	b963      	cbnz	r3, 80099fe <_svfiprintf_r+0x32>
 80099e4:	2140      	movs	r1, #64	; 0x40
 80099e6:	f7ff ff0b 	bl	8009800 <_malloc_r>
 80099ea:	6028      	str	r0, [r5, #0]
 80099ec:	6128      	str	r0, [r5, #16]
 80099ee:	b920      	cbnz	r0, 80099fa <_svfiprintf_r+0x2e>
 80099f0:	230c      	movs	r3, #12
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e0d0      	b.n	8009b9c <_svfiprintf_r+0x1d0>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	616b      	str	r3, [r5, #20]
 80099fe:	2300      	movs	r3, #0
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
 8009a02:	2320      	movs	r3, #32
 8009a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a08:	2330      	movs	r3, #48	; 0x30
 8009a0a:	f04f 0901 	mov.w	r9, #1
 8009a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009bb4 <_svfiprintf_r+0x1e8>
 8009a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	469a      	mov	sl, r3
 8009a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a22:	b10a      	cbz	r2, 8009a28 <_svfiprintf_r+0x5c>
 8009a24:	2a25      	cmp	r2, #37	; 0x25
 8009a26:	d1f9      	bne.n	8009a1c <_svfiprintf_r+0x50>
 8009a28:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2c:	d00b      	beq.n	8009a46 <_svfiprintf_r+0x7a>
 8009a2e:	465b      	mov	r3, fp
 8009a30:	4622      	mov	r2, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7ff ff6f 	bl	8009918 <__ssputs_r>
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f000 80a9 	beq.w	8009b92 <_svfiprintf_r+0x1c6>
 8009a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a42:	445a      	add	r2, fp
 8009a44:	9209      	str	r2, [sp, #36]	; 0x24
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80a1 	beq.w	8009b92 <_svfiprintf_r+0x1c6>
 8009a50:	2300      	movs	r3, #0
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5a:	f10a 0a01 	add.w	sl, sl, #1
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a66:	931a      	str	r3, [sp, #104]	; 0x68
 8009a68:	4654      	mov	r4, sl
 8009a6a:	2205      	movs	r2, #5
 8009a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a70:	4850      	ldr	r0, [pc, #320]	; (8009bb4 <_svfiprintf_r+0x1e8>)
 8009a72:	f000 fa67 	bl	8009f44 <memchr>
 8009a76:	9a04      	ldr	r2, [sp, #16]
 8009a78:	b9d8      	cbnz	r0, 8009ab2 <_svfiprintf_r+0xe6>
 8009a7a:	06d0      	lsls	r0, r2, #27
 8009a7c:	bf44      	itt	mi
 8009a7e:	2320      	movmi	r3, #32
 8009a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a84:	0711      	lsls	r1, r2, #28
 8009a86:	bf44      	itt	mi
 8009a88:	232b      	movmi	r3, #43	; 0x2b
 8009a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a92:	2b2a      	cmp	r3, #42	; 0x2a
 8009a94:	d015      	beq.n	8009ac2 <_svfiprintf_r+0xf6>
 8009a96:	4654      	mov	r4, sl
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f04f 0c0a 	mov.w	ip, #10
 8009a9e:	9a07      	ldr	r2, [sp, #28]
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa6:	3b30      	subs	r3, #48	; 0x30
 8009aa8:	2b09      	cmp	r3, #9
 8009aaa:	d94d      	bls.n	8009b48 <_svfiprintf_r+0x17c>
 8009aac:	b1b0      	cbz	r0, 8009adc <_svfiprintf_r+0x110>
 8009aae:	9207      	str	r2, [sp, #28]
 8009ab0:	e014      	b.n	8009adc <_svfiprintf_r+0x110>
 8009ab2:	eba0 0308 	sub.w	r3, r0, r8
 8009ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aba:	4313      	orrs	r3, r2
 8009abc:	46a2      	mov	sl, r4
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	e7d2      	b.n	8009a68 <_svfiprintf_r+0x9c>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	1d19      	adds	r1, r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	9103      	str	r1, [sp, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfbb      	ittet	lt
 8009ace:	425b      	neglt	r3, r3
 8009ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad4:	9307      	strge	r3, [sp, #28]
 8009ad6:	9307      	strlt	r3, [sp, #28]
 8009ad8:	bfb8      	it	lt
 8009ada:	9204      	strlt	r2, [sp, #16]
 8009adc:	7823      	ldrb	r3, [r4, #0]
 8009ade:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae0:	d10c      	bne.n	8009afc <_svfiprintf_r+0x130>
 8009ae2:	7863      	ldrb	r3, [r4, #1]
 8009ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae6:	d134      	bne.n	8009b52 <_svfiprintf_r+0x186>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	3402      	adds	r4, #2
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	9203      	str	r2, [sp, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bfb8      	it	lt
 8009af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009bb8 <_svfiprintf_r+0x1ec>
 8009b00:	2203      	movs	r2, #3
 8009b02:	4650      	mov	r0, sl
 8009b04:	7821      	ldrb	r1, [r4, #0]
 8009b06:	f000 fa1d 	bl	8009f44 <memchr>
 8009b0a:	b138      	cbz	r0, 8009b1c <_svfiprintf_r+0x150>
 8009b0c:	2240      	movs	r2, #64	; 0x40
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	eba0 000a 	sub.w	r0, r0, sl
 8009b14:	4082      	lsls	r2, r0
 8009b16:	4313      	orrs	r3, r2
 8009b18:	3401      	adds	r4, #1
 8009b1a:	9304      	str	r3, [sp, #16]
 8009b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b20:	2206      	movs	r2, #6
 8009b22:	4826      	ldr	r0, [pc, #152]	; (8009bbc <_svfiprintf_r+0x1f0>)
 8009b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b28:	f000 fa0c 	bl	8009f44 <memchr>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d038      	beq.n	8009ba2 <_svfiprintf_r+0x1d6>
 8009b30:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <_svfiprintf_r+0x1f4>)
 8009b32:	bb1b      	cbnz	r3, 8009b7c <_svfiprintf_r+0x1b0>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	3307      	adds	r3, #7
 8009b38:	f023 0307 	bic.w	r3, r3, #7
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	4433      	add	r3, r6
 8009b44:	9309      	str	r3, [sp, #36]	; 0x24
 8009b46:	e768      	b.n	8009a1a <_svfiprintf_r+0x4e>
 8009b48:	460c      	mov	r4, r1
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b50:	e7a6      	b.n	8009aa0 <_svfiprintf_r+0xd4>
 8009b52:	2300      	movs	r3, #0
 8009b54:	f04f 0c0a 	mov.w	ip, #10
 8009b58:	4619      	mov	r1, r3
 8009b5a:	3401      	adds	r4, #1
 8009b5c:	9305      	str	r3, [sp, #20]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b64:	3a30      	subs	r2, #48	; 0x30
 8009b66:	2a09      	cmp	r2, #9
 8009b68:	d903      	bls.n	8009b72 <_svfiprintf_r+0x1a6>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0c6      	beq.n	8009afc <_svfiprintf_r+0x130>
 8009b6e:	9105      	str	r1, [sp, #20]
 8009b70:	e7c4      	b.n	8009afc <_svfiprintf_r+0x130>
 8009b72:	4604      	mov	r4, r0
 8009b74:	2301      	movs	r3, #1
 8009b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b7a:	e7f0      	b.n	8009b5e <_svfiprintf_r+0x192>
 8009b7c:	ab03      	add	r3, sp, #12
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	462a      	mov	r2, r5
 8009b82:	4638      	mov	r0, r7
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <_svfiprintf_r+0x1f8>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	f3af 8000 	nop.w
 8009b8c:	1c42      	adds	r2, r0, #1
 8009b8e:	4606      	mov	r6, r0
 8009b90:	d1d6      	bne.n	8009b40 <_svfiprintf_r+0x174>
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	065b      	lsls	r3, r3, #25
 8009b96:	f53f af2d 	bmi.w	80099f4 <_svfiprintf_r+0x28>
 8009b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b9c:	b01d      	add	sp, #116	; 0x74
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	ab03      	add	r3, sp, #12
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	4638      	mov	r0, r7
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <_svfiprintf_r+0x1f8>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	f000 f87d 	bl	8009cac <_printf_i>
 8009bb2:	e7eb      	b.n	8009b8c <_svfiprintf_r+0x1c0>
 8009bb4:	0800b85e 	.word	0x0800b85e
 8009bb8:	0800b864 	.word	0x0800b864
 8009bbc:	0800b868 	.word	0x0800b868
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	08009919 	.word	0x08009919

08009bc8 <_printf_common>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	4616      	mov	r6, r2
 8009bce:	4699      	mov	r9, r3
 8009bd0:	688a      	ldr	r2, [r1, #8]
 8009bd2:	690b      	ldr	r3, [r1, #16]
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bfb8      	it	lt
 8009bda:	4613      	movlt	r3, r2
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009be2:	460c      	mov	r4, r1
 8009be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be8:	b10a      	cbz	r2, 8009bee <_printf_common+0x26>
 8009bea:	3301      	adds	r3, #1
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	0699      	lsls	r1, r3, #26
 8009bf2:	bf42      	ittt	mi
 8009bf4:	6833      	ldrmi	r3, [r6, #0]
 8009bf6:	3302      	addmi	r3, #2
 8009bf8:	6033      	strmi	r3, [r6, #0]
 8009bfa:	6825      	ldr	r5, [r4, #0]
 8009bfc:	f015 0506 	ands.w	r5, r5, #6
 8009c00:	d106      	bne.n	8009c10 <_printf_common+0x48>
 8009c02:	f104 0a19 	add.w	sl, r4, #25
 8009c06:	68e3      	ldr	r3, [r4, #12]
 8009c08:	6832      	ldr	r2, [r6, #0]
 8009c0a:	1a9b      	subs	r3, r3, r2
 8009c0c:	42ab      	cmp	r3, r5
 8009c0e:	dc2b      	bgt.n	8009c68 <_printf_common+0xa0>
 8009c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c14:	1e13      	subs	r3, r2, #0
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	2301      	movne	r3, #1
 8009c1c:	0692      	lsls	r2, r2, #26
 8009c1e:	d430      	bmi.n	8009c82 <_printf_common+0xba>
 8009c20:	4649      	mov	r1, r9
 8009c22:	4638      	mov	r0, r7
 8009c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c28:	47c0      	blx	r8
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d023      	beq.n	8009c76 <_printf_common+0xae>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	6922      	ldr	r2, [r4, #16]
 8009c32:	f003 0306 	and.w	r3, r3, #6
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	bf14      	ite	ne
 8009c3a:	2500      	movne	r5, #0
 8009c3c:	6833      	ldreq	r3, [r6, #0]
 8009c3e:	f04f 0600 	mov.w	r6, #0
 8009c42:	bf08      	it	eq
 8009c44:	68e5      	ldreq	r5, [r4, #12]
 8009c46:	f104 041a 	add.w	r4, r4, #26
 8009c4a:	bf08      	it	eq
 8009c4c:	1aed      	subeq	r5, r5, r3
 8009c4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c52:	bf08      	it	eq
 8009c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bfc4      	itt	gt
 8009c5c:	1a9b      	subgt	r3, r3, r2
 8009c5e:	18ed      	addgt	r5, r5, r3
 8009c60:	42b5      	cmp	r5, r6
 8009c62:	d11a      	bne.n	8009c9a <_printf_common+0xd2>
 8009c64:	2000      	movs	r0, #0
 8009c66:	e008      	b.n	8009c7a <_printf_common+0xb2>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c0      	blx	r8
 8009c72:	3001      	adds	r0, #1
 8009c74:	d103      	bne.n	8009c7e <_printf_common+0xb6>
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	3501      	adds	r5, #1
 8009c80:	e7c1      	b.n	8009c06 <_printf_common+0x3e>
 8009c82:	2030      	movs	r0, #48	; 0x30
 8009c84:	18e1      	adds	r1, r4, r3
 8009c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c90:	4422      	add	r2, r4
 8009c92:	3302      	adds	r3, #2
 8009c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c98:	e7c2      	b.n	8009c20 <_printf_common+0x58>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	47c0      	blx	r8
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d0e6      	beq.n	8009c76 <_printf_common+0xae>
 8009ca8:	3601      	adds	r6, #1
 8009caa:	e7d9      	b.n	8009c60 <_printf_common+0x98>

08009cac <_printf_i>:
 8009cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	7e0f      	ldrb	r7, [r1, #24]
 8009cb2:	4691      	mov	r9, r2
 8009cb4:	2f78      	cmp	r7, #120	; 0x78
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	469a      	mov	sl, r3
 8009cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cc2:	d807      	bhi.n	8009cd4 <_printf_i+0x28>
 8009cc4:	2f62      	cmp	r7, #98	; 0x62
 8009cc6:	d80a      	bhi.n	8009cde <_printf_i+0x32>
 8009cc8:	2f00      	cmp	r7, #0
 8009cca:	f000 80d5 	beq.w	8009e78 <_printf_i+0x1cc>
 8009cce:	2f58      	cmp	r7, #88	; 0x58
 8009cd0:	f000 80c1 	beq.w	8009e56 <_printf_i+0x1aa>
 8009cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cdc:	e03a      	b.n	8009d54 <_printf_i+0xa8>
 8009cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ce2:	2b15      	cmp	r3, #21
 8009ce4:	d8f6      	bhi.n	8009cd4 <_printf_i+0x28>
 8009ce6:	a101      	add	r1, pc, #4	; (adr r1, 8009cec <_printf_i+0x40>)
 8009ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cec:	08009d45 	.word	0x08009d45
 8009cf0:	08009d59 	.word	0x08009d59
 8009cf4:	08009cd5 	.word	0x08009cd5
 8009cf8:	08009cd5 	.word	0x08009cd5
 8009cfc:	08009cd5 	.word	0x08009cd5
 8009d00:	08009cd5 	.word	0x08009cd5
 8009d04:	08009d59 	.word	0x08009d59
 8009d08:	08009cd5 	.word	0x08009cd5
 8009d0c:	08009cd5 	.word	0x08009cd5
 8009d10:	08009cd5 	.word	0x08009cd5
 8009d14:	08009cd5 	.word	0x08009cd5
 8009d18:	08009e5f 	.word	0x08009e5f
 8009d1c:	08009d85 	.word	0x08009d85
 8009d20:	08009e19 	.word	0x08009e19
 8009d24:	08009cd5 	.word	0x08009cd5
 8009d28:	08009cd5 	.word	0x08009cd5
 8009d2c:	08009e81 	.word	0x08009e81
 8009d30:	08009cd5 	.word	0x08009cd5
 8009d34:	08009d85 	.word	0x08009d85
 8009d38:	08009cd5 	.word	0x08009cd5
 8009d3c:	08009cd5 	.word	0x08009cd5
 8009d40:	08009e21 	.word	0x08009e21
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	1d1a      	adds	r2, r3, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	602a      	str	r2, [r5, #0]
 8009d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d54:	2301      	movs	r3, #1
 8009d56:	e0a0      	b.n	8009e9a <_printf_i+0x1ee>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	0607      	lsls	r7, r0, #24
 8009d5e:	f103 0104 	add.w	r1, r3, #4
 8009d62:	6029      	str	r1, [r5, #0]
 8009d64:	d501      	bpl.n	8009d6a <_printf_i+0xbe>
 8009d66:	681e      	ldr	r6, [r3, #0]
 8009d68:	e003      	b.n	8009d72 <_printf_i+0xc6>
 8009d6a:	0646      	lsls	r6, r0, #25
 8009d6c:	d5fb      	bpl.n	8009d66 <_printf_i+0xba>
 8009d6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	da03      	bge.n	8009d7e <_printf_i+0xd2>
 8009d76:	232d      	movs	r3, #45	; 0x2d
 8009d78:	4276      	negs	r6, r6
 8009d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7e:	230a      	movs	r3, #10
 8009d80:	4859      	ldr	r0, [pc, #356]	; (8009ee8 <_printf_i+0x23c>)
 8009d82:	e012      	b.n	8009daa <_printf_i+0xfe>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	6820      	ldr	r0, [r4, #0]
 8009d88:	1d19      	adds	r1, r3, #4
 8009d8a:	6029      	str	r1, [r5, #0]
 8009d8c:	0605      	lsls	r5, r0, #24
 8009d8e:	d501      	bpl.n	8009d94 <_printf_i+0xe8>
 8009d90:	681e      	ldr	r6, [r3, #0]
 8009d92:	e002      	b.n	8009d9a <_printf_i+0xee>
 8009d94:	0641      	lsls	r1, r0, #25
 8009d96:	d5fb      	bpl.n	8009d90 <_printf_i+0xe4>
 8009d98:	881e      	ldrh	r6, [r3, #0]
 8009d9a:	2f6f      	cmp	r7, #111	; 0x6f
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2308      	moveq	r3, #8
 8009da0:	230a      	movne	r3, #10
 8009da2:	4851      	ldr	r0, [pc, #324]	; (8009ee8 <_printf_i+0x23c>)
 8009da4:	2100      	movs	r1, #0
 8009da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009daa:	6865      	ldr	r5, [r4, #4]
 8009dac:	2d00      	cmp	r5, #0
 8009dae:	bfa8      	it	ge
 8009db0:	6821      	ldrge	r1, [r4, #0]
 8009db2:	60a5      	str	r5, [r4, #8]
 8009db4:	bfa4      	itt	ge
 8009db6:	f021 0104 	bicge.w	r1, r1, #4
 8009dba:	6021      	strge	r1, [r4, #0]
 8009dbc:	b90e      	cbnz	r6, 8009dc2 <_printf_i+0x116>
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	d04b      	beq.n	8009e5a <_printf_i+0x1ae>
 8009dc2:	4615      	mov	r5, r2
 8009dc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dc8:	fb03 6711 	mls	r7, r3, r1, r6
 8009dcc:	5dc7      	ldrb	r7, [r0, r7]
 8009dce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dd2:	4637      	mov	r7, r6
 8009dd4:	42bb      	cmp	r3, r7
 8009dd6:	460e      	mov	r6, r1
 8009dd8:	d9f4      	bls.n	8009dc4 <_printf_i+0x118>
 8009dda:	2b08      	cmp	r3, #8
 8009ddc:	d10b      	bne.n	8009df6 <_printf_i+0x14a>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	07de      	lsls	r6, r3, #31
 8009de2:	d508      	bpl.n	8009df6 <_printf_i+0x14a>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	6861      	ldr	r1, [r4, #4]
 8009de8:	4299      	cmp	r1, r3
 8009dea:	bfde      	ittt	le
 8009dec:	2330      	movle	r3, #48	; 0x30
 8009dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009df6:	1b52      	subs	r2, r2, r5
 8009df8:	6122      	str	r2, [r4, #16]
 8009dfa:	464b      	mov	r3, r9
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	4640      	mov	r0, r8
 8009e00:	f8cd a000 	str.w	sl, [sp]
 8009e04:	aa03      	add	r2, sp, #12
 8009e06:	f7ff fedf 	bl	8009bc8 <_printf_common>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d14a      	bne.n	8009ea4 <_printf_i+0x1f8>
 8009e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e12:	b004      	add	sp, #16
 8009e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	f043 0320 	orr.w	r3, r3, #32
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	2778      	movs	r7, #120	; 0x78
 8009e22:	4832      	ldr	r0, [pc, #200]	; (8009eec <_printf_i+0x240>)
 8009e24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	6829      	ldr	r1, [r5, #0]
 8009e2c:	061f      	lsls	r7, r3, #24
 8009e2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e32:	d402      	bmi.n	8009e3a <_printf_i+0x18e>
 8009e34:	065f      	lsls	r7, r3, #25
 8009e36:	bf48      	it	mi
 8009e38:	b2b6      	uxthmi	r6, r6
 8009e3a:	07df      	lsls	r7, r3, #31
 8009e3c:	bf48      	it	mi
 8009e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e42:	6029      	str	r1, [r5, #0]
 8009e44:	bf48      	it	mi
 8009e46:	6023      	strmi	r3, [r4, #0]
 8009e48:	b91e      	cbnz	r6, 8009e52 <_printf_i+0x1a6>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	f023 0320 	bic.w	r3, r3, #32
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	2310      	movs	r3, #16
 8009e54:	e7a6      	b.n	8009da4 <_printf_i+0xf8>
 8009e56:	4824      	ldr	r0, [pc, #144]	; (8009ee8 <_printf_i+0x23c>)
 8009e58:	e7e4      	b.n	8009e24 <_printf_i+0x178>
 8009e5a:	4615      	mov	r5, r2
 8009e5c:	e7bd      	b.n	8009dda <_printf_i+0x12e>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	6826      	ldr	r6, [r4, #0]
 8009e62:	1d18      	adds	r0, r3, #4
 8009e64:	6961      	ldr	r1, [r4, #20]
 8009e66:	6028      	str	r0, [r5, #0]
 8009e68:	0635      	lsls	r5, r6, #24
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	d501      	bpl.n	8009e72 <_printf_i+0x1c6>
 8009e6e:	6019      	str	r1, [r3, #0]
 8009e70:	e002      	b.n	8009e78 <_printf_i+0x1cc>
 8009e72:	0670      	lsls	r0, r6, #25
 8009e74:	d5fb      	bpl.n	8009e6e <_printf_i+0x1c2>
 8009e76:	8019      	strh	r1, [r3, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4615      	mov	r5, r2
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	e7bc      	b.n	8009dfa <_printf_i+0x14e>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	2100      	movs	r1, #0
 8009e84:	1d1a      	adds	r2, r3, #4
 8009e86:	602a      	str	r2, [r5, #0]
 8009e88:	681d      	ldr	r5, [r3, #0]
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f859 	bl	8009f44 <memchr>
 8009e92:	b108      	cbz	r0, 8009e98 <_printf_i+0x1ec>
 8009e94:	1b40      	subs	r0, r0, r5
 8009e96:	6060      	str	r0, [r4, #4]
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea2:	e7aa      	b.n	8009dfa <_printf_i+0x14e>
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	47d0      	blx	sl
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d0ad      	beq.n	8009e0e <_printf_i+0x162>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	079b      	lsls	r3, r3, #30
 8009eb6:	d413      	bmi.n	8009ee0 <_printf_i+0x234>
 8009eb8:	68e0      	ldr	r0, [r4, #12]
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	4298      	cmp	r0, r3
 8009ebe:	bfb8      	it	lt
 8009ec0:	4618      	movlt	r0, r3
 8009ec2:	e7a6      	b.n	8009e12 <_printf_i+0x166>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4640      	mov	r0, r8
 8009ecc:	47d0      	blx	sl
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d09d      	beq.n	8009e0e <_printf_i+0x162>
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	68e3      	ldr	r3, [r4, #12]
 8009ed6:	9903      	ldr	r1, [sp, #12]
 8009ed8:	1a5b      	subs	r3, r3, r1
 8009eda:	42ab      	cmp	r3, r5
 8009edc:	dcf2      	bgt.n	8009ec4 <_printf_i+0x218>
 8009ede:	e7eb      	b.n	8009eb8 <_printf_i+0x20c>
 8009ee0:	2500      	movs	r5, #0
 8009ee2:	f104 0619 	add.w	r6, r4, #25
 8009ee6:	e7f5      	b.n	8009ed4 <_printf_i+0x228>
 8009ee8:	0800b86f 	.word	0x0800b86f
 8009eec:	0800b880 	.word	0x0800b880

08009ef0 <memmove>:
 8009ef0:	4288      	cmp	r0, r1
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	eb01 0402 	add.w	r4, r1, r2
 8009ef8:	d902      	bls.n	8009f00 <memmove+0x10>
 8009efa:	4284      	cmp	r4, r0
 8009efc:	4623      	mov	r3, r4
 8009efe:	d807      	bhi.n	8009f10 <memmove+0x20>
 8009f00:	1e43      	subs	r3, r0, #1
 8009f02:	42a1      	cmp	r1, r4
 8009f04:	d008      	beq.n	8009f18 <memmove+0x28>
 8009f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f0e:	e7f8      	b.n	8009f02 <memmove+0x12>
 8009f10:	4601      	mov	r1, r0
 8009f12:	4402      	add	r2, r0
 8009f14:	428a      	cmp	r2, r1
 8009f16:	d100      	bne.n	8009f1a <memmove+0x2a>
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f22:	e7f7      	b.n	8009f14 <memmove+0x24>

08009f24 <_sbrk_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	2300      	movs	r3, #0
 8009f28:	4d05      	ldr	r5, [pc, #20]	; (8009f40 <_sbrk_r+0x1c>)
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f7fb fb6a 	bl	8005608 <_sbrk>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_sbrk_r+0x1a>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_sbrk_r+0x1a>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	200019c8 	.word	0x200019c8

08009f44 <memchr>:
 8009f44:	4603      	mov	r3, r0
 8009f46:	b510      	push	{r4, lr}
 8009f48:	b2c9      	uxtb	r1, r1
 8009f4a:	4402      	add	r2, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	d101      	bne.n	8009f56 <memchr+0x12>
 8009f52:	2000      	movs	r0, #0
 8009f54:	e003      	b.n	8009f5e <memchr+0x1a>
 8009f56:	7804      	ldrb	r4, [r0, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	428c      	cmp	r4, r1
 8009f5c:	d1f6      	bne.n	8009f4c <memchr+0x8>
 8009f5e:	bd10      	pop	{r4, pc}

08009f60 <_realloc_r>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	4680      	mov	r8, r0
 8009f66:	4614      	mov	r4, r2
 8009f68:	460e      	mov	r6, r1
 8009f6a:	b921      	cbnz	r1, 8009f76 <_realloc_r+0x16>
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f72:	f7ff bc45 	b.w	8009800 <_malloc_r>
 8009f76:	b92a      	cbnz	r2, 8009f84 <_realloc_r+0x24>
 8009f78:	f7ff fbda 	bl	8009730 <_free_r>
 8009f7c:	4625      	mov	r5, r4
 8009f7e:	4628      	mov	r0, r5
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f84:	f000 f81b 	bl	8009fbe <_malloc_usable_size_r>
 8009f88:	4284      	cmp	r4, r0
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	d802      	bhi.n	8009f94 <_realloc_r+0x34>
 8009f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f92:	d812      	bhi.n	8009fba <_realloc_r+0x5a>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4640      	mov	r0, r8
 8009f98:	f7ff fc32 	bl	8009800 <_malloc_r>
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0ed      	beq.n	8009f7e <_realloc_r+0x1e>
 8009fa2:	42bc      	cmp	r4, r7
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	bf28      	it	cs
 8009faa:	463a      	movcs	r2, r7
 8009fac:	f7ff fbb2 	bl	8009714 <memcpy>
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fbbc 	bl	8009730 <_free_r>
 8009fb8:	e7e1      	b.n	8009f7e <_realloc_r+0x1e>
 8009fba:	4635      	mov	r5, r6
 8009fbc:	e7df      	b.n	8009f7e <_realloc_r+0x1e>

08009fbe <_malloc_usable_size_r>:
 8009fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc2:	1f18      	subs	r0, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfbc      	itt	lt
 8009fc8:	580b      	ldrlt	r3, [r1, r0]
 8009fca:	18c0      	addlt	r0, r0, r3
 8009fcc:	4770      	bx	lr
	...

08009fd0 <_init>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr

08009fdc <_fini>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr
