
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008764  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  0800d874  0800d874  0000d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efd0  0800efd0  000100a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800efd0  0800efd0  0000efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efd8  0800efd8  000100a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efd8  0800efd8  0000efd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efdc  0800efdc  0000efdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800efe0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  200000a0  0800f080  000100a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  0800f080  00010a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a60  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8e  00000000  00000000  00024b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  000287fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001044  00000000  00000000  00029d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b875  00000000  00000000  0002ad46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a571  00000000  00000000  000465bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096238  00000000  00000000  00060b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063a0  00000000  00000000  000f6d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	200000a0 	.word	0x200000a0
 800512c:	00000000 	.word	0x00000000
 8005130:	0800d85c 	.word	0x0800d85c

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	200000a4 	.word	0x200000a4
 800514c:	0800d85c 	.word	0x0800d85c

08005150 <__aeabi_frsub>:
 8005150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005154:	e002      	b.n	800515c <__addsf3>
 8005156:	bf00      	nop

08005158 <__aeabi_fsub>:
 8005158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800515c <__addsf3>:
 800515c:	0042      	lsls	r2, r0, #1
 800515e:	bf1f      	itttt	ne
 8005160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005164:	ea92 0f03 	teqne	r2, r3
 8005168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800516c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005170:	d06a      	beq.n	8005248 <__addsf3+0xec>
 8005172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800517a:	bfc1      	itttt	gt
 800517c:	18d2      	addgt	r2, r2, r3
 800517e:	4041      	eorgt	r1, r0
 8005180:	4048      	eorgt	r0, r1
 8005182:	4041      	eorgt	r1, r0
 8005184:	bfb8      	it	lt
 8005186:	425b      	neglt	r3, r3
 8005188:	2b19      	cmp	r3, #25
 800518a:	bf88      	it	hi
 800518c:	4770      	bxhi	lr
 800518e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800519a:	bf18      	it	ne
 800519c:	4240      	negne	r0, r0
 800519e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80051a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80051aa:	bf18      	it	ne
 80051ac:	4249      	negne	r1, r1
 80051ae:	ea92 0f03 	teq	r2, r3
 80051b2:	d03f      	beq.n	8005234 <__addsf3+0xd8>
 80051b4:	f1a2 0201 	sub.w	r2, r2, #1
 80051b8:	fa41 fc03 	asr.w	ip, r1, r3
 80051bc:	eb10 000c 	adds.w	r0, r0, ip
 80051c0:	f1c3 0320 	rsb	r3, r3, #32
 80051c4:	fa01 f103 	lsl.w	r1, r1, r3
 80051c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80051cc:	d502      	bpl.n	80051d4 <__addsf3+0x78>
 80051ce:	4249      	negs	r1, r1
 80051d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80051d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80051d8:	d313      	bcc.n	8005202 <__addsf3+0xa6>
 80051da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80051de:	d306      	bcc.n	80051ee <__addsf3+0x92>
 80051e0:	0840      	lsrs	r0, r0, #1
 80051e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80051e6:	f102 0201 	add.w	r2, r2, #1
 80051ea:	2afe      	cmp	r2, #254	; 0xfe
 80051ec:	d251      	bcs.n	8005292 <__addsf3+0x136>
 80051ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80051f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80051f6:	bf08      	it	eq
 80051f8:	f020 0001 	biceq.w	r0, r0, #1
 80051fc:	ea40 0003 	orr.w	r0, r0, r3
 8005200:	4770      	bx	lr
 8005202:	0049      	lsls	r1, r1, #1
 8005204:	eb40 0000 	adc.w	r0, r0, r0
 8005208:	3a01      	subs	r2, #1
 800520a:	bf28      	it	cs
 800520c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8005210:	d2ed      	bcs.n	80051ee <__addsf3+0x92>
 8005212:	fab0 fc80 	clz	ip, r0
 8005216:	f1ac 0c08 	sub.w	ip, ip, #8
 800521a:	ebb2 020c 	subs.w	r2, r2, ip
 800521e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005222:	bfaa      	itet	ge
 8005224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005228:	4252      	neglt	r2, r2
 800522a:	4318      	orrge	r0, r3
 800522c:	bfbc      	itt	lt
 800522e:	40d0      	lsrlt	r0, r2
 8005230:	4318      	orrlt	r0, r3
 8005232:	4770      	bx	lr
 8005234:	f092 0f00 	teq	r2, #0
 8005238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800523c:	bf06      	itte	eq
 800523e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005242:	3201      	addeq	r2, #1
 8005244:	3b01      	subne	r3, #1
 8005246:	e7b5      	b.n	80051b4 <__addsf3+0x58>
 8005248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800524c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005250:	bf18      	it	ne
 8005252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005256:	d021      	beq.n	800529c <__addsf3+0x140>
 8005258:	ea92 0f03 	teq	r2, r3
 800525c:	d004      	beq.n	8005268 <__addsf3+0x10c>
 800525e:	f092 0f00 	teq	r2, #0
 8005262:	bf08      	it	eq
 8005264:	4608      	moveq	r0, r1
 8005266:	4770      	bx	lr
 8005268:	ea90 0f01 	teq	r0, r1
 800526c:	bf1c      	itt	ne
 800526e:	2000      	movne	r0, #0
 8005270:	4770      	bxne	lr
 8005272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8005276:	d104      	bne.n	8005282 <__addsf3+0x126>
 8005278:	0040      	lsls	r0, r0, #1
 800527a:	bf28      	it	cs
 800527c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005280:	4770      	bx	lr
 8005282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8005286:	bf3c      	itt	cc
 8005288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800528c:	4770      	bxcc	lr
 800528e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8005296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800529a:	4770      	bx	lr
 800529c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80052a0:	bf16      	itet	ne
 80052a2:	4608      	movne	r0, r1
 80052a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80052a8:	4601      	movne	r1, r0
 80052aa:	0242      	lsls	r2, r0, #9
 80052ac:	bf06      	itte	eq
 80052ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80052b2:	ea90 0f01 	teqeq	r0, r1
 80052b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80052ba:	4770      	bx	lr

080052bc <__aeabi_ui2f>:
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	e004      	b.n	80052cc <__aeabi_i2f+0x8>
 80052c2:	bf00      	nop

080052c4 <__aeabi_i2f>:
 80052c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80052c8:	bf48      	it	mi
 80052ca:	4240      	negmi	r0, r0
 80052cc:	ea5f 0c00 	movs.w	ip, r0
 80052d0:	bf08      	it	eq
 80052d2:	4770      	bxeq	lr
 80052d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80052d8:	4601      	mov	r1, r0
 80052da:	f04f 0000 	mov.w	r0, #0
 80052de:	e01c      	b.n	800531a <__aeabi_l2f+0x2a>

080052e0 <__aeabi_ul2f>:
 80052e0:	ea50 0201 	orrs.w	r2, r0, r1
 80052e4:	bf08      	it	eq
 80052e6:	4770      	bxeq	lr
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e00a      	b.n	8005304 <__aeabi_l2f+0x14>
 80052ee:	bf00      	nop

080052f0 <__aeabi_l2f>:
 80052f0:	ea50 0201 	orrs.w	r2, r0, r1
 80052f4:	bf08      	it	eq
 80052f6:	4770      	bxeq	lr
 80052f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80052fc:	d502      	bpl.n	8005304 <__aeabi_l2f+0x14>
 80052fe:	4240      	negs	r0, r0
 8005300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005304:	ea5f 0c01 	movs.w	ip, r1
 8005308:	bf02      	ittt	eq
 800530a:	4684      	moveq	ip, r0
 800530c:	4601      	moveq	r1, r0
 800530e:	2000      	moveq	r0, #0
 8005310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005314:	bf08      	it	eq
 8005316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800531a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800531e:	fabc f28c 	clz	r2, ip
 8005322:	3a08      	subs	r2, #8
 8005324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005328:	db10      	blt.n	800534c <__aeabi_l2f+0x5c>
 800532a:	fa01 fc02 	lsl.w	ip, r1, r2
 800532e:	4463      	add	r3, ip
 8005330:	fa00 fc02 	lsl.w	ip, r0, r2
 8005334:	f1c2 0220 	rsb	r2, r2, #32
 8005338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800533c:	fa20 f202 	lsr.w	r2, r0, r2
 8005340:	eb43 0002 	adc.w	r0, r3, r2
 8005344:	bf08      	it	eq
 8005346:	f020 0001 	biceq.w	r0, r0, #1
 800534a:	4770      	bx	lr
 800534c:	f102 0220 	add.w	r2, r2, #32
 8005350:	fa01 fc02 	lsl.w	ip, r1, r2
 8005354:	f1c2 0220 	rsb	r2, r2, #32
 8005358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800535c:	fa21 f202 	lsr.w	r2, r1, r2
 8005360:	eb43 0002 	adc.w	r0, r3, r2
 8005364:	bf08      	it	eq
 8005366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800536a:	4770      	bx	lr

0800536c <__aeabi_fmul>:
 800536c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005374:	bf1e      	ittt	ne
 8005376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800537a:	ea92 0f0c 	teqne	r2, ip
 800537e:	ea93 0f0c 	teqne	r3, ip
 8005382:	d06f      	beq.n	8005464 <__aeabi_fmul+0xf8>
 8005384:	441a      	add	r2, r3
 8005386:	ea80 0c01 	eor.w	ip, r0, r1
 800538a:	0240      	lsls	r0, r0, #9
 800538c:	bf18      	it	ne
 800538e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005392:	d01e      	beq.n	80053d2 <__aeabi_fmul+0x66>
 8005394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800539c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80053a0:	fba0 3101 	umull	r3, r1, r0, r1
 80053a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80053a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80053ac:	bf3e      	ittt	cc
 80053ae:	0049      	lslcc	r1, r1, #1
 80053b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80053b4:	005b      	lslcc	r3, r3, #1
 80053b6:	ea40 0001 	orr.w	r0, r0, r1
 80053ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80053be:	2afd      	cmp	r2, #253	; 0xfd
 80053c0:	d81d      	bhi.n	80053fe <__aeabi_fmul+0x92>
 80053c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80053ca:	bf08      	it	eq
 80053cc:	f020 0001 	biceq.w	r0, r0, #1
 80053d0:	4770      	bx	lr
 80053d2:	f090 0f00 	teq	r0, #0
 80053d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80053da:	bf08      	it	eq
 80053dc:	0249      	lsleq	r1, r1, #9
 80053de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80053e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80053e6:	3a7f      	subs	r2, #127	; 0x7f
 80053e8:	bfc2      	ittt	gt
 80053ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80053ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80053f2:	4770      	bxgt	lr
 80053f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	3a01      	subs	r2, #1
 80053fe:	dc5d      	bgt.n	80054bc <__aeabi_fmul+0x150>
 8005400:	f112 0f19 	cmn.w	r2, #25
 8005404:	bfdc      	itt	le
 8005406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800540a:	4770      	bxle	lr
 800540c:	f1c2 0200 	rsb	r2, r2, #0
 8005410:	0041      	lsls	r1, r0, #1
 8005412:	fa21 f102 	lsr.w	r1, r1, r2
 8005416:	f1c2 0220 	rsb	r2, r2, #32
 800541a:	fa00 fc02 	lsl.w	ip, r0, r2
 800541e:	ea5f 0031 	movs.w	r0, r1, rrx
 8005422:	f140 0000 	adc.w	r0, r0, #0
 8005426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800542a:	bf08      	it	eq
 800542c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005430:	4770      	bx	lr
 8005432:	f092 0f00 	teq	r2, #0
 8005436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800543a:	bf02      	ittt	eq
 800543c:	0040      	lsleq	r0, r0, #1
 800543e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005442:	3a01      	subeq	r2, #1
 8005444:	d0f9      	beq.n	800543a <__aeabi_fmul+0xce>
 8005446:	ea40 000c 	orr.w	r0, r0, ip
 800544a:	f093 0f00 	teq	r3, #0
 800544e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005452:	bf02      	ittt	eq
 8005454:	0049      	lsleq	r1, r1, #1
 8005456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800545a:	3b01      	subeq	r3, #1
 800545c:	d0f9      	beq.n	8005452 <__aeabi_fmul+0xe6>
 800545e:	ea41 010c 	orr.w	r1, r1, ip
 8005462:	e78f      	b.n	8005384 <__aeabi_fmul+0x18>
 8005464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005468:	ea92 0f0c 	teq	r2, ip
 800546c:	bf18      	it	ne
 800546e:	ea93 0f0c 	teqne	r3, ip
 8005472:	d00a      	beq.n	800548a <__aeabi_fmul+0x11e>
 8005474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005478:	bf18      	it	ne
 800547a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800547e:	d1d8      	bne.n	8005432 <__aeabi_fmul+0xc6>
 8005480:	ea80 0001 	eor.w	r0, r0, r1
 8005484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005488:	4770      	bx	lr
 800548a:	f090 0f00 	teq	r0, #0
 800548e:	bf17      	itett	ne
 8005490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005494:	4608      	moveq	r0, r1
 8005496:	f091 0f00 	teqne	r1, #0
 800549a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800549e:	d014      	beq.n	80054ca <__aeabi_fmul+0x15e>
 80054a0:	ea92 0f0c 	teq	r2, ip
 80054a4:	d101      	bne.n	80054aa <__aeabi_fmul+0x13e>
 80054a6:	0242      	lsls	r2, r0, #9
 80054a8:	d10f      	bne.n	80054ca <__aeabi_fmul+0x15e>
 80054aa:	ea93 0f0c 	teq	r3, ip
 80054ae:	d103      	bne.n	80054b8 <__aeabi_fmul+0x14c>
 80054b0:	024b      	lsls	r3, r1, #9
 80054b2:	bf18      	it	ne
 80054b4:	4608      	movne	r0, r1
 80054b6:	d108      	bne.n	80054ca <__aeabi_fmul+0x15e>
 80054b8:	ea80 0001 	eor.w	r0, r0, r1
 80054bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80054c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80054c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80054c8:	4770      	bx	lr
 80054ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80054ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80054d2:	4770      	bx	lr

080054d4 <__aeabi_fdiv>:
 80054d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80054dc:	bf1e      	ittt	ne
 80054de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80054e2:	ea92 0f0c 	teqne	r2, ip
 80054e6:	ea93 0f0c 	teqne	r3, ip
 80054ea:	d069      	beq.n	80055c0 <__aeabi_fdiv+0xec>
 80054ec:	eba2 0203 	sub.w	r2, r2, r3
 80054f0:	ea80 0c01 	eor.w	ip, r0, r1
 80054f4:	0249      	lsls	r1, r1, #9
 80054f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80054fa:	d037      	beq.n	800556c <__aeabi_fdiv+0x98>
 80054fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8005504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800550c:	428b      	cmp	r3, r1
 800550e:	bf38      	it	cc
 8005510:	005b      	lslcc	r3, r3, #1
 8005512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8005516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800551a:	428b      	cmp	r3, r1
 800551c:	bf24      	itt	cs
 800551e:	1a5b      	subcs	r3, r3, r1
 8005520:	ea40 000c 	orrcs.w	r0, r0, ip
 8005524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8005528:	bf24      	itt	cs
 800552a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800552e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8005536:	bf24      	itt	cs
 8005538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800553c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005544:	bf24      	itt	cs
 8005546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800554a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	bf18      	it	ne
 8005552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005556:	d1e0      	bne.n	800551a <__aeabi_fdiv+0x46>
 8005558:	2afd      	cmp	r2, #253	; 0xfd
 800555a:	f63f af50 	bhi.w	80053fe <__aeabi_fmul+0x92>
 800555e:	428b      	cmp	r3, r1
 8005560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005564:	bf08      	it	eq
 8005566:	f020 0001 	biceq.w	r0, r0, #1
 800556a:	4770      	bx	lr
 800556c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005574:	327f      	adds	r2, #127	; 0x7f
 8005576:	bfc2      	ittt	gt
 8005578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800557c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005580:	4770      	bxgt	lr
 8005582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	3a01      	subs	r2, #1
 800558c:	e737      	b.n	80053fe <__aeabi_fmul+0x92>
 800558e:	f092 0f00 	teq	r2, #0
 8005592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005596:	bf02      	ittt	eq
 8005598:	0040      	lsleq	r0, r0, #1
 800559a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800559e:	3a01      	subeq	r2, #1
 80055a0:	d0f9      	beq.n	8005596 <__aeabi_fdiv+0xc2>
 80055a2:	ea40 000c 	orr.w	r0, r0, ip
 80055a6:	f093 0f00 	teq	r3, #0
 80055aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80055ae:	bf02      	ittt	eq
 80055b0:	0049      	lsleq	r1, r1, #1
 80055b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80055b6:	3b01      	subeq	r3, #1
 80055b8:	d0f9      	beq.n	80055ae <__aeabi_fdiv+0xda>
 80055ba:	ea41 010c 	orr.w	r1, r1, ip
 80055be:	e795      	b.n	80054ec <__aeabi_fdiv+0x18>
 80055c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80055c4:	ea92 0f0c 	teq	r2, ip
 80055c8:	d108      	bne.n	80055dc <__aeabi_fdiv+0x108>
 80055ca:	0242      	lsls	r2, r0, #9
 80055cc:	f47f af7d 	bne.w	80054ca <__aeabi_fmul+0x15e>
 80055d0:	ea93 0f0c 	teq	r3, ip
 80055d4:	f47f af70 	bne.w	80054b8 <__aeabi_fmul+0x14c>
 80055d8:	4608      	mov	r0, r1
 80055da:	e776      	b.n	80054ca <__aeabi_fmul+0x15e>
 80055dc:	ea93 0f0c 	teq	r3, ip
 80055e0:	d104      	bne.n	80055ec <__aeabi_fdiv+0x118>
 80055e2:	024b      	lsls	r3, r1, #9
 80055e4:	f43f af4c 	beq.w	8005480 <__aeabi_fmul+0x114>
 80055e8:	4608      	mov	r0, r1
 80055ea:	e76e      	b.n	80054ca <__aeabi_fmul+0x15e>
 80055ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80055f0:	bf18      	it	ne
 80055f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80055f6:	d1ca      	bne.n	800558e <__aeabi_fdiv+0xba>
 80055f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80055fc:	f47f af5c 	bne.w	80054b8 <__aeabi_fmul+0x14c>
 8005600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005604:	f47f af3c 	bne.w	8005480 <__aeabi_fmul+0x114>
 8005608:	e75f      	b.n	80054ca <__aeabi_fmul+0x15e>
 800560a:	bf00      	nop

0800560c <__aeabi_f2iz>:
 800560c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005614:	d30f      	bcc.n	8005636 <__aeabi_f2iz+0x2a>
 8005616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800561a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800561e:	d90d      	bls.n	800563c <__aeabi_f2iz+0x30>
 8005620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800562c:	fa23 f002 	lsr.w	r0, r3, r2
 8005630:	bf18      	it	ne
 8005632:	4240      	negne	r0, r0
 8005634:	4770      	bx	lr
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	4770      	bx	lr
 800563c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005640:	d101      	bne.n	8005646 <__aeabi_f2iz+0x3a>
 8005642:	0242      	lsls	r2, r0, #9
 8005644:	d105      	bne.n	8005652 <__aeabi_f2iz+0x46>
 8005646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800564a:	bf08      	it	eq
 800564c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005650:	4770      	bx	lr
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	4770      	bx	lr

08005658 <__aeabi_f2uiz>:
 8005658:	0042      	lsls	r2, r0, #1
 800565a:	d20e      	bcs.n	800567a <__aeabi_f2uiz+0x22>
 800565c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005660:	d30b      	bcc.n	800567a <__aeabi_f2uiz+0x22>
 8005662:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005666:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800566a:	d409      	bmi.n	8005680 <__aeabi_f2uiz+0x28>
 800566c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005674:	fa23 f002 	lsr.w	r0, r3, r2
 8005678:	4770      	bx	lr
 800567a:	f04f 0000 	mov.w	r0, #0
 800567e:	4770      	bx	lr
 8005680:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005684:	d101      	bne.n	800568a <__aeabi_f2uiz+0x32>
 8005686:	0242      	lsls	r2, r0, #9
 8005688:	d102      	bne.n	8005690 <__aeabi_f2uiz+0x38>
 800568a:	f04f 30ff 	mov.w	r0, #4294967295
 800568e:	4770      	bx	lr
 8005690:	f04f 0000 	mov.w	r0, #0
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop

08005698 <__aeabi_uldivmod>:
 8005698:	b953      	cbnz	r3, 80056b0 <__aeabi_uldivmod+0x18>
 800569a:	b94a      	cbnz	r2, 80056b0 <__aeabi_uldivmod+0x18>
 800569c:	2900      	cmp	r1, #0
 800569e:	bf08      	it	eq
 80056a0:	2800      	cmpeq	r0, #0
 80056a2:	bf1c      	itt	ne
 80056a4:	f04f 31ff 	movne.w	r1, #4294967295
 80056a8:	f04f 30ff 	movne.w	r0, #4294967295
 80056ac:	f000 b972 	b.w	8005994 <__aeabi_idiv0>
 80056b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80056b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80056b8:	f000 f806 	bl	80056c8 <__udivmoddi4>
 80056bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80056c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c4:	b004      	add	sp, #16
 80056c6:	4770      	bx	lr

080056c8 <__udivmoddi4>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	9e08      	ldr	r6, [sp, #32]
 80056ce:	460d      	mov	r5, r1
 80056d0:	4604      	mov	r4, r0
 80056d2:	468e      	mov	lr, r1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d14c      	bne.n	8005772 <__udivmoddi4+0xaa>
 80056d8:	428a      	cmp	r2, r1
 80056da:	4694      	mov	ip, r2
 80056dc:	d967      	bls.n	80057ae <__udivmoddi4+0xe6>
 80056de:	fab2 f382 	clz	r3, r2
 80056e2:	b153      	cbz	r3, 80056fa <__udivmoddi4+0x32>
 80056e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80056e8:	f1c3 0220 	rsb	r2, r3, #32
 80056ec:	fa01 fe03 	lsl.w	lr, r1, r3
 80056f0:	fa20 f202 	lsr.w	r2, r0, r2
 80056f4:	ea42 0e0e 	orr.w	lr, r2, lr
 80056f8:	409c      	lsls	r4, r3
 80056fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80056fe:	fbbe f1f7 	udiv	r1, lr, r7
 8005702:	fa1f f58c 	uxth.w	r5, ip
 8005706:	fb07 ee11 	mls	lr, r7, r1, lr
 800570a:	fb01 f005 	mul.w	r0, r1, r5
 800570e:	0c22      	lsrs	r2, r4, #16
 8005710:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005714:	4290      	cmp	r0, r2
 8005716:	d90a      	bls.n	800572e <__udivmoddi4+0x66>
 8005718:	eb1c 0202 	adds.w	r2, ip, r2
 800571c:	f101 3eff 	add.w	lr, r1, #4294967295
 8005720:	f080 8119 	bcs.w	8005956 <__udivmoddi4+0x28e>
 8005724:	4290      	cmp	r0, r2
 8005726:	f240 8116 	bls.w	8005956 <__udivmoddi4+0x28e>
 800572a:	3902      	subs	r1, #2
 800572c:	4462      	add	r2, ip
 800572e:	1a12      	subs	r2, r2, r0
 8005730:	fbb2 f0f7 	udiv	r0, r2, r7
 8005734:	fb07 2210 	mls	r2, r7, r0, r2
 8005738:	fb00 f505 	mul.w	r5, r0, r5
 800573c:	b2a4      	uxth	r4, r4
 800573e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005742:	42a5      	cmp	r5, r4
 8005744:	d90a      	bls.n	800575c <__udivmoddi4+0x94>
 8005746:	eb1c 0404 	adds.w	r4, ip, r4
 800574a:	f100 32ff 	add.w	r2, r0, #4294967295
 800574e:	f080 8104 	bcs.w	800595a <__udivmoddi4+0x292>
 8005752:	42a5      	cmp	r5, r4
 8005754:	f240 8101 	bls.w	800595a <__udivmoddi4+0x292>
 8005758:	4464      	add	r4, ip
 800575a:	3802      	subs	r0, #2
 800575c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005760:	2100      	movs	r1, #0
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	b11e      	cbz	r6, 800576e <__udivmoddi4+0xa6>
 8005766:	40dc      	lsrs	r4, r3
 8005768:	2300      	movs	r3, #0
 800576a:	e9c6 4300 	strd	r4, r3, [r6]
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005772:	428b      	cmp	r3, r1
 8005774:	d908      	bls.n	8005788 <__udivmoddi4+0xc0>
 8005776:	2e00      	cmp	r6, #0
 8005778:	f000 80ea 	beq.w	8005950 <__udivmoddi4+0x288>
 800577c:	2100      	movs	r1, #0
 800577e:	e9c6 0500 	strd	r0, r5, [r6]
 8005782:	4608      	mov	r0, r1
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	fab3 f183 	clz	r1, r3
 800578c:	2900      	cmp	r1, #0
 800578e:	d148      	bne.n	8005822 <__udivmoddi4+0x15a>
 8005790:	42ab      	cmp	r3, r5
 8005792:	d302      	bcc.n	800579a <__udivmoddi4+0xd2>
 8005794:	4282      	cmp	r2, r0
 8005796:	f200 80f8 	bhi.w	800598a <__udivmoddi4+0x2c2>
 800579a:	1a84      	subs	r4, r0, r2
 800579c:	eb65 0203 	sbc.w	r2, r5, r3
 80057a0:	2001      	movs	r0, #1
 80057a2:	4696      	mov	lr, r2
 80057a4:	2e00      	cmp	r6, #0
 80057a6:	d0e2      	beq.n	800576e <__udivmoddi4+0xa6>
 80057a8:	e9c6 4e00 	strd	r4, lr, [r6]
 80057ac:	e7df      	b.n	800576e <__udivmoddi4+0xa6>
 80057ae:	b902      	cbnz	r2, 80057b2 <__udivmoddi4+0xea>
 80057b0:	deff      	udf	#255	; 0xff
 80057b2:	fab2 f382 	clz	r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808e 	bne.w	80058d8 <__udivmoddi4+0x210>
 80057bc:	1a88      	subs	r0, r1, r2
 80057be:	2101      	movs	r1, #1
 80057c0:	0c17      	lsrs	r7, r2, #16
 80057c2:	fa1f fe82 	uxth.w	lr, r2
 80057c6:	fbb0 f5f7 	udiv	r5, r0, r7
 80057ca:	fb07 0015 	mls	r0, r7, r5, r0
 80057ce:	0c22      	lsrs	r2, r4, #16
 80057d0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80057d4:	fb0e f005 	mul.w	r0, lr, r5
 80057d8:	4290      	cmp	r0, r2
 80057da:	d908      	bls.n	80057ee <__udivmoddi4+0x126>
 80057dc:	eb1c 0202 	adds.w	r2, ip, r2
 80057e0:	f105 38ff 	add.w	r8, r5, #4294967295
 80057e4:	d202      	bcs.n	80057ec <__udivmoddi4+0x124>
 80057e6:	4290      	cmp	r0, r2
 80057e8:	f200 80cc 	bhi.w	8005984 <__udivmoddi4+0x2bc>
 80057ec:	4645      	mov	r5, r8
 80057ee:	1a12      	subs	r2, r2, r0
 80057f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80057f4:	fb07 2210 	mls	r2, r7, r0, r2
 80057f8:	fb0e fe00 	mul.w	lr, lr, r0
 80057fc:	b2a4      	uxth	r4, r4
 80057fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005802:	45a6      	cmp	lr, r4
 8005804:	d908      	bls.n	8005818 <__udivmoddi4+0x150>
 8005806:	eb1c 0404 	adds.w	r4, ip, r4
 800580a:	f100 32ff 	add.w	r2, r0, #4294967295
 800580e:	d202      	bcs.n	8005816 <__udivmoddi4+0x14e>
 8005810:	45a6      	cmp	lr, r4
 8005812:	f200 80b4 	bhi.w	800597e <__udivmoddi4+0x2b6>
 8005816:	4610      	mov	r0, r2
 8005818:	eba4 040e 	sub.w	r4, r4, lr
 800581c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005820:	e7a0      	b.n	8005764 <__udivmoddi4+0x9c>
 8005822:	f1c1 0720 	rsb	r7, r1, #32
 8005826:	408b      	lsls	r3, r1
 8005828:	fa22 fc07 	lsr.w	ip, r2, r7
 800582c:	ea4c 0c03 	orr.w	ip, ip, r3
 8005830:	fa25 fa07 	lsr.w	sl, r5, r7
 8005834:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005838:	fbba f8f9 	udiv	r8, sl, r9
 800583c:	408d      	lsls	r5, r1
 800583e:	fa20 f307 	lsr.w	r3, r0, r7
 8005842:	fb09 aa18 	mls	sl, r9, r8, sl
 8005846:	fa1f fe8c 	uxth.w	lr, ip
 800584a:	432b      	orrs	r3, r5
 800584c:	fa00 f501 	lsl.w	r5, r0, r1
 8005850:	fb08 f00e 	mul.w	r0, r8, lr
 8005854:	0c1c      	lsrs	r4, r3, #16
 8005856:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800585a:	42a0      	cmp	r0, r4
 800585c:	fa02 f201 	lsl.w	r2, r2, r1
 8005860:	d90b      	bls.n	800587a <__udivmoddi4+0x1b2>
 8005862:	eb1c 0404 	adds.w	r4, ip, r4
 8005866:	f108 3aff 	add.w	sl, r8, #4294967295
 800586a:	f080 8086 	bcs.w	800597a <__udivmoddi4+0x2b2>
 800586e:	42a0      	cmp	r0, r4
 8005870:	f240 8083 	bls.w	800597a <__udivmoddi4+0x2b2>
 8005874:	f1a8 0802 	sub.w	r8, r8, #2
 8005878:	4464      	add	r4, ip
 800587a:	1a24      	subs	r4, r4, r0
 800587c:	b298      	uxth	r0, r3
 800587e:	fbb4 f3f9 	udiv	r3, r4, r9
 8005882:	fb09 4413 	mls	r4, r9, r3, r4
 8005886:	fb03 fe0e 	mul.w	lr, r3, lr
 800588a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800588e:	45a6      	cmp	lr, r4
 8005890:	d908      	bls.n	80058a4 <__udivmoddi4+0x1dc>
 8005892:	eb1c 0404 	adds.w	r4, ip, r4
 8005896:	f103 30ff 	add.w	r0, r3, #4294967295
 800589a:	d26a      	bcs.n	8005972 <__udivmoddi4+0x2aa>
 800589c:	45a6      	cmp	lr, r4
 800589e:	d968      	bls.n	8005972 <__udivmoddi4+0x2aa>
 80058a0:	3b02      	subs	r3, #2
 80058a2:	4464      	add	r4, ip
 80058a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80058a8:	fba0 9302 	umull	r9, r3, r0, r2
 80058ac:	eba4 040e 	sub.w	r4, r4, lr
 80058b0:	429c      	cmp	r4, r3
 80058b2:	46c8      	mov	r8, r9
 80058b4:	469e      	mov	lr, r3
 80058b6:	d354      	bcc.n	8005962 <__udivmoddi4+0x29a>
 80058b8:	d051      	beq.n	800595e <__udivmoddi4+0x296>
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	d067      	beq.n	800598e <__udivmoddi4+0x2c6>
 80058be:	ebb5 0308 	subs.w	r3, r5, r8
 80058c2:	eb64 040e 	sbc.w	r4, r4, lr
 80058c6:	40cb      	lsrs	r3, r1
 80058c8:	fa04 f707 	lsl.w	r7, r4, r7
 80058cc:	431f      	orrs	r7, r3
 80058ce:	40cc      	lsrs	r4, r1
 80058d0:	e9c6 7400 	strd	r7, r4, [r6]
 80058d4:	2100      	movs	r1, #0
 80058d6:	e74a      	b.n	800576e <__udivmoddi4+0xa6>
 80058d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80058dc:	f1c3 0020 	rsb	r0, r3, #32
 80058e0:	40c1      	lsrs	r1, r0
 80058e2:	409d      	lsls	r5, r3
 80058e4:	fa24 f000 	lsr.w	r0, r4, r0
 80058e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80058ec:	4328      	orrs	r0, r5
 80058ee:	fbb1 f5f7 	udiv	r5, r1, r7
 80058f2:	fb07 1115 	mls	r1, r7, r5, r1
 80058f6:	fa1f fe8c 	uxth.w	lr, ip
 80058fa:	0c02      	lsrs	r2, r0, #16
 80058fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005900:	fb05 f10e 	mul.w	r1, r5, lr
 8005904:	4291      	cmp	r1, r2
 8005906:	fa04 f403 	lsl.w	r4, r4, r3
 800590a:	d908      	bls.n	800591e <__udivmoddi4+0x256>
 800590c:	eb1c 0202 	adds.w	r2, ip, r2
 8005910:	f105 38ff 	add.w	r8, r5, #4294967295
 8005914:	d22f      	bcs.n	8005976 <__udivmoddi4+0x2ae>
 8005916:	4291      	cmp	r1, r2
 8005918:	d92d      	bls.n	8005976 <__udivmoddi4+0x2ae>
 800591a:	3d02      	subs	r5, #2
 800591c:	4462      	add	r2, ip
 800591e:	1a52      	subs	r2, r2, r1
 8005920:	fbb2 f1f7 	udiv	r1, r2, r7
 8005924:	fb07 2211 	mls	r2, r7, r1, r2
 8005928:	b280      	uxth	r0, r0
 800592a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800592e:	fb01 f20e 	mul.w	r2, r1, lr
 8005932:	4282      	cmp	r2, r0
 8005934:	d908      	bls.n	8005948 <__udivmoddi4+0x280>
 8005936:	eb1c 0000 	adds.w	r0, ip, r0
 800593a:	f101 38ff 	add.w	r8, r1, #4294967295
 800593e:	d216      	bcs.n	800596e <__udivmoddi4+0x2a6>
 8005940:	4282      	cmp	r2, r0
 8005942:	d914      	bls.n	800596e <__udivmoddi4+0x2a6>
 8005944:	3902      	subs	r1, #2
 8005946:	4460      	add	r0, ip
 8005948:	1a80      	subs	r0, r0, r2
 800594a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800594e:	e73a      	b.n	80057c6 <__udivmoddi4+0xfe>
 8005950:	4631      	mov	r1, r6
 8005952:	4630      	mov	r0, r6
 8005954:	e70b      	b.n	800576e <__udivmoddi4+0xa6>
 8005956:	4671      	mov	r1, lr
 8005958:	e6e9      	b.n	800572e <__udivmoddi4+0x66>
 800595a:	4610      	mov	r0, r2
 800595c:	e6fe      	b.n	800575c <__udivmoddi4+0x94>
 800595e:	454d      	cmp	r5, r9
 8005960:	d2ab      	bcs.n	80058ba <__udivmoddi4+0x1f2>
 8005962:	ebb9 0802 	subs.w	r8, r9, r2
 8005966:	eb63 0e0c 	sbc.w	lr, r3, ip
 800596a:	3801      	subs	r0, #1
 800596c:	e7a5      	b.n	80058ba <__udivmoddi4+0x1f2>
 800596e:	4641      	mov	r1, r8
 8005970:	e7ea      	b.n	8005948 <__udivmoddi4+0x280>
 8005972:	4603      	mov	r3, r0
 8005974:	e796      	b.n	80058a4 <__udivmoddi4+0x1dc>
 8005976:	4645      	mov	r5, r8
 8005978:	e7d1      	b.n	800591e <__udivmoddi4+0x256>
 800597a:	46d0      	mov	r8, sl
 800597c:	e77d      	b.n	800587a <__udivmoddi4+0x1b2>
 800597e:	4464      	add	r4, ip
 8005980:	3802      	subs	r0, #2
 8005982:	e749      	b.n	8005818 <__udivmoddi4+0x150>
 8005984:	3d02      	subs	r5, #2
 8005986:	4462      	add	r2, ip
 8005988:	e731      	b.n	80057ee <__udivmoddi4+0x126>
 800598a:	4608      	mov	r0, r1
 800598c:	e70a      	b.n	80057a4 <__udivmoddi4+0xdc>
 800598e:	4631      	mov	r1, r6
 8005990:	e6ed      	b.n	800576e <__udivmoddi4+0xa6>
 8005992:	bf00      	nop

08005994 <__aeabi_idiv0>:
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop

08005998 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800599e:	f000 fa37 	bl	8005e10 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80059a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80059a6:	2201      	movs	r2, #1
 80059a8:	2178      	movs	r1, #120	; 0x78
 80059aa:	485b      	ldr	r0, [pc, #364]	; (8005b18 <SSD1306_Init+0x180>)
 80059ac:	f004 fc74 	bl	800a298 <HAL_I2C_IsDeviceReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e0a9      	b.n	8005b0e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80059ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80059be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80059c0:	e002      	b.n	80059c8 <SSD1306_Init+0x30>
		p--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f9      	bne.n	80059c2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80059ce:	22ae      	movs	r2, #174	; 0xae
 80059d0:	2100      	movs	r1, #0
 80059d2:	2078      	movs	r0, #120	; 0x78
 80059d4:	f000 fa96 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80059d8:	2220      	movs	r2, #32
 80059da:	2100      	movs	r1, #0
 80059dc:	2078      	movs	r0, #120	; 0x78
 80059de:	f000 fa91 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80059e2:	2210      	movs	r2, #16
 80059e4:	2100      	movs	r1, #0
 80059e6:	2078      	movs	r0, #120	; 0x78
 80059e8:	f000 fa8c 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80059ec:	22b0      	movs	r2, #176	; 0xb0
 80059ee:	2100      	movs	r1, #0
 80059f0:	2078      	movs	r0, #120	; 0x78
 80059f2:	f000 fa87 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80059f6:	22c8      	movs	r2, #200	; 0xc8
 80059f8:	2100      	movs	r1, #0
 80059fa:	2078      	movs	r0, #120	; 0x78
 80059fc:	f000 fa82 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	2078      	movs	r0, #120	; 0x78
 8005a06:	f000 fa7d 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	2078      	movs	r0, #120	; 0x78
 8005a10:	f000 fa78 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005a14:	2240      	movs	r2, #64	; 0x40
 8005a16:	2100      	movs	r1, #0
 8005a18:	2078      	movs	r0, #120	; 0x78
 8005a1a:	f000 fa73 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005a1e:	2281      	movs	r2, #129	; 0x81
 8005a20:	2100      	movs	r1, #0
 8005a22:	2078      	movs	r0, #120	; 0x78
 8005a24:	f000 fa6e 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	2078      	movs	r0, #120	; 0x78
 8005a2e:	f000 fa69 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8005a32:	22a1      	movs	r2, #161	; 0xa1
 8005a34:	2100      	movs	r1, #0
 8005a36:	2078      	movs	r0, #120	; 0x78
 8005a38:	f000 fa64 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005a3c:	22a6      	movs	r2, #166	; 0xa6
 8005a3e:	2100      	movs	r1, #0
 8005a40:	2078      	movs	r0, #120	; 0x78
 8005a42:	f000 fa5f 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8005a46:	22a8      	movs	r2, #168	; 0xa8
 8005a48:	2100      	movs	r1, #0
 8005a4a:	2078      	movs	r0, #120	; 0x78
 8005a4c:	f000 fa5a 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005a50:	223f      	movs	r2, #63	; 0x3f
 8005a52:	2100      	movs	r1, #0
 8005a54:	2078      	movs	r0, #120	; 0x78
 8005a56:	f000 fa55 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005a5a:	22a4      	movs	r2, #164	; 0xa4
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2078      	movs	r0, #120	; 0x78
 8005a60:	f000 fa50 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8005a64:	22d3      	movs	r2, #211	; 0xd3
 8005a66:	2100      	movs	r1, #0
 8005a68:	2078      	movs	r0, #120	; 0x78
 8005a6a:	f000 fa4b 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2100      	movs	r1, #0
 8005a72:	2078      	movs	r0, #120	; 0x78
 8005a74:	f000 fa46 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005a78:	22d5      	movs	r2, #213	; 0xd5
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	2078      	movs	r0, #120	; 0x78
 8005a7e:	f000 fa41 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8005a82:	22f0      	movs	r2, #240	; 0xf0
 8005a84:	2100      	movs	r1, #0
 8005a86:	2078      	movs	r0, #120	; 0x78
 8005a88:	f000 fa3c 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005a8c:	22d9      	movs	r2, #217	; 0xd9
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2078      	movs	r0, #120	; 0x78
 8005a92:	f000 fa37 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8005a96:	2222      	movs	r2, #34	; 0x22
 8005a98:	2100      	movs	r1, #0
 8005a9a:	2078      	movs	r0, #120	; 0x78
 8005a9c:	f000 fa32 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005aa0:	22da      	movs	r2, #218	; 0xda
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	2078      	movs	r0, #120	; 0x78
 8005aa6:	f000 fa2d 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8005aaa:	2212      	movs	r2, #18
 8005aac:	2100      	movs	r1, #0
 8005aae:	2078      	movs	r0, #120	; 0x78
 8005ab0:	f000 fa28 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005ab4:	22db      	movs	r2, #219	; 0xdb
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	2078      	movs	r0, #120	; 0x78
 8005aba:	f000 fa23 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005abe:	2220      	movs	r2, #32
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	2078      	movs	r0, #120	; 0x78
 8005ac4:	f000 fa1e 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005ac8:	228d      	movs	r2, #141	; 0x8d
 8005aca:	2100      	movs	r1, #0
 8005acc:	2078      	movs	r0, #120	; 0x78
 8005ace:	f000 fa19 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8005ad2:	2214      	movs	r2, #20
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	2078      	movs	r0, #120	; 0x78
 8005ad8:	f000 fa14 	bl	8005f04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005adc:	22af      	movs	r2, #175	; 0xaf
 8005ade:	2100      	movs	r1, #0
 8005ae0:	2078      	movs	r0, #120	; 0x78
 8005ae2:	f000 fa0f 	bl	8005f04 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8005ae6:	222e      	movs	r2, #46	; 0x2e
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2078      	movs	r0, #120	; 0x78
 8005aec:	f000 fa0a 	bl	8005f04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005af0:	2000      	movs	r0, #0
 8005af2:	f000 f847 	bl	8005b84 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8005af6:	f000 f813 	bl	8005b20 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <SSD1306_Init+0x184>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <SSD1306_Init+0x184>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <SSD1306_Init+0x184>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8005b0c:	2301      	movs	r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000060c 	.word	0x2000060c
 8005b1c:	200004dc 	.word	0x200004dc

08005b20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
 8005b2a:	e021      	b.n	8005b70 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	3b50      	subs	r3, #80	; 0x50
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	2100      	movs	r1, #0
 8005b36:	2078      	movs	r0, #120	; 0x78
 8005b38:	f000 f9e4 	bl	8005f04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	2078      	movs	r0, #120	; 0x78
 8005b42:	f000 f9df 	bl	8005f04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8005b46:	2210      	movs	r2, #16
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2078      	movs	r0, #120	; 0x78
 8005b4c:	f000 f9da 	bl	8005f04 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005b50:	79fa      	ldrb	r2, [r7, #7]
 8005b52:	4613      	mov	r3, r2
 8005b54:	015b      	lsls	r3, r3, #5
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <SSD1306_UpdateScreen+0x60>)
 8005b5e:	441a      	add	r2, r3
 8005b60:	2384      	movs	r3, #132	; 0x84
 8005b62:	2140      	movs	r1, #64	; 0x40
 8005b64:	2078      	movs	r0, #120	; 0x78
 8005b66:	f000 f967 	bl	8005e38 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	71fb      	strb	r3, [r7, #7]
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	2b07      	cmp	r3, #7
 8005b74:	d9da      	bls.n	8005b2c <SSD1306_UpdateScreen+0xc>
	}
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	200000bc 	.word	0x200000bc

08005b84 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <SSD1306_Fill+0x14>
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <SSD1306_Fill+0x16>
 8005b98:	23ff      	movs	r3, #255	; 0xff
 8005b9a:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4803      	ldr	r0, [pc, #12]	; (8005bb0 <SSD1306_Fill+0x2c>)
 8005ba2:	f006 fe32 	bl	800c80a <memset>
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200000bc 	.word	0x200000bc

08005bb4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005bb4:	b490      	push	{r4, r7}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	80bb      	strh	r3, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	70fb      	strb	r3, [r7, #3]
	if (
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	2b83      	cmp	r3, #131	; 0x83
 8005bca:	d854      	bhi.n	8005c76 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8005bcc:	88bb      	ldrh	r3, [r7, #4]
 8005bce:	2b3f      	cmp	r3, #63	; 0x3f
 8005bd0:	d851      	bhi.n	8005c76 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8005bd2:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <SSD1306_DrawPixel+0xcc>)
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d120      	bne.n	8005c30 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	88bb      	ldrh	r3, [r7, #4]
 8005bf2:	08db      	lsrs	r3, r3, #3
 8005bf4:	b298      	uxth	r0, r3
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	015b      	lsls	r3, r3, #5
 8005bfc:	440b      	add	r3, r1
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <SSD1306_DrawPixel+0xd0>)
 8005c04:	5cd3      	ldrb	r3, [r2, r3]
 8005c06:	b25a      	sxtb	r2, r3
 8005c08:	88bb      	ldrh	r3, [r7, #4]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b25c      	sxtb	r4, r3
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	4601      	mov	r1, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	015b      	lsls	r3, r3, #5
 8005c22:	440b      	add	r3, r1
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	b2e1      	uxtb	r1, r4
 8005c2a:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <SSD1306_DrawPixel+0xd0>)
 8005c2c:	54d1      	strb	r1, [r2, r3]
 8005c2e:	e023      	b.n	8005c78 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	88bb      	ldrh	r3, [r7, #4]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	b298      	uxth	r0, r3
 8005c38:	4601      	mov	r1, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	015b      	lsls	r3, r3, #5
 8005c3e:	440b      	add	r3, r1
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	4a0f      	ldr	r2, [pc, #60]	; (8005c84 <SSD1306_DrawPixel+0xd0>)
 8005c46:	5cd3      	ldrb	r3, [r2, r3]
 8005c48:	b25a      	sxtb	r2, r3
 8005c4a:	88bb      	ldrh	r3, [r7, #4]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	b25b      	sxtb	r3, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	b25c      	sxtb	r4, r3
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	4601      	mov	r1, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	440b      	add	r3, r1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	b2e1      	uxtb	r1, r4
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <SSD1306_DrawPixel+0xd0>)
 8005c72:	54d1      	strb	r1, [r2, r3]
 8005c74:	e000      	b.n	8005c78 <SSD1306_DrawPixel+0xc4>
		return;
 8005c76:	bf00      	nop
	}
}
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc90      	pop	{r4, r7}
 8005c7e:	4770      	bx	lr
 8005c80:	200004dc 	.word	0x200004dc
 8005c84:	200000bc 	.word	0x200000bc

08005c88 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	460a      	mov	r2, r1
 8005c92:	80fb      	strh	r3, [r7, #6]
 8005c94:	4613      	mov	r3, r2
 8005c96:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005c98:	4a05      	ldr	r2, [pc, #20]	; (8005cb0 <SSD1306_GotoXY+0x28>)
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <SSD1306_GotoXY+0x28>)
 8005ca0:	88bb      	ldrh	r3, [r7, #4]
 8005ca2:	8053      	strh	r3, [r2, #2]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	200004dc 	.word	0x200004dc

08005cb4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	71fb      	strb	r3, [r7, #7]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005cc4:	4b3a      	ldr	r3, [pc, #232]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4413      	add	r3, r2
	if (
 8005cd0:	2b83      	cmp	r3, #131	; 0x83
 8005cd2:	dc07      	bgt.n	8005ce4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005cd4:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005ce0:	2b3f      	cmp	r3, #63	; 0x3f
 8005ce2:	dd01      	ble.n	8005ce8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e05e      	b.n	8005da6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e04b      	b.n	8005d86 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	3b20      	subs	r3, #32
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	7849      	ldrb	r1, [r1, #1]
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	440b      	add	r3, r1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e030      	b.n	8005d74 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	b298      	uxth	r0, r3
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005d30:	885a      	ldrh	r2, [r3, #2]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	79ba      	ldrb	r2, [r7, #6]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f7ff ff39 	bl	8005bb4 <SSD1306_DrawPixel>
 8005d42:	e014      	b.n	8005d6e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b298      	uxth	r0, r3
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005d52:	885a      	ldrh	r2, [r3, #2]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	b299      	uxth	r1, r3
 8005d5c:	79bb      	ldrb	r3, [r7, #6]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f7ff ff23 	bl	8005bb4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d3c8      	bcc.n	8005d12 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	3301      	adds	r3, #1
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d3ad      	bcc.n	8005cee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005d92:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <SSD1306_Putc+0xfc>)
 8005da2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8005da4:	79fb      	ldrb	r3, [r7, #7]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	200004dc 	.word	0x200004dc

08005db4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005dc2:	e012      	b.n	8005dea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	79fa      	ldrb	r2, [r7, #7]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff71 	bl	8005cb4 <SSD1306_Putc>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d002      	beq.n	8005de4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	e008      	b.n	8005df6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e8      	bne.n	8005dc4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	781b      	ldrb	r3, [r3, #0]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8005e02:	2000      	movs	r0, #0
 8005e04:	f7ff febe 	bl	8005b84 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8005e08:	f7ff fe8a 	bl	8005b20 <SSD1306_UpdateScreen>
}
 8005e0c:	bf00      	nop
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8005e16:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <ssd1306_I2C_Init+0x24>)
 8005e18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005e1a:	e002      	b.n	8005e22 <ssd1306_I2C_Init+0x12>
		p--;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f9      	bne.n	8005e1c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	0003d090 	.word	0x0003d090

08005e38 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b0c7      	sub	sp, #284	; 0x11c
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8005e46:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8005e4a:	600a      	str	r2, [r1, #0]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e52:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005e56:	4622      	mov	r2, r4
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e5e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8005e62:	4602      	mov	r2, r0
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e6e:	460a      	mov	r2, r1
 8005e70:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8005e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005e7e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005e8c:	e015      	b.n	8005eba <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8005e8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005e92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005e96:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	441a      	add	r2, r3
 8005e9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	7811      	ldrb	r1, [r2, #0]
 8005ea6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005eaa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005eae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005eb0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005eba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005ec4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d8df      	bhi.n	8005e8e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8005ece:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ed2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b299      	uxth	r1, r3
 8005eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ede:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f107 020c 	add.w	r2, r7, #12
 8005eec:	200a      	movs	r0, #10
 8005eee:	9000      	str	r0, [sp, #0]
 8005ef0:	4803      	ldr	r0, [pc, #12]	; (8005f00 <ssd1306_I2C_WriteMulti+0xc8>)
 8005ef2:	f003 fbff 	bl	80096f4 <HAL_I2C_Master_Transmit>
}
 8005ef6:	bf00      	nop
 8005ef8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd90      	pop	{r4, r7, pc}
 8005f00:	2000060c 	.word	0x2000060c

08005f04 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	71bb      	strb	r3, [r7, #6]
 8005f12:	4613      	mov	r3, r2
 8005f14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005f16:	79bb      	ldrb	r3, [r7, #6]
 8005f18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005f1a:	797b      	ldrb	r3, [r7, #5]
 8005f1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	b299      	uxth	r1, r3
 8005f22:	f107 020c 	add.w	r2, r7, #12
 8005f26:	230a      	movs	r3, #10
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	4803      	ldr	r0, [pc, #12]	; (8005f3c <ssd1306_I2C_Write+0x38>)
 8005f2e:	f003 fbe1 	bl	80096f4 <HAL_I2C_Master_Transmit>
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	2000060c 	.word	0x2000060c

08005f40 <SX1278_SPIRead>:

/*Declare global variable in hear*/
extern uint8_t gl_buffer_TX[16];
extern uint8_t gl_buffer_RX[16];

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	4611      	mov	r1, r2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fbd0 	bl	80066fa <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fbeb 	bl	800673a <SX1278_hw_SPIReadByte>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fb88 	bl	8006684 <SX1278_hw_SetNSS>
	return tmp;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb75 	bl	8006684 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f000 fba6 	bl	80066fa <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	78ba      	ldrb	r2, [r7, #2]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fb9f 	bl	80066fa <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fb5e 	bl	8006684 <SX1278_hw_SetNSS>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	72fb      	strb	r3, [r7, #11]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8005fe4:	7abb      	ldrb	r3, [r7, #10]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d927      	bls.n	800603a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fb47 	bl	8006684 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	7afa      	ldrb	r2, [r7, #11]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fb7b 	bl	80066fa <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8006004:	2300      	movs	r3, #0
 8006006:	75fb      	strb	r3, [r7, #23]
 8006008:	e00c      	b.n	8006024 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	18d4      	adds	r4, r2, r3
 8006014:	4608      	mov	r0, r1
 8006016:	f000 fb90 	bl	800673a <SX1278_hw_SPIReadByte>
 800601a:	4603      	mov	r3, r0
 800601c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	3301      	adds	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
 8006024:	7dfa      	ldrb	r2, [r7, #23]
 8006026:	7abb      	ldrb	r3, [r7, #10]
 8006028:	429a      	cmp	r2, r3
 800602a:	d3ee      	bcc.n	800600a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fb26 	bl	8006684 <SX1278_hw_SetNSS>
 8006038:	e000      	b.n	800603c <SX1278_SPIBurstRead+0x6c>
		return;
 800603a:	bf00      	nop
	}
}
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}

08006042 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	461a      	mov	r2, r3
 800604e:	460b      	mov	r3, r1
 8006050:	72fb      	strb	r3, [r7, #11]
 8006052:	4613      	mov	r3, r2
 8006054:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8006056:	7abb      	ldrb	r3, [r7, #10]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d929      	bls.n	80060b0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fb0e 	bl	8006684 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	7afb      	ldrb	r3, [r7, #11]
 800606e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006072:	b2db      	uxtb	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 fb3f 	bl	80066fa <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]
 8006080:	e00b      	b.n	800609a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	f000 fb33 	bl	80066fa <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	3301      	adds	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
 800609a:	7dfa      	ldrb	r2, [r7, #23]
 800609c:	7abb      	ldrb	r3, [r7, #10]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3ef      	bcc.n	8006082 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2101      	movs	r1, #1
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 faeb 	bl	8006684 <SX1278_hw_SetNSS>
 80060ae:	e000      	b.n	80060b2 <SX1278_SPIBurstWrite+0x70>
		return;
 80060b0:	bf00      	nop
	}
}
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f90d 	bl	80062e0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80060c6:	200f      	movs	r0, #15
 80060c8:	f000 fb5d 	bl	8006786 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f917 	bl	8006300 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	684a      	ldr	r2, [r1, #4]
 80060d6:	688b      	ldr	r3, [r1, #8]
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	04d9      	lsls	r1, r3, #19
 80060e2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80060e6:	04d0      	lsls	r0, r2, #19
 80060e8:	4a6f      	ldr	r2, [pc, #444]	; (80062a8 <SX1278_config+0x1f0>)
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f7ff fad3 	bl	8005698 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80060fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	0c02      	lsrs	r2, r0, #16
 8006108:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800610c:	0c0b      	lsrs	r3, r1, #16
 800610e:	b2d3      	uxtb	r3, r2
 8006110:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8006112:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	0a02      	lsrs	r2, r0, #8
 8006120:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006124:	0a0b      	lsrs	r3, r1, #8
 8006126:	b2d3      	uxtb	r3, r2
 8006128:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800612a:	7c3b      	ldrb	r3, [r7, #16]
 800612c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800612e:	f107 020c 	add.w	r2, r7, #12
 8006132:	2303      	movs	r3, #3
 8006134:	2106      	movs	r1, #6
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ff83 	bl	8006042 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800613c:	2234      	movs	r2, #52	; 0x34
 800613e:	2139      	movs	r1, #57	; 0x39
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff ff1c 	bl	8005f7e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7b1b      	ldrb	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	4b57      	ldr	r3, [pc, #348]	; (80062ac <SX1278_config+0x1f4>)
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	461a      	mov	r2, r3
 8006152:	2109      	movs	r1, #9
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff12 	bl	8005f7e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800615a:	220b      	movs	r2, #11
 800615c:	210b      	movs	r1, #11
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ff0d 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8006164:	2223      	movs	r2, #35	; 0x23
 8006166:	210c      	movs	r1, #12
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff ff08 	bl	8005f7e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7b5b      	ldrb	r3, [r3, #13]
 8006172:	461a      	mov	r2, r3
 8006174:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <SX1278_config+0x1f8>)
 8006176:	5c9b      	ldrb	r3, [r3, r2]
 8006178:	2b06      	cmp	r3, #6
 800617a:	d147      	bne.n	800620c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7b9b      	ldrb	r3, [r3, #14]
 8006180:	461a      	mov	r2, r3
 8006182:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <SX1278_config+0x1fc>)
 8006184:	5c9b      	ldrb	r3, [r3, r2]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7bdb      	ldrb	r3, [r3, #15]
 800618e:	4619      	mov	r1, r3
 8006190:	4b49      	ldr	r3, [pc, #292]	; (80062b8 <SX1278_config+0x200>)
 8006192:	5c5b      	ldrb	r3, [r3, r1]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4413      	add	r3, r2
 800619a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800619c:	3301      	adds	r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	211d      	movs	r1, #29
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff feea 	bl	8005f7e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7b5b      	ldrb	r3, [r3, #13]
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <SX1278_config+0x1f8>)
 80061b2:	5c9b      	ldrb	r3, [r3, r2]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7c1b      	ldrb	r3, [r3, #16]
 80061bc:	4619      	mov	r1, r3
 80061be:	4b3f      	ldr	r3, [pc, #252]	; (80062bc <SX1278_config+0x204>)
 80061c0:	5c5b      	ldrb	r3, [r3, r1]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80061ca:	3303      	adds	r3, #3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	211e      	movs	r1, #30
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fed3 	bl	8005f7e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80061d8:	2131      	movs	r1, #49	; 0x31
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff feb0 	bl	8005f40 <SX1278_SPIRead>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	f043 0305 	orr.w	r3, r3, #5
 80061f2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	461a      	mov	r2, r3
 80061f8:	2131      	movs	r1, #49	; 0x31
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff febf 	bl	8005f7e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8006200:	220c      	movs	r2, #12
 8006202:	2137      	movs	r1, #55	; 0x37
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff feba 	bl	8005f7e <SX1278_SPIWrite>
 800620a:	e029      	b.n	8006260 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7b9b      	ldrb	r3, [r3, #14]
 8006210:	461a      	mov	r2, r3
 8006212:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <SX1278_config+0x1fc>)
 8006214:	5c9b      	ldrb	r3, [r3, r2]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7bdb      	ldrb	r3, [r3, #15]
 800621e:	4619      	mov	r1, r3
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <SX1278_config+0x200>)
 8006222:	5c5b      	ldrb	r3, [r3, r1]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006228:	4413      	add	r3, r2
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	211d      	movs	r1, #29
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fea4 	bl	8005f7e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	461a      	mov	r2, r3
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <SX1278_config+0x1f8>)
 800623e:	5c9b      	ldrb	r3, [r3, r2]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7c1b      	ldrb	r3, [r3, #16]
 8006248:	4619      	mov	r1, r3
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <SX1278_config+0x204>)
 800624c:	5c5b      	ldrb	r3, [r3, r1]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8006252:	4413      	add	r3, r2
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	211e      	movs	r1, #30
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe8f 	bl	8005f7e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8006260:	2204      	movs	r2, #4
 8006262:	2126      	movs	r1, #38	; 0x26
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fe8a 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800626a:	2208      	movs	r2, #8
 800626c:	211f      	movs	r1, #31
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fe85 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8006274:	2200      	movs	r2, #0
 8006276:	2120      	movs	r1, #32
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fe80 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800627e:	2208      	movs	r2, #8
 8006280:	2121      	movs	r1, #33	; 0x21
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fe7b 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8006288:	2201      	movs	r2, #1
 800628a:	2141      	movs	r1, #65	; 0x41
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fe76 	bl	8005f7e <SX1278_SPIWrite>
	module->readBytes = 0;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f810 	bl	80062c0 <SX1278_standby>
}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	01e84800 	.word	0x01e84800
 80062ac:	0800d934 	.word	0x0800d934
 80062b0:	0800d938 	.word	0x0800d938
 80062b4:	0800d940 	.word	0x0800d940
 80062b8:	0800d94c 	.word	0x0800d94c
 80062bc:	0800d950 	.word	0x0800d950

080062c0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80062c8:	2209      	movs	r2, #9
 80062ca:	2101      	movs	r1, #1
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fe56 	bl	8005f7e <SX1278_SPIWrite>
	module->status = STANDBY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	749a      	strb	r2, [r3, #18]
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80062e8:	2208      	movs	r2, #8
 80062ea:	2101      	movs	r1, #1
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe46 	bl	8005f7e <SX1278_SPIWrite>
	module->status = SLEEP;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	749a      	strb	r2, [r3, #18]
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8006308:	2288      	movs	r2, #136	; 0x88
 800630a:	2101      	movs	r1, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fe36 	bl	8005f7e <SX1278_SPIWrite>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8006322:	22ff      	movs	r2, #255	; 0xff
 8006324:	2112      	movs	r1, #18
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fe29 	bl	8005f7e <SX1278_SPIWrite>
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	460b      	mov	r3, r1
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	7afa      	ldrb	r2, [r7, #11]
 8006346:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff feb5 	bl	80060b8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800634e:	2284      	movs	r2, #132	; 0x84
 8006350:	214d      	movs	r1, #77	; 0x4d
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fe13 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8006358:	22ff      	movs	r2, #255	; 0xff
 800635a:	2124      	movs	r1, #36	; 0x24
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fe0e 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8006362:	2201      	movs	r2, #1
 8006364:	2140      	movs	r1, #64	; 0x40
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fe09 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800636c:	223f      	movs	r2, #63	; 0x3f
 800636e:	2111      	movs	r1, #17
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fe04 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff ffcf 	bl	800631a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800637c:	7afb      	ldrb	r3, [r7, #11]
 800637e:	461a      	mov	r2, r3
 8006380:	2122      	movs	r1, #34	; 0x22
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fdfb 	bl	8005f7e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8006388:	210f      	movs	r1, #15
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fdd8 	bl	8005f40 <SX1278_SPIRead>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	461a      	mov	r2, r3
 8006398:	210d      	movs	r1, #13
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fdef 	bl	8005f7e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
	SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
 80063a0:	2205      	movs	r2, #5
 80063a2:	2101      	movs	r1, #1
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fdea 	bl	8005f7e <SX1278_SPIWrite>
	module->readBytes = 0;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80063b2:	2118      	movs	r1, #24
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fdc3 	bl	8005f40 <SX1278_SPIRead>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d104      	bne.n	80063ce <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2203      	movs	r2, #3
 80063c8:	749a      	strb	r2, [r3, #18]
			return 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e013      	b.n	80063f6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f967 	bl	80066b2 <SX1278_hw_Reset>
			SX1278_config(module);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff fe67 	bl	80060b8 <SX1278_config>
			return 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e003      	b.n	80063f6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80063ee:	2001      	movs	r0, #1
 80063f0:	f000 f9c9 	bl	8006786 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80063f4:	e7dd      	b.n	80063b2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f9c6 	bl	800679c <SX1278_hw_GetDIO0>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d030      	beq.n	8006478 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3313      	adds	r3, #19
 800641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f006 f9f2 	bl	800c80a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8006426:	2110      	movs	r1, #16
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fd89 	bl	8005f40 <SX1278_SPIRead>
 800642e:	4603      	mov	r3, r0
 8006430:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	461a      	mov	r2, r3
 8006436:	210d      	movs	r1, #13
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fda0 	bl	8005f7e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7b5b      	ldrb	r3, [r3, #13]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7c5b      	ldrb	r3, [r3, #17]
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	e005      	b.n	800645a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800644e:	2113      	movs	r1, #19
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fd75 	bl	8005f40 <SX1278_SPIRead>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f103 0213 	add.w	r2, r3, #19
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fdb3 	bl	8005fd0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	7bfa      	ldrb	r2, [r7, #15]
 800646e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff ff51 	bl	800631a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	460b      	mov	r3, r1
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	7afa      	ldrb	r2, [r7, #11]
 8006498:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fe0c 	bl	80060b8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80064a0:	2287      	movs	r2, #135	; 0x87
 80064a2:	214d      	movs	r1, #77	; 0x4d
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fd6a 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80064aa:	2200      	movs	r2, #0
 80064ac:	2124      	movs	r1, #36	; 0x24
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fd65 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80064b4:	2241      	movs	r2, #65	; 0x41
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7ff fd60 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff ff2b 	bl	800631a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80064c4:	22f7      	movs	r2, #247	; 0xf7
 80064c6:	2111      	movs	r1, #17
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff fd58 	bl	8005f7e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	461a      	mov	r2, r3
 80064d2:	2122      	movs	r1, #34	; 0x22
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fd52 	bl	8005f7e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80064da:	210e      	movs	r1, #14
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fd2f 	bl	8005f40 <SX1278_SPIRead>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	461a      	mov	r2, r3
 80064ea:	210d      	movs	r1, #13
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff fd46 	bl	8005f7e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80064f2:	2122      	movs	r1, #34	; 0x22
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff fd23 	bl	8005f40 <SX1278_SPIRead>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80064fe:	7dba      	ldrb	r2, [r7, #22]
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	429a      	cmp	r2, r3
 8006504:	d104      	bne.n	8006510 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2202      	movs	r2, #2
 800650a:	749a      	strb	r2, [r3, #18]
			return 1;
 800650c:	2301      	movs	r3, #1
 800650e:	e00e      	b.n	800652e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	607b      	str	r3, [r7, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ea      	bne.n	80064f2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f8c6 	bl	80066b2 <SX1278_hw_Reset>
			SX1278_config(module);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fdc6 	bl	80060b8 <SX1278_config>
			return 0;
 800652c:	2300      	movs	r3, #0
		}
	}
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	2100      	movs	r1, #0
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff fd78 	bl	8006042 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8006552:	228b      	movs	r2, #139	; 0x8b
 8006554:	2101      	movs	r1, #1
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fd11 	bl	8005f7e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 f91b 	bl	800679c <SX1278_hw_GetDIO0>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800656c:	2112      	movs	r1, #18
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fce6 	bl	8005f40 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7ff fed0 	bl	800631a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fea0 	bl	80062c0 <SX1278_standby>
			return 1;
 8006580:	2301      	movs	r3, #1
 8006582:	e013      	b.n	80065ac <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f88c 	bl	80066b2 <SX1278_hw_Reset>
			SX1278_config(module);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fd8c 	bl	80060b8 <SX1278_config>
			return 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e003      	b.n	80065ac <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80065a4:	2001      	movs	r0, #1
 80065a6:	f000 f8ee 	bl	8006786 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80065aa:	e7d7      	b.n	800655c <SX1278_LoRaTxPacket+0x26>
	}
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f848 	bl	800665a <SX1278_hw_init>
	module->frequency = frequency;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	609a      	str	r2, [r3, #8]
	module->power = power;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	7e3a      	ldrb	r2, [r7, #24]
 80065d8:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	7f3a      	ldrb	r2, [r7, #28]
 80065de:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80065e6:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80065ee:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80065f6:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80065fe:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff fd59 	bl	80060b8 <SX1278_config>
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006622:	79fa      	ldrb	r2, [r7, #7]
 8006624:	429a      	cmp	r2, r3
 8006626:	d003      	beq.n	8006630 <SX1278_read+0x22>
		length = module->readBytes;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800662e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3313      	adds	r3, #19
 8006634:	79fa      	ldrb	r2, [r7, #7]
 8006636:	4619      	mov	r1, r3
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f006 f962 	bl	800c902 <memcpy>
	rxBuf[length] = '\0';
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	4413      	add	r3, r2
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 8006650:	79fb      	ldrb	r3, [r7, #7]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f80d 	bl	8006684 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6858      	ldr	r0, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	2201      	movs	r2, #1
 8006676:	4619      	mov	r1, r3
 8006678:	f002 feaf 	bl	80093da <HAL_GPIO_WritePin>
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6958      	ldr	r0, [r3, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	b299      	uxth	r1, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	f002 fe98 	bl	80093da <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80066ba:	2101      	movs	r1, #1
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ffe1 	bl	8006684 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6858      	ldr	r0, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2200      	movs	r2, #0
 80066ce:	4619      	mov	r1, r3
 80066d0:	f002 fe83 	bl	80093da <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80066d4:	2001      	movs	r0, #1
 80066d6:	f000 f856 	bl	8006786 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6858      	ldr	r0, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2201      	movs	r2, #1
 80066e6:	4619      	mov	r1, r3
 80066e8:	f002 fe77 	bl	80093da <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80066ec:	2064      	movs	r0, #100	; 0x64
 80066ee:	f000 f84a 	bl	8006786 <SX1278_hw_DelayMs>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ffbb 	bl	8006684 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6998      	ldr	r0, [r3, #24]
 8006712:	1cf9      	adds	r1, r7, #3
 8006714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006718:	2201      	movs	r2, #1
 800671a:	f005 f88f 	bl	800b83c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800671e:	bf00      	nop
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	4618      	mov	r0, r3
 8006726:	f005 fb7c 	bl	800be22 <HAL_SPI_GetState>
 800672a:	4603      	mov	r3, r0
 800672c:	2b01      	cmp	r3, #1
 800672e:	d1f7      	bne.n	8006720 <SX1278_hw_SPICommand+0x26>
		;
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af02      	add	r7, sp, #8
 8006740:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8006746:	2300      	movs	r3, #0
 8006748:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff99 	bl	8006684 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6998      	ldr	r0, [r3, #24]
 8006756:	f107 020e 	add.w	r2, r7, #14
 800675a:	f107 010f 	add.w	r1, r7, #15
 800675e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	2301      	movs	r3, #1
 8006766:	f005 f9ac 	bl	800bac2 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800676a:	bf00      	nop
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	4618      	mov	r0, r3
 8006772:	f005 fb56 	bl	800be22 <HAL_SPI_GetState>
 8006776:	4603      	mov	r3, r0
 8006778:	2b01      	cmp	r3, #1
 800677a:	d1f7      	bne.n	800676c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800677c:	7bbb      	ldrb	r3, [r7, #14]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fdb2 	bl	80082f8 <HAL_Delay>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f002 fdfb 	bl	80093ac <HAL_GPIO_ReadPin>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	0000      	movs	r0, r0
 80067cc:	0000      	movs	r0, r0
	...

080067d0 <LORA_IF_Init>:
struct AES_ctx ctx;
static uint8_t AES_CTR_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CTR_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
// Create the handle for the sensor.

void LORA_IF_Init(){
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af06      	add	r7, sp, #24
	  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80067d6:	4b22      	ldr	r3, [pc, #136]	; (8006860 <LORA_IF_Init+0x90>)
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <LORA_IF_Init+0x94>)
 80067da:	60da      	str	r2, [r3, #12]
	  SX1278_hw.dio0.pin = DIO0_Pin;
 80067dc:	4b20      	ldr	r3, [pc, #128]	; (8006860 <LORA_IF_Init+0x90>)
 80067de:	2202      	movs	r2, #2
 80067e0:	609a      	str	r2, [r3, #8]
	  SX1278_hw.nss.port = NSS_GPIO_Port;
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <LORA_IF_Init+0x90>)
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <LORA_IF_Init+0x98>)
 80067e6:	615a      	str	r2, [r3, #20]
	  SX1278_hw.nss.pin = NSS_Pin;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <LORA_IF_Init+0x90>)
 80067ea:	2210      	movs	r2, #16
 80067ec:	611a      	str	r2, [r3, #16]
	  SX1278_hw.reset.port = RESET_GPIO_Port;
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <LORA_IF_Init+0x90>)
 80067f0:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <LORA_IF_Init+0x94>)
 80067f2:	605a      	str	r2, [r3, #4]
	  SX1278_hw.reset.pin = RESET_Pin;
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <LORA_IF_Init+0x90>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
	  SX1278_hw.spi = &hspi1;
 80067fa:	4b19      	ldr	r3, [pc, #100]	; (8006860 <LORA_IF_Init+0x90>)
 80067fc:	4a1b      	ldr	r2, [pc, #108]	; (800686c <LORA_IF_Init+0x9c>)
 80067fe:	619a      	str	r2, [r3, #24]
	  /* USER CODE END 2 */
	  SX1278.hw = &SX1278_hw;
 8006800:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <LORA_IF_Init+0xa0>)
 8006802:	4a17      	ldr	r2, [pc, #92]	; (8006860 <LORA_IF_Init+0x90>)
 8006804:	601a      	str	r2, [r3, #0]
	  SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 8006806:	2310      	movs	r3, #16
 8006808:	9305      	str	r3, [sp, #20]
 800680a:	2300      	movs	r3, #0
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	2300      	movs	r3, #0
 8006810:	9303      	str	r3, [sp, #12]
 8006812:	2307      	movs	r3, #7
 8006814:	9302      	str	r3, [sp, #8]
 8006816:	2306      	movs	r3, #6
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	2301      	movs	r3, #1
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	a30e      	add	r3, pc, #56	; (adr r3, 8006858 <LORA_IF_Init+0x88>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	4812      	ldr	r0, [pc, #72]	; (8006870 <LORA_IF_Init+0xa0>)
 8006826:	f7ff fec5 	bl	80065b4 <SX1278_init>
			  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
	  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 800682a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800682e:	2110      	movs	r1, #16
 8006830:	480f      	ldr	r0, [pc, #60]	; (8006870 <LORA_IF_Init+0xa0>)
 8006832:	f7ff fd7f 	bl	8006334 <SX1278_LoRaEntryRx>
 8006836:	4603      	mov	r3, r0
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <LORA_IF_Init+0xa4>)
 800683c:	701a      	strb	r2, [r3, #0]
	  UI_DisplayInformation();
 800683e:	f000 f9c5 	bl	8006bcc <UI_DisplayInformation>
	  LORA_IF_RECIEVE();
 8006842:	f000 f81d 	bl	8006880 <LORA_IF_RECIEVE>
	  Node_Address = FUNC_ReaddataAddress(FLAG_NODE_ID);
 8006846:	480c      	ldr	r0, [pc, #48]	; (8006878 <LORA_IF_Init+0xa8>)
 8006848:	f000 fe0c 	bl	8007464 <FUNC_ReaddataAddress>
 800684c:	4603      	mov	r3, r0
 800684e:	4a0b      	ldr	r2, [pc, #44]	; (800687c <LORA_IF_Init+0xac>)
 8006850:	6013      	str	r3, [r2, #0]
//	  // Check Sensor Init Read;
//	  FUNC_get_DHT_val((uint8_t* ) buffer_DHT);
//	  MQ2_Val = FUNC_get_MQ_val();
}
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	19cf0e40 	.word	0x19cf0e40
 800685c:	00000000 	.word	0x00000000
 8006860:	200007e0 	.word	0x200007e0
 8006864:	40010c00 	.word	0x40010c00
 8006868:	40010800 	.word	0x40010800
 800686c:	200006f8 	.word	0x200006f8
 8006870:	200007fc 	.word	0x200007fc
 8006874:	200004e3 	.word	0x200004e3
 8006878:	0801fc04 	.word	0x0801fc04
 800687c:	2000050c 	.word	0x2000050c

08006880 <LORA_IF_RECIEVE>:
void LORA_IF_RECIEVE(){
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
	while(1){


        FUNC_get_DHT_val((uint8_t *)buffer_DHT);
 8006886:	4837      	ldr	r0, [pc, #220]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 8006888:	f000 fd6c 	bl	8007364 <FUNC_get_DHT_val>
		UI_Display_DataValue((uint8_t*) buffer_DHT , MQ2_Val);
 800688c:	4b36      	ldr	r3, [pc, #216]	; (8006968 <LORA_IF_RECIEVE+0xe8>)
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	4619      	mov	r1, r3
 8006892:	4834      	ldr	r0, [pc, #208]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 8006894:	f000 fa00 	bl	8006c98 <UI_Display_DataValue>

		uint32_t local_u32addrNode_req = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	607b      	str	r3, [r7, #4]
		if(Address_Receive == Node_Address){
 800689c:	4b33      	ldr	r3, [pc, #204]	; (800696c <LORA_IF_RECIEVE+0xec>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b33      	ldr	r3, [pc, #204]	; (8006970 <LORA_IF_RECIEVE+0xf0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1ee      	bne.n	8006886 <LORA_IF_RECIEVE+0x6>
			// reset data
			Address_Receive = 0;
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <LORA_IF_RECIEVE+0xec>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
			gl_Status_Flag = buffer_resp[4];
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <LORA_IF_RECIEVE+0xf4>)
 80068b0:	791a      	ldrb	r2, [r3, #4]
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <LORA_IF_RECIEVE+0xf8>)
 80068b4:	701a      	strb	r2, [r3, #0]
			// Test Jump to FBL
			switch (gl_Status_Flag) {
 80068b6:	4b30      	ldr	r3, [pc, #192]	; (8006978 <LORA_IF_RECIEVE+0xf8>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d002      	beq.n	80068c4 <LORA_IF_RECIEVE+0x44>
 80068be:	2b8c      	cmp	r3, #140	; 0x8c
 80068c0:	d007      	beq.n	80068d2 <LORA_IF_RECIEVE+0x52>
				LORA_IF_SEND((uint8_t*)buffer_send);
				// change to mode Receives
				ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
				break;
			default:
				break;
 80068c2:	e04d      	b.n	8006960 <LORA_IF_RECIEVE+0xe0>
				FUNC_EraseAndRestore_Header_Page(BL_FLASHING_STATE , BL_BRANCHING_FLAG_SET);
 80068c4:	2100      	movs	r1, #0
 80068c6:	482d      	ldr	r0, [pc, #180]	; (800697c <LORA_IF_RECIEVE+0xfc>)
 80068c8:	f000 fdda 	bl	8007480 <FUNC_EraseAndRestore_Header_Page>
				UI_InitBoot();
 80068cc:	f000 f92e 	bl	8006b2c <UI_InitBoot>
				break;
 80068d0:	e046      	b.n	8006960 <LORA_IF_RECIEVE+0xe0>
				buffer_send[0] = (Node_Address>>SHIFT_24_BIT)&0xff;
 80068d2:	4b27      	ldr	r3, [pc, #156]	; (8006970 <LORA_IF_RECIEVE+0xf0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	0e1b      	lsrs	r3, r3, #24
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	4b29      	ldr	r3, [pc, #164]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 80068dc:	701a      	strb	r2, [r3, #0]
				buffer_send[1] = (Node_Address>>SHIFT_16_BIT)&0xff;
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <LORA_IF_RECIEVE+0xf0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	4b26      	ldr	r3, [pc, #152]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 80068e8:	705a      	strb	r2, [r3, #1]
				buffer_send[2] = (Node_Address>>SHIFT_8_BIT)&0xff;
 80068ea:	4b21      	ldr	r3, [pc, #132]	; (8006970 <LORA_IF_RECIEVE+0xf0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	4b23      	ldr	r3, [pc, #140]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 80068f4:	709a      	strb	r2, [r3, #2]
				buffer_send[3] = (Node_Address>>SHIFT_0_BIT)&0xff;
 80068f6:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <LORA_IF_RECIEVE+0xf0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 80068fe:	70da      	strb	r2, [r3, #3]
				buffer_send[4] = TEMP;
 8006900:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006902:	2201      	movs	r2, #1
 8006904:	711a      	strb	r2, [r3, #4]
				buffer_send[5] = buffer_DHT[0];
 8006906:	4b17      	ldr	r3, [pc, #92]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 800690c:	715a      	strb	r2, [r3, #5]
				buffer_send[6] = buffer_DHT[1];
 800690e:	4b15      	ldr	r3, [pc, #84]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 8006910:	785a      	ldrb	r2, [r3, #1]
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006914:	719a      	strb	r2, [r3, #6]
				buffer_send[7] = TEMP;
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006918:	2201      	movs	r2, #1
 800691a:	71da      	strb	r2, [r3, #7]
				buffer_send[8] = buffer_DHT[2];
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 800691e:	789a      	ldrb	r2, [r3, #2]
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006922:	721a      	strb	r2, [r3, #8]
				buffer_send[9] = buffer_DHT[3];
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <LORA_IF_RECIEVE+0xe4>)
 8006926:	78da      	ldrb	r2, [r3, #3]
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 800692a:	725a      	strb	r2, [r3, #9]
				buffer_send[10] = GAS;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 800692e:	2203      	movs	r2, #3
 8006930:	729a      	strb	r2, [r3, #10]
				buffer_send[11] = 0;
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006934:	2200      	movs	r2, #0
 8006936:	72da      	strb	r2, [r3, #11]
				buffer_send[12] = 0>>SHIFT_8_BIT;
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 800693a:	2200      	movs	r2, #0
 800693c:	731a      	strb	r2, [r3, #12]
				HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800693e:	2007      	movs	r0, #7
 8006940:	f002 f835 	bl	80089ae <HAL_NVIC_DisableIRQ>
				LORA_IF_SEND((uint8_t*)buffer_send);
 8006944:	480e      	ldr	r0, [pc, #56]	; (8006980 <LORA_IF_RECIEVE+0x100>)
 8006946:	f000 f821 	bl	800698c <LORA_IF_SEND>
				ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 800694a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800694e:	2110      	movs	r1, #16
 8006950:	480c      	ldr	r0, [pc, #48]	; (8006984 <LORA_IF_RECIEVE+0x104>)
 8006952:	f7ff fcef 	bl	8006334 <SX1278_LoRaEntryRx>
 8006956:	4603      	mov	r3, r0
 8006958:	b2da      	uxtb	r2, r3
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <LORA_IF_RECIEVE+0x108>)
 800695c:	701a      	strb	r2, [r3, #0]
				break;
 800695e:	bf00      	nop
	while(1){
 8006960:	e791      	b.n	8006886 <LORA_IF_RECIEVE+0x6>
 8006962:	bf00      	nop
 8006964:	20000504 	.word	0x20000504
 8006968:	20000508 	.word	0x20000508
 800696c:	20000510 	.word	0x20000510
 8006970:	2000050c 	.word	0x2000050c
 8006974:	200004e4 	.word	0x200004e4
 8006978:	200004e2 	.word	0x200004e2
 800697c:	0801fc00 	.word	0x0801fc00
 8006980:	200004f4 	.word	0x200004f4
 8006984:	200007fc 	.word	0x200007fc
 8006988:	200004e3 	.word	0x200004e3

0800698c <LORA_IF_SEND>:
			}
		}
	}
}

void LORA_IF_SEND(uint8_t *buffer_send){
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	AES_init_ctx_iv(&ctx, AES_CTR_128_Key, AES_CTR_128_IV);
 8006994:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <LORA_IF_SEND+0x90>)
 8006996:	4922      	ldr	r1, [pc, #136]	; (8006a20 <LORA_IF_SEND+0x94>)
 8006998:	4822      	ldr	r0, [pc, #136]	; (8006a24 <LORA_IF_SEND+0x98>)
 800699a:	f000 fabd 	bl	8006f18 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_send, 16);
 800699e:	2210      	movs	r2, #16
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4820      	ldr	r0, [pc, #128]	; (8006a24 <LORA_IF_SEND+0x98>)
 80069a4:	f000 fc7b 	bl	800729e <AES_CTR_xcrypt_buffer>
	//init to TX mode
	ret = SX1278_LoRaEntryTx(&SX1278, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80069a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80069ac:	2110      	movs	r1, #16
 80069ae:	481e      	ldr	r0, [pc, #120]	; (8006a28 <LORA_IF_SEND+0x9c>)
 80069b0:	f7ff fd69 	bl	8006486 <SX1278_LoRaEntryTx>
 80069b4:	4603      	mov	r3, r0
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <LORA_IF_SEND+0xa0>)
 80069ba:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer_send, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 80069bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80069c0:	2210      	movs	r2, #16
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4818      	ldr	r0, [pc, #96]	; (8006a28 <LORA_IF_SEND+0x9c>)
 80069c6:	f7ff fdb6 	bl	8006536 <SX1278_LoRaTxPacket>
 80069ca:	4603      	mov	r3, r0
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <LORA_IF_SEND+0xa0>)
 80069d0:	701a      	strb	r2, [r3, #0]
	if(ret){
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <LORA_IF_SEND+0xa0>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <LORA_IF_SEND+0x58>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80069da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069de:	4814      	ldr	r0, [pc, #80]	; (8006a30 <LORA_IF_SEND+0xa4>)
 80069e0:	f002 fd13 	bl	800940a <HAL_GPIO_TogglePin>
	}

	__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 80069e4:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <LORA_IF_SEND+0xa8>)
 80069e6:	7d1a      	ldrb	r2, [r3, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f042 0202 	orr.w	r2, r2, #2
 80069ee:	751a      	strb	r2, [r3, #20]
 80069f0:	7d5a      	ldrb	r2, [r3, #21]
 80069f2:	2200      	movs	r2, #0
 80069f4:	755a      	strb	r2, [r3, #21]
 80069f6:	7d9a      	ldrb	r2, [r3, #22]
 80069f8:	2200      	movs	r2, #0
 80069fa:	759a      	strb	r2, [r3, #22]
 80069fc:	7dda      	ldrb	r2, [r3, #23]
 80069fe:	2200      	movs	r2, #0
 8006a00:	75da      	strb	r2, [r3, #23]
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006a02:	2007      	movs	r0, #7
 8006a04:	f001 ffc5 	bl	8008992 <HAL_NVIC_EnableIRQ>

	// Reset Buffer to default
	memset((uint8_t*)buffer_resp , 0xff , 16);
 8006a08:	2210      	movs	r2, #16
 8006a0a:	21ff      	movs	r1, #255	; 0xff
 8006a0c:	480a      	ldr	r0, [pc, #40]	; (8006a38 <LORA_IF_SEND+0xac>)
 8006a0e:	f005 fefc 	bl	800c80a <memset>
	//ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);

}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000010 	.word	0x20000010
 8006a20:	20000000 	.word	0x20000000
 8006a24:	20000514 	.word	0x20000514
 8006a28:	200007fc 	.word	0x200007fc
 8006a2c:	200004e3 	.word	0x200004e3
 8006a30:	40010c00 	.word	0x40010c00
 8006a34:	40010400 	.word	0x40010400
 8006a38:	200004e4 	.word	0x200004e4

08006a3c <HAL_GPIO_EXTI_Callback>:
//    // Read DHT value
//	 MQ2_Val = FUNC_get_MQ_val();
//	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//  }
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	80fb      	strh	r3, [r7, #6]
	uint32_t address_break = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
	Node_Address = FUNC_ReaddataAddress(FLAG_NODE_ID);
 8006a4a:	482d      	ldr	r0, [pc, #180]	; (8006b00 <HAL_GPIO_EXTI_Callback+0xc4>)
 8006a4c:	f000 fd0a 	bl	8007464 <FUNC_ReaddataAddress>
 8006a50:	4603      	mov	r3, r0
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_GPIO_EXTI_Callback+0xc8>)
 8006a54:	6013      	str	r3, [r2, #0]
	if(GPIO_Pin == DIO0_Pin){
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d14d      	bne.n	8006af8 <HAL_GPIO_EXTI_Callback+0xbc>
			ret = SX1278_LoRaRxPacket(&SX1278);
 8006a5c:	482a      	ldr	r0, [pc, #168]	; (8006b08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8006a5e:	f7ff fcce 	bl	80063fe <SX1278_LoRaRxPacket>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8006a68:	701a      	strb	r2, [r3, #0]
			if(ret > 0 ){
 8006a6a:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d042      	beq.n	8006af8 <HAL_GPIO_EXTI_Callback+0xbc>
				ret = SX1278_read(&SX1278, (uint8_t*) buffer_resp, ret);
 8006a72:	4b26      	ldr	r3, [pc, #152]	; (8006b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	4925      	ldr	r1, [pc, #148]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006a7a:	4823      	ldr	r0, [pc, #140]	; (8006b08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8006a7c:	f7ff fdc7 	bl	800660e <SX1278_read>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8006a86:	701a      	strb	r2, [r3, #0]
				AES_init_ctx_iv(&ctx, AES_CTR_128_Key, AES_CTR_128_IV);
 8006a88:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006a8a:	4923      	ldr	r1, [pc, #140]	; (8006b18 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006a8c:	4823      	ldr	r0, [pc, #140]	; (8006b1c <HAL_GPIO_EXTI_Callback+0xe0>)
 8006a8e:	f000 fa43 	bl	8006f18 <AES_init_ctx_iv>
				AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_resp, 16);
 8006a92:	2210      	movs	r2, #16
 8006a94:	491e      	ldr	r1, [pc, #120]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006a96:	4821      	ldr	r0, [pc, #132]	; (8006b1c <HAL_GPIO_EXTI_Callback+0xe0>)
 8006a98:	f000 fc01 	bl	800729e <AES_CTR_xcrypt_buffer>
				Address_Receive = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	061a      	lsls	r2, r3, #24
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
													|(buffer_resp[2]<<SHIFT_8_BIT)|(buffer_resp[3]<<SHIFT_0_BIT);
 8006aaa:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006aac:	789b      	ldrb	r3, [r3, #2]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8006ab4:	78d2      	ldrb	r2, [r2, #3]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	461a      	mov	r2, r3
				Address_Receive = (buffer_resp[0]<<SHIFT_24_BIT)|(buffer_resp[1]<<SHIFT_16_BIT)
 8006aba:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <HAL_GPIO_EXTI_Callback+0xe4>)
 8006abc:	601a      	str	r2, [r3, #0]
				if (Address_Receive == Node_Address){
 8006abe:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <HAL_GPIO_EXTI_Callback+0xe4>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <HAL_GPIO_EXTI_Callback+0xc8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d116      	bne.n	8006af8 <HAL_GPIO_EXTI_Callback+0xbc>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8006aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ace:	4815      	ldr	r0, [pc, #84]	; (8006b24 <HAL_GPIO_EXTI_Callback+0xe8>)
 8006ad0:	f002 fc9b 	bl	800940a <HAL_GPIO_TogglePin>
					HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8006ad4:	2007      	movs	r0, #7
 8006ad6:	f001 ff6a 	bl	80089ae <HAL_NVIC_DisableIRQ>
					__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <HAL_GPIO_EXTI_Callback+0xec>)
 8006adc:	7d1a      	ldrb	r2, [r3, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0202 	orr.w	r2, r2, #2
 8006ae4:	751a      	strb	r2, [r3, #20]
 8006ae6:	7d5a      	ldrb	r2, [r3, #21]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	755a      	strb	r2, [r3, #21]
 8006aec:	7d9a      	ldrb	r2, [r3, #22]
 8006aee:	2200      	movs	r2, #0
 8006af0:	759a      	strb	r2, [r3, #22]
 8006af2:	7dda      	ldrb	r2, [r3, #23]
 8006af4:	2200      	movs	r2, #0
 8006af6:	75da      	strb	r2, [r3, #23]
				}
			}

	}
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	0801fc04 	.word	0x0801fc04
 8006b04:	2000050c 	.word	0x2000050c
 8006b08:	200007fc 	.word	0x200007fc
 8006b0c:	200004e3 	.word	0x200004e3
 8006b10:	200004e4 	.word	0x200004e4
 8006b14:	20000010 	.word	0x20000010
 8006b18:	20000000 	.word	0x20000000
 8006b1c:	20000514 	.word	0x20000514
 8006b20:	20000510 	.word	0x20000510
 8006b24:	40010c00 	.word	0x40010c00
 8006b28:	40010400 	.word	0x40010400

08006b2c <UI_InitBoot>:
static uint32_t ActiveRegionAddress;
static uint32_t Node_ID;
/**********************************************
 * FUNCTION
 * ********************************************/
void UI_InitBoot(void){
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8006b32:	f7ff f964 	bl	8005dfe <SSD1306_Clear>
	Node_ID = FUNC_ReaddataAddress(FLAG_NODE_ID);
 8006b36:	481d      	ldr	r0, [pc, #116]	; (8006bac <UI_InitBoot+0x80>)
 8006b38:	f000 fc94 	bl	8007464 <FUNC_ReaddataAddress>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <UI_InitBoot+0x84>)
 8006b40:	6013      	str	r3, [r2, #0]
	char buffer_data_id[4];
	sprintf(buffer_data_id, "%X", Node_ID);
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <UI_InitBoot+0x84>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	491a      	ldr	r1, [pc, #104]	; (8006bb4 <UI_InitBoot+0x88>)
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f005 fdfa 	bl	800c744 <siprintf>
	SSD1306_Init();
 8006b50:	f7fe ff22 	bl	8005998 <SSD1306_Init>
	SSD1306_GotoXY (0,10); // goto 10, 10
 8006b54:	210a      	movs	r1, #10
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7ff f896 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts("FUOTA INIT", &Font_11x18, 1); // print start FUOTA
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4916      	ldr	r1, [pc, #88]	; (8006bb8 <UI_InitBoot+0x8c>)
 8006b60:	4816      	ldr	r0, [pc, #88]	; (8006bbc <UI_InitBoot+0x90>)
 8006b62:	f7ff f927 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8006b66:	2128      	movs	r1, #40	; 0x28
 8006b68:	2005      	movs	r0, #5
 8006b6a:	f7ff f88d 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts ("Updating!!", &Font_7x10, 1);
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4913      	ldr	r1, [pc, #76]	; (8006bc0 <UI_InitBoot+0x94>)
 8006b72:	4814      	ldr	r0, [pc, #80]	; (8006bc4 <UI_InitBoot+0x98>)
 8006b74:	f7ff f91e 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 50);
 8006b78:	2132      	movs	r1, #50	; 0x32
 8006b7a:	2005      	movs	r0, #5
 8006b7c:	f7ff f884 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts ("NODE ID:", &Font_7x10, 1);
 8006b80:	2201      	movs	r2, #1
 8006b82:	490f      	ldr	r1, [pc, #60]	; (8006bc0 <UI_InitBoot+0x94>)
 8006b84:	4810      	ldr	r0, [pc, #64]	; (8006bc8 <UI_InitBoot+0x9c>)
 8006b86:	f7ff f915 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (60, 50);
 8006b8a:	2132      	movs	r1, #50	; 0x32
 8006b8c:	203c      	movs	r0, #60	; 0x3c
 8006b8e:	f7ff f87b 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_data_id, &Font_7x10, 1);
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	2201      	movs	r2, #1
 8006b96:	490a      	ldr	r1, [pc, #40]	; (8006bc0 <UI_InitBoot+0x94>)
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff f90b 	bl	8005db4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8006b9e:	f7fe ffbf 	bl	8005b20 <SSD1306_UpdateScreen>
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	0801fc04 	.word	0x0801fc04
 8006bb0:	200005d8 	.word	0x200005d8
 8006bb4:	0800d874 	.word	0x0800d874
 8006bb8:	20000028 	.word	0x20000028
 8006bbc:	0800d878 	.word	0x0800d878
 8006bc0:	20000020 	.word	0x20000020
 8006bc4:	0800d884 	.word	0x0800d884
 8006bc8:	0800d890 	.word	0x0800d890

08006bcc <UI_DisplayInformation>:
void UI_DisplayInformation(void){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8006bd2:	f7fe fee1 	bl	8005998 <SSD1306_Init>
	gl_appver = FUNC_ReaddataAddress(FLAG_STATUS_BANKFIRST_APP_VER_ADDRESS);
 8006bd6:	4827      	ldr	r0, [pc, #156]	; (8006c74 <UI_DisplayInformation+0xa8>)
 8006bd8:	f000 fc44 	bl	8007464 <FUNC_ReaddataAddress>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <UI_DisplayInformation+0xac>)
 8006be0:	6013      	str	r3, [r2, #0]
	Node_ID = FUNC_ReaddataAddress(FLAG_NODE_ID);
 8006be2:	4826      	ldr	r0, [pc, #152]	; (8006c7c <UI_DisplayInformation+0xb0>)
 8006be4:	f000 fc3e 	bl	8007464 <FUNC_ReaddataAddress>
 8006be8:	4603      	mov	r3, r0
 8006bea:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <UI_DisplayInformation+0xb4>)
 8006bec:	6013      	str	r3, [r2, #0]

	// Extract the major and minor version numbers from gl_appver
	uint8_t major_version = (gl_appver >> 8) & 0xFF; // Extract major version (e.g., 1 from 0x00000131)
 8006bee:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <UI_DisplayInformation+0xac>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	75fb      	strb	r3, [r7, #23]
	uint8_t minor_version = gl_appver & 0xFF; // Extract minor version (e.g., 3 from 0x00000131)
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <UI_DisplayInformation+0xac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	75bb      	strb	r3, [r7, #22]

	char buffer_version[10];
	char buffer_data_id[10];
	sprintf(buffer_version, "%d.%d", major_version, minor_version);
 8006bfc:	7dfa      	ldrb	r2, [r7, #23]
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	f107 000c 	add.w	r0, r7, #12
 8006c04:	491f      	ldr	r1, [pc, #124]	; (8006c84 <UI_DisplayInformation+0xb8>)
 8006c06:	f005 fd9d 	bl	800c744 <siprintf>
	sprintf(buffer_data_id, "%X", Node_ID);
 8006c0a:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <UI_DisplayInformation+0xb4>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	463b      	mov	r3, r7
 8006c10:	491d      	ldr	r1, [pc, #116]	; (8006c88 <UI_DisplayInformation+0xbc>)
 8006c12:	4618      	mov	r0, r3
 8006c14:	f005 fd96 	bl	800c744 <siprintf>

	SSD1306_GotoXY(5, 10);
 8006c18:	210a      	movs	r1, #10
 8006c1a:	2005      	movs	r0, #5
 8006c1c:	f7ff f834 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts("Version:", &Font_7x10, 1);
 8006c20:	2201      	movs	r2, #1
 8006c22:	491a      	ldr	r1, [pc, #104]	; (8006c8c <UI_DisplayInformation+0xc0>)
 8006c24:	481a      	ldr	r0, [pc, #104]	; (8006c90 <UI_DisplayInformation+0xc4>)
 8006c26:	f7ff f8c5 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY(60, 10);
 8006c2a:	210a      	movs	r1, #10
 8006c2c:	203c      	movs	r0, #60	; 0x3c
 8006c2e:	f7ff f82b 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts(buffer_version, &Font_7x10, 1);
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	2201      	movs	r2, #1
 8006c38:	4914      	ldr	r1, [pc, #80]	; (8006c8c <UI_DisplayInformation+0xc0>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff f8ba 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY(5, 20);
 8006c40:	2114      	movs	r1, #20
 8006c42:	2005      	movs	r0, #5
 8006c44:	f7ff f820 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts("Node ID:", &Font_7x10, 1);
 8006c48:	2201      	movs	r2, #1
 8006c4a:	4910      	ldr	r1, [pc, #64]	; (8006c8c <UI_DisplayInformation+0xc0>)
 8006c4c:	4811      	ldr	r0, [pc, #68]	; (8006c94 <UI_DisplayInformation+0xc8>)
 8006c4e:	f7ff f8b1 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY(60, 20);
 8006c52:	2114      	movs	r1, #20
 8006c54:	203c      	movs	r0, #60	; 0x3c
 8006c56:	f7ff f817 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts(buffer_data_id, &Font_7x10, 1);
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	490b      	ldr	r1, [pc, #44]	; (8006c8c <UI_DisplayInformation+0xc0>)
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff f8a7 	bl	8005db4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Update screen
 8006c66:	f7fe ff5b 	bl	8005b20 <SSD1306_UpdateScreen>

}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	0801fc10 	.word	0x0801fc10
 8006c78:	200005d4 	.word	0x200005d4
 8006c7c:	0801fc04 	.word	0x0801fc04
 8006c80:	200005d8 	.word	0x200005d8
 8006c84:	0800d89c 	.word	0x0800d89c
 8006c88:	0800d874 	.word	0x0800d874
 8006c8c:	20000020 	.word	0x20000020
 8006c90:	0800d8a4 	.word	0x0800d8a4
 8006c94:	0800d8b0 	.word	0x0800d8b0

08006c98 <UI_Display_DataValue>:
void UI_Display_DataValue(uint8_t *buffer_DHT ,uint16_t MQ2_Val){
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
	uint8_t  buffer_DHT_TempH = buffer_DHT[0] ;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  buffer_DHT_TempL = buffer_DHT[1] ;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t  buffer_DHT_HumiH= buffer_DHT[2] ;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	789b      	ldrb	r3, [r3, #2]
 8006cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t  buffer_DHT_HumiL= buffer_DHT[3] ;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// Chuyển giá trị nhiệt độ và độ ẩm sang dạng chuỗi
	char temp_str[10];
	char humi_str[10];
	snprintf(temp_str, sizeof(temp_str), "%d.%dC", buffer_DHT_TempH, buffer_DHT_TempL);
 8006cc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ccc:	f107 0020 	add.w	r0, r7, #32
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <UI_Display_DataValue+0xc8>)
 8006cd6:	210a      	movs	r1, #10
 8006cd8:	f005 fd00 	bl	800c6dc <sniprintf>
	snprintf(humi_str, sizeof(humi_str), "%d.%d%%", buffer_DHT_HumiH, buffer_DHT_HumiL);
 8006cdc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006ce0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ce4:	f107 0014 	add.w	r0, r7, #20
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <UI_Display_DataValue+0xcc>)
 8006cee:	210a      	movs	r1, #10
 8006cf0:	f005 fcf4 	bl	800c6dc <sniprintf>
	// Chuyển giá trị MQ2 sang dạng chuỗi
	char mq2_str[10];
	snprintf(mq2_str, sizeof(mq2_str), "%u", MQ2_Val);
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	f107 0008 	add.w	r0, r7, #8
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <UI_Display_DataValue+0xd0>)
 8006cfc:	210a      	movs	r1, #10
 8006cfe:	f005 fced 	bl	800c6dc <sniprintf>
	SSD1306_GotoXY (5, 30);
 8006d02:	211e      	movs	r1, #30
 8006d04:	2005      	movs	r0, #5
 8006d06:	f7fe ffbf 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts ("Temp:", &Font_7x10, 1);
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4917      	ldr	r1, [pc, #92]	; (8006d6c <UI_Display_DataValue+0xd4>)
 8006d0e:	4818      	ldr	r0, [pc, #96]	; (8006d70 <UI_Display_DataValue+0xd8>)
 8006d10:	f7ff f850 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8006d14:	211e      	movs	r1, #30
 8006d16:	2028      	movs	r0, #40	; 0x28
 8006d18:	f7fe ffb6 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts (temp_str, &Font_7x10, 1);
 8006d1c:	f107 0320 	add.w	r3, r7, #32
 8006d20:	2201      	movs	r2, #1
 8006d22:	4912      	ldr	r1, [pc, #72]	; (8006d6c <UI_Display_DataValue+0xd4>)
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f845 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 40);
 8006d2a:	2128      	movs	r1, #40	; 0x28
 8006d2c:	2005      	movs	r0, #5
 8006d2e:	f7fe ffab 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts ("Humi:", &Font_7x10, 1);
 8006d32:	2201      	movs	r2, #1
 8006d34:	490d      	ldr	r1, [pc, #52]	; (8006d6c <UI_Display_DataValue+0xd4>)
 8006d36:	480f      	ldr	r0, [pc, #60]	; (8006d74 <UI_Display_DataValue+0xdc>)
 8006d38:	f7ff f83c 	bl	8005db4 <SSD1306_Puts>
	SSD1306_GotoXY (40, 40);
 8006d3c:	2128      	movs	r1, #40	; 0x28
 8006d3e:	2028      	movs	r0, #40	; 0x28
 8006d40:	f7fe ffa2 	bl	8005c88 <SSD1306_GotoXY>
	SSD1306_Puts (humi_str, &Font_7x10, 1);
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4908      	ldr	r1, [pc, #32]	; (8006d6c <UI_Display_DataValue+0xd4>)
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff f831 	bl	8005db4 <SSD1306_Puts>
	//SSD1306_GotoXY (5, 50);
	//SSD1306_Puts ("MQ2:", &Font_7x10, 1);
	//SSD1306_GotoXY (40, 50);
	//SSD1306_Puts (mq2_str, &Font_7x10, 1);
	SSD1306_UpdateScreen();
 8006d52:	f7fe fee5 	bl	8005b20 <SSD1306_UpdateScreen>
}
 8006d56:	bf00      	nop
 8006d58:	3730      	adds	r7, #48	; 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	0800d8bc 	.word	0x0800d8bc
 8006d64:	0800d8c4 	.word	0x0800d8c4
 8006d68:	0800d8cc 	.word	0x0800d8cc
 8006d6c:	20000020 	.word	0x20000020
 8006d70:	0800d8d0 	.word	0x0800d8d0
 8006d74:	0800d8d8 	.word	0x0800d8d8

08006d78 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	; 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e030      	b.n	8006dea <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	441a      	add	r2, r3
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	440b      	add	r3, r1
 8006d98:	7812      	ldrb	r2, [r2, #0]
 8006d9a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	3301      	adds	r3, #1
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	441a      	add	r2, r3
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	3301      	adds	r3, #1
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	440b      	add	r3, r1
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3302      	adds	r3, #2
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	440b      	add	r3, r1
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	3303      	adds	r3, #3
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	3303      	adds	r3, #3
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	440b      	add	r3, r1
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	3301      	adds	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d9cb      	bls.n	8006d88 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8006df0:	2304      	movs	r3, #4
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e081      	b.n	8006efa <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	4413      	add	r3, r2
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	3302      	adds	r3, #2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	3303      	adds	r3, #3
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d125      	bne.n	8006e82 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8006e36:	7b3b      	ldrb	r3, [r7, #12]
 8006e38:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8006e3a:	7b7b      	ldrb	r3, [r7, #13]
 8006e3c:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8006e4a:	7b3b      	ldrb	r3, [r7, #12]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b30      	ldr	r3, [pc, #192]	; (8006f10 <KeyExpansion+0x198>)
 8006e50:	5c9b      	ldrb	r3, [r3, r2]
 8006e52:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8006e54:	7b7b      	ldrb	r3, [r7, #13]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <KeyExpansion+0x198>)
 8006e5a:	5c9b      	ldrb	r3, [r3, r2]
 8006e5c:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	461a      	mov	r2, r3
 8006e62:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <KeyExpansion+0x198>)
 8006e64:	5c9b      	ldrb	r3, [r3, r2]
 8006e66:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <KeyExpansion+0x198>)
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8006e72:	7b3a      	ldrb	r2, [r7, #12]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	4926      	ldr	r1, [pc, #152]	; (8006f14 <KeyExpansion+0x19c>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	4053      	eors	r3, r2
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3b04      	subs	r3, #4
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	4413      	add	r3, r2
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	7b3a      	ldrb	r2, [r7, #12]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4403      	add	r3, r0
 8006ea0:	404a      	eors	r2, r1
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	7819      	ldrb	r1, [r3, #0]
 8006eb0:	7b7a      	ldrb	r2, [r7, #13]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4403      	add	r3, r0
 8006eba:	404a      	eors	r2, r1
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	7bba      	ldrb	r2, [r7, #14]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3302      	adds	r3, #2
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4403      	add	r3, r0
 8006ed4:	404a      	eors	r2, r1
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	3303      	adds	r3, #3
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	7819      	ldrb	r1, [r3, #0]
 8006ee4:	7bfa      	ldrb	r2, [r7, #15]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	3303      	adds	r3, #3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4403      	add	r3, r0
 8006eee:	404a      	eors	r2, r1
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b2b      	cmp	r3, #43	; 0x2b
 8006efe:	f67f af7a 	bls.w	8006df6 <KeyExpansion+0x7e>
  }
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3724      	adds	r7, #36	; 0x24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	0800d954 	.word	0x0800d954
 8006f14:	0800da54 	.word	0x0800da54

08006f18 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff ff25 	bl	8006d78 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	33b0      	adds	r3, #176	; 0xb0
 8006f32:	2210      	movs	r2, #16
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f005 fce3 	bl	800c902 <memcpy>
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
 8006f56:	e027      	b.n	8006fa8 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	75bb      	strb	r3, [r7, #22]
 8006f5c:	e01e      	b.n	8006f9c <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8006f5e:	7dfa      	ldrb	r2, [r7, #23]
 8006f60:	7dbb      	ldrb	r3, [r7, #22]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	440a      	add	r2, r1
 8006f68:	4413      	add	r3, r2
 8006f6a:	7818      	ldrb	r0, [r3, #0]
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	009a      	lsls	r2, r3, #2
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	4413      	add	r3, r2
 8006f74:	009a      	lsls	r2, r3, #2
 8006f76:	7dbb      	ldrb	r3, [r7, #22]
 8006f78:	4413      	add	r3, r2
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	7dfa      	ldrb	r2, [r7, #23]
 8006f84:	7dbb      	ldrb	r3, [r7, #22]
 8006f86:	4041      	eors	r1, r0
 8006f88:	b2c8      	uxtb	r0, r1
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	0092      	lsls	r2, r2, #2
 8006f8e:	440a      	add	r2, r1
 8006f90:	4413      	add	r3, r2
 8006f92:	4602      	mov	r2, r0
 8006f94:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8006f96:	7dbb      	ldrb	r3, [r7, #22]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	75bb      	strb	r3, [r7, #22]
 8006f9c:	7dbb      	ldrb	r3, [r7, #22]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d9dd      	bls.n	8006f5e <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d9d4      	bls.n	8006f58 <AddRoundKey+0x14>
    }
  }
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr
	...

08006fbc <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	e01d      	b.n	8007006 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73bb      	strb	r3, [r7, #14]
 8006fce:	e014      	b.n	8006ffa <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8006fd0:	7bba      	ldrb	r2, [r7, #14]
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	440a      	add	r2, r1
 8006fda:	4413      	add	r3, r2
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	7bba      	ldrb	r2, [r7, #14]
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	490c      	ldr	r1, [pc, #48]	; (8007018 <SubBytes+0x5c>)
 8006fe6:	5c08      	ldrb	r0, [r1, r0]
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	440a      	add	r2, r1
 8006fee:	4413      	add	r3, r2
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	73bb      	strb	r3, [r7, #14]
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d9e7      	bls.n	8006fd0 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	3301      	adds	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d9de      	bls.n	8006fca <SubBytes+0xe>
    }
  }
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr
 8007018:	0800d954 	.word	0x0800d954

0800701c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	795a      	ldrb	r2, [r3, #5]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7a5a      	ldrb	r2, [r3, #9]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7b5a      	ldrb	r2, [r3, #13]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7bfa      	ldrb	r2, [r7, #15]
 8007046:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	789b      	ldrb	r3, [r3, #2]
 800704c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7a9a      	ldrb	r2, [r3, #10]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	799b      	ldrb	r3, [r3, #6]
 8007060:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7b9a      	ldrb	r2, [r3, #14]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7bfa      	ldrb	r2, [r7, #15]
 800706e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	78db      	ldrb	r3, [r3, #3]
 8007074:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7bda      	ldrb	r2, [r3, #15]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7ada      	ldrb	r2, [r3, #11]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	79da      	ldrb	r2, [r3, #7]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	7bfa      	ldrb	r2, [r7, #15]
 8007092:	71da      	strb	r2, [r3, #7]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <xtime>:

static uint8_t xtime(uint8_t x)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	4603      	mov	r3, r0
 80070a6:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	b25a      	sxtb	r2, r3
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	09db      	lsrs	r3, r3, #7
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	4619      	mov	r1, r3
 80070b6:	0049      	lsls	r1, r1, #1
 80070b8:	440b      	add	r3, r1
 80070ba:	4619      	mov	r1, r3
 80070bc:	00c8      	lsls	r0, r1, #3
 80070be:	4619      	mov	r1, r3
 80070c0:	4603      	mov	r3, r0
 80070c2:	440b      	add	r3, r1
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	4053      	eors	r3, r2
 80070ca:	b25b      	sxtb	r3, r3
 80070cc:	b2db      	uxtb	r3, r3
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
 80070e4:	e0a4      	b.n	8007230 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80070ee:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80070f0:	7bfa      	ldrb	r2, [r7, #15]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	4053      	eors	r3, r2
 8007104:	b2da      	uxtb	r2, r3
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	789b      	ldrb	r3, [r3, #2]
 8007110:	4053      	eors	r3, r2
 8007112:	b2da      	uxtb	r2, r3
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	78db      	ldrb	r3, [r3, #3]
 800711e:	4053      	eors	r3, r2
 8007120:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8007122:	7bfa      	ldrb	r2, [r7, #15]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	4053      	eors	r3, r2
 8007136:	733b      	strb	r3, [r7, #12]
 8007138:	7b3b      	ldrb	r3, [r7, #12]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff ffaf 	bl	800709e <xtime>
 8007140:	4603      	mov	r3, r0
 8007142:	733b      	strb	r3, [r7, #12]
 8007144:	7bfa      	ldrb	r2, [r7, #15]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800714c:	7b3a      	ldrb	r2, [r7, #12]
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	4053      	eors	r3, r2
 8007152:	b2db      	uxtb	r3, r3
 8007154:	7bfa      	ldrb	r2, [r7, #15]
 8007156:	404b      	eors	r3, r1
 8007158:	b2d9      	uxtb	r1, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	785a      	ldrb	r2, [r3, #1]
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	4053      	eors	r3, r2
 8007176:	733b      	strb	r3, [r7, #12]
 8007178:	7b3b      	ldrb	r3, [r7, #12]
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff ff8f 	bl	800709e <xtime>
 8007180:	4603      	mov	r3, r0
 8007182:	733b      	strb	r3, [r7, #12]
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	7859      	ldrb	r1, [r3, #1]
 800718e:	7b3a      	ldrb	r2, [r7, #12]
 8007190:	7b7b      	ldrb	r3, [r7, #13]
 8007192:	4053      	eors	r3, r2
 8007194:	b2da      	uxtb	r2, r3
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	404a      	eors	r2, r1
 800719a:	b2d1      	uxtb	r1, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	460a      	mov	r2, r1
 80071a4:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	789a      	ldrb	r2, [r3, #2]
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	78db      	ldrb	r3, [r3, #3]
 80071ba:	4053      	eors	r3, r2
 80071bc:	733b      	strb	r3, [r7, #12]
 80071be:	7b3b      	ldrb	r3, [r7, #12]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff ff6c 	bl	800709e <xtime>
 80071c6:	4603      	mov	r3, r0
 80071c8:	733b      	strb	r3, [r7, #12]
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	7899      	ldrb	r1, [r3, #2]
 80071d4:	7b3a      	ldrb	r2, [r7, #12]
 80071d6:	7b7b      	ldrb	r3, [r7, #13]
 80071d8:	4053      	eors	r3, r2
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	404a      	eors	r2, r1
 80071e0:	b2d1      	uxtb	r1, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	460a      	mov	r2, r1
 80071ea:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	78da      	ldrb	r2, [r3, #3]
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	4053      	eors	r3, r2
 80071fa:	733b      	strb	r3, [r7, #12]
 80071fc:	7b3b      	ldrb	r3, [r7, #12]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff ff4d 	bl	800709e <xtime>
 8007204:	4603      	mov	r3, r0
 8007206:	733b      	strb	r3, [r7, #12]
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	78d9      	ldrb	r1, [r3, #3]
 8007212:	7b3a      	ldrb	r2, [r7, #12]
 8007214:	7b7b      	ldrb	r3, [r7, #13]
 8007216:	4053      	eors	r3, r2
 8007218:	b2da      	uxtb	r2, r3
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	404a      	eors	r2, r1
 800721e:	b2d1      	uxtb	r1, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	460a      	mov	r2, r1
 8007228:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	3301      	adds	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b03      	cmp	r3, #3
 8007234:	f67f af57 	bls.w	80070e6 <MixColumns+0xe>
  }
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	2000      	movs	r0, #0
 8007256:	f7ff fe75 	bl	8006f44 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff feac 	bl	8006fbc <SubBytes>
    ShiftRows(state);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fed9 	bl	800701c <ShiftRows>
    if (round == Nr) {
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b0a      	cmp	r3, #10
 800726e:	d00c      	beq.n	800728a <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff ff31 	bl	80070d8 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fe61 	bl	8006f44 <AddRoundKey>
  for (round = 1; ; ++round)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	3301      	adds	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8007288:	e7e9      	b.n	800725e <Cipher+0x1c>
      break;
 800728a:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	200a      	movs	r0, #10
 8007292:	f7ff fe57 	bl	8006f44 <AddRoundKey>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 800729e:	b590      	push	{r4, r7, lr}
 80072a0:	b08b      	sub	sp, #44	; 0x2c
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
 80072ae:	2310      	movs	r3, #16
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	e04e      	b.n	8007352 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d136      	bne.n	8007328 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	33b0      	adds	r3, #176	; 0xb0
 80072be:	f107 0410 	add.w	r4, r7, #16
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	6859      	ldr	r1, [r3, #4]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f107 0310 	add.w	r3, r7, #16
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff ffb4 	bl	8007242 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80072da:	230f      	movs	r3, #15
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	e01e      	b.n	800731e <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	4413      	add	r3, r2
 80072e6:	33b0      	adds	r3, #176	; 0xb0
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2bff      	cmp	r3, #255	; 0xff
 80072ec:	d106      	bne.n	80072fc <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	4413      	add	r3, r2
 80072f4:	33b0      	adds	r3, #176	; 0xb0
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
          continue;
 80072fa:	e00d      	b.n	8007318 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	4413      	add	r3, r2
 8007302:	33b0      	adds	r3, #176	; 0xb0
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	b2d9      	uxtb	r1, r3
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	33b0      	adds	r3, #176	; 0xb0
 8007312:	460a      	mov	r2, r1
 8007314:	701a      	strb	r2, [r3, #0]
        break;
 8007316:	e005      	b.n	8007324 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	3b01      	subs	r3, #1
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	2b00      	cmp	r3, #0
 8007322:	dadd      	bge.n	80072e0 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	4413      	add	r3, r2
 800732e:	7819      	ldrb	r1, [r3, #0]
 8007330:	f107 0210 	add.w	r2, r7, #16
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	4413      	add	r3, r2
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	68b8      	ldr	r0, [r7, #8]
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	4403      	add	r3, r0
 8007340:	404a      	eors	r2, r1
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	3301      	adds	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	3301      	adds	r3, #1
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	d3ac      	bcc.n	80072b4 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	372c      	adds	r7, #44	; 0x2c
 8007360:	46bd      	mov	sp, r7
 8007362:	bd90      	pop	{r4, r7, pc}

08007364 <FUNC_get_DHT_val>:
void FUNC_Blink_Led_Send(uint32_t TIMER){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
	HAL_Delay(TIMER);
}

void FUNC_get_DHT_val(uint8_t * buffer){
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	 float Temp = 0;
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
	 float Humi = 0;
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	60bb      	str	r3, [r7, #8]
	 if(sht3x_init(&handle)){
 8007378:	4838      	ldr	r0, [pc, #224]	; (800745c <FUNC_get_DHT_val+0xf8>)
 800737a:	f000 fbd9 	bl	8007b30 <sht3x_init>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01b      	beq.n	80073bc <FUNC_get_DHT_val+0x58>
		 sht3x_read_temperature_and_humidity(&handle, &Temp, &Humi);
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	f107 030c 	add.w	r3, r7, #12
 800738c:	4619      	mov	r1, r3
 800738e:	4833      	ldr	r0, [pc, #204]	; (800745c <FUNC_get_DHT_val+0xf8>)
 8007390:	f000 fc0e 	bl	8007bb0 <sht3x_read_temperature_and_humidity>
		 // Enable heater for two seconds.
		 sht3x_set_header_enable(&handle, true);
 8007394:	2101      	movs	r1, #1
 8007396:	4831      	ldr	r0, [pc, #196]	; (800745c <FUNC_get_DHT_val+0xf8>)
 8007398:	f000 fc8c 	bl	8007cb4 <sht3x_set_header_enable>
		 HAL_Delay(2000);
 800739c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80073a0:	f000 ffaa 	bl	80082f8 <HAL_Delay>
		 sht3x_set_header_enable(&handle, false);
 80073a4:	2100      	movs	r1, #0
 80073a6:	482d      	ldr	r0, [pc, #180]	; (800745c <FUNC_get_DHT_val+0xf8>)
 80073a8:	f000 fc84 	bl	8007cb4 <sht3x_set_header_enable>
		 sht3x_read_temperature_and_humidity(&handle, &Temp, &Humi);
 80073ac:	f107 0208 	add.w	r2, r7, #8
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	4619      	mov	r1, r3
 80073b6:	4829      	ldr	r0, [pc, #164]	; (800745c <FUNC_get_DHT_val+0xf8>)
 80073b8:	f000 fbfa 	bl	8007bb0 <sht3x_read_temperature_and_humidity>
	 }
	 uint16_t temp_int =(uint16_t)(Temp);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe f94a 	bl	8005658 <__aeabi_f2uiz>
 80073c4:	4603      	mov	r3, r0
 80073c6:	82fb      	strh	r3, [r7, #22]
	 uint16_t temp_frac = (int16_t)((Temp - temp_int) * 100);
 80073c8:	68fc      	ldr	r4, [r7, #12]
 80073ca:	8afb      	ldrh	r3, [r7, #22]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fd ff79 	bl	80052c4 <__aeabi_i2f>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4619      	mov	r1, r3
 80073d6:	4620      	mov	r0, r4
 80073d8:	f7fd febe 	bl	8005158 <__aeabi_fsub>
 80073dc:	4603      	mov	r3, r0
 80073de:	4920      	ldr	r1, [pc, #128]	; (8007460 <FUNC_get_DHT_val+0xfc>)
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fd ffc3 	bl	800536c <__aeabi_fmul>
 80073e6:	4603      	mov	r3, r0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f90f 	bl	800560c <__aeabi_f2iz>
 80073ee:	4603      	mov	r3, r0
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	82bb      	strh	r3, [r7, #20]
	 uint16_t humi_int =(uint16_t)(Humi);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe f92e 	bl	8005658 <__aeabi_f2uiz>
 80073fc:	4603      	mov	r3, r0
 80073fe:	827b      	strh	r3, [r7, #18]
	 uint16_t humi_frac = (int16_t)((Humi - humi_int) * 100);
 8007400:	68bc      	ldr	r4, [r7, #8]
 8007402:	8a7b      	ldrh	r3, [r7, #18]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd ff5d 	bl	80052c4 <__aeabi_i2f>
 800740a:	4603      	mov	r3, r0
 800740c:	4619      	mov	r1, r3
 800740e:	4620      	mov	r0, r4
 8007410:	f7fd fea2 	bl	8005158 <__aeabi_fsub>
 8007414:	4603      	mov	r3, r0
 8007416:	4912      	ldr	r1, [pc, #72]	; (8007460 <FUNC_get_DHT_val+0xfc>)
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd ffa7 	bl	800536c <__aeabi_fmul>
 800741e:	4603      	mov	r3, r0
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe f8f3 	bl	800560c <__aeabi_f2iz>
 8007426:	4603      	mov	r3, r0
 8007428:	b21b      	sxth	r3, r3
 800742a:	823b      	strh	r3, [r7, #16]
	 buffer[0] = (uint8_t)(temp_int); // Lower byte of temperature
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	701a      	strb	r2, [r3, #0]
	 buffer[1] = (uint8_t)(temp_frac); // Higher byte of temperature
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3301      	adds	r3, #1
 8007438:	8aba      	ldrh	r2, [r7, #20]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
	 buffer[2] = (uint8_t)(humi_int); // Lower byte of humidity
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3302      	adds	r3, #2
 8007442:	8a7a      	ldrh	r2, [r7, #18]
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
	 buffer[3] = (uint8_t)(humi_frac); // Higher byte of humidity
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3303      	adds	r3, #3
 800744c:	8a3a      	ldrh	r2, [r7, #16]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	bd90      	pop	{r4, r7, pc}
 800745a:	bf00      	nop
 800745c:	20000030 	.word	0x20000030
 8007460:	42c80000 	.word	0x42c80000

08007464 <FUNC_ReaddataAddress>:
	 HAL_ADC_PollForConversion(&hadc1, 1000);
	 MQ2_Val = HAL_ADC_GetValue(&hadc1);
	 HAL_ADC_Stop(&hadc1);
	 return MQ2_Val;
}
uint32_t FUNC_ReaddataAddress(uint32_t Address){
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(Address));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
	...

08007480 <FUNC_EraseAndRestore_Header_Page>:

void FUNC_EraseAndRestore_Header_Page(uint32_t Copy_u32Address, uint32_t Copy_u32NewData){
 8007480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007484:	b0b2      	sub	sp, #200	; 0xc8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]

	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for(Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 800749e:	4b41      	ldr	r3, [pc, #260]	; (80075a4 <FUNC_EraseAndRestore_Header_Page+0x124>)
 80074a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074a4:	e031      	b.n	800750a <FUNC_EraseAndRestore_Header_Page+0x8a>
	{
		if((Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 80074a6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	bf14      	ite	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	2300      	moveq	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4013      	ands	r3, r2
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <FUNC_EraseAndRestore_Header_Page+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80074d0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	33c8      	adds	r3, #200	; 0xc8
 80074d8:	443b      	add	r3, r7
 80074da:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074de:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80074e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074e6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	33c8      	adds	r3, #200	; 0xc8
 80074f0:	443b      	add	r3, r7
 80074f2:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80074f6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80074fa:	3301      	adds	r3, #1
 80074fc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 8007500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007504:	3304      	adds	r3, #4
 8007506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for(Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 800750a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800750e:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <FUNC_EraseAndRestore_Header_Page+0x128>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d9c8      	bls.n	80074a6 <FUNC_EraseAndRestore_Header_Page+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 800751c:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <FUNC_EraseAndRestore_Header_Page+0x124>)
 800751e:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 8007520:	2301      	movs	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8007524:	f001 fc2e 	bl	8008d84 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8007528:	f107 020c 	add.w	r2, r7, #12
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fd0e 	bl	8008f54 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8007538:	2300      	movs	r3, #0
 800753a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800753e:	e01a      	b.n	8007576 <FUNC_EraseAndRestore_Header_Page+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8007540:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	33c8      	adds	r3, #200	; 0xc8
 8007548:	443b      	add	r3, r7
 800754a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 800754e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	33c8      	adds	r3, #200	; 0xc8
 8007556:	443b      	add	r3, r7
 8007558:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800755c:	2200      	movs	r2, #0
 800755e:	4698      	mov	r8, r3
 8007560:	4691      	mov	r9, r2
 8007562:	4642      	mov	r2, r8
 8007564:	464b      	mov	r3, r9
 8007566:	2002      	movs	r0, #2
 8007568:	f001 fb9c 	bl	8008ca4 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 800756c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8007570:	3301      	adds	r3, #1
 8007572:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8007576:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800757a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800757e:	429a      	cmp	r2, r3
 8007580:	d3de      	bcc.n	8007540 <FUNC_EraseAndRestore_Header_Page+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2200      	movs	r2, #0
 8007586:	461c      	mov	r4, r3
 8007588:	4615      	mov	r5, r2
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	2002      	movs	r0, #2
 8007592:	f001 fb87 	bl	8008ca4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8007596:	f001 fc1b 	bl	8008dd0 <HAL_FLASH_Lock>
}
 800759a:	bf00      	nop
 800759c:	37c8      	adds	r7, #200	; 0xc8
 800759e:	46bd      	mov	sp, r7
 80075a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80075a4:	0801fc00 	.word	0x0801fc00
 80075a8:	0801fc5f 	.word	0x0801fc5f

080075ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075b0:	f000 fe40 	bl	8008234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075b4:	f000 f816 	bl	80075e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075b8:	f000 f9ac 	bl	8007914 <MX_GPIO_Init>
  MX_DMA_Init();
 80075bc:	f000 f98c 	bl	80078d8 <MX_DMA_Init>
  MX_I2C1_Init();
 80075c0:	f000 f8ac 	bl	800771c <MX_I2C1_Init>
  MX_SPI1_Init();
 80075c4:	f000 f906 	bl	80077d4 <MX_SPI1_Init>
  MX_ADC1_Init();
 80075c8:	f000 f86a 	bl	80076a0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80075cc:	f000 f8d4 	bl	8007778 <MX_I2C2_Init>
  //MX_IWDG_Init();
  MX_TIM2_Init();
 80075d0:	f000 f936 	bl	8007840 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80075d4:	4802      	ldr	r0, [pc, #8]	; (80075e0 <main+0x34>)
 80075d6:	f004 fd27 	bl	800c028 <HAL_TIM_Base_Start>
  //FUNC_get_DHT_val((uint8_t* ) buffer_DHT);
  //HAL_TIM_Base_Start_IT(&htim2);
  LORA_IF_Init();
 80075da:	f7ff f8f9 	bl	80067d0 <LORA_IF_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 80075de:	e7fe      	b.n	80075de <main+0x32>
 80075e0:	20000750 	.word	0x20000750

080075e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b094      	sub	sp, #80	; 0x50
 80075e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075ee:	2228      	movs	r2, #40	; 0x28
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f005 f909 	bl	800c80a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	605a      	str	r2, [r3, #4]
 8007610:	609a      	str	r2, [r3, #8]
 8007612:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007614:	2309      	movs	r3, #9
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800761e:	2300      	movs	r3, #0
 8007620:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007622:	2301      	movs	r3, #1
 8007624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007626:	2301      	movs	r3, #1
 8007628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800762a:	2302      	movs	r3, #2
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800762e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007634:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800763a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800763e:	4618      	mov	r0, r3
 8007640:	f003 fbc6 	bl	800add0 <HAL_RCC_OscConfig>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800764a:	f000 f9fd 	bl	8007a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800764e:	230f      	movs	r3, #15
 8007650:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007652:	2302      	movs	r3, #2
 8007654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800765a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007660:	2300      	movs	r3, #0
 8007662:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	2102      	movs	r1, #2
 800766a:	4618      	mov	r0, r3
 800766c:	f003 fe32 	bl	800b2d4 <HAL_RCC_ClockConfig>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007676:	f000 f9e7 	bl	8007a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800767a:	2302      	movs	r3, #2
 800767c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800767e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007682:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	4618      	mov	r0, r3
 8007688:	f003 ff9e 	bl	800b5c8 <HAL_RCCEx_PeriphCLKConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007692:	f000 f9d9 	bl	8007a48 <Error_Handler>
  }
}
 8007696:	bf00      	nop
 8007698:	3750      	adds	r7, #80	; 0x50
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	605a      	str	r2, [r3, #4]
 80076ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80076b0:	4b18      	ldr	r3, [pc, #96]	; (8007714 <MX_ADC1_Init+0x74>)
 80076b2:	4a19      	ldr	r2, [pc, #100]	; (8007718 <MX_ADC1_Init+0x78>)
 80076b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80076b6:	4b17      	ldr	r3, [pc, #92]	; (8007714 <MX_ADC1_Init+0x74>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80076bc:	4b15      	ldr	r3, [pc, #84]	; (8007714 <MX_ADC1_Init+0x74>)
 80076be:	2200      	movs	r2, #0
 80076c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <MX_ADC1_Init+0x74>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076c8:	4b12      	ldr	r3, [pc, #72]	; (8007714 <MX_ADC1_Init+0x74>)
 80076ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80076ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076d0:	4b10      	ldr	r3, [pc, #64]	; (8007714 <MX_ADC1_Init+0x74>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80076d6:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <MX_ADC1_Init+0x74>)
 80076d8:	2201      	movs	r2, #1
 80076da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80076dc:	480d      	ldr	r0, [pc, #52]	; (8007714 <MX_ADC1_Init+0x74>)
 80076de:	f000 fe2f 	bl	8008340 <HAL_ADC_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80076e8:	f000 f9ae 	bl	8007a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80076ec:	2301      	movs	r3, #1
 80076ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	4619      	mov	r1, r3
 80076fc:	4805      	ldr	r0, [pc, #20]	; (8007714 <MX_ADC1_Init+0x74>)
 80076fe:	f000 fef7 	bl	80084f0 <HAL_ADC_ConfigChannel>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8007708:	f000 f99e 	bl	8007a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	200005dc 	.word	0x200005dc
 8007718:	40012400 	.word	0x40012400

0800771c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <MX_I2C1_Init+0x50>)
 8007722:	4a13      	ldr	r2, [pc, #76]	; (8007770 <MX_I2C1_Init+0x54>)
 8007724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007726:	4b11      	ldr	r3, [pc, #68]	; (800776c <MX_I2C1_Init+0x50>)
 8007728:	4a12      	ldr	r2, [pc, #72]	; (8007774 <MX_I2C1_Init+0x58>)
 800772a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <MX_I2C1_Init+0x50>)
 800772e:	2200      	movs	r2, #0
 8007730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007732:	4b0e      	ldr	r3, [pc, #56]	; (800776c <MX_I2C1_Init+0x50>)
 8007734:	2200      	movs	r2, #0
 8007736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <MX_I2C1_Init+0x50>)
 800773a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800773e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <MX_I2C1_Init+0x50>)
 8007742:	2200      	movs	r2, #0
 8007744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <MX_I2C1_Init+0x50>)
 8007748:	2200      	movs	r2, #0
 800774a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800774c:	4b07      	ldr	r3, [pc, #28]	; (800776c <MX_I2C1_Init+0x50>)
 800774e:	2200      	movs	r2, #0
 8007750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <MX_I2C1_Init+0x50>)
 8007754:	2200      	movs	r2, #0
 8007756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007758:	4804      	ldr	r0, [pc, #16]	; (800776c <MX_I2C1_Init+0x50>)
 800775a:	f001 fe87 	bl	800946c <HAL_I2C_Init>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007764:	f000 f970 	bl	8007a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007768:	bf00      	nop
 800776a:	bd80      	pop	{r7, pc}
 800776c:	2000060c 	.word	0x2000060c
 8007770:	40005400 	.word	0x40005400
 8007774:	00061a80 	.word	0x00061a80

08007778 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800777c:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <MX_I2C2_Init+0x50>)
 800777e:	4a13      	ldr	r2, [pc, #76]	; (80077cc <MX_I2C2_Init+0x54>)
 8007780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <MX_I2C2_Init+0x50>)
 8007784:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <MX_I2C2_Init+0x58>)
 8007786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007788:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <MX_I2C2_Init+0x50>)
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <MX_I2C2_Init+0x50>)
 8007790:	2200      	movs	r2, #0
 8007792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <MX_I2C2_Init+0x50>)
 8007796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800779a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <MX_I2C2_Init+0x50>)
 800779e:	2200      	movs	r2, #0
 80077a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <MX_I2C2_Init+0x50>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <MX_I2C2_Init+0x50>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <MX_I2C2_Init+0x50>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80077b4:	4804      	ldr	r0, [pc, #16]	; (80077c8 <MX_I2C2_Init+0x50>)
 80077b6:	f001 fe59 	bl	800946c <HAL_I2C_Init>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80077c0:	f000 f942 	bl	8007a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80077c4:	bf00      	nop
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000660 	.word	0x20000660
 80077cc:	40005800 	.word	0x40005800
 80077d0:	00061a80 	.word	0x00061a80

080077d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80077d8:	4b17      	ldr	r3, [pc, #92]	; (8007838 <MX_SPI1_Init+0x64>)
 80077da:	4a18      	ldr	r2, [pc, #96]	; (800783c <MX_SPI1_Init+0x68>)
 80077dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <MX_SPI1_Init+0x64>)
 80077e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <MX_SPI1_Init+0x64>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <MX_SPI1_Init+0x64>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077f2:	4b11      	ldr	r3, [pc, #68]	; (8007838 <MX_SPI1_Init+0x64>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <MX_SPI1_Init+0x64>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077fe:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <MX_SPI1_Init+0x64>)
 8007800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007806:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <MX_SPI1_Init+0x64>)
 8007808:	2210      	movs	r2, #16
 800780a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <MX_SPI1_Init+0x64>)
 800780e:	2200      	movs	r2, #0
 8007810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <MX_SPI1_Init+0x64>)
 8007814:	2200      	movs	r2, #0
 8007816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <MX_SPI1_Init+0x64>)
 800781a:	2200      	movs	r2, #0
 800781c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <MX_SPI1_Init+0x64>)
 8007820:	220a      	movs	r2, #10
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <MX_SPI1_Init+0x64>)
 8007826:	f003 ff85 	bl	800b734 <HAL_SPI_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007830:	f000 f90a 	bl	8007a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}
 8007838:	200006f8 	.word	0x200006f8
 800783c:	40013000 	.word	0x40013000

08007840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	605a      	str	r2, [r3, #4]
 8007850:	609a      	str	r2, [r3, #8]
 8007852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007854:	463b      	mov	r3, r7
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800785c:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <MX_TIM2_Init+0x94>)
 800785e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <MX_TIM2_Init+0x94>)
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800786a:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <MX_TIM2_Init+0x94>)
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007870:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <MX_TIM2_Init+0x94>)
 8007872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007878:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <MX_TIM2_Init+0x94>)
 800787a:	2200      	movs	r2, #0
 800787c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <MX_TIM2_Init+0x94>)
 8007880:	2200      	movs	r2, #0
 8007882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007884:	4813      	ldr	r0, [pc, #76]	; (80078d4 <MX_TIM2_Init+0x94>)
 8007886:	f004 fb7f 	bl	800bf88 <HAL_TIM_Base_Init>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007890:	f000 f8da 	bl	8007a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800789a:	f107 0308 	add.w	r3, r7, #8
 800789e:	4619      	mov	r1, r3
 80078a0:	480c      	ldr	r0, [pc, #48]	; (80078d4 <MX_TIM2_Init+0x94>)
 80078a2:	f004 fc0b 	bl	800c0bc <HAL_TIM_ConfigClockSource>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80078ac:	f000 f8cc 	bl	8007a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078b0:	2300      	movs	r3, #0
 80078b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078b8:	463b      	mov	r3, r7
 80078ba:	4619      	mov	r1, r3
 80078bc:	4805      	ldr	r0, [pc, #20]	; (80078d4 <MX_TIM2_Init+0x94>)
 80078be:	f004 fdbd 	bl	800c43c <HAL_TIMEx_MasterConfigSynchronization>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80078c8:	f000 f8be 	bl	8007a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80078cc:	bf00      	nop
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000798 	.word	0x20000798

080078d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <MX_DMA_Init+0x38>)
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4a0b      	ldr	r2, [pc, #44]	; (8007910 <MX_DMA_Init+0x38>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	6153      	str	r3, [r2, #20]
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <MX_DMA_Init+0x38>)
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	2010      	movs	r0, #16
 80078fc:	f001 f82d 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007900:	2010      	movs	r0, #16
 8007902:	f001 f846 	bl	8008992 <HAL_NVIC_EnableIRQ>

}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40021000 	.word	0x40021000

08007914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791a:	f107 0310 	add.w	r3, r7, #16
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	605a      	str	r2, [r3, #4]
 8007924:	609a      	str	r2, [r3, #8]
 8007926:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <MX_GPIO_Init+0x120>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	4a41      	ldr	r2, [pc, #260]	; (8007a34 <MX_GPIO_Init+0x120>)
 800792e:	f043 0310 	orr.w	r3, r3, #16
 8007932:	6193      	str	r3, [r2, #24]
 8007934:	4b3f      	ldr	r3, [pc, #252]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007940:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4a3b      	ldr	r2, [pc, #236]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007946:	f043 0320 	orr.w	r3, r3, #32
 800794a:	6193      	str	r3, [r2, #24]
 800794c:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <MX_GPIO_Init+0x120>)
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007958:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <MX_GPIO_Init+0x120>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	4a35      	ldr	r2, [pc, #212]	; (8007a34 <MX_GPIO_Init+0x120>)
 800795e:	f043 0304 	orr.w	r3, r3, #4
 8007962:	6193      	str	r3, [r2, #24]
 8007964:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	607b      	str	r3, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007970:	4b30      	ldr	r3, [pc, #192]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	4a2f      	ldr	r2, [pc, #188]	; (8007a34 <MX_GPIO_Init+0x120>)
 8007976:	f043 0308 	orr.w	r3, r3, #8
 800797a:	6193      	str	r3, [r2, #24]
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <MX_GPIO_Init+0x120>)
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007988:	2200      	movs	r2, #0
 800798a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800798e:	482a      	ldr	r0, [pc, #168]	; (8007a38 <MX_GPIO_Init+0x124>)
 8007990:	f001 fd23 	bl	80093da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8007994:	2200      	movs	r2, #0
 8007996:	2110      	movs	r1, #16
 8007998:	4828      	ldr	r0, [pc, #160]	; (8007a3c <MX_GPIO_Init+0x128>)
 800799a:	f001 fd1e 	bl	80093da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|Mode_Pin|GPIO_PIN_5|Receive_Pin
 800799e:	2200      	movs	r2, #0
 80079a0:	f240 3125 	movw	r1, #805	; 0x325
 80079a4:	4826      	ldr	r0, [pc, #152]	; (8007a40 <MX_GPIO_Init+0x12c>)
 80079a6:	f001 fd18 	bl	80093da <HAL_GPIO_WritePin>
                          |Send_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80079aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079b0:	2301      	movs	r3, #1
 80079b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079b8:	2302      	movs	r3, #2
 80079ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079bc:	f107 0310 	add.w	r3, r7, #16
 80079c0:	4619      	mov	r1, r3
 80079c2:	481d      	ldr	r0, [pc, #116]	; (8007a38 <MX_GPIO_Init+0x124>)
 80079c4:	f001 fb6e 	bl	80090a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80079c8:	2310      	movs	r3, #16
 80079ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079d4:	2302      	movs	r3, #2
 80079d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	4619      	mov	r1, r3
 80079de:	4817      	ldr	r0, [pc, #92]	; (8007a3c <MX_GPIO_Init+0x128>)
 80079e0:	f001 fb60 	bl	80090a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin Mode_Pin PB5 Receive_Pin
                           Send_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|Mode_Pin|GPIO_PIN_5|Receive_Pin
 80079e4:	f240 3325 	movw	r3, #805	; 0x325
 80079e8:	613b      	str	r3, [r7, #16]
                          |Send_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ea:	2301      	movs	r3, #1
 80079ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f2:	2302      	movs	r3, #2
 80079f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079f6:	f107 0310 	add.w	r3, r7, #16
 80079fa:	4619      	mov	r1, r3
 80079fc:	4810      	ldr	r0, [pc, #64]	; (8007a40 <MX_GPIO_Init+0x12c>)
 80079fe:	f001 fb51 	bl	80090a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8007a02:	2302      	movs	r3, #2
 8007a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <MX_GPIO_Init+0x130>)
 8007a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8007a0e:	f107 0310 	add.w	r3, r7, #16
 8007a12:	4619      	mov	r1, r3
 8007a14:	480a      	ldr	r0, [pc, #40]	; (8007a40 <MX_GPIO_Init+0x12c>)
 8007a16:	f001 fb45 	bl	80090a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2007      	movs	r0, #7
 8007a20:	f000 ff9b 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007a24:	2007      	movs	r0, #7
 8007a26:	f000 ffb4 	bl	8008992 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007a2a:	bf00      	nop
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40011000 	.word	0x40011000
 8007a3c:	40010800 	.word	0x40010800
 8007a40:	40010c00 	.word	0x40010c00
 8007a44:	10110000 	.word	0x10110000

08007a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a4c:	b672      	cpsid	i
}
 8007a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a50:	e7fe      	b.n	8007a50 <Error_Handler+0x8>

08007a52 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8007a5c:	23ff      	movs	r3, #255	; 0xff
 8007a5e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	e020      	b.n	8007aa8 <calculate_crc+0x56>
		crc ^= data[i];
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	4053      	eors	r3, r2
 8007a72:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e010      	b.n	8007a9c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8007a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da06      	bge.n	8007a90 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	e002      	b.n	8007a96 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b07      	cmp	r3, #7
 8007aa0:	d9eb      	bls.n	8007a7a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3da      	bcc.n	8007a66 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	733b      	strb	r3, [r7, #12]
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	b299      	uxth	r1, r3
 8007ae4:	f107 020c 	add.w	r2, r7, #12
 8007ae8:	231e      	movs	r3, #30
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	2302      	movs	r3, #2
 8007aee:	f001 fe01 	bl	80096f4 <HAL_I2C_Master_Transmit>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <sht3x_send_command+0x42>
	}

	return true;
 8007afc:	2301      	movs	r3, #1
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	460a      	mov	r2, r1
 8007b10:	71fb      	strb	r3, [r7, #7]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	79bb      	ldrb	r3, [r7, #6]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b29b      	uxth	r3, r3
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af04      	add	r7, sp, #16
 8007b36:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <sht3x_init+0x1e>
 8007b42:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <sht3x_init+0x74>)
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <sht3x_init+0x78>)
 8007b46:	2138      	movs	r1, #56	; 0x38
 8007b48:	4818      	ldr	r0, [pc, #96]	; (8007bac <sht3x_init+0x7c>)
 8007b4a:	f004 fcd5 	bl	800c4f8 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	889b      	ldrh	r3, [r3, #4]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	b299      	uxth	r1, r3
 8007b5a:	231e      	movs	r3, #30
 8007b5c:	9302      	str	r3, [sp, #8]
 8007b5e:	2303      	movs	r3, #3
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	f107 030c 	add.w	r3, r7, #12
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2302      	movs	r3, #2
 8007b6a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8007b6e:	f002 f92b 	bl	8009dc8 <HAL_I2C_Mem_Read>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e00e      	b.n	8007b9a <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8007b7c:	f107 030c 	add.w	r3, r7, #12
 8007b80:	2102      	movs	r1, #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ff65 	bl	8007a52 <calculate_crc>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	7bfa      	ldrb	r2, [r7, #15]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <sht3x_init+0x68>
		return false;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e000      	b.n	8007b9a <sht3x_init+0x6a>
	}

	return true;
 8007b98:	2301      	movs	r3, #1
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800d8e0 	.word	0x0800d8e0
 8007ba8:	0800ef28 	.word	0x0800ef28
 8007bac:	0800d920 	.word	0x0800d920

08007bb0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8007bbc:	f642 4106 	movw	r1, #11270	; 0x2c06
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff ff7b 	bl	8007abc <sht3x_send_command>

	HAL_Delay(1);
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f000 fb96 	bl	80082f8 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	889b      	ldrh	r3, [r3, #4]
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	b299      	uxth	r1, r3
 8007bd8:	f107 0214 	add.w	r2, r7, #20
 8007bdc:	231e      	movs	r3, #30
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2306      	movs	r3, #6
 8007be2:	f001 fe85 	bl	80098f0 <HAL_I2C_Master_Receive>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e054      	b.n	8007c9a <sht3x_read_temperature_and_humidity+0xea>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff2b 	bl	8007a52 <calculate_crc>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	3303      	adds	r3, #3
 8007c06:	2102      	movs	r1, #2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff ff22 	bl	8007a52 <calculate_crc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8007c12:	7dbb      	ldrb	r3, [r7, #22]
 8007c14:	7ffa      	ldrb	r2, [r7, #31]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d103      	bne.n	8007c22 <sht3x_read_temperature_and_humidity+0x72>
 8007c1a:	7e7b      	ldrb	r3, [r7, #25]
 8007c1c:	7fba      	ldrb	r2, [r7, #30]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d001      	beq.n	8007c26 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e039      	b.n	8007c9a <sht3x_read_temperature_and_humidity+0xea>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8007c26:	7d3b      	ldrb	r3, [r7, #20]
 8007c28:	7d7a      	ldrb	r2, [r7, #21]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff ff6a 	bl	8007b06 <uint8_to_uint16>
 8007c32:	4603      	mov	r3, r0
 8007c34:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	7e3a      	ldrb	r2, [r7, #24]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff ff62 	bl	8007b06 <uint8_to_uint16>
 8007c42:	4603      	mov	r3, r0
 8007c44:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8007c46:	8bbb      	ldrh	r3, [r7, #28]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fd fb37 	bl	80052bc <__aeabi_ui2f>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4914      	ldr	r1, [pc, #80]	; (8007ca4 <sht3x_read_temperature_and_humidity+0xf4>)
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fd fb8a 	bl	800536c <__aeabi_fmul>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4913      	ldr	r1, [pc, #76]	; (8007ca8 <sht3x_read_temperature_and_humidity+0xf8>)
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fd fc39 	bl	80054d4 <__aeabi_fdiv>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4911      	ldr	r1, [pc, #68]	; (8007cac <sht3x_read_temperature_and_humidity+0xfc>)
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fa76 	bl	8005158 <__aeabi_fsub>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	601a      	str	r2, [r3, #0]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8007c74:	8b7b      	ldrh	r3, [r7, #26]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fd fb20 	bl	80052bc <__aeabi_ui2f>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <sht3x_read_temperature_and_humidity+0x100>)
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd fb73 	bl	800536c <__aeabi_fmul>
 8007c86:	4603      	mov	r3, r0
 8007c88:	4907      	ldr	r1, [pc, #28]	; (8007ca8 <sht3x_read_temperature_and_humidity+0xf8>)
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fc22 	bl	80054d4 <__aeabi_fdiv>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]

	return true;
 8007c98:	2301      	movs	r3, #1
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	432f0000 	.word	0x432f0000
 8007ca8:	477fff00 	.word	0x477fff00
 8007cac:	42340000 	.word	0x42340000
 8007cb0:	42c80000 	.word	0x42c80000

08007cb4 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
	if (enable) {
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <sht3x_set_header_enable+0x20>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 8007cc6:	f243 016d 	movw	r1, #12397	; 0x306d
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fef6 	bl	8007abc <sht3x_send_command>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	e005      	b.n	8007ce0 <sht3x_set_header_enable+0x2c>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 8007cd4:	f243 0166 	movw	r1, #12390	; 0x3066
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff feef 	bl	8007abc <sht3x_send_command>
 8007cde:	4603      	mov	r3, r0
	}
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <HAL_MspInit+0x5c>)
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <HAL_MspInit+0x5c>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6193      	str	r3, [r2, #24]
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <HAL_MspInit+0x5c>)
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
 8007d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d06:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <HAL_MspInit+0x5c>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <HAL_MspInit+0x5c>)
 8007d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d10:	61d3      	str	r3, [r2, #28]
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <HAL_MspInit+0x5c>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <HAL_MspInit+0x60>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <HAL_MspInit+0x60>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40010000 	.word	0x40010000

08007d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	609a      	str	r2, [r3, #8]
 8007d60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <HAL_ADC_MspInit+0x6c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d121      	bne.n	8007db0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d6c:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d76:	6193      	str	r3, [r2, #24]
 8007d78:	4b10      	ldr	r3, [pc, #64]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d84:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d8a:	f043 0304 	orr.w	r3, r3, #4
 8007d8e:	6193      	str	r3, [r2, #24]
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <HAL_ADC_MspInit+0x70>)
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007da0:	2303      	movs	r3, #3
 8007da2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	4619      	mov	r1, r3
 8007daa:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <HAL_ADC_MspInit+0x74>)
 8007dac:	f001 f97a 	bl	80090a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007db0:	bf00      	nop
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40012400 	.word	0x40012400
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	40010800 	.word	0x40010800

08007dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dcc:	f107 0318 	add.w	r3, r7, #24
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a3e      	ldr	r2, [pc, #248]	; (8007ed8 <HAL_I2C_MspInit+0x114>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d14a      	bne.n	8007e7a <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007de4:	4b3d      	ldr	r3, [pc, #244]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	4a3c      	ldr	r2, [pc, #240]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007dea:	f043 0308 	orr.w	r3, r3, #8
 8007dee:	6193      	str	r3, [r2, #24]
 8007df0:	4b3a      	ldr	r3, [pc, #232]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007dfc:	23c0      	movs	r3, #192	; 0xc0
 8007dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e00:	2312      	movs	r3, #18
 8007e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e04:	2303      	movs	r3, #3
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e08:	f107 0318 	add.w	r3, r7, #24
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4834      	ldr	r0, [pc, #208]	; (8007ee0 <HAL_I2C_MspInit+0x11c>)
 8007e10:	f001 f948 	bl	80090a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e14:	4b31      	ldr	r3, [pc, #196]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	4a30      	ldr	r2, [pc, #192]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e1e:	61d3      	str	r3, [r2, #28]
 8007e20:	4b2e      	ldr	r3, [pc, #184]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8007e2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e2e:	4a2e      	ldr	r2, [pc, #184]	; (8007ee8 <HAL_I2C_MspInit+0x124>)
 8007e30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e32:	4b2c      	ldr	r3, [pc, #176]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e34:	2210      	movs	r2, #16
 8007e36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e38:	4b2a      	ldr	r3, [pc, #168]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e3e:	4b29      	ldr	r3, [pc, #164]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e40:	2280      	movs	r2, #128	; 0x80
 8007e42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e44:	4b27      	ldr	r3, [pc, #156]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e4a:	4b26      	ldr	r3, [pc, #152]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007e50:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e56:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007e5c:	4821      	ldr	r0, [pc, #132]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e5e:	f000 fdc1 	bl	80089e4 <HAL_DMA_Init>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8007e68:	f7ff fdee 	bl	8007a48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e70:	635a      	str	r2, [r3, #52]	; 0x34
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_I2C_MspInit+0x120>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007e78:	e029      	b.n	8007ece <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_I2C_MspInit+0x128>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d124      	bne.n	8007ece <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	4a14      	ldr	r2, [pc, #80]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e8a:	f043 0308 	orr.w	r3, r3, #8
 8007e8e:	6193      	str	r3, [r2, #24]
 8007e90:	4b12      	ldr	r3, [pc, #72]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007e9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ea2:	2312      	movs	r3, #18
 8007ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eaa:	f107 0318 	add.w	r3, r7, #24
 8007eae:	4619      	mov	r1, r3
 8007eb0:	480b      	ldr	r0, [pc, #44]	; (8007ee0 <HAL_I2C_MspInit+0x11c>)
 8007eb2:	f001 f8f7 	bl	80090a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	4a08      	ldr	r2, [pc, #32]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ec0:	61d3      	str	r3, [r2, #28]
 8007ec2:	4b06      	ldr	r3, [pc, #24]	; (8007edc <HAL_I2C_MspInit+0x118>)
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eca:	60bb      	str	r3, [r7, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
}
 8007ece:	bf00      	nop
 8007ed0:	3728      	adds	r7, #40	; 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40005400 	.word	0x40005400
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	40010c00 	.word	0x40010c00
 8007ee4:	200006b4 	.word	0x200006b4
 8007ee8:	4002006c 	.word	0x4002006c
 8007eec:	40005800 	.word	0x40005800

08007ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0310 	add.w	r3, r7, #16
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1b      	ldr	r2, [pc, #108]	; (8007f78 <HAL_SPI_MspInit+0x88>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d12f      	bne.n	8007f70 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f10:	4b1a      	ldr	r3, [pc, #104]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	4a19      	ldr	r2, [pc, #100]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f1a:	6193      	str	r3, [r2, #24]
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f28:	4b14      	ldr	r3, [pc, #80]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4a13      	ldr	r2, [pc, #76]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f2e:	f043 0304 	orr.w	r3, r3, #4
 8007f32:	6193      	str	r3, [r2, #24]
 8007f34:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <HAL_SPI_MspInit+0x8c>)
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	60bb      	str	r3, [r7, #8]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007f40:	23a0      	movs	r3, #160	; 0xa0
 8007f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f44:	2302      	movs	r3, #2
 8007f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f4c:	f107 0310 	add.w	r3, r7, #16
 8007f50:	4619      	mov	r1, r3
 8007f52:	480b      	ldr	r0, [pc, #44]	; (8007f80 <HAL_SPI_MspInit+0x90>)
 8007f54:	f001 f8a6 	bl	80090a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f58:	2340      	movs	r3, #64	; 0x40
 8007f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f64:	f107 0310 	add.w	r3, r7, #16
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4805      	ldr	r0, [pc, #20]	; (8007f80 <HAL_SPI_MspInit+0x90>)
 8007f6c:	f001 f89a 	bl	80090a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007f70:	bf00      	nop
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40013000 	.word	0x40013000
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	40010800 	.word	0x40010800

08007f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f94:	d10b      	bne.n	8007fae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007f96:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <HAL_TIM_Base_MspInit+0x34>)
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	4a07      	ldr	r2, [pc, #28]	; (8007fb8 <HAL_TIM_Base_MspInit+0x34>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	61d3      	str	r3, [r2, #28]
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <HAL_TIM_Base_MspInit+0x34>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	40021000 	.word	0x40021000

08007fbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007fc0:	f3bf 8f4f 	dsb	sy
}
 8007fc4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <__NVIC_SystemReset+0x24>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007fce:	4904      	ldr	r1, [pc, #16]	; (8007fe0 <__NVIC_SystemReset+0x24>)
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <__NVIC_SystemReset+0x28>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007fd6:	f3bf 8f4f 	dsb	sy
}
 8007fda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007fdc:	bf00      	nop
 8007fde:	e7fd      	b.n	8007fdc <__NVIC_SystemReset+0x20>
 8007fe0:	e000ed00 	.word	0xe000ed00
 8007fe4:	05fa0004 	.word	0x05fa0004

08007fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007fec:	e7fe      	b.n	8007fec <NMI_Handler+0x4>

08007fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8007ff2:	f7ff ffe3 	bl	8007fbc <__NVIC_SystemReset>

08007ff6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ffa:	e7fe      	b.n	8007ffa <MemManage_Handler+0x4>

08007ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008000:	e7fe      	b.n	8008000 <BusFault_Handler+0x4>

08008002 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008002:	b480      	push	{r7}
 8008004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008006:	e7fe      	b.n	8008006 <UsageFault_Handler+0x4>

08008008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800800c:	bf00      	nop
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr

0800802c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008030:	f000 f946 	bl	80082c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008034:	bf00      	nop
 8008036:	bd80      	pop	{r7, pc}

08008038 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800803c:	2002      	movs	r0, #2
 800803e:	f001 f9fd 	bl	800943c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008042:	bf00      	nop
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800804c:	4802      	ldr	r0, [pc, #8]	; (8008058 <DMA1_Channel6_IRQHandler+0x10>)
 800804e:	f000 fd23 	bl	8008a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008052:	bf00      	nop
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200006b4 	.word	0x200006b4

0800805c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return 1;
 8008060:	2301      	movs	r3, #1
}
 8008062:	4618      	mov	r0, r3
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <_kill>:

int _kill(int pid, int sig)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008074:	f004 fc18 	bl	800c8a8 <__errno>
 8008078:	4603      	mov	r3, r0
 800807a:	2216      	movs	r2, #22
 800807c:	601a      	str	r2, [r3, #0]
  return -1;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_exit>:

void _exit (int status)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008092:	f04f 31ff 	mov.w	r1, #4294967295
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff ffe7 	bl	800806a <_kill>
  while (1) {}    /* Make sure we hang here */
 800809c:	e7fe      	b.n	800809c <_exit+0x12>

0800809e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b086      	sub	sp, #24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e00a      	b.n	80080c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80080b0:	f3af 8000 	nop.w
 80080b4:	4601      	mov	r1, r0
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	60ba      	str	r2, [r7, #8]
 80080bc:	b2ca      	uxtb	r2, r1
 80080be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3301      	adds	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	dbf0      	blt.n	80080b0 <_read+0x12>
  }

  return len;
 80080ce:	687b      	ldr	r3, [r7, #4]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e009      	b.n	80080fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	60ba      	str	r2, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	3301      	adds	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	dbf1      	blt.n	80080ea <_write+0x12>
  }
  return len;
 8008106:	687b      	ldr	r3, [r7, #4]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_close>:

int _close(int file)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr

08008126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008136:	605a      	str	r2, [r3, #4]
  return 0;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <_isatty>:

int _isatty(int file)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800814c:	2301      	movs	r3, #1
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	bc80      	pop	{r7}
 800816e:	4770      	bx	lr

08008170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <_sbrk+0x5c>)
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <_sbrk+0x60>)
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008184:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <_sbrk+0x64>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d102      	bne.n	8008192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <_sbrk+0x64>)
 800818e:	4a12      	ldr	r2, [pc, #72]	; (80081d8 <_sbrk+0x68>)
 8008190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <_sbrk+0x64>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	429a      	cmp	r2, r3
 800819e:	d207      	bcs.n	80081b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081a0:	f004 fb82 	bl	800c8a8 <__errno>
 80081a4:	4603      	mov	r3, r0
 80081a6:	220c      	movs	r2, #12
 80081a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	e009      	b.n	80081c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80081b0:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <_sbrk+0x64>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <_sbrk+0x64>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <_sbrk+0x64>)
 80081c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20005000 	.word	0x20005000
 80081d0:	00000400 	.word	0x00000400
 80081d4:	20000910 	.word	0x20000910
 80081d8:	20000a88 	.word	0x20000a88

080081dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <Reset_Handler>:
 80081e8:	f7ff fff8 	bl	80081dc <SystemInit>
 80081ec:	480b      	ldr	r0, [pc, #44]	; (800821c <LoopFillZerobss+0xe>)
 80081ee:	490c      	ldr	r1, [pc, #48]	; (8008220 <LoopFillZerobss+0x12>)
 80081f0:	4a0c      	ldr	r2, [pc, #48]	; (8008224 <LoopFillZerobss+0x16>)
 80081f2:	2300      	movs	r3, #0
 80081f4:	e002      	b.n	80081fc <LoopCopyDataInit>

080081f6 <CopyDataInit>:
 80081f6:	58d4      	ldr	r4, [r2, r3]
 80081f8:	50c4      	str	r4, [r0, r3]
 80081fa:	3304      	adds	r3, #4

080081fc <LoopCopyDataInit>:
 80081fc:	18c4      	adds	r4, r0, r3
 80081fe:	428c      	cmp	r4, r1
 8008200:	d3f9      	bcc.n	80081f6 <CopyDataInit>
 8008202:	4a09      	ldr	r2, [pc, #36]	; (8008228 <LoopFillZerobss+0x1a>)
 8008204:	4c09      	ldr	r4, [pc, #36]	; (800822c <LoopFillZerobss+0x1e>)
 8008206:	2300      	movs	r3, #0
 8008208:	e001      	b.n	800820e <LoopFillZerobss>

0800820a <FillZerobss>:
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	3204      	adds	r2, #4

0800820e <LoopFillZerobss>:
 800820e:	42a2      	cmp	r2, r4
 8008210:	d3fb      	bcc.n	800820a <FillZerobss>
 8008212:	f004 fb4f 	bl	800c8b4 <__libc_init_array>
 8008216:	f7ff f9c9 	bl	80075ac <main>
 800821a:	4770      	bx	lr
 800821c:	20000000 	.word	0x20000000
 8008220:	200000a0 	.word	0x200000a0
 8008224:	0800efe0 	.word	0x0800efe0
 8008228:	200000a0 	.word	0x200000a0
 800822c:	20000a84 	.word	0x20000a84

08008230 <ADC1_2_IRQHandler>:
 8008230:	e7fe      	b.n	8008230 <ADC1_2_IRQHandler>
	...

08008234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <HAL_Init+0x28>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a07      	ldr	r2, [pc, #28]	; (800825c <HAL_Init+0x28>)
 800823e:	f043 0310 	orr.w	r3, r3, #16
 8008242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008244:	2003      	movs	r0, #3
 8008246:	f000 fb7d 	bl	8008944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800824a:	200f      	movs	r0, #15
 800824c:	f000 f808 	bl	8008260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008250:	f7ff fd4a 	bl	8007ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40022000 	.word	0x40022000

08008260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008268:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <HAL_InitTick+0x54>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <HAL_InitTick+0x58>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008276:	fbb3 f3f1 	udiv	r3, r3, r1
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fba3 	bl	80089ca <HAL_SYSTICK_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e00e      	b.n	80082ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b0f      	cmp	r3, #15
 8008292:	d80a      	bhi.n	80082aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008294:	2200      	movs	r2, #0
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	f000 fb5d 	bl	800895a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082a0:	4a06      	ldr	r2, [pc, #24]	; (80082bc <HAL_InitTick+0x5c>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000038 	.word	0x20000038
 80082b8:	20000040 	.word	0x20000040
 80082bc:	2000003c 	.word	0x2000003c

080082c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <HAL_IncTick+0x1c>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <HAL_IncTick+0x20>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4413      	add	r3, r2
 80082d0:	4a03      	ldr	r2, [pc, #12]	; (80082e0 <HAL_IncTick+0x20>)
 80082d2:	6013      	str	r3, [r2, #0]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	20000040 	.word	0x20000040
 80082e0:	20000914 	.word	0x20000914

080082e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return uwTick;
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <HAL_GetTick+0x10>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr
 80082f4:	20000914 	.word	0x20000914

080082f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008300:	f7ff fff0 	bl	80082e4 <HAL_GetTick>
 8008304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d005      	beq.n	800831e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <HAL_Delay+0x44>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800831e:	bf00      	nop
 8008320:	f7ff ffe0 	bl	80082e4 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	429a      	cmp	r2, r3
 800832e:	d8f7      	bhi.n	8008320 <HAL_Delay+0x28>
  {
  }
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000040 	.word	0x20000040

08008340 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e0be      	b.n	80084e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fce4 	bl	8007d4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f9ab 	bl	80086e0 <ADC_ConversionStop_Disable>
 800838a:	4603      	mov	r3, r0
 800838c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b00      	cmp	r3, #0
 8008398:	f040 8099 	bne.w	80084ce <HAL_ADC_Init+0x18e>
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 8095 	bne.w	80084ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80083ac:	f023 0302 	bic.w	r3, r3, #2
 80083b0:	f043 0202 	orr.w	r2, r3, #2
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80083c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	7b1b      	ldrb	r3, [r3, #12]
 80083c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80083c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d8:	d003      	beq.n	80083e2 <HAL_ADC_Init+0xa2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d102      	bne.n	80083e8 <HAL_ADC_Init+0xa8>
 80083e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e6:	e000      	b.n	80083ea <HAL_ADC_Init+0xaa>
 80083e8:	2300      	movs	r3, #0
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7d1b      	ldrb	r3, [r3, #20]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d119      	bne.n	800842c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7b1b      	ldrb	r3, [r3, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	3b01      	subs	r3, #1
 8008406:	035a      	lsls	r2, r3, #13
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	e00b      	b.n	800842c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	f043 0201 	orr.w	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	4b28      	ldr	r3, [pc, #160]	; (80084e8 <HAL_ADC_Init+0x1a8>)
 8008448:	4013      	ands	r3, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	430b      	orrs	r3, r1
 8008452:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845c:	d003      	beq.n	8008466 <HAL_ADC_Init+0x126>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d104      	bne.n	8008470 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	3b01      	subs	r3, #1
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	430a      	orrs	r2, r1
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	4b18      	ldr	r3, [pc, #96]	; (80084ec <HAL_ADC_Init+0x1ac>)
 800848c:	4013      	ands	r3, r2
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d10b      	bne.n	80084ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	f043 0201 	orr.w	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80084aa:	e018      	b.n	80084de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f023 0312 	bic.w	r3, r3, #18
 80084b4:	f043 0210 	orr.w	r2, r3, #16
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f043 0201 	orr.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80084cc:	e007      	b.n	80084de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	f043 0210 	orr.w	r2, r3, #16
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	ffe1f7fd 	.word	0xffe1f7fd
 80084ec:	ff1f0efe 	.word	0xff1f0efe

080084f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_ADC_ConfigChannel+0x20>
 800850c:	2302      	movs	r3, #2
 800850e:	e0dc      	b.n	80086ca <HAL_ADC_ConfigChannel+0x1da>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b06      	cmp	r3, #6
 800851e:	d81c      	bhi.n	800855a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	3b05      	subs	r3, #5
 8008532:	221f      	movs	r2, #31
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	4019      	ands	r1, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	3b05      	subs	r3, #5
 800854c:	fa00 f203 	lsl.w	r2, r0, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	635a      	str	r2, [r3, #52]	; 0x34
 8008558:	e03c      	b.n	80085d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2b0c      	cmp	r3, #12
 8008560:	d81c      	bhi.n	800859c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	3b23      	subs	r3, #35	; 0x23
 8008574:	221f      	movs	r2, #31
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	43db      	mvns	r3, r3
 800857c:	4019      	ands	r1, r3
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	3b23      	subs	r3, #35	; 0x23
 800858e:	fa00 f203 	lsl.w	r2, r0, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
 800859a:	e01b      	b.n	80085d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	3b41      	subs	r3, #65	; 0x41
 80085ae:	221f      	movs	r2, #31
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	43db      	mvns	r3, r3
 80085b6:	4019      	ands	r1, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	3b41      	subs	r3, #65	; 0x41
 80085c8:	fa00 f203 	lsl.w	r2, r0, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d91c      	bls.n	8008616 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68d9      	ldr	r1, [r3, #12]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4613      	mov	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	3b1e      	subs	r3, #30
 80085ee:	2207      	movs	r2, #7
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	4019      	ands	r1, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6898      	ldr	r0, [r3, #8]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4613      	mov	r3, r2
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	4413      	add	r3, r2
 8008606:	3b1e      	subs	r3, #30
 8008608:	fa00 f203 	lsl.w	r2, r0, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	60da      	str	r2, [r3, #12]
 8008614:	e019      	b.n	800864a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6919      	ldr	r1, [r3, #16]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4613      	mov	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	4413      	add	r3, r2
 8008626:	2207      	movs	r2, #7
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	43db      	mvns	r3, r3
 800862e:	4019      	ands	r1, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6898      	ldr	r0, [r3, #8]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	fa00 f203 	lsl.w	r2, r0, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b10      	cmp	r3, #16
 8008650:	d003      	beq.n	800865a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008656:	2b11      	cmp	r3, #17
 8008658:	d132      	bne.n	80086c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d125      	bne.n	80086b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d126      	bne.n	80086c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008680:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b10      	cmp	r3, #16
 8008688:	d11a      	bne.n	80086c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800868a:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a13      	ldr	r2, [pc, #76]	; (80086dc <HAL_ADC_ConfigChannel+0x1ec>)
 8008690:	fba2 2303 	umull	r2, r3, r2, r3
 8008694:	0c9a      	lsrs	r2, r3, #18
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80086a0:	e002      	b.n	80086a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f9      	bne.n	80086a2 <HAL_ADC_ConfigChannel+0x1b2>
 80086ae:	e007      	b.n	80086c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	40012400 	.word	0x40012400
 80086d8:	20000038 	.word	0x20000038
 80086dc:	431bde83 	.word	0x431bde83

080086e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d12e      	bne.n	8008758 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800870a:	f7ff fdeb 	bl	80082e4 <HAL_GetTick>
 800870e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008710:	e01b      	b.n	800874a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008712:	f7ff fde7 	bl	80082e4 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d914      	bls.n	800874a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d10d      	bne.n	800874a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	f043 0210 	orr.w	r2, r3, #16
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	f043 0201 	orr.w	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e007      	b.n	800875a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b01      	cmp	r3, #1
 8008756:	d0dc      	beq.n	8008712 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <__NVIC_SetPriorityGrouping>:
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008780:	4013      	ands	r3, r2
 8008782:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800878c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <__NVIC_SetPriorityGrouping+0x44>)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	60d3      	str	r3, [r2, #12]
}
 800879c:	bf00      	nop
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <__NVIC_GetPriorityGrouping>:
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <__NVIC_GetPriorityGrouping+0x18>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	0a1b      	lsrs	r3, r3, #8
 80087b6:	f003 0307 	and.w	r3, r3, #7
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	e000ed00 	.word	0xe000ed00

080087c8 <__NVIC_EnableIRQ>:
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	db0b      	blt.n	80087f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	f003 021f 	and.w	r2, r3, #31
 80087e0:	4906      	ldr	r1, [pc, #24]	; (80087fc <__NVIC_EnableIRQ+0x34>)
 80087e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2001      	movs	r0, #1
 80087ea:	fa00 f202 	lsl.w	r2, r0, r2
 80087ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	e000e100 	.word	0xe000e100

08008800 <__NVIC_DisableIRQ>:
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800880a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880e:	2b00      	cmp	r3, #0
 8008810:	db12      	blt.n	8008838 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	f003 021f 	and.w	r2, r3, #31
 8008818:	490a      	ldr	r1, [pc, #40]	; (8008844 <__NVIC_DisableIRQ+0x44>)
 800881a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	2001      	movs	r0, #1
 8008822:	fa00 f202 	lsl.w	r2, r0, r2
 8008826:	3320      	adds	r3, #32
 8008828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800882c:	f3bf 8f4f 	dsb	sy
}
 8008830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008832:	f3bf 8f6f 	isb	sy
}
 8008836:	bf00      	nop
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	e000e100 	.word	0xe000e100

08008848 <__NVIC_SetPriority>:
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008858:	2b00      	cmp	r3, #0
 800885a:	db0a      	blt.n	8008872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	b2da      	uxtb	r2, r3
 8008860:	490c      	ldr	r1, [pc, #48]	; (8008894 <__NVIC_SetPriority+0x4c>)
 8008862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008866:	0112      	lsls	r2, r2, #4
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	440b      	add	r3, r1
 800886c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008870:	e00a      	b.n	8008888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	b2da      	uxtb	r2, r3
 8008876:	4908      	ldr	r1, [pc, #32]	; (8008898 <__NVIC_SetPriority+0x50>)
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	3b04      	subs	r3, #4
 8008880:	0112      	lsls	r2, r2, #4
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	440b      	add	r3, r1
 8008886:	761a      	strb	r2, [r3, #24]
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	bc80      	pop	{r7}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	e000e100 	.word	0xe000e100
 8008898:	e000ed00 	.word	0xe000ed00

0800889c <NVIC_EncodePriority>:
{
 800889c:	b480      	push	{r7}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f1c3 0307 	rsb	r3, r3, #7
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	bf28      	it	cs
 80088ba:	2304      	movcs	r3, #4
 80088bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3304      	adds	r3, #4
 80088c2:	2b06      	cmp	r3, #6
 80088c4:	d902      	bls.n	80088cc <NVIC_EncodePriority+0x30>
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	3b03      	subs	r3, #3
 80088ca:	e000      	b.n	80088ce <NVIC_EncodePriority+0x32>
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	43da      	mvns	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	401a      	ands	r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088e4:	f04f 31ff 	mov.w	r1, #4294967295
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	fa01 f303 	lsl.w	r3, r1, r3
 80088ee:	43d9      	mvns	r1, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088f4:	4313      	orrs	r3, r2
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3724      	adds	r7, #36	; 0x24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3b01      	subs	r3, #1
 800890c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008910:	d301      	bcc.n	8008916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008912:	2301      	movs	r3, #1
 8008914:	e00f      	b.n	8008936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008916:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <SysTick_Config+0x40>)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3b01      	subs	r3, #1
 800891c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800891e:	210f      	movs	r1, #15
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	f7ff ff90 	bl	8008848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <SysTick_Config+0x40>)
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <SysTick_Config+0x40>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	e000e010 	.word	0xe000e010

08008944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff ff09 	bl	8008764 <__NVIC_SetPriorityGrouping>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	4603      	mov	r3, r0
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800896c:	f7ff ff1e 	bl	80087ac <__NVIC_GetPriorityGrouping>
 8008970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	6978      	ldr	r0, [r7, #20]
 8008978:	f7ff ff90 	bl	800889c <NVIC_EncodePriority>
 800897c:	4602      	mov	r2, r0
 800897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff ff5f 	bl	8008848 <__NVIC_SetPriority>
}
 800898a:	bf00      	nop
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	4603      	mov	r3, r0
 800899a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800899c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff ff11 	bl	80087c8 <__NVIC_EnableIRQ>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	4603      	mov	r3, r0
 80089b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80089b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ff1f 	bl	8008800 <__NVIC_DisableIRQ>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff ff94 	bl	8008900 <SysTick_Config>
 80089d8:	4603      	mov	r3, r0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e043      	b.n	8008a82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <HAL_DMA_Init+0xa8>)
 8008a02:	4413      	add	r3, r2
 8008a04:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <HAL_DMA_Init+0xac>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	091b      	lsrs	r3, r3, #4
 8008a0c:	009a      	lsls	r2, r3, #2
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <HAL_DMA_Init+0xb0>)
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	bffdfff8 	.word	0xbffdfff8
 8008a90:	cccccccd 	.word	0xcccccccd
 8008a94:	40020000 	.word	0x40020000

08008a98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d04f      	beq.n	8008b60 <HAL_DMA_IRQHandler+0xc8>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d04a      	beq.n	8008b60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d107      	bne.n	8008ae8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0204 	bic.w	r2, r2, #4
 8008ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a66      	ldr	r2, [pc, #408]	; (8008c88 <HAL_DMA_IRQHandler+0x1f0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d029      	beq.n	8008b46 <HAL_DMA_IRQHandler+0xae>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a65      	ldr	r2, [pc, #404]	; (8008c8c <HAL_DMA_IRQHandler+0x1f4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d022      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xaa>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a63      	ldr	r2, [pc, #396]	; (8008c90 <HAL_DMA_IRQHandler+0x1f8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d01a      	beq.n	8008b3c <HAL_DMA_IRQHandler+0xa4>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a62      	ldr	r2, [pc, #392]	; (8008c94 <HAL_DMA_IRQHandler+0x1fc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d012      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x9e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a60      	ldr	r2, [pc, #384]	; (8008c98 <HAL_DMA_IRQHandler+0x200>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00a      	beq.n	8008b30 <HAL_DMA_IRQHandler+0x98>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a5f      	ldr	r2, [pc, #380]	; (8008c9c <HAL_DMA_IRQHandler+0x204>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d102      	bne.n	8008b2a <HAL_DMA_IRQHandler+0x92>
 8008b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b28:	e00e      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b2e:	e00b      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b34:	e008      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b3a:	e005      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b40:	e002      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	e000      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb0>
 8008b46:	2304      	movs	r3, #4
 8008b48:	4a55      	ldr	r2, [pc, #340]	; (8008ca0 <HAL_DMA_IRQHandler+0x208>)
 8008b4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8094 	beq.w	8008c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008b5e:	e08e      	b.n	8008c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	2202      	movs	r2, #2
 8008b66:	409a      	lsls	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d056      	beq.n	8008c1e <HAL_DMA_IRQHandler+0x186>
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d051      	beq.n	8008c1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 020a 	bic.w	r2, r2, #10
 8008b96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a38      	ldr	r2, [pc, #224]	; (8008c88 <HAL_DMA_IRQHandler+0x1f0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d029      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x166>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a37      	ldr	r2, [pc, #220]	; (8008c8c <HAL_DMA_IRQHandler+0x1f4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d022      	beq.n	8008bfa <HAL_DMA_IRQHandler+0x162>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a35      	ldr	r2, [pc, #212]	; (8008c90 <HAL_DMA_IRQHandler+0x1f8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01a      	beq.n	8008bf4 <HAL_DMA_IRQHandler+0x15c>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a34      	ldr	r2, [pc, #208]	; (8008c94 <HAL_DMA_IRQHandler+0x1fc>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d012      	beq.n	8008bee <HAL_DMA_IRQHandler+0x156>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a32      	ldr	r2, [pc, #200]	; (8008c98 <HAL_DMA_IRQHandler+0x200>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00a      	beq.n	8008be8 <HAL_DMA_IRQHandler+0x150>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a31      	ldr	r2, [pc, #196]	; (8008c9c <HAL_DMA_IRQHandler+0x204>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d102      	bne.n	8008be2 <HAL_DMA_IRQHandler+0x14a>
 8008bdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008be0:	e00e      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008be6:	e00b      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bec:	e008      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bf2:	e005      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf8:	e002      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008bfa:	2320      	movs	r3, #32
 8008bfc:	e000      	b.n	8008c00 <HAL_DMA_IRQHandler+0x168>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	4a27      	ldr	r2, [pc, #156]	; (8008ca0 <HAL_DMA_IRQHandler+0x208>)
 8008c02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d034      	beq.n	8008c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008c1c:	e02f      	b.n	8008c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	2208      	movs	r2, #8
 8008c24:	409a      	lsls	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d028      	beq.n	8008c80 <HAL_DMA_IRQHandler+0x1e8>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d023      	beq.n	8008c80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 020e 	bic.w	r2, r2, #14
 8008c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	2101      	movs	r1, #1
 8008c52:	fa01 f202 	lsl.w	r2, r1, r2
 8008c56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d004      	beq.n	8008c80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
    }
  }
  return;
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
}
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	40020008 	.word	0x40020008
 8008c8c:	4002001c 	.word	0x4002001c
 8008c90:	40020030 	.word	0x40020030
 8008c94:	40020044 	.word	0x40020044
 8008c98:	40020058 	.word	0x40020058
 8008c9c:	4002006c 	.word	0x4002006c
 8008ca0:	40020000 	.word	0x40020000

08008ca4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <HAL_FLASH_Program+0xd8>)
 8008cc0:	7e1b      	ldrb	r3, [r3, #24]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_FLASH_Program+0x26>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e054      	b.n	8008d74 <HAL_FLASH_Program+0xd0>
 8008cca:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <HAL_FLASH_Program+0xd8>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cd4:	f000 f8a8 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d144      	bne.n	8008d6c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d102      	bne.n	8008cee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	757b      	strb	r3, [r7, #21]
 8008cec:	e007      	b.n	8008cfe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d102      	bne.n	8008cfa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	757b      	strb	r3, [r7, #21]
 8008cf8:	e001      	b.n	8008cfe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75bb      	strb	r3, [r7, #22]
 8008d02:	e02d      	b.n	8008d60 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008d04:	7dbb      	ldrb	r3, [r7, #22]
 8008d06:	005a      	lsls	r2, r3, #1
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	eb02 0c03 	add.w	ip, r2, r3
 8008d0e:	7dbb      	ldrb	r3, [r7, #22]
 8008d10:	0119      	lsls	r1, r3, #4
 8008d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d16:	f1c1 0620 	rsb	r6, r1, #32
 8008d1a:	f1a1 0020 	sub.w	r0, r1, #32
 8008d1e:	fa22 f401 	lsr.w	r4, r2, r1
 8008d22:	fa03 f606 	lsl.w	r6, r3, r6
 8008d26:	4334      	orrs	r4, r6
 8008d28:	fa23 f000 	lsr.w	r0, r3, r0
 8008d2c:	4304      	orrs	r4, r0
 8008d2e:	fa23 f501 	lsr.w	r5, r3, r1
 8008d32:	b2a3      	uxth	r3, r4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4660      	mov	r0, ip
 8008d38:	f000 f85a 	bl	8008df0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008d40:	f000 f872 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <HAL_FLASH_Program+0xdc>)
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	4a0c      	ldr	r2, [pc, #48]	; (8008d80 <HAL_FLASH_Program+0xdc>)
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d107      	bne.n	8008d6a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8008d5a:	7dbb      	ldrb	r3, [r7, #22]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	75bb      	strb	r3, [r7, #22]
 8008d60:	7dba      	ldrb	r2, [r7, #22]
 8008d62:	7d7b      	ldrb	r3, [r7, #21]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d3cd      	bcc.n	8008d04 <HAL_FLASH_Program+0x60>
 8008d68:	e000      	b.n	8008d6c <HAL_FLASH_Program+0xc8>
      {
        break;
 8008d6a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d6c:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <HAL_FLASH_Program+0xd8>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	761a      	strb	r2, [r3, #24]

  return status;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7c:	20000918 	.word	0x20000918
 8008d80:	40022000 	.word	0x40022000

08008d84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <HAL_FLASH_Unlock+0x40>)
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00d      	beq.n	8008db6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <HAL_FLASH_Unlock+0x40>)
 8008d9c:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <HAL_FLASH_Unlock+0x44>)
 8008d9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <HAL_FLASH_Unlock+0x40>)
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <HAL_FLASH_Unlock+0x48>)
 8008da4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008da6:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <HAL_FLASH_Unlock+0x40>)
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8008db6:	79fb      	ldrb	r3, [r7, #7]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40022000 	.word	0x40022000
 8008dc8:	45670123 	.word	0x45670123
 8008dcc:	cdef89ab 	.word	0xcdef89ab

08008dd0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <HAL_FLASH_Lock+0x1c>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	4a04      	ldr	r2, [pc, #16]	; (8008dec <HAL_FLASH_Lock+0x1c>)
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40022000 	.word	0x40022000

08008df0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <FLASH_Program_HalfWord+0x30>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <FLASH_Program_HalfWord+0x34>)
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <FLASH_Program_HalfWord+0x34>)
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	887a      	ldrh	r2, [r7, #2]
 8008e12:	801a      	strh	r2, [r3, #0]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20000918 	.word	0x20000918
 8008e24:	40022000 	.word	0x40022000

08008e28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8008e30:	f7ff fa58 	bl	80082e4 <HAL_GetTick>
 8008e34:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008e36:	e010      	b.n	8008e5a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d00c      	beq.n	8008e5a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <FLASH_WaitForLastOperation+0x2e>
 8008e46:	f7ff fa4d 	bl	80082e4 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d201      	bcs.n	8008e5a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e025      	b.n	8008ea6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008e5a:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e8      	bne.n	8008e38 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e74:	2220      	movs	r2, #32
 8008e76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008e78:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d105      	bne.n	8008e9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <FLASH_WaitForLastOperation+0x88>)
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008e9c:	f000 f80a 	bl	8008eb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40022000 	.word	0x40022000

08008eb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008ebe:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 0310 	and.w	r3, r3, #16
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008eca:	4b21      	ldr	r3, [pc, #132]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f043 0302 	orr.w	r3, r3, #2
 8008ed2:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008ed4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f043 0310 	orr.w	r3, r3, #16
 8008edc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008ede:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f003 0304 	and.w	r3, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008ef4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f043 0304 	orr.w	r3, r3, #4
 8008efc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f043 0304 	orr.w	r3, r3, #4
 8008f12:	4a0f      	ldr	r2, [pc, #60]	; (8008f50 <FLASH_SetErrorCode+0x9c>)
 8008f14:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f240 1201 	movw	r2, #257	; 0x101
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d106      	bne.n	8008f3a <FLASH_SetErrorCode+0x86>
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f32:	f023 0301 	bic.w	r3, r3, #1
 8008f36:	61d3      	str	r3, [r2, #28]
}  
 8008f38:	e002      	b.n	8008f40 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008f3a:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <FLASH_SetErrorCode+0x98>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60d3      	str	r3, [r2, #12]
}  
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40022000 	.word	0x40022000
 8008f50:	20000918 	.word	0x20000918

08008f54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008f66:	4b2f      	ldr	r3, [pc, #188]	; (8009024 <HAL_FLASHEx_Erase+0xd0>)
 8008f68:	7e1b      	ldrb	r3, [r3, #24]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_FLASHEx_Erase+0x1e>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e053      	b.n	800901a <HAL_FLASHEx_Erase+0xc6>
 8008f72:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <HAL_FLASHEx_Erase+0xd0>)
 8008f74:	2201      	movs	r2, #1
 8008f76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d116      	bne.n	8008fae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f84:	f7ff ff50 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d141      	bne.n	8009012 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8008f8e:	2001      	movs	r0, #1
 8008f90:	f000 f84c 	bl	800902c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f98:	f7ff ff46 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008fa0:	4b21      	ldr	r3, [pc, #132]	; (8009028 <HAL_FLASHEx_Erase+0xd4>)
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	4a20      	ldr	r2, [pc, #128]	; (8009028 <HAL_FLASHEx_Erase+0xd4>)
 8008fa6:	f023 0304 	bic.w	r3, r3, #4
 8008faa:	6113      	str	r3, [r2, #16]
 8008fac:	e031      	b.n	8009012 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008fb2:	f7ff ff39 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d12a      	bne.n	8009012 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	60bb      	str	r3, [r7, #8]
 8008fca:	e019      	b.n	8009000 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f849 	bl	8009064 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008fd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008fd6:	f7ff ff27 	bl	8008e28 <FLASH_WaitForLastOperation>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008fde:	4b12      	ldr	r3, [pc, #72]	; (8009028 <HAL_FLASHEx_Erase+0xd4>)
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	4a11      	ldr	r2, [pc, #68]	; (8009028 <HAL_FLASHEx_Erase+0xd4>)
 8008fe4:	f023 0302 	bic.w	r3, r3, #2
 8008fe8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	601a      	str	r2, [r3, #0]
            break;
 8008ff6:	e00c      	b.n	8009012 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ffe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	029a      	lsls	r2, r3, #10
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	4413      	add	r3, r2
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3dc      	bcc.n	8008fcc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009012:	4b04      	ldr	r3, [pc, #16]	; (8009024 <HAL_FLASHEx_Erase+0xd0>)
 8009014:	2200      	movs	r2, #0
 8009016:	761a      	strb	r2, [r3, #24]

  return status;
 8009018:	7bfb      	ldrb	r3, [r7, #15]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000918 	.word	0x20000918
 8009028:	40022000 	.word	0x40022000

0800902c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009034:	4b09      	ldr	r3, [pc, #36]	; (800905c <FLASH_MassErase+0x30>)
 8009036:	2200      	movs	r2, #0
 8009038:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <FLASH_MassErase+0x34>)
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	4a08      	ldr	r2, [pc, #32]	; (8009060 <FLASH_MassErase+0x34>)
 8009040:	f043 0304 	orr.w	r3, r3, #4
 8009044:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <FLASH_MassErase+0x34>)
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	4a05      	ldr	r2, [pc, #20]	; (8009060 <FLASH_MassErase+0x34>)
 800904c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009050:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	20000918 	.word	0x20000918
 8009060:	40022000 	.word	0x40022000

08009064 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800906c:	4b0b      	ldr	r3, [pc, #44]	; (800909c <FLASH_PageErase+0x38>)
 800906e:	2200      	movs	r2, #0
 8009070:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <FLASH_PageErase+0x3c>)
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	4a0a      	ldr	r2, [pc, #40]	; (80090a0 <FLASH_PageErase+0x3c>)
 8009078:	f043 0302 	orr.w	r3, r3, #2
 800907c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800907e:	4a08      	ldr	r2, [pc, #32]	; (80090a0 <FLASH_PageErase+0x3c>)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <FLASH_PageErase+0x3c>)
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	4a05      	ldr	r2, [pc, #20]	; (80090a0 <FLASH_PageErase+0x3c>)
 800908a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000918 	.word	0x20000918
 80090a0:	40022000 	.word	0x40022000

080090a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b08b      	sub	sp, #44	; 0x2c
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090ae:	2300      	movs	r3, #0
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80090b2:	2300      	movs	r3, #0
 80090b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090b6:	e169      	b.n	800938c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80090b8:	2201      	movs	r2, #1
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	fa02 f303 	lsl.w	r3, r2, r3
 80090c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	4013      	ands	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	f040 8158 	bne.w	8009386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4a9a      	ldr	r2, [pc, #616]	; (8009344 <HAL_GPIO_Init+0x2a0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d05e      	beq.n	800919e <HAL_GPIO_Init+0xfa>
 80090e0:	4a98      	ldr	r2, [pc, #608]	; (8009344 <HAL_GPIO_Init+0x2a0>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d875      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 80090e6:	4a98      	ldr	r2, [pc, #608]	; (8009348 <HAL_GPIO_Init+0x2a4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d058      	beq.n	800919e <HAL_GPIO_Init+0xfa>
 80090ec:	4a96      	ldr	r2, [pc, #600]	; (8009348 <HAL_GPIO_Init+0x2a4>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d86f      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 80090f2:	4a96      	ldr	r2, [pc, #600]	; (800934c <HAL_GPIO_Init+0x2a8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d052      	beq.n	800919e <HAL_GPIO_Init+0xfa>
 80090f8:	4a94      	ldr	r2, [pc, #592]	; (800934c <HAL_GPIO_Init+0x2a8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d869      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 80090fe:	4a94      	ldr	r2, [pc, #592]	; (8009350 <HAL_GPIO_Init+0x2ac>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d04c      	beq.n	800919e <HAL_GPIO_Init+0xfa>
 8009104:	4a92      	ldr	r2, [pc, #584]	; (8009350 <HAL_GPIO_Init+0x2ac>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d863      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 800910a:	4a92      	ldr	r2, [pc, #584]	; (8009354 <HAL_GPIO_Init+0x2b0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d046      	beq.n	800919e <HAL_GPIO_Init+0xfa>
 8009110:	4a90      	ldr	r2, [pc, #576]	; (8009354 <HAL_GPIO_Init+0x2b0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d85d      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 8009116:	2b12      	cmp	r3, #18
 8009118:	d82a      	bhi.n	8009170 <HAL_GPIO_Init+0xcc>
 800911a:	2b12      	cmp	r3, #18
 800911c:	d859      	bhi.n	80091d2 <HAL_GPIO_Init+0x12e>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <HAL_GPIO_Init+0x80>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	0800919f 	.word	0x0800919f
 8009128:	08009179 	.word	0x08009179
 800912c:	0800918b 	.word	0x0800918b
 8009130:	080091cd 	.word	0x080091cd
 8009134:	080091d3 	.word	0x080091d3
 8009138:	080091d3 	.word	0x080091d3
 800913c:	080091d3 	.word	0x080091d3
 8009140:	080091d3 	.word	0x080091d3
 8009144:	080091d3 	.word	0x080091d3
 8009148:	080091d3 	.word	0x080091d3
 800914c:	080091d3 	.word	0x080091d3
 8009150:	080091d3 	.word	0x080091d3
 8009154:	080091d3 	.word	0x080091d3
 8009158:	080091d3 	.word	0x080091d3
 800915c:	080091d3 	.word	0x080091d3
 8009160:	080091d3 	.word	0x080091d3
 8009164:	080091d3 	.word	0x080091d3
 8009168:	08009181 	.word	0x08009181
 800916c:	08009195 	.word	0x08009195
 8009170:	4a79      	ldr	r2, [pc, #484]	; (8009358 <HAL_GPIO_Init+0x2b4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009176:	e02c      	b.n	80091d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	623b      	str	r3, [r7, #32]
          break;
 800917e:	e029      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	3304      	adds	r3, #4
 8009186:	623b      	str	r3, [r7, #32]
          break;
 8009188:	e024      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	3308      	adds	r3, #8
 8009190:	623b      	str	r3, [r7, #32]
          break;
 8009192:	e01f      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	330c      	adds	r3, #12
 800919a:	623b      	str	r3, [r7, #32]
          break;
 800919c:	e01a      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80091a6:	2304      	movs	r3, #4
 80091a8:	623b      	str	r3, [r7, #32]
          break;
 80091aa:	e013      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d105      	bne.n	80091c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80091b4:	2308      	movs	r3, #8
 80091b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	611a      	str	r2, [r3, #16]
          break;
 80091be:	e009      	b.n	80091d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80091c0:	2308      	movs	r3, #8
 80091c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	615a      	str	r2, [r3, #20]
          break;
 80091ca:	e003      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80091cc:	2300      	movs	r3, #0
 80091ce:	623b      	str	r3, [r7, #32]
          break;
 80091d0:	e000      	b.n	80091d4 <HAL_GPIO_Init+0x130>
          break;
 80091d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2bff      	cmp	r3, #255	; 0xff
 80091d8:	d801      	bhi.n	80091de <HAL_GPIO_Init+0x13a>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	e001      	b.n	80091e2 <HAL_GPIO_Init+0x13e>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2bff      	cmp	r3, #255	; 0xff
 80091e8:	d802      	bhi.n	80091f0 <HAL_GPIO_Init+0x14c>
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	e002      	b.n	80091f6 <HAL_GPIO_Init+0x152>
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3b08      	subs	r3, #8
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	210f      	movs	r1, #15
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	fa01 f303 	lsl.w	r3, r1, r3
 8009204:	43db      	mvns	r3, r3
 8009206:	401a      	ands	r2, r3
 8009208:	6a39      	ldr	r1, [r7, #32]
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	fa01 f303 	lsl.w	r3, r1, r3
 8009210:	431a      	orrs	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80b1 	beq.w	8009386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009224:	4b4d      	ldr	r3, [pc, #308]	; (800935c <HAL_GPIO_Init+0x2b8>)
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	4a4c      	ldr	r2, [pc, #304]	; (800935c <HAL_GPIO_Init+0x2b8>)
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	6193      	str	r3, [r2, #24]
 8009230:	4b4a      	ldr	r3, [pc, #296]	; (800935c <HAL_GPIO_Init+0x2b8>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	60bb      	str	r3, [r7, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800923c:	4a48      	ldr	r2, [pc, #288]	; (8009360 <HAL_GPIO_Init+0x2bc>)
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	089b      	lsrs	r3, r3, #2
 8009242:	3302      	adds	r3, #2
 8009244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	220f      	movs	r2, #15
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4013      	ands	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a40      	ldr	r2, [pc, #256]	; (8009364 <HAL_GPIO_Init+0x2c0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d013      	beq.n	8009290 <HAL_GPIO_Init+0x1ec>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <HAL_GPIO_Init+0x2c4>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00d      	beq.n	800928c <HAL_GPIO_Init+0x1e8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a3e      	ldr	r2, [pc, #248]	; (800936c <HAL_GPIO_Init+0x2c8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <HAL_GPIO_Init+0x1e4>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a3d      	ldr	r2, [pc, #244]	; (8009370 <HAL_GPIO_Init+0x2cc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d101      	bne.n	8009284 <HAL_GPIO_Init+0x1e0>
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <HAL_GPIO_Init+0x1ee>
 8009284:	2304      	movs	r3, #4
 8009286:	e004      	b.n	8009292 <HAL_GPIO_Init+0x1ee>
 8009288:	2302      	movs	r3, #2
 800928a:	e002      	b.n	8009292 <HAL_GPIO_Init+0x1ee>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <HAL_GPIO_Init+0x1ee>
 8009290:	2300      	movs	r3, #0
 8009292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009294:	f002 0203 	and.w	r2, r2, #3
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	4093      	lsls	r3, r2
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80092a2:	492f      	ldr	r1, [pc, #188]	; (8009360 <HAL_GPIO_Init+0x2bc>)
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	089b      	lsrs	r3, r3, #2
 80092a8:	3302      	adds	r3, #2
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d006      	beq.n	80092ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80092bc:	4b2d      	ldr	r3, [pc, #180]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	492c      	ldr	r1, [pc, #176]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	608b      	str	r3, [r1, #8]
 80092c8:	e006      	b.n	80092d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80092ca:	4b2a      	ldr	r3, [pc, #168]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	43db      	mvns	r3, r3
 80092d2:	4928      	ldr	r1, [pc, #160]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d006      	beq.n	80092f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80092e4:	4b23      	ldr	r3, [pc, #140]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	4922      	ldr	r1, [pc, #136]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60cb      	str	r3, [r1, #12]
 80092f0:	e006      	b.n	8009300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80092f2:	4b20      	ldr	r3, [pc, #128]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	43db      	mvns	r3, r3
 80092fa:	491e      	ldr	r1, [pc, #120]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800930c:	4b19      	ldr	r3, [pc, #100]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	4918      	ldr	r1, [pc, #96]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	4313      	orrs	r3, r2
 8009316:	604b      	str	r3, [r1, #4]
 8009318:	e006      	b.n	8009328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800931a:	4b16      	ldr	r3, [pc, #88]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	43db      	mvns	r3, r3
 8009322:	4914      	ldr	r1, [pc, #80]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 8009324:	4013      	ands	r3, r2
 8009326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d021      	beq.n	8009378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009334:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	490e      	ldr	r1, [pc, #56]	; (8009374 <HAL_GPIO_Init+0x2d0>)
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	4313      	orrs	r3, r2
 800933e:	600b      	str	r3, [r1, #0]
 8009340:	e021      	b.n	8009386 <HAL_GPIO_Init+0x2e2>
 8009342:	bf00      	nop
 8009344:	10320000 	.word	0x10320000
 8009348:	10310000 	.word	0x10310000
 800934c:	10220000 	.word	0x10220000
 8009350:	10210000 	.word	0x10210000
 8009354:	10120000 	.word	0x10120000
 8009358:	10110000 	.word	0x10110000
 800935c:	40021000 	.word	0x40021000
 8009360:	40010000 	.word	0x40010000
 8009364:	40010800 	.word	0x40010800
 8009368:	40010c00 	.word	0x40010c00
 800936c:	40011000 	.word	0x40011000
 8009370:	40011400 	.word	0x40011400
 8009374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009378:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_GPIO_Init+0x304>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	43db      	mvns	r3, r3
 8009380:	4909      	ldr	r1, [pc, #36]	; (80093a8 <HAL_GPIO_Init+0x304>)
 8009382:	4013      	ands	r3, r2
 8009384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	3301      	adds	r3, #1
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	f47f ae8e 	bne.w	80090b8 <HAL_GPIO_Init+0x14>
  }
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	372c      	adds	r7, #44	; 0x2c
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	40010400 	.word	0x40010400

080093ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	887b      	ldrh	r3, [r7, #2]
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
 80093c8:	e001      	b.n	80093ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr

080093da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	807b      	strh	r3, [r7, #2]
 80093e6:	4613      	mov	r3, r2
 80093e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093ea:	787b      	ldrb	r3, [r7, #1]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093f0:	887a      	ldrh	r2, [r7, #2]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093f6:	e003      	b.n	8009400 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093f8:	887b      	ldrh	r3, [r7, #2]
 80093fa:	041a      	lsls	r2, r3, #16
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	611a      	str	r2, [r3, #16]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr

0800940a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800941c:	887a      	ldrh	r2, [r7, #2]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4013      	ands	r3, r2
 8009422:	041a      	lsls	r2, r3, #16
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	43d9      	mvns	r1, r3
 8009428:	887b      	ldrh	r3, [r7, #2]
 800942a:	400b      	ands	r3, r1
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	611a      	str	r2, [r3, #16]
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009446:	4b08      	ldr	r3, [pc, #32]	; (8009468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009448:	695a      	ldr	r2, [r3, #20]
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	4013      	ands	r3, r2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d006      	beq.n	8009460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009452:	4a05      	ldr	r2, [pc, #20]	; (8009468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd faee 	bl	8006a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40010400 	.word	0x40010400

0800946c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e12b      	b.n	80096d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d106      	bne.n	8009498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fe fc96 	bl	8007dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2224      	movs	r2, #36	; 0x24
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094d0:	f002 f848 	bl	800b564 <HAL_RCC_GetPCLK1Freq>
 80094d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4a81      	ldr	r2, [pc, #516]	; (80096e0 <HAL_I2C_Init+0x274>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d807      	bhi.n	80094f0 <HAL_I2C_Init+0x84>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a80      	ldr	r2, [pc, #512]	; (80096e4 <HAL_I2C_Init+0x278>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bf94      	ite	ls
 80094e8:	2301      	movls	r3, #1
 80094ea:	2300      	movhi	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	e006      	b.n	80094fe <HAL_I2C_Init+0x92>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a7d      	ldr	r2, [pc, #500]	; (80096e8 <HAL_I2C_Init+0x27c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	bf94      	ite	ls
 80094f8:	2301      	movls	r3, #1
 80094fa:	2300      	movhi	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0e7      	b.n	80096d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4a78      	ldr	r2, [pc, #480]	; (80096ec <HAL_I2C_Init+0x280>)
 800950a:	fba2 2303 	umull	r2, r3, r2, r3
 800950e:	0c9b      	lsrs	r3, r3, #18
 8009510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a6a      	ldr	r2, [pc, #424]	; (80096e0 <HAL_I2C_Init+0x274>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d802      	bhi.n	8009540 <HAL_I2C_Init+0xd4>
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	3301      	adds	r3, #1
 800953e:	e009      	b.n	8009554 <HAL_I2C_Init+0xe8>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009546:	fb02 f303 	mul.w	r3, r2, r3
 800954a:	4a69      	ldr	r2, [pc, #420]	; (80096f0 <HAL_I2C_Init+0x284>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	099b      	lsrs	r3, r3, #6
 8009552:	3301      	adds	r3, #1
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	430b      	orrs	r3, r1
 800955a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	495c      	ldr	r1, [pc, #368]	; (80096e0 <HAL_I2C_Init+0x274>)
 8009570:	428b      	cmp	r3, r1
 8009572:	d819      	bhi.n	80095a8 <HAL_I2C_Init+0x13c>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	1e59      	subs	r1, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009582:	1c59      	adds	r1, r3, #1
 8009584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009588:	400b      	ands	r3, r1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <HAL_I2C_Init+0x138>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1e59      	subs	r1, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	fbb1 f3f3 	udiv	r3, r1, r3
 800959c:	3301      	adds	r3, #1
 800959e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a2:	e051      	b.n	8009648 <HAL_I2C_Init+0x1dc>
 80095a4:	2304      	movs	r3, #4
 80095a6:	e04f      	b.n	8009648 <HAL_I2C_Init+0x1dc>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d111      	bne.n	80095d4 <HAL_I2C_Init+0x168>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	1e58      	subs	r0, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6859      	ldr	r1, [r3, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	440b      	add	r3, r1
 80095be:	fbb0 f3f3 	udiv	r3, r0, r3
 80095c2:	3301      	adds	r3, #1
 80095c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bf0c      	ite	eq
 80095cc:	2301      	moveq	r3, #1
 80095ce:	2300      	movne	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	e012      	b.n	80095fa <HAL_I2C_Init+0x18e>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1e58      	subs	r0, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6859      	ldr	r1, [r3, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	0099      	lsls	r1, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ea:	3301      	adds	r3, #1
 80095ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bf0c      	ite	eq
 80095f4:	2301      	moveq	r3, #1
 80095f6:	2300      	movne	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <HAL_I2C_Init+0x196>
 80095fe:	2301      	movs	r3, #1
 8009600:	e022      	b.n	8009648 <HAL_I2C_Init+0x1dc>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10e      	bne.n	8009628 <HAL_I2C_Init+0x1bc>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1e58      	subs	r0, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6859      	ldr	r1, [r3, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	440b      	add	r3, r1
 8009618:	fbb0 f3f3 	udiv	r3, r0, r3
 800961c:	3301      	adds	r3, #1
 800961e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009626:	e00f      	b.n	8009648 <HAL_I2C_Init+0x1dc>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	1e58      	subs	r0, r3, #1
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6859      	ldr	r1, [r3, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	0099      	lsls	r1, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	fbb0 f3f3 	udiv	r3, r0, r3
 800963e:	3301      	adds	r3, #1
 8009640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	6809      	ldr	r1, [r1, #0]
 800964c:	4313      	orrs	r3, r2
 800964e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69da      	ldr	r2, [r3, #28]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	6911      	ldr	r1, [r2, #16]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	68d2      	ldr	r2, [r2, #12]
 8009682:	4311      	orrs	r1, r2
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6812      	ldr	r2, [r2, #0]
 8009688:	430b      	orrs	r3, r1
 800968a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695a      	ldr	r2, [r3, #20]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0201 	orr.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	000186a0 	.word	0x000186a0
 80096e4:	001e847f 	.word	0x001e847f
 80096e8:	003d08ff 	.word	0x003d08ff
 80096ec:	431bde83 	.word	0x431bde83
 80096f0:	10624dd3 	.word	0x10624dd3

080096f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	461a      	mov	r2, r3
 8009700:	460b      	mov	r3, r1
 8009702:	817b      	strh	r3, [r7, #10]
 8009704:	4613      	mov	r3, r2
 8009706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009708:	f7fe fdec 	bl	80082e4 <HAL_GetTick>
 800970c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b20      	cmp	r3, #32
 8009718:	f040 80e0 	bne.w	80098dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	2319      	movs	r3, #25
 8009722:	2201      	movs	r2, #1
 8009724:	4970      	ldr	r1, [pc, #448]	; (80098e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f001 f91c 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
 8009734:	e0d3      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_I2C_Master_Transmit+0x50>
 8009740:	2302      	movs	r3, #2
 8009742:	e0cc      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b01      	cmp	r3, #1
 8009758:	d007      	beq.n	800976a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0201 	orr.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2221      	movs	r2, #33	; 0x21
 800977e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2210      	movs	r2, #16
 8009786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	893a      	ldrh	r2, [r7, #8]
 800979a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a50      	ldr	r2, [pc, #320]	; (80098ec <HAL_I2C_Master_Transmit+0x1f8>)
 80097aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097ac:	8979      	ldrh	r1, [r7, #10]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	6a3a      	ldr	r2, [r7, #32]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fe9e 	bl	800a4f4 <I2C_MasterRequestWrite>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e08d      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097c2:	2300      	movs	r3, #0
 80097c4:	613b      	str	r3, [r7, #16]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097d8:	e066      	b.n	80098a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	6a39      	ldr	r1, [r7, #32]
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f001 f9da 	bl	800ab98 <I2C_WaitOnTXEFlagUntilTimeout>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00d      	beq.n	8009806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	d107      	bne.n	8009802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e06b      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009820:	b29b      	uxth	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b04      	cmp	r3, #4
 8009842:	d11b      	bne.n	800987c <HAL_I2C_Master_Transmit+0x188>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	2b00      	cmp	r3, #0
 800984a:	d017      	beq.n	800987c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009866:	b29b      	uxth	r3, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	6a39      	ldr	r1, [r7, #32]
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f001 f9d1 	bl	800ac28 <I2C_WaitOnBTFFlagUntilTimeout>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00d      	beq.n	80098a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009890:	2b04      	cmp	r3, #4
 8009892:	d107      	bne.n	80098a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e01a      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d194      	bne.n	80097da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	e000      	b.n	80098de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098dc:	2302      	movs	r3, #2
  }
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	00100002 	.word	0x00100002
 80098ec:	ffff0000 	.word	0xffff0000

080098f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08c      	sub	sp, #48	; 0x30
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	461a      	mov	r2, r3
 80098fc:	460b      	mov	r3, r1
 80098fe:	817b      	strh	r3, [r7, #10]
 8009900:	4613      	mov	r3, r2
 8009902:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009908:	f7fe fcec 	bl	80082e4 <HAL_GetTick>
 800990c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b20      	cmp	r3, #32
 8009918:	f040 824b 	bne.w	8009db2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	2319      	movs	r3, #25
 8009922:	2201      	movs	r2, #1
 8009924:	497f      	ldr	r1, [pc, #508]	; (8009b24 <HAL_I2C_Master_Receive+0x234>)
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 f81c 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
 8009934:	e23e      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_I2C_Master_Receive+0x54>
 8009940:	2302      	movs	r3, #2
 8009942:	e237      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b01      	cmp	r3, #1
 8009958:	d007      	beq.n	800996a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0201 	orr.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2222      	movs	r2, #34	; 0x22
 800997e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2210      	movs	r2, #16
 8009986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	893a      	ldrh	r2, [r7, #8]
 800999a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4a5f      	ldr	r2, [pc, #380]	; (8009b28 <HAL_I2C_Master_Receive+0x238>)
 80099aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80099ac:	8979      	ldrh	r1, [r7, #10]
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fe20 	bl	800a5f8 <I2C_MasterRequestRead>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e1f8      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d113      	bne.n	80099f2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099ca:	2300      	movs	r3, #0
 80099cc:	61fb      	str	r3, [r7, #28]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e1cc      	b.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d11e      	bne.n	8009a38 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a0a:	b672      	cpsid	i
}
 8009a0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	61bb      	str	r3, [r7, #24]
 8009a22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a34:	b662      	cpsie	i
}
 8009a36:	e035      	b.n	8009aa4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d11e      	bne.n	8009a7e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a50:	b672      	cpsid	i
}
 8009a52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a54:	2300      	movs	r3, #0
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a7a:	b662      	cpsie	i
}
 8009a7c:	e012      	b.n	8009aa4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	613b      	str	r3, [r7, #16]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	613b      	str	r3, [r7, #16]
 8009aa2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009aa4:	e172      	b.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	f200 811f 	bhi.w	8009cee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d123      	bne.n	8009b00 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f001 f8fb 	bl	800acb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e173      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	691a      	ldr	r2, [r3, #16]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009afe:	e145      	b.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d152      	bne.n	8009bae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4906      	ldr	r1, [pc, #24]	; (8009b2c <HAL_I2C_Master_Receive+0x23c>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 ff26 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e148      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
 8009b22:	bf00      	nop
 8009b24:	00100002 	.word	0x00100002
 8009b28:	ffff0000 	.word	0xffff0000
 8009b2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009b30:	b672      	cpsid	i
}
 8009b32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b60:	3b01      	subs	r3, #1
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b76:	b662      	cpsie	i
}
 8009b78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bac:	e0ee      	b.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4981      	ldr	r1, [pc, #516]	; (8009dbc <HAL_I2C_Master_Receive+0x4cc>)
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fed3 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e0f5      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bd8:	b672      	cpsid	i
}
 8009bda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	b2d2      	uxtb	r2, r2
 8009be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c0e:	4b6c      	ldr	r3, [pc, #432]	; (8009dc0 <HAL_I2C_Master_Receive+0x4d0>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	08db      	lsrs	r3, r3, #3
 8009c14:	4a6b      	ldr	r2, [pc, #428]	; (8009dc4 <HAL_I2C_Master_Receive+0x4d4>)
 8009c16:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1a:	0a1a      	lsrs	r2, r3, #8
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d118      	bne.n	8009c66 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	f043 0220 	orr.w	r2, r3, #32
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009c56:	b662      	cpsie	i
}
 8009c58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e0a6      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d1d9      	bne.n	8009c28 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb6:	b662      	cpsie	i
}
 8009cb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	b2d2      	uxtb	r2, r2
 8009cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cec:	e04e      	b.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 ffe0 	bl	800acb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e058      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d124      	bne.n	8009d8c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d107      	bne.n	8009d5a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f47f ae88 	bne.w	8009aa6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e000      	b.n	8009db4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8009db2:	2302      	movs	r3, #2
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	; 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	00010004 	.word	0x00010004
 8009dc0:	20000038 	.word	0x20000038
 8009dc4:	14f8b589 	.word	0x14f8b589

08009dc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08c      	sub	sp, #48	; 0x30
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	817b      	strh	r3, [r7, #10]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	813b      	strh	r3, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009de6:	f7fe fa7d 	bl	80082e4 <HAL_GetTick>
 8009dea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	f040 8244 	bne.w	800a282 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	2319      	movs	r3, #25
 8009e00:	2201      	movs	r2, #1
 8009e02:	4982      	ldr	r1, [pc, #520]	; (800a00c <HAL_I2C_Mem_Read+0x244>)
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fdad 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009e10:	2302      	movs	r3, #2
 8009e12:	e237      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_I2C_Mem_Read+0x5a>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e230      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d007      	beq.n	8009e48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0201 	orr.w	r2, r2, #1
 8009e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2222      	movs	r2, #34	; 0x22
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2240      	movs	r2, #64	; 0x40
 8009e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4a62      	ldr	r2, [pc, #392]	; (800a010 <HAL_I2C_Mem_Read+0x248>)
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e8a:	88f8      	ldrh	r0, [r7, #6]
 8009e8c:	893a      	ldrh	r2, [r7, #8]
 8009e8e:	8979      	ldrh	r1, [r7, #10]
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	4603      	mov	r3, r0
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 fc7a 	bl	800a794 <I2C_RequestMemoryRead>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e1ec      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d113      	bne.n	8009eda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	61fb      	str	r3, [r7, #28]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	e1c0      	b.n	800a25c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d11e      	bne.n	8009f20 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ef0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ef2:	b672      	cpsid	i
}
 8009ef4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	61bb      	str	r3, [r7, #24]
 8009f0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f1c:	b662      	cpsie	i
}
 8009f1e:	e035      	b.n	8009f8c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d11e      	bne.n	8009f66 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f38:	b672      	cpsid	i
}
 8009f3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f62:	b662      	cpsie	i
}
 8009f64:	e012      	b.n	8009f8c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f76:	2300      	movs	r3, #0
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	613b      	str	r3, [r7, #16]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009f8c:	e166      	b.n	800a25c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	f200 811f 	bhi.w	800a1d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d123      	bne.n	8009fe8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fe87 	bl	800acb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e167      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691a      	ldr	r2, [r3, #16]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fe6:	e139      	b.n	800a25c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d152      	bne.n	800a096 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4906      	ldr	r1, [pc, #24]	; (800a014 <HAL_I2C_Mem_Read+0x24c>)
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fcb2 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e13c      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
 800a00a:	bf00      	nop
 800a00c:	00100002 	.word	0x00100002
 800a010:	ffff0000 	.word	0xffff0000
 800a014:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a018:	b672      	cpsid	i
}
 800a01a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a02a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a048:	3b01      	subs	r3, #1
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a05e:	b662      	cpsie	i
}
 800a060:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691a      	ldr	r2, [r3, #16]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	3b01      	subs	r3, #1
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a094:	e0e2      	b.n	800a25c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	2200      	movs	r2, #0
 800a09e:	497b      	ldr	r1, [pc, #492]	; (800a28c <HAL_I2C_Mem_Read+0x4c4>)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fc5f 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0e9      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0c0:	b672      	cpsid	i
}
 800a0c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a0f6:	4b66      	ldr	r3, [pc, #408]	; (800a290 <HAL_I2C_Mem_Read+0x4c8>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	08db      	lsrs	r3, r3, #3
 800a0fc:	4a65      	ldr	r2, [pc, #404]	; (800a294 <HAL_I2C_Mem_Read+0x4cc>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0a1a      	lsrs	r2, r3, #8
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	00da      	lsls	r2, r3, #3
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	3b01      	subs	r3, #1
 800a114:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d118      	bne.n	800a14e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	f043 0220 	orr.w	r2, r3, #32
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a13e:	b662      	cpsie	i
}
 800a140:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e09a      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	f003 0304 	and.w	r3, r3, #4
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d1d9      	bne.n	800a110 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a16a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a194:	b29b      	uxth	r3, r3
 800a196:	3b01      	subs	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a19e:	b662      	cpsie	i
}
 800a1a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1d4:	e042      	b.n	800a25c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 fd6c 	bl	800acb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e04c      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	b2d2      	uxtb	r2, r2
 800a1f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a206:	3b01      	subs	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	2b04      	cmp	r3, #4
 800a228:	d118      	bne.n	800a25c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a246:	3b01      	subs	r3, #1
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a252:	b29b      	uxth	r3, r3
 800a254:	3b01      	subs	r3, #1
 800a256:	b29a      	uxth	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f ae94 	bne.w	8009f8e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e000      	b.n	800a284 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a282:	2302      	movs	r3, #2
  }
}
 800a284:	4618      	mov	r0, r3
 800a286:	3728      	adds	r7, #40	; 0x28
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	00010004 	.word	0x00010004
 800a290:	20000038 	.word	0x20000038
 800a294:	14f8b589 	.word	0x14f8b589

0800a298 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a2a8:	f7fe f81c 	bl	80082e4 <HAL_GetTick>
 800a2ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	f040 8111 	bne.w	800a4e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	2319      	movs	r3, #25
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	4988      	ldr	r1, [pc, #544]	; (800a4ec <HAL_I2C_IsDeviceReady+0x254>)
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fb4a 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e104      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_I2C_IsDeviceReady+0x50>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e0fd      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d007      	beq.n	800a30e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0201 	orr.w	r2, r2, #1
 800a30c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a31c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2224      	movs	r2, #36	; 0x24
 800a322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4a70      	ldr	r2, [pc, #448]	; (800a4f0 <HAL_I2C_IsDeviceReady+0x258>)
 800a330:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a340:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fb08 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a368:	d103      	bne.n	800a372 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a370:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e0b6      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a376:	897b      	ldrh	r3, [r7, #10]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a384:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a386:	f7fd ffad 	bl	80082e4 <HAL_GetTick>
 800a38a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	bf0c      	ite	eq
 800a39a:	2301      	moveq	r3, #1
 800a39c:	2300      	movne	r3, #0
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b0:	bf0c      	ite	eq
 800a3b2:	2301      	moveq	r3, #1
 800a3b4:	2300      	movne	r3, #0
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a3ba:	e025      	b.n	800a408 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3bc:	f7fd ff92 	bl	80082e4 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d302      	bcc.n	800a3d2 <HAL_I2C_IsDeviceReady+0x13a>
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22a0      	movs	r2, #160	; 0xa0
 800a3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2301      	moveq	r3, #1
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fe:	bf0c      	ite	eq
 800a400:	2301      	moveq	r3, #1
 800a402:	2300      	movne	r3, #0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2ba0      	cmp	r3, #160	; 0xa0
 800a412:	d005      	beq.n	800a420 <HAL_I2C_IsDeviceReady+0x188>
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <HAL_I2C_IsDeviceReady+0x188>
 800a41a:	7dbb      	ldrb	r3, [r7, #22]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0cd      	beq.n	800a3bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b02      	cmp	r3, #2
 800a434:	d129      	bne.n	800a48a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a444:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a446:	2300      	movs	r3, #0
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2319      	movs	r3, #25
 800a462:	2201      	movs	r2, #1
 800a464:	4921      	ldr	r1, [pc, #132]	; (800a4ec <HAL_I2C_IsDeviceReady+0x254>)
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fa7c 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e036      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2220      	movs	r2, #32
 800a47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	e02c      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a498:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	2319      	movs	r3, #25
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	490f      	ldr	r1, [pc, #60]	; (800a4ec <HAL_I2C_IsDeviceReady+0x254>)
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 fa58 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e012      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	f4ff af32 	bcc.w	800a332 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a4e2:	2302      	movs	r3, #2
  }
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	00100002 	.word	0x00100002
 800a4f0:	ffff0000 	.word	0xffff0000

0800a4f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	460b      	mov	r3, r1
 800a502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d006      	beq.n	800a51e <I2C_MasterRequestWrite+0x2a>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d003      	beq.n	800a51e <I2C_MasterRequestWrite+0x2a>
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a51c:	d108      	bne.n	800a530 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e00b      	b.n	800a548 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a534:	2b12      	cmp	r3, #18
 800a536:	d107      	bne.n	800a548 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a546:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fa05 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00d      	beq.n	800a57c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56e:	d103      	bne.n	800a578 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e035      	b.n	800a5e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a584:	d108      	bne.n	800a598 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a586:	897b      	ldrh	r3, [r7, #10]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	461a      	mov	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a594:	611a      	str	r2, [r3, #16]
 800a596:	e01b      	b.n	800a5d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a598:	897b      	ldrh	r3, [r7, #10]
 800a59a:	11db      	asrs	r3, r3, #7
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0306 	and.w	r3, r3, #6
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f063 030f 	orn	r3, r3, #15
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	490e      	ldr	r1, [pc, #56]	; (800a5f0 <I2C_MasterRequestWrite+0xfc>)
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fa4e 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e010      	b.n	800a5e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4907      	ldr	r1, [pc, #28]	; (800a5f4 <I2C_MasterRequestWrite+0x100>)
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fa3e 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	00010008 	.word	0x00010008
 800a5f4:	00010002 	.word	0x00010002

0800a5f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	460b      	mov	r3, r1
 800a606:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a61c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b08      	cmp	r3, #8
 800a622:	d006      	beq.n	800a632 <I2C_MasterRequestRead+0x3a>
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d003      	beq.n	800a632 <I2C_MasterRequestRead+0x3a>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a630:	d108      	bne.n	800a644 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	e00b      	b.n	800a65c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a648:	2b11      	cmp	r3, #17
 800a64a:	d107      	bne.n	800a65c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a65a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 f97b 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00d      	beq.n	800a690 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d103      	bne.n	800a68c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a68a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e079      	b.n	800a784 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a698:	d108      	bne.n	800a6ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a69a:	897b      	ldrh	r3, [r7, #10]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	611a      	str	r2, [r3, #16]
 800a6aa:	e05f      	b.n	800a76c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6ac:	897b      	ldrh	r3, [r7, #10]
 800a6ae:	11db      	asrs	r3, r3, #7
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 0306 	and.w	r3, r3, #6
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f063 030f 	orn	r3, r3, #15
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	4930      	ldr	r1, [pc, #192]	; (800a78c <I2C_MasterRequestRead+0x194>)
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f9c4 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e054      	b.n	800a784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	4929      	ldr	r1, [pc, #164]	; (800a790 <I2C_MasterRequestRead+0x198>)
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f9b4 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e044      	b.n	800a784 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	613b      	str	r3, [r7, #16]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	613b      	str	r3, [r7, #16]
 800a70e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a71e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 f919 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00d      	beq.n	800a754 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a746:	d103      	bne.n	800a750 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e017      	b.n	800a784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a754:	897b      	ldrh	r3, [r7, #10]
 800a756:	11db      	asrs	r3, r3, #7
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 0306 	and.w	r3, r3, #6
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f063 030e 	orn	r3, r3, #14
 800a764:	b2da      	uxtb	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	4907      	ldr	r1, [pc, #28]	; (800a790 <I2C_MasterRequestRead+0x198>)
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f970 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	00010008 	.word	0x00010008
 800a790:	00010002 	.word	0x00010002

0800a794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af02      	add	r7, sp, #8
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	817b      	strh	r3, [r7, #10]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	813b      	strh	r3, [r7, #8]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 f8c2 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f4:	d103      	bne.n	800a7fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e0aa      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a802:	897b      	ldrh	r3, [r7, #10]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	6a3a      	ldr	r2, [r7, #32]
 800a816:	4952      	ldr	r1, [pc, #328]	; (800a960 <I2C_RequestMemoryRead+0x1cc>)
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f91d 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e097      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a828:	2300      	movs	r3, #0
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a840:	6a39      	ldr	r1, [r7, #32]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f9a8 	bl	800ab98 <I2C_WaitOnTXEFlagUntilTimeout>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00d      	beq.n	800a86a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	2b04      	cmp	r3, #4
 800a854:	d107      	bne.n	800a866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e076      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d105      	bne.n	800a87c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a870:	893b      	ldrh	r3, [r7, #8]
 800a872:	b2da      	uxtb	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	611a      	str	r2, [r3, #16]
 800a87a:	e021      	b.n	800a8c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a87c:	893b      	ldrh	r3, [r7, #8]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b29b      	uxth	r3, r3
 800a882:	b2da      	uxtb	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88c:	6a39      	ldr	r1, [r7, #32]
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 f982 	bl	800ab98 <I2C_WaitOnTXEFlagUntilTimeout>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00d      	beq.n	800a8b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d107      	bne.n	800a8b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e050      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8b6:	893b      	ldrh	r3, [r7, #8]
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c2:	6a39      	ldr	r1, [r7, #32]
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 f967 	bl	800ab98 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00d      	beq.n	800a8ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d107      	bne.n	800a8e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e035      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	2200      	movs	r2, #0
 800a904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f82b 	bl	800a964 <I2C_WaitOnFlagUntilTimeout>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00d      	beq.n	800a930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a922:	d103      	bne.n	800a92c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a92a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e013      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a930:	897b      	ldrh	r3, [r7, #10]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f043 0301 	orr.w	r3, r3, #1
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	6a3a      	ldr	r2, [r7, #32]
 800a944:	4906      	ldr	r1, [pc, #24]	; (800a960 <I2C_RequestMemoryRead+0x1cc>)
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f886 	bl	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	00010002 	.word	0x00010002

0800a964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	4613      	mov	r3, r2
 800a972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a974:	e048      	b.n	800aa08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97c:	d044      	beq.n	800aa08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a97e:	f7fd fcb1 	bl	80082e4 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d302      	bcc.n	800a994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d139      	bne.n	800aa08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	0c1b      	lsrs	r3, r3, #16
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10d      	bne.n	800a9ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	43da      	mvns	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2301      	moveq	r3, #1
 800a9b2:	2300      	movne	r3, #0
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	e00c      	b.n	800a9d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	43da      	mvns	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	bf0c      	ite	eq
 800a9cc:	2301      	moveq	r3, #1
 800a9ce:	2300      	movne	r3, #0
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d116      	bne.n	800aa08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	f043 0220 	orr.w	r2, r3, #32
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e023      	b.n	800aa50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	0c1b      	lsrs	r3, r3, #16
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d10d      	bne.n	800aa2e <I2C_WaitOnFlagUntilTimeout+0xca>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	43da      	mvns	r2, r3
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	e00c      	b.n	800aa48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	43da      	mvns	r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bf0c      	ite	eq
 800aa40:	2301      	moveq	r3, #1
 800aa42:	2300      	movne	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d093      	beq.n	800a976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa66:	e071      	b.n	800ab4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa76:	d123      	bne.n	800aac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	f043 0204 	orr.w	r2, r3, #4
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e067      	b.n	800ab90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d041      	beq.n	800ab4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aac8:	f7fd fc0c 	bl	80082e4 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d302      	bcc.n	800aade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d136      	bne.n	800ab4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	0c1b      	lsrs	r3, r3, #16
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d10c      	bne.n	800ab02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bf14      	ite	ne
 800aafa:	2301      	movne	r3, #1
 800aafc:	2300      	moveq	r3, #0
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	e00b      	b.n	800ab1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	43da      	mvns	r2, r3
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d016      	beq.n	800ab4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	f043 0220 	orr.w	r2, r3, #32
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e021      	b.n	800ab90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	0c1b      	lsrs	r3, r3, #16
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d10c      	bne.n	800ab70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	43da      	mvns	r2, r3
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	4013      	ands	r3, r2
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bf14      	ite	ne
 800ab68:	2301      	movne	r3, #1
 800ab6a:	2300      	moveq	r3, #0
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	e00b      	b.n	800ab88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	43da      	mvns	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bf14      	ite	ne
 800ab82:	2301      	movne	r3, #1
 800ab84:	2300      	moveq	r3, #0
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f47f af6d 	bne.w	800aa68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aba4:	e034      	b.n	800ac10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f000 f8e3 	bl	800ad72 <I2C_IsAcknowledgeFailed>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e034      	b.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbc:	d028      	beq.n	800ac10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abbe:	f7fd fb91 	bl	80082e4 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d302      	bcc.n	800abd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11d      	bne.n	800ac10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abde:	2b80      	cmp	r3, #128	; 0x80
 800abe0:	d016      	beq.n	800ac10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	f043 0220 	orr.w	r2, r3, #32
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e007      	b.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1a:	2b80      	cmp	r3, #128	; 0x80
 800ac1c:	d1c3      	bne.n	800aba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac34:	e034      	b.n	800aca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f89b 	bl	800ad72 <I2C_IsAcknowledgeFailed>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e034      	b.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d028      	beq.n	800aca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac4e:	f7fd fb49 	bl	80082e4 <HAL_GetTick>
 800ac52:	4602      	mov	r2, r0
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d302      	bcc.n	800ac64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d11d      	bne.n	800aca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d016      	beq.n	800aca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	f043 0220 	orr.w	r2, r3, #32
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e007      	b.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d1c3      	bne.n	800ac36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acc4:	e049      	b.n	800ad5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	f003 0310 	and.w	r3, r3, #16
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d119      	bne.n	800ad08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0210 	mvn.w	r2, #16
 800acdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e030      	b.n	800ad6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad08:	f7fd faec 	bl	80082e4 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d302      	bcc.n	800ad1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d11d      	bne.n	800ad5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad28:	2b40      	cmp	r3, #64	; 0x40
 800ad2a:	d016      	beq.n	800ad5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	f043 0220 	orr.w	r2, r3, #32
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e007      	b.n	800ad6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d1ae      	bne.n	800acc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b083      	sub	sp, #12
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad88:	d11b      	bne.n	800adc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	f043 0204 	orr.w	r2, r3, #4
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr
	...

0800add0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e272      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 8087 	beq.w	800aefe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800adf0:	4b92      	ldr	r3, [pc, #584]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f003 030c 	and.w	r3, r3, #12
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	d00c      	beq.n	800ae16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800adfc:	4b8f      	ldr	r3, [pc, #572]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f003 030c 	and.w	r3, r3, #12
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d112      	bne.n	800ae2e <HAL_RCC_OscConfig+0x5e>
 800ae08:	4b8c      	ldr	r3, [pc, #560]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae14:	d10b      	bne.n	800ae2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae16:	4b89      	ldr	r3, [pc, #548]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d06c      	beq.n	800aefc <HAL_RCC_OscConfig+0x12c>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d168      	bne.n	800aefc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e24c      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae36:	d106      	bne.n	800ae46 <HAL_RCC_OscConfig+0x76>
 800ae38:	4b80      	ldr	r3, [pc, #512]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a7f      	ldr	r2, [pc, #508]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	e02e      	b.n	800aea4 <HAL_RCC_OscConfig+0xd4>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10c      	bne.n	800ae68 <HAL_RCC_OscConfig+0x98>
 800ae4e:	4b7b      	ldr	r3, [pc, #492]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a7a      	ldr	r2, [pc, #488]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	4b78      	ldr	r3, [pc, #480]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a77      	ldr	r2, [pc, #476]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	e01d      	b.n	800aea4 <HAL_RCC_OscConfig+0xd4>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae70:	d10c      	bne.n	800ae8c <HAL_RCC_OscConfig+0xbc>
 800ae72:	4b72      	ldr	r3, [pc, #456]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a71      	ldr	r2, [pc, #452]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	4b6f      	ldr	r3, [pc, #444]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a6e      	ldr	r2, [pc, #440]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e00b      	b.n	800aea4 <HAL_RCC_OscConfig+0xd4>
 800ae8c:	4b6b      	ldr	r3, [pc, #428]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a6a      	ldr	r2, [pc, #424]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	4b68      	ldr	r3, [pc, #416]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a67      	ldr	r2, [pc, #412]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800ae9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d013      	beq.n	800aed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeac:	f7fd fa1a 	bl	80082e4 <HAL_GetTick>
 800aeb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aeb2:	e008      	b.n	800aec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aeb4:	f7fd fa16 	bl	80082e4 <HAL_GetTick>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	2b64      	cmp	r3, #100	; 0x64
 800aec0:	d901      	bls.n	800aec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e200      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aec6:	4b5d      	ldr	r3, [pc, #372]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0f0      	beq.n	800aeb4 <HAL_RCC_OscConfig+0xe4>
 800aed2:	e014      	b.n	800aefe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aed4:	f7fd fa06 	bl	80082e4 <HAL_GetTick>
 800aed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aedc:	f7fd fa02 	bl	80082e4 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b64      	cmp	r3, #100	; 0x64
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e1ec      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aeee:	4b53      	ldr	r3, [pc, #332]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f0      	bne.n	800aedc <HAL_RCC_OscConfig+0x10c>
 800aefa:	e000      	b.n	800aefe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aefc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d063      	beq.n	800afd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800af0a:	4b4c      	ldr	r3, [pc, #304]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f003 030c 	and.w	r3, r3, #12
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00b      	beq.n	800af2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800af16:	4b49      	ldr	r3, [pc, #292]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f003 030c 	and.w	r3, r3, #12
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d11c      	bne.n	800af5c <HAL_RCC_OscConfig+0x18c>
 800af22:	4b46      	ldr	r3, [pc, #280]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d116      	bne.n	800af5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af2e:	4b43      	ldr	r3, [pc, #268]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d005      	beq.n	800af46 <HAL_RCC_OscConfig+0x176>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d001      	beq.n	800af46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e1c0      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af46:	4b3d      	ldr	r3, [pc, #244]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4939      	ldr	r1, [pc, #228]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af56:	4313      	orrs	r3, r2
 800af58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af5a:	e03a      	b.n	800afd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d020      	beq.n	800afa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af64:	4b36      	ldr	r3, [pc, #216]	; (800b040 <HAL_RCC_OscConfig+0x270>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af6a:	f7fd f9bb 	bl	80082e4 <HAL_GetTick>
 800af6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af70:	e008      	b.n	800af84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af72:	f7fd f9b7 	bl	80082e4 <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d901      	bls.n	800af84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e1a1      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af84:	4b2d      	ldr	r3, [pc, #180]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0f0      	beq.n	800af72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af90:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	00db      	lsls	r3, r3, #3
 800af9e:	4927      	ldr	r1, [pc, #156]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	600b      	str	r3, [r1, #0]
 800afa4:	e015      	b.n	800afd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afa6:	4b26      	ldr	r3, [pc, #152]	; (800b040 <HAL_RCC_OscConfig+0x270>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afac:	f7fd f99a 	bl	80082e4 <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afb4:	f7fd f996 	bl	80082e4 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e180      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0302 	and.w	r3, r3, #2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f0      	bne.n	800afb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d03a      	beq.n	800b054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d019      	beq.n	800b01a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800afe6:	4b17      	ldr	r3, [pc, #92]	; (800b044 <HAL_RCC_OscConfig+0x274>)
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afec:	f7fd f97a 	bl	80082e4 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aff2:	e008      	b.n	800b006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aff4:	f7fd f976 	bl	80082e4 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b02      	cmp	r3, #2
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e160      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <HAL_RCC_OscConfig+0x26c>)
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0f0      	beq.n	800aff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b012:	2001      	movs	r0, #1
 800b014:	f000 faba 	bl	800b58c <RCC_Delay>
 800b018:	e01c      	b.n	800b054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <HAL_RCC_OscConfig+0x274>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b020:	f7fd f960 	bl	80082e4 <HAL_GetTick>
 800b024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b026:	e00f      	b.n	800b048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b028:	f7fd f95c 	bl	80082e4 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b02      	cmp	r3, #2
 800b034:	d908      	bls.n	800b048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e146      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
 800b03a:	bf00      	nop
 800b03c:	40021000 	.word	0x40021000
 800b040:	42420000 	.word	0x42420000
 800b044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b048:	4b92      	ldr	r3, [pc, #584]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e9      	bne.n	800b028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 80a6 	beq.w	800b1ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b062:	2300      	movs	r3, #0
 800b064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b066:	4b8b      	ldr	r3, [pc, #556]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10d      	bne.n	800b08e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b072:	4b88      	ldr	r3, [pc, #544]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	4a87      	ldr	r2, [pc, #540]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b07c:	61d3      	str	r3, [r2, #28]
 800b07e:	4b85      	ldr	r3, [pc, #532]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b086:	60bb      	str	r3, [r7, #8]
 800b088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b08a:	2301      	movs	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b08e:	4b82      	ldr	r3, [pc, #520]	; (800b298 <HAL_RCC_OscConfig+0x4c8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b096:	2b00      	cmp	r3, #0
 800b098:	d118      	bne.n	800b0cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b09a:	4b7f      	ldr	r3, [pc, #508]	; (800b298 <HAL_RCC_OscConfig+0x4c8>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a7e      	ldr	r2, [pc, #504]	; (800b298 <HAL_RCC_OscConfig+0x4c8>)
 800b0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0a6:	f7fd f91d 	bl	80082e4 <HAL_GetTick>
 800b0aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ac:	e008      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ae:	f7fd f919 	bl	80082e4 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b64      	cmp	r3, #100	; 0x64
 800b0ba:	d901      	bls.n	800b0c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e103      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0c0:	4b75      	ldr	r3, [pc, #468]	; (800b298 <HAL_RCC_OscConfig+0x4c8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0f0      	beq.n	800b0ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d106      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x312>
 800b0d4:	4b6f      	ldr	r3, [pc, #444]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	4a6e      	ldr	r2, [pc, #440]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	6213      	str	r3, [r2, #32]
 800b0e0:	e02d      	b.n	800b13e <HAL_RCC_OscConfig+0x36e>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10c      	bne.n	800b104 <HAL_RCC_OscConfig+0x334>
 800b0ea:	4b6a      	ldr	r3, [pc, #424]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	4a69      	ldr	r2, [pc, #420]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	6213      	str	r3, [r2, #32]
 800b0f6:	4b67      	ldr	r3, [pc, #412]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	4a66      	ldr	r2, [pc, #408]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b0fc:	f023 0304 	bic.w	r3, r3, #4
 800b100:	6213      	str	r3, [r2, #32]
 800b102:	e01c      	b.n	800b13e <HAL_RCC_OscConfig+0x36e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	2b05      	cmp	r3, #5
 800b10a:	d10c      	bne.n	800b126 <HAL_RCC_OscConfig+0x356>
 800b10c:	4b61      	ldr	r3, [pc, #388]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	4a60      	ldr	r2, [pc, #384]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b112:	f043 0304 	orr.w	r3, r3, #4
 800b116:	6213      	str	r3, [r2, #32]
 800b118:	4b5e      	ldr	r3, [pc, #376]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	4a5d      	ldr	r2, [pc, #372]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b11e:	f043 0301 	orr.w	r3, r3, #1
 800b122:	6213      	str	r3, [r2, #32]
 800b124:	e00b      	b.n	800b13e <HAL_RCC_OscConfig+0x36e>
 800b126:	4b5b      	ldr	r3, [pc, #364]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	4a5a      	ldr	r2, [pc, #360]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b12c:	f023 0301 	bic.w	r3, r3, #1
 800b130:	6213      	str	r3, [r2, #32]
 800b132:	4b58      	ldr	r3, [pc, #352]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	4a57      	ldr	r2, [pc, #348]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b138:	f023 0304 	bic.w	r3, r3, #4
 800b13c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d015      	beq.n	800b172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b146:	f7fd f8cd 	bl	80082e4 <HAL_GetTick>
 800b14a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b14c:	e00a      	b.n	800b164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b14e:	f7fd f8c9 	bl	80082e4 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d901      	bls.n	800b164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e0b1      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b164:	4b4b      	ldr	r3, [pc, #300]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0ee      	beq.n	800b14e <HAL_RCC_OscConfig+0x37e>
 800b170:	e014      	b.n	800b19c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b172:	f7fd f8b7 	bl	80082e4 <HAL_GetTick>
 800b176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b178:	e00a      	b.n	800b190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b17a:	f7fd f8b3 	bl	80082e4 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	f241 3288 	movw	r2, #5000	; 0x1388
 800b188:	4293      	cmp	r3, r2
 800b18a:	d901      	bls.n	800b190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e09b      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b190:	4b40      	ldr	r3, [pc, #256]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1ee      	bne.n	800b17a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d105      	bne.n	800b1ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1a2:	4b3c      	ldr	r3, [pc, #240]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	4a3b      	ldr	r2, [pc, #236]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b1a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 8087 	beq.w	800b2c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b1b8:	4b36      	ldr	r3, [pc, #216]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f003 030c 	and.w	r3, r3, #12
 800b1c0:	2b08      	cmp	r3, #8
 800b1c2:	d061      	beq.n	800b288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d146      	bne.n	800b25a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1cc:	4b33      	ldr	r3, [pc, #204]	; (800b29c <HAL_RCC_OscConfig+0x4cc>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1d2:	f7fd f887 	bl	80082e4 <HAL_GetTick>
 800b1d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1d8:	e008      	b.n	800b1ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1da:	f7fd f883 	bl	80082e4 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d901      	bls.n	800b1ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e06d      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1f0      	bne.n	800b1da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b200:	d108      	bne.n	800b214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b202:	4b24      	ldr	r3, [pc, #144]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	4921      	ldr	r1, [pc, #132]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b210:	4313      	orrs	r3, r2
 800b212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b214:	4b1f      	ldr	r3, [pc, #124]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a19      	ldr	r1, [r3, #32]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b224:	430b      	orrs	r3, r1
 800b226:	491b      	ldr	r1, [pc, #108]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b228:	4313      	orrs	r3, r2
 800b22a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b22c:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <HAL_RCC_OscConfig+0x4cc>)
 800b22e:	2201      	movs	r2, #1
 800b230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b232:	f7fd f857 	bl	80082e4 <HAL_GetTick>
 800b236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b238:	e008      	b.n	800b24c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b23a:	f7fd f853 	bl	80082e4 <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	d901      	bls.n	800b24c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e03d      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b24c:	4b11      	ldr	r3, [pc, #68]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d0f0      	beq.n	800b23a <HAL_RCC_OscConfig+0x46a>
 800b258:	e035      	b.n	800b2c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b25a:	4b10      	ldr	r3, [pc, #64]	; (800b29c <HAL_RCC_OscConfig+0x4cc>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b260:	f7fd f840 	bl	80082e4 <HAL_GetTick>
 800b264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b266:	e008      	b.n	800b27a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b268:	f7fd f83c 	bl	80082e4 <HAL_GetTick>
 800b26c:	4602      	mov	r2, r0
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b02      	cmp	r3, #2
 800b274:	d901      	bls.n	800b27a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e026      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b27a:	4b06      	ldr	r3, [pc, #24]	; (800b294 <HAL_RCC_OscConfig+0x4c4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1f0      	bne.n	800b268 <HAL_RCC_OscConfig+0x498>
 800b286:	e01e      	b.n	800b2c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d107      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e019      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
 800b294:	40021000 	.word	0x40021000
 800b298:	40007000 	.word	0x40007000
 800b29c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <HAL_RCC_OscConfig+0x500>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d106      	bne.n	800b2c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d001      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	40021000 	.word	0x40021000

0800b2d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e0d0      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b2e8:	4b6a      	ldr	r3, [pc, #424]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d910      	bls.n	800b318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2f6:	4b67      	ldr	r3, [pc, #412]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f023 0207 	bic.w	r2, r3, #7
 800b2fe:	4965      	ldr	r1, [pc, #404]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	4313      	orrs	r3, r2
 800b304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b306:	4b63      	ldr	r3, [pc, #396]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d001      	beq.n	800b318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e0b8      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d020      	beq.n	800b366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b330:	4b59      	ldr	r3, [pc, #356]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	4a58      	ldr	r2, [pc, #352]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b33a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0308 	and.w	r3, r3, #8
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b348:	4b53      	ldr	r3, [pc, #332]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4a52      	ldr	r2, [pc, #328]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b34e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b354:	4b50      	ldr	r3, [pc, #320]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	494d      	ldr	r1, [pc, #308]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b362:	4313      	orrs	r3, r2
 800b364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d040      	beq.n	800b3f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d107      	bne.n	800b38a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b37a:	4b47      	ldr	r3, [pc, #284]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d115      	bne.n	800b3b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e07f      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d107      	bne.n	800b3a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b392:	4b41      	ldr	r3, [pc, #260]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e073      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3a2:	4b3d      	ldr	r3, [pc, #244]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e06b      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3b2:	4b39      	ldr	r3, [pc, #228]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f023 0203 	bic.w	r2, r3, #3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4936      	ldr	r1, [pc, #216]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b3c4:	f7fc ff8e 	bl	80082e4 <HAL_GetTick>
 800b3c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3ca:	e00a      	b.n	800b3e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3cc:	f7fc ff8a 	bl	80082e4 <HAL_GetTick>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d901      	bls.n	800b3e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e053      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e2:	4b2d      	ldr	r3, [pc, #180]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f003 020c 	and.w	r2, r3, #12
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d1eb      	bne.n	800b3cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3f4:	4b27      	ldr	r3, [pc, #156]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d210      	bcs.n	800b424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b402:	4b24      	ldr	r3, [pc, #144]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f023 0207 	bic.w	r2, r3, #7
 800b40a:	4922      	ldr	r1, [pc, #136]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	4313      	orrs	r3, r2
 800b410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b412:	4b20      	ldr	r3, [pc, #128]	; (800b494 <HAL_RCC_ClockConfig+0x1c0>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d001      	beq.n	800b424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	e032      	b.n	800b48a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	4916      	ldr	r1, [pc, #88]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0308 	and.w	r3, r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d009      	beq.n	800b462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	490e      	ldr	r1, [pc, #56]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b462:	f000 f821 	bl	800b4a8 <HAL_RCC_GetSysClockFreq>
 800b466:	4602      	mov	r2, r0
 800b468:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <HAL_RCC_ClockConfig+0x1c4>)
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	091b      	lsrs	r3, r3, #4
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	490a      	ldr	r1, [pc, #40]	; (800b49c <HAL_RCC_ClockConfig+0x1c8>)
 800b474:	5ccb      	ldrb	r3, [r1, r3]
 800b476:	fa22 f303 	lsr.w	r3, r2, r3
 800b47a:	4a09      	ldr	r2, [pc, #36]	; (800b4a0 <HAL_RCC_ClockConfig+0x1cc>)
 800b47c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b47e:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <HAL_RCC_ClockConfig+0x1d0>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4618      	mov	r0, r3
 800b484:	f7fc feec 	bl	8008260 <HAL_InitTick>

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	40022000 	.word	0x40022000
 800b498:	40021000 	.word	0x40021000
 800b49c:	0800ef34 	.word	0x0800ef34
 800b4a0:	20000038 	.word	0x20000038
 800b4a4:	2000003c 	.word	0x2000003c

0800b4a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60bb      	str	r3, [r7, #8]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b4c2:	4b1e      	ldr	r3, [pc, #120]	; (800b53c <HAL_RCC_GetSysClockFreq+0x94>)
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f003 030c 	and.w	r3, r3, #12
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d002      	beq.n	800b4d8 <HAL_RCC_GetSysClockFreq+0x30>
 800b4d2:	2b08      	cmp	r3, #8
 800b4d4:	d003      	beq.n	800b4de <HAL_RCC_GetSysClockFreq+0x36>
 800b4d6:	e027      	b.n	800b528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b4d8:	4b19      	ldr	r3, [pc, #100]	; (800b540 <HAL_RCC_GetSysClockFreq+0x98>)
 800b4da:	613b      	str	r3, [r7, #16]
      break;
 800b4dc:	e027      	b.n	800b52e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	0c9b      	lsrs	r3, r3, #18
 800b4e2:	f003 030f 	and.w	r3, r3, #15
 800b4e6:	4a17      	ldr	r2, [pc, #92]	; (800b544 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b4e8:	5cd3      	ldrb	r3, [r2, r3]
 800b4ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d010      	beq.n	800b518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b4f6:	4b11      	ldr	r3, [pc, #68]	; (800b53c <HAL_RCC_GetSysClockFreq+0x94>)
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	0c5b      	lsrs	r3, r3, #17
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	4a11      	ldr	r2, [pc, #68]	; (800b548 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b502:	5cd3      	ldrb	r3, [r2, r3]
 800b504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a0d      	ldr	r2, [pc, #52]	; (800b540 <HAL_RCC_GetSysClockFreq+0x98>)
 800b50a:	fb03 f202 	mul.w	r2, r3, r2
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	fbb2 f3f3 	udiv	r3, r2, r3
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e004      	b.n	800b522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a0c      	ldr	r2, [pc, #48]	; (800b54c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b51c:	fb02 f303 	mul.w	r3, r2, r3
 800b520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	613b      	str	r3, [r7, #16]
      break;
 800b526:	e002      	b.n	800b52e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <HAL_RCC_GetSysClockFreq+0x98>)
 800b52a:	613b      	str	r3, [r7, #16]
      break;
 800b52c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b52e:	693b      	ldr	r3, [r7, #16]
}
 800b530:	4618      	mov	r0, r3
 800b532:	371c      	adds	r7, #28
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40021000 	.word	0x40021000
 800b540:	007a1200 	.word	0x007a1200
 800b544:	0800ef4c 	.word	0x0800ef4c
 800b548:	0800ef5c 	.word	0x0800ef5c
 800b54c:	003d0900 	.word	0x003d0900

0800b550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b554:	4b02      	ldr	r3, [pc, #8]	; (800b560 <HAL_RCC_GetHCLKFreq+0x10>)
 800b556:	681b      	ldr	r3, [r3, #0]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bc80      	pop	{r7}
 800b55e:	4770      	bx	lr
 800b560:	20000038 	.word	0x20000038

0800b564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b568:	f7ff fff2 	bl	800b550 <HAL_RCC_GetHCLKFreq>
 800b56c:	4602      	mov	r2, r0
 800b56e:	4b05      	ldr	r3, [pc, #20]	; (800b584 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	f003 0307 	and.w	r3, r3, #7
 800b578:	4903      	ldr	r1, [pc, #12]	; (800b588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b57a:	5ccb      	ldrb	r3, [r1, r3]
 800b57c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b580:	4618      	mov	r0, r3
 800b582:	bd80      	pop	{r7, pc}
 800b584:	40021000 	.word	0x40021000
 800b588:	0800ef44 	.word	0x0800ef44

0800b58c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <RCC_Delay+0x34>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a0a      	ldr	r2, [pc, #40]	; (800b5c4 <RCC_Delay+0x38>)
 800b59a:	fba2 2303 	umull	r2, r3, r2, r3
 800b59e:	0a5b      	lsrs	r3, r3, #9
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	fb02 f303 	mul.w	r3, r2, r3
 800b5a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b5a8:	bf00      	nop
  }
  while (Delay --);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1e5a      	subs	r2, r3, #1
 800b5ae:	60fa      	str	r2, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1f9      	bne.n	800b5a8 <RCC_Delay+0x1c>
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bc80      	pop	{r7}
 800b5be:	4770      	bx	lr
 800b5c0:	20000038 	.word	0x20000038
 800b5c4:	10624dd3 	.word	0x10624dd3

0800b5c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d07d      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5e8:	4b4f      	ldr	r3, [pc, #316]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10d      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5f4:	4b4c      	ldr	r3, [pc, #304]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	4a4b      	ldr	r2, [pc, #300]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5fe:	61d3      	str	r3, [r2, #28]
 800b600:	4b49      	ldr	r3, [pc, #292]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b608:	60bb      	str	r3, [r7, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b60c:	2301      	movs	r3, #1
 800b60e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b610:	4b46      	ldr	r3, [pc, #280]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d118      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b61c:	4b43      	ldr	r3, [pc, #268]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a42      	ldr	r2, [pc, #264]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b628:	f7fc fe5c 	bl	80082e4 <HAL_GetTick>
 800b62c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b62e:	e008      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b630:	f7fc fe58 	bl	80082e4 <HAL_GetTick>
 800b634:	4602      	mov	r2, r0
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b64      	cmp	r3, #100	; 0x64
 800b63c:	d901      	bls.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e06d      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b642:	4b3a      	ldr	r3, [pc, #232]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0f0      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b64e:	4b36      	ldr	r3, [pc, #216]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b656:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d02e      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d027      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b66c:	4b2e      	ldr	r3, [pc, #184]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b674:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b676:	4b2e      	ldr	r3, [pc, #184]	; (800b730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b678:	2201      	movs	r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b67c:	4b2c      	ldr	r3, [pc, #176]	; (800b730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b682:	4a29      	ldr	r2, [pc, #164]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d014      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b692:	f7fc fe27 	bl	80082e4 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b698:	e00a      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b69a:	f7fc fe23 	bl	80082e4 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d901      	bls.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e036      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6b0:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	f003 0302 	and.w	r3, r3, #2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0ee      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6bc:	4b1a      	ldr	r3, [pc, #104]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	4917      	ldr	r1, [pc, #92]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d105      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6d4:	4b14      	ldr	r3, [pc, #80]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	4a13      	ldr	r2, [pc, #76]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d008      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6ec:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	490b      	ldr	r1, [pc, #44]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 0310 	and.w	r3, r3, #16
 800b706:	2b00      	cmp	r3, #0
 800b708:	d008      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	4904      	ldr	r1, [pc, #16]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40021000 	.word	0x40021000
 800b72c:	40007000 	.word	0x40007000
 800b730:	42420440 	.word	0x42420440

0800b734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e076      	b.n	800b834 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d108      	bne.n	800b760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b756:	d009      	beq.n	800b76c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	61da      	str	r2, [r3, #28]
 800b75e:	e005      	b.n	800b76c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fc fbb2 	bl	8007ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	ea42 0103 	orr.w	r1, r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	0c1a      	lsrs	r2, r3, #16
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f002 0204 	and.w	r2, r2, #4
 800b812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69da      	ldr	r2, [r3, #28]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	603b      	str	r3, [r7, #0]
 800b848:	4613      	mov	r3, r2
 800b84a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b856:	2b01      	cmp	r3, #1
 800b858:	d101      	bne.n	800b85e <HAL_SPI_Transmit+0x22>
 800b85a:	2302      	movs	r3, #2
 800b85c:	e12d      	b.n	800baba <HAL_SPI_Transmit+0x27e>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2201      	movs	r2, #1
 800b862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b866:	f7fc fd3d 	bl	80082e4 <HAL_GetTick>
 800b86a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d002      	beq.n	800b882 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b87c:	2302      	movs	r3, #2
 800b87e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b880:	e116      	b.n	800bab0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <HAL_SPI_Transmit+0x52>
 800b888:	88fb      	ldrh	r3, [r7, #6]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b892:	e10d      	b.n	800bab0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2203      	movs	r2, #3
 800b898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	88fa      	ldrh	r2, [r7, #6]
 800b8ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	88fa      	ldrh	r2, [r7, #6]
 800b8b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8da:	d10f      	bne.n	800b8fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b906:	2b40      	cmp	r3, #64	; 0x40
 800b908:	d007      	beq.n	800b91a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b922:	d14f      	bne.n	800b9c4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <HAL_SPI_Transmit+0xf6>
 800b92c:	8afb      	ldrh	r3, [r7, #22]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d142      	bne.n	800b9b8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	881a      	ldrh	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b942:	1c9a      	adds	r2, r3, #2
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b956:	e02f      	b.n	800b9b8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b02      	cmp	r3, #2
 800b964:	d112      	bne.n	800b98c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96a:	881a      	ldrh	r2, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b976:	1c9a      	adds	r2, r3, #2
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b980:	b29b      	uxth	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	86da      	strh	r2, [r3, #54]	; 0x36
 800b98a:	e015      	b.n	800b9b8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b98c:	f7fc fcaa 	bl	80082e4 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d803      	bhi.n	800b9a4 <HAL_SPI_Transmit+0x168>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d102      	bne.n	800b9aa <HAL_SPI_Transmit+0x16e>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b9b6:	e07b      	b.n	800bab0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1ca      	bne.n	800b958 <HAL_SPI_Transmit+0x11c>
 800b9c2:	e050      	b.n	800ba66 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <HAL_SPI_Transmit+0x196>
 800b9cc:	8afb      	ldrh	r3, [r7, #22]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d144      	bne.n	800ba5c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	330c      	adds	r3, #12
 800b9dc:	7812      	ldrb	r2, [r2, #0]
 800b9de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b9f8:	e030      	b.n	800ba5c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d113      	bne.n	800ba30 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	330c      	adds	r3, #12
 800ba12:	7812      	ldrb	r2, [r2, #0]
 800ba14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba2e:	e015      	b.n	800ba5c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba30:	f7fc fc58 	bl	80082e4 <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d803      	bhi.n	800ba48 <HAL_SPI_Transmit+0x20c>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba46:	d102      	bne.n	800ba4e <HAL_SPI_Transmit+0x212>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ba5a:	e029      	b.n	800bab0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1c9      	bne.n	800b9fa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 fa6e 	bl	800bf4c <SPI_EndRxTxTransaction>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2220      	movs	r2, #32
 800ba7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e003      	b.n	800bab0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bab8:	7ffb      	ldrb	r3, [r7, #31]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3720      	adds	r7, #32
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b08c      	sub	sp, #48	; 0x30
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	60f8      	str	r0, [r7, #12]
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
 800bace:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bad0:	2301      	movs	r3, #1
 800bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <HAL_SPI_TransmitReceive+0x26>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e198      	b.n	800be1a <HAL_SPI_TransmitReceive+0x358>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800baf0:	f7fc fbf8 	bl	80082e4 <HAL_GetTick>
 800baf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bafc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bb06:	887b      	ldrh	r3, [r7, #2]
 800bb08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d00f      	beq.n	800bb32 <HAL_SPI_TransmitReceive+0x70>
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb18:	d107      	bne.n	800bb2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <HAL_SPI_TransmitReceive+0x68>
 800bb22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d003      	beq.n	800bb32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bb30:	e16d      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <HAL_SPI_TransmitReceive+0x82>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <HAL_SPI_TransmitReceive+0x82>
 800bb3e:	887b      	ldrh	r3, [r7, #2]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bb4a:	e160      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d003      	beq.n	800bb60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2205      	movs	r2, #5
 800bb5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	887a      	ldrh	r2, [r7, #2]
 800bb70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	887a      	ldrh	r2, [r7, #2]
 800bb76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	887a      	ldrh	r2, [r7, #2]
 800bb82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	887a      	ldrh	r2, [r7, #2]
 800bb88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba0:	2b40      	cmp	r3, #64	; 0x40
 800bba2:	d007      	beq.n	800bbb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbbc:	d17c      	bne.n	800bcb8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_SPI_TransmitReceive+0x10a>
 800bbc6:	8b7b      	ldrh	r3, [r7, #26]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d16a      	bne.n	800bca2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd0:	881a      	ldrh	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbdc:	1c9a      	adds	r2, r3, #2
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbf0:	e057      	b.n	800bca2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d11b      	bne.n	800bc38 <HAL_SPI_TransmitReceive+0x176>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d016      	beq.n	800bc38 <HAL_SPI_TransmitReceive+0x176>
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d113      	bne.n	800bc38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc14:	881a      	ldrh	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	1c9a      	adds	r2, r3, #2
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc34:	2300      	movs	r3, #0
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d119      	bne.n	800bc7a <HAL_SPI_TransmitReceive+0x1b8>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d014      	beq.n	800bc7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68da      	ldr	r2, [r3, #12]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	1c9a      	adds	r2, r3, #2
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc76:	2301      	movs	r3, #1
 800bc78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc7a:	f7fc fb33 	bl	80082e4 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d80b      	bhi.n	800bca2 <HAL_SPI_TransmitReceive+0x1e0>
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d007      	beq.n	800bca2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800bca0:	e0b5      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1a2      	bne.n	800bbf2 <HAL_SPI_TransmitReceive+0x130>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d19d      	bne.n	800bbf2 <HAL_SPI_TransmitReceive+0x130>
 800bcb6:	e080      	b.n	800bdba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HAL_SPI_TransmitReceive+0x204>
 800bcc0:	8b7b      	ldrh	r3, [r7, #26]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d16f      	bne.n	800bda6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	330c      	adds	r3, #12
 800bcd0:	7812      	ldrb	r2, [r2, #0]
 800bcd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcec:	e05b      	b.n	800bda6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d11c      	bne.n	800bd36 <HAL_SPI_TransmitReceive+0x274>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <HAL_SPI_TransmitReceive+0x274>
 800bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d114      	bne.n	800bd36 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	330c      	adds	r3, #12
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d119      	bne.n	800bd78 <HAL_SPI_TransmitReceive+0x2b6>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d014      	beq.n	800bd78 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	b2d2      	uxtb	r2, r2
 800bd5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd74:	2301      	movs	r3, #1
 800bd76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bd78:	f7fc fab4 	bl	80082e4 <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d803      	bhi.n	800bd90 <HAL_SPI_TransmitReceive+0x2ce>
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8e:	d102      	bne.n	800bd96 <HAL_SPI_TransmitReceive+0x2d4>
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d107      	bne.n	800bda6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800bda4:	e033      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d19e      	bne.n	800bcee <HAL_SPI_TransmitReceive+0x22c>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d199      	bne.n	800bcee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 f8c4 	bl	800bf4c <SPI_EndRxTxTransaction>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bdd6:	e01a      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10a      	bne.n	800bdf6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bde0:	2300      	movs	r3, #0
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	617b      	str	r3, [r7, #20]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be04:	e003      	b.n	800be0e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3730      	adds	r7, #48	; 0x30
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be30:	b2db      	uxtb	r3, r3
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	bc80      	pop	{r7}
 800be3a:	4770      	bx	lr

0800be3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	603b      	str	r3, [r7, #0]
 800be48:	4613      	mov	r3, r2
 800be4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be4c:	f7fc fa4a 	bl	80082e4 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	1a9b      	subs	r3, r3, r2
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be5c:	f7fc fa42 	bl	80082e4 <HAL_GetTick>
 800be60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be62:	4b39      	ldr	r3, [pc, #228]	; (800bf48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	015b      	lsls	r3, r3, #5
 800be68:	0d1b      	lsrs	r3, r3, #20
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	fb02 f303 	mul.w	r3, r2, r3
 800be70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be72:	e054      	b.n	800bf1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7a:	d050      	beq.n	800bf1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be7c:	f7fc fa32 	bl	80082e4 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	69fa      	ldr	r2, [r7, #28]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d902      	bls.n	800be92 <SPI_WaitFlagStateUntilTimeout+0x56>
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d13d      	bne.n	800bf0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beaa:	d111      	bne.n	800bed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beb4:	d004      	beq.n	800bec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bebe:	d107      	bne.n	800bed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bed8:	d10f      	bne.n	800befa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e017      	b.n	800bf3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf14:	2300      	movs	r3, #0
 800bf16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	689a      	ldr	r2, [r3, #8]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4013      	ands	r3, r2
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	bf0c      	ite	eq
 800bf2e:	2301      	moveq	r3, #1
 800bf30:	2300      	movne	r3, #0
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	461a      	mov	r2, r3
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d19b      	bne.n	800be74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20000038 	.word	0x20000038

0800bf4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2180      	movs	r1, #128	; 0x80
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff ff6a 	bl	800be3c <SPI_WaitFlagStateUntilTimeout>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d007      	beq.n	800bf7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf72:	f043 0220 	orr.w	r2, r3, #32
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e000      	b.n	800bf80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e041      	b.n	800c01e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7fb ffe8 	bl	8007f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	f000 f940 	bl	800c24c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d001      	beq.n	800c040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e032      	b.n	800c0a6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2202      	movs	r2, #2
 800c044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a18      	ldr	r2, [pc, #96]	; (800c0b0 <HAL_TIM_Base_Start+0x88>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00e      	beq.n	800c070 <HAL_TIM_Base_Start+0x48>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d009      	beq.n	800c070 <HAL_TIM_Base_Start+0x48>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a14      	ldr	r2, [pc, #80]	; (800c0b4 <HAL_TIM_Base_Start+0x8c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d004      	beq.n	800c070 <HAL_TIM_Base_Start+0x48>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <HAL_TIM_Base_Start+0x90>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d111      	bne.n	800c094 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b06      	cmp	r3, #6
 800c080:	d010      	beq.n	800c0a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f042 0201 	orr.w	r2, r2, #1
 800c090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c092:	e007      	b.n	800c0a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3714      	adds	r7, #20
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bc80      	pop	{r7}
 800c0ae:	4770      	bx	lr
 800c0b0:	40012c00 	.word	0x40012c00
 800c0b4:	40000400 	.word	0x40000400
 800c0b8:	40000800 	.word	0x40000800

0800c0bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d101      	bne.n	800c0d8 <HAL_TIM_ConfigClockSource+0x1c>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e0b4      	b.n	800c242 <HAL_TIM_ConfigClockSource+0x186>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c110:	d03e      	beq.n	800c190 <HAL_TIM_ConfigClockSource+0xd4>
 800c112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c116:	f200 8087 	bhi.w	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c11e:	f000 8086 	beq.w	800c22e <HAL_TIM_ConfigClockSource+0x172>
 800c122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c126:	d87f      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c128:	2b70      	cmp	r3, #112	; 0x70
 800c12a:	d01a      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0xa6>
 800c12c:	2b70      	cmp	r3, #112	; 0x70
 800c12e:	d87b      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c130:	2b60      	cmp	r3, #96	; 0x60
 800c132:	d050      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x11a>
 800c134:	2b60      	cmp	r3, #96	; 0x60
 800c136:	d877      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c138:	2b50      	cmp	r3, #80	; 0x50
 800c13a:	d03c      	beq.n	800c1b6 <HAL_TIM_ConfigClockSource+0xfa>
 800c13c:	2b50      	cmp	r3, #80	; 0x50
 800c13e:	d873      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c140:	2b40      	cmp	r3, #64	; 0x40
 800c142:	d058      	beq.n	800c1f6 <HAL_TIM_ConfigClockSource+0x13a>
 800c144:	2b40      	cmp	r3, #64	; 0x40
 800c146:	d86f      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c148:	2b30      	cmp	r3, #48	; 0x30
 800c14a:	d064      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x15a>
 800c14c:	2b30      	cmp	r3, #48	; 0x30
 800c14e:	d86b      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c150:	2b20      	cmp	r3, #32
 800c152:	d060      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x15a>
 800c154:	2b20      	cmp	r3, #32
 800c156:	d867      	bhi.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d05c      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x15a>
 800c15c:	2b10      	cmp	r3, #16
 800c15e:	d05a      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x15a>
 800c160:	e062      	b.n	800c228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c172:	f000 f944 	bl	800c3fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	609a      	str	r2, [r3, #8]
      break;
 800c18e:	e04f      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1a0:	f000 f92d 	bl	800c3fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1b2:	609a      	str	r2, [r3, #8]
      break;
 800c1b4:	e03c      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f000 f8a4 	bl	800c310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2150      	movs	r1, #80	; 0x50
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f8fb 	bl	800c3ca <TIM_ITRx_SetConfig>
      break;
 800c1d4:	e02c      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f000 f8c2 	bl	800c36c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2160      	movs	r1, #96	; 0x60
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f8eb 	bl	800c3ca <TIM_ITRx_SetConfig>
      break;
 800c1f4:	e01c      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c202:	461a      	mov	r2, r3
 800c204:	f000 f884 	bl	800c310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2140      	movs	r1, #64	; 0x40
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 f8db 	bl	800c3ca <TIM_ITRx_SetConfig>
      break;
 800c214:	e00c      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4619      	mov	r1, r3
 800c220:	4610      	mov	r0, r2
 800c222:	f000 f8d2 	bl	800c3ca <TIM_ITRx_SetConfig>
      break;
 800c226:	e003      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	73fb      	strb	r3, [r7, #15]
      break;
 800c22c:	e000      	b.n	800c230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c22e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c240:	7bfb      	ldrb	r3, [r7, #15]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a29      	ldr	r2, [pc, #164]	; (800c304 <TIM_Base_SetConfig+0xb8>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d00b      	beq.n	800c27c <TIM_Base_SetConfig+0x30>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26a:	d007      	beq.n	800c27c <TIM_Base_SetConfig+0x30>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a26      	ldr	r2, [pc, #152]	; (800c308 <TIM_Base_SetConfig+0xbc>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <TIM_Base_SetConfig+0x30>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a25      	ldr	r2, [pc, #148]	; (800c30c <TIM_Base_SetConfig+0xc0>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d108      	bne.n	800c28e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a1c      	ldr	r2, [pc, #112]	; (800c304 <TIM_Base_SetConfig+0xb8>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d00b      	beq.n	800c2ae <TIM_Base_SetConfig+0x62>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c29c:	d007      	beq.n	800c2ae <TIM_Base_SetConfig+0x62>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a19      	ldr	r2, [pc, #100]	; (800c308 <TIM_Base_SetConfig+0xbc>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d003      	beq.n	800c2ae <TIM_Base_SetConfig+0x62>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a18      	ldr	r2, [pc, #96]	; (800c30c <TIM_Base_SetConfig+0xc0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d108      	bne.n	800c2c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a07      	ldr	r2, [pc, #28]	; (800c304 <TIM_Base_SetConfig+0xb8>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d103      	bne.n	800c2f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	691a      	ldr	r2, [r3, #16]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	615a      	str	r2, [r3, #20]
}
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bc80      	pop	{r7}
 800c302:	4770      	bx	lr
 800c304:	40012c00 	.word	0x40012c00
 800c308:	40000400 	.word	0x40000400
 800c30c:	40000800 	.word	0x40000800

0800c310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c310:	b480      	push	{r7}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6a1b      	ldr	r3, [r3, #32]
 800c326:	f023 0201 	bic.w	r2, r3, #1
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c33a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	011b      	lsls	r3, r3, #4
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	4313      	orrs	r3, r2
 800c344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f023 030a 	bic.w	r3, r3, #10
 800c34c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	4313      	orrs	r3, r2
 800c354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	621a      	str	r2, [r3, #32]
}
 800c362:	bf00      	nop
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	bc80      	pop	{r7}
 800c36a:	4770      	bx	lr

0800c36c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	f023 0210 	bic.w	r2, r3, #16
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	031b      	lsls	r3, r3, #12
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	011b      	lsls	r3, r3, #4
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	621a      	str	r2, [r3, #32]
}
 800c3c0:	bf00      	nop
 800c3c2:	371c      	adds	r7, #28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bc80      	pop	{r7}
 800c3c8:	4770      	bx	lr

0800c3ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	f043 0307 	orr.w	r3, r3, #7
 800c3ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	609a      	str	r2, [r3, #8]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bc80      	pop	{r7}
 800c3fc:	4770      	bx	lr

0800c3fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b087      	sub	sp, #28
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
 800c40a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c418:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	021a      	lsls	r2, r3, #8
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	431a      	orrs	r2, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	4313      	orrs	r3, r2
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	4313      	orrs	r3, r2
 800c42a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	697a      	ldr	r2, [r7, #20]
 800c430:	609a      	str	r2, [r3, #8]
}
 800c432:	bf00      	nop
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr

0800c43c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d101      	bne.n	800c454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c450:	2302      	movs	r3, #2
 800c452:	e046      	b.n	800c4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	4313      	orrs	r3, r2
 800c484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a16      	ldr	r2, [pc, #88]	; (800c4ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d00e      	beq.n	800c4b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4a0:	d009      	beq.n	800c4b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a12      	ldr	r2, [pc, #72]	; (800c4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d004      	beq.n	800c4b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a10      	ldr	r2, [pc, #64]	; (800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d10c      	bne.n	800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bc80      	pop	{r7}
 800c4ea:	4770      	bx	lr
 800c4ec:	40012c00 	.word	0x40012c00
 800c4f0:	40000400 	.word	0x40000400
 800c4f4:	40000800 	.word	0x40000800

0800c4f8 <__assert_func>:
 800c4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4fa:	4614      	mov	r4, r2
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	4b09      	ldr	r3, [pc, #36]	; (800c524 <__assert_func+0x2c>)
 800c500:	4605      	mov	r5, r0
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68d8      	ldr	r0, [r3, #12]
 800c506:	b14c      	cbz	r4, 800c51c <__assert_func+0x24>
 800c508:	4b07      	ldr	r3, [pc, #28]	; (800c528 <__assert_func+0x30>)
 800c50a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c50e:	9100      	str	r1, [sp, #0]
 800c510:	462b      	mov	r3, r5
 800c512:	4906      	ldr	r1, [pc, #24]	; (800c52c <__assert_func+0x34>)
 800c514:	f000 f8b2 	bl	800c67c <fiprintf>
 800c518:	f000 fa01 	bl	800c91e <abort>
 800c51c:	4b04      	ldr	r3, [pc, #16]	; (800c530 <__assert_func+0x38>)
 800c51e:	461c      	mov	r4, r3
 800c520:	e7f3      	b.n	800c50a <__assert_func+0x12>
 800c522:	bf00      	nop
 800c524:	2000009c 	.word	0x2000009c
 800c528:	0800ef5e 	.word	0x0800ef5e
 800c52c:	0800ef6b 	.word	0x0800ef6b
 800c530:	0800ef99 	.word	0x0800ef99

0800c534 <std>:
 800c534:	2300      	movs	r3, #0
 800c536:	b510      	push	{r4, lr}
 800c538:	4604      	mov	r4, r0
 800c53a:	e9c0 3300 	strd	r3, r3, [r0]
 800c53e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c542:	6083      	str	r3, [r0, #8]
 800c544:	8181      	strh	r1, [r0, #12]
 800c546:	6643      	str	r3, [r0, #100]	; 0x64
 800c548:	81c2      	strh	r2, [r0, #14]
 800c54a:	6183      	str	r3, [r0, #24]
 800c54c:	4619      	mov	r1, r3
 800c54e:	2208      	movs	r2, #8
 800c550:	305c      	adds	r0, #92	; 0x5c
 800c552:	f000 f95a 	bl	800c80a <memset>
 800c556:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <std+0x58>)
 800c558:	6224      	str	r4, [r4, #32]
 800c55a:	6263      	str	r3, [r4, #36]	; 0x24
 800c55c:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <std+0x5c>)
 800c55e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c560:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <std+0x60>)
 800c562:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c564:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <std+0x64>)
 800c566:	6323      	str	r3, [r4, #48]	; 0x30
 800c568:	4b0c      	ldr	r3, [pc, #48]	; (800c59c <std+0x68>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	d006      	beq.n	800c57c <std+0x48>
 800c56e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c572:	4294      	cmp	r4, r2
 800c574:	d002      	beq.n	800c57c <std+0x48>
 800c576:	33d0      	adds	r3, #208	; 0xd0
 800c578:	429c      	cmp	r4, r3
 800c57a:	d105      	bne.n	800c588 <std+0x54>
 800c57c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c584:	f000 b9ba 	b.w	800c8fc <__retarget_lock_init_recursive>
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	0800c785 	.word	0x0800c785
 800c590:	0800c7a7 	.word	0x0800c7a7
 800c594:	0800c7df 	.word	0x0800c7df
 800c598:	0800c803 	.word	0x0800c803
 800c59c:	20000938 	.word	0x20000938

0800c5a0 <stdio_exit_handler>:
 800c5a0:	4a02      	ldr	r2, [pc, #8]	; (800c5ac <stdio_exit_handler+0xc>)
 800c5a2:	4903      	ldr	r1, [pc, #12]	; (800c5b0 <stdio_exit_handler+0x10>)
 800c5a4:	4803      	ldr	r0, [pc, #12]	; (800c5b4 <stdio_exit_handler+0x14>)
 800c5a6:	f000 b87b 	b.w	800c6a0 <_fwalk_sglue>
 800c5aa:	bf00      	nop
 800c5ac:	20000044 	.word	0x20000044
 800c5b0:	0800d475 	.word	0x0800d475
 800c5b4:	20000050 	.word	0x20000050

0800c5b8 <cleanup_stdio>:
 800c5b8:	6841      	ldr	r1, [r0, #4]
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <cleanup_stdio+0x34>)
 800c5bc:	b510      	push	{r4, lr}
 800c5be:	4299      	cmp	r1, r3
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	d001      	beq.n	800c5c8 <cleanup_stdio+0x10>
 800c5c4:	f000 ff56 	bl	800d474 <_fflush_r>
 800c5c8:	68a1      	ldr	r1, [r4, #8]
 800c5ca:	4b09      	ldr	r3, [pc, #36]	; (800c5f0 <cleanup_stdio+0x38>)
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <cleanup_stdio+0x1e>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 ff4f 	bl	800d474 <_fflush_r>
 800c5d6:	68e1      	ldr	r1, [r4, #12]
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <cleanup_stdio+0x3c>)
 800c5da:	4299      	cmp	r1, r3
 800c5dc:	d004      	beq.n	800c5e8 <cleanup_stdio+0x30>
 800c5de:	4620      	mov	r0, r4
 800c5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e4:	f000 bf46 	b.w	800d474 <_fflush_r>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20000938 	.word	0x20000938
 800c5f0:	200009a0 	.word	0x200009a0
 800c5f4:	20000a08 	.word	0x20000a08

0800c5f8 <global_stdio_init.part.0>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	4b0b      	ldr	r3, [pc, #44]	; (800c628 <global_stdio_init.part.0+0x30>)
 800c5fc:	4c0b      	ldr	r4, [pc, #44]	; (800c62c <global_stdio_init.part.0+0x34>)
 800c5fe:	4a0c      	ldr	r2, [pc, #48]	; (800c630 <global_stdio_init.part.0+0x38>)
 800c600:	4620      	mov	r0, r4
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	2104      	movs	r1, #4
 800c606:	2200      	movs	r2, #0
 800c608:	f7ff ff94 	bl	800c534 <std>
 800c60c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c610:	2201      	movs	r2, #1
 800c612:	2109      	movs	r1, #9
 800c614:	f7ff ff8e 	bl	800c534 <std>
 800c618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c61c:	2202      	movs	r2, #2
 800c61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c622:	2112      	movs	r1, #18
 800c624:	f7ff bf86 	b.w	800c534 <std>
 800c628:	20000a70 	.word	0x20000a70
 800c62c:	20000938 	.word	0x20000938
 800c630:	0800c5a1 	.word	0x0800c5a1

0800c634 <__sfp_lock_acquire>:
 800c634:	4801      	ldr	r0, [pc, #4]	; (800c63c <__sfp_lock_acquire+0x8>)
 800c636:	f000 b962 	b.w	800c8fe <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	20000a79 	.word	0x20000a79

0800c640 <__sfp_lock_release>:
 800c640:	4801      	ldr	r0, [pc, #4]	; (800c648 <__sfp_lock_release+0x8>)
 800c642:	f000 b95d 	b.w	800c900 <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	20000a79 	.word	0x20000a79

0800c64c <__sinit>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4604      	mov	r4, r0
 800c650:	f7ff fff0 	bl	800c634 <__sfp_lock_acquire>
 800c654:	6a23      	ldr	r3, [r4, #32]
 800c656:	b11b      	cbz	r3, 800c660 <__sinit+0x14>
 800c658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c65c:	f7ff bff0 	b.w	800c640 <__sfp_lock_release>
 800c660:	4b04      	ldr	r3, [pc, #16]	; (800c674 <__sinit+0x28>)
 800c662:	6223      	str	r3, [r4, #32]
 800c664:	4b04      	ldr	r3, [pc, #16]	; (800c678 <__sinit+0x2c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1f5      	bne.n	800c658 <__sinit+0xc>
 800c66c:	f7ff ffc4 	bl	800c5f8 <global_stdio_init.part.0>
 800c670:	e7f2      	b.n	800c658 <__sinit+0xc>
 800c672:	bf00      	nop
 800c674:	0800c5b9 	.word	0x0800c5b9
 800c678:	20000a70 	.word	0x20000a70

0800c67c <fiprintf>:
 800c67c:	b40e      	push	{r1, r2, r3}
 800c67e:	b503      	push	{r0, r1, lr}
 800c680:	4601      	mov	r1, r0
 800c682:	ab03      	add	r3, sp, #12
 800c684:	4805      	ldr	r0, [pc, #20]	; (800c69c <fiprintf+0x20>)
 800c686:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68a:	6800      	ldr	r0, [r0, #0]
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	f000 fbc1 	bl	800ce14 <_vfiprintf_r>
 800c692:	b002      	add	sp, #8
 800c694:	f85d eb04 	ldr.w	lr, [sp], #4
 800c698:	b003      	add	sp, #12
 800c69a:	4770      	bx	lr
 800c69c:	2000009c 	.word	0x2000009c

0800c6a0 <_fwalk_sglue>:
 800c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	4607      	mov	r7, r0
 800c6a6:	4688      	mov	r8, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	2600      	movs	r6, #0
 800c6ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6b4:	d505      	bpl.n	800c6c2 <_fwalk_sglue+0x22>
 800c6b6:	6824      	ldr	r4, [r4, #0]
 800c6b8:	2c00      	cmp	r4, #0
 800c6ba:	d1f7      	bne.n	800c6ac <_fwalk_sglue+0xc>
 800c6bc:	4630      	mov	r0, r6
 800c6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c2:	89ab      	ldrh	r3, [r5, #12]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d907      	bls.n	800c6d8 <_fwalk_sglue+0x38>
 800c6c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	d003      	beq.n	800c6d8 <_fwalk_sglue+0x38>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	47c0      	blx	r8
 800c6d6:	4306      	orrs	r6, r0
 800c6d8:	3568      	adds	r5, #104	; 0x68
 800c6da:	e7e9      	b.n	800c6b0 <_fwalk_sglue+0x10>

0800c6dc <sniprintf>:
 800c6dc:	b40c      	push	{r2, r3}
 800c6de:	b530      	push	{r4, r5, lr}
 800c6e0:	4b17      	ldr	r3, [pc, #92]	; (800c740 <sniprintf+0x64>)
 800c6e2:	1e0c      	subs	r4, r1, #0
 800c6e4:	681d      	ldr	r5, [r3, #0]
 800c6e6:	b09d      	sub	sp, #116	; 0x74
 800c6e8:	da08      	bge.n	800c6fc <sniprintf+0x20>
 800c6ea:	238b      	movs	r3, #139	; 0x8b
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	b01d      	add	sp, #116	; 0x74
 800c6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6f8:	b002      	add	sp, #8
 800c6fa:	4770      	bx	lr
 800c6fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c700:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c704:	bf0c      	ite	eq
 800c706:	4623      	moveq	r3, r4
 800c708:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	9307      	str	r3, [sp, #28]
 800c710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	9006      	str	r0, [sp, #24]
 800c718:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c71c:	4628      	mov	r0, r5
 800c71e:	ab21      	add	r3, sp, #132	; 0x84
 800c720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c722:	a902      	add	r1, sp, #8
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	f000 fa4f 	bl	800cbc8 <_svfiprintf_r>
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	bfbc      	itt	lt
 800c72e:	238b      	movlt	r3, #139	; 0x8b
 800c730:	602b      	strlt	r3, [r5, #0]
 800c732:	2c00      	cmp	r4, #0
 800c734:	d0dd      	beq.n	800c6f2 <sniprintf+0x16>
 800c736:	2200      	movs	r2, #0
 800c738:	9b02      	ldr	r3, [sp, #8]
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	e7d9      	b.n	800c6f2 <sniprintf+0x16>
 800c73e:	bf00      	nop
 800c740:	2000009c 	.word	0x2000009c

0800c744 <siprintf>:
 800c744:	b40e      	push	{r1, r2, r3}
 800c746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c74a:	b500      	push	{lr}
 800c74c:	b09c      	sub	sp, #112	; 0x70
 800c74e:	ab1d      	add	r3, sp, #116	; 0x74
 800c750:	9002      	str	r0, [sp, #8]
 800c752:	9006      	str	r0, [sp, #24]
 800c754:	9107      	str	r1, [sp, #28]
 800c756:	9104      	str	r1, [sp, #16]
 800c758:	4808      	ldr	r0, [pc, #32]	; (800c77c <siprintf+0x38>)
 800c75a:	4909      	ldr	r1, [pc, #36]	; (800c780 <siprintf+0x3c>)
 800c75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	6800      	ldr	r0, [r0, #0]
 800c764:	a902      	add	r1, sp, #8
 800c766:	9301      	str	r3, [sp, #4]
 800c768:	f000 fa2e 	bl	800cbc8 <_svfiprintf_r>
 800c76c:	2200      	movs	r2, #0
 800c76e:	9b02      	ldr	r3, [sp, #8]
 800c770:	701a      	strb	r2, [r3, #0]
 800c772:	b01c      	add	sp, #112	; 0x70
 800c774:	f85d eb04 	ldr.w	lr, [sp], #4
 800c778:	b003      	add	sp, #12
 800c77a:	4770      	bx	lr
 800c77c:	2000009c 	.word	0x2000009c
 800c780:	ffff0208 	.word	0xffff0208

0800c784 <__sread>:
 800c784:	b510      	push	{r4, lr}
 800c786:	460c      	mov	r4, r1
 800c788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78c:	f000 f868 	bl	800c860 <_read_r>
 800c790:	2800      	cmp	r0, #0
 800c792:	bfab      	itete	ge
 800c794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c796:	89a3      	ldrhlt	r3, [r4, #12]
 800c798:	181b      	addge	r3, r3, r0
 800c79a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c79e:	bfac      	ite	ge
 800c7a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7a2:	81a3      	strhlt	r3, [r4, #12]
 800c7a4:	bd10      	pop	{r4, pc}

0800c7a6 <__swrite>:
 800c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7aa:	461f      	mov	r7, r3
 800c7ac:	898b      	ldrh	r3, [r1, #12]
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	05db      	lsls	r3, r3, #23
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	d505      	bpl.n	800c7c4 <__swrite+0x1e>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c0:	f000 f83c 	bl	800c83c <_lseek_r>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	4632      	mov	r2, r6
 800c7c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7da:	f000 b853 	b.w	800c884 <_write_r>

0800c7de <__sseek>:
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e6:	f000 f829 	bl	800c83c <_lseek_r>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	bf15      	itete	ne
 800c7f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7fa:	81a3      	strheq	r3, [r4, #12]
 800c7fc:	bf18      	it	ne
 800c7fe:	81a3      	strhne	r3, [r4, #12]
 800c800:	bd10      	pop	{r4, pc}

0800c802 <__sclose>:
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 b809 	b.w	800c81c <_close_r>

0800c80a <memset>:
 800c80a:	4603      	mov	r3, r0
 800c80c:	4402      	add	r2, r0
 800c80e:	4293      	cmp	r3, r2
 800c810:	d100      	bne.n	800c814 <memset+0xa>
 800c812:	4770      	bx	lr
 800c814:	f803 1b01 	strb.w	r1, [r3], #1
 800c818:	e7f9      	b.n	800c80e <memset+0x4>
	...

0800c81c <_close_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	2300      	movs	r3, #0
 800c820:	4d05      	ldr	r5, [pc, #20]	; (800c838 <_close_r+0x1c>)
 800c822:	4604      	mov	r4, r0
 800c824:	4608      	mov	r0, r1
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	f7fb fc72 	bl	8008110 <_close>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d102      	bne.n	800c836 <_close_r+0x1a>
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	b103      	cbz	r3, 800c836 <_close_r+0x1a>
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	20000a74 	.word	0x20000a74

0800c83c <_lseek_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	4608      	mov	r0, r1
 800c842:	4611      	mov	r1, r2
 800c844:	2200      	movs	r2, #0
 800c846:	4d05      	ldr	r5, [pc, #20]	; (800c85c <_lseek_r+0x20>)
 800c848:	602a      	str	r2, [r5, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	f7fb fc84 	bl	8008158 <_lseek>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_lseek_r+0x1e>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_lseek_r+0x1e>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	20000a74 	.word	0x20000a74

0800c860 <_read_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4604      	mov	r4, r0
 800c864:	4608      	mov	r0, r1
 800c866:	4611      	mov	r1, r2
 800c868:	2200      	movs	r2, #0
 800c86a:	4d05      	ldr	r5, [pc, #20]	; (800c880 <_read_r+0x20>)
 800c86c:	602a      	str	r2, [r5, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	f7fb fc15 	bl	800809e <_read>
 800c874:	1c43      	adds	r3, r0, #1
 800c876:	d102      	bne.n	800c87e <_read_r+0x1e>
 800c878:	682b      	ldr	r3, [r5, #0]
 800c87a:	b103      	cbz	r3, 800c87e <_read_r+0x1e>
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	bd38      	pop	{r3, r4, r5, pc}
 800c880:	20000a74 	.word	0x20000a74

0800c884 <_write_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	4611      	mov	r1, r2
 800c88c:	2200      	movs	r2, #0
 800c88e:	4d05      	ldr	r5, [pc, #20]	; (800c8a4 <_write_r+0x20>)
 800c890:	602a      	str	r2, [r5, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	f7fb fc20 	bl	80080d8 <_write>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d102      	bne.n	800c8a2 <_write_r+0x1e>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	b103      	cbz	r3, 800c8a2 <_write_r+0x1e>
 800c8a0:	6023      	str	r3, [r4, #0]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	20000a74 	.word	0x20000a74

0800c8a8 <__errno>:
 800c8a8:	4b01      	ldr	r3, [pc, #4]	; (800c8b0 <__errno+0x8>)
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	2000009c 	.word	0x2000009c

0800c8b4 <__libc_init_array>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	4d0c      	ldr	r5, [pc, #48]	; (800c8ec <__libc_init_array+0x38>)
 800c8ba:	4c0d      	ldr	r4, [pc, #52]	; (800c8f0 <__libc_init_array+0x3c>)
 800c8bc:	1b64      	subs	r4, r4, r5
 800c8be:	10a4      	asrs	r4, r4, #2
 800c8c0:	42a6      	cmp	r6, r4
 800c8c2:	d109      	bne.n	800c8d8 <__libc_init_array+0x24>
 800c8c4:	f000 ffca 	bl	800d85c <_init>
 800c8c8:	2600      	movs	r6, #0
 800c8ca:	4d0a      	ldr	r5, [pc, #40]	; (800c8f4 <__libc_init_array+0x40>)
 800c8cc:	4c0a      	ldr	r4, [pc, #40]	; (800c8f8 <__libc_init_array+0x44>)
 800c8ce:	1b64      	subs	r4, r4, r5
 800c8d0:	10a4      	asrs	r4, r4, #2
 800c8d2:	42a6      	cmp	r6, r4
 800c8d4:	d105      	bne.n	800c8e2 <__libc_init_array+0x2e>
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8dc:	4798      	blx	r3
 800c8de:	3601      	adds	r6, #1
 800c8e0:	e7ee      	b.n	800c8c0 <__libc_init_array+0xc>
 800c8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e6:	4798      	blx	r3
 800c8e8:	3601      	adds	r6, #1
 800c8ea:	e7f2      	b.n	800c8d2 <__libc_init_array+0x1e>
 800c8ec:	0800efd8 	.word	0x0800efd8
 800c8f0:	0800efd8 	.word	0x0800efd8
 800c8f4:	0800efd8 	.word	0x0800efd8
 800c8f8:	0800efdc 	.word	0x0800efdc

0800c8fc <__retarget_lock_init_recursive>:
 800c8fc:	4770      	bx	lr

0800c8fe <__retarget_lock_acquire_recursive>:
 800c8fe:	4770      	bx	lr

0800c900 <__retarget_lock_release_recursive>:
 800c900:	4770      	bx	lr

0800c902 <memcpy>:
 800c902:	440a      	add	r2, r1
 800c904:	4291      	cmp	r1, r2
 800c906:	f100 33ff 	add.w	r3, r0, #4294967295
 800c90a:	d100      	bne.n	800c90e <memcpy+0xc>
 800c90c:	4770      	bx	lr
 800c90e:	b510      	push	{r4, lr}
 800c910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c914:	4291      	cmp	r1, r2
 800c916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c91a:	d1f9      	bne.n	800c910 <memcpy+0xe>
 800c91c:	bd10      	pop	{r4, pc}

0800c91e <abort>:
 800c91e:	2006      	movs	r0, #6
 800c920:	b508      	push	{r3, lr}
 800c922:	f000 fea7 	bl	800d674 <raise>
 800c926:	2001      	movs	r0, #1
 800c928:	f7fb fbaf 	bl	800808a <_exit>

0800c92c <_free_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4605      	mov	r5, r0
 800c930:	2900      	cmp	r1, #0
 800c932:	d040      	beq.n	800c9b6 <_free_r+0x8a>
 800c934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c938:	1f0c      	subs	r4, r1, #4
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	bfb8      	it	lt
 800c93e:	18e4      	addlt	r4, r4, r3
 800c940:	f000 f8dc 	bl	800cafc <__malloc_lock>
 800c944:	4a1c      	ldr	r2, [pc, #112]	; (800c9b8 <_free_r+0x8c>)
 800c946:	6813      	ldr	r3, [r2, #0]
 800c948:	b933      	cbnz	r3, 800c958 <_free_r+0x2c>
 800c94a:	6063      	str	r3, [r4, #4]
 800c94c:	6014      	str	r4, [r2, #0]
 800c94e:	4628      	mov	r0, r5
 800c950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c954:	f000 b8d8 	b.w	800cb08 <__malloc_unlock>
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d908      	bls.n	800c96e <_free_r+0x42>
 800c95c:	6820      	ldr	r0, [r4, #0]
 800c95e:	1821      	adds	r1, r4, r0
 800c960:	428b      	cmp	r3, r1
 800c962:	bf01      	itttt	eq
 800c964:	6819      	ldreq	r1, [r3, #0]
 800c966:	685b      	ldreq	r3, [r3, #4]
 800c968:	1809      	addeq	r1, r1, r0
 800c96a:	6021      	streq	r1, [r4, #0]
 800c96c:	e7ed      	b.n	800c94a <_free_r+0x1e>
 800c96e:	461a      	mov	r2, r3
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	b10b      	cbz	r3, 800c978 <_free_r+0x4c>
 800c974:	42a3      	cmp	r3, r4
 800c976:	d9fa      	bls.n	800c96e <_free_r+0x42>
 800c978:	6811      	ldr	r1, [r2, #0]
 800c97a:	1850      	adds	r0, r2, r1
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d10b      	bne.n	800c998 <_free_r+0x6c>
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	4401      	add	r1, r0
 800c984:	1850      	adds	r0, r2, r1
 800c986:	4283      	cmp	r3, r0
 800c988:	6011      	str	r1, [r2, #0]
 800c98a:	d1e0      	bne.n	800c94e <_free_r+0x22>
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	4408      	add	r0, r1
 800c992:	6010      	str	r0, [r2, #0]
 800c994:	6053      	str	r3, [r2, #4]
 800c996:	e7da      	b.n	800c94e <_free_r+0x22>
 800c998:	d902      	bls.n	800c9a0 <_free_r+0x74>
 800c99a:	230c      	movs	r3, #12
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	e7d6      	b.n	800c94e <_free_r+0x22>
 800c9a0:	6820      	ldr	r0, [r4, #0]
 800c9a2:	1821      	adds	r1, r4, r0
 800c9a4:	428b      	cmp	r3, r1
 800c9a6:	bf01      	itttt	eq
 800c9a8:	6819      	ldreq	r1, [r3, #0]
 800c9aa:	685b      	ldreq	r3, [r3, #4]
 800c9ac:	1809      	addeq	r1, r1, r0
 800c9ae:	6021      	streq	r1, [r4, #0]
 800c9b0:	6063      	str	r3, [r4, #4]
 800c9b2:	6054      	str	r4, [r2, #4]
 800c9b4:	e7cb      	b.n	800c94e <_free_r+0x22>
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	20000a7c 	.word	0x20000a7c

0800c9bc <sbrk_aligned>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4e0e      	ldr	r6, [pc, #56]	; (800c9f8 <sbrk_aligned+0x3c>)
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	6831      	ldr	r1, [r6, #0]
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b911      	cbnz	r1, 800c9ce <sbrk_aligned+0x12>
 800c9c8:	f000 fe70 	bl	800d6ac <_sbrk_r>
 800c9cc:	6030      	str	r0, [r6, #0]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 fe6b 	bl	800d6ac <_sbrk_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	d00a      	beq.n	800c9f0 <sbrk_aligned+0x34>
 800c9da:	1cc4      	adds	r4, r0, #3
 800c9dc:	f024 0403 	bic.w	r4, r4, #3
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d007      	beq.n	800c9f4 <sbrk_aligned+0x38>
 800c9e4:	1a21      	subs	r1, r4, r0
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 fe60 	bl	800d6ac <_sbrk_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d101      	bne.n	800c9f4 <sbrk_aligned+0x38>
 800c9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	20000a80 	.word	0x20000a80

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4607      	mov	r7, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d905      	bls.n	800ca24 <_malloc_r+0x28>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	603b      	str	r3, [r7, #0]
 800ca1e:	4630      	mov	r0, r6
 800ca20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800caf8 <_malloc_r+0xfc>
 800ca28:	f000 f868 	bl	800cafc <__malloc_lock>
 800ca2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca30:	461c      	mov	r4, r3
 800ca32:	bb5c      	cbnz	r4, 800ca8c <_malloc_r+0x90>
 800ca34:	4629      	mov	r1, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7ff ffc0 	bl	800c9bc <sbrk_aligned>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	4604      	mov	r4, r0
 800ca40:	d155      	bne.n	800caee <_malloc_r+0xf2>
 800ca42:	f8d8 4000 	ldr.w	r4, [r8]
 800ca46:	4626      	mov	r6, r4
 800ca48:	2e00      	cmp	r6, #0
 800ca4a:	d145      	bne.n	800cad8 <_malloc_r+0xdc>
 800ca4c:	2c00      	cmp	r4, #0
 800ca4e:	d048      	beq.n	800cae2 <_malloc_r+0xe6>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	4631      	mov	r1, r6
 800ca54:	4638      	mov	r0, r7
 800ca56:	eb04 0903 	add.w	r9, r4, r3
 800ca5a:	f000 fe27 	bl	800d6ac <_sbrk_r>
 800ca5e:	4581      	cmp	r9, r0
 800ca60:	d13f      	bne.n	800cae2 <_malloc_r+0xe6>
 800ca62:	6821      	ldr	r1, [r4, #0]
 800ca64:	4638      	mov	r0, r7
 800ca66:	1a6d      	subs	r5, r5, r1
 800ca68:	4629      	mov	r1, r5
 800ca6a:	f7ff ffa7 	bl	800c9bc <sbrk_aligned>
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d037      	beq.n	800cae2 <_malloc_r+0xe6>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	442b      	add	r3, r5
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d038      	beq.n	800caf2 <_malloc_r+0xf6>
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	42a2      	cmp	r2, r4
 800ca84:	d12b      	bne.n	800cade <_malloc_r+0xe2>
 800ca86:	2200      	movs	r2, #0
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	e00f      	b.n	800caac <_malloc_r+0xb0>
 800ca8c:	6822      	ldr	r2, [r4, #0]
 800ca8e:	1b52      	subs	r2, r2, r5
 800ca90:	d41f      	bmi.n	800cad2 <_malloc_r+0xd6>
 800ca92:	2a0b      	cmp	r2, #11
 800ca94:	d917      	bls.n	800cac6 <_malloc_r+0xca>
 800ca96:	1961      	adds	r1, r4, r5
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	6025      	str	r5, [r4, #0]
 800ca9c:	bf18      	it	ne
 800ca9e:	6059      	strne	r1, [r3, #4]
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	bf08      	it	eq
 800caa4:	f8c8 1000 	streq.w	r1, [r8]
 800caa8:	5162      	str	r2, [r4, r5]
 800caaa:	604b      	str	r3, [r1, #4]
 800caac:	4638      	mov	r0, r7
 800caae:	f104 060b 	add.w	r6, r4, #11
 800cab2:	f000 f829 	bl	800cb08 <__malloc_unlock>
 800cab6:	f026 0607 	bic.w	r6, r6, #7
 800caba:	1d23      	adds	r3, r4, #4
 800cabc:	1af2      	subs	r2, r6, r3
 800cabe:	d0ae      	beq.n	800ca1e <_malloc_r+0x22>
 800cac0:	1b9b      	subs	r3, r3, r6
 800cac2:	50a3      	str	r3, [r4, r2]
 800cac4:	e7ab      	b.n	800ca1e <_malloc_r+0x22>
 800cac6:	42a3      	cmp	r3, r4
 800cac8:	6862      	ldr	r2, [r4, #4]
 800caca:	d1dd      	bne.n	800ca88 <_malloc_r+0x8c>
 800cacc:	f8c8 2000 	str.w	r2, [r8]
 800cad0:	e7ec      	b.n	800caac <_malloc_r+0xb0>
 800cad2:	4623      	mov	r3, r4
 800cad4:	6864      	ldr	r4, [r4, #4]
 800cad6:	e7ac      	b.n	800ca32 <_malloc_r+0x36>
 800cad8:	4634      	mov	r4, r6
 800cada:	6876      	ldr	r6, [r6, #4]
 800cadc:	e7b4      	b.n	800ca48 <_malloc_r+0x4c>
 800cade:	4613      	mov	r3, r2
 800cae0:	e7cc      	b.n	800ca7c <_malloc_r+0x80>
 800cae2:	230c      	movs	r3, #12
 800cae4:	4638      	mov	r0, r7
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	f000 f80e 	bl	800cb08 <__malloc_unlock>
 800caec:	e797      	b.n	800ca1e <_malloc_r+0x22>
 800caee:	6025      	str	r5, [r4, #0]
 800caf0:	e7dc      	b.n	800caac <_malloc_r+0xb0>
 800caf2:	605b      	str	r3, [r3, #4]
 800caf4:	deff      	udf	#255	; 0xff
 800caf6:	bf00      	nop
 800caf8:	20000a7c 	.word	0x20000a7c

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	; (800cb04 <__malloc_lock+0x8>)
 800cafe:	f7ff befe 	b.w	800c8fe <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	20000a78 	.word	0x20000a78

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	; (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f7ff bef9 	b.w	800c900 <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	20000a78 	.word	0x20000a78

0800cb14 <__ssputs_r>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	461f      	mov	r7, r3
 800cb1a:	688e      	ldr	r6, [r1, #8]
 800cb1c:	4682      	mov	sl, r0
 800cb1e:	42be      	cmp	r6, r7
 800cb20:	460c      	mov	r4, r1
 800cb22:	4690      	mov	r8, r2
 800cb24:	680b      	ldr	r3, [r1, #0]
 800cb26:	d82c      	bhi.n	800cb82 <__ssputs_r+0x6e>
 800cb28:	898a      	ldrh	r2, [r1, #12]
 800cb2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb2e:	d026      	beq.n	800cb7e <__ssputs_r+0x6a>
 800cb30:	6965      	ldr	r5, [r4, #20]
 800cb32:	6909      	ldr	r1, [r1, #16]
 800cb34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb38:	eba3 0901 	sub.w	r9, r3, r1
 800cb3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb40:	1c7b      	adds	r3, r7, #1
 800cb42:	444b      	add	r3, r9
 800cb44:	106d      	asrs	r5, r5, #1
 800cb46:	429d      	cmp	r5, r3
 800cb48:	bf38      	it	cc
 800cb4a:	461d      	movcc	r5, r3
 800cb4c:	0553      	lsls	r3, r2, #21
 800cb4e:	d527      	bpl.n	800cba0 <__ssputs_r+0x8c>
 800cb50:	4629      	mov	r1, r5
 800cb52:	f7ff ff53 	bl	800c9fc <_malloc_r>
 800cb56:	4606      	mov	r6, r0
 800cb58:	b360      	cbz	r0, 800cbb4 <__ssputs_r+0xa0>
 800cb5a:	464a      	mov	r2, r9
 800cb5c:	6921      	ldr	r1, [r4, #16]
 800cb5e:	f7ff fed0 	bl	800c902 <memcpy>
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	6126      	str	r6, [r4, #16]
 800cb70:	444e      	add	r6, r9
 800cb72:	6026      	str	r6, [r4, #0]
 800cb74:	463e      	mov	r6, r7
 800cb76:	6165      	str	r5, [r4, #20]
 800cb78:	eba5 0509 	sub.w	r5, r5, r9
 800cb7c:	60a5      	str	r5, [r4, #8]
 800cb7e:	42be      	cmp	r6, r7
 800cb80:	d900      	bls.n	800cb84 <__ssputs_r+0x70>
 800cb82:	463e      	mov	r6, r7
 800cb84:	4632      	mov	r2, r6
 800cb86:	4641      	mov	r1, r8
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	f000 fd31 	bl	800d5f0 <memmove>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	68a3      	ldr	r3, [r4, #8]
 800cb92:	1b9b      	subs	r3, r3, r6
 800cb94:	60a3      	str	r3, [r4, #8]
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	4433      	add	r3, r6
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba0:	462a      	mov	r2, r5
 800cba2:	f000 fda1 	bl	800d6e8 <_realloc_r>
 800cba6:	4606      	mov	r6, r0
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d1e0      	bne.n	800cb6e <__ssputs_r+0x5a>
 800cbac:	4650      	mov	r0, sl
 800cbae:	6921      	ldr	r1, [r4, #16]
 800cbb0:	f7ff febc 	bl	800c92c <_free_r>
 800cbb4:	230c      	movs	r3, #12
 800cbb6:	f8ca 3000 	str.w	r3, [sl]
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc4:	81a3      	strh	r3, [r4, #12]
 800cbc6:	e7e9      	b.n	800cb9c <__ssputs_r+0x88>

0800cbc8 <_svfiprintf_r>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	4698      	mov	r8, r3
 800cbce:	898b      	ldrh	r3, [r1, #12]
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	061b      	lsls	r3, r3, #24
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	4614      	mov	r4, r2
 800cbd8:	b09d      	sub	sp, #116	; 0x74
 800cbda:	d50e      	bpl.n	800cbfa <_svfiprintf_r+0x32>
 800cbdc:	690b      	ldr	r3, [r1, #16]
 800cbde:	b963      	cbnz	r3, 800cbfa <_svfiprintf_r+0x32>
 800cbe0:	2140      	movs	r1, #64	; 0x40
 800cbe2:	f7ff ff0b 	bl	800c9fc <_malloc_r>
 800cbe6:	6028      	str	r0, [r5, #0]
 800cbe8:	6128      	str	r0, [r5, #16]
 800cbea:	b920      	cbnz	r0, 800cbf6 <_svfiprintf_r+0x2e>
 800cbec:	230c      	movs	r3, #12
 800cbee:	603b      	str	r3, [r7, #0]
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	e0d0      	b.n	800cd98 <_svfiprintf_r+0x1d0>
 800cbf6:	2340      	movs	r3, #64	; 0x40
 800cbf8:	616b      	str	r3, [r5, #20]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfe:	2320      	movs	r3, #32
 800cc00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc04:	2330      	movs	r3, #48	; 0x30
 800cc06:	f04f 0901 	mov.w	r9, #1
 800cc0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cdb0 <_svfiprintf_r+0x1e8>
 800cc12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc16:	4623      	mov	r3, r4
 800cc18:	469a      	mov	sl, r3
 800cc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc1e:	b10a      	cbz	r2, 800cc24 <_svfiprintf_r+0x5c>
 800cc20:	2a25      	cmp	r2, #37	; 0x25
 800cc22:	d1f9      	bne.n	800cc18 <_svfiprintf_r+0x50>
 800cc24:	ebba 0b04 	subs.w	fp, sl, r4
 800cc28:	d00b      	beq.n	800cc42 <_svfiprintf_r+0x7a>
 800cc2a:	465b      	mov	r3, fp
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4638      	mov	r0, r7
 800cc32:	f7ff ff6f 	bl	800cb14 <__ssputs_r>
 800cc36:	3001      	adds	r0, #1
 800cc38:	f000 80a9 	beq.w	800cd8e <_svfiprintf_r+0x1c6>
 800cc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc3e:	445a      	add	r2, fp
 800cc40:	9209      	str	r2, [sp, #36]	; 0x24
 800cc42:	f89a 3000 	ldrb.w	r3, [sl]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 80a1 	beq.w	800cd8e <_svfiprintf_r+0x1c6>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc56:	f10a 0a01 	add.w	sl, sl, #1
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	9307      	str	r3, [sp, #28]
 800cc5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc62:	931a      	str	r3, [sp, #104]	; 0x68
 800cc64:	4654      	mov	r4, sl
 800cc66:	2205      	movs	r2, #5
 800cc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6c:	4850      	ldr	r0, [pc, #320]	; (800cdb0 <_svfiprintf_r+0x1e8>)
 800cc6e:	f000 fd2d 	bl	800d6cc <memchr>
 800cc72:	9a04      	ldr	r2, [sp, #16]
 800cc74:	b9d8      	cbnz	r0, 800ccae <_svfiprintf_r+0xe6>
 800cc76:	06d0      	lsls	r0, r2, #27
 800cc78:	bf44      	itt	mi
 800cc7a:	2320      	movmi	r3, #32
 800cc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc80:	0711      	lsls	r1, r2, #28
 800cc82:	bf44      	itt	mi
 800cc84:	232b      	movmi	r3, #43	; 0x2b
 800cc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc8e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc90:	d015      	beq.n	800ccbe <_svfiprintf_r+0xf6>
 800cc92:	4654      	mov	r4, sl
 800cc94:	2000      	movs	r0, #0
 800cc96:	f04f 0c0a 	mov.w	ip, #10
 800cc9a:	9a07      	ldr	r2, [sp, #28]
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cca2:	3b30      	subs	r3, #48	; 0x30
 800cca4:	2b09      	cmp	r3, #9
 800cca6:	d94d      	bls.n	800cd44 <_svfiprintf_r+0x17c>
 800cca8:	b1b0      	cbz	r0, 800ccd8 <_svfiprintf_r+0x110>
 800ccaa:	9207      	str	r2, [sp, #28]
 800ccac:	e014      	b.n	800ccd8 <_svfiprintf_r+0x110>
 800ccae:	eba0 0308 	sub.w	r3, r0, r8
 800ccb2:	fa09 f303 	lsl.w	r3, r9, r3
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	46a2      	mov	sl, r4
 800ccba:	9304      	str	r3, [sp, #16]
 800ccbc:	e7d2      	b.n	800cc64 <_svfiprintf_r+0x9c>
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	1d19      	adds	r1, r3, #4
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	9103      	str	r1, [sp, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bfbb      	ittet	lt
 800ccca:	425b      	neglt	r3, r3
 800cccc:	f042 0202 	orrlt.w	r2, r2, #2
 800ccd0:	9307      	strge	r3, [sp, #28]
 800ccd2:	9307      	strlt	r3, [sp, #28]
 800ccd4:	bfb8      	it	lt
 800ccd6:	9204      	strlt	r2, [sp, #16]
 800ccd8:	7823      	ldrb	r3, [r4, #0]
 800ccda:	2b2e      	cmp	r3, #46	; 0x2e
 800ccdc:	d10c      	bne.n	800ccf8 <_svfiprintf_r+0x130>
 800ccde:	7863      	ldrb	r3, [r4, #1]
 800cce0:	2b2a      	cmp	r3, #42	; 0x2a
 800cce2:	d134      	bne.n	800cd4e <_svfiprintf_r+0x186>
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	3402      	adds	r4, #2
 800cce8:	1d1a      	adds	r2, r3, #4
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	9203      	str	r2, [sp, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfb8      	it	lt
 800ccf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccf6:	9305      	str	r3, [sp, #20]
 800ccf8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cdb4 <_svfiprintf_r+0x1ec>
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	4650      	mov	r0, sl
 800cd00:	7821      	ldrb	r1, [r4, #0]
 800cd02:	f000 fce3 	bl	800d6cc <memchr>
 800cd06:	b138      	cbz	r0, 800cd18 <_svfiprintf_r+0x150>
 800cd08:	2240      	movs	r2, #64	; 0x40
 800cd0a:	9b04      	ldr	r3, [sp, #16]
 800cd0c:	eba0 000a 	sub.w	r0, r0, sl
 800cd10:	4082      	lsls	r2, r0
 800cd12:	4313      	orrs	r3, r2
 800cd14:	3401      	adds	r4, #1
 800cd16:	9304      	str	r3, [sp, #16]
 800cd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1c:	2206      	movs	r2, #6
 800cd1e:	4826      	ldr	r0, [pc, #152]	; (800cdb8 <_svfiprintf_r+0x1f0>)
 800cd20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd24:	f000 fcd2 	bl	800d6cc <memchr>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d038      	beq.n	800cd9e <_svfiprintf_r+0x1d6>
 800cd2c:	4b23      	ldr	r3, [pc, #140]	; (800cdbc <_svfiprintf_r+0x1f4>)
 800cd2e:	bb1b      	cbnz	r3, 800cd78 <_svfiprintf_r+0x1b0>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	3307      	adds	r3, #7
 800cd34:	f023 0307 	bic.w	r3, r3, #7
 800cd38:	3308      	adds	r3, #8
 800cd3a:	9303      	str	r3, [sp, #12]
 800cd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3e:	4433      	add	r3, r6
 800cd40:	9309      	str	r3, [sp, #36]	; 0x24
 800cd42:	e768      	b.n	800cc16 <_svfiprintf_r+0x4e>
 800cd44:	460c      	mov	r4, r1
 800cd46:	2001      	movs	r0, #1
 800cd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd4c:	e7a6      	b.n	800cc9c <_svfiprintf_r+0xd4>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f04f 0c0a 	mov.w	ip, #10
 800cd54:	4619      	mov	r1, r3
 800cd56:	3401      	adds	r4, #1
 800cd58:	9305      	str	r3, [sp, #20]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd60:	3a30      	subs	r2, #48	; 0x30
 800cd62:	2a09      	cmp	r2, #9
 800cd64:	d903      	bls.n	800cd6e <_svfiprintf_r+0x1a6>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0c6      	beq.n	800ccf8 <_svfiprintf_r+0x130>
 800cd6a:	9105      	str	r1, [sp, #20]
 800cd6c:	e7c4      	b.n	800ccf8 <_svfiprintf_r+0x130>
 800cd6e:	4604      	mov	r4, r0
 800cd70:	2301      	movs	r3, #1
 800cd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd76:	e7f0      	b.n	800cd5a <_svfiprintf_r+0x192>
 800cd78:	ab03      	add	r3, sp, #12
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	462a      	mov	r2, r5
 800cd7e:	4638      	mov	r0, r7
 800cd80:	4b0f      	ldr	r3, [pc, #60]	; (800cdc0 <_svfiprintf_r+0x1f8>)
 800cd82:	a904      	add	r1, sp, #16
 800cd84:	f3af 8000 	nop.w
 800cd88:	1c42      	adds	r2, r0, #1
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	d1d6      	bne.n	800cd3c <_svfiprintf_r+0x174>
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	065b      	lsls	r3, r3, #25
 800cd92:	f53f af2d 	bmi.w	800cbf0 <_svfiprintf_r+0x28>
 800cd96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd98:	b01d      	add	sp, #116	; 0x74
 800cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9e:	ab03      	add	r3, sp, #12
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	462a      	mov	r2, r5
 800cda4:	4638      	mov	r0, r7
 800cda6:	4b06      	ldr	r3, [pc, #24]	; (800cdc0 <_svfiprintf_r+0x1f8>)
 800cda8:	a904      	add	r1, sp, #16
 800cdaa:	f000 f9bf 	bl	800d12c <_printf_i>
 800cdae:	e7eb      	b.n	800cd88 <_svfiprintf_r+0x1c0>
 800cdb0:	0800ef9a 	.word	0x0800ef9a
 800cdb4:	0800efa0 	.word	0x0800efa0
 800cdb8:	0800efa4 	.word	0x0800efa4
 800cdbc:	00000000 	.word	0x00000000
 800cdc0:	0800cb15 	.word	0x0800cb15

0800cdc4 <__sfputc_r>:
 800cdc4:	6893      	ldr	r3, [r2, #8]
 800cdc6:	b410      	push	{r4}
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	6093      	str	r3, [r2, #8]
 800cdce:	da07      	bge.n	800cde0 <__sfputc_r+0x1c>
 800cdd0:	6994      	ldr	r4, [r2, #24]
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	db01      	blt.n	800cdda <__sfputc_r+0x16>
 800cdd6:	290a      	cmp	r1, #10
 800cdd8:	d102      	bne.n	800cde0 <__sfputc_r+0x1c>
 800cdda:	bc10      	pop	{r4}
 800cddc:	f000 bb72 	b.w	800d4c4 <__swbuf_r>
 800cde0:	6813      	ldr	r3, [r2, #0]
 800cde2:	1c58      	adds	r0, r3, #1
 800cde4:	6010      	str	r0, [r2, #0]
 800cde6:	7019      	strb	r1, [r3, #0]
 800cde8:	4608      	mov	r0, r1
 800cdea:	bc10      	pop	{r4}
 800cdec:	4770      	bx	lr

0800cdee <__sfputs_r>:
 800cdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	460f      	mov	r7, r1
 800cdf4:	4614      	mov	r4, r2
 800cdf6:	18d5      	adds	r5, r2, r3
 800cdf8:	42ac      	cmp	r4, r5
 800cdfa:	d101      	bne.n	800ce00 <__sfputs_r+0x12>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e007      	b.n	800ce10 <__sfputs_r+0x22>
 800ce00:	463a      	mov	r2, r7
 800ce02:	4630      	mov	r0, r6
 800ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce08:	f7ff ffdc 	bl	800cdc4 <__sfputc_r>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d1f3      	bne.n	800cdf8 <__sfputs_r+0xa>
 800ce10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce14 <_vfiprintf_r>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	460d      	mov	r5, r1
 800ce1a:	4614      	mov	r4, r2
 800ce1c:	4698      	mov	r8, r3
 800ce1e:	4606      	mov	r6, r0
 800ce20:	b09d      	sub	sp, #116	; 0x74
 800ce22:	b118      	cbz	r0, 800ce2c <_vfiprintf_r+0x18>
 800ce24:	6a03      	ldr	r3, [r0, #32]
 800ce26:	b90b      	cbnz	r3, 800ce2c <_vfiprintf_r+0x18>
 800ce28:	f7ff fc10 	bl	800c64c <__sinit>
 800ce2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce2e:	07d9      	lsls	r1, r3, #31
 800ce30:	d405      	bmi.n	800ce3e <_vfiprintf_r+0x2a>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d402      	bmi.n	800ce3e <_vfiprintf_r+0x2a>
 800ce38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce3a:	f7ff fd60 	bl	800c8fe <__retarget_lock_acquire_recursive>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	071b      	lsls	r3, r3, #28
 800ce42:	d501      	bpl.n	800ce48 <_vfiprintf_r+0x34>
 800ce44:	692b      	ldr	r3, [r5, #16]
 800ce46:	b99b      	cbnz	r3, 800ce70 <_vfiprintf_r+0x5c>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f000 fb78 	bl	800d540 <__swsetup_r>
 800ce50:	b170      	cbz	r0, 800ce70 <_vfiprintf_r+0x5c>
 800ce52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce54:	07dc      	lsls	r4, r3, #31
 800ce56:	d504      	bpl.n	800ce62 <_vfiprintf_r+0x4e>
 800ce58:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5c:	b01d      	add	sp, #116	; 0x74
 800ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce62:	89ab      	ldrh	r3, [r5, #12]
 800ce64:	0598      	lsls	r0, r3, #22
 800ce66:	d4f7      	bmi.n	800ce58 <_vfiprintf_r+0x44>
 800ce68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce6a:	f7ff fd49 	bl	800c900 <__retarget_lock_release_recursive>
 800ce6e:	e7f3      	b.n	800ce58 <_vfiprintf_r+0x44>
 800ce70:	2300      	movs	r3, #0
 800ce72:	9309      	str	r3, [sp, #36]	; 0x24
 800ce74:	2320      	movs	r3, #32
 800ce76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce7a:	2330      	movs	r3, #48	; 0x30
 800ce7c:	f04f 0901 	mov.w	r9, #1
 800ce80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce84:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d034 <_vfiprintf_r+0x220>
 800ce88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	469a      	mov	sl, r3
 800ce90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce94:	b10a      	cbz	r2, 800ce9a <_vfiprintf_r+0x86>
 800ce96:	2a25      	cmp	r2, #37	; 0x25
 800ce98:	d1f9      	bne.n	800ce8e <_vfiprintf_r+0x7a>
 800ce9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce9e:	d00b      	beq.n	800ceb8 <_vfiprintf_r+0xa4>
 800cea0:	465b      	mov	r3, fp
 800cea2:	4622      	mov	r2, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff ffa1 	bl	800cdee <__sfputs_r>
 800ceac:	3001      	adds	r0, #1
 800ceae:	f000 80a9 	beq.w	800d004 <_vfiprintf_r+0x1f0>
 800ceb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb4:	445a      	add	r2, fp
 800ceb6:	9209      	str	r2, [sp, #36]	; 0x24
 800ceb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 80a1 	beq.w	800d004 <_vfiprintf_r+0x1f0>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295
 800cec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cecc:	f10a 0a01 	add.w	sl, sl, #1
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	9307      	str	r3, [sp, #28]
 800ced4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ced8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceda:	4654      	mov	r4, sl
 800cedc:	2205      	movs	r2, #5
 800cede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee2:	4854      	ldr	r0, [pc, #336]	; (800d034 <_vfiprintf_r+0x220>)
 800cee4:	f000 fbf2 	bl	800d6cc <memchr>
 800cee8:	9a04      	ldr	r2, [sp, #16]
 800ceea:	b9d8      	cbnz	r0, 800cf24 <_vfiprintf_r+0x110>
 800ceec:	06d1      	lsls	r1, r2, #27
 800ceee:	bf44      	itt	mi
 800cef0:	2320      	movmi	r3, #32
 800cef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cef6:	0713      	lsls	r3, r2, #28
 800cef8:	bf44      	itt	mi
 800cefa:	232b      	movmi	r3, #43	; 0x2b
 800cefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf00:	f89a 3000 	ldrb.w	r3, [sl]
 800cf04:	2b2a      	cmp	r3, #42	; 0x2a
 800cf06:	d015      	beq.n	800cf34 <_vfiprintf_r+0x120>
 800cf08:	4654      	mov	r4, sl
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	f04f 0c0a 	mov.w	ip, #10
 800cf10:	9a07      	ldr	r2, [sp, #28]
 800cf12:	4621      	mov	r1, r4
 800cf14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf18:	3b30      	subs	r3, #48	; 0x30
 800cf1a:	2b09      	cmp	r3, #9
 800cf1c:	d94d      	bls.n	800cfba <_vfiprintf_r+0x1a6>
 800cf1e:	b1b0      	cbz	r0, 800cf4e <_vfiprintf_r+0x13a>
 800cf20:	9207      	str	r2, [sp, #28]
 800cf22:	e014      	b.n	800cf4e <_vfiprintf_r+0x13a>
 800cf24:	eba0 0308 	sub.w	r3, r0, r8
 800cf28:	fa09 f303 	lsl.w	r3, r9, r3
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	46a2      	mov	sl, r4
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	e7d2      	b.n	800ceda <_vfiprintf_r+0xc6>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1d19      	adds	r1, r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	9103      	str	r1, [sp, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfbb      	ittet	lt
 800cf40:	425b      	neglt	r3, r3
 800cf42:	f042 0202 	orrlt.w	r2, r2, #2
 800cf46:	9307      	strge	r3, [sp, #28]
 800cf48:	9307      	strlt	r3, [sp, #28]
 800cf4a:	bfb8      	it	lt
 800cf4c:	9204      	strlt	r2, [sp, #16]
 800cf4e:	7823      	ldrb	r3, [r4, #0]
 800cf50:	2b2e      	cmp	r3, #46	; 0x2e
 800cf52:	d10c      	bne.n	800cf6e <_vfiprintf_r+0x15a>
 800cf54:	7863      	ldrb	r3, [r4, #1]
 800cf56:	2b2a      	cmp	r3, #42	; 0x2a
 800cf58:	d134      	bne.n	800cfc4 <_vfiprintf_r+0x1b0>
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	3402      	adds	r4, #2
 800cf5e:	1d1a      	adds	r2, r3, #4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	9203      	str	r2, [sp, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	bfb8      	it	lt
 800cf68:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d038 <_vfiprintf_r+0x224>
 800cf72:	2203      	movs	r2, #3
 800cf74:	4650      	mov	r0, sl
 800cf76:	7821      	ldrb	r1, [r4, #0]
 800cf78:	f000 fba8 	bl	800d6cc <memchr>
 800cf7c:	b138      	cbz	r0, 800cf8e <_vfiprintf_r+0x17a>
 800cf7e:	2240      	movs	r2, #64	; 0x40
 800cf80:	9b04      	ldr	r3, [sp, #16]
 800cf82:	eba0 000a 	sub.w	r0, r0, sl
 800cf86:	4082      	lsls	r2, r0
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	3401      	adds	r4, #1
 800cf8c:	9304      	str	r3, [sp, #16]
 800cf8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf92:	2206      	movs	r2, #6
 800cf94:	4829      	ldr	r0, [pc, #164]	; (800d03c <_vfiprintf_r+0x228>)
 800cf96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf9a:	f000 fb97 	bl	800d6cc <memchr>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d03f      	beq.n	800d022 <_vfiprintf_r+0x20e>
 800cfa2:	4b27      	ldr	r3, [pc, #156]	; (800d040 <_vfiprintf_r+0x22c>)
 800cfa4:	bb1b      	cbnz	r3, 800cfee <_vfiprintf_r+0x1da>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	3307      	adds	r3, #7
 800cfaa:	f023 0307 	bic.w	r3, r3, #7
 800cfae:	3308      	adds	r3, #8
 800cfb0:	9303      	str	r3, [sp, #12]
 800cfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb4:	443b      	add	r3, r7
 800cfb6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb8:	e768      	b.n	800ce8c <_vfiprintf_r+0x78>
 800cfba:	460c      	mov	r4, r1
 800cfbc:	2001      	movs	r0, #1
 800cfbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc2:	e7a6      	b.n	800cf12 <_vfiprintf_r+0xfe>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f04f 0c0a 	mov.w	ip, #10
 800cfca:	4619      	mov	r1, r3
 800cfcc:	3401      	adds	r4, #1
 800cfce:	9305      	str	r3, [sp, #20]
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd6:	3a30      	subs	r2, #48	; 0x30
 800cfd8:	2a09      	cmp	r2, #9
 800cfda:	d903      	bls.n	800cfe4 <_vfiprintf_r+0x1d0>
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0c6      	beq.n	800cf6e <_vfiprintf_r+0x15a>
 800cfe0:	9105      	str	r1, [sp, #20]
 800cfe2:	e7c4      	b.n	800cf6e <_vfiprintf_r+0x15a>
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfec:	e7f0      	b.n	800cfd0 <_vfiprintf_r+0x1bc>
 800cfee:	ab03      	add	r3, sp, #12
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	462a      	mov	r2, r5
 800cff4:	4630      	mov	r0, r6
 800cff6:	4b13      	ldr	r3, [pc, #76]	; (800d044 <_vfiprintf_r+0x230>)
 800cff8:	a904      	add	r1, sp, #16
 800cffa:	f3af 8000 	nop.w
 800cffe:	4607      	mov	r7, r0
 800d000:	1c78      	adds	r0, r7, #1
 800d002:	d1d6      	bne.n	800cfb2 <_vfiprintf_r+0x19e>
 800d004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	d405      	bmi.n	800d016 <_vfiprintf_r+0x202>
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d402      	bmi.n	800d016 <_vfiprintf_r+0x202>
 800d010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d012:	f7ff fc75 	bl	800c900 <__retarget_lock_release_recursive>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	065b      	lsls	r3, r3, #25
 800d01a:	f53f af1d 	bmi.w	800ce58 <_vfiprintf_r+0x44>
 800d01e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d020:	e71c      	b.n	800ce5c <_vfiprintf_r+0x48>
 800d022:	ab03      	add	r3, sp, #12
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	462a      	mov	r2, r5
 800d028:	4630      	mov	r0, r6
 800d02a:	4b06      	ldr	r3, [pc, #24]	; (800d044 <_vfiprintf_r+0x230>)
 800d02c:	a904      	add	r1, sp, #16
 800d02e:	f000 f87d 	bl	800d12c <_printf_i>
 800d032:	e7e4      	b.n	800cffe <_vfiprintf_r+0x1ea>
 800d034:	0800ef9a 	.word	0x0800ef9a
 800d038:	0800efa0 	.word	0x0800efa0
 800d03c:	0800efa4 	.word	0x0800efa4
 800d040:	00000000 	.word	0x00000000
 800d044:	0800cdef 	.word	0x0800cdef

0800d048 <_printf_common>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	4616      	mov	r6, r2
 800d04e:	4699      	mov	r9, r3
 800d050:	688a      	ldr	r2, [r1, #8]
 800d052:	690b      	ldr	r3, [r1, #16]
 800d054:	4607      	mov	r7, r0
 800d056:	4293      	cmp	r3, r2
 800d058:	bfb8      	it	lt
 800d05a:	4613      	movlt	r3, r2
 800d05c:	6033      	str	r3, [r6, #0]
 800d05e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d062:	460c      	mov	r4, r1
 800d064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d068:	b10a      	cbz	r2, 800d06e <_printf_common+0x26>
 800d06a:	3301      	adds	r3, #1
 800d06c:	6033      	str	r3, [r6, #0]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	0699      	lsls	r1, r3, #26
 800d072:	bf42      	ittt	mi
 800d074:	6833      	ldrmi	r3, [r6, #0]
 800d076:	3302      	addmi	r3, #2
 800d078:	6033      	strmi	r3, [r6, #0]
 800d07a:	6825      	ldr	r5, [r4, #0]
 800d07c:	f015 0506 	ands.w	r5, r5, #6
 800d080:	d106      	bne.n	800d090 <_printf_common+0x48>
 800d082:	f104 0a19 	add.w	sl, r4, #25
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	6832      	ldr	r2, [r6, #0]
 800d08a:	1a9b      	subs	r3, r3, r2
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	dc2b      	bgt.n	800d0e8 <_printf_common+0xa0>
 800d090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d094:	1e13      	subs	r3, r2, #0
 800d096:	6822      	ldr	r2, [r4, #0]
 800d098:	bf18      	it	ne
 800d09a:	2301      	movne	r3, #1
 800d09c:	0692      	lsls	r2, r2, #26
 800d09e:	d430      	bmi.n	800d102 <_printf_common+0xba>
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a8:	47c0      	blx	r8
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	d023      	beq.n	800d0f6 <_printf_common+0xae>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	6922      	ldr	r2, [r4, #16]
 800d0b2:	f003 0306 	and.w	r3, r3, #6
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	bf14      	ite	ne
 800d0ba:	2500      	movne	r5, #0
 800d0bc:	6833      	ldreq	r3, [r6, #0]
 800d0be:	f04f 0600 	mov.w	r6, #0
 800d0c2:	bf08      	it	eq
 800d0c4:	68e5      	ldreq	r5, [r4, #12]
 800d0c6:	f104 041a 	add.w	r4, r4, #26
 800d0ca:	bf08      	it	eq
 800d0cc:	1aed      	subeq	r5, r5, r3
 800d0ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d0d2:	bf08      	it	eq
 800d0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bfc4      	itt	gt
 800d0dc:	1a9b      	subgt	r3, r3, r2
 800d0de:	18ed      	addgt	r5, r5, r3
 800d0e0:	42b5      	cmp	r5, r6
 800d0e2:	d11a      	bne.n	800d11a <_printf_common+0xd2>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e008      	b.n	800d0fa <_printf_common+0xb2>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	47c0      	blx	r8
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d103      	bne.n	800d0fe <_printf_common+0xb6>
 800d0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fe:	3501      	adds	r5, #1
 800d100:	e7c1      	b.n	800d086 <_printf_common+0x3e>
 800d102:	2030      	movs	r0, #48	; 0x30
 800d104:	18e1      	adds	r1, r4, r3
 800d106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d110:	4422      	add	r2, r4
 800d112:	3302      	adds	r3, #2
 800d114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d118:	e7c2      	b.n	800d0a0 <_printf_common+0x58>
 800d11a:	2301      	movs	r3, #1
 800d11c:	4622      	mov	r2, r4
 800d11e:	4649      	mov	r1, r9
 800d120:	4638      	mov	r0, r7
 800d122:	47c0      	blx	r8
 800d124:	3001      	adds	r0, #1
 800d126:	d0e6      	beq.n	800d0f6 <_printf_common+0xae>
 800d128:	3601      	adds	r6, #1
 800d12a:	e7d9      	b.n	800d0e0 <_printf_common+0x98>

0800d12c <_printf_i>:
 800d12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	7e0f      	ldrb	r7, [r1, #24]
 800d132:	4691      	mov	r9, r2
 800d134:	2f78      	cmp	r7, #120	; 0x78
 800d136:	4680      	mov	r8, r0
 800d138:	460c      	mov	r4, r1
 800d13a:	469a      	mov	sl, r3
 800d13c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d13e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d142:	d807      	bhi.n	800d154 <_printf_i+0x28>
 800d144:	2f62      	cmp	r7, #98	; 0x62
 800d146:	d80a      	bhi.n	800d15e <_printf_i+0x32>
 800d148:	2f00      	cmp	r7, #0
 800d14a:	f000 80d5 	beq.w	800d2f8 <_printf_i+0x1cc>
 800d14e:	2f58      	cmp	r7, #88	; 0x58
 800d150:	f000 80c1 	beq.w	800d2d6 <_printf_i+0x1aa>
 800d154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d15c:	e03a      	b.n	800d1d4 <_printf_i+0xa8>
 800d15e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d162:	2b15      	cmp	r3, #21
 800d164:	d8f6      	bhi.n	800d154 <_printf_i+0x28>
 800d166:	a101      	add	r1, pc, #4	; (adr r1, 800d16c <_printf_i+0x40>)
 800d168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d16c:	0800d1c5 	.word	0x0800d1c5
 800d170:	0800d1d9 	.word	0x0800d1d9
 800d174:	0800d155 	.word	0x0800d155
 800d178:	0800d155 	.word	0x0800d155
 800d17c:	0800d155 	.word	0x0800d155
 800d180:	0800d155 	.word	0x0800d155
 800d184:	0800d1d9 	.word	0x0800d1d9
 800d188:	0800d155 	.word	0x0800d155
 800d18c:	0800d155 	.word	0x0800d155
 800d190:	0800d155 	.word	0x0800d155
 800d194:	0800d155 	.word	0x0800d155
 800d198:	0800d2df 	.word	0x0800d2df
 800d19c:	0800d205 	.word	0x0800d205
 800d1a0:	0800d299 	.word	0x0800d299
 800d1a4:	0800d155 	.word	0x0800d155
 800d1a8:	0800d155 	.word	0x0800d155
 800d1ac:	0800d301 	.word	0x0800d301
 800d1b0:	0800d155 	.word	0x0800d155
 800d1b4:	0800d205 	.word	0x0800d205
 800d1b8:	0800d155 	.word	0x0800d155
 800d1bc:	0800d155 	.word	0x0800d155
 800d1c0:	0800d2a1 	.word	0x0800d2a1
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	1d1a      	adds	r2, r3, #4
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	602a      	str	r2, [r5, #0]
 800d1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e0a0      	b.n	800d31a <_printf_i+0x1ee>
 800d1d8:	6820      	ldr	r0, [r4, #0]
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	0607      	lsls	r7, r0, #24
 800d1de:	f103 0104 	add.w	r1, r3, #4
 800d1e2:	6029      	str	r1, [r5, #0]
 800d1e4:	d501      	bpl.n	800d1ea <_printf_i+0xbe>
 800d1e6:	681e      	ldr	r6, [r3, #0]
 800d1e8:	e003      	b.n	800d1f2 <_printf_i+0xc6>
 800d1ea:	0646      	lsls	r6, r0, #25
 800d1ec:	d5fb      	bpl.n	800d1e6 <_printf_i+0xba>
 800d1ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	da03      	bge.n	800d1fe <_printf_i+0xd2>
 800d1f6:	232d      	movs	r3, #45	; 0x2d
 800d1f8:	4276      	negs	r6, r6
 800d1fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1fe:	230a      	movs	r3, #10
 800d200:	4859      	ldr	r0, [pc, #356]	; (800d368 <_printf_i+0x23c>)
 800d202:	e012      	b.n	800d22a <_printf_i+0xfe>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	6820      	ldr	r0, [r4, #0]
 800d208:	1d19      	adds	r1, r3, #4
 800d20a:	6029      	str	r1, [r5, #0]
 800d20c:	0605      	lsls	r5, r0, #24
 800d20e:	d501      	bpl.n	800d214 <_printf_i+0xe8>
 800d210:	681e      	ldr	r6, [r3, #0]
 800d212:	e002      	b.n	800d21a <_printf_i+0xee>
 800d214:	0641      	lsls	r1, r0, #25
 800d216:	d5fb      	bpl.n	800d210 <_printf_i+0xe4>
 800d218:	881e      	ldrh	r6, [r3, #0]
 800d21a:	2f6f      	cmp	r7, #111	; 0x6f
 800d21c:	bf0c      	ite	eq
 800d21e:	2308      	moveq	r3, #8
 800d220:	230a      	movne	r3, #10
 800d222:	4851      	ldr	r0, [pc, #324]	; (800d368 <_printf_i+0x23c>)
 800d224:	2100      	movs	r1, #0
 800d226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d22a:	6865      	ldr	r5, [r4, #4]
 800d22c:	2d00      	cmp	r5, #0
 800d22e:	bfa8      	it	ge
 800d230:	6821      	ldrge	r1, [r4, #0]
 800d232:	60a5      	str	r5, [r4, #8]
 800d234:	bfa4      	itt	ge
 800d236:	f021 0104 	bicge.w	r1, r1, #4
 800d23a:	6021      	strge	r1, [r4, #0]
 800d23c:	b90e      	cbnz	r6, 800d242 <_printf_i+0x116>
 800d23e:	2d00      	cmp	r5, #0
 800d240:	d04b      	beq.n	800d2da <_printf_i+0x1ae>
 800d242:	4615      	mov	r5, r2
 800d244:	fbb6 f1f3 	udiv	r1, r6, r3
 800d248:	fb03 6711 	mls	r7, r3, r1, r6
 800d24c:	5dc7      	ldrb	r7, [r0, r7]
 800d24e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d252:	4637      	mov	r7, r6
 800d254:	42bb      	cmp	r3, r7
 800d256:	460e      	mov	r6, r1
 800d258:	d9f4      	bls.n	800d244 <_printf_i+0x118>
 800d25a:	2b08      	cmp	r3, #8
 800d25c:	d10b      	bne.n	800d276 <_printf_i+0x14a>
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	07de      	lsls	r6, r3, #31
 800d262:	d508      	bpl.n	800d276 <_printf_i+0x14a>
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	6861      	ldr	r1, [r4, #4]
 800d268:	4299      	cmp	r1, r3
 800d26a:	bfde      	ittt	le
 800d26c:	2330      	movle	r3, #48	; 0x30
 800d26e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d272:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d276:	1b52      	subs	r2, r2, r5
 800d278:	6122      	str	r2, [r4, #16]
 800d27a:	464b      	mov	r3, r9
 800d27c:	4621      	mov	r1, r4
 800d27e:	4640      	mov	r0, r8
 800d280:	f8cd a000 	str.w	sl, [sp]
 800d284:	aa03      	add	r2, sp, #12
 800d286:	f7ff fedf 	bl	800d048 <_printf_common>
 800d28a:	3001      	adds	r0, #1
 800d28c:	d14a      	bne.n	800d324 <_printf_i+0x1f8>
 800d28e:	f04f 30ff 	mov.w	r0, #4294967295
 800d292:	b004      	add	sp, #16
 800d294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d298:	6823      	ldr	r3, [r4, #0]
 800d29a:	f043 0320 	orr.w	r3, r3, #32
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	2778      	movs	r7, #120	; 0x78
 800d2a2:	4832      	ldr	r0, [pc, #200]	; (800d36c <_printf_i+0x240>)
 800d2a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	6829      	ldr	r1, [r5, #0]
 800d2ac:	061f      	lsls	r7, r3, #24
 800d2ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2b2:	d402      	bmi.n	800d2ba <_printf_i+0x18e>
 800d2b4:	065f      	lsls	r7, r3, #25
 800d2b6:	bf48      	it	mi
 800d2b8:	b2b6      	uxthmi	r6, r6
 800d2ba:	07df      	lsls	r7, r3, #31
 800d2bc:	bf48      	it	mi
 800d2be:	f043 0320 	orrmi.w	r3, r3, #32
 800d2c2:	6029      	str	r1, [r5, #0]
 800d2c4:	bf48      	it	mi
 800d2c6:	6023      	strmi	r3, [r4, #0]
 800d2c8:	b91e      	cbnz	r6, 800d2d2 <_printf_i+0x1a6>
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	f023 0320 	bic.w	r3, r3, #32
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	2310      	movs	r3, #16
 800d2d4:	e7a6      	b.n	800d224 <_printf_i+0xf8>
 800d2d6:	4824      	ldr	r0, [pc, #144]	; (800d368 <_printf_i+0x23c>)
 800d2d8:	e7e4      	b.n	800d2a4 <_printf_i+0x178>
 800d2da:	4615      	mov	r5, r2
 800d2dc:	e7bd      	b.n	800d25a <_printf_i+0x12e>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	6826      	ldr	r6, [r4, #0]
 800d2e2:	1d18      	adds	r0, r3, #4
 800d2e4:	6961      	ldr	r1, [r4, #20]
 800d2e6:	6028      	str	r0, [r5, #0]
 800d2e8:	0635      	lsls	r5, r6, #24
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	d501      	bpl.n	800d2f2 <_printf_i+0x1c6>
 800d2ee:	6019      	str	r1, [r3, #0]
 800d2f0:	e002      	b.n	800d2f8 <_printf_i+0x1cc>
 800d2f2:	0670      	lsls	r0, r6, #25
 800d2f4:	d5fb      	bpl.n	800d2ee <_printf_i+0x1c2>
 800d2f6:	8019      	strh	r1, [r3, #0]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4615      	mov	r5, r2
 800d2fc:	6123      	str	r3, [r4, #16]
 800d2fe:	e7bc      	b.n	800d27a <_printf_i+0x14e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	2100      	movs	r1, #0
 800d304:	1d1a      	adds	r2, r3, #4
 800d306:	602a      	str	r2, [r5, #0]
 800d308:	681d      	ldr	r5, [r3, #0]
 800d30a:	6862      	ldr	r2, [r4, #4]
 800d30c:	4628      	mov	r0, r5
 800d30e:	f000 f9dd 	bl	800d6cc <memchr>
 800d312:	b108      	cbz	r0, 800d318 <_printf_i+0x1ec>
 800d314:	1b40      	subs	r0, r0, r5
 800d316:	6060      	str	r0, [r4, #4]
 800d318:	6863      	ldr	r3, [r4, #4]
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	2300      	movs	r3, #0
 800d31e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d322:	e7aa      	b.n	800d27a <_printf_i+0x14e>
 800d324:	462a      	mov	r2, r5
 800d326:	4649      	mov	r1, r9
 800d328:	4640      	mov	r0, r8
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	47d0      	blx	sl
 800d32e:	3001      	adds	r0, #1
 800d330:	d0ad      	beq.n	800d28e <_printf_i+0x162>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	079b      	lsls	r3, r3, #30
 800d336:	d413      	bmi.n	800d360 <_printf_i+0x234>
 800d338:	68e0      	ldr	r0, [r4, #12]
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	4298      	cmp	r0, r3
 800d33e:	bfb8      	it	lt
 800d340:	4618      	movlt	r0, r3
 800d342:	e7a6      	b.n	800d292 <_printf_i+0x166>
 800d344:	2301      	movs	r3, #1
 800d346:	4632      	mov	r2, r6
 800d348:	4649      	mov	r1, r9
 800d34a:	4640      	mov	r0, r8
 800d34c:	47d0      	blx	sl
 800d34e:	3001      	adds	r0, #1
 800d350:	d09d      	beq.n	800d28e <_printf_i+0x162>
 800d352:	3501      	adds	r5, #1
 800d354:	68e3      	ldr	r3, [r4, #12]
 800d356:	9903      	ldr	r1, [sp, #12]
 800d358:	1a5b      	subs	r3, r3, r1
 800d35a:	42ab      	cmp	r3, r5
 800d35c:	dcf2      	bgt.n	800d344 <_printf_i+0x218>
 800d35e:	e7eb      	b.n	800d338 <_printf_i+0x20c>
 800d360:	2500      	movs	r5, #0
 800d362:	f104 0619 	add.w	r6, r4, #25
 800d366:	e7f5      	b.n	800d354 <_printf_i+0x228>
 800d368:	0800efab 	.word	0x0800efab
 800d36c:	0800efbc 	.word	0x0800efbc

0800d370 <__sflush_r>:
 800d370:	898a      	ldrh	r2, [r1, #12]
 800d372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d374:	4605      	mov	r5, r0
 800d376:	0710      	lsls	r0, r2, #28
 800d378:	460c      	mov	r4, r1
 800d37a:	d457      	bmi.n	800d42c <__sflush_r+0xbc>
 800d37c:	684b      	ldr	r3, [r1, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	dc04      	bgt.n	800d38c <__sflush_r+0x1c>
 800d382:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d384:	2b00      	cmp	r3, #0
 800d386:	dc01      	bgt.n	800d38c <__sflush_r+0x1c>
 800d388:	2000      	movs	r0, #0
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d38e:	2e00      	cmp	r6, #0
 800d390:	d0fa      	beq.n	800d388 <__sflush_r+0x18>
 800d392:	2300      	movs	r3, #0
 800d394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d398:	682f      	ldr	r7, [r5, #0]
 800d39a:	6a21      	ldr	r1, [r4, #32]
 800d39c:	602b      	str	r3, [r5, #0]
 800d39e:	d032      	beq.n	800d406 <__sflush_r+0x96>
 800d3a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	075a      	lsls	r2, r3, #29
 800d3a6:	d505      	bpl.n	800d3b4 <__sflush_r+0x44>
 800d3a8:	6863      	ldr	r3, [r4, #4]
 800d3aa:	1ac0      	subs	r0, r0, r3
 800d3ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3ae:	b10b      	cbz	r3, 800d3b4 <__sflush_r+0x44>
 800d3b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3b2:	1ac0      	subs	r0, r0, r3
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	6a21      	ldr	r1, [r4, #32]
 800d3be:	47b0      	blx	r6
 800d3c0:	1c43      	adds	r3, r0, #1
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	d106      	bne.n	800d3d4 <__sflush_r+0x64>
 800d3c6:	6829      	ldr	r1, [r5, #0]
 800d3c8:	291d      	cmp	r1, #29
 800d3ca:	d82b      	bhi.n	800d424 <__sflush_r+0xb4>
 800d3cc:	4a28      	ldr	r2, [pc, #160]	; (800d470 <__sflush_r+0x100>)
 800d3ce:	410a      	asrs	r2, r1
 800d3d0:	07d6      	lsls	r6, r2, #31
 800d3d2:	d427      	bmi.n	800d424 <__sflush_r+0xb4>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	6062      	str	r2, [r4, #4]
 800d3d8:	6922      	ldr	r2, [r4, #16]
 800d3da:	04d9      	lsls	r1, r3, #19
 800d3dc:	6022      	str	r2, [r4, #0]
 800d3de:	d504      	bpl.n	800d3ea <__sflush_r+0x7a>
 800d3e0:	1c42      	adds	r2, r0, #1
 800d3e2:	d101      	bne.n	800d3e8 <__sflush_r+0x78>
 800d3e4:	682b      	ldr	r3, [r5, #0]
 800d3e6:	b903      	cbnz	r3, 800d3ea <__sflush_r+0x7a>
 800d3e8:	6560      	str	r0, [r4, #84]	; 0x54
 800d3ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ec:	602f      	str	r7, [r5, #0]
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	d0ca      	beq.n	800d388 <__sflush_r+0x18>
 800d3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3f6:	4299      	cmp	r1, r3
 800d3f8:	d002      	beq.n	800d400 <__sflush_r+0x90>
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7ff fa96 	bl	800c92c <_free_r>
 800d400:	2000      	movs	r0, #0
 800d402:	6360      	str	r0, [r4, #52]	; 0x34
 800d404:	e7c1      	b.n	800d38a <__sflush_r+0x1a>
 800d406:	2301      	movs	r3, #1
 800d408:	4628      	mov	r0, r5
 800d40a:	47b0      	blx	r6
 800d40c:	1c41      	adds	r1, r0, #1
 800d40e:	d1c8      	bne.n	800d3a2 <__sflush_r+0x32>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d0c5      	beq.n	800d3a2 <__sflush_r+0x32>
 800d416:	2b1d      	cmp	r3, #29
 800d418:	d001      	beq.n	800d41e <__sflush_r+0xae>
 800d41a:	2b16      	cmp	r3, #22
 800d41c:	d101      	bne.n	800d422 <__sflush_r+0xb2>
 800d41e:	602f      	str	r7, [r5, #0]
 800d420:	e7b2      	b.n	800d388 <__sflush_r+0x18>
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d428:	81a3      	strh	r3, [r4, #12]
 800d42a:	e7ae      	b.n	800d38a <__sflush_r+0x1a>
 800d42c:	690f      	ldr	r7, [r1, #16]
 800d42e:	2f00      	cmp	r7, #0
 800d430:	d0aa      	beq.n	800d388 <__sflush_r+0x18>
 800d432:	0793      	lsls	r3, r2, #30
 800d434:	bf18      	it	ne
 800d436:	2300      	movne	r3, #0
 800d438:	680e      	ldr	r6, [r1, #0]
 800d43a:	bf08      	it	eq
 800d43c:	694b      	ldreq	r3, [r1, #20]
 800d43e:	1bf6      	subs	r6, r6, r7
 800d440:	600f      	str	r7, [r1, #0]
 800d442:	608b      	str	r3, [r1, #8]
 800d444:	2e00      	cmp	r6, #0
 800d446:	dd9f      	ble.n	800d388 <__sflush_r+0x18>
 800d448:	4633      	mov	r3, r6
 800d44a:	463a      	mov	r2, r7
 800d44c:	4628      	mov	r0, r5
 800d44e:	6a21      	ldr	r1, [r4, #32]
 800d450:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d454:	47e0      	blx	ip
 800d456:	2800      	cmp	r0, #0
 800d458:	dc06      	bgt.n	800d468 <__sflush_r+0xf8>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d464:	81a3      	strh	r3, [r4, #12]
 800d466:	e790      	b.n	800d38a <__sflush_r+0x1a>
 800d468:	4407      	add	r7, r0
 800d46a:	1a36      	subs	r6, r6, r0
 800d46c:	e7ea      	b.n	800d444 <__sflush_r+0xd4>
 800d46e:	bf00      	nop
 800d470:	dfbffffe 	.word	0xdfbffffe

0800d474 <_fflush_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	690b      	ldr	r3, [r1, #16]
 800d478:	4605      	mov	r5, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	b913      	cbnz	r3, 800d484 <_fflush_r+0x10>
 800d47e:	2500      	movs	r5, #0
 800d480:	4628      	mov	r0, r5
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	b118      	cbz	r0, 800d48e <_fflush_r+0x1a>
 800d486:	6a03      	ldr	r3, [r0, #32]
 800d488:	b90b      	cbnz	r3, 800d48e <_fflush_r+0x1a>
 800d48a:	f7ff f8df 	bl	800c64c <__sinit>
 800d48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0f3      	beq.n	800d47e <_fflush_r+0xa>
 800d496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d498:	07d0      	lsls	r0, r2, #31
 800d49a:	d404      	bmi.n	800d4a6 <_fflush_r+0x32>
 800d49c:	0599      	lsls	r1, r3, #22
 800d49e:	d402      	bmi.n	800d4a6 <_fflush_r+0x32>
 800d4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4a2:	f7ff fa2c 	bl	800c8fe <__retarget_lock_acquire_recursive>
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	f7ff ff61 	bl	800d370 <__sflush_r>
 800d4ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	07da      	lsls	r2, r3, #31
 800d4b4:	d4e4      	bmi.n	800d480 <_fflush_r+0xc>
 800d4b6:	89a3      	ldrh	r3, [r4, #12]
 800d4b8:	059b      	lsls	r3, r3, #22
 800d4ba:	d4e1      	bmi.n	800d480 <_fflush_r+0xc>
 800d4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4be:	f7ff fa1f 	bl	800c900 <__retarget_lock_release_recursive>
 800d4c2:	e7dd      	b.n	800d480 <_fflush_r+0xc>

0800d4c4 <__swbuf_r>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	460e      	mov	r6, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	b118      	cbz	r0, 800d4d6 <__swbuf_r+0x12>
 800d4ce:	6a03      	ldr	r3, [r0, #32]
 800d4d0:	b90b      	cbnz	r3, 800d4d6 <__swbuf_r+0x12>
 800d4d2:	f7ff f8bb 	bl	800c64c <__sinit>
 800d4d6:	69a3      	ldr	r3, [r4, #24]
 800d4d8:	60a3      	str	r3, [r4, #8]
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	071a      	lsls	r2, r3, #28
 800d4de:	d525      	bpl.n	800d52c <__swbuf_r+0x68>
 800d4e0:	6923      	ldr	r3, [r4, #16]
 800d4e2:	b31b      	cbz	r3, 800d52c <__swbuf_r+0x68>
 800d4e4:	6823      	ldr	r3, [r4, #0]
 800d4e6:	6922      	ldr	r2, [r4, #16]
 800d4e8:	b2f6      	uxtb	r6, r6
 800d4ea:	1a98      	subs	r0, r3, r2
 800d4ec:	6963      	ldr	r3, [r4, #20]
 800d4ee:	4637      	mov	r7, r6
 800d4f0:	4283      	cmp	r3, r0
 800d4f2:	dc04      	bgt.n	800d4fe <__swbuf_r+0x3a>
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f7ff ffbc 	bl	800d474 <_fflush_r>
 800d4fc:	b9e0      	cbnz	r0, 800d538 <__swbuf_r+0x74>
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	3b01      	subs	r3, #1
 800d502:	60a3      	str	r3, [r4, #8]
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	6022      	str	r2, [r4, #0]
 800d50a:	701e      	strb	r6, [r3, #0]
 800d50c:	6962      	ldr	r2, [r4, #20]
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	429a      	cmp	r2, r3
 800d512:	d004      	beq.n	800d51e <__swbuf_r+0x5a>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	07db      	lsls	r3, r3, #31
 800d518:	d506      	bpl.n	800d528 <__swbuf_r+0x64>
 800d51a:	2e0a      	cmp	r6, #10
 800d51c:	d104      	bne.n	800d528 <__swbuf_r+0x64>
 800d51e:	4621      	mov	r1, r4
 800d520:	4628      	mov	r0, r5
 800d522:	f7ff ffa7 	bl	800d474 <_fflush_r>
 800d526:	b938      	cbnz	r0, 800d538 <__swbuf_r+0x74>
 800d528:	4638      	mov	r0, r7
 800d52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d52c:	4621      	mov	r1, r4
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 f806 	bl	800d540 <__swsetup_r>
 800d534:	2800      	cmp	r0, #0
 800d536:	d0d5      	beq.n	800d4e4 <__swbuf_r+0x20>
 800d538:	f04f 37ff 	mov.w	r7, #4294967295
 800d53c:	e7f4      	b.n	800d528 <__swbuf_r+0x64>
	...

0800d540 <__swsetup_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <__swsetup_r+0xac>)
 800d544:	4605      	mov	r5, r0
 800d546:	6818      	ldr	r0, [r3, #0]
 800d548:	460c      	mov	r4, r1
 800d54a:	b118      	cbz	r0, 800d554 <__swsetup_r+0x14>
 800d54c:	6a03      	ldr	r3, [r0, #32]
 800d54e:	b90b      	cbnz	r3, 800d554 <__swsetup_r+0x14>
 800d550:	f7ff f87c 	bl	800c64c <__sinit>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d55a:	0718      	lsls	r0, r3, #28
 800d55c:	d422      	bmi.n	800d5a4 <__swsetup_r+0x64>
 800d55e:	06d9      	lsls	r1, r3, #27
 800d560:	d407      	bmi.n	800d572 <__swsetup_r+0x32>
 800d562:	2309      	movs	r3, #9
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d56a:	f04f 30ff 	mov.w	r0, #4294967295
 800d56e:	81a3      	strh	r3, [r4, #12]
 800d570:	e034      	b.n	800d5dc <__swsetup_r+0x9c>
 800d572:	0758      	lsls	r0, r3, #29
 800d574:	d512      	bpl.n	800d59c <__swsetup_r+0x5c>
 800d576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d578:	b141      	cbz	r1, 800d58c <__swsetup_r+0x4c>
 800d57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57e:	4299      	cmp	r1, r3
 800d580:	d002      	beq.n	800d588 <__swsetup_r+0x48>
 800d582:	4628      	mov	r0, r5
 800d584:	f7ff f9d2 	bl	800c92c <_free_r>
 800d588:	2300      	movs	r3, #0
 800d58a:	6363      	str	r3, [r4, #52]	; 0x34
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	2300      	movs	r3, #0
 800d596:	6063      	str	r3, [r4, #4]
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	6023      	str	r3, [r4, #0]
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	f043 0308 	orr.w	r3, r3, #8
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	b94b      	cbnz	r3, 800d5bc <__swsetup_r+0x7c>
 800d5a8:	89a3      	ldrh	r3, [r4, #12]
 800d5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b2:	d003      	beq.n	800d5bc <__swsetup_r+0x7c>
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 f8ea 	bl	800d790 <__smakebuf_r>
 800d5bc:	89a0      	ldrh	r0, [r4, #12]
 800d5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c2:	f010 0301 	ands.w	r3, r0, #1
 800d5c6:	d00a      	beq.n	800d5de <__swsetup_r+0x9e>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60a3      	str	r3, [r4, #8]
 800d5cc:	6963      	ldr	r3, [r4, #20]
 800d5ce:	425b      	negs	r3, r3
 800d5d0:	61a3      	str	r3, [r4, #24]
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	b943      	cbnz	r3, 800d5e8 <__swsetup_r+0xa8>
 800d5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5da:	d1c4      	bne.n	800d566 <__swsetup_r+0x26>
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	0781      	lsls	r1, r0, #30
 800d5e0:	bf58      	it	pl
 800d5e2:	6963      	ldrpl	r3, [r4, #20]
 800d5e4:	60a3      	str	r3, [r4, #8]
 800d5e6:	e7f4      	b.n	800d5d2 <__swsetup_r+0x92>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e7f7      	b.n	800d5dc <__swsetup_r+0x9c>
 800d5ec:	2000009c 	.word	0x2000009c

0800d5f0 <memmove>:
 800d5f0:	4288      	cmp	r0, r1
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	eb01 0402 	add.w	r4, r1, r2
 800d5f8:	d902      	bls.n	800d600 <memmove+0x10>
 800d5fa:	4284      	cmp	r4, r0
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	d807      	bhi.n	800d610 <memmove+0x20>
 800d600:	1e43      	subs	r3, r0, #1
 800d602:	42a1      	cmp	r1, r4
 800d604:	d008      	beq.n	800d618 <memmove+0x28>
 800d606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d60e:	e7f8      	b.n	800d602 <memmove+0x12>
 800d610:	4601      	mov	r1, r0
 800d612:	4402      	add	r2, r0
 800d614:	428a      	cmp	r2, r1
 800d616:	d100      	bne.n	800d61a <memmove+0x2a>
 800d618:	bd10      	pop	{r4, pc}
 800d61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d622:	e7f7      	b.n	800d614 <memmove+0x24>

0800d624 <_raise_r>:
 800d624:	291f      	cmp	r1, #31
 800d626:	b538      	push	{r3, r4, r5, lr}
 800d628:	4604      	mov	r4, r0
 800d62a:	460d      	mov	r5, r1
 800d62c:	d904      	bls.n	800d638 <_raise_r+0x14>
 800d62e:	2316      	movs	r3, #22
 800d630:	6003      	str	r3, [r0, #0]
 800d632:	f04f 30ff 	mov.w	r0, #4294967295
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d63a:	b112      	cbz	r2, 800d642 <_raise_r+0x1e>
 800d63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d640:	b94b      	cbnz	r3, 800d656 <_raise_r+0x32>
 800d642:	4620      	mov	r0, r4
 800d644:	f000 f830 	bl	800d6a8 <_getpid_r>
 800d648:	462a      	mov	r2, r5
 800d64a:	4601      	mov	r1, r0
 800d64c:	4620      	mov	r0, r4
 800d64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d652:	f000 b817 	b.w	800d684 <_kill_r>
 800d656:	2b01      	cmp	r3, #1
 800d658:	d00a      	beq.n	800d670 <_raise_r+0x4c>
 800d65a:	1c59      	adds	r1, r3, #1
 800d65c:	d103      	bne.n	800d666 <_raise_r+0x42>
 800d65e:	2316      	movs	r3, #22
 800d660:	6003      	str	r3, [r0, #0]
 800d662:	2001      	movs	r0, #1
 800d664:	e7e7      	b.n	800d636 <_raise_r+0x12>
 800d666:	2400      	movs	r4, #0
 800d668:	4628      	mov	r0, r5
 800d66a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d66e:	4798      	blx	r3
 800d670:	2000      	movs	r0, #0
 800d672:	e7e0      	b.n	800d636 <_raise_r+0x12>

0800d674 <raise>:
 800d674:	4b02      	ldr	r3, [pc, #8]	; (800d680 <raise+0xc>)
 800d676:	4601      	mov	r1, r0
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	f7ff bfd3 	b.w	800d624 <_raise_r>
 800d67e:	bf00      	nop
 800d680:	2000009c 	.word	0x2000009c

0800d684 <_kill_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	2300      	movs	r3, #0
 800d688:	4d06      	ldr	r5, [pc, #24]	; (800d6a4 <_kill_r+0x20>)
 800d68a:	4604      	mov	r4, r0
 800d68c:	4608      	mov	r0, r1
 800d68e:	4611      	mov	r1, r2
 800d690:	602b      	str	r3, [r5, #0]
 800d692:	f7fa fcea 	bl	800806a <_kill>
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	d102      	bne.n	800d6a0 <_kill_r+0x1c>
 800d69a:	682b      	ldr	r3, [r5, #0]
 800d69c:	b103      	cbz	r3, 800d6a0 <_kill_r+0x1c>
 800d69e:	6023      	str	r3, [r4, #0]
 800d6a0:	bd38      	pop	{r3, r4, r5, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20000a74 	.word	0x20000a74

0800d6a8 <_getpid_r>:
 800d6a8:	f7fa bcd8 	b.w	800805c <_getpid>

0800d6ac <_sbrk_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4d05      	ldr	r5, [pc, #20]	; (800d6c8 <_sbrk_r+0x1c>)
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	f7fa fd5a 	bl	8008170 <_sbrk>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_sbrk_r+0x1a>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_sbrk_r+0x1a>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	20000a74 	.word	0x20000a74

0800d6cc <memchr>:
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	b510      	push	{r4, lr}
 800d6d0:	b2c9      	uxtb	r1, r1
 800d6d2:	4402      	add	r2, r0
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	d101      	bne.n	800d6de <memchr+0x12>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e003      	b.n	800d6e6 <memchr+0x1a>
 800d6de:	7804      	ldrb	r4, [r0, #0]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	428c      	cmp	r4, r1
 800d6e4:	d1f6      	bne.n	800d6d4 <memchr+0x8>
 800d6e6:	bd10      	pop	{r4, pc}

0800d6e8 <_realloc_r>:
 800d6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	460e      	mov	r6, r1
 800d6f2:	b921      	cbnz	r1, 800d6fe <_realloc_r+0x16>
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fa:	f7ff b97f 	b.w	800c9fc <_malloc_r>
 800d6fe:	b92a      	cbnz	r2, 800d70c <_realloc_r+0x24>
 800d700:	f7ff f914 	bl	800c92c <_free_r>
 800d704:	4625      	mov	r5, r4
 800d706:	4628      	mov	r0, r5
 800d708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d70c:	f000 f89e 	bl	800d84c <_malloc_usable_size_r>
 800d710:	4284      	cmp	r4, r0
 800d712:	4607      	mov	r7, r0
 800d714:	d802      	bhi.n	800d71c <_realloc_r+0x34>
 800d716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d71a:	d812      	bhi.n	800d742 <_realloc_r+0x5a>
 800d71c:	4621      	mov	r1, r4
 800d71e:	4640      	mov	r0, r8
 800d720:	f7ff f96c 	bl	800c9fc <_malloc_r>
 800d724:	4605      	mov	r5, r0
 800d726:	2800      	cmp	r0, #0
 800d728:	d0ed      	beq.n	800d706 <_realloc_r+0x1e>
 800d72a:	42bc      	cmp	r4, r7
 800d72c:	4622      	mov	r2, r4
 800d72e:	4631      	mov	r1, r6
 800d730:	bf28      	it	cs
 800d732:	463a      	movcs	r2, r7
 800d734:	f7ff f8e5 	bl	800c902 <memcpy>
 800d738:	4631      	mov	r1, r6
 800d73a:	4640      	mov	r0, r8
 800d73c:	f7ff f8f6 	bl	800c92c <_free_r>
 800d740:	e7e1      	b.n	800d706 <_realloc_r+0x1e>
 800d742:	4635      	mov	r5, r6
 800d744:	e7df      	b.n	800d706 <_realloc_r+0x1e>

0800d746 <__swhatbuf_r>:
 800d746:	b570      	push	{r4, r5, r6, lr}
 800d748:	460c      	mov	r4, r1
 800d74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d74e:	4615      	mov	r5, r2
 800d750:	2900      	cmp	r1, #0
 800d752:	461e      	mov	r6, r3
 800d754:	b096      	sub	sp, #88	; 0x58
 800d756:	da0c      	bge.n	800d772 <__swhatbuf_r+0x2c>
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	2100      	movs	r1, #0
 800d75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d760:	bf0c      	ite	eq
 800d762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d766:	2340      	movne	r3, #64	; 0x40
 800d768:	2000      	movs	r0, #0
 800d76a:	6031      	str	r1, [r6, #0]
 800d76c:	602b      	str	r3, [r5, #0]
 800d76e:	b016      	add	sp, #88	; 0x58
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	466a      	mov	r2, sp
 800d774:	f000 f848 	bl	800d808 <_fstat_r>
 800d778:	2800      	cmp	r0, #0
 800d77a:	dbed      	blt.n	800d758 <__swhatbuf_r+0x12>
 800d77c:	9901      	ldr	r1, [sp, #4]
 800d77e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d786:	4259      	negs	r1, r3
 800d788:	4159      	adcs	r1, r3
 800d78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d78e:	e7eb      	b.n	800d768 <__swhatbuf_r+0x22>

0800d790 <__smakebuf_r>:
 800d790:	898b      	ldrh	r3, [r1, #12]
 800d792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d794:	079d      	lsls	r5, r3, #30
 800d796:	4606      	mov	r6, r0
 800d798:	460c      	mov	r4, r1
 800d79a:	d507      	bpl.n	800d7ac <__smakebuf_r+0x1c>
 800d79c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	6123      	str	r3, [r4, #16]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	6163      	str	r3, [r4, #20]
 800d7a8:	b002      	add	sp, #8
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	466a      	mov	r2, sp
 800d7ae:	ab01      	add	r3, sp, #4
 800d7b0:	f7ff ffc9 	bl	800d746 <__swhatbuf_r>
 800d7b4:	9900      	ldr	r1, [sp, #0]
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f7ff f91f 	bl	800c9fc <_malloc_r>
 800d7be:	b948      	cbnz	r0, 800d7d4 <__smakebuf_r+0x44>
 800d7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d4ef      	bmi.n	800d7a8 <__smakebuf_r+0x18>
 800d7c8:	f023 0303 	bic.w	r3, r3, #3
 800d7cc:	f043 0302 	orr.w	r3, r3, #2
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	e7e3      	b.n	800d79c <__smakebuf_r+0xc>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	6020      	str	r0, [r4, #0]
 800d7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	9b00      	ldr	r3, [sp, #0]
 800d7e0:	6120      	str	r0, [r4, #16]
 800d7e2:	6163      	str	r3, [r4, #20]
 800d7e4:	9b01      	ldr	r3, [sp, #4]
 800d7e6:	b15b      	cbz	r3, 800d800 <__smakebuf_r+0x70>
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ee:	f000 f81d 	bl	800d82c <_isatty_r>
 800d7f2:	b128      	cbz	r0, 800d800 <__smakebuf_r+0x70>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	f023 0303 	bic.w	r3, r3, #3
 800d7fa:	f043 0301 	orr.w	r3, r3, #1
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	89a3      	ldrh	r3, [r4, #12]
 800d802:	431d      	orrs	r5, r3
 800d804:	81a5      	strh	r5, [r4, #12]
 800d806:	e7cf      	b.n	800d7a8 <__smakebuf_r+0x18>

0800d808 <_fstat_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	2300      	movs	r3, #0
 800d80c:	4d06      	ldr	r5, [pc, #24]	; (800d828 <_fstat_r+0x20>)
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	4611      	mov	r1, r2
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f7fa fc86 	bl	8008126 <_fstat>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	d102      	bne.n	800d824 <_fstat_r+0x1c>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	b103      	cbz	r3, 800d824 <_fstat_r+0x1c>
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	bd38      	pop	{r3, r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	20000a74 	.word	0x20000a74

0800d82c <_isatty_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	2300      	movs	r3, #0
 800d830:	4d05      	ldr	r5, [pc, #20]	; (800d848 <_isatty_r+0x1c>)
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	f7fa fc84 	bl	8008144 <_isatty>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_isatty_r+0x1a>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_isatty_r+0x1a>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	20000a74 	.word	0x20000a74

0800d84c <_malloc_usable_size_r>:
 800d84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d850:	1f18      	subs	r0, r3, #4
 800d852:	2b00      	cmp	r3, #0
 800d854:	bfbc      	itt	lt
 800d856:	580b      	ldrlt	r3, [r1, r0]
 800d858:	18c0      	addlt	r0, r0, r3
 800d85a:	4770      	bx	lr

0800d85c <_init>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

0800d868 <_fini>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr
