
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000050  080047c8  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080047c8  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009568  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000259e  00000000  00000000  00029620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000753  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018093  00000000  00000000  0002ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b980  00000000  00000000  00044d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008446c  00000000  00000000  00050706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002648  00000000  00000000  000d4b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d71bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	08004604 	.word	0x08004604

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	08004604 	.word	0x08004604

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000454:	f3bf 8f4f 	dsb	sy
}
 8000458:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <__NVIC_SystemReset+0x24>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000462:	4904      	ldr	r1, [pc, #16]	; (8000474 <__NVIC_SystemReset+0x24>)
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <__NVIC_SystemReset+0x28>)
 8000466:	4313      	orrs	r3, r2
 8000468:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800046a:	f3bf 8f4f 	dsb	sy
}
 800046e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <__NVIC_SystemReset+0x20>
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	05fa0004 	.word	0x05fa0004

0800047c <BL_u32ReadAddressData>:
static  uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static  uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
struct AES_ctx ctx_fw;
static Bitmask bm;
//**************************Include***************************//
uint32_t BL_u32ReadAddressData(uint32_t address){
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
	...

08000498 <BL_voidSetConfigLoRa>:
// Set default baudrate in bootloader
void BL_voidSetConfigLoRa(){
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 800049e:	2310      	movs	r3, #16
 80004a0:	9305      	str	r3, [sp, #20]
 80004a2:	2300      	movs	r3, #0
 80004a4:	9304      	str	r3, [sp, #16]
 80004a6:	2300      	movs	r3, #0
 80004a8:	9303      	str	r3, [sp, #12]
 80004aa:	2307      	movs	r3, #7
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	2306      	movs	r3, #6
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	a305      	add	r3, pc, #20	; (adr r3, 80004cc <BL_voidSetConfigLoRa+0x34>)
 80004b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <BL_voidSetConfigLoRa+0x30>)
 80004be:	f001 fa50 	bl	8001962 <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200003ec 	.word	0x200003ec
 80004cc:	19cf0e40 	.word	0x19cf0e40
 80004d0:	00000000 	.word	0x00000000

080004d4 <BL_Check_CRC>:
//**************************Function Define***************************//
uint8_t BL_Check_CRC(uint32_t CRC_expect , uint8_t *buffer_check){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck = BL_INITIALIZE_WITH_ZERO;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
	RCC->AHBENR |=0x40;
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <BL_Check_CRC+0x90>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <BL_Check_CRC+0x90>)
 80004e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ec:	6153      	str	r3, [r2, #20]
	/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
	CRC->CR = 0x01;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <BL_Check_CRC+0x94>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	609a      	str	r2, [r3, #8]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	e024      	b.n	8000544 <BL_Check_CRC+0x70>
		/* Calculate CRC */
		Local_u32PlayloadCheck = (buffer_check[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_check[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	3303      	adds	r3, #3
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	061a      	lsls	r2, r3, #24
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	3302      	adds	r3, #2
 800050e:	6839      	ldr	r1, [r7, #0]
 8000510:	440b      	add	r3, r1
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	041b      	lsls	r3, r3, #16
 8000516:	431a      	orrs	r2, r3
								|(buffer_check[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer_check[Local_u8Count*4] <<SHIFT_0_BIT);
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	3301      	adds	r3, #1
 800051e:	6839      	ldr	r1, [r7, #0]
 8000520:	440b      	add	r3, r1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	4313      	orrs	r3, r2
 8000528:	7bfa      	ldrb	r2, [r7, #15]
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	4611      	mov	r1, r2
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	440a      	add	r2, r1
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	4313      	orrs	r3, r2
		Local_u32PlayloadCheck = (buffer_check[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer_check[Local_u8Count*4+2] <<SHIFT_16_BIT)
 8000536:	60bb      	str	r3, [r7, #8]
		CRC->DR  = Local_u32PlayloadCheck;
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <BL_Check_CRC+0x94>)
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	6013      	str	r3, [r2, #0]
	for(uint8_t Local_u8Count = 0U ; Local_u8Count < 16U ; Local_u8Count++){
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b0f      	cmp	r3, #15
 8000548:	d9d7      	bls.n	80004fa <BL_Check_CRC+0x26>
	}
	if((CRC->DR) == CRC_expect ){
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <BL_Check_CRC+0x94>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	d101      	bne.n	8000558 <BL_Check_CRC+0x84>
				return BL_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	e000      	b.n	800055a <BL_Check_CRC+0x86>
	}
	return BL_CHKS_ERROR;
 8000558:	2303      	movs	r3, #3
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000
 8000568:	40023000 	.word	0x40023000

0800056c <BL_Calculate_CRC>:

uint32_t BL_Calculate_CRC(uint8_t *buffer , uint32_t lenght){
 800056c:	b480      	push	{r7}
 800056e:	b087      	sub	sp, #28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32PlayloadCheck = BL_INITIALIZE_WITH_ZERO;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
	uint32_t Local_u32CRC;
		RCC->AHBENR |=0x40;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <BL_Calculate_CRC+0x8c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <BL_Calculate_CRC+0x8c>)
 8000580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000584:	6153      	str	r3, [r2, #20]
		/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
		CRC->CR = 0x01;
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <BL_Calculate_CRC+0x90>)
 8000588:	2201      	movs	r2, #1
 800058a:	609a      	str	r2, [r3, #8]
		for(uint8_t Local_u8Count = 0U ; Local_u8Count < lenght/32 ; Local_u8Count++){
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]
 8000590:	e024      	b.n	80005dc <BL_Calculate_CRC+0x70>
			/* Calculate CRC */
			Local_u32PlayloadCheck = (buffer[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u8Count*4+2] <<SHIFT_16_BIT)
 8000592:	7dfb      	ldrb	r3, [r7, #23]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	3303      	adds	r3, #3
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	061a      	lsls	r2, r3, #24
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	3302      	adds	r3, #2
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	440b      	add	r3, r1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	431a      	orrs	r2, r3
									|(buffer[Local_u8Count*4+1] <<SHIFT_8_BIT)|(buffer[Local_u8Count*4] <<SHIFT_0_BIT);
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	3301      	adds	r3, #1
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	440b      	add	r3, r1
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	4313      	orrs	r3, r2
 80005c0:	7dfa      	ldrb	r2, [r7, #23]
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4611      	mov	r1, r2
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	440a      	add	r2, r1
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	4313      	orrs	r3, r2
			Local_u32PlayloadCheck = (buffer[Local_u8Count*4+3] <<SHIFT_24_BIT)|(buffer[Local_u8Count*4+2] <<SHIFT_16_BIT)
 80005ce:	613b      	str	r3, [r7, #16]
			CRC->DR  = Local_u32PlayloadCheck;
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <BL_Calculate_CRC+0x90>)
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	6013      	str	r3, [r2, #0]
		for(uint8_t Local_u8Count = 0U ; Local_u8Count < lenght/32 ; Local_u8Count++){
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	3301      	adds	r3, #1
 80005da:	75fb      	strb	r3, [r7, #23]
 80005dc:	7dfa      	ldrb	r2, [r7, #23]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	095b      	lsrs	r3, r3, #5
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d3d5      	bcc.n	8000592 <BL_Calculate_CRC+0x26>
		}
		Local_u32CRC = CRC->DR;
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <BL_Calculate_CRC+0x90>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	60fb      	str	r3, [r7, #12]
		return Local_u32CRC;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40023000 	.word	0x40023000

08000600 <BL_Read_Address_Node>:
uint32_t BL_Read_Address_Node(){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(FLAG_INDICATE_ADDRESS_NODE));
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <BL_Read_Address_Node+0x18>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	607b      	str	r3, [r7, #4]
	return Local_u32AddressData;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	0801fc04 	.word	0x0801fc04

0800061c <BL_voidCopyImageToActiveRegion>:
void BL_voidCopyImageToActiveRegion(void){
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32BackupSizeInWord 	= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 800062e:	4830      	ldr	r0, [pc, #192]	; (80006f0 <BL_voidCopyImageToActiveRegion+0xd4>)
 8000630:	f7ff ff24 	bl	800047c <BL_u32ReadAddressData>
 8000634:	61f8      	str	r0, [r7, #28]
	uint32_t Local_u32CRCActiveBank     = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS);
 8000636:	482f      	ldr	r0, [pc, #188]	; (80006f4 <BL_voidCopyImageToActiveRegion+0xd8>)
 8000638:	f7ff ff20 	bl	800047c <BL_u32ReadAddressData>
 800063c:	61b8      	str	r0, [r7, #24]
	//set active img to corrupt make sure install again
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_CORRUPTED );
 800063e:	f06f 010b 	mvn.w	r1, #11
 8000642:	482d      	ldr	r0, [pc, #180]	; (80006f8 <BL_voidCopyImageToActiveRegion+0xdc>)
 8000644:	f000 fa6c 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
	uint32_t* Local_u32BackupImagePointer = (uint32_t*)DOWNLOAD_BANK_START_ADDRESS;
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <BL_voidCopyImageToActiveRegion+0xe0>)
 800064a:	617b      	str	r3, [r7, #20]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000656:	2301      	movs	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BANKFIRST_IMAGE;
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <BL_voidCopyImageToActiveRegion+0xe4>)
 800065c:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 800065e:	232c      	movs	r3, #44	; 0x2c
 8000660:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000662:	f002 fc19 	bl	8002e98 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000666:	463a      	mov	r2, r7
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fcfb 	bl	8003068 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000672:	f002 fc37 	bl	8002ee4 <HAL_FLASH_Lock>

	//Copy data from download to active region.
	HAL_FLASH_Unlock();
 8000676:	f002 fc0f 	bl	8002e98 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 800067a:	2300      	movs	r3, #0
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800067e:	e01d      	b.n	80006bc <BL_voidCopyImageToActiveRegion+0xa0>
	{
		Local_u32ActiveDataAddress = (BANKFIRST_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000686:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
		Local_u32BackupDataAddress = (DOWNLOAD_BANK_START_ADDRESS + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 800068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000690:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000694:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	623b      	str	r3, [r7, #32]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	2200      	movs	r2, #0
 80006a6:	461c      	mov	r4, r3
 80006a8:	4615      	mov	r5, r2
 80006aa:	4622      	mov	r2, r4
 80006ac:	462b      	mov	r3, r5
 80006ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006b0:	2002      	movs	r0, #2
 80006b2:	f002 fb81 	bl	8002db8 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	3301      	adds	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3dd      	bcc.n	8000680 <BL_voidCopyImageToActiveRegion+0x64>
	}
		HAL_FLASH_Lock();
 80006c4:	f002 fc0e 	bl	8002ee4 <HAL_FLASH_Lock>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <BL_voidCopyImageToActiveRegion+0xe8>)
 80006d0:	f000 fa26 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS , Local_u32CRCActiveBank);
 80006d4:	69b9      	ldr	r1, [r7, #24]
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <BL_voidCopyImageToActiveRegion+0xec>)
 80006d8:	f000 fa22 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 80006dc:	f06f 010e 	mvn.w	r1, #14
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <BL_voidCopyImageToActiveRegion+0xdc>)
 80006e2:	f000 fa1d 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	0801fc38 	.word	0x0801fc38
 80006f4:	0801fc3c 	.word	0x0801fc3c
 80006f8:	0801fc14 	.word	0x0801fc14
 80006fc:	08010000 	.word	0x08010000
 8000700:	08005000 	.word	0x08005000
 8000704:	0801fc18 	.word	0x0801fc18
 8000708:	0801fc1c 	.word	0x0801fc1c

0800070c <BL_voidBootLoader_Init>:
void BL_voidBootLoader_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	//BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER,BL_BRANCHING_FLAG_SET);
	// Read Branching Request Update Flag.
	// UI init boot
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <BL_voidBootLoader_Init+0x44>)
 8000714:	f7ff feb2 	bl	800047c <BL_u32ReadAddressData>
 8000718:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000720:	d106      	bne.n	8000730 <BL_voidBootLoader_Init+0x24>
	{
		//Initialize MAC ADDRESS
		BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ADDRESS_NODE , SENSOR_ADDRESS_MAC);
 8000722:	490c      	ldr	r1, [pc, #48]	; (8000754 <BL_voidBootLoader_Init+0x48>)
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <BL_voidBootLoader_Init+0x4c>)
 8000726:	f000 f9fb 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 800072a:	f000 f97d 	bl	8000a28 <BL_voidCheckActiveRegion>
		// Application  not exited and backup image not exit
		BL_voidEraseRestoreHeaderPage(START_OF_FLAG_REGION , BL_BRANCHING_FLAG_SET);
		// Reset bootloader
		NVIC_SystemReset();
	}
}
 800072e:	e00b      	b.n	8000748 <BL_voidBootLoader_Init+0x3c>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <BL_voidBootLoader_Init+0x30>
	    BL_voidJumpToBootloader();
 8000736:	f000 f9e5 	bl	8000b04 <BL_voidJumpToBootloader>
}
 800073a:	e005      	b.n	8000748 <BL_voidBootLoader_Init+0x3c>
		BL_voidEraseRestoreHeaderPage(START_OF_FLAG_REGION , BL_BRANCHING_FLAG_SET);
 800073c:	2100      	movs	r1, #0
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <BL_voidBootLoader_Init+0x44>)
 8000740:	f000 f9ee 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
		NVIC_SystemReset();
 8000744:	f7ff fe84 	bl	8000450 <__NVIC_SystemReset>
}
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0801fc00 	.word	0x0801fc00
 8000754:	26011def 	.word	0x26011def
 8000758:	0801fc04 	.word	0x0801fc04

0800075c <BL_CheckSize>:
uint8_t BL_CheckSize(uint32_t size_app){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	return( size_app <= APP_ACTIVE_SIZE ) ? BL_OK : BL_SIZE_ERROR;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800076a:	d801      	bhi.n	8000770 <BL_CheckSize+0x14>
 800076c:	2300      	movs	r3, #0
 800076e:	e000      	b.n	8000772 <BL_CheckSize+0x16>
 8000770:	2302      	movs	r3, #2
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <BL_VerifyCheckSum>:
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK: if calculated checksum matches the application checksum
 * @retval BL_CHKS_ERROR: upon checksum mismatch or when ::USE_CHECKSUM is
 *         disabled
 */
uint8_t BL_VerifyCheckSum(uint32_t u32Size_of_Image , uint32_t CRC_CODE, uint32_t Active_Addr_Indicate){
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	#if(USE_CHECKSUM)
		// Enable Clock for CRC
		// set the mark for the active addr
		RCC->AHBENR |=0x40;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <BL_VerifyCheckSum+0x64>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <BL_VerifyCheckSum+0x64>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	6153      	str	r3, [r2, #20]
		u32Size_of_Image = u32Size_of_Image/4;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
		/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
		CRC->CR = 0x01;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <BL_VerifyCheckSum+0x68>)
 800079c:	2201      	movs	r2, #1
 800079e:	609a      	str	r2, [r3, #8]
		for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00b      	b.n	80007be <BL_VerifyCheckSum+0x42>
			/* Calculate CRC */
			CRC->DR  = BL_u32ReadAddressData(Active_Addr_Indicate);
 80007a6:	4c0f      	ldr	r4, [pc, #60]	; (80007e4 <BL_VerifyCheckSum+0x68>)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fe67 	bl	800047c <BL_u32ReadAddressData>
 80007ae:	4603      	mov	r3, r0
 80007b0:	6023      	str	r3, [r4, #0]
			// Recall calculate for CRC IMG bank first
			Active_Addr_Indicate+=0x04u;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3304      	adds	r3, #4
 80007b6:	607b      	str	r3, [r7, #4]
		for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d3ef      	bcc.n	80007a6 <BL_VerifyCheckSum+0x2a>
			}
	#endif
		// Check Valid Image
		if((CRC->DR) == CRC_CODE ){
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <BL_VerifyCheckSum+0x68>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <BL_VerifyCheckSum+0x58>
			return BL_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e000      	b.n	80007d6 <BL_VerifyCheckSum+0x5a>
		}
		return BL_CHKS_ERROR;
 80007d4:	2303      	movs	r3, #3

}
 80007d6:	4618      	mov	r0, r3
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40023000 	.word	0x40023000

080007e8 <BL_voidEraseBank>:

HAL_StatusTypeDef BL_voidEraseBank(uint32_t Address_Flash)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;
	if (Address_Flash == BR_SET_IMAGE_NOT_EXISTING ){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f6:	d101      	bne.n	80007fc <BL_voidEraseBank+0x14>
		Address_Flash = BANKFIRST_IMAGE;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <BL_voidEraseBank+0x4c>)
 80007fa:	607b      	str	r3, [r7, #4]
	}
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = Address_Flash;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	44;
 8000808:	232c      	movs	r3, #44	; 0x2c
 800080a:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 800080c:	f002 fb44 	bl	8002e98 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000810:	f107 0208 	add.w	r2, r7, #8
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fc24 	bl	8003068 <HAL_FLASHEx_Erase>
 8000820:	4603      	mov	r3, r0
 8000822:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8000824:	f002 fb5e 	bl	8002ee4 <HAL_FLASH_Lock>
	return Local_retVal;
 8000828:	7ffb      	ldrb	r3, [r7, #31]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	08005000 	.word	0x08005000

08000838 <initBitMask>:

void initBitMask(Bitmask *bm){
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (NUM_PACKETS_MAX+7) / 8; i++) {
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e007      	b.n	8000856 <initBitMask+0x1e>
		bm->bitmask[i] = 0;
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (NUM_PACKETS_MAX+7) / 8; i++) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b57      	cmp	r3, #87	; 0x57
 800085a:	d9f4      	bls.n	8000846 <initBitMask+0xe>
	}
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <setBit_BitMask>:

void setBit_BitMask(Bitmask *bm , uint16_t packetNumber){
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
	uint8_t index = (packetNumber-1) / 8;
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	3b01      	subs	r3, #1
 8000878:	2b00      	cmp	r3, #0
 800087a:	da00      	bge.n	800087e <setBit_BitMask+0x16>
 800087c:	3307      	adds	r3, #7
 800087e:	10db      	asrs	r3, r3, #3
 8000880:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (packetNumber-1) % 8;
 8000882:	887b      	ldrh	r3, [r7, #2]
 8000884:	3b01      	subs	r3, #1
 8000886:	425a      	negs	r2, r3
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	f002 0207 	and.w	r2, r2, #7
 8000890:	bf58      	it	pl
 8000892:	4253      	negpl	r3, r2
 8000894:	73bb      	strb	r3, [r7, #14]
	bm->bitmask[index] |= (1 << offset);
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	b25a      	sxtb	r2, r3
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b25a      	sxtb	r2, r3
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	b2d1      	uxtb	r1, r2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	54d1      	strb	r1, [r2, r3]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <BL_voidCheckImgCorrectBankFirst>:
void BL_voidCheckImgCorrectBankFirst(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_BANKFIRST_REGION_ADDRESS);
 80008c6:	4828      	ldr	r0, [pc, #160]	; (8000968 <BL_voidCheckImgCorrectBankFirst+0xa8>)
 80008c8:	f7ff fdd8 	bl	800047c <BL_u32ReadAddressData>
 80008cc:	6178      	str	r0, [r7, #20]
	uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS);
 80008ce:	4827      	ldr	r0, [pc, #156]	; (800096c <BL_voidCheckImgCorrectBankFirst+0xac>)
 80008d0:	f7ff fdd4 	bl	800047c <BL_u32ReadAddressData>
 80008d4:	6138      	str	r0, [r7, #16]
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80008d6:	f06f 030c 	mvn.w	r3, #12
 80008da:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32SizeOfImageActive = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <BL_voidCheckImgCorrectBankFirst+0xb0>)
 80008de:	f7ff fdcd 	bl	800047c <BL_u32ReadAddressData>
 80008e2:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32ActiveRegion      = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 80008e4:	4823      	ldr	r0, [pc, #140]	; (8000974 <BL_voidCheckImgCorrectBankFirst+0xb4>)
 80008e6:	f7ff fdc9 	bl	800047c <BL_u32ReadAddressData>
 80008ea:	6078      	str	r0, [r7, #4]
	if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE  )
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f113 0f0f 	cmn.w	r3, #15
 80008f2:	d114      	bne.n	800091e <BL_voidCheckImgCorrectBankFirst+0x5e>
		{
			//Verify CheckSum
	    	if(BL_VerifyCheckSum(Local_u32SizeOfImageActive, Local_u32ReceivedCRC ,FIRST_IMAGE_START_ADDRESS ) == BL_OK){
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <BL_voidCheckImgCorrectBankFirst+0xb8>)
 80008f6:	6939      	ldr	r1, [r7, #16]
 80008f8:	68b8      	ldr	r0, [r7, #8]
 80008fa:	f7ff ff3f 	bl	800077c <BL_VerifyCheckSum>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d106      	bne.n	8000912 <BL_voidCheckImgCorrectBankFirst+0x52>
	    		BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS, BANKFIRST_IMAGE);
 8000904:	491c      	ldr	r1, [pc, #112]	; (8000978 <BL_voidCheckImgCorrectBankFirst+0xb8>)
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <BL_voidCheckImgCorrectBankFirst+0xb4>)
 8000908:	f000 f90a 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
	    		BL_voidJumpToActiveRegion();
 800090c:	f000 f8cc 	bl	8000aa8 <BL_voidJumpToActiveRegion>
		}
	    else
	    {
	        // Do nothing
	    }
}
 8000910:	e025      	b.n	800095e <BL_voidCheckImgCorrectBankFirst+0x9e>
	    		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_CORRUPTED);
 8000912:	f06f 010b 	mvn.w	r1, #11
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <BL_voidCheckImgCorrectBankFirst+0xa8>)
 8000918:	f000 f902 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
}
 800091c:	e01f      	b.n	800095e <BL_voidCheckImgCorrectBankFirst+0x9e>
	else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f113 0f0c 	cmn.w	r3, #12
 8000924:	d003      	beq.n	800092e <BL_voidCheckImgCorrectBankFirst+0x6e>
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092c:	d117      	bne.n	800095e <BL_voidCheckImgCorrectBankFirst+0x9e>
	    	Local_u32BackupStatus    = BL_32CheckBankSecondRegion();
 800092e:	f000 f89b 	bl	8000a68 <BL_32CheckBankSecondRegion>
 8000932:	60f8      	str	r0, [r7, #12]
			if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f113 0f0e 	cmn.w	r3, #14
 800093a:	d106      	bne.n	800094a <BL_voidCheckImgCorrectBankFirst+0x8a>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKSECOND_IMAGE);
 800093c:	490f      	ldr	r1, [pc, #60]	; (800097c <BL_voidCheckImgCorrectBankFirst+0xbc>)
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <BL_voidCheckImgCorrectBankFirst+0xb4>)
 8000940:	f000 f8ee 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				BL_voidJumpToActiveRegion();
 8000944:	f000 f8b0 	bl	8000aa8 <BL_voidJumpToActiveRegion>
}
 8000948:	e009      	b.n	800095e <BL_voidCheckImgCorrectBankFirst+0x9e>
			else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f113 0f0c 	cmn.w	r3, #12
 8000950:	d003      	beq.n	800095a <BL_voidCheckImgCorrectBankFirst+0x9a>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d101      	bne.n	800095e <BL_voidCheckImgCorrectBankFirst+0x9e>
				BL_voidSetBranchingFlagAndMakeSWR();
 800095a:	f000 f977 	bl	8000c4c <BL_voidSetBranchingFlagAndMakeSWR>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	0801fc14 	.word	0x0801fc14
 800096c:	0801fc1c 	.word	0x0801fc1c
 8000970:	0801fc18 	.word	0x0801fc18
 8000974:	0801fc44 	.word	0x0801fc44
 8000978:	08005000 	.word	0x08005000
 800097c:	08010000 	.word	0x08010000

08000980 <BL_voidCheckImgCorrectBankSecond>:
void BL_voidCheckImgCorrectBankSecond(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_BANKSECOND_REGION_ADDRESS);
 8000986:	4821      	ldr	r0, [pc, #132]	; (8000a0c <BL_voidCheckImgCorrectBankSecond+0x8c>)
 8000988:	f7ff fd78 	bl	800047c <BL_u32ReadAddressData>
 800098c:	6178      	str	r0, [r7, #20]
	uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS);
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <BL_voidCheckImgCorrectBankSecond+0x90>)
 8000990:	f7ff fd74 	bl	800047c <BL_u32ReadAddressData>
 8000994:	6138      	str	r0, [r7, #16]
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 8000996:	f06f 030c 	mvn.w	r3, #12
 800099a:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32SizeOfImageActive = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 800099c:	481d      	ldr	r0, [pc, #116]	; (8000a14 <BL_voidCheckImgCorrectBankSecond+0x94>)
 800099e:	f7ff fd6d 	bl	800047c <BL_u32ReadAddressData>
 80009a2:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32ActiveRegion      = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 80009a4:	481c      	ldr	r0, [pc, #112]	; (8000a18 <BL_voidCheckImgCorrectBankSecond+0x98>)
 80009a6:	f7ff fd69 	bl	800047c <BL_u32ReadAddressData>
 80009aa:	6078      	str	r0, [r7, #4]
	if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f113 0f0f 	cmn.w	r3, #15
 80009b2:	d11c      	bne.n	80009ee <BL_voidCheckImgCorrectBankSecond+0x6e>
	{
		//Verify CheckSum
		if(BL_VerifyCheckSum(Local_u32SizeOfImageActive, Local_u32ReceivedCRC , DOWNLOAD_BANK_START_ADDRESS) == BL_OK ){
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <BL_voidCheckImgCorrectBankSecond+0x9c>)
 80009b6:	6939      	ldr	r1, [r7, #16]
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	f7ff fedf 	bl	800077c <BL_VerifyCheckSum>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d108      	bne.n	80009d6 <BL_voidCheckImgCorrectBankSecond+0x56>
			BL_voidCopyImageToActiveRegion();
 80009c4:	f7ff fe2a 	bl	800061c <BL_voidCopyImageToActiveRegion>
			BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS, BANKFIRST_IMAGE);
 80009c8:	4915      	ldr	r1, [pc, #84]	; (8000a20 <BL_voidCheckImgCorrectBankSecond+0xa0>)
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <BL_voidCheckImgCorrectBankSecond+0x98>)
 80009cc:	f000 f8a8 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			BL_voidMakeSoftWareReset();
 80009d0:	f000 fc58 	bl	8001284 <BL_voidMakeSoftWareReset>
	else
	{
		// Error Code

	}
}
 80009d4:	e015      	b.n	8000a02 <BL_voidCheckImgCorrectBankSecond+0x82>
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS , BR_SET_IMAGE_CORRUPTED);
 80009d6:	f06f 010b 	mvn.w	r1, #11
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <BL_voidCheckImgCorrectBankSecond+0x8c>)
 80009dc:	f000 f8a0 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_BRANCHING_FLAG_SET);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4810      	ldr	r0, [pc, #64]	; (8000a24 <BL_voidCheckImgCorrectBankSecond+0xa4>)
 80009e4:	f000 f89c 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			BL_voidMakeSoftWareReset();
 80009e8:	f000 fc4c 	bl	8001284 <BL_voidMakeSoftWareReset>
}
 80009ec:	e009      	b.n	8000a02 <BL_voidCheckImgCorrectBankSecond+0x82>
	else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f113 0f0c 	cmn.w	r3, #12
 80009f4:	d003      	beq.n	80009fe <BL_voidCheckImgCorrectBankSecond+0x7e>
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d101      	bne.n	8000a02 <BL_voidCheckImgCorrectBankSecond+0x82>
		BL_voidSetBranchingFlagAndMakeSWR();
 80009fe:	f000 f925 	bl	8000c4c <BL_voidSetBranchingFlagAndMakeSWR>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0801fc34 	.word	0x0801fc34
 8000a10:	0801fc3c 	.word	0x0801fc3c
 8000a14:	0801fc38 	.word	0x0801fc38
 8000a18:	0801fc44 	.word	0x0801fc44
 8000a1c:	08010000 	.word	0x08010000
 8000a20:	08005000 	.word	0x08005000
 8000a24:	0801fc00 	.word	0x0801fc00

08000a28 <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveRegionRunning = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <BL_voidCheckActiveRegion+0x38>)
 8000a30:	f7ff fd24 	bl	800047c <BL_u32ReadAddressData>
 8000a34:	6078      	str	r0, [r7, #4]
	switch(Local_u32ActiveRegionRunning)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <BL_voidCheckActiveRegion+0x3c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d004      	beq.n	8000a48 <BL_voidCheckActiveRegion+0x20>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d003      	beq.n	8000a4e <BL_voidCheckActiveRegion+0x26>
			break;
		case BR_SET_IMAGE_NOT_EXISTING:
			BL_voidCheckImgCorrectBankSecond();
		default :
			/*ERROR*/
			break;
 8000a46:	e004      	b.n	8000a52 <BL_voidCheckActiveRegion+0x2a>
			BL_voidCheckImgCorrectBankFirst();
 8000a48:	f7ff ff3a 	bl	80008c0 <BL_voidCheckImgCorrectBankFirst>
			break;
 8000a4c:	e002      	b.n	8000a54 <BL_voidCheckActiveRegion+0x2c>
			BL_voidCheckImgCorrectBankSecond();
 8000a4e:	f7ff ff97 	bl	8000980 <BL_voidCheckImgCorrectBankSecond>
			break;
 8000a52:	bf00      	nop

	}
	// Reset SW
	BL_voidSetBranchingFlagAndMakeSWR();
 8000a54:	f000 f8fa 	bl	8000c4c <BL_voidSetBranchingFlagAndMakeSWR>

}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	0801fc44 	.word	0x0801fc44
 8000a64:	08005000 	.word	0x08005000

08000a68 <BL_32CheckBankSecondRegion>:
	}
	return Local_u32BackupStatus;
}

uint32_t BL_32CheckBankSecondRegion(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BANKSECOND_REGION_ADDRESS);
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <BL_32CheckBankSecondRegion+0x3c>)
 8000a70:	f7ff fd04 	bl	800047c <BL_u32ReadAddressData>
 8000a74:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_ACTIVE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f113 0f0f 	cmn.w	r3, #15
 8000a7c:	d102      	bne.n	8000a84 <BL_32CheckBankSecondRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 8000a7e:	f06f 030d 	mvn.w	r3, #13
 8000a82:	e00b      	b.n	8000a9c <BL_32CheckBankSecondRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f113 0f0c 	cmn.w	r3, #12
 8000a8a:	d003      	beq.n	8000a94 <BL_32CheckBankSecondRegion+0x2c>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a92:	d102      	bne.n	8000a9a <BL_32CheckBankSecondRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000a94:	f06f 030b 	mvn.w	r3, #11
 8000a98:	e000      	b.n	8000a9c <BL_32CheckBankSecondRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 8000a9a:	687b      	ldr	r3, [r7, #4]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0801fc34 	.word	0x0801fc34

08000aa8 <BL_voidJumpToActiveRegion>:


void BL_voidJumpToActiveRegion(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageAddress = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <BL_voidJumpToActiveRegion+0x48>)
 8000ab0:	f7ff fce4 	bl	800047c <BL_u32ReadAddressData>
 8000ab4:	6078      	str	r0, [r7, #4]
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <BL_voidJumpToActiveRegion+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000abc:	f001 ffae 	bl	8002a1c <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <BL_voidJumpToActiveRegion+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
	//uint32_t Local_u32ActiveImageAddress  = *(Application_t*)(Local_u32ActiveImageAddress + 4) ;
	Application_t AddressToCall = 0 ;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
	AddressToCall = *(Application_t*)(Local_u32ActiveImageAddress + 4); // Point to Reset Handler
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3304      	adds	r3, #4
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	603b      	str	r3, [r7, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ad2:	f3bf 8f5f 	dmb	sy
}
 8000ad6:	bf00      	nop
	//AddressToCall = Local_u32ActiveImageAddress;
	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = BANKFIRST_IMAGE; //We relocate vector table to the sector 1 of Active Region
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <BL_voidJumpToActiveRegion+0x54>)
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <BL_voidJumpToActiveRegion+0x58>)
 8000adc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ade:	f3bf 8f4f 	dsb	sy
}
 8000ae2:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after 	relocating VTOR */

	AddressToCall();
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	4798      	blx	r3
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	0801fc44 	.word	0x0801fc44
 8000af4:	e000e010 	.word	0xe000e010
 8000af8:	40021000 	.word	0x40021000
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	08005000 	.word	0x08005000

08000b04 <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_BRANCHING_FLAG_RESET);
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <BL_voidJumpToBootloader+0x18>)
 8000b0e:	f000 f807 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
	BL_voidUpdateHeaders();
 8000b12:	f000 f8a5 	bl	8000c60 <BL_voidUpdateHeaders>
	//BL_voidReceiveUpdate();
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0801fc00 	.word	0x0801fc00

08000b20 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b24:	b0b2      	sub	sp, #200	; 0xc8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000b40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b44:	e031      	b.n	8000baa <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8000b46:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2300      	moveq	r3, #0
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d017      	beq.n	8000ba0 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 8000b70:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	33c8      	adds	r3, #200	; 0xc8
 8000b78:	443b      	add	r3, r7
 8000b7a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000b7e:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 8000b82:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000b86:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	33c8      	adds	r3, #200	; 0xc8
 8000b90:	443b      	add	r3, r7
 8000b92:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 8000b96:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 8000ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8000baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <BL_voidEraseRestoreHeaderPage+0x128>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d9c8      	bls.n	8000b46 <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000bbe:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000bc4:	f002 f968 	bl	8002e98 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000bc8:	f107 020c 	add.w	r2, r7, #12
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fa48 	bl	8003068 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000bde:	e01a      	b.n	8000c16 <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000be0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	33c8      	adds	r3, #200	; 0xc8
 8000be8:	443b      	add	r3, r7
 8000bea:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8000bee:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	33c8      	adds	r3, #200	; 0xc8
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4698      	mov	r8, r3
 8000c00:	4691      	mov	r9, r2
 8000c02:	4642      	mov	r2, r8
 8000c04:	464b      	mov	r3, r9
 8000c06:	2002      	movs	r0, #2
 8000c08:	f002 f8d6 	bl	8002db8 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000c0c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000c10:	3301      	adds	r3, #1
 8000c12:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000c16:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8000c1a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3de      	bcc.n	8000be0 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2200      	movs	r2, #0
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	462b      	mov	r3, r5
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2002      	movs	r0, #2
 8000c32:	f002 f8c1 	bl	8002db8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000c36:	f002 f955 	bl	8002ee4 <HAL_FLASH_Lock>
}
 8000c3a:	bf00      	nop
 8000c3c:	37c8      	adds	r7, #200	; 0xc8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c44:	0801fc00 	.word	0x0801fc00
 8000c48:	0801fc4f 	.word	0x0801fc4f

08000c4c <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4802      	ldr	r0, [pc, #8]	; (8000c5c <BL_voidSetBranchingFlagAndMakeSWR+0x10>)
 8000c54:	f7ff ff64 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	//BL_voidMakeSoftWareReset();
	NVIC_SystemReset();
 8000c58:	f7ff fbfa 	bl	8000450 <__NVIC_SystemReset>
 8000c5c:	0801fc00 	.word	0x0801fc00

08000c60 <BL_voidUpdateHeaders>:
}


/*Update size of Image in header*/
void BL_voidUpdateHeaders(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af06      	add	r7, sp, #24
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32CRCImage 					=BL_INITIALIZE_WITH_ZERO;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
	uint32_t Local_u32VerImage 					= BL_INITIALIZE_WITH_ZERO;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
	uint32_t Local_counter 						= BL_INITIALIZE_WITH_ZERO;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
	//Structure LoRa Transmit
	BL_voidSetConfigLoRa();
 8000c76:	f7ff fc0f 	bl	8000498 <BL_voidSetConfigLoRa>
	// get Config Synchronize
	/* MCU response MCU_ENTER_FBL to GW and expect get resp as GW_SYNC_CONFIG*/
	while(1){
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f002 f881 	bl	8002d82 <HAL_NVIC_DisableIRQ>
		LORA_IF_Stransmit_Response(&SX1278, buffer_resp, ret, ADDR_NODE_1, MCU_ACCEPT_REQUEST);
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <BL_voidUpdateHeaders+0x188>)
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	2305      	movs	r3, #5
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	4958      	ldr	r1, [pc, #352]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000c8c:	4858      	ldr	r0, [pc, #352]	; (8000df0 <BL_voidUpdateHeaders+0x190>)
 8000c8e:	f001 f907 	bl	8001ea0 <LORA_IF_Stransmit_Response>
		//Change State In hear
		gl_State_BL = STATE_INITBOOT;
 8000c92:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <BL_voidUpdateHeaders+0x194>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 8000c98:	4b57      	ldr	r3, [pc, #348]	; (8000df8 <BL_voidUpdateHeaders+0x198>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f002 f861 	bl	8002d66 <HAL_NVIC_EnableIRQ>
		ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES , 10000);
 8000ca4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4851      	ldr	r0, [pc, #324]	; (8000df0 <BL_voidUpdateHeaders+0x190>)
 8000cac:	f000 fd12 	bl	80016d4 <SX1278_LoRaEntryRx>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <BL_voidUpdateHeaders+0x188>)
 8000cb6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 8000cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cbc:	f001 ff18 	bl	8002af0 <HAL_Delay>
		// Wait to get GW CONFIG
		// Request LoRa stransmit to get size of code
		if(gl_State_BL == STATE_RECEIVE_HEADER)
 8000cc0:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <BL_voidUpdateHeaders+0x194>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d1d8      	bne.n	8000c7a <BL_voidUpdateHeaders+0x1a>
		{
			//Send response to GW
			LORA_IF_TransferData_Frame(&SX1278, (uint8_t*)  buffer_req, ret, MAX_TIME_OUT, SIZE_BUFFER_16BYTES, MCU_RECEIVED_CONFIG);
 8000cc8:	4b47      	ldr	r3, [pc, #284]	; (8000de8 <BL_voidUpdateHeaders+0x188>)
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	2321      	movs	r3, #33	; 0x21
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cd8:	4948      	ldr	r1, [pc, #288]	; (8000dfc <BL_voidUpdateHeaders+0x19c>)
 8000cda:	4845      	ldr	r0, [pc, #276]	; (8000df0 <BL_voidUpdateHeaders+0x190>)
 8000cdc:	f000 ffe4 	bl	8001ca8 <LORA_IF_TransferData_Frame>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f002 f84e 	bl	8002d82 <HAL_NVIC_DisableIRQ>
			//Set Parameter and Configurate for LoRa
			u8SF= buffer_resp[3];
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000ce8:	78da      	ldrb	r2, [r3, #3]
 8000cea:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <BL_voidUpdateHeaders+0x1a0>)
 8000cec:	701a      	strb	r2, [r3, #0]
			u8BW= buffer_resp[4];
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000cf0:	791a      	ldrb	r2, [r3, #4]
 8000cf2:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <BL_voidUpdateHeaders+0x1a4>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			u8CR= buffer_resp[5];
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000cf8:	795a      	ldrb	r2, [r3, #5]
 8000cfa:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <BL_voidUpdateHeaders+0x1a8>)
 8000cfc:	701a      	strb	r2, [r3, #0]
			/*Response Goto Programming and Send Update Request */
			SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, u8SF,
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <BL_voidUpdateHeaders+0x1a0>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <BL_voidUpdateHeaders+0x1a4>)
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	4940      	ldr	r1, [pc, #256]	; (8000e08 <BL_voidUpdateHeaders+0x1a8>)
 8000d08:	7809      	ldrb	r1, [r1, #0]
 8000d0a:	2080      	movs	r0, #128	; 0x80
 8000d0c:	9005      	str	r0, [sp, #20]
 8000d0e:	2000      	movs	r0, #0
 8000d10:	9004      	str	r0, [sp, #16]
 8000d12:	9103      	str	r1, [sp, #12]
 8000d14:	9202      	str	r2, [sp, #8]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	a330      	add	r3, pc, #192	; (adr r3, 8000de0 <BL_voidUpdateHeaders+0x180>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	4833      	ldr	r0, [pc, #204]	; (8000df0 <BL_voidUpdateHeaders+0x190>)
 8000d24:	f000 fe1d 	bl	8001962 <SX1278_init>
									u8BW, u8CR, SX1278_LORA_CRC_EN, 128);
			//HAL_NVIC_EnableIRQ(EXTI1_IRQn);
			// change to receive buffer 80 bytes
			//ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_80BYTES , 10000);
			/*Get the size code */
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d2a:	7a5b      	ldrb	r3, [r3, #9]
 8000d2c:	061a      	lsls	r2, r3, #24
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	431a      	orrs	r2, r3
					(buffer_resp[7] << SHIFT_8_BIT) | (buffer_resp[6] << SHIFT_0_BIT);
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d38:	79db      	ldrb	r3, [r3, #7]
 8000d3a:	021b      	lsls	r3, r3, #8
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000d3c:	4313      	orrs	r3, r2
					(buffer_resp[7] << SHIFT_8_BIT) | (buffer_resp[6] << SHIFT_0_BIT);
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d40:	7992      	ldrb	r2, [r2, #6]
 8000d42:	4313      	orrs	r3, r2
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000d44:	60fb      	str	r3, [r7, #12]

			/*Get the Version Img*/
			Local_u32VerImage = (buffer_resp[11]<<SHIFT_8_BIT | buffer_resp[10] << SHIFT_0_BIT );
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d48:	7adb      	ldrb	r3, [r3, #11]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d4e:	7a92      	ldrb	r2, [r2, #10]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
			/*Get the CRC */
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d56:	7bdb      	ldrb	r3, [r3, #15]
 8000d58:	061a      	lsls	r2, r3, #24
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d5c:	7b9b      	ldrb	r3, [r3, #14]
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	431a      	orrs	r2, r3
					(buffer_resp[13] << SHIFT_8_BIT) | (buffer_resp[12] << SHIFT_0_BIT);
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d64:	7b5b      	ldrb	r3, [r3, #13]
 8000d66:	021b      	lsls	r3, r3, #8
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000d68:	4313      	orrs	r3, r2
					(buffer_resp[13] << SHIFT_8_BIT) | (buffer_resp[12] << SHIFT_0_BIT);
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d6c:	7b12      	ldrb	r2, [r2, #12]
 8000d6e:	4313      	orrs	r3, r2
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000d70:	60bb      	str	r3, [r7, #8]
			// Get total packets
			//gl_totalPacket  = (buffer_resp[11]<<SHIFT_8_BIT) | (buffer_resp[10] <<SHIFT_0_BIT);
			/* MCU response MCU_ENTER_FBL to GW and expect get resp as GW_SYNC_CONFIG*/

			if(BL_CheckSize(Local_u32ImageSizeInBytes) == BL_CHKS_ERROR){
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fcf2 	bl	800075c <BL_CheckSize>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d10e      	bne.n	8000d9c <BL_voidUpdateHeaders+0x13c>
				LORA_IF_TransferData_Frame(&SX1278 , (uint8_t*) buffer_resp , ret , MAX_TIME_OUT ,SIZE_BUFFER_16BYTES , BL_LARGE_SIZE );
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <BL_voidUpdateHeaders+0x188>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	233f      	movs	r3, #63	; 0x3f
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	2310      	movs	r3, #16
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d8e:	4917      	ldr	r1, [pc, #92]	; (8000dec <BL_voidUpdateHeaders+0x18c>)
 8000d90:	4817      	ldr	r0, [pc, #92]	; (8000df0 <BL_voidUpdateHeaders+0x190>)
 8000d92:	f000 ff89 	bl	8001ca8 <LORA_IF_TransferData_Frame>
				BL_voidSetBranchingFlagAndMakeSWR();
 8000d96:	f7ff ff59 	bl	8000c4c <BL_voidSetBranchingFlagAndMakeSWR>
 8000d9a:	e013      	b.n	8000dc4 <BL_voidUpdateHeaders+0x164>
			}
			else{
				// Repare for downloading to bank download
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,Local_u32VerImage );
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	481b      	ldr	r0, [pc, #108]	; (8000e0c <BL_voidUpdateHeaders+0x1ac>)
 8000da0:	f7ff febe 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				//Set CRC
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS,Local_u32CRCImage);
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <BL_voidUpdateHeaders+0x1b0>)
 8000da8:	f7ff feba 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				//set Bank Second IMG Corrupted - if flashing success update img correct
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000dac:	f06f 010b 	mvn.w	r1, #11
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <BL_voidUpdateHeaders+0x1b4>)
 8000db2:	f7ff feb5 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				//update imgsize
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	4817      	ldr	r0, [pc, #92]	; (8000e18 <BL_voidUpdateHeaders+0x1b8>)
 8000dba:	f7ff feb1 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				BL_voidEraseBank(BANKSECOND_IMAGE);
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <BL_voidUpdateHeaders+0x1bc>)
 8000dc0:	f7ff fd12 	bl	80007e8 <BL_voidEraseBank>
				// update for bank second
				}
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKFIRST_IMAGE);
 8000dc4:	4916      	ldr	r1, [pc, #88]	; (8000e20 <BL_voidUpdateHeaders+0x1c0>)
 8000dc6:	4817      	ldr	r0, [pc, #92]	; (8000e24 <BL_voidUpdateHeaders+0x1c4>)
 8000dc8:	f7ff feaa 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <BL_voidUpdateHeaders+0x1c8>)
 8000dd2:	f7ff fea5 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
				BL_voidReceiveUpdate();
 8000dd6:	f000 f82b 	bl	8000e30 <BL_voidReceiveUpdate>
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000dda:	e74e      	b.n	8000c7a <BL_voidUpdateHeaders+0x1a>
 8000ddc:	f3af 8000 	nop.w
 8000de0:	19de5080 	.word	0x19de5080
 8000de4:	00000000 	.word	0x00000000
 8000de8:	20000198 	.word	0x20000198
 8000dec:	20000180 	.word	0x20000180
 8000df0:	200003ec 	.word	0x200003ec
 8000df4:	20000199 	.word	0x20000199
 8000df8:	40010400 	.word	0x40010400
 8000dfc:	2000006c 	.word	0x2000006c
 8000e00:	20000192 	.word	0x20000192
 8000e04:	20000193 	.word	0x20000193
 8000e08:	20000194 	.word	0x20000194
 8000e0c:	0801fc30 	.word	0x0801fc30
 8000e10:	0801fc3c 	.word	0x0801fc3c
 8000e14:	0801fc34 	.word	0x0801fc34
 8000e18:	0801fc38 	.word	0x0801fc38
 8000e1c:	08010000 	.word	0x08010000
 8000e20:	08005000 	.word	0x08005000
 8000e24:	0801fc44 	.word	0x0801fc44
 8000e28:	0801fc00 	.word	0x0801fc00
 8000e2c:	00000000 	.word	0x00000000

08000e30 <BL_voidReceiveUpdate>:
			}
	}
}

void BL_voidReceiveUpdate(void)
{
 8000e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e34:	b09c      	sub	sp, #112	; 0x70
 8000e36:	af06      	add	r7, sp, #24
	uint32_t Local_u32ExpectActiveAddr 							= BL_INITIALIZE_WITH_ZERO;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t Local_u32OffsetVector_H							= BL_INITIALIZE_WITH_ZERO;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t Local_u32OffsetVector_L							= BL_INITIALIZE_WITH_ZERO;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Local_u32HighByteDataReceive  						= BL_INITIALIZE_WITH_ZERO;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t Local_u32LowByteDataReceive  						= BL_INITIALIZE_WITH_ZERO;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t Local_u32PageError;
	uint32_t Local_u32InactiveImageAddressCounter_Base			= BL_INITIALIZE_WITH_ZERO;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Local_u32InactiveImageAddressCounter 				= BL_INITIALIZE_WITH_ZERO;
 8000e50:	2300      	movs	r3, #0
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
	Local_u16index_fragment							  	        = BL_INITIALIZE_WITH_ZERO;
 8000e54:	4ba0      	ldr	r3, [pc, #640]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
	uint16_t  Local_u16index_fragment_previous					= BL_INITIALIZE_WITH_ZERO;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  Local_u16counter_packet_loss						= BL_INITIALIZE_WITH_ZERO;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	863b      	strh	r3, [r7, #48]	; 0x30
	uint32_t local_u32_CRC_bitmask								= BL_INITIALIZE_WITH_ZERO;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32ActiveRegionRunning                       = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000e66:	489d      	ldr	r0, [pc, #628]	; (80010dc <BL_voidReceiveUpdate+0x2ac>)
 8000e68:	f7ff fb08 	bl	800047c <BL_u32ReadAddressData>
 8000e6c:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t local_unicast_addr									= BL_Read_Address_Node();
 8000e6e:	f7ff fbc7 	bl	8000600 <BL_Read_Address_Node>
 8000e72:	6278      	str	r0, [r7, #36]	; 0x24
	uint16_t Local_u16MaxPacket 								= BL_INITIALIZE_WITH_ZERO;
 8000e74:	2300      	movs	r3, #0
 8000e76:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t local_totalPacket									=BL_INITIALIZE_WITH_ZERO;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	843b      	strh	r3, [r7, #32]
	uint32_t local_u32CRC_fragment_firmware						= BL_INITIALIZE_WITH_ZERO;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	//Get the info from bank 2
	Local_u32SizeOfCode 								= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 8000e80:	4897      	ldr	r0, [pc, #604]	; (80010e0 <BL_voidReceiveUpdate+0x2b0>)
 8000e82:	f7ff fafb 	bl	800047c <BL_u32ReadAddressData>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a96      	ldr	r2, [pc, #600]	; (80010e4 <BL_voidReceiveUpdate+0x2b4>)
 8000e8a:	6013      	str	r3, [r2, #0]
	Local_u32InactiveImageAddressCounter_Base               = DOWNLOAD_BANK_START_ADDRESS;
 8000e8c:	4b96      	ldr	r3, [pc, #600]	; (80010e8 <BL_voidReceiveUpdate+0x2b8>)
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
	Local_u32ExpectActiveAddr 								= FIRST_IMAGE_START_ADDRESS;
 8000e90:	4b96      	ldr	r3, [pc, #600]	; (80010ec <BL_voidReceiveUpdate+0x2bc>)
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t Local_Flag 										=	BL_INITIALIZE_WITH_ZERO;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
	//Loop to receive code update
	memset((uint8_t*) buffer_mark_packet_loss ,0xff , 96 );
 8000e98:	2260      	movs	r2, #96	; 0x60
 8000e9a:	21ff      	movs	r1, #255	; 0xff
 8000e9c:	4894      	ldr	r0, [pc, #592]	; (80010f0 <BL_voidReceiveUpdate+0x2c0>)
 8000e9e:	f003 fb77 	bl	8004590 <memset>
	local_totalPacket = (uint16_t)((Local_u32SizeOfCode + 64 -1)  /64);
 8000ea2:	4b90      	ldr	r3, [pc, #576]	; (80010e4 <BL_voidReceiveUpdate+0x2b4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	333f      	adds	r3, #63	; 0x3f
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	843b      	strh	r3, [r7, #32]


	Local_u16MaxPacket = local_totalPacket;
 8000eac:	8c3b      	ldrh	r3, [r7, #32]
 8000eae:	847b      	strh	r3, [r7, #34]	; 0x22
	// Init bitmask
	initBitMask(&bm);
 8000eb0:	4890      	ldr	r0, [pc, #576]	; (80010f4 <BL_voidReceiveUpdate+0x2c4>)
 8000eb2:	f7ff fcc1 	bl	8000838 <initBitMask>
	while(local_totalPacket>=0 && local_totalPacket != 0xFFFF )
 8000eb6:	e16f      	b.n	8001198 <BL_voidReceiveUpdate+0x368>
	{
		/*Initial in the first time start up speed*/
		if(Local_u16index_fragment == 0)
 8000eb8:	4b87      	ldr	r3, [pc, #540]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d114      	bne.n	8000eea <BL_voidReceiveUpdate+0xba>
			SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, u8SF,
 8000ec0:	4b8d      	ldr	r3, [pc, #564]	; (80010f8 <BL_voidReceiveUpdate+0x2c8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4a8d      	ldr	r2, [pc, #564]	; (80010fc <BL_voidReceiveUpdate+0x2cc>)
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	498d      	ldr	r1, [pc, #564]	; (8001100 <BL_voidReceiveUpdate+0x2d0>)
 8000eca:	7809      	ldrb	r1, [r1, #0]
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	9005      	str	r0, [sp, #20]
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	9004      	str	r0, [sp, #16]
 8000ed4:	9103      	str	r1, [sp, #12]
 8000ed6:	9202      	str	r2, [sp, #8]
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	a37c      	add	r3, pc, #496	; (adr r3, 80010d0 <BL_voidReceiveUpdate+0x2a0>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	4887      	ldr	r0, [pc, #540]	; (8001104 <BL_voidReceiveUpdate+0x2d4>)
 8000ee6:	f000 fd3c 	bl	8001962 <SX1278_init>
												u8BW, u8CR, SX1278_LORA_CRC_EN, 128);
		AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8000eea:	4a87      	ldr	r2, [pc, #540]	; (8001108 <BL_voidReceiveUpdate+0x2d8>)
 8000eec:	4987      	ldr	r1, [pc, #540]	; (800110c <BL_voidReceiveUpdate+0x2dc>)
 8000eee:	4888      	ldr	r0, [pc, #544]	; (8001110 <BL_voidReceiveUpdate+0x2e0>)
 8000ef0:	f001 f904 	bl	80020fc <AES_init_ctx_iv>
		memset((uint8_t*)buffer_packet , 0xff , 80);
 8000ef4:	2250      	movs	r2, #80	; 0x50
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	4886      	ldr	r0, [pc, #536]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000efa:	f003 fb49 	bl	8004590 <memset>
		//Receive code update Fragment firmware
		Local_u16index_fragment = LORA_IF_GetFragment_Firmware(&SX1278,(uint8_t*) buffer_packet,(uint8_t*) buffer_flashing_data,
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	4a85      	ldr	r2, [pc, #532]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000f02:	4984      	ldr	r1, [pc, #528]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f04:	487f      	ldr	r0, [pc, #508]	; (8001104 <BL_voidReceiveUpdate+0x2d4>)
 8000f06:	f000 fe37 	bl	8001b78 <LORA_IF_GetFragment_Firmware>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b72      	ldr	r3, [pc, #456]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f10:	801a      	strh	r2, [r3, #0]
				&Local_Flag );
		/*Get CRC firmware*/
		local_u32CRC_fragment_firmware = (buffer_packet[8] << SHIFT_24_BIT)|(buffer_packet[7] << SHIFT_16_BIT)
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f14:	7a1b      	ldrb	r3, [r3, #8]
 8000f16:	061a      	lsls	r2, r3, #24
 8000f18:	4b7e      	ldr	r3, [pc, #504]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f1a:	79db      	ldrb	r3, [r3, #7]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
										|(buffer_packet[6] << SHIFT_8_BIT)|(buffer_packet[5] << SHIFT_0_BIT);
 8000f20:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f22:	799b      	ldrb	r3, [r3, #6]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	4313      	orrs	r3, r2
 8000f28:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f2a:	7952      	ldrb	r2, [r2, #5]
 8000f2c:	4313      	orrs	r3, r2
		local_u32CRC_fragment_firmware = (buffer_packet[8] << SHIFT_24_BIT)|(buffer_packet[7] << SHIFT_16_BIT)
 8000f2e:	61fb      	str	r3, [r7, #28]
		// Get RSSI && SNR
		if(Local_u16index_fragment == GW_SEND_DONE){
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <BL_voidReceiveUpdate+0x110>
			BL_voidFinishBootLoader();
 8000f3c:	f000 f940 	bl	80011c0 <BL_voidFinishBootLoader>
		}
//		gl_RSSI = SX1278_RSSI_LoRa(&SX1278);
//		gl_SNR  = SX1278_SNR(&SX1278);
		if(Local_u16index_fragment == 0){
 8000f40:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10e      	bne.n	8000f66 <BL_voidReceiveUpdate+0x136>
			BL_voidSetConfigLoRa();
 8000f48:	f7ff faa6 	bl	8000498 <BL_voidSetConfigLoRa>
			LORA_IF_TransferData_Frame(&SX1278, (uint8_t*)  buffer_req, ret, MAX_TIME_OUT, SIZE_BUFFER_16BYTES, MCU_RECEIVED_CONFIG);
 8000f4c:	4b73      	ldr	r3, [pc, #460]	; (800111c <BL_voidReceiveUpdate+0x2ec>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	2321      	movs	r3, #33	; 0x21
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2310      	movs	r3, #16
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f5c:	4970      	ldr	r1, [pc, #448]	; (8001120 <BL_voidReceiveUpdate+0x2f0>)
 8000f5e:	4869      	ldr	r0, [pc, #420]	; (8001104 <BL_voidReceiveUpdate+0x2d4>)
 8000f60:	f000 fea2 	bl	8001ca8 <LORA_IF_TransferData_Frame>
 8000f64:	e0a1      	b.n	80010aa <BL_voidReceiveUpdate+0x27a>
		}
		else if (local_totalPacket >0 && Local_u16index_fragment != 0 && Local_u16index_fragment <= Local_u16MaxPacket)
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 809e 	beq.w	80010aa <BL_voidReceiveUpdate+0x27a>
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8099 	beq.w	80010aa <BL_voidReceiveUpdate+0x27a>
 8000f78:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	f0c0 8093 	bcc.w	80010aa <BL_voidReceiveUpdate+0x27a>
		{
						// CHECK CRC
			copy_Array_BL((uint8_t*) buffer_flashing_data ,(uint8_t*) buffer_packet, 64);
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	4963      	ldr	r1, [pc, #396]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 8000f88:	4863      	ldr	r0, [pc, #396]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000f8a:	f001 fc3a 	bl	8002802 <copy_Array_BL>
			if(BL_Check_CRC(local_u32CRC_fragment_firmware, (uint8_t*)buffer_flashing_data) == BL_OK){
 8000f8e:	4962      	ldr	r1, [pc, #392]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f7ff fa9f 	bl	80004d4 <BL_Check_CRC>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d17c      	bne.n	8001096 <BL_voidReceiveUpdate+0x266>
				// Build bitMask for checking Lost Packet
				// set the position packet recieved
				setBit_BitMask(&bm,Local_u16index_fragment );
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4854      	ldr	r0, [pc, #336]	; (80010f4 <BL_voidReceiveUpdate+0x2c4>)
 8000fa4:	f7ff fc60 	bl	8000868 <setBit_BitMask>
				Local_u32InactiveImageAddressCounter = Local_u32InactiveImageAddressCounter_Base +(Local_u16index_fragment-1)*64;
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	019b      	lsls	r3, r3, #6
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb4:	4413      	add	r3, r2
 8000fb6:	657b      	str	r3, [r7, #84]	; 0x54
				//Encrypt packet
				//for(uint8_t local_counter_Encrypt = Local_u8index_fragment_previous ;local_counter_Encrypt< Local_u8index_fragment ;  local_counter_Encrypt++)
				//AES_CTR_xcrypt_buffer(&ctx_fw, (uint8_t*) buffer_flashing_data, 112);
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbc:	4859      	ldr	r0, [pc, #356]	; (8001124 <BL_voidReceiveUpdate+0x2f4>)
 8000fbe:	f002 faae 	bl	800351e <HAL_GPIO_TogglePin>
				for(uint8_t i = 0 ; i <8 ; i++){
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000fc8:	e051      	b.n	800106e <BL_voidReceiveUpdate+0x23e>
					uint8_t byte_shift = (8*i);
 8000fca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	76fb      	strb	r3, [r7, #27]
					Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	3307      	adds	r3, #7
 8000fd6:	4a50      	ldr	r2, [pc, #320]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	061a      	lsls	r2, r3, #24
 8000fdc:	7efb      	ldrb	r3, [r7, #27]
 8000fde:	3306      	adds	r3, #6
 8000fe0:	494d      	ldr	r1, [pc, #308]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000fe2:	5ccb      	ldrb	r3, [r1, r3]
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	431a      	orrs	r2, r3
																	 | (buffer_flashing_data[5+byte_shift] << SHIFT_8_BIT)  | (buffer_flashing_data[4+byte_shift] << SHIFT_0_BIT);
 8000fe8:	7efb      	ldrb	r3, [r7, #27]
 8000fea:	3305      	adds	r3, #5
 8000fec:	494a      	ldr	r1, [pc, #296]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000fee:	5ccb      	ldrb	r3, [r1, r3]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	7efa      	ldrb	r2, [r7, #27]
 8000ff6:	3204      	adds	r2, #4
 8000ff8:	4947      	ldr	r1, [pc, #284]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8000ffa:	5c8a      	ldrb	r2, [r1, r2]
 8000ffc:	4313      	orrs	r3, r2
					Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
					Local_u32LowByteDataReceive = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	3303      	adds	r3, #3
 8001004:	4a44      	ldr	r2, [pc, #272]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	061a      	lsls	r2, r3, #24
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	3302      	adds	r3, #2
 800100e:	4942      	ldr	r1, [pc, #264]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8001010:	5ccb      	ldrb	r3, [r1, r3]
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	431a      	orrs	r2, r3
																	| (buffer_flashing_data[1+byte_shift] << SHIFT_8_BIT)  | (buffer_flashing_data[0+byte_shift] << SHIFT_0_BIT);
 8001016:	7efb      	ldrb	r3, [r7, #27]
 8001018:	3301      	adds	r3, #1
 800101a:	493f      	ldr	r1, [pc, #252]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 800101c:	5ccb      	ldrb	r3, [r1, r3]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	4313      	orrs	r3, r2
 8001022:	7efa      	ldrb	r2, [r7, #27]
 8001024:	493c      	ldr	r1, [pc, #240]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 8001026:	5c8a      	ldrb	r2, [r1, r2]
 8001028:	4313      	orrs	r3, r2
					Local_u32LowByteDataReceive = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
					HAL_FLASH_Unlock(); //Unlocks the flash memory
 800102c:	f001 ff34 	bl	8002e98 <HAL_FLASH_Unlock>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8001030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001032:	2200      	movs	r2, #0
 8001034:	461c      	mov	r4, r3
 8001036:	4615      	mov	r5, r2
 8001038:	4622      	mov	r2, r4
 800103a:	462b      	mov	r3, r5
 800103c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800103e:	2002      	movs	r0, #2
 8001040:	f001 feba 	bl	8002db8 <HAL_FLASH_Program>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8001044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001046:	1d19      	adds	r1, r3, #4
 8001048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104a:	2200      	movs	r2, #0
 800104c:	4698      	mov	r8, r3
 800104e:	4691      	mov	r9, r2
 8001050:	4642      	mov	r2, r8
 8001052:	464b      	mov	r3, r9
 8001054:	2002      	movs	r0, #2
 8001056:	f001 feaf 	bl	8002db8 <HAL_FLASH_Program>
					Local_u32InactiveImageAddressCounter+=8;
 800105a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800105c:	3308      	adds	r3, #8
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
					HAL_FLASH_Lock();  //Locks again the flash memory
 8001060:	f001 ff40 	bl	8002ee4 <HAL_FLASH_Lock>
				for(uint8_t i = 0 ; i <8 ; i++){
 8001064:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001068:	3301      	adds	r3, #1
 800106a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800106e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001072:	2b07      	cmp	r3, #7
 8001074:	d9a9      	bls.n	8000fca <BL_voidReceiveUpdate+0x19a>
				}
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	482a      	ldr	r0, [pc, #168]	; (8001124 <BL_voidReceiveUpdate+0x2f4>)
 800107c:	f002 fa4f 	bl	800351e <HAL_GPIO_TogglePin>
				//Ping LED Flash when update
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4828      	ldr	r0, [pc, #160]	; (8001128 <BL_voidReceiveUpdate+0x2f8>)
 8001086:	f002 fa4a 	bl	800351e <HAL_GPIO_TogglePin>
				packet_current = local_totalPacket;
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <BL_voidReceiveUpdate+0x2fc>)
 800108c:	8c3b      	ldrh	r3, [r7, #32]
 800108e:	8013      	strh	r3, [r2, #0]
				//local_totalPacket -= 0x01;
				Local_u16index_fragment_previous = Local_u16index_fragment;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <BL_voidReceiveUpdate+0x2a8>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	867b      	strh	r3, [r7, #50]	; 0x32
			}
						// get 128bytes in Flash
						// clear buffer packet
			memset((uint8_t*) buffer_packet, 0xff,80 );
 8001096:	2250      	movs	r2, #80	; 0x50
 8001098:	21ff      	movs	r1, #255	; 0xff
 800109a:	481e      	ldr	r0, [pc, #120]	; (8001114 <BL_voidReceiveUpdate+0x2e4>)
 800109c:	f003 fa78 	bl	8004590 <memset>
			memset((uint8_t*) buffer_flashing_data, 0xff,64 );
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	21ff      	movs	r1, #255	; 0xff
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <BL_voidReceiveUpdate+0x2e8>)
 80010a6:	f003 fa73 	bl	8004590 <memset>
		}
		if(Local_Flag == GW_SENDMEBITMAP){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b39      	cmp	r3, #57	; 0x39
 80010ae:	d173      	bne.n	8001198 <BL_voidReceiveUpdate+0x368>
			// encrypt packet send
			// add bitmask to buffer
			memset(buffer_mark_packet_loss , 0x00 , 80);
 80010b0:	2250      	movs	r2, #80	; 0x50
 80010b2:	2100      	movs	r1, #0
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <BL_voidReceiveUpdate+0x2c0>)
 80010b6:	f003 fa6b 	bl	8004590 <memset>
			buffer_mark_packet_loss[5] = local_totalPacket << SHIFT_8_BIT;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <BL_voidReceiveUpdate+0x2c0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	715a      	strb	r2, [r3, #5]
			buffer_mark_packet_loss[6] = local_totalPacket << SHIFT_0_BIT;
 80010c0:	8c3b      	ldrh	r3, [r7, #32]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <BL_voidReceiveUpdate+0x2c0>)
 80010c6:	719a      	strb	r2, [r3, #6]
			for(uint32_t i =0 ; i < NUM_PACKETS_MAX/8 ; i++){
 80010c8:	2300      	movs	r3, #0
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010cc:	e03b      	b.n	8001146 <BL_voidReceiveUpdate+0x316>
 80010ce:	bf00      	nop
 80010d0:	19de5080 	.word	0x19de5080
 80010d4:	00000000 	.word	0x00000000
 80010d8:	20000190 	.word	0x20000190
 80010dc:	0801fc44 	.word	0x0801fc44
 80010e0:	0801fc38 	.word	0x0801fc38
 80010e4:	2000017c 	.word	0x2000017c
 80010e8:	08010000 	.word	0x08010000
 80010ec:	08005000 	.word	0x08005000
 80010f0:	200000bc 	.word	0x200000bc
 80010f4:	2000025c 	.word	0x2000025c
 80010f8:	20000192 	.word	0x20000192
 80010fc:	20000193 	.word	0x20000193
 8001100:	20000194 	.word	0x20000194
 8001104:	200003ec 	.word	0x200003ec
 8001108:	20000010 	.word	0x20000010
 800110c:	20000000 	.word	0x20000000
 8001110:	2000019c 	.word	0x2000019c
 8001114:	2000012c 	.word	0x2000012c
 8001118:	2000007c 	.word	0x2000007c
 800111c:	20000198 	.word	0x20000198
 8001120:	2000006c 	.word	0x2000006c
 8001124:	40010800 	.word	0x40010800
 8001128:	40011000 	.word	0x40011000
 800112c:	20000196 	.word	0x20000196
				buffer_mark_packet_loss[i+11] =bm.bitmask[i];
 8001130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001132:	330b      	adds	r3, #11
 8001134:	491e      	ldr	r1, [pc, #120]	; (80011b0 <BL_voidReceiveUpdate+0x380>)
 8001136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001138:	440a      	add	r2, r1
 800113a:	7811      	ldrb	r1, [r2, #0]
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 800113e:	54d1      	strb	r1, [r2, r3]
			for(uint32_t i =0 ; i < NUM_PACKETS_MAX/8 ; i++){
 8001140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001142:	3301      	adds	r3, #1
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001148:	2b57      	cmp	r3, #87	; 0x57
 800114a:	d9f1      	bls.n	8001130 <BL_voidReceiveUpdate+0x300>
			}
			local_u32_CRC_bitmask = BL_Calculate_CRC(bm.bitmask , NUM_PACKETS_MAX);
 800114c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <BL_voidReceiveUpdate+0x380>)
 8001152:	f7ff fa0b 	bl	800056c <BL_Calculate_CRC>
 8001156:	62f8      	str	r0, [r7, #44]	; 0x2c
			buffer_mark_packet_loss[10] = local_u32_CRC_bitmask >> SHIFT_24_BIT;
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	0e1b      	lsrs	r3, r3, #24
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 8001160:	729a      	strb	r2, [r3, #10]
			buffer_mark_packet_loss[9] = local_u32_CRC_bitmask >> SHIFT_16_BIT;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 800116a:	725a      	strb	r2, [r3, #9]
			buffer_mark_packet_loss[8] = local_u32_CRC_bitmask >> SHIFT_8_BIT;
 800116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 8001174:	721a      	strb	r2, [r3, #8]
			buffer_mark_packet_loss[7] = local_u32_CRC_bitmask >> SHIFT_0_BIT;
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 800117c:	71da      	strb	r2, [r3, #7]
			HAL_Delay(1000);
 800117e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001182:	f001 fcb5 	bl	8002af0 <HAL_Delay>
			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_mark_packet_loss
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <BL_voidReceiveUpdate+0x388>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	2376      	movs	r3, #118	; 0x76
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	4908      	ldr	r1, [pc, #32]	; (80011b4 <BL_voidReceiveUpdate+0x384>)
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <BL_voidReceiveUpdate+0x38c>)
 8001194:	f000 fe30 	bl	8001df8 <LORA_IF_Stransmit_Response_Flashing>
	while(local_totalPacket>=0 && local_totalPacket != 0xFFFF )
 8001198:	8c3b      	ldrh	r3, [r7, #32]
 800119a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119e:	4293      	cmp	r3, r2
 80011a0:	f47f ae8a 	bne.w	8000eb8 <BL_voidReceiveUpdate+0x88>
		}


	}

}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3758      	adds	r7, #88	; 0x58
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b0:	2000025c 	.word	0x2000025c
 80011b4:	200000bc 	.word	0x200000bc
 80011b8:	20000198 	.word	0x20000198
 80011bc:	200003ec 	.word	0x200003ec

080011c0 <BL_voidFinishBootLoader>:
void BL_voidFinishBootLoader(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af02      	add	r7, sp, #8
	uint8_t Local_u8Count										= BL_INITIALIZE_WITH_ZERO;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
	uint32_t Local_u32SizeActiveRegionRunning 					= BL_INITIALIZE_WITH_ZERO;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
	uint32_t Local_u32CRCActiveRegionRunning 					= BL_INITIALIZE_WITH_ZERO;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
	uint32_t local_unicast_addr 								= BL_INITIALIZE_WITH_ZERO;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
	Local_u32SizeActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 80011d6:	481f      	ldr	r0, [pc, #124]	; (8001254 <BL_voidFinishBootLoader+0x94>)
 80011d8:	f7ff f950 	bl	800047c <BL_u32ReadAddressData>
 80011dc:	6138      	str	r0, [r7, #16]
	uint32_t Local_u32Appversion = BL_u32ReadAddressData(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS);
 80011de:	481e      	ldr	r0, [pc, #120]	; (8001258 <BL_voidFinishBootLoader+0x98>)
 80011e0:	f7ff f94c 	bl	800047c <BL_u32ReadAddressData>
 80011e4:	6078      	str	r0, [r7, #4]
	Local_u32CRCActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS);
 80011e6:	481d      	ldr	r0, [pc, #116]	; (800125c <BL_voidFinishBootLoader+0x9c>)
 80011e8:	f7ff f948 	bl	800047c <BL_u32ReadAddressData>
 80011ec:	60f8      	str	r0, [r7, #12]
	local_unicast_addr				= BL_Read_Address_Node();
 80011ee:	f7ff fa07 	bl	8000600 <BL_Read_Address_Node>
 80011f2:	60b8      	str	r0, [r7, #8]
	//Local_u32ActiveRegionRunning = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <BL_voidFinishBootLoader+0xa0>)
 80011fa:	f7ff fc91 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
	HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f001 fc76 	bl	8002af0 <HAL_Delay>
	// Verify Bank download Image
	if(BL_VerifyCheckSum(Local_u32SizeActiveRegionRunning, Local_u32CRCActiveRegionRunning, DOWNLOAD_BANK_START_ADDRESS) == BL_OK){
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <BL_voidFinishBootLoader+0xa4>)
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	6938      	ldr	r0, [r7, #16]
 800120a:	f7ff fab7 	bl	800077c <BL_VerifyCheckSum>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d113      	bne.n	800123c <BL_voidFinishBootLoader+0x7c>
		//BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKFIRST_IMAGE);
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8001214:	f06f 010e 	mvn.w	r1, #14
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <BL_voidFinishBootLoader+0xa8>)
 800121a:	f7ff fc81 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			//Copy Bank download to bank 1
			BL_voidEraseBank(BANKFIRST_IMAGE);
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <BL_voidFinishBootLoader+0xac>)
 8001220:	f7ff fae2 	bl	80007e8 <BL_voidEraseBank>
			BL_voidCopyImageToActiveRegion();
 8001224:	f7ff f9fa 	bl	800061c <BL_voidCopyImageToActiveRegion>
			// update appversion
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_APP_VER_ADDRESS , Local_u32Appversion);
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <BL_voidFinishBootLoader+0xb0>)
 800122c:	f7ff fc78 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKFIRST_IMAGE);
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <BL_voidFinishBootLoader+0xac>)
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <BL_voidFinishBootLoader+0xb4>)
 8001234:	f7ff fc74 	bl	8000b20 <BL_voidEraseRestoreHeaderPage>
			//BL_voidMakeSoftWareReset();
			 NVIC_SystemReset();
 8001238:	f7ff f90a 	bl	8000450 <__NVIC_SystemReset>
	}
	else{
		LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp, ret, local_unicast_addr, MCU_ERROR_CRC);
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <BL_voidFinishBootLoader+0xb8>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	234f      	movs	r3, #79	; 0x4f
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <BL_voidFinishBootLoader+0xbc>)
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <BL_voidFinishBootLoader+0xc0>)
 800124a:	f000 fdd5 	bl	8001df8 <LORA_IF_Stransmit_Response_Flashing>
		//BL_voidMakeSoftWareReset();
		NVIC_SystemReset();
 800124e:	f7ff f8ff 	bl	8000450 <__NVIC_SystemReset>
 8001252:	bf00      	nop
 8001254:	0801fc38 	.word	0x0801fc38
 8001258:	0801fc30 	.word	0x0801fc30
 800125c:	0801fc3c 	.word	0x0801fc3c
 8001260:	0801fc00 	.word	0x0801fc00
 8001264:	08010000 	.word	0x08010000
 8001268:	0801fc34 	.word	0x0801fc34
 800126c:	08005000 	.word	0x08005000
 8001270:	0801fc10 	.word	0x0801fc10
 8001274:	0801fc44 	.word	0x0801fc44
 8001278:	20000198 	.word	0x20000198
 800127c:	20000180 	.word	0x20000180
 8001280:	200003ec 	.word	0x200003ec

08001284 <BL_voidMakeSoftWareReset>:
	}
	/*Wait for User Reset*/
}

void BL_voidMakeSoftWareReset(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	// make software reset after flashing success
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
#endif
	 NVIC_SystemReset();
 8001288:	f7ff f8e2 	bl	8000450 <__NVIC_SystemReset>

0800128c <HAL_GPIO_EXTI_Callback>:
}
// Interrupt Received
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin){
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d115      	bne.n	80012c8 <HAL_GPIO_EXTI_Callback+0x3c>
		if(gl_State_BL == STATE_INITBOOT){
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x44>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d111      	bne.n	80012c8 <HAL_GPIO_EXTI_Callback+0x3c>
			if(LORA_IF_Stransmit_Request(&SX1278,(uint8_t*)  buffer_resp, ret, ADDR_NODE_1 , GW_SYNC_CONFIG) == LORA_OKE){
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x48>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	2320      	movs	r3, #32
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <HAL_GPIO_EXTI_Callback+0x50>)
 80012b2:	f000 fd53 	bl	8001d5c <LORA_IF_Stransmit_Request>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_GPIO_EXTI_Callback+0x3c>
				HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80012bc:	2007      	movs	r0, #7
 80012be:	f001 fd60 	bl	8002d82 <HAL_NVIC_DisableIRQ>
				//__HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
				// Change state
				gl_State_BL =STATE_RECEIVE_HEADER;
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

			}
		}
	}
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000199 	.word	0x20000199
 80012d4:	20000198 	.word	0x20000198
 80012d8:	20000180 	.word	0x20000180
 80012dc:	200003ec 	.word	0x200003ec

080012e0 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fbd7 	bl	8001aa8 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fbf2 	bl	8001ae8 <SX1278_hw_SPIReadByte>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fb8f 	bl	8001a32 <SX1278_hw_SetNSS>
	return tmp;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
 800132a:	4613      	mov	r3, r2
 800132c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fb7c 	bl	8001a32 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f000 fbad 	bl	8001aa8 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	78ba      	ldrb	r2, [r7, #2]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fba6 	bl	8001aa8 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fb65 	bl	8001a32 <SX1278_hw_SetNSS>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	460b      	mov	r3, r1
 800137e:	72fb      	strb	r3, [r7, #11]
 8001380:	4613      	mov	r3, r2
 8001382:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8001384:	7abb      	ldrb	r3, [r7, #10]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d927      	bls.n	80013da <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fb4e 	bl	8001a32 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	7afa      	ldrb	r2, [r7, #11]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fb82 	bl	8001aa8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	75fb      	strb	r3, [r7, #23]
 80013a8:	e00c      	b.n	80013c4 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	18d4      	adds	r4, r2, r3
 80013b4:	4608      	mov	r0, r1
 80013b6:	f000 fb97 	bl	8001ae8 <SX1278_hw_SPIReadByte>
 80013ba:	4603      	mov	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	3301      	adds	r3, #1
 80013c2:	75fb      	strb	r3, [r7, #23]
 80013c4:	7dfa      	ldrb	r2, [r7, #23]
 80013c6:	7abb      	ldrb	r3, [r7, #10]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3ee      	bcc.n	80013aa <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fb2d 	bl	8001a32 <SX1278_hw_SetNSS>
 80013d8:	e000      	b.n	80013dc <SX1278_SPIBurstRead+0x6c>
		return;
 80013da:	bf00      	nop
	}
}
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}

080013e2 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	461a      	mov	r2, r3
 80013ee:	460b      	mov	r3, r1
 80013f0:	72fb      	strb	r3, [r7, #11]
 80013f2:	4613      	mov	r3, r2
 80013f4:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d929      	bls.n	8001450 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fb15 	bl	8001a32 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f000 fb46 	bl	8001aa8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
 8001420:	e00b      	b.n	800143a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	f000 fb3a 	bl	8001aa8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	3301      	adds	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	7abb      	ldrb	r3, [r7, #10]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3ef      	bcc.n	8001422 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f000 faf2 	bl	8001a32 <SX1278_hw_SetNSS>
 800144e:	e000      	b.n	8001452 <SX1278_SPIBurstWrite+0x70>
		return;
 8001450:	bf00      	nop
	}
}
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f90d 	bl	8001680 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 fb64 	bl	8001b34 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f917 	bl	80016a0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	684a      	ldr	r2, [r1, #4]
 8001476:	688b      	ldr	r3, [r1, #8]
 8001478:	f04f 0000 	mov.w	r0, #0
 800147c:	f04f 0100 	mov.w	r1, #0
 8001480:	04d9      	lsls	r1, r3, #19
 8001482:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001486:	04d0      	lsls	r0, r2, #19
 8001488:	4a6f      	ldr	r2, [pc, #444]	; (8001648 <SX1278_config+0x1f0>)
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f7fe fe5f 	bl	8000150 <__aeabi_uldivmod>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800149a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	0c02      	lsrs	r2, r0, #16
 80014a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014ac:	0c0b      	lsrs	r3, r1, #16
 80014ae:	b2d3      	uxtb	r3, r2
 80014b0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80014b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	0a02      	lsrs	r2, r0, #8
 80014c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014c4:	0a0b      	lsrs	r3, r1, #8
 80014c6:	b2d3      	uxtb	r3, r2
 80014c8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80014ca:	7c3b      	ldrb	r3, [r7, #16]
 80014cc:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	2303      	movs	r3, #3
 80014d4:	2106      	movs	r1, #6
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff83 	bl	80013e2 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80014dc:	2234      	movs	r2, #52	; 0x34
 80014de:	2139      	movs	r1, #57	; 0x39
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff1c 	bl	800131e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b57      	ldr	r3, [pc, #348]	; (800164c <SX1278_config+0x1f4>)
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	461a      	mov	r2, r3
 80014f2:	2109      	movs	r1, #9
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff12 	bl	800131e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80014fa:	220b      	movs	r2, #11
 80014fc:	210b      	movs	r1, #11
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff0d 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001504:	2223      	movs	r2, #35	; 0x23
 8001506:	210c      	movs	r1, #12
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff08 	bl	800131e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7b5b      	ldrb	r3, [r3, #13]
 8001512:	461a      	mov	r2, r3
 8001514:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <SX1278_config+0x1f8>)
 8001516:	5c9b      	ldrb	r3, [r3, r2]
 8001518:	2b06      	cmp	r3, #6
 800151a:	d147      	bne.n	80015ac <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b9b      	ldrb	r3, [r3, #14]
 8001520:	461a      	mov	r2, r3
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <SX1278_config+0x1fc>)
 8001524:	5c9b      	ldrb	r3, [r3, r2]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7bdb      	ldrb	r3, [r3, #15]
 800152e:	4619      	mov	r1, r3
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <SX1278_config+0x200>)
 8001532:	5c5b      	ldrb	r3, [r3, r1]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800153c:	3301      	adds	r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	211d      	movs	r1, #29
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff feea 	bl	800131e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b5b      	ldrb	r3, [r3, #13]
 800154e:	461a      	mov	r2, r3
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <SX1278_config+0x1f8>)
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7c1b      	ldrb	r3, [r3, #16]
 800155c:	4619      	mov	r1, r3
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <SX1278_config+0x204>)
 8001560:	5c5b      	ldrb	r3, [r3, r1]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800156a:	3303      	adds	r3, #3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	211e      	movs	r1, #30
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fed3 	bl	800131e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001578:	2131      	movs	r1, #49	; 0x31
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff feb0 	bl	80012e0 <SX1278_SPIRead>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f023 0307 	bic.w	r3, r3, #7
 800158a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	f043 0305 	orr.w	r3, r3, #5
 8001592:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	461a      	mov	r2, r3
 8001598:	2131      	movs	r1, #49	; 0x31
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff febf 	bl	800131e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80015a0:	220c      	movs	r2, #12
 80015a2:	2137      	movs	r1, #55	; 0x37
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff feba 	bl	800131e <SX1278_SPIWrite>
 80015aa:	e029      	b.n	8001600 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b9b      	ldrb	r3, [r3, #14]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <SX1278_config+0x1fc>)
 80015b4:	5c9b      	ldrb	r3, [r3, r2]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7bdb      	ldrb	r3, [r3, #15]
 80015be:	4619      	mov	r1, r3
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <SX1278_config+0x200>)
 80015c2:	5c5b      	ldrb	r3, [r3, r1]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80015c8:	4413      	add	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	211d      	movs	r1, #29
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fea4 	bl	800131e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7b5b      	ldrb	r3, [r3, #13]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <SX1278_config+0x1f8>)
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c1b      	ldrb	r3, [r3, #16]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <SX1278_config+0x204>)
 80015ec:	5c5b      	ldrb	r3, [r3, r1]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80015f2:	4413      	add	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	211e      	movs	r1, #30
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe8f 	bl	800131e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001600:	2204      	movs	r2, #4
 8001602:	2126      	movs	r1, #38	; 0x26
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fe8a 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800160a:	2208      	movs	r2, #8
 800160c:	211f      	movs	r1, #31
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe85 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001614:	2200      	movs	r2, #0
 8001616:	2120      	movs	r1, #32
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe80 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800161e:	2208      	movs	r2, #8
 8001620:	2121      	movs	r1, #33	; 0x21
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fe7b 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001628:	2201      	movs	r2, #1
 800162a:	2141      	movs	r1, #65	; 0x41
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe76 	bl	800131e <SX1278_SPIWrite>
	module->readBytes = 0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f810 	bl	8001660 <SX1278_standby>
}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	01e84800 	.word	0x01e84800
 800164c:	0800461c 	.word	0x0800461c
 8001650:	08004620 	.word	0x08004620
 8001654:	08004628 	.word	0x08004628
 8001658:	08004634 	.word	0x08004634
 800165c:	08004638 	.word	0x08004638

08001660 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001668:	2209      	movs	r2, #9
 800166a:	2101      	movs	r1, #1
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe56 	bl	800131e <SX1278_SPIWrite>
	module->status = STANDBY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	749a      	strb	r2, [r3, #18]
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001688:	2208      	movs	r2, #8
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe46 	bl	800131e <SX1278_SPIWrite>
	module->status = SLEEP;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	749a      	strb	r2, [r3, #18]
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80016a8:	2288      	movs	r2, #136	; 0x88
 80016aa:	2101      	movs	r1, #1
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fe36 	bl	800131e <SX1278_SPIWrite>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80016c2:	22ff      	movs	r2, #255	; 0xff
 80016c4:	2112      	movs	r1, #18
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe29 	bl	800131e <SX1278_SPIWrite>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	460b      	mov	r3, r1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7afa      	ldrb	r2, [r7, #11]
 80016e6:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff feb5 	bl	8001458 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80016ee:	2284      	movs	r2, #132	; 0x84
 80016f0:	214d      	movs	r1, #77	; 0x4d
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7ff fe13 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80016f8:	22ff      	movs	r2, #255	; 0xff
 80016fa:	2124      	movs	r1, #36	; 0x24
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fe0e 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001702:	2201      	movs	r2, #1
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fe09 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	2111      	movs	r1, #17
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fe04 	bl	800131e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff ffcf 	bl	80016ba <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	461a      	mov	r2, r3
 8001720:	2122      	movs	r1, #34	; 0x22
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff fdfb 	bl	800131e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001728:	210f      	movs	r1, #15
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fdd8 	bl	80012e0 <SX1278_SPIRead>
 8001730:	4603      	mov	r3, r0
 8001732:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	461a      	mov	r2, r3
 8001738:	210d      	movs	r1, #13
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff fdef 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001740:	228d      	movs	r2, #141	; 0x8d
 8001742:	2101      	movs	r1, #1
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f7ff fdea 	bl	800131e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001752:	2118      	movs	r1, #24
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fdc3 	bl	80012e0 <SX1278_SPIRead>
 800175a:	4603      	mov	r3, r0
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b04      	cmp	r3, #4
 8001762:	d104      	bne.n	800176e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2203      	movs	r2, #3
 8001768:	749a      	strb	r2, [r3, #18]
			return 1;
 800176a:	2301      	movs	r3, #1
 800176c:	e013      	b.n	8001796 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3b01      	subs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f96e 	bl	8001a60 <SX1278_hw_Reset>
			SX1278_config(module);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fe67 	bl	8001458 <SX1278_config>
			return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e003      	b.n	8001796 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 f9d0 	bl	8001b34 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001794:	e7dd      	b.n	8001752 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <SX1278_LoRaRxPacket>:

	unsigned char addr;
uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f9cc 	bl	8001b4a <SX1278_hw_GetDIO0>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d033      	beq.n	8001820 <SX1278_LoRaRxPacket+0x80>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3313      	adds	r3, #19
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fee4 	bl	8004590 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80017c8:	2110      	movs	r1, #16
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fd88 	bl	80012e0 <SX1278_SPIRead>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <SX1278_LoRaRxPacket+0x90>)
 80017d6:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <SX1278_LoRaRxPacket+0x90>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	210d      	movs	r1, #13
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fd9c 	bl	800131e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7b5b      	ldrb	r3, [r3, #13]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <SX1278_LoRaRxPacket+0x56>
			packet_size = module->packetLength;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7c5b      	ldrb	r3, [r3, #17]
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e005      	b.n	8001802 <SX1278_LoRaRxPacket+0x62>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80017f6:	2113      	movs	r1, #19
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fd71 	bl	80012e0 <SX1278_SPIRead>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 0213 	add.w	r2, r3, #19
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdaf 	bl	8001370 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff4d 	bl	80016ba <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002b4 	.word	0x200002b4

08001834 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	460b      	mov	r3, r1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	7afa      	ldrb	r2, [r7, #11]
 8001846:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fe05 	bl	8001458 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800184e:	2287      	movs	r2, #135	; 0x87
 8001850:	214d      	movs	r1, #77	; 0x4d
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fd63 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001858:	2200      	movs	r2, #0
 800185a:	2124      	movs	r1, #36	; 0x24
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fd5e 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001862:	2241      	movs	r2, #65	; 0x41
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff fd59 	bl	800131e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff ff24 	bl	80016ba <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001872:	22f7      	movs	r2, #247	; 0xf7
 8001874:	2111      	movs	r1, #17
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff fd51 	bl	800131e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	461a      	mov	r2, r3
 8001880:	2122      	movs	r1, #34	; 0x22
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff fd4b 	bl	800131e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001888:	210e      	movs	r1, #14
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff fd28 	bl	80012e0 <SX1278_SPIRead>
 8001890:	4603      	mov	r3, r0
 8001892:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	461a      	mov	r2, r3
 8001898:	210d      	movs	r1, #13
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fd3f 	bl	800131e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80018a0:	2122      	movs	r1, #34	; 0x22
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff fd1c 	bl	80012e0 <SX1278_SPIRead>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80018ac:	7dba      	ldrb	r2, [r7, #22]
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d104      	bne.n	80018be <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2202      	movs	r2, #2
 80018b8:	749a      	strb	r2, [r3, #18]
			return 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ea      	bne.n	80018a0 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f8c6 	bl	8001a60 <SX1278_hw_Reset>
			SX1278_config(module);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fdbf 	bl	8001458 <SX1278_config>
			return 0;
 80018da:	2300      	movs	r3, #0
		}
	}
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	2100      	movs	r1, #0
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fd71 	bl	80013e2 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001900:	228b      	movs	r2, #139	; 0x8b
 8001902:	2101      	movs	r1, #1
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fd0a 	bl	800131e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f91b 	bl	8001b4a <SX1278_hw_GetDIO0>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800191a:	2112      	movs	r1, #18
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fcdf 	bl	80012e0 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fec9 	bl	80016ba <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fe99 	bl	8001660 <SX1278_standby>
			return 1;
 800192e:	2301      	movs	r3, #1
 8001930:	e013      	b.n	800195a <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f88c 	bl	8001a60 <SX1278_hw_Reset>
			SX1278_config(module);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fd85 	bl	8001458 <SX1278_config>
			return 0;
 800194e:	2300      	movs	r3, #0
 8001950:	e003      	b.n	800195a <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 f8ee 	bl	8001b34 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001958:	e7d7      	b.n	800190a <SX1278_LoRaTxPacket+0x26>
	}
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f848 	bl	8001a08 <SX1278_hw_init>
	module->frequency = frequency;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]
	module->power = power;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	7e3a      	ldrb	r2, [r7, #24]
 8001986:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	7f3a      	ldrb	r2, [r7, #28]
 800198c:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001994:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800199c:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019a4:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019ac:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff fd52 	bl	8001458 <SX1278_config>
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d003      	beq.n	80019de <SX1278_read+0x22>
		length = module->readBytes;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80019dc:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3313      	adds	r3, #19
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68b8      	ldr	r0, [r7, #8]
 80019e8:	f002 fdfe 	bl	80045e8 <memcpy>
	rxBuf[length] = '\0';
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	4413      	add	r3, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f80d 	bl	8001a32 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6858      	ldr	r0, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	f001 fd62 	bl	80034ee <HAL_GPIO_WritePin>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6958      	ldr	r0, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	b299      	uxth	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	f001 fd4b 	bl	80034ee <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffe1 	bl	8001a32 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6858      	ldr	r0, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f001 fd36 	bl	80034ee <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 f856 	bl	8001b34 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6858      	ldr	r0, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f001 fd2a 	bl	80034ee <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001a9a:	2064      	movs	r0, #100	; 0x64
 8001a9c:	f000 f84a 	bl	8001b34 <SX1278_hw_DelayMs>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffbb 	bl	8001a32 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6998      	ldr	r0, [r3, #24]
 8001ac0:	1cf9      	adds	r1, r7, #3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f002 f9bc 	bl	8003e44 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001acc:	bf00      	nop
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fca9 	bl	800442a <HAL_SPI_GetState>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d1f7      	bne.n	8001ace <SX1278_hw_SPICommand+0x26>
		;
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff99 	bl	8001a32 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6998      	ldr	r0, [r3, #24]
 8001b04:	f107 020e 	add.w	r2, r7, #14
 8001b08:	f107 010f 	add.w	r1, r7, #15
 8001b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	f002 fad9 	bl	80040ca <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001b18:	bf00      	nop
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fc83 	bl	800442a <HAL_SPI_GetState>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d1f7      	bne.n	8001b1a <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 ffd7 	bl	8002af0 <HAL_Delay>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f001 fcae 	bl	80034c0 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LORA_IF_GetFragment_Firmware>:
uint8_t counter ;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
struct AES_ctx ctx;
uint16_t  LORA_IF_GetFragment_Firmware(SX1278_t *module , uint8_t* buffer_packet ,uint8_t* buffer_flashing_data ,
		uint8_t *local_flag){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
	counter = 0 ;
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <LORA_IF_GetFragment_Firmware+0x114>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
	uint16_t index_fragmemt = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	82fb      	strh	r3, [r7, #22]
	//clear data buffer
	//clearDataBuffer((uint8_t*) buffer_packet,132);
	/* Configuration LoRa to Receive firmware*/
	ret = SX1278_LoRaEntryRx(module, SIZE_BUFFER_80BYTES , MAX_TIME_OUT);
 8001b90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b94:	2150      	movs	r1, #80	; 0x50
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fd9c 	bl	80016d4 <SX1278_LoRaEntryRx>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <LORA_IF_GetFragment_Firmware+0x118>)
 8001ba2:	701a      	strb	r2, [r3, #0]
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fdfb 	bl	80017a0 <SX1278_LoRaRxPacket>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <LORA_IF_GetFragment_Firmware+0x118>)
 8001bb0:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <LORA_IF_GetFragment_Firmware+0x118>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f4      	beq.n	8001ba4 <LORA_IF_GetFragment_Firmware+0x2c>
			ret = SX1278_read(module, (uint8_t*) buffer_packet, ret);
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <LORA_IF_GetFragment_Firmware+0x118>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff fefa 	bl	80019bc <SX1278_read>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <LORA_IF_GetFragment_Firmware+0x118>)
 8001bce:	701a      	strb	r2, [r3, #0]
			AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <LORA_IF_GetFragment_Firmware+0x11c>)
 8001bd2:	4931      	ldr	r1, [pc, #196]	; (8001c98 <LORA_IF_GetFragment_Firmware+0x120>)
 8001bd4:	4831      	ldr	r0, [pc, #196]	; (8001c9c <LORA_IF_GetFragment_Firmware+0x124>)
 8001bd6:	f000 fa91 	bl	80020fc <AES_init_ctx_iv>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bde:	4830      	ldr	r0, [pc, #192]	; (8001ca0 <LORA_IF_GetFragment_Firmware+0x128>)
 8001be0:	f001 fc9d 	bl	800351e <HAL_GPIO_TogglePin>
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8001be4:	2250      	movs	r2, #80	; 0x50
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	482c      	ldr	r0, [pc, #176]	; (8001c9c <LORA_IF_GetFragment_Firmware+0x124>)
 8001bea:	f000 fc4a 	bl	8002482 <AES_CTR_xcrypt_buffer>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf2:	482b      	ldr	r0, [pc, #172]	; (8001ca0 <LORA_IF_GetFragment_Firmware+0x128>)
 8001bf4:	f001 fc93 	bl	800351e <HAL_GPIO_TogglePin>
			if (buffer_packet[0] == ADDR_BOARDCAST && buffer_packet[1] == ADDR_BOARDCAST &&
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2bff      	cmp	r3, #255	; 0xff
 8001bfe:	d125      	bne.n	8001c4c <LORA_IF_GetFragment_Firmware+0xd4>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3301      	adds	r3, #1
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d120      	bne.n	8001c4c <LORA_IF_GetFragment_Firmware+0xd4>
			    (buffer_packet[2] == FL_FRAGMENT_FIRMWARE || buffer_packet[2] == GW_SENDMEBITMAP)) {
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
			if (buffer_packet[0] == ADDR_BOARDCAST && buffer_packet[1] == ADDR_BOARDCAST &&
 8001c10:	2bfe      	cmp	r3, #254	; 0xfe
 8001c12:	d004      	beq.n	8001c1e <LORA_IF_GetFragment_Firmware+0xa6>
			    (buffer_packet[2] == FL_FRAGMENT_FIRMWARE || buffer_packet[2] == GW_SENDMEBITMAP)) {
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3302      	adds	r3, #2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b39      	cmp	r3, #57	; 0x39
 8001c1c:	d116      	bne.n	8001c4c <LORA_IF_GetFragment_Firmware+0xd4>
			    /* Copy data from buffer packet to buffer flashing data */
			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <LORA_IF_GetFragment_Firmware+0x12c>)
 8001c24:	f001 fc7b 	bl	800351e <HAL_GPIO_TogglePin>
			    *local_flag = buffer_packet[2];
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	789a      	ldrb	r2, [r3, #2]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	701a      	strb	r2, [r3, #0]
			    index_fragmemt = (buffer_packet[3] << SHIFT_8_BIT) | (buffer_packet[4] << SHIFT_0_BIT);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3303      	adds	r3, #3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	82fb      	strh	r3, [r7, #22]
			    return index_fragmemt;
 8001c48:	8afb      	ldrh	r3, [r7, #22]
 8001c4a:	e01a      	b.n	8001c82 <LORA_IF_GetFragment_Firmware+0x10a>
			}
			if (buffer_packet[0] == ADDR_BOARDCAST && buffer_packet[1] == ADDR_BOARDCAST &&
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d10c      	bne.n	8001c6e <LORA_IF_GetFragment_Firmware+0xf6>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3301      	adds	r3, #1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2bff      	cmp	r3, #255	; 0xff
 8001c5c:	d107      	bne.n	8001c6e <LORA_IF_GetFragment_Firmware+0xf6>
						    buffer_packet[2] == GW_ACKNOWLEDGE_END_OTA) {
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3302      	adds	r3, #2
 8001c62:	781b      	ldrb	r3, [r3, #0]
			if (buffer_packet[0] == ADDR_BOARDCAST && buffer_packet[1] == ADDR_BOARDCAST &&
 8001c64:	2b7c      	cmp	r3, #124	; 0x7c
 8001c66:	d102      	bne.n	8001c6e <LORA_IF_GetFragment_Firmware+0xf6>
						    /* Copy data from buffer packet to buffer flashing data */
				return GW_SEND_DONE;
 8001c68:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001c6c:	e009      	b.n	8001c82 <LORA_IF_GetFragment_Firmware+0x10a>
			}
			else{
				counter++;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <LORA_IF_GetFragment_Firmware+0x114>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LORA_IF_GetFragment_Firmware+0x114>)
 8001c78:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f000 ff38 	bl	8002af0 <HAL_Delay>
		ret = SX1278_LoRaRxPacket(module);
 8001c80:	e790      	b.n	8001ba4 <LORA_IF_GetFragment_Firmware+0x2c>
				}
			}
		}
	}

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002b5 	.word	0x200002b5
 8001c90:	20000198 	.word	0x20000198
 8001c94:	20000030 	.word	0x20000030
 8001c98:	20000020 	.word	0x20000020
 8001c9c:	200002b8 	.word	0x200002b8
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <LORA_IF_TransferData_Frame>:


uint8_t LORA_IF_TransferData_Frame(SX1278_t *module , uint8_t* buffer_req , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_req)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	71fb      	strb	r3, [r7, #7]

	uint32_t local_u32_NodeAddress = BL_Read_Address_Node();
 8001cb8:	f7fe fca2 	bl	8000600 <BL_Read_Address_Node>
 8001cbc:	6178      	str	r0, [r7, #20]
	buffer_req[0]= (local_u32_NodeAddress >>SHIFT_24_BIT)& 0xFF ;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	0e1b      	lsrs	r3, r3, #24
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = (local_u32_NodeAddress >>SHIFT_16_BIT)& 0xFF ;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	0c1a      	lsrs	r2, r3, #16
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = (local_u32_NodeAddress >>SHIFT_8_BIT)& 0xFF ;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	0a1a      	lsrs	r2, r3, #8
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = (local_u32_NodeAddress >>SHIFT_0_BIT)& 0xFF ;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
	buffer_req[4] = ACK_req;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3304      	adds	r3, #4
 8001cee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cf2:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <LORA_IF_TransferData_Frame+0xa4>)
 8001cf6:	4916      	ldr	r1, [pc, #88]	; (8001d50 <LORA_IF_TransferData_Frame+0xa8>)
 8001cf8:	4816      	ldr	r0, [pc, #88]	; (8001d54 <LORA_IF_TransferData_Frame+0xac>)
 8001cfa:	f000 f9ff 	bl	80020fc <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 8001cfe:	2210      	movs	r2, #16
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <LORA_IF_TransferData_Frame+0xac>)
 8001d04:	f000 fbbd 	bl	8002482 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaEntryTx(module, length, timeout);
 8001d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff fd8f 	bl	8001834 <SX1278_LoRaEntryTx>
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001d1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d1e:	2210      	movs	r2, #16
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fdde 	bl	80018e4 <SX1278_LoRaTxPacket>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
		if (ret) {
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <LORA_IF_TransferData_Frame+0x98>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <LORA_IF_TransferData_Frame+0xb0>)
 8001d38:	f001 fbf1 	bl	800351e <HAL_GPIO_TogglePin>
			return 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LORA_IF_TransferData_Frame+0x9a>
		}
		else{
			return 0;
 8001d40:	2300      	movs	r3, #0
		}
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000030 	.word	0x20000030
 8001d50:	20000020 	.word	0x20000020
 8001d54:	200002b8 	.word	0x200002b8
 8001d58:	40010c00 	.word	0x40010c00

08001d5c <LORA_IF_Stransmit_Request>:

LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module  , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr  , uint8_t ACK_resp){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	71bb      	strb	r3, [r7, #6]
	counter = 0;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <LORA_IF_Stransmit_Request+0x88>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaRxPacket(module);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fd11 	bl	80017a0 <SX1278_LoRaRxPacket>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	if(ret > 0){
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d027      	beq.n	8001dd8 <LORA_IF_Stransmit_Request+0x7c>
		/*Read the first Frame
		 *counter to retry connect until get resp signal
		 */
		 ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fe14 	bl	80019bc <SX1278_read>
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
		 AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <LORA_IF_Stransmit_Request+0x8c>)
 8001d9a:	4914      	ldr	r1, [pc, #80]	; (8001dec <LORA_IF_Stransmit_Request+0x90>)
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <LORA_IF_Stransmit_Request+0x94>)
 8001d9e:	f000 f9ad 	bl	80020fc <AES_init_ctx_iv>
		 AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, 16);
 8001da2:	2210      	movs	r2, #16
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	4812      	ldr	r0, [pc, #72]	; (8001df0 <LORA_IF_Stransmit_Request+0x94>)
 8001da8:	f000 fb6b 	bl	8002482 <AES_CTR_xcrypt_buffer>
		 if(buffer_resp[0]== ADDR_BOARDCAST  && buffer_resp[1] == ADDR_BOARDCAST && buffer_resp[2]  == ACK_resp){
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2bff      	cmp	r3, #255	; 0xff
 8001db2:	d111      	bne.n	8001dd8 <LORA_IF_Stransmit_Request+0x7c>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d10c      	bne.n	8001dd8 <LORA_IF_Stransmit_Request+0x7c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	7e3a      	ldrb	r2, [r7, #24]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d106      	bne.n	8001dd8 <LORA_IF_Stransmit_Request+0x7c>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <LORA_IF_Stransmit_Request+0x98>)
 8001dd0:	f001 fba5 	bl	800351e <HAL_GPIO_TogglePin>
			// Response packet
			return LORA_OKE ;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <LORA_IF_Stransmit_Request+0x7e>
		 }
	 }
	return LORA_BUSSY;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b5 	.word	0x200002b5
 8001de8:	20000030 	.word	0x20000030
 8001dec:	20000020 	.word	0x20000020
 8001df0:	200002b8 	.word	0x200002b8
 8001df4:	40010c00 	.word	0x40010c00

08001df8 <LORA_IF_Stransmit_Response_Flashing>:

LoRa_Return_t LORA_IF_Stransmit_Response_Flashing(SX1278_t *module ,uint8_t* TxBuffer
	, uint8_t ret, uint32_t addr ,uint8_t ACK_resp){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	71fb      	strb	r3, [r7, #7]
	// Address
	TxBuffer[0] = (addr >>SHIFT_24_BIT)& 0xFF ;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	0e1b      	lsrs	r3, r3, #24
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = (addr >>SHIFT_16_BIT)& 0xFF ;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	0c1a      	lsrs	r2, r3, #16
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
	TxBuffer[2] = (addr >>SHIFT_8_BIT)& 0xFF ;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	0a1a      	lsrs	r2, r3, #8
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3302      	adds	r3, #2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]
	TxBuffer[3] = (addr >>SHIFT_0_BIT)& 0xFF ;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
	// ACK
	TxBuffer[4] = ACK_resp;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3304      	adds	r3, #4
 8001e38:	7e3a      	ldrb	r2, [r7, #24]
 8001e3a:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, 128);
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_112BYTES  , MAX_TIME_OUT);
 8001e3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e40:	2170      	movs	r1, #112	; 0x70
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fcf6 	bl	8001834 <SX1278_LoRaEntryTx>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001e4c:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <LORA_IF_Stransmit_Response_Flashing+0x98>)
 8001e4e:	4911      	ldr	r1, [pc, #68]	; (8001e94 <LORA_IF_Stransmit_Response_Flashing+0x9c>)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <LORA_IF_Stransmit_Response_Flashing+0xa0>)
 8001e52:	f000 f953 	bl	80020fc <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)TxBuffer, SIZE_BUFFER_112BYTES);
 8001e56:	2270      	movs	r2, #112	; 0x70
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <LORA_IF_Stransmit_Response_Flashing+0xa0>)
 8001e5c:	f000 fb11 	bl	8002482 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) TxBuffer, SIZE_BUFFER_112BYTES, MAX_TIME_OUT);
 8001e60:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e64:	2270      	movs	r2, #112	; 0x70
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff fd3b 	bl	80018e4 <SX1278_LoRaTxPacket>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	if(ret){
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <LORA_IF_Stransmit_Response_Flashing+0x8e>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <LORA_IF_Stransmit_Response_Flashing+0xa4>)
 8001e7e:	f001 fb4e 	bl	800351e <HAL_GPIO_TogglePin>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		return LORA_OKE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <LORA_IF_Stransmit_Response_Flashing+0x90>

	}
	return LORA_ERROR;
 8001e86:	2302      	movs	r3, #2
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000030 	.word	0x20000030
 8001e94:	20000020 	.word	0x20000020
 8001e98:	200002b8 	.word	0x200002b8
 8001e9c:	40010c00 	.word	0x40010c00

08001ea0 <LORA_IF_Stransmit_Response>:
	 }
	}
}


LoRa_Return_t LORA_IF_Stransmit_Response(SX1278_t *module , uint8_t* buffer_resp , uint8_t ret , uint8_t addr , uint8_t ACK_resp){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	71bb      	strb	r3, [r7, #6]
	uint32_t local_u32_NodeAddress = BL_Read_Address_Node();
 8001eb6:	f7fe fba3 	bl	8000600 <BL_Read_Address_Node>
 8001eba:	6178      	str	r0, [r7, #20]
	BL_Read_Address_Node();
 8001ebc:	f7fe fba0 	bl	8000600 <BL_Read_Address_Node>
	buffer_resp[0]= (local_u32_NodeAddress >>SHIFT_24_BIT)& 0xFF ;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	0e1b      	lsrs	r3, r3, #24
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	701a      	strb	r2, [r3, #0]
	buffer_resp[1] = (local_u32_NodeAddress >>SHIFT_16_BIT)& 0xFF ;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0c1a      	lsrs	r2, r3, #16
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]
	buffer_resp[2] = (local_u32_NodeAddress >>SHIFT_8_BIT)& 0xFF ;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	0a1a      	lsrs	r2, r3, #8
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3302      	adds	r3, #2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
	buffer_resp[3] = (local_u32_NodeAddress >>SHIFT_0_BIT)& 0xFF ;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
	buffer_resp[4] = ACK_resp ;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ef4:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES  , MAX_TIME_OUT);
 8001ef6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001efa:	2110      	movs	r1, #16
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fc99 	bl	8001834 <SX1278_LoRaEntryTx>
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <LORA_IF_Stransmit_Response+0xac>)
 8001f08:	4911      	ldr	r1, [pc, #68]	; (8001f50 <LORA_IF_Stransmit_Response+0xb0>)
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <LORA_IF_Stransmit_Response+0xb4>)
 8001f0c:	f000 f8f6 	bl	80020fc <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, SIZE_BUFFER_16BYTES);
 8001f10:	2210      	movs	r2, #16
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	480f      	ldr	r0, [pc, #60]	; (8001f54 <LORA_IF_Stransmit_Response+0xb4>)
 8001f16:	f000 fab4 	bl	8002482 <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_resp, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001f1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f1e:	2210      	movs	r2, #16
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fcde 	bl	80018e4 <SX1278_LoRaTxPacket>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
	if(ret){
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <LORA_IF_Stransmit_Response+0xa0>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f36:	4808      	ldr	r0, [pc, #32]	; (8001f58 <LORA_IF_Stransmit_Response+0xb8>)
 8001f38:	f001 faf1 	bl	800351e <HAL_GPIO_TogglePin>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//HAL_Delay(1000);
		return LORA_OKE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <LORA_IF_Stransmit_Response+0xa2>
	}
	return LORA_ERROR;
 8001f40:	2302      	movs	r3, #2
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	20000020 	.word	0x20000020
 8001f54:	200002b8 	.word	0x200002b8
 8001f58:	40010c00 	.word	0x40010c00

08001f5c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e030      	b.n	8001fce <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	441a      	add	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3301      	adds	r3, #1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	441a      	add	r2, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3301      	adds	r3, #1
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	440b      	add	r3, r1
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	440b      	add	r3, r1
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	441a      	add	r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d9cb      	bls.n	8001f6c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e081      	b.n	80020de <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3303      	adds	r3, #3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d125      	bne.n	8002066 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800201a:	7b3b      	ldrb	r3, [r7, #12]
 800201c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800201e:	7b7b      	ldrb	r3, [r7, #13]
 8002020:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800202e:	7b3b      	ldrb	r3, [r7, #12]
 8002030:	461a      	mov	r2, r3
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <KeyExpansion+0x198>)
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8002038:	7b7b      	ldrb	r3, [r7, #13]
 800203a:	461a      	mov	r2, r3
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <KeyExpansion+0x198>)
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8002042:	7bbb      	ldrb	r3, [r7, #14]
 8002044:	461a      	mov	r2, r3
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <KeyExpansion+0x198>)
 8002048:	5c9b      	ldrb	r3, [r3, r2]
 800204a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	461a      	mov	r2, r3
 8002050:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <KeyExpansion+0x198>)
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002056:	7b3a      	ldrb	r2, [r7, #12]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	4926      	ldr	r1, [pc, #152]	; (80020f8 <KeyExpansion+0x19c>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	4053      	eors	r3, r2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3b04      	subs	r3, #4
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	7819      	ldrb	r1, [r3, #0]
 800207c:	7b3a      	ldrb	r2, [r7, #12]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4403      	add	r3, r0
 8002084:	404a      	eors	r2, r1
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3301      	adds	r3, #1
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	7819      	ldrb	r1, [r3, #0]
 8002094:	7b7a      	ldrb	r2, [r7, #13]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3301      	adds	r3, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4403      	add	r3, r0
 800209e:	404a      	eors	r2, r1
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	3302      	adds	r3, #2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	7bba      	ldrb	r2, [r7, #14]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	3302      	adds	r3, #2
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4403      	add	r3, r0
 80020b8:	404a      	eors	r2, r1
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	3303      	adds	r3, #3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	7819      	ldrb	r1, [r3, #0]
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3303      	adds	r3, #3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4403      	add	r3, r0
 80020d2:	404a      	eors	r2, r1
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3301      	adds	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2b2b      	cmp	r3, #43	; 0x2b
 80020e2:	f67f af7a 	bls.w	8001fda <KeyExpansion+0x7e>
  }
}
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	3724      	adds	r7, #36	; 0x24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	0800463c 	.word	0x0800463c
 80020f8:	0800473c 	.word	0x0800473c

080020fc <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff25 	bl	8001f5c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	33b0      	adds	r3, #176	; 0xb0
 8002116:	2210      	movs	r2, #16
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fa64 	bl	80045e8 <memcpy>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
 800213a:	e027      	b.n	800218c <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 800213c:	2300      	movs	r3, #0
 800213e:	75bb      	strb	r3, [r7, #22]
 8002140:	e01e      	b.n	8002180 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002142:	7dfa      	ldrb	r2, [r7, #23]
 8002144:	7dbb      	ldrb	r3, [r7, #22]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	440a      	add	r2, r1
 800214c:	4413      	add	r3, r2
 800214e:	7818      	ldrb	r0, [r3, #0]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	009a      	lsls	r2, r3, #2
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	4413      	add	r3, r2
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	7dbb      	ldrb	r3, [r7, #22]
 800215c:	4413      	add	r3, r2
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	7819      	ldrb	r1, [r3, #0]
 8002166:	7dfa      	ldrb	r2, [r7, #23]
 8002168:	7dbb      	ldrb	r3, [r7, #22]
 800216a:	4041      	eors	r1, r0
 800216c:	b2c8      	uxtb	r0, r1
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	440a      	add	r2, r1
 8002174:	4413      	add	r3, r2
 8002176:	4602      	mov	r2, r0
 8002178:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800217a:	7dbb      	ldrb	r3, [r7, #22]
 800217c:	3301      	adds	r3, #1
 800217e:	75bb      	strb	r3, [r7, #22]
 8002180:	7dbb      	ldrb	r3, [r7, #22]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9dd      	bls.n	8002142 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	3301      	adds	r3, #1
 800218a:	75fb      	strb	r3, [r7, #23]
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d9d4      	bls.n	800213c <AddRoundKey+0x14>
    }
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e01d      	b.n	80021ea <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80021ae:	2300      	movs	r3, #0
 80021b0:	73bb      	strb	r3, [r7, #14]
 80021b2:	e014      	b.n	80021de <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80021b4:	7bba      	ldrb	r2, [r7, #14]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	440a      	add	r2, r1
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	7bba      	ldrb	r2, [r7, #14]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <SubBytes+0x5c>)
 80021ca:	5c08      	ldrb	r0, [r1, r0]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	440a      	add	r2, r1
 80021d2:	4413      	add	r3, r2
 80021d4:	4602      	mov	r2, r0
 80021d6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3301      	adds	r3, #1
 80021dc:	73bb      	strb	r3, [r7, #14]
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d9e7      	bls.n	80021b4 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	3301      	adds	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d9de      	bls.n	80021ae <SubBytes+0xe>
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	0800463c 	.word	0x0800463c

08002200 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	795a      	ldrb	r2, [r3, #5]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7a5a      	ldrb	r2, [r3, #9]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7b5a      	ldrb	r2, [r3, #13]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7a9a      	ldrb	r2, [r3, #10]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	799b      	ldrb	r3, [r3, #6]
 8002244:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7b9a      	ldrb	r2, [r3, #14]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	78db      	ldrb	r3, [r3, #3]
 8002258:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7bda      	ldrb	r2, [r3, #15]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7ada      	ldrb	r2, [r3, #11]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	79da      	ldrb	r2, [r3, #7]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	71da      	strb	r2, [r3, #7]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	b25a      	sxtb	r2, r3
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	440b      	add	r3, r1
 800229e:	4619      	mov	r1, r3
 80022a0:	00c8      	lsls	r0, r1, #3
 80022a2:	4619      	mov	r1, r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	440b      	add	r3, r1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	4053      	eors	r3, r2
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e0a4      	b.n	8002414 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80022d2:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	4053      	eors	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	4053      	eors	r3, r2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	78db      	ldrb	r3, [r3, #3]
 8002302:	4053      	eors	r3, r2
 8002304:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	4053      	eors	r3, r2
 800231a:	733b      	strb	r3, [r7, #12]
 800231c:	7b3b      	ldrb	r3, [r7, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffaf 	bl	8002282 <xtime>
 8002324:	4603      	mov	r3, r0
 8002326:	733b      	strb	r3, [r7, #12]
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8002330:	7b3a      	ldrb	r2, [r7, #12]
 8002332:	7b7b      	ldrb	r3, [r7, #13]
 8002334:	4053      	eors	r3, r2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	404b      	eors	r3, r1
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	785a      	ldrb	r2, [r3, #1]
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	4053      	eors	r3, r2
 800235a:	733b      	strb	r3, [r7, #12]
 800235c:	7b3b      	ldrb	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff8f 	bl	8002282 <xtime>
 8002364:	4603      	mov	r3, r0
 8002366:	733b      	strb	r3, [r7, #12]
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	7859      	ldrb	r1, [r3, #1]
 8002372:	7b3a      	ldrb	r2, [r7, #12]
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	4053      	eors	r3, r2
 8002378:	b2da      	uxtb	r2, r3
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	404a      	eors	r2, r1
 800237e:	b2d1      	uxtb	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	789a      	ldrb	r2, [r3, #2]
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	78db      	ldrb	r3, [r3, #3]
 800239e:	4053      	eors	r3, r2
 80023a0:	733b      	strb	r3, [r7, #12]
 80023a2:	7b3b      	ldrb	r3, [r7, #12]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff6c 	bl	8002282 <xtime>
 80023aa:	4603      	mov	r3, r0
 80023ac:	733b      	strb	r3, [r7, #12]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	7899      	ldrb	r1, [r3, #2]
 80023b8:	7b3a      	ldrb	r2, [r7, #12]
 80023ba:	7b7b      	ldrb	r3, [r7, #13]
 80023bc:	4053      	eors	r3, r2
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	404a      	eors	r2, r1
 80023c4:	b2d1      	uxtb	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	460a      	mov	r2, r1
 80023ce:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	78da      	ldrb	r2, [r3, #3]
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	4053      	eors	r3, r2
 80023de:	733b      	strb	r3, [r7, #12]
 80023e0:	7b3b      	ldrb	r3, [r7, #12]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff4d 	bl	8002282 <xtime>
 80023e8:	4603      	mov	r3, r0
 80023ea:	733b      	strb	r3, [r7, #12]
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	78d9      	ldrb	r1, [r3, #3]
 80023f6:	7b3a      	ldrb	r2, [r7, #12]
 80023f8:	7b7b      	ldrb	r3, [r7, #13]
 80023fa:	4053      	eors	r3, r2
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	404a      	eors	r2, r1
 8002402:	b2d1      	uxtb	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	460a      	mov	r2, r1
 800240c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3301      	adds	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b03      	cmp	r3, #3
 8002418:	f67f af57 	bls.w	80022ca <MixColumns+0xe>
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff fe75 	bl	8002128 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff feac 	bl	80021a0 <SubBytes>
    ShiftRows(state);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fed9 	bl	8002200 <ShiftRows>
    if (round == Nr) {
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b0a      	cmp	r3, #10
 8002452:	d00c      	beq.n	800246e <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff31 	bl	80022bc <MixColumns>
    AddRoundKey(round, state, RoundKey);
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe61 	bl	8002128 <AddRoundKey>
  for (round = 1; ; ++round)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	3301      	adds	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 800246c:	e7e9      	b.n	8002442 <Cipher+0x1c>
      break;
 800246e:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	200a      	movs	r0, #10
 8002476:	f7ff fe57 	bl	8002128 <AddRoundKey>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8002482:	b590      	push	{r4, r7, lr}
 8002484:	b08b      	sub	sp, #44	; 0x2c
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	2310      	movs	r3, #16
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	e04e      	b.n	8002536 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d136      	bne.n	800250c <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	33b0      	adds	r3, #176	; 0xb0
 80024a2:	f107 0410 	add.w	r4, r7, #16
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffb4 	bl	8002426 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80024be:	230f      	movs	r3, #15
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	e01e      	b.n	8002502 <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	4413      	add	r3, r2
 80024ca:	33b0      	adds	r3, #176	; 0xb0
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2bff      	cmp	r3, #255	; 0xff
 80024d0:	d106      	bne.n	80024e0 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	4413      	add	r3, r2
 80024d8:	33b0      	adds	r3, #176	; 0xb0
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
          continue;
 80024de:	e00d      	b.n	80024fc <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	4413      	add	r3, r2
 80024e6:	33b0      	adds	r3, #176	; 0xb0
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2d9      	uxtb	r1, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	4413      	add	r3, r2
 80024f4:	33b0      	adds	r3, #176	; 0xb0
 80024f6:	460a      	mov	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
        break;
 80024fa:	e005      	b.n	8002508 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	3b01      	subs	r3, #1
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	dadd      	bge.n	80024c4 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	4413      	add	r3, r2
 8002512:	7819      	ldrb	r1, [r3, #0]
 8002514:	f107 0210 	add.w	r2, r7, #16
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	4413      	add	r3, r2
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68b8      	ldr	r0, [r7, #8]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	4403      	add	r3, r0
 8002524:	404a      	eors	r2, r1
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	3301      	adds	r3, #1
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d3ac      	bcc.n	8002498 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	372c      	adds	r7, #44	; 0x2c
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254c:	f000 fa50 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002550:	f000 f82a 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002554:	f000 f8a6 	bl	80026a4 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 8002558:	f000 f86e 	bl	8002638 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <main+0x4c>)
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <main+0x50>)
 8002560:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <main+0x4c>)
 8002564:	2202      	movs	r2, #2
 8002566:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <main+0x4c>)
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <main+0x54>)
 800256c:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <main+0x4c>)
 8002570:	2210      	movs	r2, #16
 8002572:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <main+0x4c>)
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <main+0x50>)
 8002578:	605a      	str	r2, [r3, #4]
  SX1278_hw.spi = &hspi1;
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <main+0x4c>)
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <main+0x58>)
 800257e:	619a      	str	r2, [r3, #24]
  SX1278_hw.reset.pin = RESET_Pin;
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <main+0x4c>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
  SX1278.hw = &SX1278_hw;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <main+0x5c>)
 8002588:	4a02      	ldr	r2, [pc, #8]	; (8002594 <main+0x4c>)
 800258a:	601a      	str	r2, [r3, #0]
//  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_9,
//  			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 16);
  BL_voidBootLoader_Init();
 800258c:	f7fe f8be 	bl	800070c <BL_voidBootLoader_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002590:	e7fe      	b.n	8002590 <main+0x48>
 8002592:	bf00      	nop
 8002594:	200003d0 	.word	0x200003d0
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40010800 	.word	0x40010800
 80025a0:	20000378 	.word	0x20000378
 80025a4:	200003ec 	.word	0x200003ec

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b090      	sub	sp, #64	; 0x40
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0318 	add.w	r3, r7, #24
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 ffea 	bl	8004590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025ca:	2309      	movs	r3, #9
 80025cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d8:	2301      	movs	r3, #1
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025dc:	2301      	movs	r3, #1
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e0:	2302      	movs	r3, #2
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ffc3 	bl	8003580 <HAL_RCC_OscConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002600:	f000 f8fa 	bl	80027f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002604:	230f      	movs	r3, #15
 8002606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002608:	2302      	movs	r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fa30 	bl	8003a84 <HAL_RCC_ClockConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800262a:	f000 f8e5 	bl	80027f8 <Error_Handler>
  }
}
 800262e:	bf00      	nop
 8002630:	3740      	adds	r7, #64	; 0x40
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_SPI1_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <MX_SPI1_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_SPI1_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_SPI1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_SPI1_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_SPI1_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_SPI1_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_SPI1_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_SPI1_Init+0x64>)
 800266c:	2210      	movs	r2, #16
 800266e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_SPI1_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_SPI1_Init+0x64>)
 800268a:	f001 fb57 	bl	8003d3c <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002694:	f000 f8b0 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000378 	.word	0x20000378
 80026a0:	40013000 	.word	0x40013000

080026a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a49      	ldr	r2, [pc, #292]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d0:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a43      	ldr	r2, [pc, #268]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <MX_GPIO_Init+0x140>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <MX_GPIO_Init+0x140>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <MX_GPIO_Init+0x140>)
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <MX_GPIO_Init+0x140>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800271e:	4832      	ldr	r0, [pc, #200]	; (80027e8 <MX_GPIO_Init+0x144>)
 8002720:	f000 fee5 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800272a:	4830      	ldr	r0, [pc, #192]	; (80027ec <MX_GPIO_Init+0x148>)
 800272c:	f000 fedf 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|MODE_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	f240 3105 	movw	r1, #773	; 0x305
 8002736:	482e      	ldr	r0, [pc, #184]	; (80027f0 <MX_GPIO_Init+0x14c>)
 8002738:	f000 fed9 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2302      	movs	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	4824      	ldr	r0, [pc, #144]	; (80027e8 <MX_GPIO_Init+0x144>)
 8002756:	f000 fd2f 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = NSS_Pin|GPIO_PIN_9|GPIO_PIN_10;
 800275a:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 800275e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2302      	movs	r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	4619      	mov	r1, r3
 8002772:	481e      	ldr	r0, [pc, #120]	; (80027ec <MX_GPIO_Init+0x148>)
 8002774:	f000 fd20 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|MODE_Pin;
 8002778:	2305      	movs	r3, #5
 800277a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2302      	movs	r3, #2
 8002786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4619      	mov	r1, r3
 800278e:	4818      	ldr	r0, [pc, #96]	; (80027f0 <MX_GPIO_Init+0x14c>)
 8002790:	f000 fd12 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002794:	2302      	movs	r3, #2
 8002796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <MX_GPIO_Init+0x150>)
 800279a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4619      	mov	r1, r3
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <MX_GPIO_Init+0x14c>)
 80027a8:	f000 fd06 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	4619      	mov	r1, r3
 80027c4:	480a      	ldr	r0, [pc, #40]	; (80027f0 <MX_GPIO_Init+0x14c>)
 80027c6:	f000 fcf7 	bl	80031b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2007      	movs	r0, #7
 80027d0:	f000 faad 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027d4:	2007      	movs	r0, #7
 80027d6:	f000 fac6 	bl	8002d66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	10110000 	.word	0x10110000

080027f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027fc:	b672      	cpsid	i
}
 80027fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002800:	e7fe      	b.n	8002800 <Error_Handler+0x8>

08002802 <copy_Array_BL>:
	uint8* prtA = a + 16 ;
	for(uint8 i = 0 ; i < size ; i++){
		*(prtA++) = *(b++);
	}
}
void copy_Array_BL(uint8* a , uint8* b , uint32 size){
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
	uint8* prtB = b + 16 ;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3310      	adds	r3, #16
 8002812:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8002814:	2300      	movs	r3, #0
 8002816:	74fb      	strb	r3, [r7, #19]
 8002818:	e00a      	b.n	8002830 <copy_Array_BL+0x2e>
		*(a++) = *(prtB++);
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	1c53      	adds	r3, r2, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	60f9      	str	r1, [r7, #12]
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	3301      	adds	r3, #1
 800282e:	74fb      	strb	r3, [r7, #19]
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f0      	bhi.n	800281a <copy_Array_BL+0x18>
	}
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_MspInit+0x5c>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_MspInit+0x5c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6193      	str	r3, [r2, #24]
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_MspInit+0x5c>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_MspInit+0x5c>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_MspInit+0x5c>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_MspInit+0x5c>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_MspInit+0x60>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_MspInit+0x60>)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010000 	.word	0x40010000

080028a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d12f      	bne.n	8002928 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028f8:	23a0      	movs	r3, #160	; 0xa0
 80028fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4619      	mov	r1, r3
 800290a:	480b      	ldr	r0, [pc, #44]	; (8002938 <HAL_SPI_MspInit+0x90>)
 800290c:	f000 fc54 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002910:	2340      	movs	r3, #64	; 0x40
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_SPI_MspInit+0x90>)
 8002924:	f000 fc48 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40013000 	.word	0x40013000
 8002934:	40021000 	.word	0x40021000
 8002938:	40010800 	.word	0x40010800

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002982:	f000 f899 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}

0800298a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800298e:	2002      	movs	r0, #2
 8002990:	f000 fdde 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029a4:	f7ff fff8 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029aa:	490c      	ldr	r1, [pc, #48]	; (80029dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b0:	e002      	b.n	80029b8 <LoopCopyDataInit>

080029b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b6:	3304      	adds	r3, #4

080029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029bc:	d3f9      	bcc.n	80029b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029c0:	4c09      	ldr	r4, [pc, #36]	; (80029e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c4:	e001      	b.n	80029ca <LoopFillZerobss>

080029c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c8:	3204      	adds	r2, #4

080029ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029cc:	d3fb      	bcc.n	80029c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ce:	f001 fde7 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d2:	f7ff fdb9 	bl	8002548 <main>
  bx lr
 80029d6:	4770      	bx	lr
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80029e0:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 80029e4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80029e8:	20000528 	.word	0x20000528

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x28>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f989 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	200f      	movs	r0, #15
 8002a08:	f000 f826 	bl	8002a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff ff1a 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_DeInit+0x2c>)
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
 8002a26:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_DeInit+0x2c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_DeInit+0x2c>)
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <HAL_DeInit+0x2c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002a3c:	f000 f806 	bl	8002a4c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x54>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_InitTick+0x58>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f991 	bl	8002d9e <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00e      	b.n	8002aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d80a      	bhi.n	8002aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f000 f94b 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_InitTick+0x5c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000040 	.word	0x20000040
 8002ab0:	20000048 	.word	0x20000048
 8002ab4:	20000044 	.word	0x20000044

08002ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_IncTick+0x1c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_IncTick+0x20>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_IncTick+0x20>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	20000048 	.word	0x20000048
 8002ad8:	20000500 	.word	0x20000500

08002adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <HAL_GetTick+0x10>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000500 	.word	0x20000500

08002af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff fff0 	bl	8002adc <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d005      	beq.n	8002b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_Delay+0x44>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b16:	bf00      	nop
 8002b18:	f7ff ffe0 	bl	8002adc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d8f7      	bhi.n	8002b18 <HAL_Delay+0x28>
  {
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000048 	.word	0x20000048

08002b38 <__NVIC_SetPriorityGrouping>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <__NVIC_EnableIRQ+0x34>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_DisableIRQ>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	db12      	blt.n	8002c0c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	490a      	ldr	r1, [pc, #40]	; (8002c18 <__NVIC_DisableIRQ+0x44>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfa:	3320      	adds	r3, #32
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c00:	f3bf 8f4f 	dsb	sy
}
 8002c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c06:	f3bf 8f6f 	isb	sy
}
 8002c0a:	bf00      	nop
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7ff ff90 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff09 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff1e 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff90 	bl	8002c70 <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5f 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff11 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff1f 	bl	8002bd4 <__NVIC_DisableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff94 	bl	8002cd4 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_FLASH_Program+0xd8>)
 8002dd4:	7e1b      	ldrb	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_FLASH_Program+0x26>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e054      	b.n	8002e88 <HAL_FLASH_Program+0xd0>
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_FLASH_Program+0xd8>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002de8:	f000 f8a8 	bl	8002f3c <FLASH_WaitForLastOperation>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d144      	bne.n	8002e80 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	757b      	strb	r3, [r7, #21]
 8002e00:	e007      	b.n	8002e12 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d102      	bne.n	8002e0e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	757b      	strb	r3, [r7, #21]
 8002e0c:	e001      	b.n	8002e12 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	75bb      	strb	r3, [r7, #22]
 8002e16:	e02d      	b.n	8002e74 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002e18:	7dbb      	ldrb	r3, [r7, #22]
 8002e1a:	005a      	lsls	r2, r3, #1
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	eb02 0c03 	add.w	ip, r2, r3
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	0119      	lsls	r1, r3, #4
 8002e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2a:	f1c1 0620 	rsb	r6, r1, #32
 8002e2e:	f1a1 0020 	sub.w	r0, r1, #32
 8002e32:	fa22 f401 	lsr.w	r4, r2, r1
 8002e36:	fa03 f606 	lsl.w	r6, r3, r6
 8002e3a:	4334      	orrs	r4, r6
 8002e3c:	fa23 f000 	lsr.w	r0, r3, r0
 8002e40:	4304      	orrs	r4, r0
 8002e42:	fa23 f501 	lsr.w	r5, r3, r1
 8002e46:	b2a3      	uxth	r3, r4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4660      	mov	r0, ip
 8002e4c:	f000 f85a 	bl	8002f04 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e54:	f000 f872 	bl	8002f3c <FLASH_WaitForLastOperation>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_FLASH_Program+0xdc>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_FLASH_Program+0xdc>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	3301      	adds	r3, #1
 8002e72:	75bb      	strb	r3, [r7, #22]
 8002e74:	7dba      	ldrb	r2, [r7, #22]
 8002e76:	7d7b      	ldrb	r3, [r7, #21]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3cd      	bcc.n	8002e18 <HAL_FLASH_Program+0x60>
 8002e7c:	e000      	b.n	8002e80 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002e7e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_FLASH_Program+0xd8>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	761a      	strb	r2, [r3, #24]

  return status;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e90:	20000508 	.word	0x20000508
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_FLASH_Unlock+0x40>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_FLASH_Unlock+0x40>)
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_FLASH_Unlock+0x44>)
 8002eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_FLASH_Unlock+0x40>)
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_FLASH_Unlock+0x48>)
 8002eb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_FLASH_Unlock+0x40>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002eca:	79fb      	ldrb	r3, [r7, #7]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	45670123 	.word	0x45670123
 8002ee0:	cdef89ab 	.word	0xcdef89ab

08002ee4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_FLASH_Lock+0x1c>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_FLASH_Lock+0x1c>)
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000

08002f04 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <FLASH_Program_HalfWord+0x30>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <FLASH_Program_HalfWord+0x34>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <FLASH_Program_HalfWord+0x34>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	887a      	ldrh	r2, [r7, #2]
 8002f26:	801a      	strh	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000508 	.word	0x20000508
 8002f38:	40022000 	.word	0x40022000

08002f3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fdca 	bl	8002adc <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f4a:	e010      	b.n	8002f6e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d00c      	beq.n	8002f6e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <FLASH_WaitForLastOperation+0x2e>
 8002f5a:	f7ff fdbf 	bl	8002adc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d201      	bcs.n	8002f6e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e025      	b.n	8002fba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e8      	bne.n	8002f4c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002f88:	2220      	movs	r2, #32
 8002f8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <FLASH_WaitForLastOperation+0x88>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002fb0:	f000 f80a 	bl	8002fc8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002fde:	4b21      	ldr	r3, [pc, #132]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8002fe8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8003008:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <FLASH_SetErrorCode+0x9c>)
 8003028:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <FLASH_SetErrorCode+0x98>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f240 1201 	movw	r2, #257	; 0x101
 800303c:	4293      	cmp	r3, r2
 800303e:	d106      	bne.n	800304e <FLASH_SetErrorCode+0x86>
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	61d3      	str	r3, [r2, #28]
}  
 800304c:	e002      	b.n	8003054 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800304e:	4a04      	ldr	r2, [pc, #16]	; (8003060 <FLASH_SetErrorCode+0x98>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60d3      	str	r3, [r2, #12]
}  
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000
 8003064:	20000508 	.word	0x20000508

08003068 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_FLASHEx_Erase+0xd0>)
 800307c:	7e1b      	ldrb	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_FLASHEx_Erase+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e053      	b.n	800312e <HAL_FLASHEx_Erase+0xc6>
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <HAL_FLASHEx_Erase+0xd0>)
 8003088:	2201      	movs	r2, #1
 800308a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d116      	bne.n	80030c2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003094:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003098:	f7ff ff50 	bl	8002f3c <FLASH_WaitForLastOperation>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d141      	bne.n	8003126 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 f84c 	bl	8003140 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030ac:	f7ff ff46 	bl	8002f3c <FLASH_WaitForLastOperation>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_FLASHEx_Erase+0xd4>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	4a20      	ldr	r2, [pc, #128]	; (800313c <HAL_FLASHEx_Erase+0xd4>)
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	6113      	str	r3, [r2, #16]
 80030c0:	e031      	b.n	8003126 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80030c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030c6:	f7ff ff39 	bl	8002f3c <FLASH_WaitForLastOperation>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d12a      	bne.n	8003126 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	e019      	b.n	8003114 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80030e0:	68b8      	ldr	r0, [r7, #8]
 80030e2:	f000 f849 	bl	8003178 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030ea:	f7ff ff27 	bl	8002f3c <FLASH_WaitForLastOperation>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_FLASHEx_Erase+0xd4>)
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_FLASHEx_Erase+0xd4>)
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	601a      	str	r2, [r3, #0]
            break;
 800310a:	e00c      	b.n	8003126 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003112:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	029a      	lsls	r2, r3, #10
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4413      	add	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3dc      	bcc.n	80030e0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_FLASHEx_Erase+0xd0>)
 8003128:	2200      	movs	r2, #0
 800312a:	761a      	strb	r2, [r3, #24]

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000508 	.word	0x20000508
 800313c:	40022000 	.word	0x40022000

08003140 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <FLASH_MassErase+0x30>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <FLASH_MassErase+0x34>)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <FLASH_MassErase+0x34>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <FLASH_MassErase+0x34>)
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <FLASH_MassErase+0x34>)
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000508 	.word	0x20000508
 8003174:	40022000 	.word	0x40022000

08003178 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <FLASH_PageErase+0x38>)
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <FLASH_PageErase+0x3c>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <FLASH_PageErase+0x3c>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <FLASH_PageErase+0x3c>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <FLASH_PageErase+0x3c>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <FLASH_PageErase+0x3c>)
 800319e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000508 	.word	0x20000508
 80031b4:	40022000 	.word	0x40022000

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ca:	e169      	b.n	80034a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031cc:	2201      	movs	r2, #1
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8158 	bne.w	800349a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a9a      	ldr	r2, [pc, #616]	; (8003458 <HAL_GPIO_Init+0x2a0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d05e      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 80031f4:	4a98      	ldr	r2, [pc, #608]	; (8003458 <HAL_GPIO_Init+0x2a0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d875      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 80031fa:	4a98      	ldr	r2, [pc, #608]	; (800345c <HAL_GPIO_Init+0x2a4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d058      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003200:	4a96      	ldr	r2, [pc, #600]	; (800345c <HAL_GPIO_Init+0x2a4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d86f      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003206:	4a96      	ldr	r2, [pc, #600]	; (8003460 <HAL_GPIO_Init+0x2a8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d052      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 800320c:	4a94      	ldr	r2, [pc, #592]	; (8003460 <HAL_GPIO_Init+0x2a8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d869      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003212:	4a94      	ldr	r2, [pc, #592]	; (8003464 <HAL_GPIO_Init+0x2ac>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d04c      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003218:	4a92      	ldr	r2, [pc, #584]	; (8003464 <HAL_GPIO_Init+0x2ac>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d863      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 800321e:	4a92      	ldr	r2, [pc, #584]	; (8003468 <HAL_GPIO_Init+0x2b0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d046      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003224:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_GPIO_Init+0x2b0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d85d      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 800322a:	2b12      	cmp	r3, #18
 800322c:	d82a      	bhi.n	8003284 <HAL_GPIO_Init+0xcc>
 800322e:	2b12      	cmp	r3, #18
 8003230:	d859      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_GPIO_Init+0x80>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	080032b3 	.word	0x080032b3
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800329f 	.word	0x0800329f
 8003244:	080032e1 	.word	0x080032e1
 8003248:	080032e7 	.word	0x080032e7
 800324c:	080032e7 	.word	0x080032e7
 8003250:	080032e7 	.word	0x080032e7
 8003254:	080032e7 	.word	0x080032e7
 8003258:	080032e7 	.word	0x080032e7
 800325c:	080032e7 	.word	0x080032e7
 8003260:	080032e7 	.word	0x080032e7
 8003264:	080032e7 	.word	0x080032e7
 8003268:	080032e7 	.word	0x080032e7
 800326c:	080032e7 	.word	0x080032e7
 8003270:	080032e7 	.word	0x080032e7
 8003274:	080032e7 	.word	0x080032e7
 8003278:	080032e7 	.word	0x080032e7
 800327c:	08003295 	.word	0x08003295
 8003280:	080032a9 	.word	0x080032a9
 8003284:	4a79      	ldr	r2, [pc, #484]	; (800346c <HAL_GPIO_Init+0x2b4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800328a:	e02c      	b.n	80032e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	623b      	str	r3, [r7, #32]
          break;
 8003292:	e029      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	3304      	adds	r3, #4
 800329a:	623b      	str	r3, [r7, #32]
          break;
 800329c:	e024      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	3308      	adds	r3, #8
 80032a4:	623b      	str	r3, [r7, #32]
          break;
 80032a6:	e01f      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	330c      	adds	r3, #12
 80032ae:	623b      	str	r3, [r7, #32]
          break;
 80032b0:	e01a      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032ba:	2304      	movs	r3, #4
 80032bc:	623b      	str	r3, [r7, #32]
          break;
 80032be:	e013      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032c8:	2308      	movs	r3, #8
 80032ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	611a      	str	r2, [r3, #16]
          break;
 80032d2:	e009      	b.n	80032e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d4:	2308      	movs	r3, #8
 80032d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	615a      	str	r2, [r3, #20]
          break;
 80032de:	e003      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
          break;
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          break;
 80032e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2bff      	cmp	r3, #255	; 0xff
 80032ec:	d801      	bhi.n	80032f2 <HAL_GPIO_Init+0x13a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_Init+0x13e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2bff      	cmp	r3, #255	; 0xff
 80032fc:	d802      	bhi.n	8003304 <HAL_GPIO_Init+0x14c>
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	e002      	b.n	800330a <HAL_GPIO_Init+0x152>
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	3b08      	subs	r3, #8
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	210f      	movs	r1, #15
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80b1 	beq.w	800349a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003338:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a4c      	ldr	r2, [pc, #304]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6193      	str	r3, [r2, #24]
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003350:	4a48      	ldr	r2, [pc, #288]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a40      	ldr	r2, [pc, #256]	; (8003478 <HAL_GPIO_Init+0x2c0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_GPIO_Init+0x1ec>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3f      	ldr	r2, [pc, #252]	; (800347c <HAL_GPIO_Init+0x2c4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00d      	beq.n	80033a0 <HAL_GPIO_Init+0x1e8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3e      	ldr	r2, [pc, #248]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <HAL_GPIO_Init+0x1e4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <HAL_GPIO_Init+0x2cc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_GPIO_Init+0x1e0>
 8003394:	2303      	movs	r3, #3
 8003396:	e006      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 8003398:	2304      	movs	r3, #4
 800339a:	e004      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 800339c:	2302      	movs	r3, #2
 800339e:	e002      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 80033a4:	2300      	movs	r3, #0
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	f002 0203 	and.w	r2, r2, #3
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	4093      	lsls	r3, r2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033b6:	492f      	ldr	r1, [pc, #188]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	3302      	adds	r3, #2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	492c      	ldr	r1, [pc, #176]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4928      	ldr	r1, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	4922      	ldr	r1, [pc, #136]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	491e      	ldr	r1, [pc, #120]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003410:	4013      	ands	r3, r2
 8003412:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4918      	ldr	r1, [pc, #96]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4914      	ldr	r1, [pc, #80]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d021      	beq.n	800348c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
 8003454:	e021      	b.n	800349a <HAL_GPIO_Init+0x2e2>
 8003456:	bf00      	nop
 8003458:	10320000 	.word	0x10320000
 800345c:	10310000 	.word	0x10310000
 8003460:	10220000 	.word	0x10220000
 8003464:	10210000 	.word	0x10210000
 8003468:	10120000 	.word	0x10120000
 800346c:	10110000 	.word	0x10110000
 8003470:	40021000 	.word	0x40021000
 8003474:	40010000 	.word	0x40010000
 8003478:	40010800 	.word	0x40010800
 800347c:	40010c00 	.word	0x40010c00
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_GPIO_Init+0x304>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	43db      	mvns	r3, r3
 8003494:	4909      	ldr	r1, [pc, #36]	; (80034bc <HAL_GPIO_Init+0x304>)
 8003496:	4013      	ands	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f ae8e 	bne.w	80031cc <HAL_GPIO_Init+0x14>
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	372c      	adds	r7, #44	; 0x2c
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e001      	b.n	80034e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]
 80034fa:	4613      	mov	r3, r2
 80034fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034fe:	787b      	ldrb	r3, [r7, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800350a:	e003      	b.n	8003514 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	041a      	lsls	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	611a      	str	r2, [r3, #16]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4013      	ands	r3, r2
 8003536:	041a      	lsls	r2, r3, #16
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43d9      	mvns	r1, r3
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	400b      	ands	r3, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	611a      	str	r2, [r3, #16]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	; (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd fe8c 	bl	800128c <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e272      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8087 	beq.w	80036ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a0:	4b92      	ldr	r3, [pc, #584]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ac:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d112      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
 80035b8:	4b8c      	ldr	r3, [pc, #560]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d10b      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06c      	beq.n	80036ac <HAL_RCC_OscConfig+0x12c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d168      	bne.n	80036ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e24c      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x76>
 80035e8:	4b80      	ldr	r3, [pc, #512]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7f      	ldr	r2, [pc, #508]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e02e      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a77      	ldr	r2, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e01d      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0xbc>
 8003622:	4b72      	ldr	r3, [pc, #456]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a71      	ldr	r2, [pc, #452]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6e      	ldr	r2, [pc, #440]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 800363c:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6a      	ldr	r2, [pc, #424]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a67      	ldr	r2, [pc, #412]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7ff fa3e 	bl	8002adc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7ff fa3a 	bl	8002adc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e200      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b5d      	ldr	r3, [pc, #372]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xe4>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7ff fa2a 	bl	8002adc <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7ff fa26 	bl	8002adc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1ec      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x10c>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d063      	beq.n	8003782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d11c      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
 80036d2:	4b46      	ldr	r3, [pc, #280]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d116      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e1c0      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4939      	ldr	r1, [pc, #228]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	e03a      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7ff f9df 	bl	8002adc <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7ff f9db 	bl	8002adc <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1a1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4927      	ldr	r1, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	e015      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7ff f9be 	bl	8002adc <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003764:	f7ff f9ba 	bl	8002adc <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e180      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03a      	beq.n	8003804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d019      	beq.n	80037ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7ff f99e 	bl	8002adc <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7ff f99a 	bl	8002adc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e160      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f000 fa9c 	bl	8003d00 <RCC_Delay>
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7ff f984 	bl	8002adc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7ff f980 	bl	8002adc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d908      	bls.n	80037f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e146      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	42420000 	.word	0x42420000
 80037f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b92      	ldr	r3, [pc, #584]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e9      	bne.n	80037d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a6 	beq.w	800395e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a87      	ldr	r2, [pc, #540]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]
 800382e:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7e      	ldr	r2, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7ff f941 	bl	8002adc <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7ff f93d 	bl	8002adc <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e103      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x312>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6213      	str	r3, [r2, #32]
 8003890:	e02d      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x334>
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6213      	str	r3, [r2, #32]
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a66      	ldr	r2, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	6213      	str	r3, [r2, #32]
 80038b2:	e01c      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x356>
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a60      	ldr	r2, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	6213      	str	r3, [r2, #32]
 80038c8:	4b5e      	ldr	r3, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a5d      	ldr	r2, [pc, #372]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6213      	str	r3, [r2, #32]
 80038d4:	e00b      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038d6:	4b5b      	ldr	r3, [pc, #364]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7ff f8f1 	bl	8002adc <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7ff f8ed 	bl	8002adc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ee      	beq.n	80038fe <HAL_RCC_OscConfig+0x37e>
 8003920:	e014      	b.n	800394c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7ff f8db 	bl	8002adc <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7ff f8d7 	bl	8002adc <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e09b      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ee      	bne.n	800392a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d061      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d146      	bne.n	8003a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7ff f8ab 	bl	8002adc <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7ff f8a7 	bl	8002adc <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e06d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a19      	ldr	r1, [r3, #32]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	430b      	orrs	r3, r1
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7ff f87b 	bl	8002adc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7ff f877 	bl	8002adc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x46a>
 8003a08:	e035      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7ff f864 	bl	8002adc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7ff f860 	bl	8002adc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e026      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x498>
 8003a36:	e01e      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e019      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x500>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0d0      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4965      	ldr	r1, [pc, #404]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b8      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae0:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	494d      	ldr	r1, [pc, #308]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d040      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d115      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e073      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06b      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4936      	ldr	r1, [pc, #216]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fe ffb2 	bl	8002adc <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fe ffae 	bl	8002adc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e053      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d210      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4922      	ldr	r1, [pc, #136]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4916      	ldr	r1, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490e      	ldr	r1, [pc, #56]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c12:	f000 f821 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490a      	ldr	r1, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1cc>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe ff10 	bl	8002a58 <HAL_InitTick>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08004748 	.word	0x08004748
 8003c50:	20000040 	.word	0x20000040
 8003c54:	20000044 	.word	0x20000044

08003c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x30>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x36>
 8003c86:	e027      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8a:	613b      	str	r3, [r7, #16]
      break;
 8003c8c:	e027      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0c5b      	lsrs	r3, r3, #17
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cda:	613b      	str	r3, [r7, #16]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	693b      	ldr	r3, [r7, #16]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	007a1200 	.word	0x007a1200
 8003cf4:	08004758 	.word	0x08004758
 8003cf8:	08004768 	.word	0x08004768
 8003cfc:	003d0900 	.word	0x003d0900

08003d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <RCC_Delay+0x34>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <RCC_Delay+0x38>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d1c:	bf00      	nop
  }
  while (Delay --);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	60fa      	str	r2, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <RCC_Delay+0x1c>
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20000040 	.word	0x20000040
 8003d38:	10624dd3 	.word	0x10624dd3

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e076      	b.n	8003e3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe fd8a 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	0c1a      	lsrs	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 0204 	and.w	r2, r2, #4
 8003e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_SPI_Transmit+0x22>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e12d      	b.n	80040c2 <HAL_SPI_Transmit+0x27e>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e6e:	f7fe fe35 	bl	8002adc <HAL_GetTick>
 8003e72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e88:	e116      	b.n	80040b8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_Transmit+0x52>
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e9a:	e10d      	b.n	80040b8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee2:	d10f      	bne.n	8003f04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d007      	beq.n	8003f22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d14f      	bne.n	8003fcc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_Transmit+0xf6>
 8003f34:	8afb      	ldrh	r3, [r7, #22]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d142      	bne.n	8003fc0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f5e:	e02f      	b.n	8003fc0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d112      	bne.n	8003f94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f92:	e015      	b.n	8003fc0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f94:	f7fe fda2 	bl	8002adc <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d803      	bhi.n	8003fac <HAL_SPI_Transmit+0x168>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x16e>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003fbe:	e07b      	b.n	80040b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ca      	bne.n	8003f60 <HAL_SPI_Transmit+0x11c>
 8003fca:	e050      	b.n	800406e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Transmit+0x196>
 8003fd4:	8afb      	ldrh	r3, [r7, #22]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d144      	bne.n	8004064 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004000:	e030      	b.n	8004064 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b02      	cmp	r3, #2
 800400e:	d113      	bne.n	8004038 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	; 0x36
 8004036:	e015      	b.n	8004064 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004038:	f7fe fd50 	bl	8002adc <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d803      	bhi.n	8004050 <HAL_SPI_Transmit+0x20c>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d102      	bne.n	8004056 <HAL_SPI_Transmit+0x212>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004062:	e029      	b.n	80040b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1c9      	bne.n	8004002 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fa6e 	bl	8004554 <SPI_EndRxTxTransaction>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e003      	b.n	80040b8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x26>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e198      	b.n	8004422 <HAL_SPI_TransmitReceive+0x358>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f8:	f7fe fcf0 	bl	8002adc <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004116:	2b01      	cmp	r3, #1
 8004118:	d00f      	beq.n	800413a <HAL_SPI_TransmitReceive+0x70>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004120:	d107      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x68>
 800412a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004138:	e16d      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_SPI_TransmitReceive+0x82>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_TransmitReceive+0x82>
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004152:	e160      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b04      	cmp	r3, #4
 800415e:	d003      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2205      	movs	r2, #5
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d007      	beq.n	80041bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c4:	d17c      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x10a>
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d16a      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f8:	e057      	b.n	80042aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x176>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x176>
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d113      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d119      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x1b8>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	b292      	uxth	r2, r2
 8004264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800427e:	2301      	movs	r3, #1
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004282:	f7fe fc2b 	bl	8002adc <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428e:	429a      	cmp	r2, r3
 8004290:	d80b      	bhi.n	80042aa <HAL_SPI_TransmitReceive+0x1e0>
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d007      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042a8:	e0b5      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1a2      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x130>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d19d      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x130>
 80042be:	e080      	b.n	80043c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x204>
 80042c8:	8b7b      	ldrh	r3, [r7, #26]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d16f      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f4:	e05b      	b.n	80043ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d11c      	bne.n	800433e <HAL_SPI_TransmitReceive+0x274>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <HAL_SPI_TransmitReceive+0x274>
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d114      	bne.n	800433e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d119      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x2b6>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d014      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800437c:	2301      	movs	r3, #1
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004380:	f7fe fbac 	bl	8002adc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	429a      	cmp	r2, r3
 800438e:	d803      	bhi.n	8004398 <HAL_SPI_TransmitReceive+0x2ce>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d102      	bne.n	800439e <HAL_SPI_TransmitReceive+0x2d4>
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043ac:	e033      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d19e      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x22c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d199      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f8c4 	bl	8004554 <SPI_EndRxTxTransaction>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043de:	e01a      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440c:	e003      	b.n	8004416 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800441e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004422:	4618      	mov	r0, r3
 8004424:	3730      	adds	r7, #48	; 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004438:	b2db      	uxtb	r3, r3
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fe fb42 	bl	8002adc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fe fb3a 	bl	8002adc <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fe fb2a 	bl	8002adc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000040 	.word	0x20000040

08004554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff6a 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e000      	b.n	8004588 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <memset>:
 8004590:	4603      	mov	r3, r0
 8004592:	4402      	add	r2, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	d100      	bne.n	800459a <memset+0xa>
 8004598:	4770      	bx	lr
 800459a:	f803 1b01 	strb.w	r1, [r3], #1
 800459e:	e7f9      	b.n	8004594 <memset+0x4>

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	; (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	f000 f828 	bl	8004604 <_init>
 80045b4:	2600      	movs	r6, #0
 80045b6:	4d0a      	ldr	r5, [pc, #40]	; (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	; (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08004774 	.word	0x08004774
 80045dc:	08004774 	.word	0x08004774
 80045e0:	08004774 	.word	0x08004774
 80045e4:	08004778 	.word	0x08004778

080045e8 <memcpy>:
 80045e8:	440a      	add	r2, r1
 80045ea:	4291      	cmp	r1, r2
 80045ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80045f0:	d100      	bne.n	80045f4 <memcpy+0xc>
 80045f2:	4770      	bx	lr
 80045f4:	b510      	push	{r4, lr}
 80045f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045fa:	4291      	cmp	r1, r2
 80045fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004600:	d1f9      	bne.n	80045f6 <memcpy+0xe>
 8004602:	bd10      	pop	{r4, pc}

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
