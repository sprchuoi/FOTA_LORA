
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000010  08003838  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003838  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086a3  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f4  00000000  00000000  0002871b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b5  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cdd  00000000  00000000  0002b9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afe6  00000000  00000000  000436ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083a38  00000000  00000000  0004e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022b4  00000000  00000000  000d20d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d438c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080037c0 	.word	0x080037c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080037c0 	.word	0x080037c0

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <BL_u32ReadAddressData>:
uint8_t buffer_packet[132];
uint8_t buffer_resp[8];
uint32_t Local_u32SizeOfCode;
uint8_t  Local_u8index_fragment;
//**************************Include***************************//
uint32_t BL_u32ReadAddressData(uint32_t address){
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
	...

0800046c <BL_voidBootLoader_Init>:
//**************************Function Define***************************//
void BL_voidBootLoader_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER,BL_BRANCHING_FLAG_SET);
 8000472:	2100      	movs	r1, #0
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <BL_voidBootLoader_Init+0x38>)
 8000476:	f000 f973 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	// Read Branching Request Update Flag.
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 800047a:	480a      	ldr	r0, [pc, #40]	; (80004a4 <BL_voidBootLoader_Init+0x38>)
 800047c:	f7ff ffe8 	bl	8000450 <BL_u32ReadAddressData>
 8000480:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000488:	d102      	bne.n	8000490 <BL_voidBootLoader_Init+0x24>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 800048a:	f000 f80d 	bl	80004a8 <BL_voidCheckActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 800048e:	e004      	b.n	800049a <BL_voidBootLoader_Init+0x2e>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <BL_voidBootLoader_Init+0x2e>
	    BL_voidJumpToBootloader();
 8000496:	f000 f887 	bl	80005a8 <BL_voidJumpToBootloader>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	0801fc00 	.word	0x0801fc00

080004a8 <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80004ae:	4818      	ldr	r0, [pc, #96]	; (8000510 <BL_voidCheckActiveRegion+0x68>)
 80004b0:	f7ff ffce 	bl	8000450 <BL_u32ReadAddressData>
 80004b4:	6078      	str	r0, [r7, #4]
	//uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS);
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80004b6:	f06f 030c 	mvn.w	r3, #12
 80004ba:	603b      	str	r3, [r7, #0]

    // if
    if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f113 0f0f 	cmn.w	r3, #15
 80004c2:	d102      	bne.n	80004ca <BL_voidCheckActiveRegion+0x22>
	{
		BL_voidJumpToActiveRegion();
 80004c4:	f000 f846 	bl	8000554 <BL_voidJumpToActiveRegion>
	}
    else
    {
        // Do nothing
    }
}
 80004c8:	e01d      	b.n	8000506 <BL_voidCheckActiveRegion+0x5e>
    else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f113 0f0c 	cmn.w	r3, #12
 80004d0:	d003      	beq.n	80004da <BL_voidCheckActiveRegion+0x32>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004d8:	d115      	bne.n	8000506 <BL_voidCheckActiveRegion+0x5e>
    	Local_u32BackupStatus    = BL_32CheckBackupRegion();
 80004da:	f000 f81b 	bl	8000514 <BL_32CheckBackupRegion>
 80004de:	6038      	str	r0, [r7, #0]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	f113 0f0e 	cmn.w	r3, #14
 80004e6:	d104      	bne.n	80004f2 <BL_voidCheckActiveRegion+0x4a>
			BL_voidCopyImageToActiveRegion();
 80004e8:	f000 f866 	bl	80005b8 <BL_voidCopyImageToActiveRegion>
			BL_voidJumpToActiveRegion();
 80004ec:	f000 f832 	bl	8000554 <BL_voidJumpToActiveRegion>
}
 80004f0:	e009      	b.n	8000506 <BL_voidCheckActiveRegion+0x5e>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f113 0f0c 	cmn.w	r3, #12
 80004f8:	d003      	beq.n	8000502 <BL_voidCheckActiveRegion+0x5a>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000500:	d101      	bne.n	8000506 <BL_voidCheckActiveRegion+0x5e>
			BL_voidSetBranchingFlagAndMakeSWR();
 8000502:	f000 f9c3 	bl	800088c <BL_voidSetBranchingFlagAndMakeSWR>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	0801fc14 	.word	0x0801fc14

08000514 <BL_32CheckBackupRegion>:

uint32_t BL_32CheckBackupRegion(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BACKUP_REGION_ADDRESS);
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <BL_32CheckBackupRegion+0x3c>)
 800051c:	f7ff ff98 	bl	8000450 <BL_u32ReadAddressData>
 8000520:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_BACKUP)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f113 0f0d 	cmn.w	r3, #13
 8000528:	d102      	bne.n	8000530 <BL_32CheckBackupRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 800052a:	f06f 030d 	mvn.w	r3, #13
 800052e:	e00b      	b.n	8000548 <BL_32CheckBackupRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f113 0f0c 	cmn.w	r3, #12
 8000536:	d003      	beq.n	8000540 <BL_32CheckBackupRegion+0x2c>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800053e:	d102      	bne.n	8000546 <BL_32CheckBackupRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000540:	f06f 030b 	mvn.w	r3, #11
 8000544:	e000      	b.n	8000548 <BL_32CheckBackupRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	0801fc34 	.word	0x0801fc34

08000554 <BL_voidJumpToActiveRegion>:

void BL_voidJumpToActiveRegion(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <BL_voidJumpToActiveRegion+0x40>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000560:	f001 fb6c 	bl	8001c3c <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <BL_voidJumpToActiveRegion+0x44>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]

	Application_t AddressToCall = 0 ;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
	AddressToCall = *(Application_t*)(ACTIVE_IMAGE + 4); // Point to Reset Handler
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <BL_voidJumpToActiveRegion+0x48>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	607b      	str	r3, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000574:	f3bf 8f5f 	dmb	sy
}
 8000578:	bf00      	nop

	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = ACTIVE_IMAGE; //We relocate vector table to the sector 1
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <BL_voidJumpToActiveRegion+0x4c>)
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <BL_voidJumpToActiveRegion+0x50>)
 800057e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000580:	f3bf 8f4f 	dsb	sy
}
 8000584:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after 	relocating VTOR */

	AddressToCall();
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4798      	blx	r3
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	e000e010 	.word	0xe000e010
 8000598:	40021000 	.word	0x40021000
 800059c:	08005004 	.word	0x08005004
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	08005000 	.word	0x08005000

080005a8 <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 80005ac:	f000 f97a 	bl	80008a4 <BL_voidUpdateHeaders>
	BL_voidReceiveUpdate();
 80005b0:	f000 f9c2 	bl	8000938 <BL_voidReceiveUpdate>

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <BL_voidCopyImageToActiveRegion>:

void BL_voidCopyImageToActiveRegion(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32BackupSizeInWord 	= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 80005ca:	482b      	ldr	r0, [pc, #172]	; (8000678 <BL_voidCopyImageToActiveRegion+0xc0>)
 80005cc:	f7ff ff40 	bl	8000450 <BL_u32ReadAddressData>
 80005d0:	6178      	str	r0, [r7, #20]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	617b      	str	r3, [r7, #20]
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80005dc:	2301      	movs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <BL_voidCopyImageToActiveRegion+0xc4>)
 80005e2:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80005e4:	2316      	movs	r3, #22
 80005e6:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80005e8:	f001 fd0a 	bl	8002000 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80005ec:	463a      	mov	r2, r7
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4611      	mov	r1, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fdec 	bl	80021d0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80005f8:	f001 fd28 	bl	800204c <HAL_FLASH_Lock>

	//Copy data from backup to active region.
	HAL_FLASH_Unlock();
 80005fc:	f001 fd00 	bl	8002000 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
 8000604:	e01d      	b.n	8000642 <BL_voidCopyImageToActiveRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800060c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800061a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	623b      	str	r3, [r7, #32]
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	2200      	movs	r2, #0
 800062c:	461c      	mov	r4, r3
 800062e:	4615      	mov	r5, r2
 8000630:	4622      	mov	r2, r4
 8000632:	462b      	mov	r3, r5
 8000634:	69f9      	ldr	r1, [r7, #28]
 8000636:	2002      	movs	r0, #2
 8000638:	f001 fc72 	bl	8001f20 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	3301      	adds	r3, #1
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3dd      	bcc.n	8000606 <BL_voidCopyImageToActiveRegion+0x4e>
	}
	HAL_FLASH_Lock();
 800064a:	f001 fcff 	bl	800204c <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4619      	mov	r1, r3
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <BL_voidCopyImageToActiveRegion+0xc8>)
 8000656:	f000 f883 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 800065a:	f06f 010e 	mvn.w	r1, #14
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <BL_voidCopyImageToActiveRegion+0xcc>)
 8000660:	f000 f87e 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 8000664:	f06f 010c 	mvn.w	r1, #12
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <BL_voidCopyImageToActiveRegion+0xd0>)
 800066a:	f000 f879 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bdb0      	pop	{r4, r5, r7, pc}
 8000676:	bf00      	nop
 8000678:	0801fc38 	.word	0x0801fc38
 800067c:	08005000 	.word	0x08005000
 8000680:	0801fc18 	.word	0x0801fc18
 8000684:	0801fc14 	.word	0x0801fc14
 8000688:	0801fc34 	.word	0x0801fc34

0800068c <BL_voidCopyImageToBackupRegion>:

void BL_voidCopyImageToBackupRegion(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32ActiveDataWord 			= BL_INITIALIZE_WITH_ZERO;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32ActiveSizeInWord 			= BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 800069e:	482b      	ldr	r0, [pc, #172]	; (800074c <BL_voidCopyImageToBackupRegion+0xc0>)
 80006a0:	f7ff fed6 	bl	8000450 <BL_u32ReadAddressData>
 80006a4:	6178      	str	r0, [r7, #20]
	Local_u32ActiveSizeInWord = Local_u32ActiveSizeInWord / 4;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	617b      	str	r3, [r7, #20]

	// Erase the Backup region
	Local_eraseInfo.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks 		= FLASH_BANK_1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BACKUP_IMAGE;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <BL_voidCopyImageToBackupRegion+0xc4>)
 80006b6:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages 	= FLASH_BANK_NUMOFPAGE;
 80006b8:	2316      	movs	r3, #22
 80006ba:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80006bc:	f001 fca0 	bl	8002000 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80006c0:	463a      	mov	r2, r7
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd82 	bl	80021d0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80006cc:	f001 fcbe 	bl	800204c <HAL_FLASH_Lock>

	//Copy data from active region to backup region
	HAL_FLASH_Unlock();
 80006d0:	f001 fc96 	bl	8002000 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
 80006d8:	e01d      	b.n	8000716 <BL_voidCopyImageToBackupRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80006e0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80006ee:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
		Local_u32ActiveDataWord    = *((volatile uint32_t*)(Local_u32ActiveDataAddress));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32BackupDataAddress, Local_u32ActiveDataWord);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	2200      	movs	r2, #0
 8000700:	461c      	mov	r4, r3
 8000702:	4615      	mov	r5, r2
 8000704:	4622      	mov	r2, r4
 8000706:	462b      	mov	r3, r5
 8000708:	6a39      	ldr	r1, [r7, #32]
 800070a:	2002      	movs	r0, #2
 800070c:	f001 fc08 	bl	8001f20 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
 8000716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3dd      	bcc.n	80006da <BL_voidCopyImageToBackupRegion+0x4e>
	}
	HAL_FLASH_Lock();
 800071e:	f001 fc95 	bl	800204c <HAL_FLASH_Lock>

	// Set
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS , Local_u32ActiveSizeInWord*4 );
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <BL_voidCopyImageToBackupRegion+0xc8>)
 800072a:	f000 f819 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 800072e:	f06f 010e 	mvn.w	r1, #14
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <BL_voidCopyImageToBackupRegion+0xcc>)
 8000734:	f000 f814 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 8000738:	f06f 010c 	mvn.w	r1, #12
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <BL_voidCopyImageToBackupRegion+0xd0>)
 800073e:	f000 f80f 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}
 800074a:	bf00      	nop
 800074c:	0801fc18 	.word	0x0801fc18
 8000750:	0800a800 	.word	0x0800a800
 8000754:	0801fc38 	.word	0x0801fc38
 8000758:	0801fc14 	.word	0x0801fc14
 800075c:	0801fc34 	.word	0x0801fc34

08000760 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b0b2      	sub	sp, #200	; 0xc8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000784:	e031      	b.n	80007ea <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8000786:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	bf14      	ite	ne
 8000790:	2301      	movne	r3, #1
 8000792:	2300      	moveq	r3, #0
 8000794:	b2da      	uxtb	r2, r3
 8000796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	bf14      	ite	ne
 80007a2:	2301      	movne	r3, #1
 80007a4:	2300      	moveq	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4013      	ands	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d017      	beq.n	80007e0 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80007b0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	33c8      	adds	r3, #200	; 0xc8
 80007b8:	443b      	add	r3, r7
 80007ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80007be:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80007c2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80007c6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	33c8      	adds	r3, #200	; 0xc8
 80007d0:	443b      	add	r3, r7
 80007d2:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80007d6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007da:	3301      	adds	r3, #1
 80007dc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 80007e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007e4:	3304      	adds	r3, #4
 80007e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80007ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007ee:	4a26      	ldr	r2, [pc, #152]	; (8000888 <BL_voidEraseRestoreHeaderPage+0x128>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d9c8      	bls.n	8000786 <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <BL_voidEraseRestoreHeaderPage+0x124>)
 80007fe:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000804:	f001 fbfc 	bl	8002000 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000808:	f107 020c 	add.w	r2, r7, #12
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fcdc 	bl	80021d0 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000818:	2300      	movs	r3, #0
 800081a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800081e:	e01a      	b.n	8000856 <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000820:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	33c8      	adds	r3, #200	; 0xc8
 8000828:	443b      	add	r3, r7
 800082a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 800082e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	33c8      	adds	r3, #200	; 0xc8
 8000836:	443b      	add	r3, r7
 8000838:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800083c:	2200      	movs	r2, #0
 800083e:	4698      	mov	r8, r3
 8000840:	4691      	mov	r9, r2
 8000842:	4642      	mov	r2, r8
 8000844:	464b      	mov	r3, r9
 8000846:	2002      	movs	r0, #2
 8000848:	f001 fb6a 	bl	8001f20 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 800084c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000850:	3301      	adds	r3, #1
 8000852:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000856:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800085a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800085e:	429a      	cmp	r2, r3
 8000860:	d3de      	bcc.n	8000820 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	461c      	mov	r4, r3
 8000868:	4615      	mov	r5, r2
 800086a:	4622      	mov	r2, r4
 800086c:	462b      	mov	r3, r5
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	2002      	movs	r0, #2
 8000872:	f001 fb55 	bl	8001f20 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000876:	f001 fbe9 	bl	800204c <HAL_FLASH_Lock>
}
 800087a:	bf00      	nop
 800087c:	37c8      	adds	r7, #200	; 0xc8
 800087e:	46bd      	mov	sp, r7
 8000880:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000884:	0801fc00 	.word	0x0801fc00
 8000888:	0801fc4f 	.word	0x0801fc4f

0800088c <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000890:	2100      	movs	r1, #0
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 8000894:	f7ff ff64 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 8000898:	f000 f9d4 	bl	8000c44 <BL_voidMakeSoftWareReset>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	0801fc00 	.word	0x0801fc00

080008a4 <BL_voidUpdateHeaders>:

void BL_voidUpdateHeaders(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af04      	add	r7, sp, #16
	uint32_t Local_u32ActiveRegionStatus       = BL_INITIALIZE_WITH_ZERO;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]

	Local_u32ActiveRegionStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <BL_voidUpdateHeaders+0x7c>)
 80008b4:	f7ff fdcc 	bl	8000450 <BL_u32ReadAddressData>
 80008b8:	6078      	str	r0, [r7, #4]
	//Structure LoRa Transmit
	// Request LoRa stransmit to get size of code
	if(LORA_IF_Stransmit_Request(&SX1278,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, ret, ADDR_NODE_1, MCU_ENTER_FLASHMODE, GW_PROVIDE_HEADER) == LORA_OKE){
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <BL_voidUpdateHeaders+0x80>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	9202      	str	r2, [sp, #8]
 80008c2:	2202      	movs	r2, #2
 80008c4:	9201      	str	r2, [sp, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <BL_voidUpdateHeaders+0x84>)
 80008cc:	4917      	ldr	r1, [pc, #92]	; (800092c <BL_voidUpdateHeaders+0x88>)
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <BL_voidUpdateHeaders+0x8c>)
 80008d0:	f000 fea4 	bl	800161c <LORA_IF_Stransmit_Request>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11d      	bne.n	8000916 <BL_voidUpdateHeaders+0x72>

		/*Response Goto Programming and Send Update Request */
		/*Get the size code */
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <BL_voidUpdateHeaders+0x84>)
 80008dc:	79db      	ldrb	r3, [r3, #7]
 80008de:	061a      	lsls	r2, r3, #24
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <BL_voidUpdateHeaders+0x84>)
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	431a      	orrs	r2, r3
									(buffer_resp[5] << SHIFT_8_BIT) | (buffer_resp[4] << SHIFT_0_BIT);
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <BL_voidUpdateHeaders+0x84>)
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	021b      	lsls	r3, r3, #8
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008ee:	4313      	orrs	r3, r2
									(buffer_resp[5] << SHIFT_8_BIT) | (buffer_resp[4] << SHIFT_0_BIT);
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <BL_voidUpdateHeaders+0x84>)
 80008f2:	7912      	ldrb	r2, [r2, #4]
 80008f4:	4313      	orrs	r3, r2
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008f6:	603b      	str	r3, [r7, #0]
		if(Local_u32ActiveRegionStatus == BR_IMAGE_IS_ACTIVE )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f113 0f0f 	cmn.w	r3, #15
 80008fe:	d101      	bne.n	8000904 <BL_voidUpdateHeaders+0x60>
		{
			BL_voidCopyImageToBackupRegion();
 8000900:	f7ff fec4 	bl	800068c <BL_voidCopyImageToBackupRegion>
		}
		//set IMG Corrupted - if flashing success update img correct
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000904:	f06f 010b 	mvn.w	r1, #11
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <BL_voidUpdateHeaders+0x7c>)
 800090a:	f7ff ff29 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <BL_voidUpdateHeaders+0x90>)
 8000912:	f7ff ff25 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	}

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	0801fc14 	.word	0x0801fc14
 8000924:	200002e0 	.word	0x200002e0
 8000928:	20000138 	.word	0x20000138
 800092c:	2000002c 	.word	0x2000002c
 8000930:	200001c8 	.word	0x200001c8
 8000934:	0801fc18 	.word	0x0801fc18

08000938 <BL_voidReceiveUpdate>:

void BL_voidReceiveUpdate(void)
{
 8000938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800093c:	b090      	sub	sp, #64	; 0x40
 800093e:	af04      	add	r7, sp, #16
	uint32_t Local_u32HighByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32LowByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32InactiveImageAddressCounter                 = ACTIVE_IMAGE_START_ADDRESS;
 8000948:	4baa      	ldr	r3, [pc, #680]	; (8000bf4 <BL_voidReceiveUpdate+0x2bc>)
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Local_u32PageError;

    Local_u32SizeOfCode 								  		 = BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 800094c:	48aa      	ldr	r0, [pc, #680]	; (8000bf8 <BL_voidReceiveUpdate+0x2c0>)
 800094e:	f7ff fd7f 	bl	8000450 <BL_u32ReadAddressData>
 8000952:	4603      	mov	r3, r0
 8000954:	4aa9      	ldr	r2, [pc, #676]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 8000956:	6013      	str	r3, [r2, #0]
	Local_u8index_fragment							  	         = BL_INITIALIZE_WITH_ZERO;
 8000958:	4ba9      	ldr	r3, [pc, #676]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	uint8_t  Local_u8index_fragment_previous					  = BL_INITIALIZE_WITH_ZERO;
 800095e:	2300      	movs	r3, #0
 8000960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	FLASH_EraseInitTypeDef Local_eraseInfo;
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 800096c:	4ba1      	ldr	r3, [pc, #644]	; (8000bf4 <BL_voidReceiveUpdate+0x2bc>)
 800096e:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 8000970:	2316      	movs	r3, #22
 8000972:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000974:	f001 fb44 	bl	8002000 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000978:	f107 0218 	add.w	r2, r7, #24
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fc24 	bl	80021d0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000988:	f001 fb60 	bl	800204c <HAL_FLASH_Lock>

	//Structure CAN Transmit
	// Sent Request send fw
	LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*)buffer_resp,
 800098c:	4b9c      	ldr	r3, [pc, #624]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b9c      	ldr	r3, [pc, #624]	; (8000c04 <BL_voidReceiveUpdate+0x2cc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2131      	movs	r1, #49	; 0x31
 8000996:	9101      	str	r1, [sp, #4]
 8000998:	2101      	movs	r1, #1
 800099a:	9100      	str	r1, [sp, #0]
 800099c:	499a      	ldr	r1, [pc, #616]	; (8000c08 <BL_voidReceiveUpdate+0x2d0>)
 800099e:	489b      	ldr	r0, [pc, #620]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 80009a0:	f000 feb0 	bl	8001704 <LORA_IF_Stransmit_Response_Flashing>
			Local_u8index_fragment , ret, ADDR_NODE_1, MCU_RECEIVED_SIZE_CODE);


	//Loop to receive code update
	while(Local_u32SizeOfCode)
 80009a4:	e10a      	b.n	8000bbc <BL_voidReceiveUpdate+0x284>
	{
		//Receive code update Fragment firmware
		if (LORA_IF_GetFragment_Firmware(&SX1278,(uint8_t*) buffer_packet,(uint8_t*) buffer_flashing_data,
 80009a6:	4b96      	ldr	r3, [pc, #600]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	4a98      	ldr	r2, [pc, #608]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 80009b0:	4998      	ldr	r1, [pc, #608]	; (8000c14 <BL_voidReceiveUpdate+0x2dc>)
 80009b2:	4896      	ldr	r0, [pc, #600]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 80009b4:	f000 fdae 	bl	8001514 <LORA_IF_GetFragment_Firmware>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d10f      	bne.n	80009de <BL_voidReceiveUpdate+0xa6>
				ADDR_NODE_1, Local_u8index_fragment) == LORA_TIMEOUT){
//			// request Send FW again !!
			if(Local_u8index_fragment == 0 ){
 80009be:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10b      	bne.n	80009de <BL_voidReceiveUpdate+0xa6>
				LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*)buffer_resp,
 80009c6:	4b8e      	ldr	r3, [pc, #568]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b8e      	ldr	r3, [pc, #568]	; (8000c04 <BL_voidReceiveUpdate+0x2cc>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2131      	movs	r1, #49	; 0x31
 80009d0:	9101      	str	r1, [sp, #4]
 80009d2:	2101      	movs	r1, #1
 80009d4:	9100      	str	r1, [sp, #0]
 80009d6:	498c      	ldr	r1, [pc, #560]	; (8000c08 <BL_voidReceiveUpdate+0x2d0>)
 80009d8:	488c      	ldr	r0, [pc, #560]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 80009da:	f000 fe93 	bl	8001704 <LORA_IF_Stransmit_Response_Flashing>
						Local_u8index_fragment , ret, ADDR_NODE_1, MCU_RECEIVED_SIZE_CODE);
			}
		}

		if (Local_u32SizeOfCode > 128 && Local_u8index_fragment > Local_u8index_fragment_previous){
 80009de:	4b87      	ldr	r3, [pc, #540]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	d979      	bls.n	8000ada <BL_voidReceiveUpdate+0x1a2>
 80009e6:	4b86      	ldr	r3, [pc, #536]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d273      	bcs.n	8000ada <BL_voidReceiveUpdate+0x1a2>
			for(uint8_t i = 0 ; i < 16 ; i++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80009f8:	e05a      	b.n	8000ab0 <BL_voidReceiveUpdate+0x178>
				uint8_t bit_shift = (7*i+1);
 80009fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80009fe:	461a      	mov	r2, r3
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3301      	adds	r3, #1
 8000a08:	77fb      	strb	r3, [r7, #31]
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+bit_shift] << SHIFT_16_BIT)
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	3307      	adds	r3, #7
 8000a0e:	4a80      	ldr	r2, [pc, #512]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	061a      	lsls	r2, r3, #24
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	3306      	adds	r3, #6
 8000a18:	497d      	ldr	r1, [pc, #500]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a1a:	5ccb      	ldrb	r3, [r1, r3]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	431a      	orrs	r2, r3
											| (buffer_flashing_data[5+ bit_shift] << SHIFT_8_BIT) | (buffer_flashing_data[4+bit_shift] << SHIFT_0_BIT) ;
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	3305      	adds	r3, #5
 8000a24:	497a      	ldr	r1, [pc, #488]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a26:	5ccb      	ldrb	r3, [r1, r3]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	7ffa      	ldrb	r2, [r7, #31]
 8000a2e:	3204      	adds	r2, #4
 8000a30:	4977      	ldr	r1, [pc, #476]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a32:	5c8a      	ldrb	r2, [r1, r2]
 8000a34:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+bit_shift] << SHIFT_16_BIT)
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
			    Local_u32LowByteDataReceive  = (buffer_flashing_data[3 + bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2 + bit_shift] << SHIFT_16_BIT)
 8000a38:	7ffb      	ldrb	r3, [r7, #31]
 8000a3a:	3303      	adds	r3, #3
 8000a3c:	4a74      	ldr	r2, [pc, #464]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	061a      	lsls	r2, r3, #24
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3302      	adds	r3, #2
 8000a46:	4972      	ldr	r1, [pc, #456]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a48:	5ccb      	ldrb	r3, [r1, r3]
 8000a4a:	041b      	lsls	r3, r3, #16
 8000a4c:	431a      	orrs	r2, r3
											| (buffer_flashing_data[1 + bit_shift] << SHIFT_8_BIT) | (buffer_flashing_data[0+bit_shift] << SHIFT_0_BIT) ;
 8000a4e:	7ffb      	ldrb	r3, [r7, #31]
 8000a50:	3301      	adds	r3, #1
 8000a52:	496f      	ldr	r1, [pc, #444]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a54:	5ccb      	ldrb	r3, [r1, r3]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	7ffa      	ldrb	r2, [r7, #31]
 8000a5c:	496c      	ldr	r1, [pc, #432]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000a5e:	5c8a      	ldrb	r2, [r1, r2]
 8000a60:	4313      	orrs	r3, r2
			    Local_u32LowByteDataReceive  = (buffer_flashing_data[3 + bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2 + bit_shift] << SHIFT_16_BIT)
 8000a62:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000a64:	f001 facc 	bl	8002000 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	461c      	mov	r4, r3
 8000a6e:	4615      	mov	r5, r2
 8000a70:	4622      	mov	r2, r4
 8000a72:	462b      	mov	r3, r5
 8000a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a76:	2002      	movs	r0, #2
 8000a78:	f001 fa52 	bl	8001f20 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7e:	1d19      	adds	r1, r3, #4
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	4698      	mov	r8, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	4642      	mov	r2, r8
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f001 fa47 	bl	8001f20 <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000a92:	f001 fadb 	bl	800204c <HAL_FLASH_Lock>
				Local_u32InactiveImageAddressCounter += 8;
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	3308      	adds	r3, #8
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				Local_u32SizeOfCode -= 8;
 8000a9c:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	4a56      	ldr	r2, [pc, #344]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 8000aa4:	6013      	str	r3, [r2, #0]
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000aaa:	3301      	adds	r3, #1
 8000aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000ab0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d9a0      	bls.n	80009fa <BL_voidReceiveUpdate+0xc2>

			}
			Local_u8index_fragment_previous = Local_u8index_fragment;
 8000ab8:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp,
 8000ac0:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <BL_voidReceiveUpdate+0x2cc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000ac8:	2138      	movs	r1, #56	; 0x38
 8000aca:	9101      	str	r1, [sp, #4]
 8000acc:	2101      	movs	r1, #1
 8000ace:	9100      	str	r1, [sp, #0]
 8000ad0:	494d      	ldr	r1, [pc, #308]	; (8000c08 <BL_voidReceiveUpdate+0x2d0>)
 8000ad2:	484e      	ldr	r0, [pc, #312]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 8000ad4:	f000 fe16 	bl	8001704 <LORA_IF_Stransmit_Response_Flashing>
 8000ad8:	e070      	b.n	8000bbc <BL_voidReceiveUpdate+0x284>
							Local_u8index_fragment_previous , ret, ADDR_NODE_1, MCU_WRITE_SUCCESS);
		}
		else if(Local_u8index_fragment > Local_u8index_fragment_previous){
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <BL_voidReceiveUpdate+0x2c8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d26a      	bcs.n	8000bbc <BL_voidReceiveUpdate+0x284>
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000aec:	e051      	b.n	8000b92 <BL_voidReceiveUpdate+0x25a>
				uint8_t bit_shift = (7*i+1);
 8000aee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000af2:	461a      	mov	r2, r3
 8000af4:	00d2      	lsls	r2, r2, #3
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	77bb      	strb	r3, [r7, #30]
				Local_u32HighByteDataReceive = (buffer_flashing_data[8+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+bit_shift] << SHIFT_16_BIT)
 8000afe:	7fbb      	ldrb	r3, [r7, #30]
 8000b00:	3308      	adds	r3, #8
 8000b02:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b04:	5cd3      	ldrb	r3, [r2, r3]
 8000b06:	061a      	lsls	r2, r3, #24
 8000b08:	7fbb      	ldrb	r3, [r7, #30]
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	4940      	ldr	r1, [pc, #256]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b0e:	5ccb      	ldrb	r3, [r1, r3]
 8000b10:	041b      	lsls	r3, r3, #16
 8000b12:	431a      	orrs	r2, r3
											| (buffer_flashing_data[6+bit_shift] << SHIFT_8_BIT) | (buffer_flashing_data[5+bit_shift] << SHIFT_0_BIT) ;
 8000b14:	7fbb      	ldrb	r3, [r7, #30]
 8000b16:	3306      	adds	r3, #6
 8000b18:	493d      	ldr	r1, [pc, #244]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b1a:	5ccb      	ldrb	r3, [r1, r3]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	7fba      	ldrb	r2, [r7, #30]
 8000b22:	3205      	adds	r2, #5
 8000b24:	493a      	ldr	r1, [pc, #232]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b26:	5c8a      	ldrb	r2, [r1, r2]
 8000b28:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (buffer_flashing_data[8+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+bit_shift] << SHIFT_16_BIT)
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
				Local_u32LowByteDataReceive  = (buffer_flashing_data[4+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[3+bit_shift] << SHIFT_16_BIT)
 8000b2c:	7fbb      	ldrb	r3, [r7, #30]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	4a37      	ldr	r2, [pc, #220]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	061a      	lsls	r2, r3, #24
 8000b36:	7fbb      	ldrb	r3, [r7, #30]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	4935      	ldr	r1, [pc, #212]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b3c:	5ccb      	ldrb	r3, [r1, r3]
 8000b3e:	041b      	lsls	r3, r3, #16
 8000b40:	431a      	orrs	r2, r3
											| (buffer_flashing_data[2+bit_shift] << SHIFT_8_BIT) | (buffer_flashing_data[1+bit_shift] << SHIFT_0_BIT) ;
 8000b42:	7fbb      	ldrb	r3, [r7, #30]
 8000b44:	3302      	adds	r3, #2
 8000b46:	4932      	ldr	r1, [pc, #200]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b48:	5ccb      	ldrb	r3, [r1, r3]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	7fba      	ldrb	r2, [r7, #30]
 8000b50:	3201      	adds	r2, #1
 8000b52:	492f      	ldr	r1, [pc, #188]	; (8000c10 <BL_voidReceiveUpdate+0x2d8>)
 8000b54:	5c8a      	ldrb	r2, [r1, r2]
 8000b56:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (buffer_flashing_data[4+bit_shift] << SHIFT_24_BIT) | (buffer_flashing_data[3+bit_shift] << SHIFT_16_BIT)
 8000b58:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000b5a:	f001 fa51 	bl	8002000 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	2200      	movs	r2, #0
 8000b62:	469a      	mov	sl, r3
 8000b64:	4693      	mov	fp, r2
 8000b66:	4652      	mov	r2, sl
 8000b68:	465b      	mov	r3, fp
 8000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f001 f9d7 	bl	8001f20 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	1d19      	adds	r1, r3, #4
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b82:	2002      	movs	r0, #2
 8000b84:	f001 f9cc 	bl	8001f20 <HAL_FLASH_Program>
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000b88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000b92:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d9a9      	bls.n	8000aee <BL_voidReceiveUpdate+0x1b6>
			}
			HAL_FLASH_Lock();  //Locks again the flash memory
 8000b9a:	f001 fa57 	bl	800204c <HAL_FLASH_Lock>

			Local_u32SizeOfCode -= Local_u32SizeOfCode ;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp,
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <BL_voidReceiveUpdate+0x2cc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000bac:	2138      	movs	r1, #56	; 0x38
 8000bae:	9101      	str	r1, [sp, #4]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	9100      	str	r1, [sp, #0]
 8000bb4:	4914      	ldr	r1, [pc, #80]	; (8000c08 <BL_voidReceiveUpdate+0x2d0>)
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 8000bb8:	f000 fda4 	bl	8001704 <LORA_IF_Stransmit_Response_Flashing>
	while(Local_u32SizeOfCode)
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <BL_voidReceiveUpdate+0x2c4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f47f aef0 	bne.w	80009a6 <BL_voidReceiveUpdate+0x6e>

		/* Send To notify GW Send the next packet*/

	}
	// MCU send response when finish flashing
	if (LORA_IF_Stransmit_Response(&SX1278,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, ret,
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <BL_voidReceiveUpdate+0x2cc>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2277      	movs	r2, #119	; 0x77
 8000bcc:	9202      	str	r2, [sp, #8]
 8000bce:	2239      	movs	r2, #57	; 0x39
 8000bd0:	9201      	str	r2, [sp, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	9200      	str	r2, [sp, #0]
 8000bd6:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <BL_voidReceiveUpdate+0x2d0>)
 8000bd8:	490f      	ldr	r1, [pc, #60]	; (8000c18 <BL_voidReceiveUpdate+0x2e0>)
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <BL_voidReceiveUpdate+0x2d4>)
 8000bdc:	f000 fd70 	bl	80016c0 <LORA_IF_Stransmit_Response>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <BL_voidReceiveUpdate+0x2b2>
			ADDR_NODE_1, GW_ACKNOWLEDGE_FINISHING_SENDING_CODE, MCU_ACKNOWLEDGE_FINISHING) == LORA_OKE){
			BL_voidFinishBootLoader();
 8000be6:	f000 f819 	bl	8000c1c <BL_voidFinishBootLoader>
	}
}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000bf4:	08005000 	.word	0x08005000
 8000bf8:	0801fc18 	.word	0x0801fc18
 8000bfc:	20000140 	.word	0x20000140
 8000c00:	20000144 	.word	0x20000144
 8000c04:	200002e0 	.word	0x200002e0
 8000c08:	20000138 	.word	0x20000138
 8000c0c:	200001c8 	.word	0x200001c8
 8000c10:	20000034 	.word	0x20000034
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	2000002c 	.word	0x2000002c

08000c1c <BL_voidFinishBootLoader>:

void BL_voidFinishBootLoader(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000c20:	f06f 010e 	mvn.w	r1, #14
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <BL_voidFinishBootLoader+0x20>)
 8000c26:	f7ff fd9b 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <BL_voidFinishBootLoader+0x24>)
 8000c30:	f7ff fd96 	bl	8000760 <BL_voidEraseRestoreHeaderPage>
	BL_voidMakeSoftWareReset();
 8000c34:	f000 f806 	bl	8000c44 <BL_voidMakeSoftWareReset>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0801fc14 	.word	0x0801fc14
 8000c40:	0801fc00 	.word	0x0801fc00

08000c44 <BL_voidMakeSoftWareReset>:

void BL_voidMakeSoftWareReset(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	// make software reset after flashing success
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <BL_voidMakeSoftWareReset+0x38>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <BL_voidMakeSoftWareReset+0x38>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6053      	str	r3, [r2, #4]
#endif

	hiwdg.Instance = IWDG;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <BL_voidMakeSoftWareReset+0x3c>)
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <BL_voidMakeSoftWareReset+0x40>)
 8000c58:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <BL_voidMakeSoftWareReset+0x3c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <BL_voidMakeSoftWareReset+0x3c>)
 8000c62:	2209      	movs	r2, #9
 8000c64:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <BL_voidMakeSoftWareReset+0x3c>)
 8000c68:	f001 fd26 	bl	80026b8 <HAL_IWDG_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <BL_voidMakeSoftWareReset+0x32>
	{
		Error_Handler();
 8000c72:	f000 fed7 	bl	8001a24 <Error_Handler>
	}
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e0042000 	.word	0xe0042000
 8000c80:	20000148 	.word	0x20000148
 8000c84:	40003000 	.word	0x40003000

08000c88 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fbd0 	bl	8001442 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fbeb 	bl	8001482 <SX1278_hw_SPIReadByte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fb88 	bl	80013cc <SX1278_hw_SetNSS>
	return tmp;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fb75 	bl	80013cc <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f000 fba6 	bl	8001442 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	78ba      	ldrb	r2, [r7, #2]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fb9f 	bl	8001442 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fb5e 	bl	80013cc <SX1278_hw_SetNSS>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	72fb      	strb	r3, [r7, #11]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000d2c:	7abb      	ldrb	r3, [r7, #10]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d927      	bls.n	8000d82 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fb47 	bl	80013cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	7afa      	ldrb	r2, [r7, #11]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fb7b 	bl	8001442 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75fb      	strb	r3, [r7, #23]
 8000d50:	e00c      	b.n	8000d6c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	18d4      	adds	r4, r2, r3
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	f000 fb90 	bl	8001482 <SX1278_hw_SPIReadByte>
 8000d62:	4603      	mov	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	75fb      	strb	r3, [r7, #23]
 8000d6c:	7dfa      	ldrb	r2, [r7, #23]
 8000d6e:	7abb      	ldrb	r3, [r7, #10]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3ee      	bcc.n	8000d52 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fb26 	bl	80013cc <SX1278_hw_SetNSS>
 8000d80:	e000      	b.n	8000d84 <SX1278_SPIBurstRead+0x6c>
		return;
 8000d82:	bf00      	nop
	}
}
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}

08000d8a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	461a      	mov	r2, r3
 8000d96:	460b      	mov	r3, r1
 8000d98:	72fb      	strb	r3, [r7, #11]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000d9e:	7abb      	ldrb	r3, [r7, #10]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d929      	bls.n	8000df8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fb0e 	bl	80013cc <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	f000 fb3f 	bl	8001442 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
 8000dc8:	e00b      	b.n	8000de2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f000 fb33 	bl	8001442 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	3301      	adds	r3, #1
 8000de0:	75fb      	strb	r3, [r7, #23]
 8000de2:	7dfa      	ldrb	r2, [r7, #23]
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3ef      	bcc.n	8000dca <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 faeb 	bl	80013cc <SX1278_hw_SetNSS>
 8000df6:	e000      	b.n	8000dfa <SX1278_SPIBurstWrite+0x70>
		return;
 8000df8:	bf00      	nop
	}
}
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f90d 	bl	8001028 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f000 fb5d 	bl	80014ce <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f917 	bl	8001048 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	f04f 0100 	mov.w	r1, #0
 8000e28:	04d9      	lsls	r1, r3, #19
 8000e2a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000e2e:	04d0      	lsls	r0, r2, #19
 8000e30:	4a6f      	ldr	r2, [pc, #444]	; (8000ff0 <SX1278_config+0x1f0>)
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	f7ff f98b 	bl	8000150 <__aeabi_uldivmod>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	0c02      	lsrs	r2, r0, #16
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	b2d3      	uxtb	r3, r2
 8000e58:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000e5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	0a02      	lsrs	r2, r0, #8
 8000e68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e6c:	0a0b      	lsrs	r3, r1, #8
 8000e6e:	b2d3      	uxtb	r3, r2
 8000e70:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000e72:	7c3b      	ldrb	r3, [r7, #16]
 8000e74:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	2106      	movs	r1, #6
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff83 	bl	8000d8a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	2139      	movs	r1, #57	; 0x39
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff1c 	bl	8000cc6 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7c1b      	ldrb	r3, [r3, #16]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <SX1278_config+0x1f4>)
 8000e96:	5c9b      	ldrb	r3, [r3, r2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2109      	movs	r1, #9
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff12 	bl	8000cc6 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000ea2:	220b      	movs	r2, #11
 8000ea4:	210b      	movs	r1, #11
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff0d 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000eac:	2223      	movs	r2, #35	; 0x23
 8000eae:	210c      	movs	r1, #12
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff08 	bl	8000cc6 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7c5b      	ldrb	r3, [r3, #17]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <SX1278_config+0x1f8>)
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d147      	bne.n	8000f54 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7c9b      	ldrb	r3, [r3, #18]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <SX1278_config+0x1fc>)
 8000ecc:	5c9b      	ldrb	r3, [r3, r2]
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7cdb      	ldrb	r3, [r3, #19]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4b49      	ldr	r3, [pc, #292]	; (8001000 <SX1278_config+0x200>)
 8000eda:	5c5b      	ldrb	r3, [r3, r1]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	211d      	movs	r1, #29
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff feea 	bl	8000cc6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7c5b      	ldrb	r3, [r3, #17]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <SX1278_config+0x1f8>)
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7d1b      	ldrb	r3, [r3, #20]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <SX1278_config+0x204>)
 8000f08:	5c5b      	ldrb	r3, [r3, r1]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f12:	3303      	adds	r3, #3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	211e      	movs	r1, #30
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fed3 	bl	8000cc6 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000f20:	2131      	movs	r1, #49	; 0x31
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff feb0 	bl	8000c88 <SX1278_SPIRead>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	f023 0307 	bic.w	r3, r3, #7
 8000f32:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0305 	orr.w	r3, r3, #5
 8000f3a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2131      	movs	r1, #49	; 0x31
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff febf 	bl	8000cc6 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000f48:	220c      	movs	r2, #12
 8000f4a:	2137      	movs	r1, #55	; 0x37
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff feba 	bl	8000cc6 <SX1278_SPIWrite>
 8000f52:	e029      	b.n	8000fa8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7c9b      	ldrb	r3, [r3, #18]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <SX1278_config+0x1fc>)
 8000f5c:	5c9b      	ldrb	r3, [r3, r2]
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7cdb      	ldrb	r3, [r3, #19]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SX1278_config+0x200>)
 8000f6a:	5c5b      	ldrb	r3, [r3, r1]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f70:	4413      	add	r3, r2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	211d      	movs	r1, #29
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fea4 	bl	8000cc6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7c5b      	ldrb	r3, [r3, #17]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <SX1278_config+0x1f8>)
 8000f86:	5c9b      	ldrb	r3, [r3, r2]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <SX1278_config+0x204>)
 8000f94:	5c5b      	ldrb	r3, [r3, r1]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	211e      	movs	r1, #30
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fe8f 	bl	8000cc6 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000fa8:	2204      	movs	r2, #4
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fe8a 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	211f      	movs	r1, #31
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fe85 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fe80 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	2121      	movs	r1, #33	; 0x21
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fe7b 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2141      	movs	r1, #65	; 0x41
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fe76 	bl	8000cc6 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f810 	bl	8001008 <SX1278_standby>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	01e84800 	.word	0x01e84800
 8000ff4:	080037d8 	.word	0x080037d8
 8000ff8:	080037dc 	.word	0x080037dc
 8000ffc:	080037e4 	.word	0x080037e4
 8001000:	080037f0 	.word	0x080037f0
 8001004:	080037f4 	.word	0x080037f4

08001008 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001010:	2209      	movs	r2, #9
 8001012:	2101      	movs	r1, #1
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fe56 	bl	8000cc6 <SX1278_SPIWrite>
	module->status = STANDBY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	759a      	strb	r2, [r3, #22]
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001030:	2208      	movs	r2, #8
 8001032:	2101      	movs	r1, #1
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fe46 	bl	8000cc6 <SX1278_SPIWrite>
	module->status = SLEEP;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	759a      	strb	r2, [r3, #22]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001050:	2288      	movs	r2, #136	; 0x88
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fe36 	bl	8000cc6 <SX1278_SPIWrite>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	2112      	movs	r1, #18
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fe29 	bl	8000cc6 <SX1278_SPIWrite>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	460b      	mov	r3, r1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	7afa      	ldrb	r2, [r7, #11]
 800108e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff feb5 	bl	8000e00 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001096:	2284      	movs	r2, #132	; 0x84
 8001098:	214d      	movs	r1, #77	; 0x4d
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff fe13 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	2124      	movs	r1, #36	; 0x24
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fe0e 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80010aa:	2201      	movs	r2, #1
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fe09 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80010b4:	223f      	movs	r2, #63	; 0x3f
 80010b6:	2111      	movs	r1, #17
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fe04 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff ffcf 	bl	8001062 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	461a      	mov	r2, r3
 80010c8:	2122      	movs	r1, #34	; 0x22
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fdfb 	bl	8000cc6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80010d0:	210f      	movs	r1, #15
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fdd8 	bl	8000c88 <SX1278_SPIRead>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	461a      	mov	r2, r3
 80010e0:	210d      	movs	r1, #13
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fdef 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80010e8:	228d      	movs	r2, #141	; 0x8d
 80010ea:	2101      	movs	r1, #1
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fdea 	bl	8000cc6 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80010fa:	2118      	movs	r1, #24
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fdc3 	bl	8000c88 <SX1278_SPIRead>
 8001102:	4603      	mov	r3, r0
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b04      	cmp	r3, #4
 800110a:	d104      	bne.n	8001116 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2203      	movs	r2, #3
 8001110:	759a      	strb	r2, [r3, #22]
			return 1;
 8001112:	2301      	movs	r3, #1
 8001114:	e013      	b.n	800113e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3b01      	subs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f967 	bl	80013fa <SX1278_hw_Reset>
			SX1278_config(module);
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff fe67 	bl	8000e00 <SX1278_config>
			return 0;
 8001132:	2300      	movs	r3, #0
 8001134:	e003      	b.n	800113e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f9c9 	bl	80014ce <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800113c:	e7dd      	b.n	80010fa <SX1278_LoRaEntryRx+0x7e>
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f9c6 	bl	80014e4 <SX1278_hw_GetDIO0>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d030      	beq.n	80011c0 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3317      	adds	r3, #23
 8001162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f002 faef 	bl	800374c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800116e:	2110      	movs	r1, #16
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fd89 	bl	8000c88 <SX1278_SPIRead>
 8001176:	4603      	mov	r3, r0
 8001178:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	210d      	movs	r1, #13
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fda0 	bl	8000cc6 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7c5b      	ldrb	r3, [r3, #17]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7d5b      	ldrb	r3, [r3, #21]
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e005      	b.n	80011a2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001196:	2113      	movs	r1, #19
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fd75 	bl	8000c88 <SX1278_SPIRead>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f103 0217 	add.w	r2, r3, #23
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2100      	movs	r1, #0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fdb3 	bl	8000d18 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff51 	bl	8001062 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	460b      	mov	r3, r1
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	7afa      	ldrb	r2, [r7, #11]
 80011e0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fe0c 	bl	8000e00 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80011e8:	2287      	movs	r2, #135	; 0x87
 80011ea:	214d      	movs	r1, #77	; 0x4d
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff fd6a 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80011f2:	2200      	movs	r2, #0
 80011f4:	2124      	movs	r1, #36	; 0x24
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fd65 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80011fc:	2241      	movs	r2, #65	; 0x41
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fd60 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff ff2b 	bl	8001062 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800120c:	22f7      	movs	r2, #247	; 0xf7
 800120e:	2111      	movs	r1, #17
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fd58 	bl	8000cc6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	461a      	mov	r2, r3
 800121a:	2122      	movs	r1, #34	; 0x22
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff fd52 	bl	8000cc6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001222:	210e      	movs	r1, #14
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff fd2f 	bl	8000c88 <SX1278_SPIRead>
 800122a:	4603      	mov	r3, r0
 800122c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	461a      	mov	r2, r3
 8001232:	210d      	movs	r1, #13
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fd46 	bl	8000cc6 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800123a:	2122      	movs	r1, #34	; 0x22
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff fd23 	bl	8000c88 <SX1278_SPIRead>
 8001242:	4603      	mov	r3, r0
 8001244:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001246:	7dba      	ldrb	r2, [r7, #22]
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	429a      	cmp	r2, r3
 800124c:	d104      	bne.n	8001258 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2202      	movs	r2, #2
 8001252:	759a      	strb	r2, [r3, #22]
			return 1;
 8001254:	2301      	movs	r3, #1
 8001256:	e00e      	b.n	8001276 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ea      	bne.n	800123a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f8c6 	bl	80013fa <SX1278_hw_Reset>
			SX1278_config(module);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fdc6 	bl	8000e00 <SX1278_config>
			return 0;
 8001274:	2300      	movs	r3, #0
		}
	}
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	2100      	movs	r1, #0
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff fd78 	bl	8000d8a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800129a:	228b      	movs	r2, #139	; 0x8b
 800129c:	2101      	movs	r1, #1
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff fd11 	bl	8000cc6 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f91b 	bl	80014e4 <SX1278_hw_GetDIO0>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80012b4:	2112      	movs	r1, #18
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fce6 	bl	8000c88 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff fed0 	bl	8001062 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff fea0 	bl	8001008 <SX1278_standby>
			return 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e013      	b.n	80012f4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f88c 	bl	80013fa <SX1278_hw_Reset>
			SX1278_config(module);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fd8c 	bl	8000e00 <SX1278_config>
			return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e003      	b.n	80012f4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f000 f8ee 	bl	80014ce <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80012f2:	e7d7      	b.n	80012a4 <SX1278_LoRaTxPacket+0x26>
	}
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f848 	bl	80013a2 <SX1278_hw_init>
	module->frequency = frequency;
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001318:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	7e3a      	ldrb	r2, [r7, #24]
 8001320:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	7f3a      	ldrb	r2, [r7, #28]
 8001326:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800132e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001336:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800133e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001346:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff fd59 	bl	8000e00 <SX1278_config>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	4613      	mov	r3, r2
 8001362:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	429a      	cmp	r2, r3
 800136e:	d003      	beq.n	8001378 <SX1278_read+0x22>
		length = module->readBytes;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001376:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3317      	adds	r3, #23
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	4619      	mov	r1, r3
 8001380:	68b8      	ldr	r0, [r7, #8]
 8001382:	f002 fa0f 	bl	80037a4 <memcpy>
	rxBuf[length] = '\0';
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8001398:	79fb      	ldrb	r3, [r7, #7]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80013aa:	2101      	movs	r1, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f80d 	bl	80013cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6858      	ldr	r0, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2201      	movs	r2, #1
 80013be:	4619      	mov	r1, r3
 80013c0:	f001 f949 	bl	8002656 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6958      	ldr	r0, [r3, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	b299      	uxth	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	f001 f932 	bl	8002656 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001402:	2101      	movs	r1, #1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffe1 	bl	80013cc <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6858      	ldr	r0, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f001 f91d 	bl	8002656 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f000 f856 	bl	80014ce <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6858      	ldr	r0, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f001 f911 	bl	8002656 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001434:	2064      	movs	r0, #100	; 0x64
 8001436:	f000 f84a 	bl	80014ce <SX1278_hw_DelayMs>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffbb 	bl	80013cc <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6998      	ldr	r0, [r3, #24]
 800145a:	1cf9      	adds	r1, r7, #3
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	2201      	movs	r2, #1
 8001462:	f001 fdcd 	bl	8003000 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001466:	bf00      	nop
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f8ba 	bl	80035e6 <HAL_SPI_GetState>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	d1f7      	bne.n	8001468 <SX1278_hw_SPICommand+0x26>
		;
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af02      	add	r7, sp, #8
 8001488:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff99 	bl	80013cc <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6998      	ldr	r0, [r3, #24]
 800149e:	f107 020e 	add.w	r2, r7, #14
 80014a2:	f107 010f 	add.w	r1, r7, #15
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	f001 feea 	bl	8003286 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80014b2:	bf00      	nop
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f894 	bl	80035e6 <HAL_SPI_GetState>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d1f7      	bne.n	80014b4 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fc1a 	bl	8001d10 <HAL_Delay>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f001 f895 	bl	8002628 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <LORA_IF_GetFragment_Firmware>:
#include "SX1278.h"
#include "BL_Program.h"

uint8_t counter ;
LoRa_Return_t  LORA_IF_GetFragment_Firmware(SX1278_t *module , uint8_t* buffer_packet ,uint8_t* buffer_flashing_data ,
		uint8_t addr , uint8_t no){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	70fb      	strb	r3, [r7, #3]
	counter = 0 ;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <LORA_IF_GetFragment_Firmware+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	//clear data buffer
	//clearDataBuffer((uint8_t*) buffer_packet,132);
	while(1){
		/* Configuration LoRa to Receive firmware*/
		ret = SX1278_LoRaEntryRx(module, SIZE_BUFFER_132BYTES , MAX_TIME_OUT);
 8001528:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800152c:	2184      	movs	r1, #132	; 0x84
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fda4 	bl	800107c <SX1278_LoRaEntryRx>
 8001534:	4603      	mov	r3, r0
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <LORA_IF_GetFragment_Firmware+0x9c>)
 800153a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	f000 fbe6 	bl	8001d10 <HAL_Delay>
		ret = SX1278_LoRaRxPacket(module);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff fdfe 	bl	8001146 <SX1278_LoRaRxPacket>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <LORA_IF_GetFragment_Firmware+0x9c>)
 8001550:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <LORA_IF_GetFragment_Firmware+0x9c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d023      	beq.n	80015a2 <LORA_IF_GetFragment_Firmware+0x8e>
			ret = SX1278_read(module, (uint8_t*) buffer_packet, ret);
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <LORA_IF_GetFragment_Firmware+0x9c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fef7 	bl	8001356 <SX1278_read>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <LORA_IF_GetFragment_Firmware+0x9c>)
 800156e:	701a      	strb	r2, [r3, #0]
			if(buffer_packet[0] == ADDR_UNICAST  && buffer_packet[1] == addr  && buffer_packet[3] == FL_FRAGMENT_FIRMWARE){
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d1d7      	bne.n	8001528 <LORA_IF_GetFragment_Firmware+0x14>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	3301      	adds	r3, #1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	429a      	cmp	r2, r3
 8001582:	d1d1      	bne.n	8001528 <LORA_IF_GetFragment_Firmware+0x14>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3303      	adds	r3, #3
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2bfe      	cmp	r3, #254	; 0xfe
 800158c:	d1cc      	bne.n	8001528 <LORA_IF_GetFragment_Firmware+0x14>
				no = buffer_packet[4];
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	763b      	strb	r3, [r7, #24]
				/* Copy data from buffer packet to buffer flashing data*/
				copy_Array_BL((uint8_t*) buffer_flashing_data ,(uint8_t*) buffer_packet, 128);
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fa48 	bl	8001a2e <copy_Array_BL>
				return LORA_OKE ;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <LORA_IF_GetFragment_Firmware+0x90>
			}
		}
		else{
			return LORA_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
			}
		}
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000145 	.word	0x20000145
 80015b0:	200002e0 	.word	0x200002e0

080015b4 <LORA_IF_GetData_Frame>:


uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint8_t* buffer , uint8_t ret , uint32_t timeout , uint8_t length ){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71fb      	strb	r3, [r7, #7]
    ret = SX1278_LoRaEntryRx(module, length, timeout);
 80015c4:	7e3b      	ldrb	r3, [r7, #24]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff fd56 	bl	800107c <SX1278_LoRaEntryRx>
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f000 fb9b 	bl	8001d10 <HAL_Delay>
	ret = SX1278_LoRaRxPacket(module);
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fdb3 	bl	8001146 <SX1278_LoRaRxPacket>
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
	if ( ret > 0 ) {
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d013      	beq.n	8001612 <LORA_IF_GetData_Frame+0x5e>
		ret = SX1278_read(module, (uint8_t*) buffer, ret);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	461a      	mov	r2, r3
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7ff feb0 	bl	8001356 <SX1278_read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
		if(buffer[0]== ADDR_BOARDCAST  && buffer[1] == ADDR_NODE_1)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d107      	bne.n	8001612 <LORA_IF_GetData_Frame+0x5e>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d102      	bne.n	8001612 <LORA_IF_GetData_Frame+0x5e>
			return buffer[3];
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	78db      	ldrb	r3, [r3, #3]
 8001610:	e000      	b.n	8001614 <LORA_IF_GetData_Frame+0x60>
	}
    return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr ,uint8_t ACK_req , uint8_t ACK_resp){
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	70fb      	strb	r3, [r7, #3]
	counter = 0;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <LORA_IF_Stransmit_Request+0x9c>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	buffer_req[0] = ADDR_UNICAST;
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2203      	movs	r2, #3
 8001634:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = addr ;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	7e3a      	ldrb	r2, [r7, #24]
 800163c:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = ACK_req;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3303      	adds	r3, #3
 8001642:	7f3a      	ldrb	r2, [r7, #28]
 8001644:	701a      	strb	r2, [r3, #0]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_8BYTES  , MAX_TIME_OUT);
 8001646:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800164a:	2108      	movs	r1, #8
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fdbe 	bl	80011ce <SX1278_LoRaEntryTx>
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_8BYTES, MAX_TIME_OUT);
 8001656:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800165a:	2208      	movs	r2, #8
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fe0d 	bl	800127e <SX1278_LoRaTxPacket>
 8001664:	4603      	mov	r3, r0
 8001666:	70fb      	strb	r3, [r7, #3]
	 if(ret){
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0eb      	beq.n	8001646 <LORA_IF_Stransmit_Request+0x2a>
		/*Read the first Frame
		 *counter to retry connect until get resp signal
		 */
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800166e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001672:	4812      	ldr	r0, [pc, #72]	; (80016bc <LORA_IF_Stransmit_Request+0xa0>)
 8001674:	f001 f807 	bl	8002686 <HAL_GPIO_TogglePin>
		 HAL_Delay(TIME_DELAY);
 8001678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167c:	f000 fb48 	bl	8001d10 <HAL_Delay>
		if(LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_8BYTES ) == ACK_resp){
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	2308      	movs	r3, #8
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff ff91 	bl	80015b4 <LORA_IF_GetData_Frame>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <LORA_IF_Stransmit_Request+0x86>
			return LORA_OKE ;
 800169e:	2300      	movs	r3, #0
 80016a0:	e006      	b.n	80016b0 <LORA_IF_Stransmit_Request+0x94>
		}
		else counter++;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <LORA_IF_Stransmit_Request+0x9c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <LORA_IF_Stransmit_Request+0x9c>)
 80016ac:	701a      	strb	r2, [r3, #0]
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_8BYTES  , MAX_TIME_OUT);
 80016ae:	e7ca      	b.n	8001646 <LORA_IF_Stransmit_Request+0x2a>
	 if(counter == MAX_TRY_REQ){
		 return LORA_TIMEOUT;
	 }
	}

}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000145 	.word	0x20000145
 80016bc:	40011000 	.word	0x40011000

080016c0 <LORA_IF_Stransmit_Response>:

LoRa_Return_t LORA_IF_Stransmit_Response(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr ,uint8_t ACK_req , uint8_t ACK_resp){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	70fb      	strb	r3, [r7, #3]
	uint8_t counter = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
	while(1){
		if((LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_8BYTES ) == ACK_resp)){
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	2308      	movs	r3, #8
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff ff68 	bl	80015b4 <LORA_IF_GetData_Frame>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <LORA_IF_Stransmit_Response+0x34>
			return LORA_OKE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e003      	b.n	80016fc <LORA_IF_Stransmit_Response+0x3c>
		}
		else {
			counter++;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	3301      	adds	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
		if((LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_8BYTES ) == ACK_resp)){
 80016fa:	e7ea      	b.n	80016d2 <LORA_IF_Stransmit_Response+0x12>
				}
			}

		}
	}
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <LORA_IF_Stransmit_Response_Flashing>:

LoRa_Return_t LORA_IF_Stransmit_Response_Flashing(SX1278_t *module ,uint8_t* buffer_resp ,
		uint8_t no , uint8_t ret, uint8_t addr ,uint8_t ACK_resp){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	460b      	mov	r3, r1
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	4613      	mov	r3, r2
 8001718:	71bb      	strb	r3, [r7, #6]
	buffer_resp[0] = ADDR_UNICAST;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2203      	movs	r2, #3
 800171e:	701a      	strb	r2, [r3, #0]
	buffer_resp[1] = addr;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	3301      	adds	r3, #1
 8001724:	7e3a      	ldrb	r2, [r7, #24]
 8001726:	701a      	strb	r2, [r3, #0]
	buffer_resp[2] = no ;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3302      	adds	r3, #2
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	701a      	strb	r2, [r3, #0]
	buffer_resp[3] = ACK_resp;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3303      	adds	r3, #3
 8001734:	7f3a      	ldrb	r2, [r7, #28]
 8001736:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_8BYTES  , MAX_TIME_OUT);
 8001738:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800173c:	2108      	movs	r1, #8
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fd45 	bl	80011ce <SX1278_LoRaEntryTx>
 8001744:	4603      	mov	r3, r0
 8001746:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(TIME_DELAY);
 8001748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174c:	f000 fae0 	bl	8001d10 <HAL_Delay>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_resp, SIZE_BUFFER_8BYTES, MAX_TIME_OUT);
 8001750:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001754:	2208      	movs	r2, #8
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff fd90 	bl	800127e <SX1278_LoRaTxPacket>
 800175e:	4603      	mov	r3, r0
 8001760:	71bb      	strb	r3, [r7, #6]
	if(ret){
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <LORA_IF_Stransmit_Response_Flashing+0x80>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <LORA_IF_Stransmit_Response_Flashing+0x8c>)
 800176e:	f000 ff8a 	bl	8002686 <HAL_GPIO_TogglePin>
		HAL_Delay(TIME_DELAY);
 8001772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001776:	f000 facb 	bl	8001d10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <LORA_IF_Stransmit_Response_Flashing+0x8c>)
 8001780:	f000 ff81 	bl	8002686 <HAL_GPIO_TogglePin>
	}
}
 8001784:	bf00      	nop
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40011000 	.word	0x40011000
 8001794:	00000000 	.word	0x00000000

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f000 fa37 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f83f 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a6:	f000 f8bb 	bl	8001920 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 80017aa:	f000 f883 	bl	80018b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <main+0x78>)
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <main+0x7c>)
 80017b2:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <main+0x78>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <main+0x78>)
 80017bc:	4a16      	ldr	r2, [pc, #88]	; (8001818 <main+0x80>)
 80017be:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <main+0x78>)
 80017c2:	2210      	movs	r2, #16
 80017c4:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <main+0x78>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <main+0x7c>)
 80017ca:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <main+0x78>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <main+0x78>)
 80017d4:	4a11      	ldr	r2, [pc, #68]	; (800181c <main+0x84>)
 80017d6:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <main+0x88>)
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <main+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	9305      	str	r3, [sp, #20]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9304      	str	r3, [sp, #16]
 80017e6:	2303      	movs	r3, #3
 80017e8:	9303      	str	r3, [sp, #12]
 80017ea:	2309      	movs	r3, #9
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2301      	movs	r3, #1
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	a304      	add	r3, pc, #16	; (adr r3, 8001808 <main+0x70>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <main+0x88>)
 80017fe:	f7ff fd7d 	bl	80012fc <SX1278_init>
  SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 128);

  BL_voidBootLoader_Init();
 8001802:	f7fe fe33 	bl	800046c <BL_voidBootLoader_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001806:	e7fe      	b.n	8001806 <main+0x6e>
 8001808:	19de5080 	.word	0x19de5080
 800180c:	00000000 	.word	0x00000000
 8001810:	200001ac 	.word	0x200001ac
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40010800 	.word	0x40010800
 800181c:	20000154 	.word	0x20000154
 8001820:	200001c8 	.word	0x200001c8

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b090      	sub	sp, #64	; 0x40
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	2228      	movs	r2, #40	; 0x28
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f001 ff8a 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001846:	2309      	movs	r3, #9
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001854:	2301      	movs	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2302      	movs	r3, #2
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001866:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4618      	mov	r0, r3
 8001872:	f000 ff63 	bl	800273c <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800187c:	f000 f8d2 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	230f      	movs	r3, #15
 8001882:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	2302      	movs	r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f9d0 	bl	8002c40 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80018a6:	f000 f8bd 	bl	8001a24 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3740      	adds	r7, #64	; 0x40
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_SPI1_Init+0x64>)
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <MX_SPI1_Init+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_SPI1_Init+0x64>)
 80018c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_SPI1_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_SPI1_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_SPI1_Init+0x64>)
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_SPI1_Init+0x64>)
 80018e8:	2210      	movs	r2, #16
 80018ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_SPI1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_SPI1_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_SPI1_Init+0x64>)
 8001900:	220a      	movs	r2, #10
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_SPI1_Init+0x64>)
 8001906:	f001 faf7 	bl	8002ef8 <HAL_SPI_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001910:	f000 f888 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000154 	.word	0x20000154
 800191c:	40013000 	.word	0x40013000

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a36      	ldr	r2, [pc, #216]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <MX_GPIO_Init+0xf4>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <MX_GPIO_Init+0xf4>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199a:	481f      	ldr	r0, [pc, #124]	; (8001a18 <MX_GPIO_Init+0xf8>)
 800199c:	f000 fe5b 	bl	8002656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2110      	movs	r1, #16
 80019a4:	481d      	ldr	r0, [pc, #116]	; (8001a1c <MX_GPIO_Init+0xfc>)
 80019a6:	f000 fe56 	bl	8002656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|RESET_Pin|MODE_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2107      	movs	r1, #7
 80019ae:	481c      	ldr	r0, [pc, #112]	; (8001a20 <MX_GPIO_Init+0x100>)
 80019b0:	f000 fe51 	bl	8002656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4619      	mov	r1, r3
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <MX_GPIO_Init+0xf8>)
 80019ce:	f000 fca7 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80019d2:	2310      	movs	r3, #16
 80019d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_GPIO_Init+0xfc>)
 80019ea:	f000 fc99 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin RESET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|RESET_Pin|MODE_Pin;
 80019ee:	2307      	movs	r3, #7
 80019f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4619      	mov	r1, r3
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_GPIO_Init+0x100>)
 8001a06:	f000 fc8b 	bl	8002320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40010800 	.word	0x40010800
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>

08001a2e <copy_Array_BL>:
	uint8* prtA = a + 4 ;
	for(uint8 i = 0 ; i < size ; i++){
		*(prtA++) = *(b++);
	}
}
void copy_Array_BL(uint8* a , uint8* b , uint32 size){
 8001a2e:	b480      	push	{r7}
 8001a30:	b087      	sub	sp, #28
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
	uint8* prtB = b + 4 ;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	74fb      	strb	r3, [r7, #19]
 8001a44:	e00a      	b.n	8001a5c <copy_Array_BL+0x2e>
		*(a++) = *(prtB++);
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	1c53      	adds	r3, r2, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	60f9      	str	r1, [r7, #12]
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8001a56:	7cfb      	ldrb	r3, [r7, #19]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	74fb      	strb	r3, [r7, #19]
 8001a5c:	7cfb      	ldrb	r3, [r7, #19]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f0      	bhi.n	8001a46 <copy_Array_BL+0x18>
	}
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_MspInit+0x5c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x5c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_MspInit+0x60>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_MspInit+0x60>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d12f      	bne.n	8001b54 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b24:	23a0      	movs	r3, #160	; 0xa0
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_SPI_MspInit+0x90>)
 8001b38:	f000 fbf2 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_SPI_MspInit+0x90>)
 8001b50:	f000 fbe6 	bl	8002320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013000 	.word	0x40013000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f893 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc4:	f7ff fff7 	bl	8001bb6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bca:	490c      	ldr	r1, [pc, #48]	; (8001bfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be0:	4c09      	ldr	r4, [pc, #36]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bee:	f001 fdb5 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf2:	f7ff fdd1 	bl	8001798 <main>
  bx lr
 8001bf6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c00:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 8001c04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c08:	20000308 	.word	0x20000308

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f949 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f826 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff ff20 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_DeInit+0x2c>)
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295
 8001c46:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_DeInit+0x2c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_DeInit+0x2c>)
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_DeInit+0x2c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001c5c:	f000 f806 	bl	8001c6c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f935 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f90b 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_IncTick+0x1c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_IncTick+0x20>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	200002e4 	.word	0x200002e4

08001cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <HAL_GetTick+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	200002e4 	.word	0x200002e4

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffe0 	bl	8001cfc <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff90 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff49 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff5e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffb0 	bl	8001e74 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001f3c:	7e1b      	ldrb	r3, [r3, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_FLASH_Program+0x26>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e054      	b.n	8001ff0 <HAL_FLASH_Program+0xd0>
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f50:	f000 f8a8 	bl	80020a4 <FLASH_WaitForLastOperation>
 8001f54:	4603      	mov	r3, r0
 8001f56:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d144      	bne.n	8001fe8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001f64:	2301      	movs	r3, #1
 8001f66:	757b      	strb	r3, [r7, #21]
 8001f68:	e007      	b.n	8001f7a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d102      	bne.n	8001f76 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001f70:	2302      	movs	r3, #2
 8001f72:	757b      	strb	r3, [r7, #21]
 8001f74:	e001      	b.n	8001f7a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001f76:	2304      	movs	r3, #4
 8001f78:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75bb      	strb	r3, [r7, #22]
 8001f7e:	e02d      	b.n	8001fdc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	005a      	lsls	r2, r3, #1
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	eb02 0c03 	add.w	ip, r2, r3
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	0119      	lsls	r1, r3, #4
 8001f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f92:	f1c1 0620 	rsb	r6, r1, #32
 8001f96:	f1a1 0020 	sub.w	r0, r1, #32
 8001f9a:	fa22 f401 	lsr.w	r4, r2, r1
 8001f9e:	fa03 f606 	lsl.w	r6, r3, r6
 8001fa2:	4334      	orrs	r4, r6
 8001fa4:	fa23 f000 	lsr.w	r0, r3, r0
 8001fa8:	4304      	orrs	r4, r0
 8001faa:	fa23 f501 	lsr.w	r5, r3, r1
 8001fae:	b2a3      	uxth	r3, r4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4660      	mov	r0, ip
 8001fb4:	f000 f85a 	bl	800206c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fbc:	f000 f872 	bl	80020a4 <FLASH_WaitForLastOperation>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_FLASH_Program+0xdc>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_FLASH_Program+0xdc>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	75bb      	strb	r3, [r7, #22]
 8001fdc:	7dba      	ldrb	r2, [r7, #22]
 8001fde:	7d7b      	ldrb	r3, [r7, #21]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d3cd      	bcc.n	8001f80 <HAL_FLASH_Program+0x60>
 8001fe4:	e000      	b.n	8001fe8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001fe6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	761a      	strb	r2, [r3, #24]

  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff8:	200002e8 	.word	0x200002e8
 8001ffc:	40022000 	.word	0x40022000

08002000 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_FLASH_Unlock+0x44>)
 800201a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_FLASH_Unlock+0x48>)
 8002020:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002032:	79fb      	ldrb	r3, [r7, #7]
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000
 8002044:	45670123 	.word	0x45670123
 8002048:	cdef89ab 	.word	0xcdef89ab

0800204c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_FLASH_Lock+0x1c>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_FLASH_Lock+0x1c>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000

0800206c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <FLASH_Program_HalfWord+0x30>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <FLASH_Program_HalfWord+0x34>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <FLASH_Program_HalfWord+0x34>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	801a      	strh	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	200002e8 	.word	0x200002e8
 80020a0:	40022000 	.word	0x40022000

080020a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fe26 	bl	8001cfc <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020b2:	e010      	b.n	80020d6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d00c      	beq.n	80020d6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <FLASH_WaitForLastOperation+0x2e>
 80020c2:	f7ff fe1b 	bl	8001cfc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d201      	bcs.n	80020d6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e025      	b.n	8002122 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e8      	bne.n	80020b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020f0:	2220      	movs	r2, #32
 80020f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002118:	f000 f80a 	bl	8002130 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002150:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002170:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002190:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f240 1201 	movw	r2, #257	; 0x101
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d106      	bne.n	80021b6 <FLASH_SetErrorCode+0x86>
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	61d3      	str	r3, [r2, #28]
}  
 80021b4:	e002      	b.n	80021bc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60d3      	str	r3, [r2, #12]
}  
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	200002e8 	.word	0x200002e8

080021d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 80021e4:	7e1b      	ldrb	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_FLASHEx_Erase+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e053      	b.n	8002296 <HAL_FLASHEx_Erase+0xc6>
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002200:	f7ff ff50 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d141      	bne.n	800228e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 f84c 	bl	80022a8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002210:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002214:	f7ff ff46 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6113      	str	r3, [r2, #16]
 8002228:	e031      	b.n	800228e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800222a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800222e:	f7ff ff39 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12a      	bne.n	800228e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	e019      	b.n	800227c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f000 f849 	bl	80022e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800224e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002252:	f7ff ff27 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 8002260:	f023 0302 	bic.w	r3, r3, #2
 8002264:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	601a      	str	r2, [r3, #0]
            break;
 8002272:	e00c      	b.n	800228e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	029a      	lsls	r2, r3, #10
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4413      	add	r3, r2
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3dc      	bcc.n	8002248 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 8002290:	2200      	movs	r2, #0
 8002292:	761a      	strb	r2, [r3, #24]

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200002e8 	.word	0x200002e8
 80022a4:	40022000 	.word	0x40022000

080022a8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <FLASH_MassErase+0x30>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <FLASH_MassErase+0x34>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <FLASH_MassErase+0x34>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <FLASH_MassErase+0x34>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <FLASH_MassErase+0x34>)
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	200002e8 	.word	0x200002e8
 80022dc:	40022000 	.word	0x40022000

080022e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <FLASH_PageErase+0x38>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <FLASH_PageErase+0x3c>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <FLASH_PageErase+0x3c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <FLASH_PageErase+0x3c>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <FLASH_PageErase+0x3c>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <FLASH_PageErase+0x3c>)
 8002306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200002e8 	.word	0x200002e8
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b08b      	sub	sp, #44	; 0x2c
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e169      	b.n	8002608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002334:	2201      	movs	r2, #1
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	429a      	cmp	r2, r3
 800234e:	f040 8158 	bne.w	8002602 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a9a      	ldr	r2, [pc, #616]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d05e      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 800235c:	4a98      	ldr	r2, [pc, #608]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d875      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002362:	4a98      	ldr	r2, [pc, #608]	; (80025c4 <HAL_GPIO_Init+0x2a4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d058      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002368:	4a96      	ldr	r2, [pc, #600]	; (80025c4 <HAL_GPIO_Init+0x2a4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d86f      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800236e:	4a96      	ldr	r2, [pc, #600]	; (80025c8 <HAL_GPIO_Init+0x2a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d052      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002374:	4a94      	ldr	r2, [pc, #592]	; (80025c8 <HAL_GPIO_Init+0x2a8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d869      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800237a:	4a94      	ldr	r2, [pc, #592]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04c      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002380:	4a92      	ldr	r2, [pc, #584]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d863      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002386:	4a92      	ldr	r2, [pc, #584]	; (80025d0 <HAL_GPIO_Init+0x2b0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d046      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 800238c:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <HAL_GPIO_Init+0x2b0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d85d      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002392:	2b12      	cmp	r3, #18
 8002394:	d82a      	bhi.n	80023ec <HAL_GPIO_Init+0xcc>
 8002396:	2b12      	cmp	r3, #18
 8002398:	d859      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <HAL_GPIO_Init+0x80>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	0800241b 	.word	0x0800241b
 80023a4:	080023f5 	.word	0x080023f5
 80023a8:	08002407 	.word	0x08002407
 80023ac:	08002449 	.word	0x08002449
 80023b0:	0800244f 	.word	0x0800244f
 80023b4:	0800244f 	.word	0x0800244f
 80023b8:	0800244f 	.word	0x0800244f
 80023bc:	0800244f 	.word	0x0800244f
 80023c0:	0800244f 	.word	0x0800244f
 80023c4:	0800244f 	.word	0x0800244f
 80023c8:	0800244f 	.word	0x0800244f
 80023cc:	0800244f 	.word	0x0800244f
 80023d0:	0800244f 	.word	0x0800244f
 80023d4:	0800244f 	.word	0x0800244f
 80023d8:	0800244f 	.word	0x0800244f
 80023dc:	0800244f 	.word	0x0800244f
 80023e0:	0800244f 	.word	0x0800244f
 80023e4:	080023fd 	.word	0x080023fd
 80023e8:	08002411 	.word	0x08002411
 80023ec:	4a79      	ldr	r2, [pc, #484]	; (80025d4 <HAL_GPIO_Init+0x2b4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023f2:	e02c      	b.n	800244e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	623b      	str	r3, [r7, #32]
          break;
 80023fa:	e029      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	3304      	adds	r3, #4
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e024      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	3308      	adds	r3, #8
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e01f      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	330c      	adds	r3, #12
 8002416:	623b      	str	r3, [r7, #32]
          break;
 8002418:	e01a      	b.n	8002450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002422:	2304      	movs	r3, #4
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e013      	b.n	8002450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	611a      	str	r2, [r3, #16]
          break;
 800243a:	e009      	b.n	8002450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	615a      	str	r2, [r3, #20]
          break;
 8002446:	e003      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
          break;
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x130>
          break;
 800244e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d801      	bhi.n	800245a <HAL_GPIO_Init+0x13a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	e001      	b.n	800245e <HAL_GPIO_Init+0x13e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d802      	bhi.n	800246c <HAL_GPIO_Init+0x14c>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x152>
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3b08      	subs	r3, #8
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	210f      	movs	r1, #15
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	6a39      	ldr	r1, [r7, #32]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80b1 	beq.w	8002602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a0:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2bc>)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a40      	ldr	r2, [pc, #256]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_GPIO_Init+0x1ec>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <HAL_GPIO_Init+0x2c4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00d      	beq.n	8002508 <HAL_GPIO_Init+0x1e8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <HAL_GPIO_Init+0x2c8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <HAL_GPIO_Init+0x1e4>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <HAL_GPIO_Init+0x2cc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_GPIO_Init+0x1e0>
 80024fc:	2303      	movs	r3, #3
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x1ee>
 8002500:	2304      	movs	r3, #4
 8002502:	e004      	b.n	800250e <HAL_GPIO_Init+0x1ee>
 8002504:	2302      	movs	r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x1ee>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_GPIO_Init+0x1ee>
 800250c:	2300      	movs	r3, #0
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800251e:	492f      	ldr	r1, [pc, #188]	; (80025dc <HAL_GPIO_Init+0x2bc>)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	492c      	ldr	r1, [pc, #176]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	4928      	ldr	r1, [pc, #160]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002550:	4013      	ands	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4922      	ldr	r1, [pc, #136]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002578:	4013      	ands	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4918      	ldr	r1, [pc, #96]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	43db      	mvns	r3, r3
 800259e:	4914      	ldr	r1, [pc, #80]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d021      	beq.n	80025f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e021      	b.n	8002602 <HAL_GPIO_Init+0x2e2>
 80025be:	bf00      	nop
 80025c0:	10320000 	.word	0x10320000
 80025c4:	10310000 	.word	0x10310000
 80025c8:	10220000 	.word	0x10220000
 80025cc:	10210000 	.word	0x10210000
 80025d0:	10120000 	.word	0x10120000
 80025d4:	10110000 	.word	0x10110000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40010c00 	.word	0x40010c00
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40011400 	.word	0x40011400
 80025f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_GPIO_Init+0x304>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4909      	ldr	r1, [pc, #36]	; (8002624 <HAL_GPIO_Init+0x304>)
 80025fe:	4013      	ands	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	3301      	adds	r3, #1
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f47f ae8e 	bne.w	8002334 <HAL_GPIO_Init+0x14>
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	372c      	adds	r7, #44	; 0x2c
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e001      	b.n	800264a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]
 8002662:	4613      	mov	r3, r2
 8002664:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002672:	e003      	b.n	800267c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	041a      	lsls	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	611a      	str	r2, [r3, #16]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	041a      	lsls	r2, r3, #16
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	400b      	ands	r3, r1
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e034      	b.n	8002734 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80026d2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f245 5255 	movw	r2, #21845	; 0x5555
 80026dc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6852      	ldr	r2, [r2, #4]
 80026e6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80026f2:	f7ff fb03 	bl	8001cfc <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026f8:	e00f      	b.n	800271a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80026fa:	f7ff faff 	bl	8001cfc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b27      	cmp	r3, #39	; 0x27
 8002706:	d908      	bls.n	800271a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e00c      	b.n	8002734 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e8      	bne.n	80026fa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e272      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b04      	cmp	r3, #4
 8002766:	d00c      	beq.n	8002782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d10b      	bne.n	800279a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d06c      	beq.n	8002868 <HAL_RCC_OscConfig+0x12c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d168      	bne.n	8002868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e24c      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x76>
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7f      	ldr	r2, [pc, #508]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e02e      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x98>
 80027ba:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0xbc>
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6e      	ldr	r2, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027f8:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fa70 	bl	8001cfc <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff fa6c 	bl	8001cfc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e200      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xe4>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fa5c 	bl	8001cfc <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7ff fa58 	bl	8001cfc <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1ec      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x10c>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002876:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1c0      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4939      	ldr	r1, [pc, #228]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fa11 	bl	8001cfc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7ff fa0d 	bl	8001cfc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1a1      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4927      	ldr	r1, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff f9f0 	bl	8001cfc <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7ff f9ec 	bl	8001cfc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e180      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03a      	beq.n	80029c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d019      	beq.n	8002986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7ff f9d0 	bl	8001cfc <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff f9cc 	bl	8001cfc <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e160      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800297e:	2001      	movs	r0, #1
 8002980:	f000 fa9c 	bl	8002ebc <RCC_Delay>
 8002984:	e01c      	b.n	80029c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff f9b6 	bl	8001cfc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff f9b2 	bl	8001cfc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d908      	bls.n	80029b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e146      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	42420000 	.word	0x42420000
 80029b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e9      	bne.n	8002994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a6 	beq.w	8002b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b88      	ldr	r3, [pc, #544]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a87      	ldr	r2, [pc, #540]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x4c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x4c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x4c8>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f973 	bl	8001cfc <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff f96f 	bl	8001cfc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e103      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x4c8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x312>
 8002a40:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x334>
 8002a56:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a69      	ldr	r2, [pc, #420]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a66      	ldr	r2, [pc, #408]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x356>
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a60      	ldr	r2, [pc, #384]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4b5e      	ldr	r3, [pc, #376]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x36e>
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a5a      	ldr	r2, [pc, #360]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d015      	beq.n	8002ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f923 	bl	8001cfc <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7ff f91f 	bl	8001cfc <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0b1      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCC_OscConfig+0x37e>
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f90d 	bl	8001cfc <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff f909 	bl	8001cfc <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e09b      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8087 	beq.w	8002c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d061      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d146      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7ff f8dd 	bl	8001cfc <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7ff f8d9 	bl	8001cfc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e06d      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4921      	ldr	r1, [pc, #132]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a19      	ldr	r1, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	430b      	orrs	r3, r1
 8002b92:	491b      	ldr	r1, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f8ad 	bl	8001cfc <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7ff f8a9 	bl	8001cfc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e03d      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x46a>
 8002bc4:	e035      	b.n	8002c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff f896 	bl	8001cfc <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff f892 	bl	8001cfc <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e026      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x498>
 8002bf2:	e01e      	b.n	8002c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e019      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x500>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0d0      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d910      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 0207 	bic.w	r2, r3, #7
 8002c6a:	4965      	ldr	r1, [pc, #404]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b8      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc0:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	494d      	ldr	r1, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d040      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d115      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e07f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e073      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06b      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4936      	ldr	r1, [pc, #216]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fe ffe4 	bl	8001cfc <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe ffe0 	bl	8001cfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e053      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d210      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	4922      	ldr	r1, [pc, #136]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e032      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4916      	ldr	r1, [pc, #88]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dce:	f000 f821 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1cc>)
 8002de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1d0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff42 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	080037f8 	.word	0x080037f8
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x30>
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x36>
 8002e42:	e027      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x98>)
 8002e46:	613b      	str	r3, [r7, #16]
      break;
 8002e48:	e027      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0c9b      	lsrs	r3, r3, #18
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0c5b      	lsrs	r3, r3, #17
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e004      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	613b      	str	r3, [r7, #16]
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetSysClockFreq+0x98>)
 8002e96:	613b      	str	r3, [r7, #16]
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	693b      	ldr	r3, [r7, #16]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	007a1200 	.word	0x007a1200
 8002eb0:	08003808 	.word	0x08003808
 8002eb4:	08003818 	.word	0x08003818
 8002eb8:	003d0900 	.word	0x003d0900

08002ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <RCC_Delay+0x34>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <RCC_Delay+0x38>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a5b      	lsrs	r3, r3, #9
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ed8:	bf00      	nop
  }
  while (Delay --);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	60fa      	str	r2, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <RCC_Delay+0x1c>
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	10624dd3 	.word	0x10624dd3

08002ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e076      	b.n	8002ff8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d108      	bne.n	8002f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1a:	d009      	beq.n	8002f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
 8002f22:	e005      	b.n	8002f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fdc2 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	ea42 0103 	orr.w	r1, r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	0c1a      	lsrs	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f002 0204 	and.w	r2, r2, #4
 8002fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_SPI_Transmit+0x22>
 800301e:	2302      	movs	r3, #2
 8003020:	e12d      	b.n	800327e <HAL_SPI_Transmit+0x27e>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302a:	f7fe fe67 	bl	8001cfc <HAL_GetTick>
 800302e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003044:	e116      	b.n	8003274 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_Transmit+0x52>
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003056:	e10d      	b.n	8003274 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	d10f      	bne.n	80030c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d007      	beq.n	80030de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e6:	d14f      	bne.n	8003188 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_Transmit+0xf6>
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d142      	bne.n	800317c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	1c9a      	adds	r2, r3, #2
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800311a:	e02f      	b.n	800317c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d112      	bne.n	8003150 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	86da      	strh	r2, [r3, #54]	; 0x36
 800314e:	e015      	b.n	800317c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003150:	f7fe fdd4 	bl	8001cfc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d803      	bhi.n	8003168 <HAL_SPI_Transmit+0x168>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d102      	bne.n	800316e <HAL_SPI_Transmit+0x16e>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800317a:	e07b      	b.n	8003274 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ca      	bne.n	800311c <HAL_SPI_Transmit+0x11c>
 8003186:	e050      	b.n	800322a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Transmit+0x196>
 8003190:	8afb      	ldrh	r3, [r7, #22]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d144      	bne.n	8003220 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031bc:	e030      	b.n	8003220 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d113      	bne.n	80031f4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80031f2:	e015      	b.n	8003220 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f4:	f7fe fd82 	bl	8001cfc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d803      	bhi.n	800320c <HAL_SPI_Transmit+0x20c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Transmit+0x212>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800321e:	e029      	b.n	8003274 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1c9      	bne.n	80031be <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa6e 	bl	8003710 <SPI_EndRxTxTransaction>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e003      	b.n	8003274 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800327c:	7ffb      	ldrb	r3, [r7, #31]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b08c      	sub	sp, #48	; 0x30
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003294:	2301      	movs	r3, #1
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x26>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e198      	b.n	80035de <HAL_SPI_TransmitReceive+0x358>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b4:	f7fe fd22 	bl	8001cfc <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00f      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x70>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032dc:	d107      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x68>
 80032e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032f4:	e16d      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x82>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x82>
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800330e:	e160      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b04      	cmp	r3, #4
 800331a:	d003      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2205      	movs	r2, #5
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d007      	beq.n	8003378 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003380:	d17c      	bne.n	800347c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x10a>
 800338a:	8b7b      	ldrh	r3, [r7, #26]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d16a      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b4:	e057      	b.n	8003466 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11b      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x176>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d016      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x176>
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d113      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d119      	bne.n	800343e <HAL_SPI_TransmitReceive+0x1b8>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d014      	beq.n	800343e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	b292      	uxth	r2, r2
 8003420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800343a:	2301      	movs	r3, #1
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800343e:	f7fe fc5d 	bl	8001cfc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344a:	429a      	cmp	r2, r3
 800344c:	d80b      	bhi.n	8003466 <HAL_SPI_TransmitReceive+0x1e0>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d007      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003464:	e0b5      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1a2      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x130>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d19d      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x130>
 800347a:	e080      	b.n	800357e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_TransmitReceive+0x204>
 8003484:	8b7b      	ldrh	r3, [r7, #26]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d16f      	bne.n	800356a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b0:	e05b      	b.n	800356a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11c      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x274>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x274>
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d114      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	7812      	ldrb	r2, [r2, #0]
 80034dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d119      	bne.n	800353c <HAL_SPI_TransmitReceive+0x2b6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d014      	beq.n	800353c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003538:	2301      	movs	r3, #1
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800353c:	f7fe fbde 	bl	8001cfc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003548:	429a      	cmp	r2, r3
 800354a:	d803      	bhi.n	8003554 <HAL_SPI_TransmitReceive+0x2ce>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d102      	bne.n	800355a <HAL_SPI_TransmitReceive+0x2d4>
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003568:	e033      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d19e      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x22c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d199      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8c4 	bl	8003710 <SPI_EndRxTxTransaction>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800359a:	e01a      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c8:	e003      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3730      	adds	r7, #48	; 0x30
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f4:	b2db      	uxtb	r3, r3
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003610:	f7fe fb74 	bl	8001cfc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003620:	f7fe fb6c 	bl	8001cfc <HAL_GetTick>
 8003624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	015b      	lsls	r3, r3, #5
 800362c:	0d1b      	lsrs	r3, r3, #20
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	e054      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d050      	beq.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003640:	f7fe fb5c 	bl	8001cfc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d902      	bls.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d13d      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366e:	d111      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d004      	beq.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d107      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d10f      	bne.n	80036be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e017      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d19b      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ff6a 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e000      	b.n	8003744 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <memset>:
 800374c:	4603      	mov	r3, r0
 800374e:	4402      	add	r2, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2600      	movs	r6, #0
 8003760:	4d0c      	ldr	r5, [pc, #48]	; (8003794 <__libc_init_array+0x38>)
 8003762:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	f000 f828 	bl	80037c0 <_init>
 8003770:	2600      	movs	r6, #0
 8003772:	4d0a      	ldr	r5, [pc, #40]	; (800379c <__libc_init_array+0x40>)
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <__libc_init_array+0x44>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f855 3b04 	ldr.w	r3, [r5], #4
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f855 3b04 	ldr.w	r3, [r5], #4
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	08003824 	.word	0x08003824
 8003798:	08003824 	.word	0x08003824
 800379c:	08003824 	.word	0x08003824
 80037a0:	08003828 	.word	0x08003828

080037a4 <memcpy>:
 80037a4:	440a      	add	r2, r1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	4770      	bx	lr
 80037b0:	b510      	push	{r4, lr}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	4291      	cmp	r1, r2
 80037b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037bc:	d1f9      	bne.n	80037b2 <memcpy+0xe>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <_init>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr

080037cc <_fini>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr
