
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004550  08004550  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000050  080045a4  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080045a4  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009159  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002623  00000000  00000000  00029211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181c1  00000000  00000000  0002c93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdc5  00000000  00000000  00044afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000842c2  00000000  00000000  000508c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002580  00000000  00000000  000d4b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d7104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	080043e0 	.word	0x080043e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	080043e0 	.word	0x080043e0

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <BL_u32ReadAddressData>:
static  uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static  uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
struct AES_ctx ctx_fw;
static Bitmask bm;
//**************************Include***************************//
uint32_t BL_u32ReadAddressData(uint32_t address){
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	0000      	movs	r0, r0
 800046c:	0000      	movs	r0, r0
	...

08000470 <BL_voidSetConfigLoRa>:
// Set default baudrate in bootloader
void BL_voidSetConfigLoRa(){
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af06      	add	r7, sp, #24
	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12,
 8000476:	2310      	movs	r3, #16
 8000478:	9305      	str	r3, [sp, #20]
 800047a:	2300      	movs	r3, #0
 800047c:	9304      	str	r3, [sp, #16]
 800047e:	2300      	movs	r3, #0
 8000480:	9303      	str	r3, [sp, #12]
 8000482:	2307      	movs	r3, #7
 8000484:	9302      	str	r3, [sp, #8]
 8000486:	2306      	movs	r3, #6
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	2301      	movs	r3, #1
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	a305      	add	r3, pc, #20	; (adr r3, 80004a4 <BL_voidSetConfigLoRa+0x34>)
 8000490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <BL_voidSetConfigLoRa+0x30>)
 8000496:	f001 f9fc 	bl	8001892 <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 16);
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200003c0 	.word	0x200003c0
 80004a4:	19cf0e40 	.word	0x19cf0e40
 80004a8:	00000000 	.word	0x00000000

080004ac <BL_voidBootLoader_Init>:
//**************************Function Define***************************//


void BL_voidBootLoader_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	//BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER,BL_BRANCHING_FLAG_SET);
	// Read Branching Request Update Flag.
	// UI init boot
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <BL_voidBootLoader_Init+0x30>)
 80004b4:	f7ff ffcc 	bl	8000450 <BL_u32ReadAddressData>
 80004b8:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c0:	d102      	bne.n	80004c8 <BL_voidBootLoader_Init+0x1c>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 80004c2:	f000 f9b1 	bl	8000828 <BL_voidCheckActiveRegion>
	else
	{
		// Do nothing3
		// Application  not exited and backup image not exit
	}
}
 80004c6:	e004      	b.n	80004d2 <BL_voidBootLoader_Init+0x26>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d101      	bne.n	80004d2 <BL_voidBootLoader_Init+0x26>
	    BL_voidJumpToBootloader();
 80004ce:	f000 fa39 	bl	8000944 <BL_voidJumpToBootloader>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	0801fc00 	.word	0x0801fc00

080004e0 <BL_CheckSize>:
uint8_t BL_CheckSize(uint32_t size_app){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	//Read size of first bank
	uint32_t Local_u32sizeofapp = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <BL_CheckSize+0x28>)
 80004ea:	f7ff ffb1 	bl	8000450 <BL_u32ReadAddressData>
 80004ee:	60f8      	str	r0, [r7, #12]

	return( Local_u32sizeofapp <= APP_ACTIVE_SIZE ) ? BL_OK : BL_SIZE_ERROR;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004f6:	d801      	bhi.n	80004fc <BL_CheckSize+0x1c>
 80004f8:	2300      	movs	r3, #0
 80004fa:	e000      	b.n	80004fe <BL_CheckSize+0x1e>
 80004fc:	2302      	movs	r3, #2
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	0801fc18 	.word	0x0801fc18

0800050c <BL_VerifyCheckSum>:
 * @return Bootloader error code ::eBootloaderErrorCodes
 * @retval BL_OK: if calculated checksum matches the application checksum
 * @retval BL_CHKS_ERROR: upon checksum mismatch or when ::USE_CHECKSUM is
 *         disabled
 */
uint8_t BL_VerifyCheckSum(uint32_t u32Size_of_Image , uint32_t CRC_CODE, uint32_t Active_Addr_Indicate){
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	#if(USE_CHECKSUM)
		// Enable Clock for CRC
		uint32_t  Local_DataAddressVal  = BL_INITIALIZE_WITH_ZERO;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
		uint32_t  Local_ActiveIndicateAddr  = BL_INITIALIZE_WITH_ZERO;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
		// set the mark for the active addr
		Local_ActiveIndicateAddr = Active_Addr_Indicate;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	617b      	str	r3, [r7, #20]
		uint32_t Local_VectorTableOffset  = BL_INITIALIZE_WITH_ZERO;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
		RCC->AHBENR |=0x40;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <BL_VerifyCheckSum+0xa4>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <BL_VerifyCheckSum+0xa4>)
 800052e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000532:	6153      	str	r3, [r2, #20]
		u32Size_of_Image = u32Size_of_Image/4;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	60fb      	str	r3, [r7, #12]
		/* Resets the CRC calculation unit and set the data register to 0xFFFF_FFFF*/
		CRC->CR = 0x01;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <BL_VerifyCheckSum+0xa8>)
 800053c:	2201      	movs	r2, #1
 800053e:	609a      	str	r2, [r3, #8]
		for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	e024      	b.n	8000590 <BL_VerifyCheckSum+0x84>
			/* Calculate CRC */
			Local_DataAddressVal = BL_u32ReadAddressData(Active_Addr_Indicate);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ff82 	bl	8000450 <BL_u32ReadAddressData>
 800054c:	61f8      	str	r0, [r7, #28]
			if (Local_ActiveIndicateAddr  == BANKSECOND_IMAGE){
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <BL_VerifyCheckSum+0xac>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d113      	bne.n	800057e <BL_VerifyCheckSum+0x72>
				Local_VectorTableOffset = Local_DataAddressVal - BANKSECOND_IMAGE;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800055c:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
 8000560:	613b      	str	r3, [r7, #16]
				if(Local_VectorTableOffset > 0 &&Local_VectorTableOffset < 0xFFFF ){
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00a      	beq.n	800057e <BL_VerifyCheckSum+0x72>
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800056e:	4293      	cmp	r3, r2
 8000570:	d805      	bhi.n	800057e <BL_VerifyCheckSum+0x72>
					Local_DataAddressVal = BANKFIRST_IMAGE + Local_VectorTableOffset;
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000578:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800057c:	61fb      	str	r3, [r7, #28]
				}
			}
			CRC->DR  = Local_DataAddressVal;
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <BL_VerifyCheckSum+0xa8>)
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	6013      	str	r3, [r2, #0]
			// Recall calculate for CRC IMG bank second
			Active_Addr_Indicate+=0x04u;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3304      	adds	r3, #4
 8000588:	607b      	str	r3, [r7, #4]
		for(uint32_t Local_u32Count = 0U ; Local_u32Count < u32Size_of_Image ; Local_u32Count++){
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	3301      	adds	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69ba      	ldr	r2, [r7, #24]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	429a      	cmp	r2, r3
 8000596:	d3d6      	bcc.n	8000546 <BL_VerifyCheckSum+0x3a>
			}
	#endif
		// Check Valid Image
		if((CRC->DR) == CRC_CODE ){
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <BL_VerifyCheckSum+0xa8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d101      	bne.n	80005a6 <BL_VerifyCheckSum+0x9a>
			return BL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <BL_VerifyCheckSum+0x9c>
		}
		return BL_CHKS_ERROR;
 80005a6:	2303      	movs	r3, #3

}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40023000 	.word	0x40023000
 80005b8:	0800d000 	.word	0x0800d000

080005bc <BL_voidEraseBank>:

HAL_StatusTypeDef BL_voidEraseBank(uint32_t Address_Flash)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;
	if (Address_Flash == BR_SET_IMAGE_NOT_EXISTING ){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ca:	d101      	bne.n	80005d0 <BL_voidEraseBank+0x14>
		Address_Flash = BANKFIRST_IMAGE;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <BL_voidEraseBank+0x4c>)
 80005ce:	607b      	str	r3, [r7, #4]
	}
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = Address_Flash;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	32;
 80005dc:	2320      	movs	r3, #32
 80005de:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80005e0:	f002 fb1e 	bl	8002c20 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80005e4:	f107 0208 	add.w	r2, r7, #8
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fbfe 	bl	8002df0 <HAL_FLASHEx_Erase>
 80005f4:	4603      	mov	r3, r0
 80005f6:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 80005f8:	f002 fb38 	bl	8002c6c <HAL_FLASH_Lock>
	return Local_retVal;
 80005fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08005000 	.word	0x08005000

0800060c <initBitMask>:

void initBitMask(Bitmask *bm){
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (NUM_PACKETS_MAX+7) / 8; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e007      	b.n	800062a <initBitMask+0x1e>
		bm->bitmask[i] = 0;
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (NUM_PACKETS_MAX+7) / 8; i++) {
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2b3f      	cmp	r3, #63	; 0x3f
 800062e:	d9f4      	bls.n	800061a <initBitMask+0xe>
	}
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <setBit_BitMask>:

void setBit_BitMask(Bitmask *bm , uint16_t packetNumber){
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	807b      	strh	r3, [r7, #2]
	uint8_t index = (packetNumber-1) / 8;
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	3b01      	subs	r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	da00      	bge.n	8000652 <setBit_BitMask+0x16>
 8000650:	3307      	adds	r3, #7
 8000652:	10db      	asrs	r3, r3, #3
 8000654:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (packetNumber-1) % 8;
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	3b01      	subs	r3, #1
 800065a:	425a      	negs	r2, r3
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	f002 0207 	and.w	r2, r2, #7
 8000664:	bf58      	it	pl
 8000666:	4253      	negpl	r3, r2
 8000668:	73bb      	strb	r3, [r7, #14]
	bm->bitmask[index] |= (1 << offset);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	b25a      	sxtb	r2, r3
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	b25b      	sxtb	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b25a      	sxtb	r2, r3
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	54d1      	strb	r1, [r2, r3]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <BL_voidCheckImgCorrectBankFirst>:
void BL_voidCheckImgCorrectBankFirst(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_BANKFIRST_REGION_ADDRESS);
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <BL_voidCheckImgCorrectBankFirst+0xb0>)
 800069c:	f7ff fed8 	bl	8000450 <BL_u32ReadAddressData>
 80006a0:	6178      	str	r0, [r7, #20]
	uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS);
 80006a2:	4829      	ldr	r0, [pc, #164]	; (8000748 <BL_voidCheckImgCorrectBankFirst+0xb4>)
 80006a4:	f7ff fed4 	bl	8000450 <BL_u32ReadAddressData>
 80006a8:	6138      	str	r0, [r7, #16]
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80006aa:	f06f 030c 	mvn.w	r3, #12
 80006ae:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32SizeOfImageActive = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 80006b0:	4826      	ldr	r0, [pc, #152]	; (800074c <BL_voidCheckImgCorrectBankFirst+0xb8>)
 80006b2:	f7ff fecd 	bl	8000450 <BL_u32ReadAddressData>
 80006b6:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32ActiveRegion      = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 80006b8:	4825      	ldr	r0, [pc, #148]	; (8000750 <BL_voidCheckImgCorrectBankFirst+0xbc>)
 80006ba:	f7ff fec9 	bl	8000450 <BL_u32ReadAddressData>
 80006be:	6078      	str	r0, [r7, #4]
	if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE  )
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	f113 0f0f 	cmn.w	r3, #15
 80006c6:	d118      	bne.n	80006fa <BL_voidCheckImgCorrectBankFirst+0x66>
		{
			//Verify CheckSum
	    	if(BL_VerifyCheckSum(Local_u32SizeOfImageActive, Local_u32ReceivedCRC ,FIRST_IMAGE_START_ADDRESS ) == BL_OK){
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <BL_voidCheckImgCorrectBankFirst+0xc0>)
 80006ca:	6939      	ldr	r1, [r7, #16]
 80006cc:	68b8      	ldr	r0, [r7, #8]
 80006ce:	f7ff ff1d 	bl	800050c <BL_VerifyCheckSum>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10a      	bne.n	80006ee <BL_voidCheckImgCorrectBankFirst+0x5a>
	    		if(Local_u32ActiveRegion != BR_SET_IMAGE_NOT_EXISTING)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006de:	d003      	beq.n	80006e8 <BL_voidCheckImgCorrectBankFirst+0x54>
	    			BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS, BANKFIRST_IMAGE);
 80006e0:	491c      	ldr	r1, [pc, #112]	; (8000754 <BL_voidCheckImgCorrectBankFirst+0xc0>)
 80006e2:	481b      	ldr	r0, [pc, #108]	; (8000750 <BL_voidCheckImgCorrectBankFirst+0xbc>)
 80006e4:	f000 f934 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
	    		BL_voidJumpToActiveRegion();
 80006e8:	f000 f900 	bl	80008ec <BL_voidJumpToActiveRegion>
		}
	    else
	    {
	        // Do nothing
	    }
}
 80006ec:	e025      	b.n	800073a <BL_voidCheckImgCorrectBankFirst+0xa6>
	    		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_CORRUPTED);
 80006ee:	f06f 010b 	mvn.w	r1, #11
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <BL_voidCheckImgCorrectBankFirst+0xb0>)
 80006f4:	f000 f92c 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
}
 80006f8:	e01f      	b.n	800073a <BL_voidCheckImgCorrectBankFirst+0xa6>
	else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	f113 0f0c 	cmn.w	r3, #12
 8000700:	d003      	beq.n	800070a <BL_voidCheckImgCorrectBankFirst+0x76>
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000708:	d117      	bne.n	800073a <BL_voidCheckImgCorrectBankFirst+0xa6>
	    	Local_u32BackupStatus    = BL_32CheckBankSecondRegion();
 800070a:	f000 f8cf 	bl	80008ac <BL_32CheckBankSecondRegion>
 800070e:	60f8      	str	r0, [r7, #12]
			if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f113 0f0e 	cmn.w	r3, #14
 8000716:	d106      	bne.n	8000726 <BL_voidCheckImgCorrectBankFirst+0x92>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKSECOND_IMAGE);
 8000718:	490f      	ldr	r1, [pc, #60]	; (8000758 <BL_voidCheckImgCorrectBankFirst+0xc4>)
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <BL_voidCheckImgCorrectBankFirst+0xbc>)
 800071c:	f000 f918 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				BL_voidJumpToActiveRegion();
 8000720:	f000 f8e4 	bl	80008ec <BL_voidJumpToActiveRegion>
}
 8000724:	e009      	b.n	800073a <BL_voidCheckImgCorrectBankFirst+0xa6>
			else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f113 0f0c 	cmn.w	r3, #12
 800072c:	d003      	beq.n	8000736 <BL_voidCheckImgCorrectBankFirst+0xa2>
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d101      	bne.n	800073a <BL_voidCheckImgCorrectBankFirst+0xa6>
				BL_voidSetBranchingFlagAndMakeSWR();
 8000736:	f000 f9a1 	bl	8000a7c <BL_voidSetBranchingFlagAndMakeSWR>
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	0801fc14 	.word	0x0801fc14
 8000748:	0801fc1c 	.word	0x0801fc1c
 800074c:	0801fc18 	.word	0x0801fc18
 8000750:	0801fc44 	.word	0x0801fc44
 8000754:	08005000 	.word	0x08005000
 8000758:	0800d000 	.word	0x0800d000

0800075c <BL_voidCheckImgCorrectBankSecond>:
void BL_voidCheckImgCorrectBankSecond(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_BANKSECOND_REGION_ADDRESS);
 8000762:	482a      	ldr	r0, [pc, #168]	; (800080c <BL_voidCheckImgCorrectBankSecond+0xb0>)
 8000764:	f7ff fe74 	bl	8000450 <BL_u32ReadAddressData>
 8000768:	6178      	str	r0, [r7, #20]
	uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS);
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <BL_voidCheckImgCorrectBankSecond+0xb4>)
 800076c:	f7ff fe70 	bl	8000450 <BL_u32ReadAddressData>
 8000770:	6138      	str	r0, [r7, #16]
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 8000772:	f06f 030c 	mvn.w	r3, #12
 8000776:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32SizeOfImageActive = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 8000778:	4826      	ldr	r0, [pc, #152]	; (8000814 <BL_voidCheckImgCorrectBankSecond+0xb8>)
 800077a:	f7ff fe69 	bl	8000450 <BL_u32ReadAddressData>
 800077e:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32ActiveRegion      = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000780:	4825      	ldr	r0, [pc, #148]	; (8000818 <BL_voidCheckImgCorrectBankSecond+0xbc>)
 8000782:	f7ff fe65 	bl	8000450 <BL_u32ReadAddressData>
 8000786:	6078      	str	r0, [r7, #4]
	if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE  )
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	f113 0f0f 	cmn.w	r3, #15
 800078e:	d118      	bne.n	80007c2 <BL_voidCheckImgCorrectBankSecond+0x66>
	{
		//Verify CheckSum
		if(BL_VerifyCheckSum(Local_u32SizeOfImageActive, Local_u32ReceivedCRC , SECOND_IMAGE_START_ADDRESS) == BL_OK ){
 8000790:	4a22      	ldr	r2, [pc, #136]	; (800081c <BL_voidCheckImgCorrectBankSecond+0xc0>)
 8000792:	6939      	ldr	r1, [r7, #16]
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f7ff feb9 	bl	800050c <BL_VerifyCheckSum>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10a      	bne.n	80007b6 <BL_voidCheckImgCorrectBankSecond+0x5a>
			if(Local_u32ActiveRegion != BR_SET_IMAGE_NOT_EXISTING)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a6:	d003      	beq.n	80007b0 <BL_voidCheckImgCorrectBankSecond+0x54>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS, BANKSECOND_IMAGE);
 80007a8:	491c      	ldr	r1, [pc, #112]	; (800081c <BL_voidCheckImgCorrectBankSecond+0xc0>)
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <BL_voidCheckImgCorrectBankSecond+0xbc>)
 80007ac:	f000 f8d0 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
			BL_voidJumpToActiveRegion();
 80007b0:	f000 f89c 	bl	80008ec <BL_voidJumpToActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 80007b4:	e025      	b.n	8000802 <BL_voidCheckImgCorrectBankSecond+0xa6>
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_CORRUPTED);
 80007b6:	f06f 010b 	mvn.w	r1, #11
 80007ba:	4819      	ldr	r0, [pc, #100]	; (8000820 <BL_voidCheckImgCorrectBankSecond+0xc4>)
 80007bc:	f000 f8c8 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
}
 80007c0:	e01f      	b.n	8000802 <BL_voidCheckImgCorrectBankSecond+0xa6>
	else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	f113 0f0c 	cmn.w	r3, #12
 80007c8:	d003      	beq.n	80007d2 <BL_voidCheckImgCorrectBankSecond+0x76>
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d117      	bne.n	8000802 <BL_voidCheckImgCorrectBankSecond+0xa6>
		Local_u32BackupStatus    = BL_32CheckBankFirstRegion();
 80007d2:	f000 f84b 	bl	800086c <BL_32CheckBankFirstRegion>
 80007d6:	60f8      	str	r0, [r7, #12]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f113 0f0e 	cmn.w	r3, #14
 80007de:	d106      	bne.n	80007ee <BL_voidCheckImgCorrectBankSecond+0x92>
			BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKFIRST_IMAGE);
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <BL_voidCheckImgCorrectBankSecond+0xc8>)
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <BL_voidCheckImgCorrectBankSecond+0xbc>)
 80007e4:	f000 f8b4 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
			BL_voidJumpToActiveRegion();
 80007e8:	f000 f880 	bl	80008ec <BL_voidJumpToActiveRegion>
}
 80007ec:	e009      	b.n	8000802 <BL_voidCheckImgCorrectBankSecond+0xa6>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f113 0f0c 	cmn.w	r3, #12
 80007f4:	d003      	beq.n	80007fe <BL_voidCheckImgCorrectBankSecond+0xa2>
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d101      	bne.n	8000802 <BL_voidCheckImgCorrectBankSecond+0xa6>
			BL_voidSetBranchingFlagAndMakeSWR();
 80007fe:	f000 f93d 	bl	8000a7c <BL_voidSetBranchingFlagAndMakeSWR>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	0801fc34 	.word	0x0801fc34
 8000810:	0801fc3c 	.word	0x0801fc3c
 8000814:	0801fc38 	.word	0x0801fc38
 8000818:	0801fc44 	.word	0x0801fc44
 800081c:	0800d000 	.word	0x0800d000
 8000820:	0801fc14 	.word	0x0801fc14
 8000824:	08005000 	.word	0x08005000

08000828 <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveRegionRunning = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <BL_voidCheckActiveRegion+0x38>)
 8000830:	f7ff fe0e 	bl	8000450 <BL_u32ReadAddressData>
 8000834:	6078      	str	r0, [r7, #4]
	switch(Local_u32ActiveRegionRunning)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <BL_voidCheckActiveRegion+0x3c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d004      	beq.n	8000848 <BL_voidCheckActiveRegion+0x20>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <BL_voidCheckActiveRegion+0x40>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d003      	beq.n	800084e <BL_voidCheckActiveRegion+0x26>
		case BANKSECOND_IMAGE:
			BL_voidCheckImgCorrectBankSecond();
			break;
		default :
			/*ERROR*/
			break;
 8000846:	e005      	b.n	8000854 <BL_voidCheckActiveRegion+0x2c>
			BL_voidCheckImgCorrectBankFirst();
 8000848:	f7ff ff24 	bl	8000694 <BL_voidCheckImgCorrectBankFirst>
			break;
 800084c:	e002      	b.n	8000854 <BL_voidCheckActiveRegion+0x2c>
			BL_voidCheckImgCorrectBankSecond();
 800084e:	f7ff ff85 	bl	800075c <BL_voidCheckImgCorrectBankSecond>
			break;
 8000852:	bf00      	nop

	}
	// Reset SW
	BL_voidSetBranchingFlagAndMakeSWR();
 8000854:	f000 f912 	bl	8000a7c <BL_voidSetBranchingFlagAndMakeSWR>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0801fc44 	.word	0x0801fc44
 8000864:	08005000 	.word	0x08005000
 8000868:	0800d000 	.word	0x0800d000

0800086c <BL_32CheckBankFirstRegion>:

uint32_t BL_32CheckBankFirstRegion(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BANKFIRST_REGION_ADDRESS);
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <BL_32CheckBankFirstRegion+0x3c>)
 8000874:	f7ff fdec 	bl	8000450 <BL_u32ReadAddressData>
 8000878:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_ACTIVE)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f113 0f0f 	cmn.w	r3, #15
 8000880:	d102      	bne.n	8000888 <BL_32CheckBankFirstRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 8000882:	f06f 030d 	mvn.w	r3, #13
 8000886:	e00b      	b.n	80008a0 <BL_32CheckBankFirstRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f113 0f0c 	cmn.w	r3, #12
 800088e:	d003      	beq.n	8000898 <BL_32CheckBankFirstRegion+0x2c>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000896:	d102      	bne.n	800089e <BL_32CheckBankFirstRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000898:	f06f 030b 	mvn.w	r3, #11
 800089c:	e000      	b.n	80008a0 <BL_32CheckBankFirstRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	0801fc14 	.word	0x0801fc14

080008ac <BL_32CheckBankSecondRegion>:

uint32_t BL_32CheckBankSecondRegion(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BANKSECOND_REGION_ADDRESS);
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <BL_32CheckBankSecondRegion+0x3c>)
 80008b4:	f7ff fdcc 	bl	8000450 <BL_u32ReadAddressData>
 80008b8:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_ACTIVE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f113 0f0f 	cmn.w	r3, #15
 80008c0:	d102      	bne.n	80008c8 <BL_32CheckBankSecondRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 80008c2:	f06f 030d 	mvn.w	r3, #13
 80008c6:	e00b      	b.n	80008e0 <BL_32CheckBankSecondRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f113 0f0c 	cmn.w	r3, #12
 80008ce:	d003      	beq.n	80008d8 <BL_32CheckBankSecondRegion+0x2c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d6:	d102      	bne.n	80008de <BL_32CheckBankSecondRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 80008d8:	f06f 030b 	mvn.w	r3, #11
 80008dc:	e000      	b.n	80008e0 <BL_32CheckBankSecondRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	0801fc34 	.word	0x0801fc34

080008ec <BL_voidJumpToActiveRegion>:


void BL_voidJumpToActiveRegion(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	uint32_t Local_u32ActiveImageAddress = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <BL_voidJumpToActiveRegion+0x48>)
 80008f4:	f7ff fdac 	bl	8000450 <BL_u32ReadAddressData>
 80008f8:	6078      	str	r0, [r7, #4]
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <BL_voidJumpToActiveRegion+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000900:	f001 ffac 	bl	800285c <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <BL_voidJumpToActiveRegion+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	//uint32_t Local_u32ActiveImageAddress  = *(Application_t*)(Local_u32ActiveImageAddress + 4) ;
	Application_t AddressToCall = 0 ;
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
	AddressToCall = *(Application_t*)(Local_u32ActiveImageAddress + 4); // Point to Reset Handler
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3304      	adds	r3, #4
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	603b      	str	r3, [r7, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000916:	f3bf 8f5f 	dmb	sy
}
 800091a:	bf00      	nop
	//AddressToCall = Local_u32ActiveImageAddress;
	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = Local_u32ActiveImageAddress; //We relocate vector table to the sector 1 of Active Region
 800091c:	4a08      	ldr	r2, [pc, #32]	; (8000940 <BL_voidJumpToActiveRegion+0x54>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after 	relocating VTOR */

	AddressToCall();
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	4798      	blx	r3
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0801fc44 	.word	0x0801fc44
 8000938:	e000e010 	.word	0xe000e010
 800093c:	40021000 	.word	0x40021000
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 8000948:	f000 f8a6 	bl	8000a98 <BL_voidUpdateHeaders>
	//BL_voidReceiveUpdate();
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000954:	b0b2      	sub	sp, #200	; 0xc8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 800096e:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000974:	e031      	b.n	80009da <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8000976:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2da      	uxtb	r2, r3
 8000986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000990:	bf14      	ite	ne
 8000992:	2301      	movne	r3, #1
 8000994:	2300      	moveq	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4013      	ands	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d017      	beq.n	80009d0 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80009a0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	33c8      	adds	r3, #200	; 0xc8
 80009a8:	443b      	add	r3, r7
 80009aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80009ae:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80009b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80009b6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	33c8      	adds	r3, #200	; 0xc8
 80009c0:	443b      	add	r3, r7
 80009c2:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80009c6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80009ca:	3301      	adds	r3, #1
 80009cc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 80009d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80009d4:	3304      	adds	r3, #4
 80009d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80009da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80009de:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <BL_voidEraseRestoreHeaderPage+0x128>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d9c8      	bls.n	8000976 <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <BL_voidEraseRestoreHeaderPage+0x124>)
 80009ee:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80009f4:	f002 f914 	bl	8002c20 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 f9f4 	bl	8002df0 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000a0e:	e01a      	b.n	8000a46 <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000a10:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	33c8      	adds	r3, #200	; 0xc8
 8000a18:	443b      	add	r3, r7
 8000a1a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8000a1e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	33c8      	adds	r3, #200	; 0xc8
 8000a26:	443b      	add	r3, r7
 8000a28:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4698      	mov	r8, r3
 8000a30:	4691      	mov	r9, r2
 8000a32:	4642      	mov	r2, r8
 8000a34:	464b      	mov	r3, r9
 8000a36:	2002      	movs	r0, #2
 8000a38:	f002 f882 	bl	8002b40 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000a3c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000a40:	3301      	adds	r3, #1
 8000a42:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000a46:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8000a4a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d3de      	bcc.n	8000a10 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	461c      	mov	r4, r3
 8000a58:	4615      	mov	r5, r2
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	462b      	mov	r3, r5
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2002      	movs	r0, #2
 8000a62:	f002 f86d 	bl	8002b40 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000a66:	f002 f901 	bl	8002c6c <HAL_FLASH_Lock>
}
 8000a6a:	bf00      	nop
 8000a6c:	37c8      	adds	r7, #200	; 0xc8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a74:	0801fc00 	.word	0x0801fc00
 8000a78:	0801fc4f 	.word	0x0801fc4f

08000a7c <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000a80:	2100      	movs	r1, #0
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 8000a84:	f7ff ff64 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 8000a88:	f000 fba0 	bl	80011cc <BL_voidMakeSoftWareReset>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	0801fc00 	.word	0x0801fc00
 8000a94:	00000000 	.word	0x00000000

08000a98 <BL_voidUpdateHeaders>:


/*Update size of Image in header*/
void BL_voidUpdateHeaders(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af06      	add	r7, sp, #24
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32CRCImage 					=BL_INITIALIZE_WITH_ZERO;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
	uint32_t Local_u32VerImage 					= BL_INITIALIZE_WITH_ZERO;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
	uint32_t Local_u32ActiveRegionRunning = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000aaa:	4873      	ldr	r0, [pc, #460]	; (8000c78 <BL_voidUpdateHeaders+0x1e0>)
 8000aac:	f7ff fcd0 	bl	8000450 <BL_u32ReadAddressData>
 8000ab0:	6038      	str	r0, [r7, #0]
	//Structure LoRa Transmit
	BL_voidSetConfigLoRa();
 8000ab2:	f7ff fcdd 	bl	8000470 <BL_voidSetConfigLoRa>
	// get Config Synchronize
	/* MCU response MCU_ENTER_FBL to GW and expect get resp as GW_SYNC_CONFIG*/
	LORA_IF_Stransmit_Response(&SX1278, buffer_resp, ret, ADDR_NODE_1, MCU_ACCEPT_REQUEST);
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <BL_voidUpdateHeaders+0x1e4>)
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	2302      	movs	r3, #2
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	496f      	ldr	r1, [pc, #444]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000ac2:	4870      	ldr	r0, [pc, #448]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000ac4:	f001 f950 	bl	8001d68 <LORA_IF_Stransmit_Response>
	ret = SX1278_LoRaEntryRx(&SX1278, SIZE_BUFFER_16BYTES , 10000);
 8000ac8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000acc:	2110      	movs	r1, #16
 8000ace:	486d      	ldr	r0, [pc, #436]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000ad0:	f000 fd98 	bl	8001604 <SX1278_LoRaEntryRx>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <BL_voidUpdateHeaders+0x1e4>)
 8000ada:	701a      	strb	r2, [r3, #0]
	while(1){
		// Wait to get GW CONFIG
		// Request LoRa stransmit to get size of code
		if(LORA_IF_Stransmit_Request(&SX1278,(uint8_t*)  buffer_resp, ret, ADDR_NODE_1 , GW_SYNC_CONFIG ) == LORA_OKE)
 8000adc:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <BL_voidUpdateHeaders+0x1e4>)
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	4966      	ldr	r1, [pc, #408]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000ae8:	4866      	ldr	r0, [pc, #408]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000aea:	f001 f8a7 	bl	8001c3c <LORA_IF_Stransmit_Request>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f3      	bne.n	8000adc <BL_voidUpdateHeaders+0x44>
		{
			//Send response to GW
			LORA_IF_TransferData_Frame(&SX1278, (uint8_t*)  buffer_req, ret, MAX_TIME_OUT, SIZE_BUFFER_16BYTES, MCU_RECEIVED_CONFIG);
 8000af4:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <BL_voidUpdateHeaders+0x1e4>)
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	2321      	movs	r3, #33	; 0x21
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	2310      	movs	r3, #16
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b04:	4960      	ldr	r1, [pc, #384]	; (8000c88 <BL_voidUpdateHeaders+0x1f0>)
 8000b06:	485f      	ldr	r0, [pc, #380]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000b08:	f001 f852 	bl	8001bb0 <LORA_IF_TransferData_Frame>
			//Set Parameter and Configurate for LoRa
			u8SF= buffer_resp[3];
 8000b0c:	4b5c      	ldr	r3, [pc, #368]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b0e:	78da      	ldrb	r2, [r3, #3]
 8000b10:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <BL_voidUpdateHeaders+0x1f4>)
 8000b12:	701a      	strb	r2, [r3, #0]
			u8BW= buffer_resp[4];
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b16:	791a      	ldrb	r2, [r3, #4]
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <BL_voidUpdateHeaders+0x1f8>)
 8000b1a:	701a      	strb	r2, [r3, #0]
			u8CR= buffer_resp[5];
 8000b1c:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b1e:	795a      	ldrb	r2, [r3, #5]
 8000b20:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <BL_voidUpdateHeaders+0x1fc>)
 8000b22:	701a      	strb	r2, [r3, #0]
			/*Response Goto Programming and Send Update Request */
			SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, u8SF,
 8000b24:	4b59      	ldr	r3, [pc, #356]	; (8000c8c <BL_voidUpdateHeaders+0x1f4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4a59      	ldr	r2, [pc, #356]	; (8000c90 <BL_voidUpdateHeaders+0x1f8>)
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	4959      	ldr	r1, [pc, #356]	; (8000c94 <BL_voidUpdateHeaders+0x1fc>)
 8000b2e:	7809      	ldrb	r1, [r1, #0]
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	9005      	str	r0, [sp, #20]
 8000b34:	2000      	movs	r0, #0
 8000b36:	9004      	str	r0, [sp, #16]
 8000b38:	9103      	str	r1, [sp, #12]
 8000b3a:	9202      	str	r2, [sp, #8]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	2301      	movs	r3, #1
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	a34b      	add	r3, pc, #300	; (adr r3, 8000c70 <BL_voidUpdateHeaders+0x1d8>)
 8000b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000b4a:	f000 fea2 	bl	8001892 <SX1278_init>
									u8BW, u8CR, SX1278_LORA_CRC_EN, 128);
			/*Get the size code */
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b50:	7a5b      	ldrb	r3, [r3, #9]
 8000b52:	061a      	lsls	r2, r3, #24
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b56:	7a1b      	ldrb	r3, [r3, #8]
 8000b58:	041b      	lsls	r3, r3, #16
 8000b5a:	431a      	orrs	r2, r3
					(buffer_resp[7] << SHIFT_8_BIT) | (buffer_resp[6] << SHIFT_0_BIT);
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b5e:	79db      	ldrb	r3, [r3, #7]
 8000b60:	021b      	lsls	r3, r3, #8
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000b62:	4313      	orrs	r3, r2
					(buffer_resp[7] << SHIFT_8_BIT) | (buffer_resp[6] << SHIFT_0_BIT);
 8000b64:	4a46      	ldr	r2, [pc, #280]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b66:	7992      	ldrb	r2, [r2, #6]
 8000b68:	4313      	orrs	r3, r2
			Local_u32ImageSizeInBytes = (buffer_resp[9] << SHIFT_24_BIT) | (buffer_resp[8] << SHIFT_16_BIT) |
 8000b6a:	60fb      	str	r3, [r7, #12]

			/*Get the Version Img*/
			Local_u32VerImage = (buffer_resp[11]<<SHIFT_8_BIT | buffer_resp[10] << SHIFT_0_BIT );
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b6e:	7adb      	ldrb	r3, [r3, #11]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b74:	7a92      	ldrb	r2, [r2, #10]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	607b      	str	r3, [r7, #4]
			/*Get the CRC */
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b7c:	7bdb      	ldrb	r3, [r3, #15]
 8000b7e:	061a      	lsls	r2, r3, #24
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b82:	7b9b      	ldrb	r3, [r3, #14]
 8000b84:	041b      	lsls	r3, r3, #16
 8000b86:	431a      	orrs	r2, r3
					(buffer_resp[13] << SHIFT_8_BIT) | (buffer_resp[12] << SHIFT_0_BIT);
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b8a:	7b5b      	ldrb	r3, [r3, #13]
 8000b8c:	021b      	lsls	r3, r3, #8
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000b8e:	4313      	orrs	r3, r2
					(buffer_resp[13] << SHIFT_8_BIT) | (buffer_resp[12] << SHIFT_0_BIT);
 8000b90:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000b92:	7b12      	ldrb	r2, [r2, #12]
 8000b94:	4313      	orrs	r3, r2
			Local_u32CRCImage = (buffer_resp[15] << SHIFT_24_BIT) | (buffer_resp[14] << SHIFT_16_BIT) |
 8000b96:	60bb      	str	r3, [r7, #8]
			// Get total packets
			//gl_totalPacket  = (buffer_resp[11]<<SHIFT_8_BIT) | (buffer_resp[10] <<SHIFT_0_BIT);
			/* MCU response MCU_ENTER_FBL to GW and expect get resp as GW_SYNC_CONFIG*/

			if(BL_CheckSize(Local_u32ImageSizeInBytes) == BL_CHKS_ERROR){
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fca1 	bl	80004e0 <BL_CheckSize>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d10e      	bne.n	8000bc2 <BL_voidUpdateHeaders+0x12a>
				LORA_IF_TransferData_Frame(&SX1278 , (uint8_t*) buffer_resp , ret , MAX_TIME_OUT ,SIZE_BUFFER_16BYTES , BL_LARGE_SIZE );
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <BL_voidUpdateHeaders+0x1e4>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	233f      	movs	r3, #63	; 0x3f
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	2310      	movs	r3, #16
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bb4:	4932      	ldr	r1, [pc, #200]	; (8000c80 <BL_voidUpdateHeaders+0x1e8>)
 8000bb6:	4833      	ldr	r0, [pc, #204]	; (8000c84 <BL_voidUpdateHeaders+0x1ec>)
 8000bb8:	f000 fffa 	bl	8001bb0 <LORA_IF_TransferData_Frame>
				BL_voidSetBranchingFlagAndMakeSWR();
 8000bbc:	f7ff ff5e 	bl	8000a7c <BL_voidSetBranchingFlagAndMakeSWR>
 8000bc0:	e78c      	b.n	8000adc <BL_voidUpdateHeaders+0x44>
			}
			else{
				switch(Local_u32ActiveRegionRunning)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d032      	beq.n	8000c30 <BL_voidUpdateHeaders+0x198>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <BL_voidUpdateHeaders+0x200>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d004      	beq.n	8000bdc <BL_voidUpdateHeaders+0x144>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <BL_voidUpdateHeaders+0x204>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d015      	beq.n	8000c06 <BL_voidUpdateHeaders+0x16e>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
					//update imgsize
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS,Local_u32ImageSizeInBytes);
					BL_voidEraseBank(BANKFIRST_IMAGE);
					break;
				default: break;
 8000bda:	e03e      	b.n	8000c5a <BL_voidUpdateHeaders+0x1c2>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_APP_VER_ADDRESS,Local_u32VerImage );
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4830      	ldr	r0, [pc, #192]	; (8000ca0 <BL_voidUpdateHeaders+0x208>)
 8000be0:	f7ff feb6 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS,Local_u32CRCImage);
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <BL_voidUpdateHeaders+0x20c>)
 8000be8:	f7ff feb2 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000bec:	f06f 010b 	mvn.w	r1, #11
 8000bf0:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <BL_voidUpdateHeaders+0x210>)
 8000bf2:	f7ff fead 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000bf6:	68f9      	ldr	r1, [r7, #12]
 8000bf8:	482c      	ldr	r0, [pc, #176]	; (8000cac <BL_voidUpdateHeaders+0x214>)
 8000bfa:	f7ff fea9 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseBank(BANKSECOND_IMAGE);
 8000bfe:	4827      	ldr	r0, [pc, #156]	; (8000c9c <BL_voidUpdateHeaders+0x204>)
 8000c00:	f7ff fcdc 	bl	80005bc <BL_voidEraseBank>
					break;
 8000c04:	e029      	b.n	8000c5a <BL_voidUpdateHeaders+0x1c2>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_APP_VER_ADDRESS,Local_u32VerImage );
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	4829      	ldr	r0, [pc, #164]	; (8000cb0 <BL_voidUpdateHeaders+0x218>)
 8000c0a:	f7ff fea1 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS,Local_u32CRCImage);
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <BL_voidUpdateHeaders+0x21c>)
 8000c12:	f7ff fe9d 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000c16:	f06f 010b 	mvn.w	r1, #11
 8000c1a:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <BL_voidUpdateHeaders+0x220>)
 8000c1c:	f7ff fe98 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	4826      	ldr	r0, [pc, #152]	; (8000cbc <BL_voidUpdateHeaders+0x224>)
 8000c24:	f7ff fe94 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseBank(BANKFIRST_IMAGE);
 8000c28:	481b      	ldr	r0, [pc, #108]	; (8000c98 <BL_voidUpdateHeaders+0x200>)
 8000c2a:	f7ff fcc7 	bl	80005bc <BL_voidEraseBank>
					break;
 8000c2e:	e014      	b.n	8000c5a <BL_voidUpdateHeaders+0x1c2>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_APP_VER_ADDRESS,Local_u32VerImage );
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <BL_voidUpdateHeaders+0x218>)
 8000c34:	f7ff fe8c 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS,Local_u32CRCImage);
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <BL_voidUpdateHeaders+0x21c>)
 8000c3c:	f7ff fe88 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000c40:	f06f 010b 	mvn.w	r1, #11
 8000c44:	481c      	ldr	r0, [pc, #112]	; (8000cb8 <BL_voidUpdateHeaders+0x220>)
 8000c46:	f7ff fe83 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000c4a:	68f9      	ldr	r1, [r7, #12]
 8000c4c:	481b      	ldr	r0, [pc, #108]	; (8000cbc <BL_voidUpdateHeaders+0x224>)
 8000c4e:	f7ff fe7f 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
					BL_voidEraseBank(BANKFIRST_IMAGE);
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <BL_voidUpdateHeaders+0x200>)
 8000c54:	f7ff fcb2 	bl	80005bc <BL_voidEraseBank>
					break;
 8000c58:	bf00      	nop
				}
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <BL_voidUpdateHeaders+0x228>)
 8000c60:	f7ff fe76 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				BL_voidReceiveUpdate();
 8000c64:	f000 f830 	bl	8000cc8 <BL_voidReceiveUpdate>
		if(LORA_IF_Stransmit_Request(&SX1278,(uint8_t*)  buffer_resp, ret, ADDR_NODE_1 , GW_SYNC_CONFIG ) == LORA_OKE)
 8000c68:	e738      	b.n	8000adc <BL_voidUpdateHeaders+0x44>
 8000c6a:	bf00      	nop
 8000c6c:	f3af 8000 	nop.w
 8000c70:	19cf0e40 	.word	0x19cf0e40
 8000c74:	00000000 	.word	0x00000000
 8000c78:	0801fc44 	.word	0x0801fc44
 8000c7c:	20000178 	.word	0x20000178
 8000c80:	20000160 	.word	0x20000160
 8000c84:	200003c0 	.word	0x200003c0
 8000c88:	2000006c 	.word	0x2000006c
 8000c8c:	20000172 	.word	0x20000172
 8000c90:	20000173 	.word	0x20000173
 8000c94:	20000174 	.word	0x20000174
 8000c98:	08005000 	.word	0x08005000
 8000c9c:	0800d000 	.word	0x0800d000
 8000ca0:	0801fc30 	.word	0x0801fc30
 8000ca4:	0801fc3c 	.word	0x0801fc3c
 8000ca8:	0801fc34 	.word	0x0801fc34
 8000cac:	0801fc38 	.word	0x0801fc38
 8000cb0:	0801fc10 	.word	0x0801fc10
 8000cb4:	0801fc1c 	.word	0x0801fc1c
 8000cb8:	0801fc14 	.word	0x0801fc14
 8000cbc:	0801fc18 	.word	0x0801fc18
 8000cc0:	0801fc00 	.word	0x0801fc00
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <BL_voidReceiveUpdate>:
	//BL_voidMakeSoftWareReset();
	}
}

void BL_voidReceiveUpdate(void)
{
 8000cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ccc:	b098      	sub	sp, #96	; 0x60
 8000cce:	af06      	add	r7, sp, #24
	uint32_t Local_u32ExpectActiveAddr 							= BL_INITIALIZE_WITH_ZERO;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t Local_u32OffsetVector_H							= BL_INITIALIZE_WITH_ZERO;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32OffsetVector_L							= BL_INITIALIZE_WITH_ZERO;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32HighByteDataReceive  						= BL_INITIALIZE_WITH_ZERO;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Local_u32LowByteDataReceive  						= BL_INITIALIZE_WITH_ZERO;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t Local_u32PageError;
	uint32_t Local_u32InactiveImageAddressCounter_Base			= BL_INITIALIZE_WITH_ZERO;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t Local_u32InactiveImageAddressCounter 				= BL_INITIALIZE_WITH_ZERO;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
	Local_u16index_fragment							  	        = BL_INITIALIZE_WITH_ZERO;
 8000cec:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	801a      	strh	r2, [r3, #0]
	uint16_t  Local_u16index_fragment_previous					= BL_INITIALIZE_WITH_ZERO;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	83fb      	strh	r3, [r7, #30]
	uint16_t  Local_u16counter_packet_loss						= BL_INITIALIZE_WITH_ZERO;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	83bb      	strh	r3, [r7, #28]
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32ActiveRegionRunning                       = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8000cfa:	487a      	ldr	r0, [pc, #488]	; (8000ee4 <BL_voidReceiveUpdate+0x21c>)
 8000cfc:	f7ff fba8 	bl	8000450 <BL_u32ReadAddressData>
 8000d00:	61b8      	str	r0, [r7, #24]
	uint16_t Local_u16MaxPacket 								= BL_INITIALIZE_WITH_ZERO;
 8000d02:	2300      	movs	r3, #0
 8000d04:	82fb      	strh	r3, [r7, #22]
	uint16_t local_totalPacket									=BL_INITIALIZE_WITH_ZERO;
 8000d06:	2300      	movs	r3, #0
 8000d08:	867b      	strh	r3, [r7, #50]	; 0x32
	switch (Local_u32ActiveRegionRunning) {
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d01e      	beq.n	8000d50 <BL_voidReceiveUpdate+0x88>
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4a74      	ldr	r2, [pc, #464]	; (8000ee8 <BL_voidReceiveUpdate+0x220>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d004      	beq.n	8000d24 <BL_voidReceiveUpdate+0x5c>
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4a73      	ldr	r2, [pc, #460]	; (8000eec <BL_voidReceiveUpdate+0x224>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00b      	beq.n	8000d3a <BL_voidReceiveUpdate+0x72>
			Local_u32SizeOfCode 								= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
			Local_u32InactiveImageAddressCounter_Base               = FIRST_IMAGE_START_ADDRESS;
			Local_u32ExpectActiveAddr 								= FIRST_IMAGE_START_ADDRESS;
			break;
		default:
			break;
 8000d22:	e020      	b.n	8000d66 <BL_voidReceiveUpdate+0x9e>
			Local_u32SizeOfCode 								= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 8000d24:	4872      	ldr	r0, [pc, #456]	; (8000ef0 <BL_voidReceiveUpdate+0x228>)
 8000d26:	f7ff fb93 	bl	8000450 <BL_u32ReadAddressData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a71      	ldr	r2, [pc, #452]	; (8000ef4 <BL_voidReceiveUpdate+0x22c>)
 8000d2e:	6013      	str	r3, [r2, #0]
			Local_u32InactiveImageAddressCounter_Base               = SECOND_IMAGE_START_ADDRESS;
 8000d30:	4b6e      	ldr	r3, [pc, #440]	; (8000eec <BL_voidReceiveUpdate+0x224>)
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
			Local_u32ExpectActiveAddr 								= SECOND_IMAGE_START_ADDRESS;
 8000d34:	4b6d      	ldr	r3, [pc, #436]	; (8000eec <BL_voidReceiveUpdate+0x224>)
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000d38:	e015      	b.n	8000d66 <BL_voidReceiveUpdate+0x9e>
			Local_u32SizeOfCode 								= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 8000d3a:	486f      	ldr	r0, [pc, #444]	; (8000ef8 <BL_voidReceiveUpdate+0x230>)
 8000d3c:	f7ff fb88 	bl	8000450 <BL_u32ReadAddressData>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a6c      	ldr	r2, [pc, #432]	; (8000ef4 <BL_voidReceiveUpdate+0x22c>)
 8000d44:	6013      	str	r3, [r2, #0]
			Local_u32InactiveImageAddressCounter_Base               = FIRST_IMAGE_START_ADDRESS;
 8000d46:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <BL_voidReceiveUpdate+0x220>)
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
			Local_u32ExpectActiveAddr 								= FIRST_IMAGE_START_ADDRESS;
 8000d4a:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <BL_voidReceiveUpdate+0x220>)
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000d4e:	e00a      	b.n	8000d66 <BL_voidReceiveUpdate+0x9e>
			Local_u32SizeOfCode 								= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 8000d50:	4869      	ldr	r0, [pc, #420]	; (8000ef8 <BL_voidReceiveUpdate+0x230>)
 8000d52:	f7ff fb7d 	bl	8000450 <BL_u32ReadAddressData>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <BL_voidReceiveUpdate+0x22c>)
 8000d5a:	6013      	str	r3, [r2, #0]
			Local_u32InactiveImageAddressCounter_Base               = FIRST_IMAGE_START_ADDRESS;
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <BL_voidReceiveUpdate+0x220>)
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
			Local_u32ExpectActiveAddr 								= FIRST_IMAGE_START_ADDRESS;
 8000d60:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <BL_voidReceiveUpdate+0x220>)
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000d64:	bf00      	nop
	}
	//Loop to receive code update
	memset((uint8_t*) buffer_mark_packet_loss ,0xff , 112 );
 8000d66:	2270      	movs	r2, #112	; 0x70
 8000d68:	21ff      	movs	r1, #255	; 0xff
 8000d6a:	4864      	ldr	r0, [pc, #400]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000d6c:	f003 fafe 	bl	800436c <memset>
	local_totalPacket = (uint16_t)(Local_u32SizeOfCode/64)+1;
 8000d70:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <BL_voidReceiveUpdate+0x22c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	099b      	lsrs	r3, r3, #6
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	867b      	strh	r3, [r7, #50]	; 0x32
	Local_u16MaxPacket = local_totalPacket;
 8000d7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d7e:	82fb      	strh	r3, [r7, #22]
	// Init bitmask
	initBitMask(&bm);
 8000d80:	485f      	ldr	r0, [pc, #380]	; (8000f00 <BL_voidReceiveUpdate+0x238>)
 8000d82:	f7ff fc43 	bl	800060c <initBitMask>
	while(local_totalPacket>=0 && local_totalPacket != 0xFFFF )
 8000d86:	e168      	b.n	800105a <BL_voidReceiveUpdate+0x392>
	{
		/*Initial in the first time start up speed*/
		if(Local_u16index_fragment == 0)
 8000d88:	4b55      	ldr	r3, [pc, #340]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d114      	bne.n	8000dba <BL_voidReceiveUpdate+0xf2>
			SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, u8SF,
 8000d90:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <BL_voidReceiveUpdate+0x23c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4a5c      	ldr	r2, [pc, #368]	; (8000f08 <BL_voidReceiveUpdate+0x240>)
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	495c      	ldr	r1, [pc, #368]	; (8000f0c <BL_voidReceiveUpdate+0x244>)
 8000d9a:	7809      	ldrb	r1, [r1, #0]
 8000d9c:	2080      	movs	r0, #128	; 0x80
 8000d9e:	9005      	str	r0, [sp, #20]
 8000da0:	2000      	movs	r0, #0
 8000da2:	9004      	str	r0, [sp, #16]
 8000da4:	9103      	str	r1, [sp, #12]
 8000da6:	9202      	str	r2, [sp, #8]
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2301      	movs	r3, #1
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	a34a      	add	r3, pc, #296	; (adr r3, 8000ed8 <BL_voidReceiveUpdate+0x210>)
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	4856      	ldr	r0, [pc, #344]	; (8000f10 <BL_voidReceiveUpdate+0x248>)
 8000db6:	f000 fd6c 	bl	8001892 <SX1278_init>
												u8BW, u8CR, SX1278_LORA_CRC_EN, 128);
		AES_init_ctx_iv(&ctx_fw, AES_CBC_128_Key, AES_CBC_128_IV);
 8000dba:	4a56      	ldr	r2, [pc, #344]	; (8000f14 <BL_voidReceiveUpdate+0x24c>)
 8000dbc:	4956      	ldr	r1, [pc, #344]	; (8000f18 <BL_voidReceiveUpdate+0x250>)
 8000dbe:	4857      	ldr	r0, [pc, #348]	; (8000f1c <BL_voidReceiveUpdate+0x254>)
 8000dc0:	f001 f8ea 	bl	8001f98 <AES_init_ctx_iv>
		memset((uint8_t*)buffer_packet , 0xff , 80);
 8000dc4:	2250      	movs	r2, #80	; 0x50
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4855      	ldr	r0, [pc, #340]	; (8000f20 <BL_voidReceiveUpdate+0x258>)
 8000dca:	f003 facf 	bl	800436c <memset>
		//Receive code update Fragment firmware
		Local_u16index_fragment = LORA_IF_GetFragment_Firmware(&SX1278,(uint8_t*) buffer_packet,(uint8_t*) buffer_flashing_data,
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4a54      	ldr	r2, [pc, #336]	; (8000f24 <BL_voidReceiveUpdate+0x25c>)
 8000dd2:	4953      	ldr	r1, [pc, #332]	; (8000f20 <BL_voidReceiveUpdate+0x258>)
 8000dd4:	484e      	ldr	r0, [pc, #312]	; (8000f10 <BL_voidReceiveUpdate+0x248>)
 8000dd6:	f000 fe67 	bl	8001aa8 <LORA_IF_GetFragment_Firmware>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b40      	ldr	r3, [pc, #256]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000de0:	801a      	strh	r2, [r3, #0]
						ADDR_NODE_1 );

		if(Local_u16index_fragment == 0){
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10e      	bne.n	8000e08 <BL_voidReceiveUpdate+0x140>
			BL_voidSetConfigLoRa();
 8000dea:	f7ff fb41 	bl	8000470 <BL_voidSetConfigLoRa>
			LORA_IF_TransferData_Frame(&SX1278, (uint8_t*)  buffer_req, ret, MAX_TIME_OUT, SIZE_BUFFER_16BYTES, MCU_RECEIVED_CONFIG);
 8000dee:	4b4e      	ldr	r3, [pc, #312]	; (8000f28 <BL_voidReceiveUpdate+0x260>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	2321      	movs	r3, #33	; 0x21
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	2310      	movs	r3, #16
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dfe:	494b      	ldr	r1, [pc, #300]	; (8000f2c <BL_voidReceiveUpdate+0x264>)
 8000e00:	4843      	ldr	r0, [pc, #268]	; (8000f10 <BL_voidReceiveUpdate+0x248>)
 8000e02:	f000 fed5 	bl	8001bb0 <LORA_IF_TransferData_Frame>
 8000e06:	e128      	b.n	800105a <BL_voidReceiveUpdate+0x392>
		}
		else if(Local_u16index_fragment == GW_SEND_DONE &&local_totalPacket >= 1){
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d12f      	bne.n	8000e74 <BL_voidReceiveUpdate+0x1ac>
 8000e14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d02c      	beq.n	8000e74 <BL_voidReceiveUpdate+0x1ac>
			// encrypt packet send
			// add bitmask to buffer
			memset(buffer_mark_packet_loss , 0x00 , 80);
 8000e1a:	2250      	movs	r2, #80	; 0x50
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4837      	ldr	r0, [pc, #220]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e20:	f003 faa4 	bl	800436c <memset>
			buffer_mark_packet_loss[0] = ADDR_UNICAST ;
 8000e24:	4b35      	ldr	r3, [pc, #212]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e26:	2203      	movs	r2, #3
 8000e28:	701a      	strb	r2, [r3, #0]
			buffer_mark_packet_loss[1] = ADDR_NODE_1;
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	705a      	strb	r2, [r3, #1]
			buffer_mark_packet_loss[3] = local_totalPacket << SHIFT_8_BIT;
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	70da      	strb	r2, [r3, #3]
			buffer_mark_packet_loss[4] = local_totalPacket << SHIFT_0_BIT;
 8000e36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b30      	ldr	r3, [pc, #192]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e3c:	711a      	strb	r2, [r3, #4]
			for(uint32_t i =0 ; i < NUM_PACKETS_MAX/8 ; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e42:	e00a      	b.n	8000e5a <BL_voidReceiveUpdate+0x192>
				buffer_mark_packet_loss[i+16] =bm.bitmask[i];
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	3310      	adds	r3, #16
 8000e48:	492d      	ldr	r1, [pc, #180]	; (8000f00 <BL_voidReceiveUpdate+0x238>)
 8000e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4c:	440a      	add	r2, r1
 8000e4e:	7811      	ldrb	r1, [r2, #0]
 8000e50:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e52:	54d1      	strb	r1, [r2, r3]
			for(uint32_t i =0 ; i < NUM_PACKETS_MAX/8 ; i++){
 8000e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e56:	3301      	adds	r3, #1
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5e:	d9f1      	bls.n	8000e44 <BL_voidReceiveUpdate+0x17c>
			}
			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_mark_packet_loss
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <BL_voidReceiveUpdate+0x260>)
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	2376      	movs	r3, #118	; 0x76
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	4924      	ldr	r1, [pc, #144]	; (8000efc <BL_voidReceiveUpdate+0x234>)
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <BL_voidReceiveUpdate+0x248>)
 8000e6e:	f000 ff33 	bl	8001cd8 <LORA_IF_Stransmit_Response_Flashing>
 8000e72:	e0f2      	b.n	800105a <BL_voidReceiveUpdate+0x392>
					, ret, ADDR_NODE_1, MCU_REQUEST_PACKET_FW_LOSS);
		}
		else if (local_totalPacket >0 && Local_u16index_fragment != 0 && Local_u16index_fragment != GW_SEND_DONE && Local_u16index_fragment <= Local_u16MaxPacket && buffer_packet[2] == FL_FRAGMENT_FIRMWARE )
 8000e74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80ef 	beq.w	800105a <BL_voidReceiveUpdate+0x392>
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80ea 	beq.w	800105a <BL_voidReceiveUpdate+0x392>
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f000 80e3 	beq.w	800105a <BL_voidReceiveUpdate+0x392>
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	8afa      	ldrh	r2, [r7, #22]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f0c0 80dd 	bcc.w	800105a <BL_voidReceiveUpdate+0x392>
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <BL_voidReceiveUpdate+0x258>)
 8000ea2:	789b      	ldrb	r3, [r3, #2]
 8000ea4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ea6:	f040 80d8 	bne.w	800105a <BL_voidReceiveUpdate+0x392>
		{
				// Build bitMask for checking Lost Packet
				// set the position packet recieved
			    setBit_BitMask(&bm,Local_u16index_fragment );
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <BL_voidReceiveUpdate+0x238>)
 8000eb2:	f7ff fbc3 	bl	800063c <setBit_BitMask>
			    Local_u32InactiveImageAddressCounter = Local_u32InactiveImageAddressCounter_Base +(Local_u16index_fragment-1)*64;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <BL_voidReceiveUpdate+0x218>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec2:	4413      	add	r3, r2
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
				copy_Array_BL((uint8_t*) buffer_flashing_data ,(uint8_t*) buffer_packet, 64);
 8000ec6:	2240      	movs	r2, #64	; 0x40
 8000ec8:	4915      	ldr	r1, [pc, #84]	; (8000f20 <BL_voidReceiveUpdate+0x258>)
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <BL_voidReceiveUpdate+0x25c>)
 8000ecc:	f001 fbbf 	bl	800264e <copy_Array_BL>
				//Encrypt packet
				//for(uint8_t local_counter_Encrypt = Local_u8index_fragment_previous ;local_counter_Encrypt< Local_u8index_fragment ;  local_counter_Encrypt++)
				//AES_CTR_xcrypt_buffer(&ctx_fw, (uint8_t*) buffer_flashing_data, 112);
				for(uint8_t i = 0 ; i <8 ; i++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ed6:	e0a1      	b.n	800101c <BL_voidReceiveUpdate+0x354>
 8000ed8:	19cf0e40 	.word	0x19cf0e40
 8000edc:	00000000 	.word	0x00000000
 8000ee0:	20000170 	.word	0x20000170
 8000ee4:	0801fc44 	.word	0x0801fc44
 8000ee8:	08005000 	.word	0x08005000
 8000eec:	0800d000 	.word	0x0800d000
 8000ef0:	0801fc38 	.word	0x0801fc38
 8000ef4:	2000015c 	.word	0x2000015c
 8000ef8:	0801fc18 	.word	0x0801fc18
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	2000023c 	.word	0x2000023c
 8000f04:	20000172 	.word	0x20000172
 8000f08:	20000173 	.word	0x20000173
 8000f0c:	20000174 	.word	0x20000174
 8000f10:	200003c0 	.word	0x200003c0
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	2000017c 	.word	0x2000017c
 8000f20:	2000010c 	.word	0x2000010c
 8000f24:	2000007c 	.word	0x2000007c
 8000f28:	20000178 	.word	0x20000178
 8000f2c:	2000006c 	.word	0x2000006c
					uint8_t byte_shift = (8*i);
 8000f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	757b      	strb	r3, [r7, #21]
					Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000f38:	7d7b      	ldrb	r3, [r7, #21]
 8000f3a:	3307      	adds	r3, #7
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	061a      	lsls	r2, r3, #24
 8000f42:	7d7b      	ldrb	r3, [r7, #21]
 8000f44:	3306      	adds	r3, #6
 8000f46:	494b      	ldr	r1, [pc, #300]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f48:	5ccb      	ldrb	r3, [r1, r3]
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
												 | (buffer_flashing_data[5+byte_shift] << SHIFT_8_BIT)  | (buffer_flashing_data[4+byte_shift] << SHIFT_0_BIT);
 8000f4e:	7d7b      	ldrb	r3, [r7, #21]
 8000f50:	3305      	adds	r3, #5
 8000f52:	4948      	ldr	r1, [pc, #288]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f54:	5ccb      	ldrb	r3, [r1, r3]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	7d7a      	ldrb	r2, [r7, #21]
 8000f5c:	3204      	adds	r2, #4
 8000f5e:	4945      	ldr	r1, [pc, #276]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f60:	5c8a      	ldrb	r2, [r1, r2]
 8000f62:	4313      	orrs	r3, r2
					Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000f64:	643b      	str	r3, [r7, #64]	; 0x40
					Local_u32LowByteDataReceive = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 8000f66:	7d7b      	ldrb	r3, [r7, #21]
 8000f68:	3303      	adds	r3, #3
 8000f6a:	4a42      	ldr	r2, [pc, #264]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	061a      	lsls	r2, r3, #24
 8000f70:	7d7b      	ldrb	r3, [r7, #21]
 8000f72:	3302      	adds	r3, #2
 8000f74:	493f      	ldr	r1, [pc, #252]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	041b      	lsls	r3, r3, #16
 8000f7a:	431a      	orrs	r2, r3
												| (buffer_flashing_data[1+byte_shift] << SHIFT_8_BIT)  | (buffer_flashing_data[0+byte_shift] << SHIFT_0_BIT);
 8000f7c:	7d7b      	ldrb	r3, [r7, #21]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	493c      	ldr	r1, [pc, #240]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	7d7a      	ldrb	r2, [r7, #21]
 8000f8a:	493a      	ldr	r1, [pc, #232]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8000f8c:	5c8a      	ldrb	r2, [r1, r2]
 8000f8e:	4313      	orrs	r3, r2
					Local_u32LowByteDataReceive = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT)  | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
					//Set to rebuild vector table
					Local_u32OffsetVector_L = Local_u32LowByteDataReceive - BANKFIRST_IMAGE;
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f98:	f5a3 43a0 	sub.w	r3, r3, #20480	; 0x5000
 8000f9c:	623b      	str	r3, [r7, #32]
					Local_u32OffsetVector_H = Local_u32HighByteDataReceive - BANKFIRST_IMAGE;
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fa4:	f5a3 43a0 	sub.w	r3, r3, #20480	; 0x5000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
					// Low Vector Addr
					if(Local_u32OffsetVector_L < 0xFFFF && Local_u32OffsetVector_L >0)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d806      	bhi.n	8000fc2 <BL_voidReceiveUpdate+0x2fa>
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <BL_voidReceiveUpdate+0x2fa>
					{
						Local_u32LowByteDataReceive = Local_u32ExpectActiveAddr + Local_u32OffsetVector_L;
 8000fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
					}
					// High Vector Addr
					if(Local_u32OffsetVector_H < 0xFFFF && Local_u32OffsetVector_H >0)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d806      	bhi.n	8000fda <BL_voidReceiveUpdate+0x312>
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <BL_voidReceiveUpdate+0x312>
					{
						Local_u32HighByteDataReceive = Local_u32ExpectActiveAddr + Local_u32OffsetVector_H;
 8000fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4413      	add	r3, r2
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
					}
					HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000fda:	f001 fe21 	bl	8002c20 <HAL_FLASH_Unlock>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	4615      	mov	r5, r2
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	462b      	mov	r3, r5
 8000fea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fec:	2002      	movs	r0, #2
 8000fee:	f001 fda7 	bl	8002b40 <HAL_FLASH_Program>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	1d19      	adds	r1, r3, #4
 8000ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4691      	mov	r9, r2
 8000ffe:	4642      	mov	r2, r8
 8001000:	464b      	mov	r3, r9
 8001002:	2002      	movs	r0, #2
 8001004:	f001 fd9c 	bl	8002b40 <HAL_FLASH_Program>
					Local_u32InactiveImageAddressCounter+=8;
 8001008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100a:	3308      	adds	r3, #8
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
					HAL_FLASH_Lock();  //Locks again the flash memory
 800100e:	f001 fe2d 	bl	8002c6c <HAL_FLASH_Lock>
				for(uint8_t i = 0 ; i <8 ; i++){
 8001012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001016:	3301      	adds	r3, #1
 8001018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800101c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001020:	2b07      	cmp	r3, #7
 8001022:	d985      	bls.n	8000f30 <BL_voidReceiveUpdate+0x268>

				}
				packet_current = local_totalPacket;
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <BL_voidReceiveUpdate+0x3b0>)
 8001026:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001028:	8013      	strh	r3, [r2, #0]
				local_totalPacket -= 0x01;
 800102a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800102c:	3b01      	subs	r3, #1
 800102e:	867b      	strh	r3, [r7, #50]	; 0x32

				// get 128bytes in Flash
				// clear buffer packet
				memset((uint8_t*) buffer_packet, 0xff,80 );
 8001030:	2250      	movs	r2, #80	; 0x50
 8001032:	21ff      	movs	r1, #255	; 0xff
 8001034:	4811      	ldr	r0, [pc, #68]	; (800107c <BL_voidReceiveUpdate+0x3b4>)
 8001036:	f003 f999 	bl	800436c <memset>
				memset((uint8_t*) buffer_flashing_data, 0xff,64 );
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	21ff      	movs	r1, #255	; 0xff
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <BL_voidReceiveUpdate+0x3ac>)
 8001040:	f003 f994 	bl	800436c <memset>
				Local_u16index_fragment_previous = Local_u16index_fragment;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <BL_voidReceiveUpdate+0x3b8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	83fb      	strh	r3, [r7, #30]
				if(local_totalPacket == 0x00 && Local_u16counter_packet_loss ==0){
 800104a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <BL_voidReceiveUpdate+0x392>
 8001050:	8bbb      	ldrh	r3, [r7, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <BL_voidReceiveUpdate+0x392>
					BL_voidFinishBootLoader();
 8001056:	f000 f815 	bl	8001084 <BL_voidFinishBootLoader>
	while(local_totalPacket>=0 && local_totalPacket != 0xFFFF )
 800105a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800105c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001060:	4293      	cmp	r3, r2
 8001062:	f47f ae91 	bne.w	8000d88 <BL_voidReceiveUpdate+0xc0>
				}
		}

	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3748      	adds	r7, #72	; 0x48
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001072:	bf00      	nop
 8001074:	2000007c 	.word	0x2000007c
 8001078:	20000176 	.word	0x20000176
 800107c:	2000010c 	.word	0x2000010c
 8001080:	20000170 	.word	0x20000170

08001084 <BL_voidFinishBootLoader>:
void BL_voidFinishBootLoader(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
	uint8_t Local_u8Count										= BL_INITIALIZE_WITH_ZERO;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
	uint32_t Local_u32SizeActiveRegionRunning 					= BL_INITIALIZE_WITH_ZERO;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
	uint32_t Local_u32CRCActiveRegionRunning 					= BL_INITIALIZE_WITH_ZERO;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
	uint32_t Local_u32ActiveRegionRunning                       = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
 8001096:	483f      	ldr	r0, [pc, #252]	; (8001194 <BL_voidFinishBootLoader+0x110>)
 8001098:	f7ff f9da 	bl	8000450 <BL_u32ReadAddressData>
 800109c:	6038      	str	r0, [r7, #0]

	switch (Local_u32ActiveRegionRunning)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d01e      	beq.n	80010e4 <BL_voidFinishBootLoader+0x60>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <BL_voidFinishBootLoader+0x114>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d004      	beq.n	80010b8 <BL_voidFinishBootLoader+0x34>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <BL_voidFinishBootLoader+0x118>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00b      	beq.n	80010ce <BL_voidFinishBootLoader+0x4a>
			Local_u32SizeActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
			Local_u32CRCActiveRegionRunning =BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS);
			Local_u32ActiveRegionRunning = BANKFIRST_IMAGE;
			break;
		default:
			break;
 80010b6:	e020      	b.n	80010fa <BL_voidFinishBootLoader+0x76>
			Local_u32SizeActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKSECOND_REGION_ADDRESS);
 80010b8:	4839      	ldr	r0, [pc, #228]	; (80011a0 <BL_voidFinishBootLoader+0x11c>)
 80010ba:	f7ff f9c9 	bl	8000450 <BL_u32ReadAddressData>
 80010be:	60b8      	str	r0, [r7, #8]
			Local_u32CRCActiveRegionRunning =BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKSECOND_REGION_ADDRESS);
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <BL_voidFinishBootLoader+0x120>)
 80010c2:	f7ff f9c5 	bl	8000450 <BL_u32ReadAddressData>
 80010c6:	6078      	str	r0, [r7, #4]
			Local_u32ActiveRegionRunning = BANKSECOND_IMAGE;
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <BL_voidFinishBootLoader+0x118>)
 80010ca:	603b      	str	r3, [r7, #0]
			break;
 80010cc:	e015      	b.n	80010fa <BL_voidFinishBootLoader+0x76>
			Local_u32SizeActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 80010ce:	4836      	ldr	r0, [pc, #216]	; (80011a8 <BL_voidFinishBootLoader+0x124>)
 80010d0:	f7ff f9be 	bl	8000450 <BL_u32ReadAddressData>
 80010d4:	60b8      	str	r0, [r7, #8]
			Local_u32CRCActiveRegionRunning =BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS);
 80010d6:	4835      	ldr	r0, [pc, #212]	; (80011ac <BL_voidFinishBootLoader+0x128>)
 80010d8:	f7ff f9ba 	bl	8000450 <BL_u32ReadAddressData>
 80010dc:	6078      	str	r0, [r7, #4]
			Local_u32ActiveRegionRunning = BANKFIRST_IMAGE;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <BL_voidFinishBootLoader+0x114>)
 80010e0:	603b      	str	r3, [r7, #0]
			break;
 80010e2:	e00a      	b.n	80010fa <BL_voidFinishBootLoader+0x76>
			Local_u32SizeActiveRegionRunning = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BANKFIRST_REGION_ADDRESS);
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <BL_voidFinishBootLoader+0x124>)
 80010e6:	f7ff f9b3 	bl	8000450 <BL_u32ReadAddressData>
 80010ea:	60b8      	str	r0, [r7, #8]
			Local_u32CRCActiveRegionRunning =BL_u32ReadAddressData(FLAG_STATUS_CRC_BANKFIRST_REGION_ADDRESS);
 80010ec:	482f      	ldr	r0, [pc, #188]	; (80011ac <BL_voidFinishBootLoader+0x128>)
 80010ee:	f7ff f9af 	bl	8000450 <BL_u32ReadAddressData>
 80010f2:	6078      	str	r0, [r7, #4]
			Local_u32ActiveRegionRunning = BANKFIRST_IMAGE;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <BL_voidFinishBootLoader+0x114>)
 80010f6:	603b      	str	r3, [r7, #0]
			break;
 80010f8:	bf00      	nop
	}
	//Local_u32ActiveRegionRunning = BL_u32ReadAddressData(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS);
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295
 80010fe:	482c      	ldr	r0, [pc, #176]	; (80011b0 <BL_voidFinishBootLoader+0x12c>)
 8001100:	f7ff fc26 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
	HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f001 fc13 	bl	8002930 <HAL_Delay>
	// Verify Indicate Image
	while(1){
		if(BL_VerifyCheckSum(Local_u32SizeActiveRegionRunning, Local_u32CRCActiveRegionRunning, Local_u32ActiveRegionRunning) == BL_OK){
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f7ff f9fc 	bl	800050c <BL_VerifyCheckSum>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d131      	bne.n	800117e <BL_voidFinishBootLoader+0xfa>

			switch (Local_u32ActiveRegionRunning) {
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <BL_voidFinishBootLoader+0x114>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d004      	beq.n	800112c <BL_voidFinishBootLoader+0xa8>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <BL_voidFinishBootLoader+0x118>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00a      	beq.n	8001140 <BL_voidFinishBootLoader+0xbc>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKSECOND_IMAGE);
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
				break;
			default:
				/*error*/
				break;
 800112a:	e013      	b.n	8001154 <BL_voidFinishBootLoader+0xd0>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKFIRST_IMAGE);
 800112c:	491a      	ldr	r1, [pc, #104]	; (8001198 <BL_voidFinishBootLoader+0x114>)
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <BL_voidFinishBootLoader+0x110>)
 8001130:	f7ff fc0e 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKFIRST_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8001134:	f06f 010e 	mvn.w	r1, #14
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <BL_voidFinishBootLoader+0x130>)
 800113a:	f7ff fc09 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				break;
 800113e:	e009      	b.n	8001154 <BL_voidFinishBootLoader+0xd0>
				BL_voidEraseRestoreHeaderPage(FLAG_INDICATE_ACTIVE_IMAGE_ADDRESS , BANKSECOND_IMAGE);
 8001140:	4916      	ldr	r1, [pc, #88]	; (800119c <BL_voidFinishBootLoader+0x118>)
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <BL_voidFinishBootLoader+0x110>)
 8001144:	f7ff fc04 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BANKSECOND_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8001148:	f06f 010e 	mvn.w	r1, #14
 800114c:	481a      	ldr	r0, [pc, #104]	; (80011b8 <BL_voidFinishBootLoader+0x134>)
 800114e:	f7ff fbff 	bl	8000950 <BL_voidEraseRestoreHeaderPage>
				break;
 8001152:	bf00      	nop
			}
			while(1){

				LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_packet , ret, ADDR_NODE_1, MCU_ACKNOWLEDGE_FINISHING);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <BL_voidFinishBootLoader+0x138>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	2377      	movs	r3, #119	; 0x77
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	4918      	ldr	r1, [pc, #96]	; (80011c0 <BL_voidFinishBootLoader+0x13c>)
 8001160:	4818      	ldr	r0, [pc, #96]	; (80011c4 <BL_voidFinishBootLoader+0x140>)
 8001162:	f000 fdb9 	bl	8001cd8 <LORA_IF_Stransmit_Response_Flashing>
	//							ADDR_NODE_1 ) != GW_SEND_DONE )
	//			{
	//				break;
	//			}
				//Delay 100ms after send
				HAL_Delay(100);
 8001166:	2064      	movs	r0, #100	; 0x64
 8001168:	f001 fbe2 	bl	8002930 <HAL_Delay>
				if(Local_u8Count == 10){
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d101      	bne.n	8001176 <BL_voidFinishBootLoader+0xf2>
					BL_voidMakeSoftWareReset();
 8001172:	f000 f82b 	bl	80011cc <BL_voidMakeSoftWareReset>
				}
				Local_u8Count++;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
				LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_packet , ret, ADDR_NODE_1, MCU_ACKNOWLEDGE_FINISHING);
 800117c:	e7ea      	b.n	8001154 <BL_voidFinishBootLoader+0xd0>
			}
		}

		else{
			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp, ret, ADDR_NODE_1, MCU_ERROR_CRC);
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <BL_voidFinishBootLoader+0x138>)
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	234f      	movs	r3, #79	; 0x4f
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <BL_voidFinishBootLoader+0x144>)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <BL_voidFinishBootLoader+0x140>)
 800118c:	f000 fda4 	bl	8001cd8 <LORA_IF_Stransmit_Response_Flashing>
		if(BL_VerifyCheckSum(Local_u32SizeActiveRegionRunning, Local_u32CRCActiveRegionRunning, Local_u32ActiveRegionRunning) == BL_OK){
 8001190:	e7bb      	b.n	800110a <BL_voidFinishBootLoader+0x86>
 8001192:	bf00      	nop
 8001194:	0801fc44 	.word	0x0801fc44
 8001198:	08005000 	.word	0x08005000
 800119c:	0800d000 	.word	0x0800d000
 80011a0:	0801fc38 	.word	0x0801fc38
 80011a4:	0801fc3c 	.word	0x0801fc3c
 80011a8:	0801fc18 	.word	0x0801fc18
 80011ac:	0801fc1c 	.word	0x0801fc1c
 80011b0:	0801fc00 	.word	0x0801fc00
 80011b4:	0801fc14 	.word	0x0801fc14
 80011b8:	0801fc34 	.word	0x0801fc34
 80011bc:	20000178 	.word	0x20000178
 80011c0:	2000010c 	.word	0x2000010c
 80011c4:	200003c0 	.word	0x200003c0
 80011c8:	20000160 	.word	0x20000160

080011cc <BL_voidMakeSoftWareReset>:
	}
	/*Wait for User Reset*/
}

void BL_voidMakeSoftWareReset(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	// make software reset after flashing success
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <BL_voidMakeSoftWareReset+0x38>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <BL_voidMakeSoftWareReset+0x38>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011da:	6053      	str	r3, [r2, #4]
#endif

	hiwdg.Instance = IWDG;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <BL_voidMakeSoftWareReset+0x3c>)
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <BL_voidMakeSoftWareReset+0x40>)
 80011e0:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <BL_voidMakeSoftWareReset+0x3c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <BL_voidMakeSoftWareReset+0x3c>)
 80011ea:	2209      	movs	r2, #9
 80011ec:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <BL_voidMakeSoftWareReset+0x3c>)
 80011f0:	f002 f872 	bl	80032d8 <HAL_IWDG_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <BL_voidMakeSoftWareReset+0x32>
	{
		Error_Handler();
 80011fa:	f001 fa23 	bl	8002644 <Error_Handler>
	}
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e0042000 	.word	0xe0042000
 8001208:	20000340 	.word	0x20000340
 800120c:	40003000 	.word	0x40003000

08001210 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	78fa      	ldrb	r2, [r7, #3]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fbd7 	bl	80019d8 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fbf2 	bl	8001a18 <SX1278_hw_SPIReadByte>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fb8f 	bl	8001962 <SX1278_hw_SetNSS>
	return tmp;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	70fb      	strb	r3, [r7, #3]
 800125a:	4613      	mov	r3, r2
 800125c:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fb7c 	bl	8001962 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	4610      	mov	r0, r2
 800127a:	f000 fbad 	bl	80019d8 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	78ba      	ldrb	r2, [r7, #2]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fba6 	bl	80019d8 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fb65 	bl	8001962 <SX1278_hw_SetNSS>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	72fb      	strb	r3, [r7, #11]
 80012b0:	4613      	mov	r3, r2
 80012b2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80012b4:	7abb      	ldrb	r3, [r7, #10]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d927      	bls.n	800130a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fb4e 	bl	8001962 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	7afa      	ldrb	r2, [r7, #11]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fb82 	bl	80019d8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e00c      	b.n	80012f4 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	18d4      	adds	r4, r2, r3
 80012e4:	4608      	mov	r0, r1
 80012e6:	f000 fb97 	bl	8001a18 <SX1278_hw_SPIReadByte>
 80012ea:	4603      	mov	r3, r0
 80012ec:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	3301      	adds	r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	7dfa      	ldrb	r2, [r7, #23]
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3ee      	bcc.n	80012da <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fb2d 	bl	8001962 <SX1278_hw_SetNSS>
 8001308:	e000      	b.n	800130c <SX1278_SPIBurstRead+0x6c>
		return;
 800130a:	bf00      	nop
	}
}
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	460b      	mov	r3, r1
 8001320:	72fb      	strb	r3, [r7, #11]
 8001322:	4613      	mov	r3, r2
 8001324:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d929      	bls.n	8001380 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fb15 	bl	8001962 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f000 fb46 	bl	80019d8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
 8001350:	e00b      	b.n	800136a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	f000 fb3a 	bl	80019d8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	3301      	adds	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
 800136a:	7dfa      	ldrb	r2, [r7, #23]
 800136c:	7abb      	ldrb	r3, [r7, #10]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3ef      	bcc.n	8001352 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 faf2 	bl	8001962 <SX1278_hw_SetNSS>
 800137e:	e000      	b.n	8001382 <SX1278_SPIBurstWrite+0x70>
		return;
 8001380:	bf00      	nop
	}
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f90d 	bl	80015b0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 fb64 	bl	8001a64 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f917 	bl	80015d0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	684a      	ldr	r2, [r1, #4]
 80013a6:	688b      	ldr	r3, [r1, #8]
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	04d9      	lsls	r1, r3, #19
 80013b2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013b6:	04d0      	lsls	r0, r2, #19
 80013b8:	4a6f      	ldr	r2, [pc, #444]	; (8001578 <SX1278_config+0x1f0>)
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f7fe fec7 	bl	8000150 <__aeabi_uldivmod>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80013ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	0c02      	lsrs	r2, r0, #16
 80013d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013dc:	0c0b      	lsrs	r3, r1, #16
 80013de:	b2d3      	uxtb	r3, r2
 80013e0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80013e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	0a02      	lsrs	r2, r0, #8
 80013f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013f4:	0a0b      	lsrs	r3, r1, #8
 80013f6:	b2d3      	uxtb	r3, r2
 80013f8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80013fa:	7c3b      	ldrb	r3, [r7, #16]
 80013fc:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	2303      	movs	r3, #3
 8001404:	2106      	movs	r1, #6
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff83 	bl	8001312 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2139      	movs	r1, #57	; 0x39
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff1c 	bl	800124e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	461a      	mov	r2, r3
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <SX1278_config+0x1f4>)
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	461a      	mov	r2, r3
 8001422:	2109      	movs	r1, #9
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff12 	bl	800124e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800142a:	220b      	movs	r2, #11
 800142c:	210b      	movs	r1, #11
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff0d 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001434:	2223      	movs	r2, #35	; 0x23
 8001436:	210c      	movs	r1, #12
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff08 	bl	800124e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7b5b      	ldrb	r3, [r3, #13]
 8001442:	461a      	mov	r2, r3
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <SX1278_config+0x1f8>)
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d147      	bne.n	80014dc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b9b      	ldrb	r3, [r3, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <SX1278_config+0x1fc>)
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7bdb      	ldrb	r3, [r3, #15]
 800145e:	4619      	mov	r1, r3
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <SX1278_config+0x200>)
 8001462:	5c5b      	ldrb	r3, [r3, r1]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800146c:	3301      	adds	r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	211d      	movs	r1, #29
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff feea 	bl	800124e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b5b      	ldrb	r3, [r3, #13]
 800147e:	461a      	mov	r2, r3
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <SX1278_config+0x1f8>)
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7c1b      	ldrb	r3, [r3, #16]
 800148c:	4619      	mov	r1, r3
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <SX1278_config+0x204>)
 8001490:	5c5b      	ldrb	r3, [r3, r1]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800149a:	3303      	adds	r3, #3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	211e      	movs	r1, #30
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fed3 	bl	800124e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80014a8:	2131      	movs	r1, #49	; 0x31
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff feb0 	bl	8001210 <SX1278_SPIRead>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f023 0307 	bic.w	r3, r3, #7
 80014ba:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f043 0305 	orr.w	r3, r3, #5
 80014c2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2131      	movs	r1, #49	; 0x31
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff febf 	bl	800124e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80014d0:	220c      	movs	r2, #12
 80014d2:	2137      	movs	r1, #55	; 0x37
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff feba 	bl	800124e <SX1278_SPIWrite>
 80014da:	e029      	b.n	8001530 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7b9b      	ldrb	r3, [r3, #14]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SX1278_config+0x1fc>)
 80014e4:	5c9b      	ldrb	r3, [r3, r2]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7bdb      	ldrb	r3, [r3, #15]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <SX1278_config+0x200>)
 80014f2:	5c5b      	ldrb	r3, [r3, r1]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80014f8:	4413      	add	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	211d      	movs	r1, #29
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fea4 	bl	800124e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b5b      	ldrb	r3, [r3, #13]
 800150a:	461a      	mov	r2, r3
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <SX1278_config+0x1f8>)
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7c1b      	ldrb	r3, [r3, #16]
 8001518:	4619      	mov	r1, r3
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <SX1278_config+0x204>)
 800151c:	5c5b      	ldrb	r3, [r3, r1]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001522:	4413      	add	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	211e      	movs	r1, #30
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fe8f 	bl	800124e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001530:	2204      	movs	r2, #4
 8001532:	2126      	movs	r1, #38	; 0x26
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe8a 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800153a:	2208      	movs	r2, #8
 800153c:	211f      	movs	r1, #31
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe85 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001544:	2200      	movs	r2, #0
 8001546:	2120      	movs	r1, #32
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fe80 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800154e:	2208      	movs	r2, #8
 8001550:	2121      	movs	r1, #33	; 0x21
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe7b 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001558:	2201      	movs	r2, #1
 800155a:	2141      	movs	r1, #65	; 0x41
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe76 	bl	800124e <SX1278_SPIWrite>
	module->readBytes = 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	SX1278_standby(module); //Entry standby mode
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f810 	bl	8001590 <SX1278_standby>
}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	01e84800 	.word	0x01e84800
 800157c:	080043f8 	.word	0x080043f8
 8001580:	080043fc 	.word	0x080043fc
 8001584:	08004404 	.word	0x08004404
 8001588:	08004410 	.word	0x08004410
 800158c:	08004414 	.word	0x08004414

08001590 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001598:	2209      	movs	r2, #9
 800159a:	2101      	movs	r1, #1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe56 	bl	800124e <SX1278_SPIWrite>
	module->status = STANDBY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	749a      	strb	r2, [r3, #18]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80015b8:	2208      	movs	r2, #8
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fe46 	bl	800124e <SX1278_SPIWrite>
	module->status = SLEEP;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	749a      	strb	r2, [r3, #18]
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80015d8:	2288      	movs	r2, #136	; 0x88
 80015da:	2101      	movs	r1, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe36 	bl	800124e <SX1278_SPIWrite>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2112      	movs	r1, #18
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe29 	bl	800124e <SX1278_SPIWrite>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	460b      	mov	r3, r1
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7afa      	ldrb	r2, [r7, #11]
 8001616:	745a      	strb	r2, [r3, #17]

	SX1278_config(module);		//Setting base parameter
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff feb5 	bl	8001388 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800161e:	2284      	movs	r2, #132	; 0x84
 8001620:	214d      	movs	r1, #77	; 0x4d
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fe13 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	2124      	movs	r1, #36	; 0x24
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fe0e 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fe09 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	2111      	movs	r1, #17
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fe04 	bl	800124e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ffcf 	bl	80015ea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	461a      	mov	r2, r3
 8001650:	2122      	movs	r1, #34	; 0x22
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fdfb 	bl	800124e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001658:	210f      	movs	r1, #15
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fdd8 	bl	8001210 <SX1278_SPIRead>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	461a      	mov	r2, r3
 8001668:	210d      	movs	r1, #13
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fdef 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001670:	228d      	movs	r2, #141	; 0x8d
 8001672:	2101      	movs	r1, #1
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fdea 	bl	800124e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001682:	2118      	movs	r1, #24
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fdc3 	bl	8001210 <SX1278_SPIRead>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d104      	bne.n	800169e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2203      	movs	r2, #3
 8001698:	749a      	strb	r2, [r3, #18]
			return 1;
 800169a:	2301      	movs	r3, #1
 800169c:	e013      	b.n	80016c6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f96e 	bl	8001990 <SX1278_hw_Reset>
			SX1278_config(module);
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fe67 	bl	8001388 <SX1278_config>
			return 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e003      	b.n	80016c6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 f9d0 	bl	8001a64 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016c4:	e7dd      	b.n	8001682 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <SX1278_LoRaRxPacket>:

	unsigned char addr;
uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f9cc 	bl	8001a7a <SX1278_hw_GetDIO0>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d033      	beq.n	8001750 <SX1278_LoRaRxPacket+0x80>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3313      	adds	r3, #19
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fe3a 	bl	800436c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80016f8:	2110      	movs	r1, #16
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fd88 	bl	8001210 <SX1278_SPIRead>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <SX1278_LoRaRxPacket+0x90>)
 8001706:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <SX1278_LoRaRxPacket+0x90>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	210d      	movs	r1, #13
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fd9c 	bl	800124e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7b5b      	ldrb	r3, [r3, #13]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <SX1278_LoRaRxPacket+0x56>
			packet_size = module->packetLength;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7c5b      	ldrb	r3, [r3, #17]
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e005      	b.n	8001732 <SX1278_LoRaRxPacket+0x62>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001726:	2113      	movs	r1, #19
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fd71 	bl	8001210 <SX1278_SPIRead>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f103 0213 	add.w	r2, r3, #19
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fdaf 	bl	80012a0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
		SX1278_clearLoRaIrq(module);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff4d 	bl	80015ea <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000027c 	.word	0x2000027c

08001764 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	460b      	mov	r3, r1
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7afa      	ldrb	r2, [r7, #11]
 8001776:	745a      	strb	r2, [r3, #17]

	SX1278_config(module); //setting base parameter
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fe05 	bl	8001388 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800177e:	2287      	movs	r2, #135	; 0x87
 8001780:	214d      	movs	r1, #77	; 0x4d
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff fd63 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001788:	2200      	movs	r2, #0
 800178a:	2124      	movs	r1, #36	; 0x24
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fd5e 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fd59 	bl	800124e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff ff24 	bl	80015ea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80017a2:	22f7      	movs	r2, #247	; 0xf7
 80017a4:	2111      	movs	r1, #17
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff fd51 	bl	800124e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	461a      	mov	r2, r3
 80017b0:	2122      	movs	r1, #34	; 0x22
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff fd4b 	bl	800124e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80017b8:	210e      	movs	r1, #14
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fd28 	bl	8001210 <SX1278_SPIRead>
 80017c0:	4603      	mov	r3, r0
 80017c2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	461a      	mov	r2, r3
 80017c8:	210d      	movs	r1, #13
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fd3f 	bl	800124e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80017d0:	2122      	movs	r1, #34	; 0x22
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fd1c 	bl	8001210 <SX1278_SPIRead>
 80017d8:	4603      	mov	r3, r0
 80017da:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80017dc:	7dba      	ldrb	r2, [r7, #22]
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2202      	movs	r2, #2
 80017e8:	749a      	strb	r2, [r3, #18]
			return 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ea      	bne.n	80017d0 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8c6 	bl	8001990 <SX1278_hw_Reset>
			SX1278_config(module);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fdbf 	bl	8001388 <SX1278_config>
			return 0;
 800180a:	2300      	movs	r3, #0
		}
	}
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	2100      	movs	r1, #0
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fd71 	bl	8001312 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001830:	228b      	movs	r2, #139	; 0x8b
 8001832:	2101      	movs	r1, #1
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fd0a 	bl	800124e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f91b 	bl	8001a7a <SX1278_hw_GetDIO0>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800184a:	2112      	movs	r1, #18
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff fcdf 	bl	8001210 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fec9 	bl	80015ea <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fe99 	bl	8001590 <SX1278_standby>
			return 1;
 800185e:	2301      	movs	r3, #1
 8001860:	e013      	b.n	800188a <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f88c 	bl	8001990 <SX1278_hw_Reset>
			SX1278_config(module);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fd85 	bl	8001388 <SX1278_config>
			return 0;
 800187e:	2300      	movs	r3, #0
 8001880:	e003      	b.n	800188a <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 f8ee 	bl	8001a64 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001888:	e7d7      	b.n	800183a <SX1278_LoRaTxPacket+0x26>
	}
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f848 	bl	8001938 <SX1278_hw_init>
	module->frequency = frequency;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]
	module->power = power;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	7e3a      	ldrb	r2, [r7, #24]
 80018b6:	731a      	strb	r2, [r3, #12]
	module->LoRa_SF = LoRa_SF;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	7f3a      	ldrb	r2, [r7, #28]
 80018bc:	735a      	strb	r2, [r3, #13]
	module->LoRa_BW = LoRa_BW;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c4:	739a      	strb	r2, [r3, #14]
	module->LoRa_CR = LoRa_CR;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018cc:	73da      	strb	r2, [r3, #15]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018d4:	741a      	strb	r2, [r3, #16]
	module->packetLength = packetLength;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80018dc:	745a      	strb	r2, [r3, #17]
	SX1278_config(module);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff fd52 	bl	8001388 <SX1278_config>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	429a      	cmp	r2, r3
 8001904:	d003      	beq.n	800190e <SX1278_read+0x22>
		length = module->readBytes;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800190c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3313      	adds	r3, #19
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	4619      	mov	r1, r3
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f002 fd54 	bl	80043c4 <memcpy>
	rxBuf[length] = '\0';
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	return length;
 800192e:	79fb      	ldrb	r3, [r7, #7]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001940:	2101      	movs	r1, #1
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f80d 	bl	8001962 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6858      	ldr	r0, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	f001 fc8e 	bl	8003276 <HAL_GPIO_WritePin>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6958      	ldr	r0, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	b299      	uxth	r1, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	f001 fc77 	bl	8003276 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001998:	2101      	movs	r1, #1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffe1 	bl	8001962 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	f001 fc62 	bl	8003276 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 f856 	bl	8001a64 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6858      	ldr	r0, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	f001 fc56 	bl	8003276 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80019ca:	2064      	movs	r0, #100	; 0x64
 80019cc:	f000 f84a 	bl	8001a64 <SX1278_hw_DelayMs>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffbb 	bl	8001962 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6998      	ldr	r0, [r3, #24]
 80019f0:	1cf9      	adds	r1, r7, #3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	2201      	movs	r2, #1
 80019f8:	f002 f912 	bl	8003c20 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80019fc:	bf00      	nop
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fbff 	bl	8004206 <HAL_SPI_GetState>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d1f7      	bne.n	80019fe <SX1278_hw_SPICommand+0x26>
		;
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff99 	bl	8001962 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6998      	ldr	r0, [r3, #24]
 8001a34:	f107 020e 	add.w	r2, r7, #14
 8001a38:	f107 010f 	add.w	r1, r7, #15
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	f002 fa2f 	bl	8003ea6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001a48:	bf00      	nop
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fbd9 	bl	8004206 <HAL_SPI_GetState>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1f7      	bne.n	8001a4a <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 ff5f 	bl	8002930 <HAL_Delay>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f001 fbda 	bl	8003248 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <LORA_IF_GetFragment_Firmware>:
uint8_t counter ;
static uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
static uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
struct AES_ctx ctx;
uint16_t  LORA_IF_GetFragment_Firmware(SX1278_t *module , uint8_t* buffer_packet ,uint8_t* buffer_flashing_data ,
		uint8_t addr){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	70fb      	strb	r3, [r7, #3]
	counter = 0 ;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <LORA_IF_GetFragment_Firmware+0xf0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	uint16_t index_fragmemt = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	82fb      	strh	r3, [r7, #22]
	//clear data buffer
	//clearDataBuffer((uint8_t*) buffer_packet,132);
	/* Configuration LoRa to Receive firmware*/
	ret = SX1278_LoRaEntryRx(module, SIZE_BUFFER_80BYTES , MAX_TIME_OUT);
 8001ac0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ac4:	2150      	movs	r1, #80	; 0x50
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fd9c 	bl	8001604 <SX1278_LoRaEntryRx>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <LORA_IF_GetFragment_Firmware+0xf4>)
 8001ad2:	701a      	strb	r2, [r3, #0]
	while(1){
		ret = SX1278_LoRaRxPacket(module);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff fdfb 	bl	80016d0 <SX1278_LoRaRxPacket>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <LORA_IF_GetFragment_Firmware+0xf4>)
 8001ae0:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <LORA_IF_GetFragment_Firmware+0xf4>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f4      	beq.n	8001ad4 <LORA_IF_GetFragment_Firmware+0x2c>
			ret = SX1278_read(module, (uint8_t*) buffer_packet, ret);
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <LORA_IF_GetFragment_Firmware+0xf4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fefa 	bl	80018ec <SX1278_read>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <LORA_IF_GetFragment_Firmware+0xf4>)
 8001afe:	701a      	strb	r2, [r3, #0]
			AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <LORA_IF_GetFragment_Firmware+0xf8>)
 8001b02:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <LORA_IF_GetFragment_Firmware+0xfc>)
 8001b04:	4828      	ldr	r0, [pc, #160]	; (8001ba8 <LORA_IF_GetFragment_Firmware+0x100>)
 8001b06:	f000 fa47 	bl	8001f98 <AES_init_ctx_iv>
			AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_packet, SIZE_BUFFER_80BYTES);
 8001b0a:	2250      	movs	r2, #80	; 0x50
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <LORA_IF_GetFragment_Firmware+0x100>)
 8001b10:	f000 fc05 	bl	800231e <AES_CTR_xcrypt_buffer>
			if(buffer_packet[0] == ADDR_BOARDCAST  && buffer_packet[1] == addr  && buffer_packet[2] == FL_FRAGMENT_FIRMWARE){
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2bff      	cmp	r3, #255	; 0xff
 8001b1a:	d11d      	bne.n	8001b58 <LORA_IF_GetFragment_Firmware+0xb0>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d117      	bne.n	8001b58 <LORA_IF_GetFragment_Firmware+0xb0>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2bfe      	cmp	r3, #254	; 0xfe
 8001b30:	d112      	bne.n	8001b58 <LORA_IF_GetFragment_Firmware+0xb0>
				/* Copy data from buffer packet to buffer flashing data*/
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b36:	481d      	ldr	r0, [pc, #116]	; (8001bac <LORA_IF_GetFragment_Firmware+0x104>)
 8001b38:	f001 fbb5 	bl	80032a6 <HAL_GPIO_TogglePin>
				index_fragmemt =(buffer_packet[3]<<SHIFT_8_BIT)|(buffer_packet[4] <<SHIFT_0_BIT);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	82fb      	strh	r3, [r7, #22]
				return  index_fragmemt;
 8001b54:	8afb      	ldrh	r3, [r7, #22]
 8001b56:	e01b      	b.n	8001b90 <LORA_IF_GetFragment_Firmware+0xe8>
			}
			else if ( buffer_packet[0] == ADDR_BOARDCAST  && buffer_packet[1] == addr  && buffer_packet[2] == GW_ACKNOWLEDGE_FINISHING_SENDING_CODE ){
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d10d      	bne.n	8001b7c <LORA_IF_GetFragment_Firmware+0xd4>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3301      	adds	r3, #1
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <LORA_IF_GetFragment_Firmware+0xd4>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b39      	cmp	r3, #57	; 0x39
 8001b74:	d102      	bne.n	8001b7c <LORA_IF_GetFragment_Firmware+0xd4>
				return  GW_SEND_DONE;
 8001b76:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001b7a:	e009      	b.n	8001b90 <LORA_IF_GetFragment_Firmware+0xe8>
			}
			else{
				counter++;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <LORA_IF_GetFragment_Firmware+0xf0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <LORA_IF_GetFragment_Firmware+0xf0>)
 8001b86:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 fed1 	bl	8002930 <HAL_Delay>
		ret = SX1278_LoRaRxPacket(module);
 8001b8e:	e7a1      	b.n	8001ad4 <LORA_IF_GetFragment_Firmware+0x2c>
				}
			}
		}
	}

}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000027d 	.word	0x2000027d
 8001b9c:	20000178 	.word	0x20000178
 8001ba0:	20000030 	.word	0x20000030
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	20000280 	.word	0x20000280
 8001bac:	40011000 	.word	0x40011000

08001bb0 <LORA_IF_TransferData_Frame>:


uint8_t LORA_IF_TransferData_Frame(SX1278_t *module , uint8_t* buffer_req , uint8_t ret , uint32_t timeout , uint8_t length , uint8_t ACK_req)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	71fb      	strb	r3, [r7, #7]
	buffer_req[0] = ADDR_UNICAST;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = ADDR_NODE_1;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	buffer_req[2] = ACK_req;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	7f3a      	ldrb	r2, [r7, #28]
 8001bd4:	701a      	strb	r2, [r3, #0]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <LORA_IF_TransferData_Frame+0x7c>)
 8001bd8:	4915      	ldr	r1, [pc, #84]	; (8001c30 <LORA_IF_TransferData_Frame+0x80>)
 8001bda:	4816      	ldr	r0, [pc, #88]	; (8001c34 <LORA_IF_TransferData_Frame+0x84>)
 8001bdc:	f000 f9dc 	bl	8001f98 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx, (uint8_t*) buffer_req, 16);
 8001be0:	2210      	movs	r2, #16
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <LORA_IF_TransferData_Frame+0x84>)
 8001be6:	f000 fb9a 	bl	800231e <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaEntryTx(module, length, timeout);
 8001bea:	7e3b      	ldrb	r3, [r7, #24]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fdb7 	bl	8001764 <SX1278_LoRaEntryTx>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001bfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bfe:	2210      	movs	r2, #16
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fe06 	bl	8001814 <SX1278_LoRaTxPacket>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
		if (ret) {
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <LORA_IF_TransferData_Frame+0x70>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <LORA_IF_TransferData_Frame+0x88>)
 8001c18:	f001 fb45 	bl	80032a6 <HAL_GPIO_TogglePin>
			return 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LORA_IF_TransferData_Frame+0x72>
		}
		else{
			return 0;
 8001c20:	2300      	movs	r3, #0
		}
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000030 	.word	0x20000030
 8001c30:	20000020 	.word	0x20000020
 8001c34:	20000280 	.word	0x20000280
 8001c38:	40011000 	.word	0x40011000

08001c3c <LORA_IF_Stransmit_Request>:

LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module  , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr  , uint8_t ACK_resp){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	71bb      	strb	r3, [r7, #6]
	counter = 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <LORA_IF_Stransmit_Request+0x88>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaRxPacket(module);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fd39 	bl	80016d0 <SX1278_LoRaRxPacket>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	if(ret > 0){
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d028      	beq.n	8001cba <LORA_IF_Stransmit_Request+0x7e>
		/*Read the first Frame
		 *counter to retry connect until get resp signal
		 */
		 ret = SX1278_read(module, (uint8_t*) buffer_resp, ret);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fe3c 	bl	80018ec <SX1278_read>
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
		 AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <LORA_IF_Stransmit_Request+0x8c>)
 8001c7a:	4914      	ldr	r1, [pc, #80]	; (8001ccc <LORA_IF_Stransmit_Request+0x90>)
 8001c7c:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <LORA_IF_Stransmit_Request+0x94>)
 8001c7e:	f000 f98b 	bl	8001f98 <AES_init_ctx_iv>
		 AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, 16);
 8001c82:	2210      	movs	r2, #16
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <LORA_IF_Stransmit_Request+0x94>)
 8001c88:	f000 fb49 	bl	800231e <AES_CTR_xcrypt_buffer>
		 if(buffer_resp[0]== ADDR_BOARDCAST  && buffer_resp[1] == addr && buffer_resp[2]  == ACK_resp){
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2bff      	cmp	r3, #255	; 0xff
 8001c92:	d112      	bne.n	8001cba <LORA_IF_Stransmit_Request+0x7e>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3301      	adds	r3, #1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	79ba      	ldrb	r2, [r7, #6]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d10c      	bne.n	8001cba <LORA_IF_Stransmit_Request+0x7e>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	7e3a      	ldrb	r2, [r7, #24]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d106      	bne.n	8001cba <LORA_IF_Stransmit_Request+0x7e>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <LORA_IF_Stransmit_Request+0x98>)
 8001cb2:	f001 faf8 	bl	80032a6 <HAL_GPIO_TogglePin>
			// Response packet
			return LORA_OKE ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <LORA_IF_Stransmit_Request+0x80>
		 }
	 }
	return LORA_BUSSY;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000027d 	.word	0x2000027d
 8001cc8:	20000030 	.word	0x20000030
 8001ccc:	20000020 	.word	0x20000020
 8001cd0:	20000280 	.word	0x20000280
 8001cd4:	40011000 	.word	0x40011000

08001cd8 <LORA_IF_Stransmit_Response_Flashing>:

LoRa_Return_t LORA_IF_Stransmit_Response_Flashing(SX1278_t *module ,uint8_t* TxBuffer
	, uint8_t ret, uint8_t addr ,uint8_t ACK_resp){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	4613      	mov	r3, r2
 8001cec:	71bb      	strb	r3, [r7, #6]
	TxBuffer[0] = ADDR_UNICAST;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = addr;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	79ba      	ldrb	r2, [r7, #6]
 8001cfa:	701a      	strb	r2, [r3, #0]
	TxBuffer[2] = ACK_resp;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	7e3a      	ldrb	r2, [r7, #24]
 8001d02:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, 128);
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_128BYTES  , MAX_TIME_OUT);
 8001d04:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fd2a 	bl	8001764 <SX1278_LoRaEntryTx>
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <LORA_IF_Stransmit_Response_Flashing+0x80>)
 8001d16:	4911      	ldr	r1, [pc, #68]	; (8001d5c <LORA_IF_Stransmit_Response_Flashing+0x84>)
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <LORA_IF_Stransmit_Response_Flashing+0x88>)
 8001d1a:	f000 f93d 	bl	8001f98 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)TxBuffer, SIZE_BUFFER_128BYTES);
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	480f      	ldr	r0, [pc, #60]	; (8001d60 <LORA_IF_Stransmit_Response_Flashing+0x88>)
 8001d24:	f000 fafb 	bl	800231e <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) TxBuffer, SIZE_BUFFER_128BYTES, MAX_TIME_OUT);
 8001d28:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fd6f 	bl	8001814 <SX1278_LoRaTxPacket>
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	if(ret){
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <LORA_IF_Stransmit_Response_Flashing+0x76>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <LORA_IF_Stransmit_Response_Flashing+0x8c>)
 8001d46:	f001 faae 	bl	80032a6 <HAL_GPIO_TogglePin>
		return LORA_OKE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <LORA_IF_Stransmit_Response_Flashing+0x78>

	}
	return LORA_ERROR;
 8001d4e:	2302      	movs	r3, #2
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000030 	.word	0x20000030
 8001d5c:	20000020 	.word	0x20000020
 8001d60:	20000280 	.word	0x20000280
 8001d64:	40011000 	.word	0x40011000

08001d68 <LORA_IF_Stransmit_Response>:
	 }
	}
}


LoRa_Return_t LORA_IF_Stransmit_Response(SX1278_t *module , uint8_t* buffer_resp , uint8_t ret , uint8_t addr , uint8_t ACK_resp){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	4611      	mov	r1, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	460b      	mov	r3, r1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	71bb      	strb	r3, [r7, #6]
	buffer_resp[0]= ADDR_UNICAST;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2203      	movs	r2, #3
 8001d82:	701a      	strb	r2, [r3, #0]
	buffer_resp[1] = addr;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3301      	adds	r3, #1
 8001d88:	79ba      	ldrb	r2, [r7, #6]
 8001d8a:	701a      	strb	r2, [r3, #0]
	buffer_resp[2]= ACK_resp;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3302      	adds	r3, #2
 8001d90:	7e3a      	ldrb	r2, [r7, #24]
 8001d92:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_16BYTES  , MAX_TIME_OUT);
 8001d94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d98:	2110      	movs	r1, #16
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff fce2 	bl	8001764 <SX1278_LoRaEntryTx>
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <LORA_IF_Stransmit_Response+0x80>)
 8001da6:	4911      	ldr	r1, [pc, #68]	; (8001dec <LORA_IF_Stransmit_Response+0x84>)
 8001da8:	4811      	ldr	r0, [pc, #68]	; (8001df0 <LORA_IF_Stransmit_Response+0x88>)
 8001daa:	f000 f8f5 	bl	8001f98 <AES_init_ctx_iv>
	AES_CTR_xcrypt_buffer(&ctx,(uint8_t*)buffer_resp, SIZE_BUFFER_16BYTES);
 8001dae:	2210      	movs	r2, #16
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	480f      	ldr	r0, [pc, #60]	; (8001df0 <LORA_IF_Stransmit_Response+0x88>)
 8001db4:	f000 fab3 	bl	800231e <AES_CTR_xcrypt_buffer>
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_resp, SIZE_BUFFER_16BYTES, MAX_TIME_OUT);
 8001db8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff fd27 	bl	8001814 <SX1278_LoRaTxPacket>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	if(ret){
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <LORA_IF_Stransmit_Response+0x76>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd4:	4807      	ldr	r0, [pc, #28]	; (8001df4 <LORA_IF_Stransmit_Response+0x8c>)
 8001dd6:	f001 fa66 	bl	80032a6 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		return LORA_OKE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <LORA_IF_Stransmit_Response+0x78>
	}
	return LORA_ERROR;
 8001dde:	2302      	movs	r3, #2
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000030 	.word	0x20000030
 8001dec:	20000020 	.word	0x20000020
 8001df0:	20000280 	.word	0x20000280
 8001df4:	40011000 	.word	0x40011000

08001df8 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e030      	b.n	8001e6a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	441a      	add	r2, r3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	440b      	add	r3, r1
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3301      	adds	r3, #1
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	441a      	add	r2, r3
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	440b      	add	r3, r1
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	441a      	add	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	440b      	add	r3, r1
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3303      	adds	r3, #3
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	441a      	add	r2, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	440b      	add	r3, r1
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d9cb      	bls.n	8001e08 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8001e70:	2304      	movs	r3, #4
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e081      	b.n	8001f7a <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3302      	adds	r3, #2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d125      	bne.n	8001f02 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <KeyExpansion+0x198>)
 8001ed0:	5c9b      	ldrb	r3, [r3, r2]
 8001ed2:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8001ed4:	7b7b      	ldrb	r3, [r7, #13]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <KeyExpansion+0x198>)
 8001eda:	5c9b      	ldrb	r3, [r3, r2]
 8001edc:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <KeyExpansion+0x198>)
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <KeyExpansion+0x198>)
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8001ef2:	7b3a      	ldrb	r2, [r7, #12]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	4926      	ldr	r1, [pc, #152]	; (8001f94 <KeyExpansion+0x19c>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	4053      	eors	r3, r2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4413      	add	r3, r2
 8001f16:	7819      	ldrb	r1, [r3, #0]
 8001f18:	7b3a      	ldrb	r2, [r7, #12]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4403      	add	r3, r0
 8001f20:	404a      	eors	r2, r1
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	7b7a      	ldrb	r2, [r7, #13]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4403      	add	r3, r0
 8001f3a:	404a      	eors	r2, r1
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	3302      	adds	r3, #2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	7819      	ldrb	r1, [r3, #0]
 8001f4a:	7bba      	ldrb	r2, [r7, #14]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4403      	add	r3, r0
 8001f54:	404a      	eors	r2, r1
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	3303      	adds	r3, #3
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4403      	add	r3, r0
 8001f6e:	404a      	eors	r2, r1
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b2b      	cmp	r3, #43	; 0x2b
 8001f7e:	f67f af7a 	bls.w	8001e76 <KeyExpansion+0x7e>
  }
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	3724      	adds	r7, #36	; 0x24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	08004418 	.word	0x08004418
 8001f94:	08004518 	.word	0x08004518

08001f98 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff25 	bl	8001df8 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	33b0      	adds	r3, #176	; 0xb0
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fa04 	bl	80043c4 <memcpy>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
 8001fd6:	e027      	b.n	8002028 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75bb      	strb	r3, [r7, #22]
 8001fdc:	e01e      	b.n	800201c <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001fde:	7dfa      	ldrb	r2, [r7, #23]
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	440a      	add	r2, r1
 8001fe8:	4413      	add	r3, r2
 8001fea:	7818      	ldrb	r0, [r3, #0]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	7819      	ldrb	r1, [r3, #0]
 8002002:	7dfa      	ldrb	r2, [r7, #23]
 8002004:	7dbb      	ldrb	r3, [r7, #22]
 8002006:	4041      	eors	r1, r0
 8002008:	b2c8      	uxtb	r0, r1
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	440a      	add	r2, r1
 8002010:	4413      	add	r3, r2
 8002012:	4602      	mov	r2, r0
 8002014:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8002016:	7dbb      	ldrb	r3, [r7, #22]
 8002018:	3301      	adds	r3, #1
 800201a:	75bb      	strb	r3, [r7, #22]
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d9dd      	bls.n	8001fde <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	3301      	adds	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d9d4      	bls.n	8001fd8 <AddRoundKey+0x14>
    }
  }
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e01d      	b.n	8002086 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800204a:	2300      	movs	r3, #0
 800204c:	73bb      	strb	r3, [r7, #14]
 800204e:	e014      	b.n	800207a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8002050:	7bba      	ldrb	r2, [r7, #14]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	440a      	add	r2, r1
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	7bba      	ldrb	r2, [r7, #14]
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <SubBytes+0x5c>)
 8002066:	5c08      	ldrb	r0, [r1, r0]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	440a      	add	r2, r1
 800206e:	4413      	add	r3, r2
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	3301      	adds	r3, #1
 8002078:	73bb      	strb	r3, [r7, #14]
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d9e7      	bls.n	8002050 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d9de      	bls.n	800204a <SubBytes+0xe>
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	08004418 	.word	0x08004418

0800209c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	795a      	ldrb	r2, [r3, #5]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7a5a      	ldrb	r2, [r3, #9]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7b5a      	ldrb	r2, [r3, #13]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7a9a      	ldrb	r2, [r3, #10]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	799b      	ldrb	r3, [r3, #6]
 80020e0:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7b9a      	ldrb	r2, [r3, #14]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7bda      	ldrb	r2, [r3, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7ada      	ldrb	r2, [r3, #11]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	79da      	ldrb	r2, [r3, #7]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	71da      	strb	r2, [r3, #7]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <xtime>:

static uint8_t xtime(uint8_t x)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	b25a      	sxtb	r2, r3
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	09db      	lsrs	r3, r3, #7
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	0049      	lsls	r1, r1, #1
 8002138:	440b      	add	r3, r1
 800213a:	4619      	mov	r1, r3
 800213c:	00c8      	lsls	r0, r1, #3
 800213e:	4619      	mov	r1, r3
 8002140:	4603      	mov	r3, r0
 8002142:	440b      	add	r3, r1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4053      	eors	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	b2db      	uxtb	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e0a4      	b.n	80022b0 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800216e:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	4053      	eors	r3, r2
 8002184:	b2da      	uxtb	r2, r3
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	789b      	ldrb	r3, [r3, #2]
 8002190:	4053      	eors	r3, r2
 8002192:	b2da      	uxtb	r2, r3
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	4053      	eors	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	4053      	eors	r3, r2
 80021b6:	733b      	strb	r3, [r7, #12]
 80021b8:	7b3b      	ldrb	r3, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffaf 	bl	800211e <xtime>
 80021c0:	4603      	mov	r3, r0
 80021c2:	733b      	strb	r3, [r7, #12]
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80021cc:	7b3a      	ldrb	r2, [r7, #12]
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	4053      	eors	r3, r2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	404b      	eors	r3, r1
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	785a      	ldrb	r2, [r3, #1]
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	4053      	eors	r3, r2
 80021f6:	733b      	strb	r3, [r7, #12]
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff8f 	bl	800211e <xtime>
 8002200:	4603      	mov	r3, r0
 8002202:	733b      	strb	r3, [r7, #12]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	7859      	ldrb	r1, [r3, #1]
 800220e:	7b3a      	ldrb	r2, [r7, #12]
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	4053      	eors	r3, r2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	404a      	eors	r2, r1
 800221a:	b2d1      	uxtb	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	460a      	mov	r2, r1
 8002224:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	789a      	ldrb	r2, [r3, #2]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	78db      	ldrb	r3, [r3, #3]
 800223a:	4053      	eors	r3, r2
 800223c:	733b      	strb	r3, [r7, #12]
 800223e:	7b3b      	ldrb	r3, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff6c 	bl	800211e <xtime>
 8002246:	4603      	mov	r3, r0
 8002248:	733b      	strb	r3, [r7, #12]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	7899      	ldrb	r1, [r3, #2]
 8002254:	7b3a      	ldrb	r2, [r7, #12]
 8002256:	7b7b      	ldrb	r3, [r7, #13]
 8002258:	4053      	eors	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	404a      	eors	r2, r1
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	460a      	mov	r2, r1
 800226a:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	78da      	ldrb	r2, [r3, #3]
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	4053      	eors	r3, r2
 800227a:	733b      	strb	r3, [r7, #12]
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff4d 	bl	800211e <xtime>
 8002284:	4603      	mov	r3, r0
 8002286:	733b      	strb	r3, [r7, #12]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	78d9      	ldrb	r1, [r3, #3]
 8002292:	7b3a      	ldrb	r2, [r7, #12]
 8002294:	7b7b      	ldrb	r3, [r7, #13]
 8002296:	4053      	eors	r3, r2
 8002298:	b2da      	uxtb	r2, r3
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	404a      	eors	r2, r1
 800229e:	b2d1      	uxtb	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	460a      	mov	r2, r1
 80022a8:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	f67f af57 	bls.w	8002166 <MixColumns+0xe>
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fe75 	bl	8001fc4 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff feac 	bl	800203c <SubBytes>
    ShiftRows(state);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fed9 	bl	800209c <ShiftRows>
    if (round == Nr) {
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b0a      	cmp	r3, #10
 80022ee:	d00c      	beq.n	800230a <Cipher+0x48>
      break;
    }
    MixColumns(state);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff31 	bl	8002158 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe61 	bl	8001fc4 <AddRoundKey>
  for (round = 1; ; ++round)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8002308:	e7e9      	b.n	80022de <Cipher+0x1c>
      break;
 800230a:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	200a      	movs	r0, #10
 8002312:	f7ff fe57 	bl	8001fc4 <AddRoundKey>
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b08b      	sub	sp, #44	; 0x2c
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];

  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	2310      	movs	r3, #16
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	e04e      	b.n	80023d2 <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d136      	bne.n	80023a8 <AES_CTR_xcrypt_buffer+0x8a>
    {

      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	33b0      	adds	r3, #176	; 0xb0
 800233e:	f107 0410 	add.w	r4, r7, #16
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ffb4 	bl	80022c2 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800235a:	230f      	movs	r3, #15
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	e01e      	b.n	800239e <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4413      	add	r3, r2
 8002366:	33b0      	adds	r3, #176	; 0xb0
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d106      	bne.n	800237c <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	4413      	add	r3, r2
 8002374:	33b0      	adds	r3, #176	; 0xb0
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
          continue;
 800237a:	e00d      	b.n	8002398 <AES_CTR_xcrypt_buffer+0x7a>
        }
        ctx->Iv[bi] += 1;
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	4413      	add	r3, r2
 8002382:	33b0      	adds	r3, #176	; 0xb0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	b2d9      	uxtb	r1, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	4413      	add	r3, r2
 8002390:	33b0      	adds	r3, #176	; 0xb0
 8002392:	460a      	mov	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
        break;
 8002396:	e005      	b.n	80023a4 <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	3b01      	subs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dadd      	bge.n	8002360 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	4413      	add	r3, r2
 80023ae:	7819      	ldrb	r1, [r3, #0]
 80023b0:	f107 0210 	add.w	r2, r7, #16
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4413      	add	r3, r2
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68b8      	ldr	r0, [r7, #8]
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	4403      	add	r3, r0
 80023c0:	404a      	eors	r2, r1
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	3301      	adds	r3, #1
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3ac      	bcc.n	8002334 <AES_CTR_xcrypt_buffer+0x16>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	372c      	adds	r7, #44	; 0x2c
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e8:	f000 fa22 	bl	8002830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ec:	f000 f82a 	bl	8002444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f0:	f000 f8a6 	bl	8002540 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 80023f4:	f000 f86e 	bl	80024d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <main+0x4c>)
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <main+0x50>)
 80023fc:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <main+0x4c>)
 8002400:	2202      	movs	r2, #2
 8002402:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <main+0x4c>)
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <main+0x54>)
 8002408:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <main+0x4c>)
 800240c:	2210      	movs	r2, #16
 800240e:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <main+0x4c>)
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <main+0x50>)
 8002414:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <main+0x4c>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <main+0x4c>)
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <main+0x58>)
 8002420:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <main+0x5c>)
 8002424:	4a02      	ldr	r2, [pc, #8]	; (8002430 <main+0x4c>)
 8002426:	601a      	str	r2, [r3, #0]
//  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_9,
//  			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 16);
  BL_voidBootLoader_Init();
 8002428:	f7fe f840 	bl	80004ac <BL_voidBootLoader_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800242c:	e7fe      	b.n	800242c <main+0x48>
 800242e:	bf00      	nop
 8002430:	200003a4 	.word	0x200003a4
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40010800 	.word	0x40010800
 800243c:	2000034c 	.word	0x2000034c
 8002440:	200003c0 	.word	0x200003c0

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	; 0x40
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0318 	add.w	r3, r7, #24
 800244e:	2228      	movs	r2, #40	; 0x28
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f001 ff8a 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002466:	2309      	movs	r3, #9
 8002468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800246a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800246e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002474:	2301      	movs	r3, #1
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002478:	2301      	movs	r3, #1
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247c:	2302      	movs	r3, #2
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002486:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	4618      	mov	r0, r3
 8002492:	f000 ff63 	bl	800335c <HAL_RCC_OscConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800249c:	f000 f8d2 	bl	8002644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a0:	230f      	movs	r3, #15
 80024a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a4:	2302      	movs	r3, #2
 80024a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 f9d0 	bl	8003860 <HAL_RCC_ClockConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x86>
  {
    Error_Handler();
 80024c6:	f000 f8bd 	bl	8002644 <Error_Handler>
  }
}
 80024ca:	bf00      	nop
 80024cc:	3740      	adds	r7, #64	; 0x40
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_SPI1_Init+0x64>)
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <MX_SPI1_Init+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <MX_SPI1_Init+0x64>)
 80024e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_SPI1_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_SPI1_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_SPI1_Init+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_SPI1_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_SPI1_Init+0x64>)
 8002500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002504:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_SPI1_Init+0x64>)
 8002508:	2210      	movs	r2, #16
 800250a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <MX_SPI1_Init+0x64>)
 800250e:	2200      	movs	r2, #0
 8002510:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_SPI1_Init+0x64>)
 8002514:	2200      	movs	r2, #0
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <MX_SPI1_Init+0x64>)
 800251a:	2200      	movs	r2, #0
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_SPI1_Init+0x64>)
 8002520:	220a      	movs	r2, #10
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <MX_SPI1_Init+0x64>)
 8002526:	f001 faf7 	bl	8003b18 <HAL_SPI_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002530:	f000 f888 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000034c 	.word	0x2000034c
 800253c:	40013000 	.word	0x40013000

08002540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <MX_GPIO_Init+0xf4>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <MX_GPIO_Init+0xf4>)
 800255a:	f043 0310 	orr.w	r3, r3, #16
 800255e:	6193      	str	r3, [r2, #24]
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <MX_GPIO_Init+0xf4>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <MX_GPIO_Init+0xf4>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <MX_GPIO_Init+0xf4>)
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <MX_GPIO_Init+0xf4>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <MX_GPIO_Init+0xf4>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <MX_GPIO_Init+0xf4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <MX_GPIO_Init+0xf4>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <MX_GPIO_Init+0xf4>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <MX_GPIO_Init+0xf4>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <MX_GPIO_Init+0xf4>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ba:	481f      	ldr	r0, [pc, #124]	; (8002638 <MX_GPIO_Init+0xf8>)
 80025bc:	f000 fe5b 	bl	8003276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2110      	movs	r1, #16
 80025c4:	481d      	ldr	r0, [pc, #116]	; (800263c <MX_GPIO_Init+0xfc>)
 80025c6:	f000 fe56 	bl	8003276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|RESET_Pin|MODE_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2107      	movs	r1, #7
 80025ce:	481c      	ldr	r0, [pc, #112]	; (8002640 <MX_GPIO_Init+0x100>)
 80025d0:	f000 fe51 	bl	8003276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	4812      	ldr	r0, [pc, #72]	; (8002638 <MX_GPIO_Init+0xf8>)
 80025ee:	f000 fca7 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80025f2:	2310      	movs	r3, #16
 80025f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <MX_GPIO_Init+0xfc>)
 800260a:	f000 fc99 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin RESET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|RESET_Pin|MODE_Pin;
 800260e:	2307      	movs	r3, #7
 8002610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2302      	movs	r3, #2
 800261c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4619      	mov	r1, r3
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_GPIO_Init+0x100>)
 8002626:	f000 fc8b 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40011000 	.word	0x40011000
 800263c:	40010800 	.word	0x40010800
 8002640:	40010c00 	.word	0x40010c00

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800264c:	e7fe      	b.n	800264c <Error_Handler+0x8>

0800264e <copy_Array_BL>:
	uint8* prtA = a + 16 ;
	for(uint8 i = 0 ; i < size ; i++){
		*(prtA++) = *(b++);
	}
}
void copy_Array_BL(uint8* a , uint8* b , uint32 size){
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
	uint8* prtB = b + 16 ;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3310      	adds	r3, #16
 800265e:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	74fb      	strb	r3, [r7, #19]
 8002664:	e00a      	b.n	800267c <copy_Array_BL+0x2e>
		*(a++) = *(prtB++);
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	1c53      	adds	r3, r2, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	60f9      	str	r1, [r7, #12]
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	3301      	adds	r3, #1
 800267a:	74fb      	strb	r3, [r7, #19]
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d8f0      	bhi.n	8002666 <copy_Array_BL+0x18>
	}
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_MspInit+0x5c>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <HAL_MspInit+0x5c>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6193      	str	r3, [r2, #24]
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_MspInit+0x5c>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_MspInit+0x5c>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_MspInit+0x5c>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	61d3      	str	r3, [r2, #28]
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_MspInit+0x5c>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_MspInit+0x60>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_MspInit+0x60>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000

080026f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1b      	ldr	r2, [pc, #108]	; (800277c <HAL_SPI_MspInit+0x88>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d12f      	bne.n	8002774 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 800271a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_SPI_MspInit+0x8c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002744:	23a0      	movs	r3, #160	; 0xa0
 8002746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4619      	mov	r1, r3
 8002756:	480b      	ldr	r0, [pc, #44]	; (8002784 <HAL_SPI_MspInit+0x90>)
 8002758:	f000 fbf2 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800275c:	2340      	movs	r3, #64	; 0x40
 800275e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4619      	mov	r1, r3
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_SPI_MspInit+0x90>)
 8002770:	f000 fbe6 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40013000 	.word	0x40013000
 8002780:	40021000 	.word	0x40021000
 8002784:	40010800 	.word	0x40010800

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800278c:	e7fe      	b.n	800278c <NMI_Handler+0x4>

0800278e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002792:	e7fe      	b.n	8002792 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <MemManage_Handler+0x4>

0800279a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ce:	f000 f893 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
	...

080027e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e4:	f7ff fff7 	bl	80027d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ea:	490c      	ldr	r1, [pc, #48]	; (800281c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002800:	4c09      	ldr	r4, [pc, #36]	; (8002828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280e:	f001 fdb5 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002812:	f7ff fde7 	bl	80023e4 <main>
  bx lr
 8002816:	4770      	bx	lr
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002820:	08004558 	.word	0x08004558
  ldr r2, =_sbss
 8002824:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002828:	200004f8 	.word	0x200004f8

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>
	...

08002830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_Init+0x28>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_Init+0x28>)
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002840:	2003      	movs	r0, #3
 8002842:	f000 f949 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002846:	200f      	movs	r0, #15
 8002848:	f000 f826 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800284c:	f7ff ff20 	bl	8002690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40022000 	.word	0x40022000

0800285c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_DeInit+0x2c>)
 8002862:	f04f 32ff 	mov.w	r2, #4294967295
 8002866:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_DeInit+0x2c>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_DeInit+0x2c>)
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <HAL_DeInit+0x2c>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800287c:	f000 f806 	bl	800288c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f935 	bl	8002b26 <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 f90b 	bl	8002aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000040 	.word	0x20000040
 80028f0:	20000048 	.word	0x20000048
 80028f4:	20000044 	.word	0x20000044

080028f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_IncTick+0x1c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_IncTick+0x20>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_IncTick+0x20>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000048 	.word	0x20000048
 8002918:	200004d4 	.word	0x200004d4

0800291c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_GetTick+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	200004d4 	.word	0x200004d4

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fff0 	bl	800291c <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffe0 	bl	800291c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000048 	.word	0x20000048

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa4:	d301      	bcc.n	8002aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00f      	b.n	8002aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <SysTick_Config+0x40>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f7ff ff90 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SysTick_Config+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SysTick_Config+0x40>)
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff49 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b00:	f7ff ff5e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7ff ff90 	bl	8002a30 <NVIC_EncodePriority>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff5f 	bl	80029dc <__NVIC_SetPriority>
}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffb0 	bl	8002a94 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_FLASH_Program+0xd8>)
 8002b5c:	7e1b      	ldrb	r3, [r3, #24]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_FLASH_Program+0x26>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e054      	b.n	8002c10 <HAL_FLASH_Program+0xd0>
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_FLASH_Program+0xd8>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b70:	f000 f8a8 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d144      	bne.n	8002c08 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	757b      	strb	r3, [r7, #21]
 8002b88:	e007      	b.n	8002b9a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d102      	bne.n	8002b96 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b90:	2302      	movs	r3, #2
 8002b92:	757b      	strb	r3, [r7, #21]
 8002b94:	e001      	b.n	8002b9a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b96:	2304      	movs	r3, #4
 8002b98:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75bb      	strb	r3, [r7, #22]
 8002b9e:	e02d      	b.n	8002bfc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ba0:	7dbb      	ldrb	r3, [r7, #22]
 8002ba2:	005a      	lsls	r2, r3, #1
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	eb02 0c03 	add.w	ip, r2, r3
 8002baa:	7dbb      	ldrb	r3, [r7, #22]
 8002bac:	0119      	lsls	r1, r3, #4
 8002bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb2:	f1c1 0620 	rsb	r6, r1, #32
 8002bb6:	f1a1 0020 	sub.w	r0, r1, #32
 8002bba:	fa22 f401 	lsr.w	r4, r2, r1
 8002bbe:	fa03 f606 	lsl.w	r6, r3, r6
 8002bc2:	4334      	orrs	r4, r6
 8002bc4:	fa23 f000 	lsr.w	r0, r3, r0
 8002bc8:	4304      	orrs	r4, r0
 8002bca:	fa23 f501 	lsr.w	r5, r3, r1
 8002bce:	b2a3      	uxth	r3, r4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4660      	mov	r0, ip
 8002bd4:	f000 f85a 	bl	8002c8c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bdc:	f000 f872 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_FLASH_Program+0xdc>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <HAL_FLASH_Program+0xdc>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002bf6:	7dbb      	ldrb	r3, [r7, #22]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	75bb      	strb	r3, [r7, #22]
 8002bfc:	7dba      	ldrb	r2, [r7, #22]
 8002bfe:	7d7b      	ldrb	r3, [r7, #21]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3cd      	bcc.n	8002ba0 <HAL_FLASH_Program+0x60>
 8002c04:	e000      	b.n	8002c08 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c06:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_FLASH_Program+0xd8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	761a      	strb	r2, [r3, #24]

  return status;
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c18:	200004d8 	.word	0x200004d8
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_FLASH_Unlock+0x40>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_FLASH_Unlock+0x40>)
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_FLASH_Unlock+0x44>)
 8002c3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_FLASH_Unlock+0x40>)
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_FLASH_Unlock+0x48>)
 8002c40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_FLASH_Unlock+0x40>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002c52:	79fb      	ldrb	r3, [r7, #7]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	45670123 	.word	0x45670123
 8002c68:	cdef89ab 	.word	0xcdef89ab

08002c6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_FLASH_Lock+0x1c>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_FLASH_Lock+0x1c>)
 8002c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40022000 	.word	0x40022000

08002c8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <FLASH_Program_HalfWord+0x30>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <FLASH_Program_HalfWord+0x34>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <FLASH_Program_HalfWord+0x34>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	801a      	strh	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200004d8 	.word	0x200004d8
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fe26 	bl	800291c <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cd2:	e010      	b.n	8002cf6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d00c      	beq.n	8002cf6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <FLASH_WaitForLastOperation+0x2e>
 8002ce2:	f7ff fe1b 	bl	800291c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d201      	bcs.n	8002cf6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e025      	b.n	8002d42 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e8      	bne.n	8002cd4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002d10:	2220      	movs	r2, #32
 8002d12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <FLASH_WaitForLastOperation+0x88>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d38:	f000 f80a 	bl	8002d50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000

08002d50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002d70:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f043 0310 	orr.w	r3, r3, #16
 8002d78:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002d90:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <FLASH_SetErrorCode+0x9c>)
 8002db0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f240 1201 	movw	r2, #257	; 0x101
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d106      	bne.n	8002dd6 <FLASH_SetErrorCode+0x86>
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	61d3      	str	r3, [r2, #28]
}  
 8002dd4:	e002      	b.n	8002ddc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <FLASH_SetErrorCode+0x98>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60d3      	str	r3, [r2, #12]
}  
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	200004d8 	.word	0x200004d8

08002df0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_FLASHEx_Erase+0xd0>)
 8002e04:	7e1b      	ldrb	r3, [r3, #24]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_FLASHEx_Erase+0x1e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e053      	b.n	8002eb6 <HAL_FLASHEx_Erase+0xc6>
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <HAL_FLASHEx_Erase+0xd0>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d116      	bne.n	8002e4a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e20:	f7ff ff50 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d141      	bne.n	8002eae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f000 f84c 	bl	8002ec8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e34:	f7ff ff46 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_FLASHEx_Erase+0xd4>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <HAL_FLASHEx_Erase+0xd4>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6113      	str	r3, [r2, #16]
 8002e48:	e031      	b.n	8002eae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e4e:	f7ff ff39 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12a      	bne.n	8002eae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	e019      	b.n	8002e9c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f000 f849 	bl	8002f00 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e72:	f7ff ff27 	bl	8002cc4 <FLASH_WaitForLastOperation>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_FLASHEx_Erase+0xd4>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_FLASHEx_Erase+0xd4>)
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	601a      	str	r2, [r3, #0]
            break;
 8002e92:	e00c      	b.n	8002eae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e9a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	029a      	lsls	r2, r3, #10
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3dc      	bcc.n	8002e68 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HAL_FLASHEx_Erase+0xd0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	761a      	strb	r2, [r3, #24]

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200004d8 	.word	0x200004d8
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <FLASH_MassErase+0x30>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <FLASH_MassErase+0x34>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <FLASH_MassErase+0x34>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <FLASH_MassErase+0x34>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <FLASH_MassErase+0x34>)
 8002ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	200004d8 	.word	0x200004d8
 8002efc:	40022000 	.word	0x40022000

08002f00 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <FLASH_PageErase+0x38>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <FLASH_PageErase+0x3c>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <FLASH_PageErase+0x3c>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <FLASH_PageErase+0x3c>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <FLASH_PageErase+0x3c>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <FLASH_PageErase+0x3c>)
 8002f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f2a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	200004d8 	.word	0x200004d8
 8002f3c:	40022000 	.word	0x40022000

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b08b      	sub	sp, #44	; 0x2c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f52:	e169      	b.n	8003228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f54:	2201      	movs	r2, #1
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8158 	bne.w	8003222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a9a      	ldr	r2, [pc, #616]	; (80031e0 <HAL_GPIO_Init+0x2a0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d05e      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f7c:	4a98      	ldr	r2, [pc, #608]	; (80031e0 <HAL_GPIO_Init+0x2a0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d875      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f82:	4a98      	ldr	r2, [pc, #608]	; (80031e4 <HAL_GPIO_Init+0x2a4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d058      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f88:	4a96      	ldr	r2, [pc, #600]	; (80031e4 <HAL_GPIO_Init+0x2a4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d86f      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f8e:	4a96      	ldr	r2, [pc, #600]	; (80031e8 <HAL_GPIO_Init+0x2a8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d052      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f94:	4a94      	ldr	r2, [pc, #592]	; (80031e8 <HAL_GPIO_Init+0x2a8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d869      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f9a:	4a94      	ldr	r2, [pc, #592]	; (80031ec <HAL_GPIO_Init+0x2ac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04c      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002fa0:	4a92      	ldr	r2, [pc, #584]	; (80031ec <HAL_GPIO_Init+0x2ac>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d863      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fa6:	4a92      	ldr	r2, [pc, #584]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d046      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002fac:	4a90      	ldr	r2, [pc, #576]	; (80031f0 <HAL_GPIO_Init+0x2b0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d85d      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fb2:	2b12      	cmp	r3, #18
 8002fb4:	d82a      	bhi.n	800300c <HAL_GPIO_Init+0xcc>
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d859      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_GPIO_Init+0x80>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	0800303b 	.word	0x0800303b
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003027 	.word	0x08003027
 8002fcc:	08003069 	.word	0x08003069
 8002fd0:	0800306f 	.word	0x0800306f
 8002fd4:	0800306f 	.word	0x0800306f
 8002fd8:	0800306f 	.word	0x0800306f
 8002fdc:	0800306f 	.word	0x0800306f
 8002fe0:	0800306f 	.word	0x0800306f
 8002fe4:	0800306f 	.word	0x0800306f
 8002fe8:	0800306f 	.word	0x0800306f
 8002fec:	0800306f 	.word	0x0800306f
 8002ff0:	0800306f 	.word	0x0800306f
 8002ff4:	0800306f 	.word	0x0800306f
 8002ff8:	0800306f 	.word	0x0800306f
 8002ffc:	0800306f 	.word	0x0800306f
 8003000:	0800306f 	.word	0x0800306f
 8003004:	0800301d 	.word	0x0800301d
 8003008:	08003031 	.word	0x08003031
 800300c:	4a79      	ldr	r2, [pc, #484]	; (80031f4 <HAL_GPIO_Init+0x2b4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003012:	e02c      	b.n	800306e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	623b      	str	r3, [r7, #32]
          break;
 800301a:	e029      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	3304      	adds	r3, #4
 8003022:	623b      	str	r3, [r7, #32]
          break;
 8003024:	e024      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	3308      	adds	r3, #8
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e01f      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	330c      	adds	r3, #12
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e01a      	b.n	8003070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003042:	2304      	movs	r3, #4
 8003044:	623b      	str	r3, [r7, #32]
          break;
 8003046:	e013      	b.n	8003070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d105      	bne.n	800305c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003050:	2308      	movs	r3, #8
 8003052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	611a      	str	r2, [r3, #16]
          break;
 800305a:	e009      	b.n	8003070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800305c:	2308      	movs	r3, #8
 800305e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	615a      	str	r2, [r3, #20]
          break;
 8003066:	e003      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
          break;
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x130>
          break;
 800306e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	d801      	bhi.n	800307a <HAL_GPIO_Init+0x13a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	e001      	b.n	800307e <HAL_GPIO_Init+0x13e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d802      	bhi.n	800308c <HAL_GPIO_Init+0x14c>
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x152>
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	3b08      	subs	r3, #8
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	210f      	movs	r1, #15
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	431a      	orrs	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80b1 	beq.w	8003222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c0:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	4a4c      	ldr	r2, [pc, #304]	; (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6193      	str	r3, [r2, #24]
 80030cc:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030d8:	4a48      	ldr	r2, [pc, #288]	; (80031fc <HAL_GPIO_Init+0x2bc>)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a40      	ldr	r2, [pc, #256]	; (8003200 <HAL_GPIO_Init+0x2c0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_GPIO_Init+0x1ec>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3f      	ldr	r2, [pc, #252]	; (8003204 <HAL_GPIO_Init+0x2c4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_GPIO_Init+0x1e8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3e      	ldr	r2, [pc, #248]	; (8003208 <HAL_GPIO_Init+0x2c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0x1e4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3d      	ldr	r2, [pc, #244]	; (800320c <HAL_GPIO_Init+0x2cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_GPIO_Init+0x1e0>
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003120:	2304      	movs	r3, #4
 8003122:	e004      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003124:	2302      	movs	r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 800312c:	2300      	movs	r3, #0
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	f002 0203 	and.w	r2, r2, #3
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	4093      	lsls	r3, r2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800313e:	492f      	ldr	r1, [pc, #188]	; (80031fc <HAL_GPIO_Init+0x2bc>)
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	492c      	ldr	r1, [pc, #176]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	43db      	mvns	r3, r3
 800316e:	4928      	ldr	r1, [pc, #160]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003170:	4013      	ands	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4922      	ldr	r1, [pc, #136]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	43db      	mvns	r3, r3
 8003196:	491e      	ldr	r1, [pc, #120]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 8003198:	4013      	ands	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4918      	ldr	r1, [pc, #96]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	43db      	mvns	r3, r3
 80031be:	4914      	ldr	r1, [pc, #80]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d021      	beq.n	8003214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	e021      	b.n	8003222 <HAL_GPIO_Init+0x2e2>
 80031de:	bf00      	nop
 80031e0:	10320000 	.word	0x10320000
 80031e4:	10310000 	.word	0x10310000
 80031e8:	10220000 	.word	0x10220000
 80031ec:	10210000 	.word	0x10210000
 80031f0:	10120000 	.word	0x10120000
 80031f4:	10110000 	.word	0x10110000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	40010800 	.word	0x40010800
 8003204:	40010c00 	.word	0x40010c00
 8003208:	40011000 	.word	0x40011000
 800320c:	40011400 	.word	0x40011400
 8003210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_GPIO_Init+0x304>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	43db      	mvns	r3, r3
 800321c:	4909      	ldr	r1, [pc, #36]	; (8003244 <HAL_GPIO_Init+0x304>)
 800321e:	4013      	ands	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	3301      	adds	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f47f ae8e 	bne.w	8002f54 <HAL_GPIO_Init+0x14>
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	372c      	adds	r7, #44	; 0x2c
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	807b      	strh	r3, [r7, #2]
 8003282:	4613      	mov	r3, r2
 8003284:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003286:	787b      	ldrb	r3, [r7, #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328c:	887a      	ldrh	r2, [r7, #2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003292:	e003      	b.n	800329c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	041a      	lsls	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	611a      	str	r2, [r3, #16]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	400b      	ands	r3, r1
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	611a      	str	r2, [r3, #16]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e034      	b.n	8003354 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80032f2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f245 5255 	movw	r2, #21845	; 0x5555
 80032fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6892      	ldr	r2, [r2, #8]
 8003310:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003312:	f7ff fb03 	bl	800291c <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003318:	e00f      	b.n	800333a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800331a:	f7ff faff 	bl	800291c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b27      	cmp	r3, #39	; 0x27
 8003326:	d908      	bls.n	800333a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e00c      	b.n	8003354 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e8      	bne.n	800331a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e272      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8087 	beq.w	800348a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337c:	4b92      	ldr	r3, [pc, #584]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b04      	cmp	r3, #4
 8003386:	d00c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003388:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d112      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
 8003394:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d10b      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a2:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06c      	beq.n	8003488 <HAL_RCC_OscConfig+0x12c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d168      	bne.n	8003488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e24c      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x76>
 80033c4:	4b80      	ldr	r3, [pc, #512]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7f      	ldr	r2, [pc, #508]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x98>
 80033da:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0xbc>
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a71      	ldr	r2, [pc, #452]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a67      	ldr	r2, [pc, #412]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff fa70 	bl	800291c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff fa6c 	bl	800291c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e200      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xe4>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7ff fa5c 	bl	800291c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7ff fa58 	bl	800291c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1ec      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x10c>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003496:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c0      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4939      	ldr	r1, [pc, #228]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7ff fa11 	bl	800291c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7ff fa0d 	bl	800291c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4927      	ldr	r1, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7ff f9f0 	bl	800291c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7ff f9ec 	bl	800291c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e180      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03a      	beq.n	80035e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7ff f9d0 	bl	800291c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7ff f9cc 	bl	800291c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e160      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 fa9c 	bl	8003adc <RCC_Delay>
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7ff f9b6 	bl	800291c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7ff f9b2 	bl	800291c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d908      	bls.n	80035d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e146      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	42420000 	.word	0x42420000
 80035d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b92      	ldr	r3, [pc, #584]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e9      	bne.n	80035b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a6 	beq.w	800373a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a87      	ldr	r2, [pc, #540]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7e      	ldr	r2, [pc, #504]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7ff f973 	bl	800291c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7ff f96f 	bl	800291c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e103      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b75      	ldr	r3, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x312>
 8003660:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a6e      	ldr	r2, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x334>
 8003676:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a69      	ldr	r2, [pc, #420]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a66      	ldr	r2, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x356>
 8003698:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a60      	ldr	r2, [pc, #384]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	4b5e      	ldr	r3, [pc, #376]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a5a      	ldr	r2, [pc, #360]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b58      	ldr	r3, [pc, #352]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a57      	ldr	r2, [pc, #348]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7ff f923 	bl	800291c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7ff f91f 	bl	800291c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0b1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x37e>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7ff f90d 	bl	800291c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7ff f909 	bl	800291c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e09b      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b3c      	ldr	r3, [pc, #240]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d061      	beq.n	8003814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d146      	bne.n	80037e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff f8dd 	bl	800291c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7ff f8d9 	bl	800291c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e06d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4921      	ldr	r1, [pc, #132]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a19      	ldr	r1, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	430b      	orrs	r3, r1
 80037b2:	491b      	ldr	r1, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7ff f8ad 	bl	800291c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7ff f8a9 	bl	800291c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x46a>
 80037e4:	e035      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7ff f896 	bl	800291c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7ff f892 	bl	800291c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e026      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x498>
 8003812:	e01e      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e019      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 8003820:	40021000 	.word	0x40021000
 8003824:	40007000 	.word	0x40007000
 8003828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x500>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4965      	ldr	r1, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe ffe4 	bl	800291c <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe ffe0 	bl	800291c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4922      	ldr	r1, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe ff42 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08004524 	.word	0x08004524
 8003a2c:	20000040 	.word	0x20000040
 8003a30:	20000044 	.word	0x20000044

08003a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x30>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x36>
 8003a62:	e027      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a66:	613b      	str	r3, [r7, #16]
      break;
 8003a68:	e027      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0c5b      	lsrs	r3, r3, #17
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a96:	fb03 f202 	mul.w	r2, r3, r2
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e004      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	693b      	ldr	r3, [r7, #16]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	08004534 	.word	0x08004534
 8003ad4:	08004544 	.word	0x08004544
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <RCC_Delay+0x34>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <RCC_Delay+0x38>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0a5b      	lsrs	r3, r3, #9
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af8:	bf00      	nop
  }
  while (Delay --);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	60fa      	str	r2, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f9      	bne.n	8003af8 <RCC_Delay+0x1c>
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	20000040 	.word	0x20000040
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e076      	b.n	8003c18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d009      	beq.n	8003b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
 8003b42:	e005      	b.n	8003b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fe fdc2 	bl	80026f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	0c1a      	lsrs	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f002 0204 	and.w	r2, r2, #4
 8003bf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Transmit+0x22>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e12d      	b.n	8003e9e <HAL_SPI_Transmit+0x27e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fe fe67 	bl	800291c <HAL_GetTick>
 8003c4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c64:	e116      	b.n	8003e94 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x52>
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c76:	e10d      	b.n	8003e94 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d007      	beq.n	8003cfe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d14f      	bne.n	8003da8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0xf6>
 8003d10:	8afb      	ldrh	r3, [r7, #22]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d142      	bne.n	8003d9c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d3a:	e02f      	b.n	8003d9c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d112      	bne.n	8003d70 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	1c9a      	adds	r2, r3, #2
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d6e:	e015      	b.n	8003d9c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d70:	f7fe fdd4 	bl	800291c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d803      	bhi.n	8003d88 <HAL_SPI_Transmit+0x168>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x16e>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d9a:	e07b      	b.n	8003e94 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ca      	bne.n	8003d3c <HAL_SPI_Transmit+0x11c>
 8003da6:	e050      	b.n	8003e4a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_SPI_Transmit+0x196>
 8003db0:	8afb      	ldrh	r3, [r7, #22]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d144      	bne.n	8003e40 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ddc:	e030      	b.n	8003e40 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d113      	bne.n	8003e14 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e12:	e015      	b.n	8003e40 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e14:	f7fe fd82 	bl	800291c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_Transmit+0x20c>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Transmit+0x212>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e3e:	e029      	b.n	8003e94 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1c9      	bne.n	8003dde <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa6e 	bl	8004330 <SPI_EndRxTxTransaction>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e003      	b.n	8003e94 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08c      	sub	sp, #48	; 0x30
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x26>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e198      	b.n	80041fe <HAL_SPI_TransmitReceive+0x358>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed4:	f7fe fd22 	bl	800291c <HAL_GetTick>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d00f      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x70>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efc:	d107      	bne.n	8003f0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_SPI_TransmitReceive+0x68>
 8003f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f14:	e16d      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x82>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x82>
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f2e:	e160      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d003      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2205      	movs	r2, #5
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d007      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa0:	d17c      	bne.n	800409c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x10a>
 8003faa:	8b7b      	ldrh	r3, [r7, #26]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d16a      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	881a      	ldrh	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd4:	e057      	b.n	8004086 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11b      	bne.n	800401c <HAL_SPI_TransmitReceive+0x176>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_SPI_TransmitReceive+0x176>
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d113      	bne.n	800401c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d119      	bne.n	800405e <HAL_SPI_TransmitReceive+0x1b8>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d014      	beq.n	800405e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	b292      	uxth	r2, r2
 8004040:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800405a:	2301      	movs	r3, #1
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800405e:	f7fe fc5d 	bl	800291c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800406a:	429a      	cmp	r2, r3
 800406c:	d80b      	bhi.n	8004086 <HAL_SPI_TransmitReceive+0x1e0>
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d007      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004084:	e0b5      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1a2      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x130>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d19d      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x130>
 800409a:	e080      	b.n	800419e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_TransmitReceive+0x204>
 80040a4:	8b7b      	ldrh	r3, [r7, #26]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d16f      	bne.n	800418a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d0:	e05b      	b.n	800418a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d11c      	bne.n	800411a <HAL_SPI_TransmitReceive+0x274>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d017      	beq.n	800411a <HAL_SPI_TransmitReceive+0x274>
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d114      	bne.n	800411a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d119      	bne.n	800415c <HAL_SPI_TransmitReceive+0x2b6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004158:	2301      	movs	r3, #1
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800415c:	f7fe fbde 	bl	800291c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004168:	429a      	cmp	r2, r3
 800416a:	d803      	bhi.n	8004174 <HAL_SPI_TransmitReceive+0x2ce>
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d102      	bne.n	800417a <HAL_SPI_TransmitReceive+0x2d4>
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004188:	e033      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d19e      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x22c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d199      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f8c4 	bl	8004330 <SPI_EndRxTxTransaction>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041ba:	e01a      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e8:	e003      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3730      	adds	r7, #48	; 0x30
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004214:	b2db      	uxtb	r3, r3
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004230:	f7fe fb74 	bl	800291c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004240:	f7fe fb6c 	bl	800291c <HAL_GetTick>
 8004244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	015b      	lsls	r3, r3, #5
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	e054      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d050      	beq.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004260:	f7fe fb5c 	bl	800291c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d13d      	bne.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428e:	d111      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d004      	beq.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d107      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d10f      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e017      	b.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d19b      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000040 	.word	0x20000040

08004330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2200      	movs	r2, #0
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff ff6a 	bl	8004220 <SPI_WaitFlagStateUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e000      	b.n	8004364 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <memset>:
 800436c:	4603      	mov	r3, r0
 800436e:	4402      	add	r2, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	2600      	movs	r6, #0
 8004380:	4d0c      	ldr	r5, [pc, #48]	; (80043b4 <__libc_init_array+0x38>)
 8004382:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	f000 f828 	bl	80043e0 <_init>
 8004390:	2600      	movs	r6, #0
 8004392:	4d0a      	ldr	r5, [pc, #40]	; (80043bc <__libc_init_array+0x40>)
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <__libc_init_array+0x44>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08004550 	.word	0x08004550
 80043b8:	08004550 	.word	0x08004550
 80043bc:	08004550 	.word	0x08004550
 80043c0:	08004554 	.word	0x08004554

080043c4 <memcpy>:
 80043c4:	440a      	add	r2, r1
 80043c6:	4291      	cmp	r1, r2
 80043c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043cc:	d100      	bne.n	80043d0 <memcpy+0xc>
 80043ce:	4770      	bx	lr
 80043d0:	b510      	push	{r4, lr}
 80043d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043dc:	d1f9      	bne.n	80043d2 <memcpy+0xe>
 80043de:	bd10      	pop	{r4, pc}

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
