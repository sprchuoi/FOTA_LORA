
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003710  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000010  08003880  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003880  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087c5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231e  00000000  00000000  0002883d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c2  00000000  00000000  0002b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cdd  00000000  00000000  0002bb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b071  00000000  00000000  00043827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083a7a  00000000  00000000  0004e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002300  00000000  00000000  000d2314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d4614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003808 	.word	0x08003808

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003808 	.word	0x08003808

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <BL_u32ReadAddressData>:
uint8_t buffer_packet[132];
uint8_t buffer_resp[8];
uint32_t Local_u32SizeOfCode;
uint8_t  Local_u8index_fragment;
//**************************Include***************************//
uint32_t BL_u32ReadAddressData(uint32_t address){
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
	...

0800046c <BL_voidBootLoader_Init>:
//**************************Function Define***************************//
void BL_voidBootLoader_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	//BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER,BL_BRANCHING_FLAG_SET);
	// Read Branching Request Update Flag.
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 8000472:	480a      	ldr	r0, [pc, #40]	; (800049c <BL_voidBootLoader_Init+0x30>)
 8000474:	f7ff ffec 	bl	8000450 <BL_u32ReadAddressData>
 8000478:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000480:	d102      	bne.n	8000488 <BL_voidBootLoader_Init+0x1c>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 8000482:	f000 f80d 	bl	80004a0 <BL_voidCheckActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 8000486:	e004      	b.n	8000492 <BL_voidBootLoader_Init+0x26>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d101      	bne.n	8000492 <BL_voidBootLoader_Init+0x26>
	    BL_voidJumpToBootloader();
 800048e:	f000 f887 	bl	80005a0 <BL_voidJumpToBootloader>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	0801fc00 	.word	0x0801fc00

080004a0 <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80004a6:	4818      	ldr	r0, [pc, #96]	; (8000508 <BL_voidCheckActiveRegion+0x68>)
 80004a8:	f7ff ffd2 	bl	8000450 <BL_u32ReadAddressData>
 80004ac:	6078      	str	r0, [r7, #4]
	//uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS);
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80004ae:	f06f 030c 	mvn.w	r3, #12
 80004b2:	603b      	str	r3, [r7, #0]

    // if
    if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f113 0f0f 	cmn.w	r3, #15
 80004ba:	d102      	bne.n	80004c2 <BL_voidCheckActiveRegion+0x22>
	{
		BL_voidJumpToActiveRegion();
 80004bc:	f000 f846 	bl	800054c <BL_voidJumpToActiveRegion>
	}
    else
    {
        // Do nothing
    }
}
 80004c0:	e01d      	b.n	80004fe <BL_voidCheckActiveRegion+0x5e>
    else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f113 0f0c 	cmn.w	r3, #12
 80004c8:	d003      	beq.n	80004d2 <BL_voidCheckActiveRegion+0x32>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004d0:	d115      	bne.n	80004fe <BL_voidCheckActiveRegion+0x5e>
    	Local_u32BackupStatus    = BL_32CheckBackupRegion();
 80004d2:	f000 f81b 	bl	800050c <BL_32CheckBackupRegion>
 80004d6:	6038      	str	r0, [r7, #0]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	f113 0f0e 	cmn.w	r3, #14
 80004de:	d104      	bne.n	80004ea <BL_voidCheckActiveRegion+0x4a>
			BL_voidCopyImageToActiveRegion();
 80004e0:	f000 f866 	bl	80005b0 <BL_voidCopyImageToActiveRegion>
			BL_voidJumpToActiveRegion();
 80004e4:	f000 f832 	bl	800054c <BL_voidJumpToActiveRegion>
}
 80004e8:	e009      	b.n	80004fe <BL_voidCheckActiveRegion+0x5e>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f113 0f0c 	cmn.w	r3, #12
 80004f0:	d003      	beq.n	80004fa <BL_voidCheckActiveRegion+0x5a>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f8:	d101      	bne.n	80004fe <BL_voidCheckActiveRegion+0x5e>
			BL_voidSetBranchingFlagAndMakeSWR();
 80004fa:	f000 f9c3 	bl	8000884 <BL_voidSetBranchingFlagAndMakeSWR>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	0801fc14 	.word	0x0801fc14

0800050c <BL_32CheckBackupRegion>:

uint32_t BL_32CheckBackupRegion(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BACKUP_REGION_ADDRESS);
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <BL_32CheckBackupRegion+0x3c>)
 8000514:	f7ff ff9c 	bl	8000450 <BL_u32ReadAddressData>
 8000518:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_BACKUP)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f113 0f0d 	cmn.w	r3, #13
 8000520:	d102      	bne.n	8000528 <BL_32CheckBackupRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 8000522:	f06f 030d 	mvn.w	r3, #13
 8000526:	e00b      	b.n	8000540 <BL_32CheckBackupRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f113 0f0c 	cmn.w	r3, #12
 800052e:	d003      	beq.n	8000538 <BL_32CheckBackupRegion+0x2c>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000536:	d102      	bne.n	800053e <BL_32CheckBackupRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000538:	f06f 030b 	mvn.w	r3, #11
 800053c:	e000      	b.n	8000540 <BL_32CheckBackupRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0801fc34 	.word	0x0801fc34

0800054c <BL_voidJumpToActiveRegion>:

void BL_voidJumpToActiveRegion(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <BL_voidJumpToActiveRegion+0x40>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000558:	f001 fb94 	bl	8001c84 <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <BL_voidJumpToActiveRegion+0x44>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]

	Application_t AddressToCall = 0 ;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
	AddressToCall = *(Application_t*)(ACTIVE_IMAGE + 4); // Point to Reset Handler
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <BL_voidJumpToActiveRegion+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	607b      	str	r3, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800056c:	f3bf 8f5f 	dmb	sy
}
 8000570:	bf00      	nop

	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = ACTIVE_IMAGE; //We relocate vector table to the sector 1
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <BL_voidJumpToActiveRegion+0x4c>)
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <BL_voidJumpToActiveRegion+0x50>)
 8000576:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000578:	f3bf 8f4f 	dsb	sy
}
 800057c:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after 	relocating VTOR */

	AddressToCall();
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4798      	blx	r3
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	e000e010 	.word	0xe000e010
 8000590:	40021000 	.word	0x40021000
 8000594:	08005004 	.word	0x08005004
 8000598:	e000ed00 	.word	0xe000ed00
 800059c:	08005000 	.word	0x08005000

080005a0 <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 80005a4:	f000 f97a 	bl	800089c <BL_voidUpdateHeaders>
	BL_voidReceiveUpdate();
 80005a8:	f000 f9c2 	bl	8000930 <BL_voidReceiveUpdate>

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <BL_voidCopyImageToActiveRegion>:

void BL_voidCopyImageToActiveRegion(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32BackupSizeInWord 	= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 80005c2:	482b      	ldr	r0, [pc, #172]	; (8000670 <BL_voidCopyImageToActiveRegion+0xc0>)
 80005c4:	f7ff ff44 	bl	8000450 <BL_u32ReadAddressData>
 80005c8:	6178      	str	r0, [r7, #20]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <BL_voidCopyImageToActiveRegion+0xc4>)
 80005da:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80005dc:	2316      	movs	r3, #22
 80005de:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80005e0:	f001 fd32 	bl	8002048 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80005e4:	463a      	mov	r2, r7
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fe14 	bl	8002218 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80005f0:	f001 fd50 	bl	8002094 <HAL_FLASH_Lock>

	//Copy data from backup to active region.
	HAL_FLASH_Unlock();
 80005f4:	f001 fd28 	bl	8002048 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
 80005fc:	e01d      	b.n	800063a <BL_voidCopyImageToActiveRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000604:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000612:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	623b      	str	r3, [r7, #32]
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	2200      	movs	r2, #0
 8000624:	461c      	mov	r4, r3
 8000626:	4615      	mov	r5, r2
 8000628:	4622      	mov	r2, r4
 800062a:	462b      	mov	r3, r5
 800062c:	69f9      	ldr	r1, [r7, #28]
 800062e:	2002      	movs	r0, #2
 8000630:	f001 fc9a 	bl	8001f68 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	3301      	adds	r3, #1
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
 800063a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	429a      	cmp	r2, r3
 8000640:	d3dd      	bcc.n	80005fe <BL_voidCopyImageToActiveRegion+0x4e>
	}
	HAL_FLASH_Lock();
 8000642:	f001 fd27 	bl	8002094 <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <BL_voidCopyImageToActiveRegion+0xc8>)
 800064e:	f000 f883 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 8000652:	f06f 010e 	mvn.w	r1, #14
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <BL_voidCopyImageToActiveRegion+0xcc>)
 8000658:	f000 f87e 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 800065c:	f06f 010c 	mvn.w	r1, #12
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <BL_voidCopyImageToActiveRegion+0xd0>)
 8000662:	f000 f879 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop
 8000670:	0801fc38 	.word	0x0801fc38
 8000674:	08005000 	.word	0x08005000
 8000678:	0801fc18 	.word	0x0801fc18
 800067c:	0801fc14 	.word	0x0801fc14
 8000680:	0801fc34 	.word	0x0801fc34

08000684 <BL_voidCopyImageToBackupRegion>:

void BL_voidCopyImageToBackupRegion(void)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32ActiveDataWord 			= BL_INITIALIZE_WITH_ZERO;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32ActiveSizeInWord 			= BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000696:	482b      	ldr	r0, [pc, #172]	; (8000744 <BL_voidCopyImageToBackupRegion+0xc0>)
 8000698:	f7ff feda 	bl	8000450 <BL_u32ReadAddressData>
 800069c:	6178      	str	r0, [r7, #20]
	Local_u32ActiveSizeInWord = Local_u32ActiveSizeInWord / 4;
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	617b      	str	r3, [r7, #20]

	// Erase the Backup region
	Local_eraseInfo.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks 		= FLASH_BANK_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BACKUP_IMAGE;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <BL_voidCopyImageToBackupRegion+0xc4>)
 80006ae:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages 	= FLASH_BANK_NUMOFPAGE;
 80006b0:	2316      	movs	r3, #22
 80006b2:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80006b4:	f001 fcc8 	bl	8002048 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80006b8:	463a      	mov	r2, r7
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fdaa 	bl	8002218 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80006c4:	f001 fce6 	bl	8002094 <HAL_FLASH_Lock>

	//Copy data from active region to backup region
	HAL_FLASH_Unlock();
 80006c8:	f001 fcbe 	bl	8002048 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
 80006d0:	e01d      	b.n	800070e <BL_voidCopyImageToBackupRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80006d8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80006e6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	623b      	str	r3, [r7, #32]
		Local_u32ActiveDataWord    = *((volatile uint32_t*)(Local_u32ActiveDataAddress));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32BackupDataAddress, Local_u32ActiveDataWord);
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2200      	movs	r2, #0
 80006f8:	461c      	mov	r4, r3
 80006fa:	4615      	mov	r5, r2
 80006fc:	4622      	mov	r2, r4
 80006fe:	462b      	mov	r3, r5
 8000700:	6a39      	ldr	r1, [r7, #32]
 8000702:	2002      	movs	r0, #2
 8000704:	f001 fc30 	bl	8001f68 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	3301      	adds	r3, #1
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	429a      	cmp	r2, r3
 8000714:	d3dd      	bcc.n	80006d2 <BL_voidCopyImageToBackupRegion+0x4e>
	}
	HAL_FLASH_Lock();
 8000716:	f001 fcbd 	bl	8002094 <HAL_FLASH_Lock>

	// Set
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS , Local_u32ActiveSizeInWord*4 );
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4619      	mov	r1, r3
 8000720:	480a      	ldr	r0, [pc, #40]	; (800074c <BL_voidCopyImageToBackupRegion+0xc8>)
 8000722:	f000 f819 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000726:	f06f 010e 	mvn.w	r1, #14
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <BL_voidCopyImageToBackupRegion+0xcc>)
 800072c:	f000 f814 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 8000730:	f06f 010c 	mvn.w	r1, #12
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <BL_voidCopyImageToBackupRegion+0xd0>)
 8000736:	f000 f80f 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bdb0      	pop	{r4, r5, r7, pc}
 8000742:	bf00      	nop
 8000744:	0801fc18 	.word	0x0801fc18
 8000748:	0800a800 	.word	0x0800a800
 800074c:	0801fc38 	.word	0x0801fc38
 8000750:	0801fc14 	.word	0x0801fc14
 8000754:	0801fc34 	.word	0x0801fc34

08000758 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800075c:	b0b2      	sub	sp, #200	; 0xc8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <BL_voidEraseRestoreHeaderPage+0x124>)
 8000778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800077c:	e031      	b.n	80007e2 <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 800077e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4013      	ands	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d017      	beq.n	80007d8 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80007a8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	33c8      	adds	r3, #200	; 0xc8
 80007b0:	443b      	add	r3, r7
 80007b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80007b6:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80007ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80007be:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	33c8      	adds	r3, #200	; 0xc8
 80007c8:	443b      	add	r3, r7
 80007ca:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80007ce:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 80007d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007dc:	3304      	adds	r3, #4
 80007de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80007e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <BL_voidEraseRestoreHeaderPage+0x128>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d9c8      	bls.n	800077e <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <BL_voidEraseRestoreHeaderPage+0x124>)
 80007f6:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80007fc:	f001 fc24 	bl	8002048 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fd04 	bl	8002218 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000810:	2300      	movs	r3, #0
 8000812:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000816:	e01a      	b.n	800084e <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000818:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	33c8      	adds	r3, #200	; 0xc8
 8000820:	443b      	add	r3, r7
 8000822:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8000826:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	33c8      	adds	r3, #200	; 0xc8
 800082e:	443b      	add	r3, r7
 8000830:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000834:	2200      	movs	r2, #0
 8000836:	4698      	mov	r8, r3
 8000838:	4691      	mov	r9, r2
 800083a:	4642      	mov	r2, r8
 800083c:	464b      	mov	r3, r9
 800083e:	2002      	movs	r0, #2
 8000840:	f001 fb92 	bl	8001f68 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000844:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000848:	3301      	adds	r3, #1
 800084a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800084e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8000852:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000856:	429a      	cmp	r2, r3
 8000858:	d3de      	bcc.n	8000818 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	461c      	mov	r4, r3
 8000860:	4615      	mov	r5, r2
 8000862:	4622      	mov	r2, r4
 8000864:	462b      	mov	r3, r5
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2002      	movs	r0, #2
 800086a:	f001 fb7d 	bl	8001f68 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800086e:	f001 fc11 	bl	8002094 <HAL_FLASH_Lock>
}
 8000872:	bf00      	nop
 8000874:	37c8      	adds	r7, #200	; 0xc8
 8000876:	46bd      	mov	sp, r7
 8000878:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800087c:	0801fc00 	.word	0x0801fc00
 8000880:	0801fc4f 	.word	0x0801fc4f

08000884 <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000888:	2100      	movs	r1, #0
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 800088c:	f7ff ff64 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 8000890:	f000 f9f8 	bl	8000c84 <BL_voidMakeSoftWareReset>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	0801fc00 	.word	0x0801fc00

0800089c <BL_voidUpdateHeaders>:

void BL_voidUpdateHeaders(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af04      	add	r7, sp, #16
	uint32_t Local_u32ActiveRegionStatus       = BL_INITIALIZE_WITH_ZERO;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]

	Local_u32ActiveRegionStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <BL_voidUpdateHeaders+0x7c>)
 80008ac:	f7ff fdd0 	bl	8000450 <BL_u32ReadAddressData>
 80008b0:	6078      	str	r0, [r7, #4]
	//Structure LoRa Transmit
	// Request LoRa stransmit to get size of code
	if(LORA_IF_Stransmit_Request(&SX1278,(uint8_t*)  buffer_req,(uint8_t*)  buffer_resp, ret, ADDR_NODE_1, MCU_ENTER_FLASHMODE, GW_PROVIDE_HEADER) == LORA_OKE){
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <BL_voidUpdateHeaders+0x80>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	9202      	str	r2, [sp, #8]
 80008ba:	2202      	movs	r2, #2
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <BL_voidUpdateHeaders+0x84>)
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <BL_voidUpdateHeaders+0x88>)
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <BL_voidUpdateHeaders+0x8c>)
 80008c8:	f000 fed0 	bl	800166c <LORA_IF_Stransmit_Request>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d11d      	bne.n	800090e <BL_voidUpdateHeaders+0x72>

		/*Response Goto Programming and Send Update Request */
		/*Get the size code */
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <BL_voidUpdateHeaders+0x84>)
 80008d4:	79db      	ldrb	r3, [r3, #7]
 80008d6:	061a      	lsls	r2, r3, #24
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <BL_voidUpdateHeaders+0x84>)
 80008da:	799b      	ldrb	r3, [r3, #6]
 80008dc:	041b      	lsls	r3, r3, #16
 80008de:	431a      	orrs	r2, r3
									(buffer_resp[5] << SHIFT_8_BIT) | (buffer_resp[4] << SHIFT_0_BIT);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <BL_voidUpdateHeaders+0x84>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	021b      	lsls	r3, r3, #8
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008e6:	4313      	orrs	r3, r2
									(buffer_resp[5] << SHIFT_8_BIT) | (buffer_resp[4] << SHIFT_0_BIT);
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <BL_voidUpdateHeaders+0x84>)
 80008ea:	7912      	ldrb	r2, [r2, #4]
 80008ec:	4313      	orrs	r3, r2
		Local_u32ImageSizeInBytes = (buffer_resp[7] << SHIFT_24_BIT) | (buffer_resp[6] << SHIFT_16_BIT) |
 80008ee:	603b      	str	r3, [r7, #0]
		if(Local_u32ActiveRegionStatus == BR_IMAGE_IS_ACTIVE )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f113 0f0f 	cmn.w	r3, #15
 80008f6:	d101      	bne.n	80008fc <BL_voidUpdateHeaders+0x60>
		{
			BL_voidCopyImageToBackupRegion();
 80008f8:	f7ff fec4 	bl	8000684 <BL_voidCopyImageToBackupRegion>
		}
		//set IMG Corrupted - if flashing success update img correct
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 80008fc:	f06f 010b 	mvn.w	r1, #11
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <BL_voidUpdateHeaders+0x7c>)
 8000902:	f7ff ff29 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <BL_voidUpdateHeaders+0x90>)
 800090a:	f7ff ff25 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	}

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	0801fc14 	.word	0x0801fc14
 800091c:	200002e0 	.word	0x200002e0
 8000920:	20000138 	.word	0x20000138
 8000924:	2000002c 	.word	0x2000002c
 8000928:	200001c8 	.word	0x200001c8
 800092c:	0801fc18 	.word	0x0801fc18

08000930 <BL_voidReceiveUpdate>:

void BL_voidReceiveUpdate(void)
{
 8000930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000934:	b08e      	sub	sp, #56	; 0x38
 8000936:	af02      	add	r7, sp, #8
	uint32_t Local_u32HighByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32LowByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32InactiveImageAddressCounter                 = ACTIVE_IMAGE_START_ADDRESS;
 8000940:	4b77      	ldr	r3, [pc, #476]	; (8000b20 <BL_voidReceiveUpdate+0x1f0>)
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Local_u32PageError;

    Local_u32SizeOfCode 								  		 = BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000944:	4877      	ldr	r0, [pc, #476]	; (8000b24 <BL_voidReceiveUpdate+0x1f4>)
 8000946:	f7ff fd83 	bl	8000450 <BL_u32ReadAddressData>
 800094a:	4603      	mov	r3, r0
 800094c:	4a76      	ldr	r2, [pc, #472]	; (8000b28 <BL_voidReceiveUpdate+0x1f8>)
 800094e:	6013      	str	r3, [r2, #0]
	Local_u8index_fragment							  	         = BL_INITIALIZE_WITH_ZERO;
 8000950:	4b76      	ldr	r3, [pc, #472]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	uint8_t  Local_u8index_fragment_previous					  = BL_INITIALIZE_WITH_ZERO;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	FLASH_EraseInitTypeDef Local_eraseInfo;
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000960:	2301      	movs	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 8000964:	4b6e      	ldr	r3, [pc, #440]	; (8000b20 <BL_voidReceiveUpdate+0x1f0>)
 8000966:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 8000968:	2316      	movs	r3, #22
 800096a:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 800096c:	f001 fb6c 	bl	8002048 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000970:	f107 0218 	add.w	r2, r7, #24
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fc4c 	bl	8002218 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000980:	f001 fb88 	bl	8002094 <HAL_FLASH_Lock>

	//Structure CAN Transmit
	// Sent Request send fw
	LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*)buffer_req,
 8000984:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	4b69      	ldr	r3, [pc, #420]	; (8000b30 <BL_voidReceiveUpdate+0x200>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2131      	movs	r1, #49	; 0x31
 800098e:	9101      	str	r1, [sp, #4]
 8000990:	2101      	movs	r1, #1
 8000992:	9100      	str	r1, [sp, #0]
 8000994:	4967      	ldr	r1, [pc, #412]	; (8000b34 <BL_voidReceiveUpdate+0x204>)
 8000996:	4868      	ldr	r0, [pc, #416]	; (8000b38 <BL_voidReceiveUpdate+0x208>)
 8000998:	f000 fede 	bl	8001758 <LORA_IF_Stransmit_Response_Flashing>
			Local_u8index_fragment , ret, ADDR_NODE_1, MCU_RECEIVED_SIZE_CODE);


	//Loop to receive code update
	while(Local_u32SizeOfCode)
 800099c:	e147      	b.n	8000c2e <BL_voidReceiveUpdate+0x2fe>
	{
		//Receive code update Fragment firmware
		Local_u8index_fragment = LORA_IF_GetFragment_Firmware(&SX1278,(uint8_t*) buffer_packet,(uint8_t*) buffer_flashing_data,
 800099e:	2301      	movs	r3, #1
 80009a0:	4a66      	ldr	r2, [pc, #408]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 80009a2:	4967      	ldr	r1, [pc, #412]	; (8000b40 <BL_voidReceiveUpdate+0x210>)
 80009a4:	4864      	ldr	r0, [pc, #400]	; (8000b38 <BL_voidReceiveUpdate+0x208>)
 80009a6:	f000 fdd5 	bl	8001554 <LORA_IF_GetFragment_Firmware>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 80009b0:	701a      	strb	r2, [r3, #0]
						ADDR_NODE_1 );
		if ( Local_u8index_fragment == 0){
 80009b2:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10c      	bne.n	80009d4 <BL_voidReceiveUpdate+0xa4>
		// request Send FW again !!
				LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*)buffer_req,
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <BL_voidReceiveUpdate+0x200>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2131      	movs	r1, #49	; 0x31
 80009c4:	9101      	str	r1, [sp, #4]
 80009c6:	2101      	movs	r1, #1
 80009c8:	9100      	str	r1, [sp, #0]
 80009ca:	495a      	ldr	r1, [pc, #360]	; (8000b34 <BL_voidReceiveUpdate+0x204>)
 80009cc:	485a      	ldr	r0, [pc, #360]	; (8000b38 <BL_voidReceiveUpdate+0x208>)
 80009ce:	f000 fec3 	bl	8001758 <LORA_IF_Stransmit_Response_Flashing>
 80009d2:	e011      	b.n	80009f8 <BL_voidReceiveUpdate+0xc8>
						Local_u8index_fragment , ret, ADDR_NODE_1, MCU_RECEIVED_SIZE_CODE);
		}
		else if (Local_u8index_fragment == Local_u8index_fragment_previous ){
 80009d4:	4b55      	ldr	r3, [pc, #340]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80009dc:	429a      	cmp	r2, r3
 80009de:	d10b      	bne.n	80009f8 <BL_voidReceiveUpdate+0xc8>

			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp,
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <BL_voidReceiveUpdate+0x200>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80009e8:	2138      	movs	r1, #56	; 0x38
 80009ea:	9101      	str	r1, [sp, #4]
 80009ec:	2101      	movs	r1, #1
 80009ee:	9100      	str	r1, [sp, #0]
 80009f0:	4954      	ldr	r1, [pc, #336]	; (8000b44 <BL_voidReceiveUpdate+0x214>)
 80009f2:	4851      	ldr	r0, [pc, #324]	; (8000b38 <BL_voidReceiveUpdate+0x208>)
 80009f4:	f000 feb0 	bl	8001758 <LORA_IF_Stransmit_Response_Flashing>
										Local_u8index_fragment_previous , ret, ADDR_NODE_1, MCU_WRITE_SUCCESS);
		}

		if (Local_u32SizeOfCode > 128 && Local_u8index_fragment > Local_u8index_fragment_previous){
 80009f8:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <BL_voidReceiveUpdate+0x1f8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b80      	cmp	r3, #128	; 0x80
 80009fe:	f240 8085 	bls.w	8000b0c <BL_voidReceiveUpdate+0x1dc>
 8000a02:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d27e      	bcs.n	8000b0c <BL_voidReceiveUpdate+0x1dc>
			copy_Array_BL((uint8_t*) buffer_flashing_data ,(uint8_t*) buffer_packet, 128);
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	494b      	ldr	r1, [pc, #300]	; (8000b40 <BL_voidReceiveUpdate+0x210>)
 8000a12:	484a      	ldr	r0, [pc, #296]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a14:	f001 f82f 	bl	8001a76 <copy_Array_BL>
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000a1e:	e056      	b.n	8000ace <BL_voidReceiveUpdate+0x19e>
				uint8_t byte_shift = (8*i);
 8000a20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	77fb      	strb	r3, [r7, #31]
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	3307      	adds	r3, #7
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	061a      	lsls	r2, r3, #24
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	3306      	adds	r3, #6
 8000a36:	4941      	ldr	r1, [pc, #260]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a38:	5ccb      	ldrb	r3, [r1, r3]
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	431a      	orrs	r2, r3
											| (buffer_flashing_data[5+ byte_shift] << SHIFT_8_BIT) | (buffer_flashing_data[4+byte_shift] << SHIFT_0_BIT) ;
 8000a3e:	7ffb      	ldrb	r3, [r7, #31]
 8000a40:	3305      	adds	r3, #5
 8000a42:	493e      	ldr	r1, [pc, #248]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a44:	5ccb      	ldrb	r3, [r1, r3]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	7ffa      	ldrb	r2, [r7, #31]
 8000a4c:	3204      	adds	r2, #4
 8000a4e:	493b      	ldr	r1, [pc, #236]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a50:	5c8a      	ldrb	r2, [r1, r2]
 8000a52:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
			    Local_u32LowByteDataReceive  = (buffer_flashing_data[3 + byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2 + byte_shift] << SHIFT_16_BIT)
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	3303      	adds	r3, #3
 8000a5a:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	061a      	lsls	r2, r3, #24
 8000a60:	7ffb      	ldrb	r3, [r7, #31]
 8000a62:	3302      	adds	r3, #2
 8000a64:	4935      	ldr	r1, [pc, #212]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	431a      	orrs	r2, r3
											| (buffer_flashing_data[1 + byte_shift] << SHIFT_8_BIT) | (buffer_flashing_data[0+byte_shift] << SHIFT_0_BIT) ;
 8000a6c:	7ffb      	ldrb	r3, [r7, #31]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4932      	ldr	r1, [pc, #200]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a72:	5ccb      	ldrb	r3, [r1, r3]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	4313      	orrs	r3, r2
 8000a78:	7ffa      	ldrb	r2, [r7, #31]
 8000a7a:	4930      	ldr	r1, [pc, #192]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000a7c:	5c8a      	ldrb	r2, [r1, r2]
 8000a7e:	4313      	orrs	r3, r2
			    Local_u32LowByteDataReceive  = (buffer_flashing_data[3 + byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2 + byte_shift] << SHIFT_16_BIT)
 8000a80:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000a82:	f001 fae1 	bl	8002048 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	4622      	mov	r2, r4
 8000a90:	462b      	mov	r3, r5
 8000a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a94:	2002      	movs	r0, #2
 8000a96:	f001 fa67 	bl	8001f68 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	1d19      	adds	r1, r3, #4
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	4691      	mov	r9, r2
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	464b      	mov	r3, r9
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f001 fa5c 	bl	8001f68 <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000ab0:	f001 faf0 	bl	8002094 <HAL_FLASH_Lock>
				Local_u32InactiveImageAddressCounter += 8;
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
				Local_u32SizeOfCode -= 8;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <BL_voidReceiveUpdate+0x1f8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3b08      	subs	r3, #8
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <BL_voidReceiveUpdate+0x1f8>)
 8000ac2:	6013      	str	r3, [r2, #0]
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000ac4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000ace:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d9a4      	bls.n	8000a20 <BL_voidReceiveUpdate+0xf0>

			}
			// clear buffer packet
			memset((uint8_t*) buffer_packet, 0x00,132 );
 8000ad6:	2284      	movs	r2, #132	; 0x84
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4819      	ldr	r0, [pc, #100]	; (8000b40 <BL_voidReceiveUpdate+0x210>)
 8000adc:	f002 fe5a 	bl	8003794 <memset>
			memset((uint8_t*) buffer_flashing_data, 0x00,128 );
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <BL_voidReceiveUpdate+0x20c>)
 8000ae6:	f002 fe55 	bl	8003794 <memset>
			Local_u8index_fragment_previous = Local_u8index_fragment;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <BL_voidReceiveUpdate+0x1fc>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp,
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <BL_voidReceiveUpdate+0x200>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000afa:	2138      	movs	r1, #56	; 0x38
 8000afc:	9101      	str	r1, [sp, #4]
 8000afe:	2101      	movs	r1, #1
 8000b00:	9100      	str	r1, [sp, #0]
 8000b02:	4910      	ldr	r1, [pc, #64]	; (8000b44 <BL_voidReceiveUpdate+0x214>)
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <BL_voidReceiveUpdate+0x208>)
 8000b06:	f000 fe27 	bl	8001758 <LORA_IF_Stransmit_Response_Flashing>
		if (Local_u32SizeOfCode > 128 && Local_u8index_fragment > Local_u8index_fragment_previous){
 8000b0a:	e090      	b.n	8000c2e <BL_voidReceiveUpdate+0x2fe>
						Local_u8index_fragment_previous , ret, ADDR_NODE_1, MCU_WRITE_SUCCESS);


		}
		else if(Local_u32SizeOfCode <= 128){
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <BL_voidReceiveUpdate+0x1f8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b80      	cmp	r3, #128	; 0x80
 8000b12:	f200 808c 	bhi.w	8000c2e <BL_voidReceiveUpdate+0x2fe>
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000b1c:	e063      	b.n	8000be6 <BL_voidReceiveUpdate+0x2b6>
 8000b1e:	bf00      	nop
 8000b20:	08005000 	.word	0x08005000
 8000b24:	0801fc18 	.word	0x0801fc18
 8000b28:	20000140 	.word	0x20000140
 8000b2c:	20000144 	.word	0x20000144
 8000b30:	200002e0 	.word	0x200002e0
 8000b34:	2000002c 	.word	0x2000002c
 8000b38:	200001c8 	.word	0x200001c8
 8000b3c:	20000034 	.word	0x20000034
 8000b40:	200000b4 	.word	0x200000b4
 8000b44:	20000138 	.word	0x20000138
				uint8_t byte_shift = (8*i+1);
 8000b48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	77bb      	strb	r3, [r7, #30]
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000b54:	7fbb      	ldrb	r3, [r7, #30]
 8000b56:	3307      	adds	r3, #7
 8000b58:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	061a      	lsls	r2, r3, #24
 8000b5e:	7fbb      	ldrb	r3, [r7, #30]
 8000b60:	3306      	adds	r3, #6
 8000b62:	4937      	ldr	r1, [pc, #220]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b64:	5ccb      	ldrb	r3, [r1, r3]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	431a      	orrs	r2, r3
											| (buffer_flashing_data[5+byte_shift] << SHIFT_8_BIT) | (buffer_flashing_data[4+byte_shift] << SHIFT_0_BIT) ;
 8000b6a:	7fbb      	ldrb	r3, [r7, #30]
 8000b6c:	3305      	adds	r3, #5
 8000b6e:	4934      	ldr	r1, [pc, #208]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b70:	5ccb      	ldrb	r3, [r1, r3]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	4313      	orrs	r3, r2
 8000b76:	7fba      	ldrb	r2, [r7, #30]
 8000b78:	3204      	adds	r2, #4
 8000b7a:	4931      	ldr	r1, [pc, #196]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b7c:	5c8a      	ldrb	r2, [r1, r2]
 8000b7e:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (buffer_flashing_data[7+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[6+byte_shift] << SHIFT_16_BIT)
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
				Local_u32LowByteDataReceive  = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 8000b82:	7fbb      	ldrb	r3, [r7, #30]
 8000b84:	3303      	adds	r3, #3
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	061a      	lsls	r2, r3, #24
 8000b8c:	7fbb      	ldrb	r3, [r7, #30]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	492b      	ldr	r1, [pc, #172]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b92:	5ccb      	ldrb	r3, [r1, r3]
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	431a      	orrs	r2, r3
											| (buffer_flashing_data[1+byte_shift] << SHIFT_8_BIT) | (buffer_flashing_data[0+byte_shift] << SHIFT_0_BIT) ;
 8000b98:	7fbb      	ldrb	r3, [r7, #30]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4928      	ldr	r1, [pc, #160]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000b9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	7fba      	ldrb	r2, [r7, #30]
 8000ba6:	4926      	ldr	r1, [pc, #152]	; (8000c40 <BL_voidReceiveUpdate+0x310>)
 8000ba8:	5c8a      	ldrb	r2, [r1, r2]
 8000baa:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (buffer_flashing_data[3+byte_shift] << SHIFT_24_BIT) | (buffer_flashing_data[2+byte_shift] << SHIFT_16_BIT)
 8000bac:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000bae:	f001 fa4b 	bl	8002048 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	469a      	mov	sl, r3
 8000bb8:	4693      	mov	fp, r2
 8000bba:	4652      	mov	r2, sl
 8000bbc:	465b      	mov	r3, fp
 8000bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f001 f9d1 	bl	8001f68 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	1d19      	adds	r1, r3, #4
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f001 f9c6 	bl	8001f68 <HAL_FLASH_Program>
			for(uint8_t i = 0 ; i < 16 ; i++){
 8000bdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000be0:	3301      	adds	r3, #1
 8000be2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000be6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d9ac      	bls.n	8000b48 <BL_voidReceiveUpdate+0x218>
			}
			HAL_FLASH_Lock();  //Locks again the flash memory
 8000bee:	f001 fa51 	bl	8002094 <HAL_FLASH_Lock>

			Local_u32SizeOfCode -= Local_u32SizeOfCode ;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <BL_voidReceiveUpdate+0x314>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
			while(1){
				LORA_IF_Stransmit_Response_Flashing(&SX1278, (uint8_t*) buffer_resp,
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <BL_voidReceiveUpdate+0x318>)
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <BL_voidReceiveUpdate+0x31c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2138      	movs	r1, #56	; 0x38
 8000c02:	9101      	str	r1, [sp, #4]
 8000c04:	2101      	movs	r1, #1
 8000c06:	9100      	str	r1, [sp, #0]
 8000c08:	4911      	ldr	r1, [pc, #68]	; (8000c50 <BL_voidReceiveUpdate+0x320>)
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <BL_voidReceiveUpdate+0x324>)
 8000c0c:	f000 fda4 	bl	8001758 <LORA_IF_Stransmit_Response_Flashing>
						Local_u8index_fragment , ret, ADDR_NODE_1, MCU_WRITE_SUCCESS);
				// MCU send response when finish flashing
				if (LORA_IF_Stransmit_Response_Finish(&SX1278,(uint8_t*)  buffer_req, ret,
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <BL_voidReceiveUpdate+0x31c>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	2339      	movs	r3, #57	; 0x39
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	490f      	ldr	r1, [pc, #60]	; (8000c58 <BL_voidReceiveUpdate+0x328>)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <BL_voidReceiveUpdate+0x324>)
 8000c1e:	f000 fd7b 	bl	8001718 <LORA_IF_Stransmit_Response_Finish>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e7      	bne.n	8000bf8 <BL_voidReceiveUpdate+0x2c8>
								ADDR_NODE_1, GW_ACKNOWLEDGE_FINISHING_SENDING_CODE) == LORA_OKE){
					BL_voidFinishBootLoader();
 8000c28:	f000 f818 	bl	8000c5c <BL_voidFinishBootLoader>
 8000c2c:	e004      	b.n	8000c38 <BL_voidReceiveUpdate+0x308>
	while(Local_u32SizeOfCode)
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <BL_voidReceiveUpdate+0x314>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f47f aeb3 	bne.w	800099e <BL_voidReceiveUpdate+0x6e>
		/* Send To notify GW Send the next packet*/

	}


}
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c40:	20000034 	.word	0x20000034
 8000c44:	20000140 	.word	0x20000140
 8000c48:	20000144 	.word	0x20000144
 8000c4c:	200002e0 	.word	0x200002e0
 8000c50:	20000138 	.word	0x20000138
 8000c54:	200001c8 	.word	0x200001c8
 8000c58:	2000002c 	.word	0x2000002c

08000c5c <BL_voidFinishBootLoader>:

void BL_voidFinishBootLoader(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000c60:	f06f 010e 	mvn.w	r1, #14
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <BL_voidFinishBootLoader+0x20>)
 8000c66:	f7ff fd77 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <BL_voidFinishBootLoader+0x24>)
 8000c70:	f7ff fd72 	bl	8000758 <BL_voidEraseRestoreHeaderPage>
	BL_voidMakeSoftWareReset();
 8000c74:	f000 f806 	bl	8000c84 <BL_voidMakeSoftWareReset>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	0801fc14 	.word	0x0801fc14
 8000c80:	0801fc00 	.word	0x0801fc00

08000c84 <BL_voidMakeSoftWareReset>:

void BL_voidMakeSoftWareReset(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	// make software reset after flashing success
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <BL_voidMakeSoftWareReset+0x38>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <BL_voidMakeSoftWareReset+0x38>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6053      	str	r3, [r2, #4]
#endif

	hiwdg.Instance = IWDG;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <BL_voidMakeSoftWareReset+0x3c>)
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <BL_voidMakeSoftWareReset+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <BL_voidMakeSoftWareReset+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <BL_voidMakeSoftWareReset+0x3c>)
 8000ca2:	2209      	movs	r2, #9
 8000ca4:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <BL_voidMakeSoftWareReset+0x3c>)
 8000ca8:	f001 fd2a 	bl	8002700 <HAL_IWDG_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <BL_voidMakeSoftWareReset+0x32>
	{
		Error_Handler();
 8000cb2:	f000 fedb 	bl	8001a6c <Error_Handler>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e0042000 	.word	0xe0042000
 8000cc0:	20000148 	.word	0x20000148
 8000cc4:	40003000 	.word	0x40003000

08000cc8 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */
#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fbd0 	bl	8001482 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fbeb 	bl	80014c2 <SX1278_hw_SPIReadByte>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fb88 	bl	800140c <SX1278_hw_SetNSS>
	return tmp;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
 8000d12:	4613      	mov	r3, r2
 8000d14:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fb75 	bl	800140c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4610      	mov	r0, r2
 8000d32:	f000 fba6 	bl	8001482 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	78ba      	ldrb	r2, [r7, #2]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fb9f 	bl	8001482 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fb5e 	bl	800140c <SX1278_hw_SetNSS>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	461a      	mov	r2, r3
 8000d64:	460b      	mov	r3, r1
 8000d66:	72fb      	strb	r3, [r7, #11]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000d6c:	7abb      	ldrb	r3, [r7, #10]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d927      	bls.n	8000dc2 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb47 	bl	800140c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	7afa      	ldrb	r2, [r7, #11]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fb7b 	bl	8001482 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	e00c      	b.n	8000dac <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	18d4      	adds	r4, r2, r3
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	f000 fb90 	bl	80014c2 <SX1278_hw_SPIReadByte>
 8000da2:	4603      	mov	r3, r0
 8000da4:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	3301      	adds	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
 8000dac:	7dfa      	ldrb	r2, [r7, #23]
 8000dae:	7abb      	ldrb	r3, [r7, #10]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3ee      	bcc.n	8000d92 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fb26 	bl	800140c <SX1278_hw_SetNSS>
 8000dc0:	e000      	b.n	8000dc4 <SX1278_SPIBurstRead+0x6c>
		return;
 8000dc2:	bf00      	nop
	}
}
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}

08000dca <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	72fb      	strb	r3, [r7, #11]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000dde:	7abb      	ldrb	r3, [r7, #10]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d929      	bls.n	8000e38 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fb0e 	bl	800140c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4610      	mov	r0, r2
 8000e00:	f000 fb3f 	bl	8001482 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	75fb      	strb	r3, [r7, #23]
 8000e08:	e00b      	b.n	8000e22 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	f000 fb33 	bl	8001482 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
 8000e22:	7dfa      	ldrb	r2, [r7, #23]
 8000e24:	7abb      	ldrb	r3, [r7, #10]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d3ef      	bcc.n	8000e0a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 faeb 	bl	800140c <SX1278_hw_SetNSS>
 8000e36:	e000      	b.n	8000e3a <SX1278_SPIBurstWrite+0x70>
		return;
 8000e38:	bf00      	nop
	}
}
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f90d 	bl	8001068 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 fb5d 	bl	800150e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f917 	bl	8001088 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e60:	f04f 0000 	mov.w	r0, #0
 8000e64:	f04f 0100 	mov.w	r1, #0
 8000e68:	04d9      	lsls	r1, r3, #19
 8000e6a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000e6e:	04d0      	lsls	r0, r2, #19
 8000e70:	4a6f      	ldr	r2, [pc, #444]	; (8001030 <SX1278_config+0x1f0>)
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	f7ff f96b 	bl	8000150 <__aeabi_uldivmod>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000e82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	0c02      	lsrs	r2, r0, #16
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	b2d3      	uxtb	r3, r2
 8000e98:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	0a02      	lsrs	r2, r0, #8
 8000ea8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000eac:	0a0b      	lsrs	r3, r1, #8
 8000eae:	b2d3      	uxtb	r3, r2
 8000eb0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000eb2:	7c3b      	ldrb	r3, [r7, #16]
 8000eb4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	2303      	movs	r3, #3
 8000ebc:	2106      	movs	r1, #6
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff83 	bl	8000dca <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000ec4:	2234      	movs	r2, #52	; 0x34
 8000ec6:	2139      	movs	r1, #57	; 0x39
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff1c 	bl	8000d06 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7c1b      	ldrb	r3, [r3, #16]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <SX1278_config+0x1f4>)
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2109      	movs	r1, #9
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff12 	bl	8000d06 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000ee2:	220b      	movs	r2, #11
 8000ee4:	210b      	movs	r1, #11
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff0d 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000eec:	2223      	movs	r2, #35	; 0x23
 8000eee:	210c      	movs	r1, #12
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff08 	bl	8000d06 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7c5b      	ldrb	r3, [r3, #17]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <SX1278_config+0x1f8>)
 8000efe:	5c9b      	ldrb	r3, [r3, r2]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d147      	bne.n	8000f94 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7c9b      	ldrb	r3, [r3, #18]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	; (800103c <SX1278_config+0x1fc>)
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7cdb      	ldrb	r3, [r3, #19]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <SX1278_config+0x200>)
 8000f1a:	5c5b      	ldrb	r3, [r3, r1]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	211d      	movs	r1, #29
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff feea 	bl	8000d06 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7c5b      	ldrb	r3, [r3, #17]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <SX1278_config+0x1f8>)
 8000f3a:	5c9b      	ldrb	r3, [r3, r2]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7d1b      	ldrb	r3, [r3, #20]
 8000f44:	4619      	mov	r1, r3
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <SX1278_config+0x204>)
 8000f48:	5c5b      	ldrb	r3, [r3, r1]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f52:	3303      	adds	r3, #3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	211e      	movs	r1, #30
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fed3 	bl	8000d06 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000f60:	2131      	movs	r1, #49	; 0x31
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff feb0 	bl	8000cc8 <SX1278_SPIRead>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f023 0307 	bic.w	r3, r3, #7
 8000f72:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f043 0305 	orr.w	r3, r3, #5
 8000f7a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2131      	movs	r1, #49	; 0x31
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff febf 	bl	8000d06 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000f88:	220c      	movs	r2, #12
 8000f8a:	2137      	movs	r1, #55	; 0x37
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff feba 	bl	8000d06 <SX1278_SPIWrite>
 8000f92:	e029      	b.n	8000fe8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7c9b      	ldrb	r3, [r3, #18]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <SX1278_config+0x1fc>)
 8000f9c:	5c9b      	ldrb	r3, [r3, r2]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7cdb      	ldrb	r3, [r3, #19]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <SX1278_config+0x200>)
 8000faa:	5c5b      	ldrb	r3, [r3, r1]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	211d      	movs	r1, #29
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fea4 	bl	8000d06 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c5b      	ldrb	r3, [r3, #17]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <SX1278_config+0x1f8>)
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7d1b      	ldrb	r3, [r3, #20]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <SX1278_config+0x204>)
 8000fd4:	5c5b      	ldrb	r3, [r3, r1]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	211e      	movs	r1, #30
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fe8f 	bl	8000d06 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000fe8:	2204      	movs	r2, #4
 8000fea:	2126      	movs	r1, #38	; 0x26
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fe8a 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	211f      	movs	r1, #31
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fe85 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fe80 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001006:	2208      	movs	r2, #8
 8001008:	2121      	movs	r1, #33	; 0x21
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fe7b 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001010:	2201      	movs	r2, #1
 8001012:	2141      	movs	r1, #65	; 0x41
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fe76 	bl	8000d06 <SX1278_SPIWrite>
	module->readBytes = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f810 	bl	8001048 <SX1278_standby>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	01e84800 	.word	0x01e84800
 8001034:	08003820 	.word	0x08003820
 8001038:	08003824 	.word	0x08003824
 800103c:	0800382c 	.word	0x0800382c
 8001040:	08003838 	.word	0x08003838
 8001044:	0800383c 	.word	0x0800383c

08001048 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001050:	2209      	movs	r2, #9
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fe56 	bl	8000d06 <SX1278_SPIWrite>
	module->status = STANDBY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	759a      	strb	r2, [r3, #22]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001070:	2208      	movs	r2, #8
 8001072:	2101      	movs	r1, #1
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fe46 	bl	8000d06 <SX1278_SPIWrite>
	module->status = SLEEP;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	759a      	strb	r2, [r3, #22]
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001090:	2288      	movs	r2, #136	; 0x88
 8001092:	2101      	movs	r1, #1
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fe36 	bl	8000d06 <SX1278_SPIWrite>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	2112      	movs	r1, #18
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe29 	bl	8000d06 <SX1278_SPIWrite>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	7afa      	ldrb	r2, [r7, #11]
 80010ce:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff feb5 	bl	8000e40 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80010d6:	2284      	movs	r2, #132	; 0x84
 80010d8:	214d      	movs	r1, #77	; 0x4d
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fe13 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	2124      	movs	r1, #36	; 0x24
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fe0e 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80010ea:	2201      	movs	r2, #1
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fe09 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	2111      	movs	r1, #17
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fe04 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff ffcf 	bl	80010a2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	461a      	mov	r2, r3
 8001108:	2122      	movs	r1, #34	; 0x22
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff fdfb 	bl	8000d06 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001110:	210f      	movs	r1, #15
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff fdd8 	bl	8000cc8 <SX1278_SPIRead>
 8001118:	4603      	mov	r3, r0
 800111a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	461a      	mov	r2, r3
 8001120:	210d      	movs	r1, #13
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff fdef 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001128:	228d      	movs	r2, #141	; 0x8d
 800112a:	2101      	movs	r1, #1
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff fdea 	bl	8000d06 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800113a:	2118      	movs	r1, #24
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff fdc3 	bl	8000cc8 <SX1278_SPIRead>
 8001142:	4603      	mov	r3, r0
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b04      	cmp	r3, #4
 800114a:	d104      	bne.n	8001156 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2203      	movs	r2, #3
 8001150:	759a      	strb	r2, [r3, #22]
			return 1;
 8001152:	2301      	movs	r3, #1
 8001154:	e013      	b.n	800117e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3b01      	subs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f967 	bl	800143a <SX1278_hw_Reset>
			SX1278_config(module);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fe67 	bl	8000e40 <SX1278_config>
			return 0;
 8001172:	2300      	movs	r3, #0
 8001174:	e003      	b.n	800117e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 f9c9 	bl	800150e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800117c:	e7dd      	b.n	800113a <SX1278_LoRaEntryRx+0x7e>
	}
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f9c6 	bl	8001524 <SX1278_hw_GetDIO0>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d030      	beq.n	8001200 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3317      	adds	r3, #23
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 faf3 	bl	8003794 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80011ae:	2110      	movs	r1, #16
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fd89 	bl	8000cc8 <SX1278_SPIRead>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	461a      	mov	r2, r3
 80011be:	210d      	movs	r1, #13
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fda0 	bl	8000d06 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7c5b      	ldrb	r3, [r3, #17]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7d5b      	ldrb	r3, [r3, #21]
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e005      	b.n	80011e2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80011d6:	2113      	movs	r1, #19
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fd75 	bl	8000cc8 <SX1278_SPIRead>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f103 0217 	add.w	r2, r3, #23
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fdb3 	bl	8000d58 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff51 	bl	80010a2 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	460b      	mov	r3, r1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	7afa      	ldrb	r2, [r7, #11]
 8001220:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fe0c 	bl	8000e40 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001228:	2287      	movs	r2, #135	; 0x87
 800122a:	214d      	movs	r1, #77	; 0x4d
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff fd6a 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001232:	2200      	movs	r2, #0
 8001234:	2124      	movs	r1, #36	; 0x24
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff fd65 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800123c:	2241      	movs	r2, #65	; 0x41
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fd60 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff2b 	bl	80010a2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800124c:	22f7      	movs	r2, #247	; 0xf7
 800124e:	2111      	movs	r1, #17
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fd58 	bl	8000d06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	461a      	mov	r2, r3
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fd52 	bl	8000d06 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001262:	210e      	movs	r1, #14
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff fd2f 	bl	8000cc8 <SX1278_SPIRead>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	461a      	mov	r2, r3
 8001272:	210d      	movs	r1, #13
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fd46 	bl	8000d06 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff fd23 	bl	8000cc8 <SX1278_SPIRead>
 8001282:	4603      	mov	r3, r0
 8001284:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001286:	7dba      	ldrb	r2, [r7, #22]
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	429a      	cmp	r2, r3
 800128c:	d104      	bne.n	8001298 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2202      	movs	r2, #2
 8001292:	759a      	strb	r2, [r3, #22]
			return 1;
 8001294:	2301      	movs	r3, #1
 8001296:	e00e      	b.n	80012b6 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ea      	bne.n	800127a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f8c6 	bl	800143a <SX1278_hw_Reset>
			SX1278_config(module);
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f7ff fdc6 	bl	8000e40 <SX1278_config>
			return 0;
 80012b4:	2300      	movs	r3, #0
		}
	}
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	2100      	movs	r1, #0
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fd78 	bl	8000dca <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80012da:	228b      	movs	r2, #139	; 0x8b
 80012dc:	2101      	movs	r1, #1
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff fd11 	bl	8000d06 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f91b 	bl	8001524 <SX1278_hw_GetDIO0>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80012f4:	2112      	movs	r1, #18
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff fce6 	bl	8000cc8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff fed0 	bl	80010a2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fea0 	bl	8001048 <SX1278_standby>
			return 1;
 8001308:	2301      	movs	r3, #1
 800130a:	e013      	b.n	8001334 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f88c 	bl	800143a <SX1278_hw_Reset>
			SX1278_config(module);
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fd8c 	bl	8000e40 <SX1278_config>
			return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e003      	b.n	8001334 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 f8ee 	bl	800150e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001332:	e7d7      	b.n	80012e4 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f848 	bl	80013e2 <SX1278_hw_init>
	module->frequency = frequency;
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001358:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	7e3a      	ldrb	r2, [r7, #24]
 8001360:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	7f3a      	ldrb	r2, [r7, #28]
 8001366:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800136e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001376:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800137e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001386:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fd59 	bl	8000e40 <SX1278_config>
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d003      	beq.n	80013b8 <SX1278_read+0x22>
		length = module->readBytes;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80013b6:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3317      	adds	r3, #23
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	4619      	mov	r1, r3
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f002 fa13 	bl	80037ec <memcpy>
	rxBuf[length] = '\0';
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <SX1278_hw_init>:
#include "SX1278_hw.h"
#include <string.h>
#include "main.h"


__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80013ea:	2101      	movs	r1, #1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f80d 	bl	800140c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6858      	ldr	r0, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	f001 f94d 	bl	800269e <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6958      	ldr	r0, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	b299      	uxth	r1, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	f001 f936 	bl	800269e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffe1 	bl	800140c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6858      	ldr	r0, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	f001 f921 	bl	800269e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 f856 	bl	800150e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6858      	ldr	r0, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	2201      	movs	r2, #1
 800146e:	4619      	mov	r1, r3
 8001470:	f001 f915 	bl	800269e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f000 f84a 	bl	800150e <SX1278_hw_DelayMs>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffbb 	bl	800140c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6998      	ldr	r0, [r3, #24]
 800149a:	1cf9      	adds	r1, r7, #3
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	2201      	movs	r2, #1
 80014a2:	f001 fdd1 	bl	8003048 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80014a6:	bf00      	nop
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 f8be 	bl	800362e <HAL_SPI_GetState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1f7      	bne.n	80014a8 <SX1278_hw_SPICommand+0x26>
		;
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff99 	bl	800140c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6998      	ldr	r0, [r3, #24]
 80014de:	f107 020e 	add.w	r2, r7, #14
 80014e2:	f107 010f 	add.w	r1, r7, #15
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	f001 feee 	bl	80032ce <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80014f2:	bf00      	nop
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f898 	bl	800362e <HAL_SPI_GetState>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1f7      	bne.n	80014f4 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001504:	7bbb      	ldrb	r3, [r7, #14]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fc1e 	bl	8001d58 <HAL_Delay>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f001 f899 	bl	8002670 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <LORA_IF_GetFragment_Firmware>:
#include "SX1278.h"
#include "BL_Program.h"

uint8_t counter ;
uint8_t  LORA_IF_GetFragment_Firmware(SX1278_t *module , uint8_t* buffer_packet ,uint8_t* buffer_flashing_data ,
		uint8_t addr){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	70fb      	strb	r3, [r7, #3]
	counter = 0 ;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <LORA_IF_GetFragment_Firmware+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	//clear data buffer
	//clearDataBuffer((uint8_t*) buffer_packet,132);
		/* Configuration LoRa to Receive firmware*/
	while(1){
		ret = SX1278_LoRaEntryRx(module, SIZE_BUFFER_132BYTES , MAX_TIME_OUT);
 8001568:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800156c:	2184      	movs	r1, #132	; 0x84
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fda4 	bl	80010bc <SX1278_LoRaEntryRx>
 8001574:	4603      	mov	r3, r0
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <LORA_IF_GetFragment_Firmware+0x98>)
 800157a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f000 fbeb 	bl	8001d58 <HAL_Delay>
		ret = SX1278_LoRaRxPacket(module);
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff fdff 	bl	8001186 <SX1278_LoRaRxPacket>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <LORA_IF_GetFragment_Firmware+0x98>)
 800158e:	701a      	strb	r2, [r3, #0]
		if ( ret > 0 ) {
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <LORA_IF_GetFragment_Firmware+0x98>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0e7      	beq.n	8001568 <LORA_IF_GetFragment_Firmware+0x14>
			ret = SX1278_read(module, (uint8_t*) buffer_packet, ret);
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <LORA_IF_GetFragment_Firmware+0x98>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fef8 	bl	8001396 <SX1278_read>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <LORA_IF_GetFragment_Firmware+0x98>)
 80015ac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <LORA_IF_GetFragment_Firmware+0x9c>)
 80015b4:	f001 f88b 	bl	80026ce <HAL_GPIO_TogglePin>
			if(buffer_packet[0] == ADDR_UNICAST  && buffer_packet[1] == addr  && buffer_packet[3] == FL_FRAGMENT_FIRMWARE){
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d10d      	bne.n	80015dc <LORA_IF_GetFragment_Firmware+0x88>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <LORA_IF_GetFragment_Firmware+0x88>
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3303      	adds	r3, #3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2bfe      	cmp	r3, #254	; 0xfe
 80015d4:	d102      	bne.n	80015dc <LORA_IF_GetFragment_Firmware+0x88>
				/* Copy data from buffer packet to buffer flashing data*/

				return buffer_packet[2] ;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	e000      	b.n	80015de <LORA_IF_GetFragment_Firmware+0x8a>
			}
			else{
				// If not receive return 0
				return 0;
 80015dc:	2300      	movs	r3, #0
			}
		}
	}

}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000145 	.word	0x20000145
 80015ec:	200002e0 	.word	0x200002e0
 80015f0:	40011000 	.word	0x40011000

080015f4 <LORA_IF_GetData_Frame>:


uint8_t LORA_IF_GetData_Frame(SX1278_t *module , uint8_t* buffer , uint8_t ret , uint32_t timeout , uint8_t length ){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	71fb      	strb	r3, [r7, #7]
    ret = SX1278_LoRaEntryRx(module, length, timeout);
 8001604:	7e3b      	ldrb	r3, [r7, #24]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff fd56 	bl	80010bc <SX1278_LoRaEntryRx>
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8001614:	2064      	movs	r0, #100	; 0x64
 8001616:	f000 fb9f 	bl	8001d58 <HAL_Delay>
	ret = SX1278_LoRaRxPacket(module);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fdb3 	bl	8001186 <SX1278_LoRaRxPacket>
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
	if ( ret > 0 ) {
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d018      	beq.n	800165c <LORA_IF_GetData_Frame+0x68>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <LORA_IF_GetData_Frame+0x74>)
 8001630:	f001 f84d 	bl	80026ce <HAL_GPIO_TogglePin>
		ret = SX1278_read(module, (uint8_t*) buffer, ret);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	461a      	mov	r2, r3
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff feab 	bl	8001396 <SX1278_read>
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
		if(buffer[0]== ADDR_BOARDCAST  && buffer[1] == ADDR_NODE_1)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d107      	bne.n	800165c <LORA_IF_GetData_Frame+0x68>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3301      	adds	r3, #1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <LORA_IF_GetData_Frame+0x68>
			return buffer[3];
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	e000      	b.n	800165e <LORA_IF_GetData_Frame+0x6a>
	}
    return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40011000 	.word	0x40011000

0800166c <LORA_IF_Stransmit_Request>:
//    ret = SX1278_LoRaEntryTx(module, length , timeout);
//	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer, length, timeout);
//	return LORA_OKE;
//}
LoRa_Return_t LORA_IF_Stransmit_Request(SX1278_t *module , uint8_t *buffer_req , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr ,uint8_t ACK_req , uint8_t ACK_resp){
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	70fb      	strb	r3, [r7, #3]
	counter = 0;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <LORA_IF_Stransmit_Request+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
	buffer_req[0] = ADDR_UNICAST;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2203      	movs	r2, #3
 8001684:	701a      	strb	r2, [r3, #0]
	buffer_req[1] = addr ;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	7e3a      	ldrb	r2, [r7, #24]
 800168c:	701a      	strb	r2, [r3, #0]
	buffer_req[3] = ACK_req;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3303      	adds	r3, #3
 8001692:	7f3a      	ldrb	r2, [r7, #28]
 8001694:	701a      	strb	r2, [r3, #0]
	while(1){
	 ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_8BYTES  , MAX_TIME_OUT);
 8001696:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800169a:	2108      	movs	r1, #8
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fdb6 	bl	800120e <SX1278_LoRaEntryTx>
 80016a2:	4603      	mov	r3, r0
 80016a4:	70fb      	strb	r3, [r7, #3]
	 ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_req, SIZE_BUFFER_8BYTES, MAX_TIME_OUT);
 80016a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016aa:	2208      	movs	r2, #8
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fe05 	bl	80012be <SX1278_LoRaTxPacket>
 80016b4:	4603      	mov	r3, r0
 80016b6:	70fb      	strb	r3, [r7, #3]
	 if(ret){
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <LORA_IF_Stransmit_Request+0x92>
		/*Read the first Frame
		 *counter to retry connect until get resp signal
		 */
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	4814      	ldr	r0, [pc, #80]	; (8001714 <LORA_IF_Stransmit_Request+0xa8>)
 80016c4:	f001 f803 	bl	80026ce <HAL_GPIO_TogglePin>
		 HAL_Delay(TIME_DELAY);
 80016c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016cc:	f000 fb44 	bl	8001d58 <HAL_Delay>
		if(LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_8BYTES ) == ACK_resp){
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	2308      	movs	r3, #8
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff89 	bl	80015f4 <LORA_IF_GetData_Frame>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <LORA_IF_Stransmit_Request+0x86>
			return LORA_OKE ;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e00a      	b.n	8001708 <LORA_IF_Stransmit_Request+0x9c>
		}
		else counter++;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <LORA_IF_Stransmit_Request+0xa4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <LORA_IF_Stransmit_Request+0xa4>)
 80016fc:	701a      	strb	r2, [r3, #0]
	 }
	 if(counter == MAX_TRY_REQ){
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <LORA_IF_Stransmit_Request+0xa4>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d1c7      	bne.n	8001696 <LORA_IF_Stransmit_Request+0x2a>
		 return LORA_TIMEOUT;
 8001706:	2303      	movs	r3, #3
	 }
	}

}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000145 	.word	0x20000145
 8001714:	40011000 	.word	0x40011000

08001718 <LORA_IF_Stransmit_Response_Finish>:
		}
	}
}

LoRa_Return_t LORA_IF_Stransmit_Response_Finish(SX1278_t *module , uint8_t* buffer_resp ,
		uint8_t ret, uint8_t addr ,uint8_t ACK_req){
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4613      	mov	r3, r2
 800172c:	71bb      	strb	r3, [r7, #6]
	while(1){
		if((LORA_IF_GetData_Frame(module ,(uint8_t*) buffer_resp , ret , MAX_TIME_OUT , SIZE_BUFFER_8BYTES ) == ACK_req)){
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	2308      	movs	r3, #8
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff ff5a 	bl	80015f4 <LORA_IF_GetData_Frame>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	7e3b      	ldrb	r3, [r7, #24]
 8001746:	4293      	cmp	r3, r2
 8001748:	d101      	bne.n	800174e <LORA_IF_Stransmit_Response_Finish+0x36>
			return LORA_OKE;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <LORA_IF_Stransmit_Response_Finish+0x38>
		}
		return LORA_TIMEOUT;
 800174e:	2303      	movs	r3, #3

	}

}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <LORA_IF_Stransmit_Response_Flashing>:

LoRa_Return_t LORA_IF_Stransmit_Response_Flashing(SX1278_t *module ,uint8_t* buffer_resp ,
		uint8_t no , uint8_t ret, uint8_t addr ,uint8_t ACK_resp){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	460b      	mov	r3, r1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	4613      	mov	r3, r2
 800176c:	71bb      	strb	r3, [r7, #6]
	buffer_resp[0] = ADDR_UNICAST;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2203      	movs	r2, #3
 8001772:	701a      	strb	r2, [r3, #0]
	buffer_resp[1] = addr;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3301      	adds	r3, #1
 8001778:	7e3a      	ldrb	r2, [r7, #24]
 800177a:	701a      	strb	r2, [r3, #0]
	buffer_resp[2] = no ;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3302      	adds	r3, #2
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	701a      	strb	r2, [r3, #0]
	buffer_resp[3] = ACK_resp;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3303      	adds	r3, #3
 8001788:	7f3a      	ldrb	r2, [r7, #28]
 800178a:	701a      	strb	r2, [r3, #0]
	ret = SX1278_LoRaEntryTx(module, SIZE_BUFFER_8BYTES  , MAX_TIME_OUT);
 800178c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001790:	2108      	movs	r1, #8
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7ff fd3b 	bl	800120e <SX1278_LoRaEntryTx>
 8001798:	4603      	mov	r3, r0
 800179a:	71bb      	strb	r3, [r7, #6]
	ret = SX1278_LoRaTxPacket(module, (uint8_t*) buffer_resp, SIZE_BUFFER_8BYTES, MAX_TIME_OUT);
 800179c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017a0:	2208      	movs	r2, #8
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fd8a 	bl	80012be <SX1278_LoRaTxPacket>
 80017aa:	4603      	mov	r3, r0
 80017ac:	71bb      	strb	r3, [r7, #6]
	if(ret){
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <LORA_IF_Stransmit_Response_Flashing+0x78>
		// Toggle pin led to notify response
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <LORA_IF_Stransmit_Response_Flashing+0x84>)
 80017ba:	f000 ff88 	bl	80026ce <HAL_GPIO_TogglePin>
		HAL_Delay(TIME_DELAY);
 80017be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c2:	f000 fac9 	bl	8001d58 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <LORA_IF_Stransmit_Response_Flashing+0x84>)
 80017cc:	f000 ff7f 	bl	80026ce <HAL_GPIO_TogglePin>
	}
}
 80017d0:	bf00      	nop
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40011000 	.word	0x40011000

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80017e6:	f000 fa37 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f83f 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 f8bb 	bl	8001968 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_SPI1_Init();
 80017f2:	f000 f883 	bl	80018fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <main+0x78>)
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <main+0x7c>)
 80017fa:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <main+0x78>)
 80017fe:	2201      	movs	r2, #1
 8001800:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <main+0x78>)
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <main+0x80>)
 8001806:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <main+0x78>)
 800180a:	2210      	movs	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <main+0x78>)
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <main+0x7c>)
 8001812:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <main+0x78>)
 8001816:	2202      	movs	r2, #2
 8001818:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <main+0x78>)
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <main+0x84>)
 800181e:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <main+0x88>)
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <main+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	9305      	str	r3, [sp, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	2303      	movs	r3, #3
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	2309      	movs	r3, #9
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	2301      	movs	r3, #1
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	a304      	add	r3, pc, #16	; (adr r3, 8001850 <main+0x70>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <main+0x88>)
 8001846:	f7ff fd79 	bl	800133c <SX1278_init>
  SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 128);

  BL_voidBootLoader_Init();
 800184a:	f7fe fe0f 	bl	800046c <BL_voidBootLoader_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800184e:	e7fe      	b.n	800184e <main+0x6e>
 8001850:	19de5080 	.word	0x19de5080
 8001854:	00000000 	.word	0x00000000
 8001858:	200001ac 	.word	0x200001ac
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40010800 	.word	0x40010800
 8001864:	20000154 	.word	0x20000154
 8001868:	200001c8 	.word	0x200001c8

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b090      	sub	sp, #64	; 0x40
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	2228      	movs	r2, #40	; 0x28
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f001 ff8a 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800188e:	2309      	movs	r3, #9
 8001890:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 ff63 	bl	8002784 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80018c4:	f000 f8d2 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 f9d0 	bl	8002c88 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80018ee:	f000 f8bd 	bl	8001a6c <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3740      	adds	r7, #64	; 0x40
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_SPI1_Init+0x64>)
 8001902:	4a18      	ldr	r2, [pc, #96]	; (8001964 <MX_SPI1_Init+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_SPI1_Init+0x64>)
 8001908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800190c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_SPI1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_SPI1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_SPI1_Init+0x64>)
 8001928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SPI1_Init+0x64>)
 8001930:	2210      	movs	r2, #16
 8001932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_SPI1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SPI1_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_SPI1_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SPI1_Init+0x64>)
 8001948:	220a      	movs	r2, #10
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_SPI1_Init+0x64>)
 800194e:	f001 faf7 	bl	8002f40 <HAL_SPI_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001958:	f000 f888 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000154 	.word	0x20000154
 8001964:	40013000 	.word	0x40013000

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <MX_GPIO_Init+0xf4>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a36      	ldr	r2, [pc, #216]	; (8001a5c <MX_GPIO_Init+0xf4>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <MX_GPIO_Init+0xf4>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <MX_GPIO_Init+0xf4>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <MX_GPIO_Init+0xf4>)
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e2:	481f      	ldr	r0, [pc, #124]	; (8001a60 <MX_GPIO_Init+0xf8>)
 80019e4:	f000 fe5b 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2110      	movs	r1, #16
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019ee:	f000 fe56 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|RESET_Pin|MODE_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2107      	movs	r1, #7
 80019f6:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_GPIO_Init+0x100>)
 80019f8:	f000 fe51 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MX_GPIO_Init+0xf8>)
 8001a16:	f000 fca7 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001a32:	f000 fc99 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin RESET_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|RESET_Pin|MODE_Pin;
 8001a36:	2307      	movs	r3, #7
 8001a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4806      	ldr	r0, [pc, #24]	; (8001a68 <MX_GPIO_Init+0x100>)
 8001a4e:	f000 fc8b 	bl	8002368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40011000 	.word	0x40011000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>

08001a76 <copy_Array_BL>:
	uint8* prtA = a + 4 ;
	for(uint8 i = 0 ; i < size ; i++){
		*(prtA++) = *(b++);
	}
}
void copy_Array_BL(uint8* a , uint8* b , uint32 size){
 8001a76:	b480      	push	{r7}
 8001a78:	b087      	sub	sp, #28
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	uint8* prtB = b + 4 ;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
	for(uint8 i = 0 ; i < size ; i++){
 8001a88:	2300      	movs	r3, #0
 8001a8a:	74fb      	strb	r3, [r7, #19]
 8001a8c:	e00a      	b.n	8001aa4 <copy_Array_BL+0x2e>
		*(a++) = *(prtB++);
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	1c53      	adds	r3, r2, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1c59      	adds	r1, r3, #1
 8001a98:	60f9      	str	r1, [r7, #12]
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	701a      	strb	r2, [r3, #0]
	for(uint8 i = 0 ; i < size ; i++){
 8001a9e:	7cfb      	ldrb	r3, [r7, #19]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	74fb      	strb	r3, [r7, #19]
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f0      	bhi.n	8001a8e <copy_Array_BL+0x18>
	}
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x5c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_MspInit+0x60>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_MspInit+0x60>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000

08001b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d12f      	bne.n	8001b9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b6c:	23a0      	movs	r3, #160	; 0xa0
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <HAL_SPI_MspInit+0x90>)
 8001b80:	f000 fbf2 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_SPI_MspInit+0x90>)
 8001b98:	f000 fbe6 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013000 	.word	0x40013000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010800 	.word	0x40010800

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf6:	f000 f893 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff fff7 	bl	8001bfe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c12:	490c      	ldr	r1, [pc, #48]	; (8001c44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c28:	4c09      	ldr	r4, [pc, #36]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f001 fdb5 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c3a:	f7ff fdd1 	bl	80017e0 <main>
  bx lr
 8001c3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c48:	08003874 	.word	0x08003874
  ldr r2, =_sbss
 8001c4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c50:	20000308 	.word	0x20000308

08001c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC1_2_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_Init+0x28>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_Init+0x28>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f949 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	200f      	movs	r0, #15
 8001c70:	f000 f826 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff ff20 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_DeInit+0x2c>)
 8001c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_DeInit+0x2c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_DeInit+0x2c>)
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_DeInit+0x2c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001ca4:	f000 f806 	bl	8001cb4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f935 	bl	8001f4e <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f90b 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x1c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_IncTick+0x20>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <HAL_IncTick+0x20>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	200002e4 	.word	0x200002e4

08001d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <HAL_GetTick+0x10>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	200002e4 	.word	0x200002e4

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffe0 	bl	8001d44 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff90 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff49 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff5e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff90 	bl	8001e58 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5f 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffb0 	bl	8001ebc <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_FLASH_Program+0xd8>)
 8001f84:	7e1b      	ldrb	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_FLASH_Program+0x26>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e054      	b.n	8002038 <HAL_FLASH_Program+0xd0>
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_FLASH_Program+0xd8>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f98:	f000 f8a8 	bl	80020ec <FLASH_WaitForLastOperation>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d144      	bne.n	8002030 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001fac:	2301      	movs	r3, #1
 8001fae:	757b      	strb	r3, [r7, #21]
 8001fb0:	e007      	b.n	8001fc2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d102      	bne.n	8001fbe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	757b      	strb	r3, [r7, #21]
 8001fbc:	e001      	b.n	8001fc2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75bb      	strb	r3, [r7, #22]
 8001fc6:	e02d      	b.n	8002024 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	005a      	lsls	r2, r3, #1
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	eb02 0c03 	add.w	ip, r2, r3
 8001fd2:	7dbb      	ldrb	r3, [r7, #22]
 8001fd4:	0119      	lsls	r1, r3, #4
 8001fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fda:	f1c1 0620 	rsb	r6, r1, #32
 8001fde:	f1a1 0020 	sub.w	r0, r1, #32
 8001fe2:	fa22 f401 	lsr.w	r4, r2, r1
 8001fe6:	fa03 f606 	lsl.w	r6, r3, r6
 8001fea:	4334      	orrs	r4, r6
 8001fec:	fa23 f000 	lsr.w	r0, r3, r0
 8001ff0:	4304      	orrs	r4, r0
 8001ff2:	fa23 f501 	lsr.w	r5, r3, r1
 8001ff6:	b2a3      	uxth	r3, r4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4660      	mov	r0, ip
 8001ffc:	f000 f85a 	bl	80020b4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002000:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002004:	f000 f872 	bl	80020ec <FLASH_WaitForLastOperation>
 8002008:	4603      	mov	r3, r0
 800200a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_FLASH_Program+0xdc>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_FLASH_Program+0xdc>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800201e:	7dbb      	ldrb	r3, [r7, #22]
 8002020:	3301      	adds	r3, #1
 8002022:	75bb      	strb	r3, [r7, #22]
 8002024:	7dba      	ldrb	r2, [r7, #22]
 8002026:	7d7b      	ldrb	r3, [r7, #21]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3cd      	bcc.n	8001fc8 <HAL_FLASH_Program+0x60>
 800202c:	e000      	b.n	8002030 <HAL_FLASH_Program+0xc8>
      {
        break;
 800202e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_FLASH_Program+0xd8>)
 8002032:	2200      	movs	r2, #0
 8002034:	761a      	strb	r2, [r3, #24]

  return status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002040:	200002e8 	.word	0x200002e8
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_FLASH_Unlock+0x40>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00d      	beq.n	800207a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_FLASH_Unlock+0x40>)
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_FLASH_Unlock+0x44>)
 8002062:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_FLASH_Unlock+0x40>)
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_FLASH_Unlock+0x48>)
 8002068:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_FLASH_Unlock+0x40>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800207a:	79fb      	ldrb	r3, [r7, #7]
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000
 800208c:	45670123 	.word	0x45670123
 8002090:	cdef89ab 	.word	0xcdef89ab

08002094 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_FLASH_Lock+0x1c>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_FLASH_Lock+0x1c>)
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <FLASH_Program_HalfWord+0x30>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <FLASH_Program_HalfWord+0x34>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <FLASH_Program_HalfWord+0x34>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	801a      	strh	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200002e8 	.word	0x200002e8
 80020e8:	40022000 	.word	0x40022000

080020ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff fe26 	bl	8001d44 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020fa:	e010      	b.n	800211e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d00c      	beq.n	800211e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <FLASH_WaitForLastOperation+0x2e>
 800210a:	f7ff fe1b 	bl	8001d44 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	d201      	bcs.n	800211e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e025      	b.n	800216a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e8      	bne.n	80020fc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 8002138:	2220      	movs	r2, #32
 800213a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <FLASH_WaitForLastOperation+0x88>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002160:	f000 f80a 	bl	8002178 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000

08002178 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <FLASH_SetErrorCode+0x98>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 8002198:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 80021b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <FLASH_SetErrorCode+0x9c>)
 80021d8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f240 1201 	movw	r2, #257	; 0x101
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <FLASH_SetErrorCode+0x86>
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <FLASH_SetErrorCode+0x98>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	61d3      	str	r3, [r2, #28]
}  
 80021fc:	e002      	b.n	8002204 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <FLASH_SetErrorCode+0x98>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	60d3      	str	r3, [r2, #12]
}  
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40022000 	.word	0x40022000
 8002214:	200002e8 	.word	0x200002e8

08002218 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_FLASHEx_Erase+0xd0>)
 800222c:	7e1b      	ldrb	r3, [r3, #24]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_FLASHEx_Erase+0x1e>
 8002232:	2302      	movs	r3, #2
 8002234:	e053      	b.n	80022de <HAL_FLASHEx_Erase+0xc6>
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_FLASHEx_Erase+0xd0>)
 8002238:	2201      	movs	r2, #1
 800223a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d116      	bne.n	8002272 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002248:	f7ff ff50 	bl	80020ec <FLASH_WaitForLastOperation>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d141      	bne.n	80022d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 f84c 	bl	80022f0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800225c:	f7ff ff46 	bl	80020ec <FLASH_WaitForLastOperation>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_FLASHEx_Erase+0xd4>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4a20      	ldr	r2, [pc, #128]	; (80022ec <HAL_FLASHEx_Erase+0xd4>)
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	6113      	str	r3, [r2, #16]
 8002270:	e031      	b.n	80022d6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002272:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002276:	f7ff ff39 	bl	80020ec <FLASH_WaitForLastOperation>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12a      	bne.n	80022d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f04f 32ff 	mov.w	r2, #4294967295
 8002286:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	e019      	b.n	80022c4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002290:	68b8      	ldr	r0, [r7, #8]
 8002292:	f000 f849 	bl	8002328 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002296:	f24c 3050 	movw	r0, #50000	; 0xc350
 800229a:	f7ff ff27 	bl	80020ec <FLASH_WaitForLastOperation>
 800229e:	4603      	mov	r3, r0
 80022a0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_FLASHEx_Erase+0xd4>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_FLASHEx_Erase+0xd4>)
 80022a8:	f023 0302 	bic.w	r3, r3, #2
 80022ac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	601a      	str	r2, [r3, #0]
            break;
 80022ba:	e00c      	b.n	80022d6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	029a      	lsls	r2, r3, #10
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3dc      	bcc.n	8002290 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_FLASHEx_Erase+0xd0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	761a      	strb	r2, [r3, #24]

  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200002e8 	.word	0x200002e8
 80022ec:	40022000 	.word	0x40022000

080022f0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <FLASH_MassErase+0x30>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <FLASH_MassErase+0x34>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <FLASH_MassErase+0x34>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <FLASH_MassErase+0x34>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <FLASH_MassErase+0x34>)
 8002310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002314:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	200002e8 	.word	0x200002e8
 8002324:	40022000 	.word	0x40022000

08002328 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <FLASH_PageErase+0x38>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <FLASH_PageErase+0x3c>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <FLASH_PageErase+0x3c>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <FLASH_PageErase+0x3c>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <FLASH_PageErase+0x3c>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <FLASH_PageErase+0x3c>)
 800234e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002352:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200002e8 	.word	0x200002e8
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b08b      	sub	sp, #44	; 0x2c
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	e169      	b.n	8002650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800237c:	2201      	movs	r2, #1
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8158 	bne.w	800264a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a9a      	ldr	r2, [pc, #616]	; (8002608 <HAL_GPIO_Init+0x2a0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d05e      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023a4:	4a98      	ldr	r2, [pc, #608]	; (8002608 <HAL_GPIO_Init+0x2a0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d875      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023aa:	4a98      	ldr	r2, [pc, #608]	; (800260c <HAL_GPIO_Init+0x2a4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d058      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023b0:	4a96      	ldr	r2, [pc, #600]	; (800260c <HAL_GPIO_Init+0x2a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d86f      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023b6:	4a96      	ldr	r2, [pc, #600]	; (8002610 <HAL_GPIO_Init+0x2a8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d052      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023bc:	4a94      	ldr	r2, [pc, #592]	; (8002610 <HAL_GPIO_Init+0x2a8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d869      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023c2:	4a94      	ldr	r2, [pc, #592]	; (8002614 <HAL_GPIO_Init+0x2ac>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d04c      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023c8:	4a92      	ldr	r2, [pc, #584]	; (8002614 <HAL_GPIO_Init+0x2ac>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d863      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023ce:	4a92      	ldr	r2, [pc, #584]	; (8002618 <HAL_GPIO_Init+0x2b0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d046      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023d4:	4a90      	ldr	r2, [pc, #576]	; (8002618 <HAL_GPIO_Init+0x2b0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d85d      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d82a      	bhi.n	8002434 <HAL_GPIO_Init+0xcc>
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d859      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <HAL_GPIO_Init+0x80>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	08002463 	.word	0x08002463
 80023ec:	0800243d 	.word	0x0800243d
 80023f0:	0800244f 	.word	0x0800244f
 80023f4:	08002491 	.word	0x08002491
 80023f8:	08002497 	.word	0x08002497
 80023fc:	08002497 	.word	0x08002497
 8002400:	08002497 	.word	0x08002497
 8002404:	08002497 	.word	0x08002497
 8002408:	08002497 	.word	0x08002497
 800240c:	08002497 	.word	0x08002497
 8002410:	08002497 	.word	0x08002497
 8002414:	08002497 	.word	0x08002497
 8002418:	08002497 	.word	0x08002497
 800241c:	08002497 	.word	0x08002497
 8002420:	08002497 	.word	0x08002497
 8002424:	08002497 	.word	0x08002497
 8002428:	08002497 	.word	0x08002497
 800242c:	08002445 	.word	0x08002445
 8002430:	08002459 	.word	0x08002459
 8002434:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_GPIO_Init+0x2b4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800243a:	e02c      	b.n	8002496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e029      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	3304      	adds	r3, #4
 800244a:	623b      	str	r3, [r7, #32]
          break;
 800244c:	e024      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	3308      	adds	r3, #8
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e01f      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	330c      	adds	r3, #12
 800245e:	623b      	str	r3, [r7, #32]
          break;
 8002460:	e01a      	b.n	8002498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800246a:	2304      	movs	r3, #4
 800246c:	623b      	str	r3, [r7, #32]
          break;
 800246e:	e013      	b.n	8002498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002478:	2308      	movs	r3, #8
 800247a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	611a      	str	r2, [r3, #16]
          break;
 8002482:	e009      	b.n	8002498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002484:	2308      	movs	r3, #8
 8002486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	615a      	str	r2, [r3, #20]
          break;
 800248e:	e003      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
          break;
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x130>
          break;
 8002496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2bff      	cmp	r3, #255	; 0xff
 800249c:	d801      	bhi.n	80024a2 <HAL_GPIO_Init+0x13a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_Init+0x13e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d802      	bhi.n	80024b4 <HAL_GPIO_Init+0x14c>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x152>
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3b08      	subs	r3, #8
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	210f      	movs	r1, #15
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	401a      	ands	r2, r3
 80024cc:	6a39      	ldr	r1, [r7, #32]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80b1 	beq.w	800264a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_GPIO_Init+0x2b8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x2b8>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_GPIO_Init+0x2b8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002500:	4a48      	ldr	r2, [pc, #288]	; (8002624 <HAL_GPIO_Init+0x2bc>)
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_GPIO_Init+0x2c0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_GPIO_Init+0x1ec>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3f      	ldr	r2, [pc, #252]	; (800262c <HAL_GPIO_Init+0x2c4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00d      	beq.n	8002550 <HAL_GPIO_Init+0x1e8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3e      	ldr	r2, [pc, #248]	; (8002630 <HAL_GPIO_Init+0x2c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <HAL_GPIO_Init+0x1e4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <HAL_GPIO_Init+0x2cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_GPIO_Init+0x1e0>
 8002544:	2303      	movs	r3, #3
 8002546:	e006      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002548:	2304      	movs	r3, #4
 800254a:	e004      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 800254c:	2302      	movs	r3, #2
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002554:	2300      	movs	r3, #0
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	f002 0203 	and.w	r2, r2, #3
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	4093      	lsls	r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002566:	492f      	ldr	r1, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x2bc>)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	492c      	ldr	r1, [pc, #176]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	43db      	mvns	r3, r3
 8002596:	4928      	ldr	r1, [pc, #160]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 8002598:	4013      	ands	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	491e      	ldr	r1, [pc, #120]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4918      	ldr	r1, [pc, #96]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4914      	ldr	r1, [pc, #80]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	490e      	ldr	r1, [pc, #56]	; (8002638 <HAL_GPIO_Init+0x2d0>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e021      	b.n	800264a <HAL_GPIO_Init+0x2e2>
 8002606:	bf00      	nop
 8002608:	10320000 	.word	0x10320000
 800260c:	10310000 	.word	0x10310000
 8002610:	10220000 	.word	0x10220000
 8002614:	10210000 	.word	0x10210000
 8002618:	10120000 	.word	0x10120000
 800261c:	10110000 	.word	0x10110000
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	40010800 	.word	0x40010800
 800262c:	40010c00 	.word	0x40010c00
 8002630:	40011000 	.word	0x40011000
 8002634:	40011400 	.word	0x40011400
 8002638:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_GPIO_Init+0x304>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	43db      	mvns	r3, r3
 8002644:	4909      	ldr	r1, [pc, #36]	; (800266c <HAL_GPIO_Init+0x304>)
 8002646:	4013      	ands	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f ae8e 	bne.w	800237c <HAL_GPIO_Init+0x14>
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	372c      	adds	r7, #44	; 0x2c
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e001      	b.n	8002692 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	807b      	strh	r3, [r7, #2]
 80026aa:	4613      	mov	r3, r2
 80026ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ae:	787b      	ldrb	r3, [r7, #1]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026ba:	e003      	b.n	80026c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	041a      	lsls	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e0:	887a      	ldrh	r2, [r7, #2]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	041a      	lsls	r2, r3, #16
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	400b      	ands	r3, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611a      	str	r2, [r3, #16]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e034      	b.n	800277c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800271a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f245 5255 	movw	r2, #21845	; 0x5555
 8002724:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6852      	ldr	r2, [r2, #4]
 800272e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800273a:	f7ff fb03 	bl	8001d44 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002740:	e00f      	b.n	8002762 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002742:	f7ff faff 	bl	8001d44 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b27      	cmp	r3, #39	; 0x27
 800274e:	d908      	bls.n	8002762 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e00c      	b.n	800277c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e8      	bne.n	8002742 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002778:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e272      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e24c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fa70 	bl	8001d44 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fa6c 	bl	8001d44 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e200      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fa5c 	bl	8001d44 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fa58 	bl	8001d44 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1ec      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c0      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff fa11 	bl	8001d44 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fa0d 	bl	8001d44 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff f9f0 	bl	8001d44 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff f9ec 	bl	8001d44 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e180      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff f9d0 	bl	8001d44 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff f9cc 	bl	8001d44 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e160      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fa9c 	bl	8002f04 <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7ff f9b6 	bl	8001d44 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff f9b2 	bl	8001d44 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e146      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b8b      	ldr	r3, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a87      	ldr	r2, [pc, #540]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b82      	ldr	r3, [pc, #520]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7e      	ldr	r2, [pc, #504]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f973 	bl	8001d44 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7ff f96f 	bl	8001d44 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e103      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a66      	ldr	r2, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a5a      	ldr	r2, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7ff f923 	bl	8001d44 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7ff f91f 	bl	8001d44 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0b1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7ff f90d 	bl	8001d44 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff f909 	bl	8001d44 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7ff f8dd 	bl	8001d44 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7ff f8d9 	bl	8001d44 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e06d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4921      	ldr	r1, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	491b      	ldr	r1, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7ff f8ad 	bl	8001d44 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7ff f8a9 	bl	8001d44 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e035      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff f896 	bl	8001d44 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff f892 	bl	8001d44 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e026      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e01e      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e019      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x500>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d0      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4965      	ldr	r1, [pc, #404]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d040      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e073      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4936      	ldr	r1, [pc, #216]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe ffe4 	bl	8001d44 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe ffe0 	bl	8001d44 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e053      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d210      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4922      	ldr	r1, [pc, #136]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1cc>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe ff42 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08003840 	.word	0x08003840
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x30>
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8a:	e027      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8e:	613b      	str	r3, [r7, #16]
      break;
 8002e90:	e027      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0c5b      	lsrs	r3, r3, #17
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebe:	fb03 f202 	mul.w	r2, r3, r2
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e004      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	693b      	ldr	r3, [r7, #16]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	08003850 	.word	0x08003850
 8002efc:	08003860 	.word	0x08003860
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <RCC_Delay+0x34>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <RCC_Delay+0x38>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0a5b      	lsrs	r3, r3, #9
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f20:	bf00      	nop
  }
  while (Delay --);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	60fa      	str	r2, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <RCC_Delay+0x1c>
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	10624dd3 	.word	0x10624dd3

08002f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e076      	b.n	8003040 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d108      	bne.n	8002f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f62:	d009      	beq.n	8002f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
 8002f6a:	e005      	b.n	8002f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fdc2 	bl	8001b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	ea42 0103 	orr.w	r1, r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	0c1a      	lsrs	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f002 0204 	and.w	r2, r2, #4
 800301e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_SPI_Transmit+0x22>
 8003066:	2302      	movs	r3, #2
 8003068:	e12d      	b.n	80032c6 <HAL_SPI_Transmit+0x27e>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003072:	f7fe fe67 	bl	8001d44 <HAL_GetTick>
 8003076:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d002      	beq.n	800308e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003088:	2302      	movs	r3, #2
 800308a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800308c:	e116      	b.n	80032bc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Transmit+0x52>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800309e:	e10d      	b.n	80032bc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2203      	movs	r2, #3
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e6:	d10f      	bne.n	8003108 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003106:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d007      	beq.n	8003126 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d14f      	bne.n	80031d0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_SPI_Transmit+0xf6>
 8003138:	8afb      	ldrh	r3, [r7, #22]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d142      	bne.n	80031c4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	1c9a      	adds	r2, r3, #2
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003162:	e02f      	b.n	80031c4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d112      	bne.n	8003198 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
 8003196:	e015      	b.n	80031c4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003198:	f7fe fdd4 	bl	8001d44 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d803      	bhi.n	80031b0 <HAL_SPI_Transmit+0x168>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Transmit+0x16e>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031c2:	e07b      	b.n	80032bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ca      	bne.n	8003164 <HAL_SPI_Transmit+0x11c>
 80031ce:	e050      	b.n	8003272 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_Transmit+0x196>
 80031d8:	8afb      	ldrh	r3, [r7, #22]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d144      	bne.n	8003268 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003204:	e030      	b.n	8003268 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d113      	bne.n	800323c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	86da      	strh	r2, [r3, #54]	; 0x36
 800323a:	e015      	b.n	8003268 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323c:	f7fe fd82 	bl	8001d44 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d803      	bhi.n	8003254 <HAL_SPI_Transmit+0x20c>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <HAL_SPI_Transmit+0x212>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003266:	e029      	b.n	80032bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1c9      	bne.n	8003206 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa6e 	bl	8003758 <SPI_EndRxTxTransaction>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e003      	b.n	80032bc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b08c      	sub	sp, #48	; 0x30
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x26>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e198      	b.n	8003626 <HAL_SPI_TransmitReceive+0x358>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fc:	f7fe fd22 	bl	8001d44 <HAL_GetTick>
 8003300:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331a:	2b01      	cmp	r3, #1
 800331c:	d00f      	beq.n	800333e <HAL_SPI_TransmitReceive+0x70>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003324:	d107      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x68>
 800332e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800333c:	e16d      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x82>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x82>
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003356:	e160      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b04      	cmp	r3, #4
 8003362:	d003      	beq.n	800336c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2205      	movs	r2, #5
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d007      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c8:	d17c      	bne.n	80034c4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0x10a>
 80033d2:	8b7b      	ldrh	r3, [r7, #26]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d16a      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fc:	e057      	b.n	80034ae <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d11b      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x176>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x176>
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d113      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x1b8>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d014      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	b292      	uxth	r2, r2
 8003468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003486:	f7fe fc5d 	bl	8001d44 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003492:	429a      	cmp	r2, r3
 8003494:	d80b      	bhi.n	80034ae <HAL_SPI_TransmitReceive+0x1e0>
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d007      	beq.n	80034ae <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034ac:	e0b5      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1a2      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x130>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d19d      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x130>
 80034c2:	e080      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x204>
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d16f      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f8:	e05b      	b.n	80035b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d11c      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x274>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x274>
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d114      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d119      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x2b6>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d014      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003580:	2301      	movs	r3, #1
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003584:	f7fe fbde 	bl	8001d44 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003590:	429a      	cmp	r2, r3
 8003592:	d803      	bhi.n	800359c <HAL_SPI_TransmitReceive+0x2ce>
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x2d4>
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035b0:	e033      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d19e      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x22c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d199      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f8c4 	bl	8003758 <SPI_EndRxTxTransaction>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035e2:	e01a      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003610:	e003      	b.n	800361a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003622:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003626:	4618      	mov	r0, r3
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363c:	b2db      	uxtb	r3, r3
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003658:	f7fe fb74 	bl	8001d44 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4413      	add	r3, r2
 8003666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003668:	f7fe fb6c 	bl	8001d44 <HAL_GetTick>
 800366c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	015b      	lsls	r3, r3, #5
 8003674:	0d1b      	lsrs	r3, r3, #20
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800367e:	e054      	b.n	800372a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d050      	beq.n	800372a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003688:	f7fe fb5c 	bl	8001d44 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	429a      	cmp	r2, r3
 8003696:	d902      	bls.n	800369e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d13d      	bne.n	800371a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b6:	d111      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	d004      	beq.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d107      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	d10f      	bne.n	8003706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e017      	b.n	800374a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3b01      	subs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d19b      	bne.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000000 	.word	0x20000000

08003758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff ff6a 	bl	8003648 <SPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e000      	b.n	800378c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <memset>:
 8003794:	4603      	mov	r3, r0
 8003796:	4402      	add	r2, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2600      	movs	r6, #0
 80037a8:	4d0c      	ldr	r5, [pc, #48]	; (80037dc <__libc_init_array+0x38>)
 80037aa:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	f000 f828 	bl	8003808 <_init>
 80037b8:	2600      	movs	r6, #0
 80037ba:	4d0a      	ldr	r5, [pc, #40]	; (80037e4 <__libc_init_array+0x40>)
 80037bc:	4c0a      	ldr	r4, [pc, #40]	; (80037e8 <__libc_init_array+0x44>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	0800386c 	.word	0x0800386c
 80037e0:	0800386c 	.word	0x0800386c
 80037e4:	0800386c 	.word	0x0800386c
 80037e8:	08003870 	.word	0x08003870

080037ec <memcpy>:
 80037ec:	440a      	add	r2, r1
 80037ee:	4291      	cmp	r1, r2
 80037f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xc>
 80037f6:	4770      	bx	lr
 80037f8:	b510      	push	{r4, lr}
 80037fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fe:	4291      	cmp	r1, r2
 8003800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003804:	d1f9      	bne.n	80037fa <memcpy+0xe>
 8003806:	bd10      	pop	{r4, pc}

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
